/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned char u_char;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_13 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_15 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_17 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
struct wait_queue_entry;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 178 
struct writeback_control;
#line 179 
struct bdi_writeback;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_head {
   struct list_head node_list ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 292 
struct poll_table_struct;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_415 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_414 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_415 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_414 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8871 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8871 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *, char *) ;
   ssize_t (*store)(struct device_driver *, char *, size_t ) ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct irq_domain;
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14506 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14507 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14506 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14507 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_690 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_690 __anonCompField_kernel_param_160 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_692 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_692 __anonCompField_pci_dev_161 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_693 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_693 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_694 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_694 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_697 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_698 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_700 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_701 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_699 {
   struct __anonstruct_elv_700 elv ;
   struct __anonstruct_flush_701 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_702 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_697 __anonCompField_request_164 ;
   union __anonunion_698 __anonCompField_request_165 ;
   union __anonunion_699 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_702 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};
#line 53 
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2,
    PM_QOS_SUM = 3
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   s32 no_constraint_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};
#line 79 
enum freq_qos_req_type {
    FREQ_QOS_MIN = 1,
    FREQ_QOS_MAX = 2
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct freq_constraints {
   struct pm_qos_constraints min_freq ;
   struct blocking_notifier_head min_freq_notifiers ;
   struct pm_qos_constraints max_freq ;
   struct blocking_notifier_head max_freq_notifiers ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct freq_qos_request {
   enum freq_qos_req_type type ;
   struct plist_node pnode ;
   struct freq_constraints *qos ;
};
#line 101 
enum dev_pm_qos_req_type {
    DEV_PM_QOS_RESUME_LATENCY = 1,
    DEV_PM_QOS_LATENCY_TOLERANCE = 2,
    DEV_PM_QOS_MIN_FREQUENCY = 3,
    DEV_PM_QOS_MAX_FREQUENCY = 4,
    DEV_PM_QOS_FLAGS = 5
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
union __anonunion_data_971 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
   struct freq_qos_request freq ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_971 data ;
   struct device *dev ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct dev_pm_qos {
   struct pm_qos_constraints resume_latency ;
   struct pm_qos_constraints latency_tolerance ;
   struct freq_constraints freq ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *resume_latency_req ;
   struct dev_pm_qos_request *latency_tolerance_req ;
   struct dev_pm_qos_request *flags_req ;
};
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
struct lib80211_crypto_ops {
   char *name ;
   struct list_head list ;
   void *(*init)(int ) ;
   void (*deinit)(void *) ;
   int (*encrypt_mpdu)(struct sk_buff *, int , void *) ;
   int (*decrypt_mpdu)(struct sk_buff *, int , void *) ;
   int (*encrypt_msdu)(struct sk_buff *, int , void *) ;
   int (*decrypt_msdu)(struct sk_buff *, int , int , void *) ;
   int (*set_key)(void *, int , u8 *, void *) ;
   int (*get_key)(void *, int , u8 *, void *) ;
   void (*print_stats)(struct seq_file *, void *) ;
   unsigned long (*get_flags)(void *) ;
   unsigned long (*set_flags)(unsigned long , void *) ;
   int extra_mpdu_prefix_len ;
   int extra_mpdu_postfix_len ;
   int extra_msdu_prefix_len ;
   int extra_msdu_postfix_len ;
   struct module *owner ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
struct lib80211_crypt_data {
   struct list_head list ;
   struct lib80211_crypto_ops *ops ;
   void *priv ;
   atomic_t refcnt ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
struct lib80211_crypt_info {
   char *name ;
   spinlock_t *lock ;
   struct lib80211_crypt_data *crypt[4U] ;
   int tx_keyidx ;
   struct list_head crypt_deinit_list ;
   struct timer_list crypt_deinit_timer ;
   int crypt_quiesced ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_param {
   __s32 value ;
   __u8 fixed ;
   __u8 disabled ;
   __u16 flags ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_point {
   void *pointer ;
   __u16 length ;
   __u16 flags ;
};
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_freq {
   __s32 m ;
   __s16 e ;
   __u8 i ;
   __u8 flags ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_quality {
   __u8 qual ;
   __u8 level ;
   __u8 noise ;
   __u8 updated ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_discarded {
   __u32 nwid ;
   __u32 code ;
   __u32 fragment ;
   __u32 retries ;
   __u32 misc ;
};
#line 737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_missed {
   __u32 beacon ;
};
#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_mlme {
   __u16 cmd ;
   __u16 reason_code ;
   struct sockaddr addr ;
};
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_statistics {
   __u16 status ;
   struct iw_quality qual ;
   struct iw_discarded discard ;
   struct iw_missed miss ;
};
#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
union iwreq_data {
   char name[16U] ;
   struct iw_point essid ;
   struct iw_param nwid ;
   struct iw_freq freq ;
   struct iw_param sens ;
   struct iw_param bitrate ;
   struct iw_param txpower ;
   struct iw_param rts ;
   struct iw_param frag ;
   __u32 mode ;
   struct iw_param retry ;
   struct iw_point encoding ;
   struct iw_param power ;
   struct iw_quality qual ;
   struct sockaddr ap_addr ;
   struct sockaddr addr ;
   struct iw_param param ;
   struct iw_point data ;
};
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_range {
   __u32 throughput ;
   __u32 min_nwid ;
   __u32 max_nwid ;
   __u16 old_num_channels ;
   __u8 old_num_frequency ;
   __u8 scan_capa ;
   __u32 event_capa[6U] ;
   __s32 sensitivity ;
   struct iw_quality max_qual ;
   struct iw_quality avg_qual ;
   __u8 num_bitrates ;
   __s32 bitrate[32U] ;
   __s32 min_rts ;
   __s32 max_rts ;
   __s32 min_frag ;
   __s32 max_frag ;
   __s32 min_pmp ;
   __s32 max_pmp ;
   __s32 min_pmt ;
   __s32 max_pmt ;
   __u16 pmp_flags ;
   __u16 pmt_flags ;
   __u16 pm_capa ;
   __u16 encoding_size[8U] ;
   __u8 num_encoding_sizes ;
   __u8 max_encoding_tokens ;
   __u8 encoding_login_index ;
   __u16 txpower_capa ;
   __u8 num_txpower ;
   __s32 txpower[8U] ;
   __u8 we_version_compiled ;
   __u8 we_version_source ;
   __u16 retry_capa ;
   __u16 retry_flags ;
   __u16 r_time_flags ;
   __s32 min_retry ;
   __s32 max_retry ;
   __s32 min_r_time ;
   __s32 max_r_time ;
   __u16 num_channels ;
   __u8 num_frequency ;
   struct iw_freq freq[32U] ;
   __u32 enc_capa ;
};
#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_priv_args {
   __u32 cmd ;
   __u16 set_args ;
   __u16 get_args ;
   char name[16U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_request_info {
   __u16 cmd ;
   __u16 flags ;
};
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
typedef int (*iw_handler)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_handler_def {
   iw_handler *standard ;
   __u16 num_standard ;
   __u16 num_private ;
   __u16 num_private_args ;
   iw_handler *private ;
   struct iw_priv_args *private_args ;
   struct iw_statistics *(*get_wireless_stats)(struct net_device *) ;
};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_spy_data {
   int spy_number ;
   u_char spy_address[8U][6U] ;
   struct iw_quality spy_stat[8U] ;
   struct iw_quality spy_thr_low ;
   struct iw_quality spy_thr_high ;
   u_char spy_thr_under[8U] ;
};
#line 406 
struct libipw_device;
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_public_data {
   struct iw_spy_data *spy_data ;
   struct libipw_device *libipw ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ieee80211_radiotap.h"
struct ieee80211_radiotap_header {
   uint8_t it_version ;
   uint8_t it_pad ;
   __le16 it_len ;
   __le32 it_present ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_1015 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_1015 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_1017 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_1017 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_1018 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_1018 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_rx_stats {
   u32 mac_time ;
   s8 rssi ;
   u8 signal ;
   u8 noise ;
   u16 rate ;
   u8 received_channel ;
   u8 control ;
   u8 mask ;
   u8 freq ;
   u16 len ;
   u64 tsf ;
   u32 beacon_time ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_frag_entry {
   unsigned long first_frag_time ;
   unsigned int seq ;
   unsigned int last_frag ;
   struct sk_buff *skb ;
   u8 src_addr[6U] ;
   u8 dst_addr[6U] ;
};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_stats {
   unsigned int tx_unicast_frames ;
   unsigned int tx_multicast_frames ;
   unsigned int tx_fragments ;
   unsigned int tx_unicast_octets ;
   unsigned int tx_multicast_octets ;
   unsigned int tx_deferred_transmissions ;
   unsigned int tx_single_retry_frames ;
   unsigned int tx_multiple_retry_frames ;
   unsigned int tx_retry_limit_exceeded ;
   unsigned int tx_discards ;
   unsigned int rx_unicast_frames ;
   unsigned int rx_multicast_frames ;
   unsigned int rx_fragments ;
   unsigned int rx_unicast_octets ;
   unsigned int rx_multicast_octets ;
   unsigned int rx_fcs_errors ;
   unsigned int rx_discards_no_buffer ;
   unsigned int tx_discards_wrong_sa ;
   unsigned int rx_discards_undecryptable ;
   unsigned int rx_message_in_msg_fragments ;
   unsigned int rx_message_in_bad_msg_fragments ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_security {
   u16 active_key : 2 ;
   u16 enabled : 1 ;
   u16 unicast_uses_group : 1 ;
   u16 encrypt : 1 ;
   u8 auth_mode ;
   u8 encode_alg[4U] ;
   u8 key_sizes[4U] ;
   u8 keys[4U][32U] ;
   u8 level ;
   u16 flags ;
} __attribute__((__packed__));
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_hdr_3addr {
   __le16 frame_ctl ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctl ;
   u8 payload[0U] ;
} __attribute__((__packed__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_hdr_4addr {
   __le16 frame_ctl ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctl ;
   u8 addr4[6U] ;
   u8 payload[0U] ;
} __attribute__((__packed__));
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_info_element {
   u8 id ;
   u8 len ;
   u8 data[0U] ;
} __attribute__((__packed__));
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_auth {
   struct libipw_hdr_3addr header ;
   __le16 algorithm ;
   __le16 transaction ;
   __le16 status ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_channel_switch {
   u8 id ;
   u8 len ;
   u8 mode ;
   u8 channel ;
   u8 count ;
} __attribute__((__packed__));
#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_action_exchange {
   u8 token ;
   struct libipw_info_element info_element[0U] ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
union __anonunion_format_1019 {
   struct libipw_action_exchange exchange ;
   struct libipw_channel_switch channel_switch ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_action {
   struct libipw_hdr_3addr header ;
   u8 category ;
   u8 action ;
   union __anonunion_format_1019 format ;
} __attribute__((__packed__));
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_disassoc {
   struct libipw_hdr_3addr header ;
   __le16 reason ;
} __attribute__((__packed__));
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_probe_request {
   struct libipw_hdr_3addr header ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_probe_response {
   struct libipw_hdr_3addr header ;
   __le32 time_stamp[2U] ;
   __le16 beacon_interval ;
   __le16 capability ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_reassoc_request {
   struct libipw_hdr_3addr header ;
   __le16 capability ;
   __le16 listen_interval ;
   u8 current_ap[6U] ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_assoc_response {
   struct libipw_hdr_3addr header ;
   __le16 capability ;
   __le16 status ;
   __le16 aid ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_txb {
   u8 nr_frags ;
   u8 encrypted ;
   u8 rts_included ;
   u8 reserved ;
   u16 frag_size ;
   u16 payload_size ;
   struct sk_buff *fragments[0U] ;
};
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_qos_parameters {
   __le16 cw_min[4U] ;
   __le16 cw_max[4U] ;
   u8 aifs[4U] ;
   u8 flag[4U] ;
   __le16 tx_op_limit[4U] ;
} __attribute__((__packed__));
#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_qos_data {
   struct libipw_qos_parameters parameters ;
   int active ;
   int supported ;
   u8 param_count ;
   u8 old_param_count ;
};
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_tim_parameters {
   u8 tim_count ;
   u8 tim_period ;
} __attribute__((__packed__));
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_tpc_report {
   u8 transmit_power ;
   u8 link_margin ;
} __attribute__((__packed__));
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_csa {
   u8 mode ;
   u8 channel ;
   u8 count ;
} __attribute__((__packed__));
#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_quiet {
   u8 count ;
   u8 period ;
   u8 duration ;
   u8 offset ;
} __attribute__((__packed__));
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_network {
   u8 bssid[6U] ;
   u8 channel ;
   u8 ssid[33U] ;
   u8 ssid_len ;
   struct libipw_qos_data qos_data ;
   struct libipw_rx_stats stats ;
   u16 capability ;
   u8 rates[12U] ;
   u8 rates_len ;
   u8 rates_ex[16U] ;
   u8 rates_ex_len ;
   unsigned long last_scanned ;
   u8 mode ;
   u32 flags ;
   u32 last_associate ;
   u32 time_stamp[2U] ;
   u16 beacon_interval ;
   u16 listen_interval ;
   u16 atim_window ;
   u8 erp_value ;
   u8 wpa_ie[64U] ;
   size_t wpa_ie_len ;
   u8 rsn_ie[64U] ;
   size_t rsn_ie_len ;
   struct libipw_tim_parameters tim ;
   u8 power_constraint ;
   struct libipw_tpc_report tpc_report ;
   struct libipw_csa csa ;
   struct libipw_quiet quiet ;
   struct list_head list ;
};
#line 661 
enum libipw_state {
    LIBIPW_UNINITIALIZED = 0,
    LIBIPW_INITIALIZED = 1,
    LIBIPW_ASSOCIATING = 2,
    LIBIPW_ASSOCIATED = 3,
    LIBIPW_AUTHENTICATING = 4,
    LIBIPW_AUTHENTICATED = 5,
    LIBIPW_SHUTDOWN = 6
};
#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_channel {
   u32 freq ;
   u8 channel ;
   u8 flags ;
   u8 max_power ;
};
#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_geo {
   u8 name[4U] ;
   u8 bg_channels ;
   u8 a_channels ;
   struct libipw_channel bg[14U] ;
   struct libipw_channel a[132U] ;
};
#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_device {
   struct net_device *dev ;
   struct wireless_dev wdev ;
   struct libipw_security sec ;
   struct libipw_stats ieee_stats ;
   struct libipw_geo geo ;
   struct ieee80211_supported_band bg_band ;
   struct ieee80211_supported_band a_band ;
   struct list_head network_free_list ;
   struct list_head network_list ;
   struct libipw_network *networks[128U] ;
   int scans ;
   int scan_age ;
   int iw_mode ;
   struct iw_spy_data spy_data ;
   spinlock_t lock ;
   int tx_headroom ;
   u32 config ;
   int open_wep ;
   int host_encrypt ;
   int host_encrypt_msdu ;
   int host_decrypt ;
   int host_mc_decrypt ;
   int host_strip_iv_icv ;
   int host_open_frag ;
   int ieee802_1x ;
   int wpa_enabled ;
   int drop_unencrypted ;
   int privacy_invoked ;
   size_t wpa_ie_len ;
   u8 *wpa_ie ;
   struct lib80211_crypt_info crypt_info ;
   int bcrx_sta_key ;
   struct libipw_frag_entry frag_cache[4U] ;
   unsigned int frag_next_idx ;
   u16 fts ;
   u16 rts ;
   u8 bssid[6U] ;
   enum libipw_state state ;
   int mode ;
   int modulation ;
   int freq_band ;
   int abg_true ;
   int perfect_rssi ;
   int worst_rssi ;
   u16 prev_seq_ctl ;
   void (*set_security)(struct net_device *, struct libipw_security *) ;
   netdev_tx_t (*hard_start_xmit)(struct libipw_txb *, struct net_device *, int ) ;
   int (*is_queue_full)(struct net_device *, int ) ;
   int (*handle_management)(struct net_device *, struct libipw_network *, u16 ) ;
   int (*is_qos_active)(struct net_device *, struct sk_buff *) ;
   int (*handle_auth)(struct net_device *, struct libipw_auth *) ;
   int (*handle_deauth)(struct net_device *, struct libipw_disassoc *) ;
   int (*handle_action)(struct net_device *, struct libipw_action *, struct libipw_rx_stats *) ;
   int (*handle_disassoc)(struct net_device *, struct libipw_disassoc *) ;
   int (*handle_beacon)(struct net_device *, struct libipw_probe_response *, struct libipw_network *) ;
   int (*handle_probe_response)(struct net_device *, struct libipw_probe_response *, struct libipw_network *) ;
   int (*handle_probe_request)(struct net_device *, struct libipw_probe_request *, struct libipw_rx_stats *) ;
   int (*handle_assoc_response)(struct net_device *, struct libipw_assoc_response *, struct libipw_network *) ;
   int (*handle_assoc_request)(struct net_device *) ;
   int (*handle_reassoc_request)(struct net_device *, struct libipw_reassoc_request *) ;
   u8 priv[0U] ;
};
#line 1002 
struct ipw2100_priv;
#line 1003 
struct ipw2100_tx_packet;
#line 1004 
struct ipw2100_rx_packet;
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct __anonstruct_fields_1021 {
   u8 nlf : 1 ;
   u8 txType : 2 ;
   u8 intEnabled : 1 ;
   u8 reserved : 4 ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
union __anonunion_info_1020 {
   struct __anonstruct_fields_1021 fields ;
   u8 field ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct bd_status {
   union __anonunion_info_1020 info ;
} __attribute__((__packed__));
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_bd {
   u32 host_addr ;
   u32 buf_length ;
   struct bd_status status ;
   u8 num_fragments ;
   u8 reserved[6U] ;
} __attribute__((__packed__));
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_bd_queue {
   struct ipw2100_bd *drv ;
   dma_addr_t nic ;
   u32 size ;
   u32 entries ;
   u32 available ;
   u32 oldest ;
   u32 next ;
};
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_status {
   u32 frame_size ;
   u16 status_fields ;
   u8 flags ;
   u8 rssi ;
} __attribute__((__packed__));
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_status_queue {
   struct ipw2100_status *drv ;
   dma_addr_t nic ;
   u32 size ;
};
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct __anonstruct_fixed_ies_1022 {
   u16 capab_info ;
   u16 listen_interval ;
   u8 current_ap[6U] ;
};
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_wpa_assoc_frame {
   u16 fixed_ie_mask ;
   struct __anonstruct_fixed_ies_1022 fixed_ies ;
   u32 var_ie_len ;
   u8 var_ie[384U] ;
};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_cmd_header {
   u32 host_command_reg ;
   u32 host_command_reg1 ;
   u32 sequence ;
   u32 host_command_len_reg ;
   u32 host_command_params_reg[100U] ;
   u32 cmd_status_reg ;
   u32 cmd_status_params_reg[3U] ;
   u32 rxq_base_ptr ;
   u32 rxq_next_ptr ;
   u32 rxq_host_ptr ;
   u32 txq_base_ptr ;
   u32 txq_next_ptr ;
   u32 txq_host_ptr ;
   u32 tx_status_reg ;
   u32 reserved ;
   u32 status_change_reg ;
   u32 reserved1[3U] ;
   u32 *ordinal1_ptr ;
   u32 *ordinal2_ptr ;
} __attribute__((__packed__));
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_data_header {
   u32 host_command_reg ;
   u32 host_command_reg1 ;
   u8 encrypted ;
   u8 needs_encryption ;
   u8 wep_index ;
   u8 key_size ;
   u8 key[16U] ;
   u8 reserved[10U] ;
   u8 src_addr[6U] ;
   u8 dst_addr[6U] ;
   u16 fragment_size ;
} __attribute__((__packed__));
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct host_command {
   u32 host_command ;
   u32 host_command1 ;
   u32 host_command_sequence ;
   u32 host_command_length ;
   u32 host_command_parameters[100U] ;
} __attribute__((__packed__));
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct __anonstruct_c_struct_1024 {
   struct ipw2100_cmd_header *cmd ;
   dma_addr_t cmd_phys ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct __anonstruct_d_struct_1025 {
   struct ipw2100_data_header *data ;
   dma_addr_t data_phys ;
   struct libipw_txb *txb ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
union __anonunion_info_1023 {
   struct __anonstruct_c_struct_1024 c_struct ;
   struct __anonstruct_d_struct_1025 d_struct ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_tx_packet {
   int type ;
   int index ;
   union __anonunion_info_1023 info ;
   int jiffy_start ;
   struct list_head list ;
};
#line 331 
struct ipw2100_rx;
#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_rx_packet {
   struct ipw2100_rx *rxp ;
   dma_addr_t dma_addr ;
   int jiffy_start ;
   struct sk_buff *skb ;
   struct list_head list ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_ordinals {
   u32 table1_addr ;
   u32 table2_addr ;
   u32 table1_size ;
   u32 table2_size ;
};
#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_notification {
   u32 hnhdr_subtype ;
   u32 hnhdr_size ;
} __attribute__((__packed__));
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct statistic {
   int value ;
   int hi ;
   int lo ;
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_priv {
   void *ioaddr ;
   int stop_hang_check ;
   int stop_rf_kill ;
   struct libipw_device *ieee ;
   unsigned long status ;
   unsigned long config ;
   unsigned long capability ;
   int resets ;
   time64_t reset_backoff ;
   u8 essid[32U] ;
   u8 essid_len ;
   u8 bssid[6U] ;
   u8 channel ;
   int last_mode ;
   time64_t connect_start ;
   time64_t last_reset ;
   u32 channel_mask ;
   u32 fatal_error ;
   u32 fatal_errors[5U] ;
   u32 fatal_index ;
   int eeprom_version ;
   int firmware_version ;
   unsigned long hw_features ;
   int hangs ;
   u32 last_rtc ;
   int dump_raw ;
   u8 *snapshot[48U] ;
   u8 mandatory_bssid_mac[6U] ;
   u8 mac_addr[6U] ;
   int power_mode ;
   int messages_sent ;
   int short_retry_limit ;
   int long_retry_limit ;
   u32 rts_threshold ;
   u32 frag_threshold ;
   int in_isr ;
   u32 tx_rates ;
   int tx_power ;
   u32 beacon_interval ;
   char nick[33U] ;
   struct ipw2100_status_queue status_queue ;
   struct statistic txq_stat ;
   struct statistic rxq_stat ;
   struct ipw2100_bd_queue rx_queue ;
   struct ipw2100_bd_queue tx_queue ;
   struct ipw2100_rx_packet *rx_buffers ;
   struct statistic fw_pend_stat ;
   struct list_head fw_pend_list ;
   struct statistic msg_free_stat ;
   struct statistic msg_pend_stat ;
   struct list_head msg_free_list ;
   struct list_head msg_pend_list ;
   struct ipw2100_tx_packet *msg_buffers ;
   struct statistic tx_free_stat ;
   struct statistic tx_pend_stat ;
   struct list_head tx_free_list ;
   struct list_head tx_pend_list ;
   struct ipw2100_tx_packet *tx_buffers ;
   struct ipw2100_ordinals ordinals ;
   struct pci_dev *pci_dev ;
   struct proc_dir_entry *dir_dev ;
   struct net_device *net_dev ;
   struct iw_statistics wstats ;
   struct iw_public_data wireless_data ;
   struct tasklet_struct irq_tasklet ;
   struct delayed_work reset_work ;
   struct delayed_work security_work ;
   struct delayed_work wx_event_work ;
   struct delayed_work hang_check ;
   struct delayed_work rf_kill ;
   struct delayed_work scan_event ;
   int user_requested_scan ;
   time64_t suspend_at ;
   time64_t suspend_time ;
   u32 interrupts ;
   int tx_interrupts ;
   int rx_interrupts ;
   int inta_other ;
   spinlock_t low_lock ;
   struct mutex action_mutex ;
   struct mutex adapter_mutex ;
   wait_queue_head_t wait_command_queue ;
};
#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
union __anonunion_rx_data_1026 {
   unsigned char payload[2340U] ;
   struct libipw_hdr_4addr header ;
   u32 status ;
   struct ipw2100_notification notification ;
   struct ipw2100_cmd_header command ;
};
#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_rx {
   union __anonunion_rx_data_1026 rx_data ;
} __attribute__((__packed__));
#line 1128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_fw_chunk_set {
   void *data ;
   unsigned long size ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.h"
struct ipw2100_fw {
   int version ;
   struct ipw2100_fw_chunk_set fw ;
   struct ipw2100_fw_chunk_set uc ;
   struct firmware *fw_entry ;
};
#line 2195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct ipw2100_status_indicator {
   int status ;
   void (*cb)(struct ipw2100_priv *, u32 ) ;
   char *name ;
};
#line 2533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct ipw_rt_hdr {
   struct ieee80211_radiotap_header rt_hdr ;
   s8 rt_dbmsignal ;
};
#line 3561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct __anonstruct_hw_data_1031 {
   u32 addr ;
   char *name ;
};
#line 3571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct __anonstruct_nic_data_1032 {
   u32 addr ;
   char *name ;
   size_t size ;
};
#line 3579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct __anonstruct_ord_data_1033 {
   u8 index ;
   char *name ;
   char *desc ;
};
#line 5151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct security_info_params {
   u32 allowed_ciphers ;
   u16 version ;
   u8 auth_mode ;
   u8 replay_counters_number ;
   u8 unicast_using_group ;
} __attribute__((__packed__));
#line 5348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct ipw2100_wep_key {
   u8 idx ;
   u8 len ;
   u8 key[13U] ;
};
#line 8339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct ipw2100_fw_header {
   short version ;
   short mode ;
   unsigned int fw_size ;
   unsigned int uc_size ;
} __attribute__((__packed__));
#line 8495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct symbol_alive_response {
   u8 cmd_id ;
   u8 seq_num ;
   u8 ucode_rev ;
   u8 eeprom_valid ;
   u16 valid_flags ;
   u8 IEEE_addr[6U] ;
   u16 flags ;
   u16 pcb_rev ;
   u16 clock_settle_time ;
   u16 powerup_settle_time ;
   u16 hop_settle_time ;
   u8 date[3U] ;
   u8 time[2U] ;
   u8 ucode_valid ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2820 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_2820 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2821 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_2821 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2837 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_2837 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_2841 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_2841 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2842 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2843 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_2842 __anonCompField_media_link_90 ;
   union __anonunion_2843 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_2845 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_2844 {
   struct __anonstruct_dev_2845 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_2844 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_2859 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_2860 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_2858 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_2859 i2c ;
   struct __anonstruct_custom_2860 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_2858 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_3761 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_3761 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_3 {
   int arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_ipw2100_interrupt_11 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_ipw_ethtool_get_drvinfo_12 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_ipw2100_pci_driver_13 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 326 
#line 326 
int kstrtoull(char *, unsigned int, unsigned long long *);
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
__inline static int kstrtoul(char *s, unsigned int base, unsigned long *res)
{
  #line 352 
  return kstrtoull(s,base,(unsigned long long *)res);
}

#line 385 
#line 385 
int kstrtouint(char *, unsigned int, unsigned int *);
#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
__inline static int kstrtou32(char *s, unsigned int base, u32 *res)
{
  #line 400 
  return kstrtouint(s,base,res);
}

#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_13 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_15 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_17 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 59 
#line 59 
void *__memmove(void *, void *, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 63 
#line 63 
char *strcpy(char *, char *);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 88 
#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static size_t cif_strlen(char *s);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 89 
__kernel_size_t strnlen(char *, __kernel_size_t);
#line 186 
#line 750  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_spin_lock_low_lock_of_ipw2100_priv(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_spin_unlock_low_lock_of_ipw2100_priv(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 888  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(spinlock_t *lock, unsigned long flags);
#line 26 
#line 897 
static void cif_mutex_lock_adapter_mutex_of_ipw2100_priv(struct mutex *lock);
#line 26 
#line 911 
static void cif_mutex_lock_action_mutex_of_ipw2100_priv(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 879 
static void cif___ldv_spin_lock_low_lock_of_ipw2100_priv(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23 
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 25 
#line 25 
size_t ldv_strlen(char *s);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 200 
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 248 
#line 248 
void init_wait_entry(struct wait_queue_entry *, int);
#line 1128 
#line 1128 
long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
#line 1129 
#line 1129 
void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 904  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_mutex_unlock_adapter_mutex_of_ipw2100_priv(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 918  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_mutex_unlock_action_mutex_of_ipw2100_priv(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_divns(ktime_t kt, s64 div)
{
  {
    #line 171 
    int __ret_warn_on = div < 0LL;
    #line 171 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 172 
      ldv_inline_asm();
      #line 173 
      ldv_inline_asm();
    }
    #line 171 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 172 
  return kt / div;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 69 
ktime_t ktime_get_coarse_with_offset(enum tk_offsets);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_coarse_boottime(void)
{
  #line 100 
  return ktime_get_coarse_with_offset((enum tk_offsets)TK_OFFS_BOOT);
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static time64_t ktime_get_boottime_seconds(void)
{
  #line 199 
  return ktime_divns(ktime_get_coarse_boottime(),1000000000LL);
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 211 
#line 211 
unsigned long round_jiffies_relative(unsigned long);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 385 
#line 385 
extern struct workqueue_struct *system_wq;
#line 450 
#line 450 
bool mod_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
#line 465 
#line 465 
bool cancel_delayed_work(struct delayed_work *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
__inline static bool mod_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 524 
  return mod_delayed_work_on(8192,wq,dwork,delay);
}

#line 612 
#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 29 
unsigned int ioread8(void *);
#line 30 
#line 30 
unsigned int ioread16(void *);
#line 32 
#line 32 
unsigned int ioread32(void *);
#line 50 
#line 50 
void iowrite8(u8, void *);
#line 51 
#line 51 
void iowrite16(u16, void *);
#line 53 
#line 53 
void iowrite32(u32, void *);
#line 107 
#line 107 
void pci_iounmap(struct pci_dev *, void *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/pci_iomap.h"
#line 13 
void *pci_iomap(struct pci_dev *, int, unsigned long);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 222 
#line 222 
long schedule_timeout_uninterruptible(long);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 590 
#line 465  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 472  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
#line 276 
int sysfs_create_group(struct kobject *, struct attribute_group *);
#line 284 
#line 284 
void sysfs_remove_group(struct kobject *, struct attribute_group *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 436 
int driver_create_file(struct device_driver *, struct driver_attribute *);
#line 438 
#line 438 
void driver_remove_file(struct device_driver *, struct driver_attribute *);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1023 
void consume_skb(struct sk_buff *);
#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff *skb)
{
  #line 2312 
  int tmp_0;
  #line 2312 
  if ((int)skb_is_nonlinear(skb) == 0) 
                                       #line 2312 
                                       tmp_0 = (int)(skb->end - skb->tail); else 
                                                                    #line 2312 
                                                                    tmp_0 = 0;
  #line 2312 
  return tmp_0;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *dev_alloc_skb(unsigned int length)
{
  #line 2794 
  return netdev_alloc_skb((struct net_device *)0,length);
}

#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff *skb, void *to, unsigned int len)
{
  #line 3605 
  memcpy(to,(void *)skb->data,(unsigned long)len);
  #line 3606 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 983  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 4131 
#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 1085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 991  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  #line 20 
  return dma_alloc_coherent(& hwdev->dev,size,dma_handle,2592U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  #line 34 
  dma_free_coherent(& hwdev->dev,size,vaddr,dma_handle);
  #line 35 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 82 
  dma_sync_single_for_cpu(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 83 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 89 
  dma_sync_single_for_device(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 90 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ctype.h"
#line 19 
extern unsigned char _ctype[];
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ctype.h"
__inline static unsigned char __tolower(unsigned char c)
{
  #line 44 
  if (((int)_ctype[(int)c] & 1) != 0) 
                                      #line 45 
                                      c = (unsigned char)((unsigned int)c + 32U);
  #line 46 
  return c;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
#line 148 
void pm_qos_add_request(struct pm_qos_request *, int, s32);
#line 150 
#line 150 
void pm_qos_update_request(struct pm_qos_request *, s32);
#line 154 
#line 154 
void pm_qos_remove_request(struct pm_qos_request *);
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
#line 441 
void wireless_send_event(struct net_device *, unsigned int, union iwreq_data *, char *);
#line 4738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void set_wiphy_dev(struct wiphy *wiphy, struct device *dev)
{
  #line 4740 
  wiphy->dev.parent = dev;
  #line 4741 
  return;
}

#line 4807 
#line 4807 
int wiphy_register(struct wiphy *);
#line 4818 
#line 4818 
void wiphy_unregister(struct wiphy *);
#line 6082 
#line 6082 
void wiphy_rfkill_set_hw_state(struct wiphy *, bool);
#line 841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
__inline static void *libipw_priv(struct net_device *dev)
{
  #line 843 
  return (void *)(& ((struct libipw_device *)netdev_priv(dev))->priv);
}

#line 945 
#line 945 
void free_libipw(struct net_device *, int);
#line 946 
#line 946 
struct net_device *alloc_libipw(int, int);
#line 948 
#line 948 
void libipw_networks_age(struct libipw_device *, unsigned long);
#line 953 
#line 953 
netdev_tx_t libipw_xmit(struct sk_buff *, struct net_device *);
#line 954 
#line 954 
void libipw_txb_free(struct libipw_txb *);
#line 959 
#line 959 
int libipw_rx(struct libipw_device *, struct sk_buff *, struct libipw_rx_stats *);
#line 962 
#line 962 
void libipw_rx_mgt(struct libipw_device *, struct libipw_hdr_4addr *, struct libipw_rx_stats *);
#line 966 
#line 966 
struct libipw_geo *libipw_get_geo(struct libipw_device *);
#line 967 
#line 967 
void libipw_set_geo(struct libipw_device *, struct libipw_geo *);
#line 978 
#line 978 
int libipw_wx_get_scan(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 980 
#line 980 
int libipw_wx_set_encode(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 983 
#line 983 
int libipw_wx_get_encode(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 986 
#line 986 
int libipw_wx_set_encodeext(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 989 
#line 989 
int libipw_wx_get_encodeext(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw.h"
static u32 ipw_cipher_suites[4U] = {1027073U, 1027077U, 1027074U, 1027076U};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct pm_qos_request ipw2100_pm_qos_req;
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int debug = 0;
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int network_mode = 0;
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int channel = 0;
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int associate = 0;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int disable = 0;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct ipw2100_fw ipw2100_firmware;
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static u32 ipw2100_debug_level = 0U;
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static char *command_types[70U] = {(char *)"undefined", (char *)"unused", (char *)"HOST_COMPLETE", (char *)"unused", (char *)"unused", (char *)"unused", (char *)"SYSTEM_CONFIG", (char *)"unused", (char *)"SSID", (char *)"MANDATORY_BSSID", (char *)"AUTHENTICATION_TYPE", (char *)"ADAPTER_ADDRESS", (char *)"PORT_TYPE", (char *)"INTERNATIONAL_MODE", (char *)"CHANNEL", (char *)"RTS_THRESHOLD", (char *)"FRAG_THRESHOLD", (char *)"POWER_MODE", (char *)"TX_RATES", (char *)"BASIC_TX_RATES", (char *)"WEP_KEY_INFO", (char *)"unused", (char *)"unused", (char *)"unused", (char *)"unused", (char *)"WEP_KEY_INDEX", (char *)"WEP_FLAGS", (char *)"ADD_MULTICAST", (char *)"CLEAR_ALL_MULTICAST", (char *)"BEACON_INTERVAL", (char *)"ATIM_WINDOW", (char *)"CLEAR_STATISTICS", (char *)"undefined", (char *)"undefined", (char *)"undefined", (char *)"undefined", (char *)"TX_POWER_INDEX", (char *)"undefined", (char *)"undefined", (char *)"undefined", (char *)"undefined", (char *)"undefined", (char *)"undefined", (char *)"BROADCAST_SCAN", (char *)"CARD_DISABLE", (char *)"PREFERRED_BSSID", (char *)"SET_SCAN_OPTIONS", (char *)"SCAN_DWELL_TIME", (char *)"SWEEP_TABLE", (char *)"AP_OR_STATION_TABLE", (char *)"GROUP_ORDINALS", (char *)"SHORT_RETRY_LIMIT", (char *)"LONG_RETRY_LIMIT", (char *)"unused", (char *)"unused", (char *)"undefined", (char *)"undefined", (char *)"undefined", (char *)"HOST_PRE_POWER_DOWN", (char *)"unused", (char *)"undefined", (char *)"CARD_DISABLE_PHY_OFF", (char *)"MSDU_TX_RATES", (char *)"undefined", (char *)"SET_STATION_STAT_BITS", (char *)"CLEAR_STATIONS_STAT_BITS", (char *)"LEAP_ROGUE_MODE", (char *)"SET_SECURITY_INFORMATION", (char *)"DISASSOCIATION_BSSID", (char *)"SET_WPA_ASS_IE"};
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static long ipw2100_frequencies[14U] = {2412L, 2417L, 2422L, 2427L, 2432L, 2437L, 2442L, 2447L, 2452L, 2457L, 2462L, 2467L, 2472L, 2484L};
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct ieee80211_rate ipw2100_bg_rates[4U] = {{.bitrate = (unsigned short)10U}, {.flags = 1U, .bitrate = (unsigned short)20U}, {.flags = 1U, .bitrate = (unsigned short)55U}, {.flags = 1U, .bitrate = (unsigned short)110U}};
#line 307 
#line 2996 
static void ipw2100_tx_send_commands(struct ipw2100_priv *priv);
#line 308 
#line 3065 
static void ipw2100_tx_send_data(struct ipw2100_priv *priv);
#line 309 
#line 5641 
static int ipw2100_adapter_setup(struct ipw2100_priv *priv);
#line 311 
#line 5284 
static void ipw2100_queues_initialize(struct ipw2100_priv *priv);
#line 312 
#line 5291 
static void ipw2100_queues_free(struct ipw2100_priv *priv);
#line 313 
#line 5298 
static int ipw2100_queues_allocate(struct ipw2100_priv *priv);
#line 315 
#line 8455 
static int ipw2100_fw_download(struct ipw2100_priv *priv, struct ipw2100_fw *fw);
#line 317 
#line 8368 
static int ipw2100_get_firmware(struct ipw2100_priv *priv, struct ipw2100_fw *fw);
#line 319 
#line 8422 
static int ipw2100_get_fwversion(struct ipw2100_priv *priv, char *buf, size_t max);
#line 321 
#line 8441 
static int ipw2100_get_ucodeversion(struct ipw2100_priv *priv, char *buf, size_t max);
#line 323 
#line 8414 
static void ipw2100_release_firmware(struct ipw2100_priv *priv, struct ipw2100_fw *fw);
#line 325 
#line 8512 
static int ipw2100_ucode_download(struct ipw2100_priv *priv, struct ipw2100_fw *fw);
#line 327 
#line 8260 
static void ipw2100_wx_event_work(struct work_struct *work);
#line 328 
#line 8112 
static struct iw_statistics *ipw2100_wx_wireless_stats(struct net_device *dev);
#line 329 
#line 8250 
static struct iw_handler_def ipw2100_wx_handler_def;
#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void read_register(struct net_device *dev, u32 reg, u32 *val)
{
  #line 333 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 335 
  *val = ioread32(priv->ioaddr + (unsigned long)reg);
  #line 336 
  if ((ipw2100_debug_level & 67108864U) != 0U) {
    #line 336 
    int tmp_1;
    #line 336 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 336 
                                                             tmp_1 = 73; else 
                                                                    #line 336 
                                                                    tmp_1 = 85;
    #line 336 
    printk((char *)"\001",tmp_1,(char *)"read_register");
    #line 336 
    printk((char *)"r: 0x%08X => 0x%08X\n",reg,*val);
  }
  #line 338 
  return;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void write_register(struct net_device *dev, u32 reg, u32 val)
{
  #line 341 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 343 
  iowrite32(val,priv->ioaddr + (unsigned long)reg);
  #line 344 
  if ((ipw2100_debug_level & 67108864U) != 0U) {
    #line 344 
    int tmp_1;
    #line 344 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 344 
                                                             tmp_1 = 73; else 
                                                                    #line 344 
                                                                    tmp_1 = 85;
    #line 344 
    printk((char *)"\001",tmp_1,(char *)"write_register");
    #line 344 
    printk((char *)"w: 0x%08X <= 0x%08X\n",reg,val);
  }
  #line 346 
  return;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void read_register_word(struct net_device *dev, u32 reg, u16 *val)
{
  #line 350 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 352 
  *val = (unsigned short)ioread16(priv->ioaddr + (unsigned long)reg);
  #line 353 
  if ((ipw2100_debug_level & 67108864U) != 0U) {
    #line 353 
    int tmp_2;
    #line 353 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 353 
                                                             tmp_2 = 73; else 
                                                                    #line 353 
                                                                    tmp_2 = 85;
    #line 353 
    printk((char *)"\001",tmp_2,(char *)"read_register_word");
    #line 353 
    printk((char *)"r: 0x%08X => %04X\n",reg,(int)*val);
  }
  #line 355 
  return;
}

#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void read_register_byte(struct net_device *dev, u32 reg, u8 *val)
{
  #line 358 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 360 
  *val = (unsigned char)ioread8(priv->ioaddr + (unsigned long)reg);
  #line 361 
  if ((ipw2100_debug_level & 67108864U) != 0U) {
    #line 361 
    int tmp_2;
    #line 361 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 361 
                                                             tmp_2 = 73; else 
                                                                    #line 361 
                                                                    tmp_2 = 85;
    #line 361 
    printk((char *)"\001",tmp_2,(char *)"read_register_byte");
    #line 361 
    printk((char *)"r: 0x%08X => %02X\n",reg,(int)*val);
  }
  #line 363 
  return;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void write_register_word(struct net_device *dev, u32 reg, u16 val)
{
  #line 366 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 368 
  iowrite16((unsigned short)((int)val),priv->ioaddr + (unsigned long)reg);
  #line 369 
  if ((ipw2100_debug_level & 67108864U) != 0U) {
    #line 369 
    int tmp_1;
    #line 369 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 369 
                                                             tmp_1 = 73; else 
                                                                    #line 369 
                                                                    tmp_1 = 85;
    #line 369 
    printk((char *)"\001",tmp_1,(char *)"write_register_word");
    #line 369 
    printk((char *)"w: 0x%08X <= %04X\n",reg,(int)val);
  }
  #line 371 
  return;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void write_register_byte(struct net_device *dev, u32 reg, u8 val)
{
  #line 374 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 376 
  iowrite8((unsigned char)((int)val),priv->ioaddr + (unsigned long)reg);
  #line 377 
  if ((ipw2100_debug_level & 67108864U) != 0U) {
    #line 377 
    int tmp_1;
    #line 377 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 377 
                                                             tmp_1 = 73; else 
                                                                    #line 377 
                                                                    tmp_1 = 85;
    #line 377 
    printk((char *)"\001",tmp_1,(char *)"write_register_byte");
    #line 377 
    printk((char *)"w: 0x%08X =< %02X\n",reg,(int)val);
  }
  #line 379 
  return;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void read_nic_dword(struct net_device *dev, u32 addr, u32 *val)
{
  #line 382 
  write_register(dev,16U,addr & 16777212U);
  #line 384 
  read_register(dev,20U,val);
  #line 385 
  return;
}

#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void write_nic_dword(struct net_device *dev, u32 addr, u32 val)
{
  #line 389 
  write_register(dev,16U,addr & 16777212U);
  #line 391 
  write_register(dev,20U,val);
  #line 392 
  return;
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void read_nic_word(struct net_device *dev, u32 addr, u16 *val)
{
  #line 396 
  write_register(dev,16U,addr & 16777212U);
  #line 398 
  read_register_word(dev,20U,val);
  #line 399 
  return;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void write_nic_word(struct net_device *dev, u32 addr, u16 val)
{
  #line 403 
  write_register(dev,16U,addr & 16777212U);
  #line 405 
  write_register_word(dev,20U,(unsigned short)((int)val));
  #line 406 
  return;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void read_nic_byte(struct net_device *dev, u32 addr, u8 *val)
{
  #line 410 
  write_register(dev,16U,addr & 16777212U);
  #line 412 
  read_register_byte(dev,20U,val);
  #line 413 
  return;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void write_nic_byte(struct net_device *dev, u32 addr, u8 val)
{
  #line 417 
  write_register(dev,16U,addr & 16777212U);
  #line 419 
  write_register_byte(dev,20U,(unsigned char)((int)val));
  #line 420 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void write_nic_memory(struct net_device *dev, u32 addr, u32 len, u8 *buf)
{
  #line 436 
  u32 aligned_addr;
  #line 437 
  u32 aligned_len;
  #line 438 
  u32 dif_len;
  #line 439 
  u32 i;
  #line 442 
  aligned_addr = addr & 4294967292U;
  #line 443 
  dif_len = addr - aligned_addr;
  #line 444 
  if (dif_len != 0U) {
    #line 446 
    write_register(dev,16U,aligned_addr);
    #line 448 
    i = dif_len;
    #line 448 
    while (i <= 3U) {
      #line 449 
      write_register_byte(dev,i + 20U,(unsigned char)((int)*buf));
      #line 448 
      i ++;
      #line 448 
      buf ++;
    }
    #line 453 
    len -= dif_len;
    #line 454 
    aligned_addr += 4U;
  }
  #line 458 
  write_register(dev,24U,aligned_addr);
  #line 459 
  aligned_len = len & 4294967292U;
  #line 460 
  i = 0U;
  #line 460 
  while (i < aligned_len) {
    #line 461 
    write_register(dev,28U,*((u32 *)buf));
    #line 460 
    i += 4U;
    #line 460 
    buf += 4U;
    #line 460 
    aligned_addr += 4U;
  }
  #line 464 
  dif_len = len - aligned_len;
  #line 465 
  write_register(dev,16U,aligned_addr);
  #line 466 
  i = 0U;
  #line 466 
  while (i < dif_len) {
    #line 467 
    write_register_byte(dev,i + 20U,(unsigned char)((int)*buf));
    #line 466 
    i ++;
    #line 466 
    buf ++;
  }
  #line 469 
  return;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void read_nic_memory(struct net_device *dev, u32 addr, u32 len, u8 *buf)
{
  #line 474 
  u32 aligned_addr;
  #line 475 
  u32 aligned_len;
  #line 476 
  u32 dif_len;
  #line 477 
  u32 i;
  #line 480 
  aligned_addr = addr & 4294967292U;
  #line 481 
  dif_len = addr - aligned_addr;
  #line 482 
  if (dif_len != 0U) {
    #line 484 
    write_register(dev,16U,aligned_addr);
    #line 486 
    i = dif_len;
    #line 486 
    while (i <= 3U) {
      #line 487 
      read_register_byte(dev,i + 20U,buf);
      #line 486 
      i ++;
      #line 486 
      buf ++;
    }
    #line 491 
    len -= dif_len;
    #line 492 
    aligned_addr += 4U;
  }
  #line 496 
  write_register(dev,24U,aligned_addr);
  #line 497 
  aligned_len = len & 4294967292U;
  #line 498 
  i = 0U;
  #line 498 
  while (i < aligned_len) {
    #line 499 
    read_register(dev,28U,(u32 *)buf);
    #line 498 
    i += 4U;
    #line 498 
    buf += 4U;
    #line 498 
    aligned_addr += 4U;
  }
  #line 502 
  dif_len = len - aligned_len;
  #line 503 
  write_register(dev,16U,aligned_addr);
  #line 504 
  i = 0U;
  #line 504 
  while (i < dif_len) {
    #line 505 
    read_register_byte(dev,i + 20U,buf);
    #line 504 
    i ++;
    #line 504 
    buf ++;
  }
  #line 506 
  return;
}

#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static bool ipw2100_hw_is_adapter_in_system(struct net_device *dev)
{
  #line 510 
  u32 dbg;
  #line 512 
  read_register(dev,144U,& dbg);
  #line 514 
  return (_Bool)(dbg == 3579139541U);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_get_ordinal(struct ipw2100_priv *priv, u32 ord, void *val, u32 *len)
{
  #line 521 
  u32 addr;
  #line 522 
  u32 field_info;
  #line 523 
  u16 field_len;
  #line 524 
  u16 field_count;
  #line 525 
  u32 total_length;
  #line 520 
  struct ipw2100_ordinals *ordinals = & priv->ordinals;
  #line 527 
  if (ordinals->table1_addr == 0U) {
    #line 528 
    printk((char *)"\001");
    #line 530 
    return -22;
  }
  #line 533 
  if (ord != 0U && ordinals->table1_size > ord) {
    #line 534 
    if (*len <= 3U) {
      #line 535 
      *len = 4U;
      #line 537 
      printk((char *)"\001",4UL);
      #line 541 
      return -22;
    }
    #line 544 
    read_nic_dword(priv->net_dev,ordinals->table1_addr + (ord << 2),& addr);
    #line 546 
    read_nic_dword(priv->net_dev,addr,(u32 *)val);
    #line 548 
    *len = 4U;
    #line 550 
    return 0;
  }
  #line 553 
  if (ord > 999U && ordinals->table2_size + 1000U > ord) {
    #line 555 
    ord += 4294966296U;
    #line 558 
    read_nic_dword(priv->net_dev,ordinals->table2_addr + (ord << 3),& addr);
    #line 563 
    read_nic_dword(priv->net_dev,(ordinals->table2_addr + (ord << 3)) + 4U,& field_info);
    #line 568 
    field_len = *((u16 *)(& field_info));
    #line 571 
    field_count = *((u16 *)(& field_info) + 1U);
    #line 574 
    total_length = (unsigned int)((int)field_len * (int)field_count);
    #line 575 
    if (*len < total_length) {
      #line 576 
      *len = total_length;
      #line 577 
      return -22;
    }
    #line 580 
    *len = total_length;
    #line 581 
    if (total_length == 0U) 
                            #line 582 
                            return 0;
    #line 585 
    read_nic_memory(priv->net_dev,addr,total_length,(u8 *)val);
    #line 587 
    return 0;
  }
  #line 590 
  printk((char *)"\001",ord);
  #line 593 
  return -22;
}

#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_ordinal(struct ipw2100_priv *priv, u32 ord, u32 *val, u32 *len)
{
  #line 600 
  u32 addr;
  #line 599 
  struct ipw2100_ordinals *ordinals = & priv->ordinals;
  #line 602 
  if (ord != 0U && ordinals->table1_size > ord) {
    #line 603 
    if (*len != 4U) {
      #line 604 
      *len = 4U;
      #line 605 
      if ((ipw2100_debug_level & 4U) != 0U) {
        #line 605 
        int tmp_0;
        #line 605 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 605 
                                                                 tmp_0 = 73; else 
                                                                    #line 605 
                                                                    tmp_0 = 85;
        #line 605 
        printk((char *)"\001",tmp_0,(char *)"ipw2100_set_ordinal");
        #line 605 
        printk((char *)"wrong size\n");
      }
      #line 606 
      return -22;
    }
    #line 609 
    read_nic_dword(priv->net_dev,ordinals->table1_addr + (ord << 2),& addr);
    #line 612 
    write_nic_dword(priv->net_dev,addr,*val);
    #line 614 
    *len = 4U;
    #line 616 
    return 0;
  }
  #line 619 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 619 
    int tmp_2;
    #line 619 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 619 
                                                             tmp_2 = 73; else 
                                                                    #line 619 
                                                                    tmp_2 = 85;
    #line 619 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_set_ordinal");
    #line 619 
    printk((char *)"wrong table\n");
  }
  #line 620 
  if (ord > 999U && ordinals->table2_size + 1000U > ord) 
                                                         #line 621 
                                                         return -22;
  #line 623 
  return -22;
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static char *snprint_line(char *buf, size_t count, u8 *data, u32 len, u32 ofs)
{
  #line 629 
  int out;
  #line 629 
  int i;
  #line 629 
  int j;
  #line 629 
  int l;
  #line 630 
  char c;
  #line 632 
  out = snprintf(buf,count,(char *)"%08X",ofs);
  #line 634 
  l = 0;
  #line 634 
  i = 0;
  #line 634 
  while (i <= 1) {
    {
      #line 635 
      out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
               (char *)" ") + out;
      #line 636 
      j = 0;
      #line 636 
      while (j <= 7 && (unsigned int)l < len) {
        #line 638 
        out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)"%02X ",(int)*(data + (unsigned long)(i * 8 + j))) + out;
        #line 636 
        j ++;
        #line 636 
        l ++;
      }
      #line 639 
      while (j <= 7) {
        #line 640 
        out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)"   ") + out;
        #line 639 
        j ++;
      }
    }
    #line 634 
    i ++;
  }
  #line 643 
  out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)" ") + out;
  #line 644 
  l = 0;
  #line 644 
  i = 0;
  #line 644 
  while (i <= 1) {
    {
      #line 645 
      out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)" ") + out;
      #line 646 
      j = 0;
      #line 646 
      while (j <= 7 && (unsigned int)l < len) {
        {
          #line 647 
          c = (char)*(data + (unsigned long)(i * 8 + j));
          #line 648 
          if ((int)c < 0 || ((int)_ctype[(int)((unsigned char)c)] & 151) == 0) 
            #line 649 
            c = (char)46;
          #line 651 
          out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)"%c",(int)c) + out;
        }
        #line 646 
        j ++;
        #line 646 
        l ++;
      }
      #line 654 
      while (j <= 7) {
        #line 655 
        out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)" ") + out;
        #line 654 
        j ++;
      }
    }
    #line 644 
    i ++;
  }
  #line 658 
  return buf;
}

#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void printk_buf(int level, u8 *data, u32 len)
{
  #line 663 
  char line[81U];
  #line 664 
  u32 ofs = 0U;
  #line 665 
  if ((ipw2100_debug_level & (unsigned int)level) == 0U) 
                                                         #line 666 
                                                         return;
  #line 668 
  while (len != 0U) {
    #line 671 
    u32 tmp;
    #line 673 
    u32 __UNIQUE_ID___x561;
    #line 673 
    u32 tmp_2;
    #line 671 
    u32 __UNIQUE_ID___x559;
    #line 669 
    ;
    {
      #line 671 
      __UNIQUE_ID___x559 = len;
      #line 671 
      unsigned int __UNIQUE_ID___y560 = 16U;
      #line 671 
      if (__UNIQUE_ID___x559 < __UNIQUE_ID___y560) 
                                                   #line 671 
                                                   tmp = __UNIQUE_ID___x559; else 
                                                                    #line 671 
                                                                    tmp = __UNIQUE_ID___y560;
      }
    #line 669 
    ;
    #line 669 
    printk((char *)"\001",snprint_line((char *)(& line),81UL,data + (unsigned long)ofs,tmp,ofs));
    #line 672 
    ofs += 16U;
    {
      #line 673 
      __UNIQUE_ID___x561 = len;
      #line 673 
      unsigned int __UNIQUE_ID___y562 = 16U;
      #line 673 
      if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                   #line 673 
                                                   tmp_2 = __UNIQUE_ID___x561; else 
                                                                    #line 673 
                                                                    tmp_2 = __UNIQUE_ID___y562;
      }
    #line 673 
    len -= tmp_2;
  }
  #line 676 
  return;
}

#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void schedule_reset(struct ipw2100_priv *priv)
{
  #line 681 
  time64_t now = ktime_get_boottime_seconds();
  #line 686 
  if (priv->reset_backoff != 0LL && now - priv->last_reset > priv->reset_backoff) 
    #line 688 
    priv->reset_backoff = 0LL;
  #line 690 
  priv->last_reset = now;
  #line 692 
  if ((priv->status & 536870912UL) == 0UL) {
    #line 693 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 693 
      int tmp_1;
      #line 693 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 693 
                                                               tmp_1 = 73; else 
                                                                    #line 693 
                                                                    tmp_1 = 85;
      #line 693 
      printk((char *)"\001",tmp_1,(char *)"schedule_reset");
      #line 693 
      printk((char *)"%s: Scheduling firmware restart (%llds).\n",(char *)(& (priv->net_dev)->name),priv->reset_backoff);
    }
    #line 695 
    netif_carrier_off(priv->net_dev);
    #line 696 
    netif_stop_queue(priv->net_dev);
    #line 697 
    priv->status |= 536870912UL;
    #line 698 
    if (priv->reset_backoff != 0LL) 
                                    #line 699 
                                    cif_schedule_delayed_work(& priv->reset_work,(unsigned long)(priv->reset_backoff * 250LL)); else 
                                                                    #line 702 
                                                                    cif_schedule_delayed_work(& priv->reset_work,0UL);
    #line 704 
    if (priv->reset_backoff <= 9LL) 
                                    #line 705 
                                    (priv->reset_backoff) ++;
    #line 707 
    __wake_up(& priv->wait_command_queue,1U,1,(void *)0);
  }
  else 
    #line 709 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 709 
      int tmp_3;
      #line 709 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 709 
                                                               tmp_3 = 73; else 
                                                                    #line 709 
                                                                    tmp_3 = 85;
      #line 709 
      printk((char *)"\001",tmp_3,(char *)"schedule_reset");
      #line 709 
      printk((char *)"%s: Firmware restart already in progress.\n",(char *)(& (priv->net_dev)->name));
    }
  #line 711 
  return;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_hw_send_command(struct ipw2100_priv *priv, struct host_command *cmd)
{
  #line 762 
  void *__mptr;
  #line 794 
  long __ret;
  #line 718 
  struct list_head *element;
  #line 719 
  struct ipw2100_tx_packet *packet;
  #line 720 
  unsigned long flags;
  #line 721 
  int err = 0;
  #line 723 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 723 
    int tmp_0;
    #line 723 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 723 
                                                             tmp_0 = 73; else 
                                                                    #line 723 
                                                                    tmp_0 = 85;
    #line 723 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_hw_send_command");
    #line 723 
    printk((char *)"Sending %s command (#%d), %d bytes\n",command_types[cmd->host_command],cmd->host_command,cmd->host_command_length);
  }
  #line 726 
  printk_buf(32,(u8 *)(& cmd->host_command_parameters),cmd->host_command_length);
  #line 729 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 731 
  if (priv->fatal_error != 0U) {
    #line 732 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 732 
      int tmp_2;
      #line 732 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 732 
                                                               tmp_2 = 73; else 
                                                                    #line 732 
                                                                    tmp_2 = 85;
      #line 732 
      printk((char *)"\001",tmp_2,(char *)"ipw2100_hw_send_command");
      #line 732 
      printk((char *)"Attempt to send command while hardware in fatal error condition.\n");
    }
    #line 734 
    err = -5;
    #line 735 
    goto fail_unlock;
  }
  #line 738 
  if ((priv->status & 4UL) == 0UL) {
    #line 739 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 739 
      int tmp_4;
      #line 739 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 739 
                                                               tmp_4 = 73; else 
                                                                    #line 739 
                                                                    tmp_4 = 85;
      #line 739 
      printk((char *)"\001",tmp_4,(char *)"ipw2100_hw_send_command");
      #line 739 
      printk((char *)"Attempt to send command while hardware is not running.\n");
    }
    #line 741 
    err = -5;
    #line 742 
    goto fail_unlock;
  }
  #line 745 
  if ((priv->status & 2UL) != 0UL) {
    #line 746 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 746 
      int tmp_6;
      #line 746 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 746 
                                                               tmp_6 = 73; else 
                                                                    #line 746 
                                                                    tmp_6 = 85;
      #line 746 
      printk((char *)"\001",tmp_6,(char *)"ipw2100_hw_send_command");
      #line 746 
      printk((char *)"Attempt to send command while another command is pending.\n");
    }
    #line 748 
    err = -16;
    #line 749 
    goto fail_unlock;
  }
  #line 752 
  if (list_empty(& priv->msg_free_list) != 0) {
    #line 753 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 753 
      int tmp_8;
      #line 753 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 753 
                                                               tmp_8 = 73; else 
                                                                    #line 753 
                                                                    tmp_8 = 85;
      #line 753 
      printk((char *)"\001",tmp_8,(char *)"ipw2100_hw_send_command");
      #line 753 
      printk((char *)"no available msg buffers\n");
    }
    #line 754 
    goto fail_unlock;
  }
  #line 757 
  priv->status |= 2UL;
  #line 758 
  (priv->messages_sent) ++;
  #line 760 
  element = priv->msg_free_list.next;
  #line 762 
  __mptr = (void *)element;
  #line 762 
  packet = ((struct ipw2100_tx_packet *)(__mptr + 18446744073709551576U));
  #line 763 
  packet->jiffy_start = (int)jiffies;
  #line 766 
  (packet->info.c_struct.cmd)->host_command_reg = cmd->host_command;
  #line 767 
  (packet->info.c_struct.cmd)->host_command_reg1 = cmd->host_command1;
  #line 768 
  (packet->info.c_struct.cmd)->host_command_len_reg = cmd->host_command_length;
  #line 770 
  (packet->info.c_struct.cmd)->sequence = cmd->host_command_sequence;
  #line 772 
  memcpy((void *)(& (packet->info.c_struct.cmd)->host_command_params_reg),(void *)(& cmd->host_command_parameters),400UL);
  #line 776 
  list_del(element);
  #line 777 
  (priv->msg_free_stat.value) --;
  #line 777 
  ;
  #line 777 
  if (priv->msg_free_stat.value < priv->msg_free_stat.lo) 
                                                          #line 777 
                                                          priv->msg_free_stat.lo = priv->msg_free_stat.value;
  #line 779 
  list_add_tail(element,& priv->msg_pend_list);
  #line 780 
  (priv->msg_pend_stat.value) ++;
  #line 780 
  ;
  #line 780 
  if (priv->msg_pend_stat.value > priv->msg_pend_stat.hi) 
                                                          #line 780 
                                                          priv->msg_pend_stat.hi = priv->msg_pend_stat.value;
  #line 782 
  ipw2100_tx_send_commands(priv);
  #line 783 
  ipw2100_tx_send_data(priv);
  #line 785 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 794 
  __ret = 500L;
  #line 794 
  __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c",794,0);
  {
    #line 794 
    bool __cond_0;
    #line 794 
    __cond_0 = (_Bool)((priv->status & 2UL) == 0UL);
    #line 794 
    if ((int)__cond_0 != 0 && __ret == 0L) 
                                           #line 794 
                                           __ret = 1L;
    #line 794 
    if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
      #line 794 
      long __ret_0;
      {
        #line 794 
        struct wait_queue_entry __wq_entry;
        #line 794 
        __ret_0 = 500L;
        #line 794 
        init_wait_entry(& __wq_entry,0);
        #line 794 
        while (1) {
          #line 794 
          bool __cond;
          #line 794 
          long __int = prepare_to_wait_event(& priv->wait_command_queue,& __wq_entry,1);
          #line 794 
          __cond = (_Bool)((priv->status & 2UL) == 0UL);
          #line 794 
          if ((int)__cond != 0 && __ret_0 == 0L) 
                                                 #line 794 
                                                 __ret_0 = 1L;
          #line 794 
          if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                               #line 794 
                                                               break;
          #line 794 
          if (__int != 0L) {
            #line 794 
            __ret_0 = __int;
            #line 794 
            goto __out_0;
          }
          #line 794 
          __ret_0 = schedule_timeout(__ret_0);
        }
        #line 794 
        finish_wait(& priv->wait_command_queue,& __wq_entry);
        #line 794 
        __out_0: 
                 #line 794 
        ;
        }
      #line 794 
      __ret = __ret_0;
    }
  }
  #line 793 
  err = (int)__ret;
  #line 799 
  if (err == 0) {
    #line 800 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 800 
      int tmp_17;
      #line 800 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 800 
                                                               tmp_17 = 73; else 
                                                                    #line 800 
                                                                    tmp_17 = 85;
      #line 800 
      printk((char *)"\001",tmp_17,(char *)"ipw2100_hw_send_command");
      #line 800 
      printk((char *)"Command completion failed out after %dms.\n",2000);
    }
    #line 802 
    priv->fatal_error = 285212672U;
    #line 803 
    priv->status &= 18446744073709551613UL;
    #line 804 
    schedule_reset(priv);
    #line 805 
    return -5;
  }
  #line 808 
  if (priv->fatal_error != 0U) {
    #line 809 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 811 
    return -5;
  }
  #line 819 
  schedule_timeout_uninterruptible((long)msecs_to_jiffies(10U));
  #line 821 
  return 0;
  #line 823 
  fail_unlock: 
               #line 823 
  ;
  #line 824 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 826 
  return err;
}

#line 833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_verify(struct ipw2100_priv *priv)
{
  #line 835 
  u32 data1;
  #line 835 
  u32 data2;
  #line 836 
  u32 address;
  #line 838 
  u32 val1 = 1985229328U;
  #line 839 
  u32 val2 = 4275878552U;
  #line 842 
  address = 144U;
  #line 842 
  while (address <= 254U) {
    #line 844 
    read_register(priv->net_dev,address,& data1);
    #line 845 
    if (data1 != 3579139541U) 
                              #line 846 
                              return -5;
    #line 843 
    address += 4U;
  }
  #line 850 
  address = 0U;
  #line 850 
  while (address <= 4U) {
    #line 852 
    write_register(priv->net_dev,562U,val1);
    #line 854 
    write_register(priv->net_dev,566U,val2);
    #line 856 
    read_register(priv->net_dev,562U,& data1);
    #line 858 
    read_register(priv->net_dev,566U,& data2);
    #line 860 
    if (val1 == data1 && val2 == data2) 
                                        #line 861 
                                        return 0;
    #line 850 
    address ++;
  }
  #line 864 
  return -5;
}

#line 877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wait_for_card_state(struct ipw2100_priv *priv, int state)
{
  #line 879 
  int i;
  #line 880 
  u32 card_state;
  #line 882 
  int err;
  #line 881 
  u32 len = 4U;
  #line 884 
  i = 0;
  #line 884 
  while (i <= 100000) {
    #line 885 
    err = ipw2100_get_ordinal(priv,157U,(void *)(& card_state),& len);
    #line 887 
    if (err != 0) {
      #line 888 
      if ((ipw2100_debug_level & 4U) != 0U) {
        #line 888 
        int tmp_0;
        #line 888 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 888 
                                                                 tmp_0 = 73; else 
                                                                    #line 888 
                                                                    tmp_0 = 85;
        #line 888 
        printk((char *)"\001",tmp_0,(char *)"ipw2100_wait_for_card_state");
        #line 888 
        printk((char *)"Query of CARD_DISABLED ordinal ");
      }
      #line 890 
      return 0;
    }
    #line 896 
    if (card_state == (unsigned int)state || ((priv->status & 8UL) == 0UL) == state) {
      #line 899 
      if (state == 0) 
                      #line 900 
                      priv->status |= 8UL; else 
                                                #line 902 
                                                priv->status &= 18446744073709551607UL;
      #line 904 
      return 0;
    }
    #line 907 
    __const_udelay(214750UL);
    #line 884 
    i += 50;
  }
  #line 910 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 910 
    int tmp_2;
    #line 910 
    char *tmp_3;
    #line 910 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 910 
                                                             tmp_2 = 73; else 
                                                                    #line 910 
                                                                    tmp_2 = 85;
    #line 910 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_wait_for_card_state");
    #line 910 
    if (state != 0) 
                    #line 910 
                    tmp_3 = (char *)"DISABLED"; else 
                                                     #line 910 
                                                     tmp_3 = (char *)"ENABLED";
    #line 910 
    printk((char *)"ipw2100_wait_for_card_state to %s state timed out\n",tmp_3);
  }
  #line 912 
  return -5;
}

#line 920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int sw_reset_and_clock(struct ipw2100_priv *priv)
{
  #line 922 
  int i;
  #line 923 
  u32 r;
  #line 926 
  write_register(priv->net_dev,32U,128U);
  #line 930 
  i = 0;
  #line 930 
  while (i <= 999) {
    #line 931 
    __const_udelay(42950UL);
    #line 934 
    read_register(priv->net_dev,32U,& r);
    #line 935 
    if ((r & 1U) != 0U) 
                        #line 936 
                        break;
    #line 930 
    i ++;
  }
  #line 939 
  if (i == 1000) 
                 #line 940 
                 return -5;
  #line 944 
  write_register(priv->net_dev,36U,4U);
  #line 948 
  i = 0;
  #line 948 
  while (i <= 9999) {
    #line 949 
    __const_udelay(859000UL);
    #line 952 
    read_register(priv->net_dev,36U,& r);
    #line 953 
    if ((r & 1U) != 0U) 
                        #line 954 
                        break;
    #line 948 
    i ++;
  }
  #line 957 
  if (i == 10000) 
                  #line 958 
                  return -5;
  #line 961 
  read_register(priv->net_dev,36U,& r);
  #line 962 
  write_register(priv->net_dev,36U,r | 2U);
  #line 965 
  return 0;
}

#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_download_firmware(struct ipw2100_priv *priv)
{
  #line 981 
  u32 address;
  #line 982 
  int err;
  #line 989 
  if (priv->fatal_error != 0U) {
    #line 990 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name),priv->fatal_error);
    #line 993 
    return -22;
  }
  #line 996 
  if (ipw2100_firmware.version == 0) {
    #line 997 
    err = ipw2100_get_firmware(priv,& ipw2100_firmware);
    #line 998 
    if (err != 0) {
      #line 999 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
      #line 1001 
      priv->fatal_error = 301989888U;
      #line 1002 
      goto fail;
    }
  }
  #line 1014 
  priv->firmware_version = ipw2100_firmware.version;
  #line 1017 
  err = sw_reset_and_clock(priv);
  #line 1018 
  if (err != 0) {
    #line 1019 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
    #line 1021 
    goto fail;
  }
  #line 1024 
  err = ipw2100_verify(priv);
  #line 1025 
  if (err != 0) {
    #line 1026 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
    #line 1028 
    goto fail;
  }
  #line 1032 
  write_nic_dword(priv->net_dev,3145952U,2147483648U);
  #line 1036 
  write_register(priv->net_dev,32U,0U);
  #line 1039 
  err = ipw2100_ucode_download(priv,& ipw2100_firmware);
  #line 1040 
  if (err != 0) {
    #line 1041 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
    #line 1043 
    goto fail;
  }
  #line 1047 
  write_nic_dword(priv->net_dev,3145952U,0U);
  #line 1051 
  err = sw_reset_and_clock(priv);
  #line 1052 
  if (err != 0) {
    #line 1053 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
    #line 1056 
    goto fail;
  }
  #line 1060 
  err = ipw2100_fw_download(priv,& ipw2100_firmware);
  #line 1061 
  if (err != 0) {
    #line 1062 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
    #line 1064 
    goto fail;
  }
  #line 1079 
  address = 193024U;
  #line 1079 
  while (address <= 193807U) {
    #line 1081 
    write_nic_dword(priv->net_dev,address,0U);
    #line 1080 
    address += 4U;
  }
  #line 1082 
  address = 194064U;
  #line 1082 
  while (address <= 194095U) {
    #line 1084 
    write_nic_dword(priv->net_dev,address,0U);
    #line 1083 
    address += 4U;
  }
  #line 1085 
  address = 195072U;
  #line 1085 
  while (address <= 195103U) {
    #line 1087 
    write_nic_dword(priv->net_dev,address,0U);
    #line 1086 
    address += 4U;
  }
  #line 1088 
  address = 195584U;
  #line 1088 
  while (address <= 195599U) {
    #line 1090 
    write_nic_dword(priv->net_dev,address,0U);
    #line 1089 
    address += 4U;
  }
  #line 1091 
  address = 196480U;
  #line 1091 
  while (address <= 196607U) {
    #line 1093 
    write_nic_dword(priv->net_dev,address,0U);
    #line 1092 
    address += 4U;
  }
  #line 1095 
  return 0;
  #line 1097 
  fail: 
        #line 1097 
  ;
  #line 1098 
  ipw2100_release_firmware(priv,& ipw2100_firmware);
  #line 1099 
  return err;
}

#line 1102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void ipw2100_enable_interrupts(struct ipw2100_priv *priv)
{
  #line 1104 
  if ((priv->status & 2048UL) != 0UL) 
                                      #line 1105 
                                      return;
  #line 1106 
  priv->status |= 2048UL;
  #line 1107 
  write_register(priv->net_dev,12U,3238068243U);
  #line 1108 
  return;
}

#line 1110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void ipw2100_disable_interrupts(struct ipw2100_priv *priv)
{
  #line 1112 
  if ((priv->status & 2048UL) == 0UL) 
                                      #line 1113 
                                      return;
  #line 1114 
  priv->status &= 18446744073709549567UL;
  #line 1115 
  write_register(priv->net_dev,12U,0U);
  #line 1116 
  return;
}

#line 1118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_initialize_ordinals(struct ipw2100_priv *priv)
{
  #line 1120 
  struct ipw2100_ordinals *ord = & priv->ordinals;
  #line 1122 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1122 
    int tmp_0;
    #line 1122 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1122 
                                                             tmp_0 = 73; else 
                                                                    #line 1122 
                                                                    tmp_0 = 85;
    #line 1122 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_initialize_ordinals");
    #line 1122 
    printk((char *)"enter\n");
  }
  #line 1124 
  read_register(priv->net_dev,896U,& ord->table1_addr);
  #line 1127 
  read_register(priv->net_dev,900U,& ord->table2_addr);
  #line 1130 
  read_nic_dword(priv->net_dev,ord->table1_addr,& ord->table1_size);
  #line 1131 
  read_nic_dword(priv->net_dev,ord->table2_addr,& ord->table2_size);
  #line 1133 
  ord->table2_size &= 65535U;
  #line 1135 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1135 
    int tmp_2;
    #line 1135 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1135 
                                                             tmp_2 = 73; else 
                                                                    #line 1135 
                                                                    tmp_2 = 85;
    #line 1135 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_initialize_ordinals");
    #line 1135 
    printk((char *)"table 1 size: %d\n",ord->table1_size);
  }
  #line 1136 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1136 
    int tmp_4;
    #line 1136 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1136 
                                                             tmp_4 = 73; else 
                                                                    #line 1136 
                                                                    tmp_4 = 85;
    #line 1136 
    printk((char *)"\001",tmp_4,(char *)"ipw2100_initialize_ordinals");
    #line 1136 
    printk((char *)"table 2 size: %d\n",ord->table2_size);
  }
  #line 1137 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1137 
    int tmp_6;
    #line 1137 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1137 
                                                             tmp_6 = 73; else 
                                                                    #line 1137 
                                                                    tmp_6 = 85;
    #line 1137 
    printk((char *)"\001",tmp_6,(char *)"ipw2100_initialize_ordinals");
    #line 1137 
    printk((char *)"exit\n");
  }
  #line 1139 
  return;
}

#line 1140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void ipw2100_hw_set_gpio(struct ipw2100_priv *priv)
{
  #line 1142 
  u32 reg = 0U;
  #line 1147 
  reg = 8392U;
  #line 1149 
  write_register(priv->net_dev,48U,reg);
  #line 1150 
  return;
}

#line 1152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int rf_kill_active(struct ipw2100_priv *priv)
{
  #line 1159 
  int i;
  #line 1157 
  unsigned short value = (unsigned short)0U;
  #line 1158 
  u32 reg = 0U;
  #line 1161 
  if ((priv->hw_features & 1UL) == 0UL) {
    #line 1162 
    wiphy_rfkill_set_hw_state((priv->ieee)->wdev.wiphy,(_Bool)0);
    #line 1163 
    priv->status &= 18446744073709547519UL;
    #line 1164 
    return 0;
  }
  #line 1167 
  i = 0;
  #line 1167 
  while (i <= 4) {
    #line 1168 
    __const_udelay(171800UL);
    #line 1169 
    read_register(priv->net_dev,48U,& reg);
    #line 1170 
    value = (unsigned short)(((int)value << 1) | ((reg & 65536U) == 0U));
    #line 1167 
    i ++;
  }
  #line 1173 
  if ((unsigned int)value == 0U) {
    #line 1174 
    wiphy_rfkill_set_hw_state((priv->ieee)->wdev.wiphy,(_Bool)1);
    #line 1175 
    priv->status |= 4096UL;
  }
  else {
    #line 1177 
    wiphy_rfkill_set_hw_state((priv->ieee)->wdev.wiphy,(_Bool)0);
    #line 1178 
    priv->status &= 18446744073709547519UL;
  }
  #line 1181 
  return (unsigned int)value == 0U;
}

#line 1184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_get_hw_features(struct ipw2100_priv *priv)
{
  #line 1186 
  u32 addr;
  #line 1186 
  u32 len;
  #line 1187 
  u32 val;
  #line 1192 
  len = 4U;
  #line 1193 
  if (ipw2100_get_ordinal(priv,204U,(void *)(& addr),& len) != 0) {
    #line 1195 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 1195 
      int tmp_0;
      #line 1195 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1195 
                                                               tmp_0 = 73; else 
                                                                    #line 1195 
                                                                    tmp_0 = 85;
      #line 1195 
      printk((char *)"\001",tmp_0,(char *)"ipw2100_get_hw_features");
      #line 1195 
      printk((char *)"failed querying ordinals at line %d\n",1195);
    }
    #line 1197 
    return -5;
  }
  #line 1200 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1200 
    int tmp_3;
    #line 1200 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1200 
                                                             tmp_3 = 73; else 
                                                                    #line 1200 
                                                                    tmp_3 = 85;
    #line 1200 
    printk((char *)"\001",tmp_3,(char *)"ipw2100_get_hw_features");
    #line 1200 
    printk((char *)"EEPROM address: %08X\n",addr);
  }
  #line 1205 
  read_nic_dword(priv->net_dev,addr + 252U,& val);
  #line 1206 
  priv->eeprom_version = (int)(val >> 24);
  #line 1207 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1207 
    int tmp_5;
    #line 1207 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1207 
                                                             tmp_5 = 73; else 
                                                                    #line 1207 
                                                                    tmp_5 = 85;
    #line 1207 
    printk((char *)"\001",tmp_5,(char *)"ipw2100_get_hw_features");
    #line 1207 
    printk((char *)"EEPROM version: %d\n",priv->eeprom_version);
  }
  #line 1216 
  read_nic_dword(priv->net_dev,addr + 32U,& val);
  #line 1217 
  if ((val & 16777216U) == 0U) 
                               #line 1218 
                               priv->hw_features |= 1UL;
  #line 1220 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1220 
    int tmp_7;
    #line 1220 
    char *tmp_8;
    #line 1220 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1220 
                                                             tmp_7 = 73; else 
                                                                    #line 1220 
                                                                    tmp_7 = 85;
    #line 1220 
    printk((char *)"\001",tmp_7,(char *)"ipw2100_get_hw_features");
    #line 1220 
    if ((priv->hw_features & 1UL) != 0UL) 
                                          #line 1220 
                                          tmp_8 = (char *)""; else 
                                                                   #line 1220 
                                                                   tmp_8 = (char *)"not ";
    #line 1220 
    printk((char *)"HW RF Kill: %ssupported.\n",tmp_8);
  }
  #line 1223 
  return 0;
}

#line 1232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_start_adapter(struct ipw2100_priv *priv)
{
  #line 1234 
  int i;
  #line 1235 
  u32 inta;
  #line 1235 
  u32 inta_mask;
  #line 1235 
  u32 gpio;
  #line 1237 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1237 
    int tmp_0;
    #line 1237 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1237 
                                                             tmp_0 = 73; else 
                                                                    #line 1237 
                                                                    tmp_0 = 85;
    #line 1237 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_start_adapter");
    #line 1237 
    printk((char *)"enter\n");
  }
  #line 1239 
  if ((priv->status & 4UL) != 0UL) 
                                   #line 1240 
                                   return 0;
  #line 1247 
  if (ipw2100_download_firmware(priv) != 0) {
    #line 1248 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 1251 
    return -5;
  }
  #line 1256 
  ipw2100_queues_initialize(priv);
  #line 1258 
  ipw2100_hw_set_gpio(priv);
  #line 1264 
  write_register(priv->net_dev,32U,0U);
  #line 1267 
  if ((ipw2100_debug_level & 65536U) != 0U) {
    #line 1267 
    int tmp_3;
    #line 1267 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1267 
                                                             tmp_3 = 73; else 
                                                                    #line 1267 
                                                                    tmp_3 = 85;
    #line 1267 
    printk((char *)"\001",tmp_3,(char *)"ipw2100_start_adapter");
    #line 1267 
    printk((char *)"Waiting for f/w initialization to complete...\n");
  }
  #line 1268 
  i = 5000;
  #line 1269 
  while (1) {
    {
      #line 1270 
      schedule_timeout_uninterruptible((long)msecs_to_jiffies(40U));
      #line 1273 
      read_register(priv->net_dev,8U,& inta);
      #line 1276 
      if ((inta & 16777216U) != 0U) {
        #line 1278 
        write_register(priv->net_dev,8U,16777216U);
        #line 1280 
        break;
      }
      #line 1286 
      if ((inta & 3221225472U) != 0U) 
                                      #line 1289 
                                      write_register(priv->net_dev,8U,3221225472U);
    }
    #line 1293 
    i --;
    #line 1293 
    if (! (i != 0)) 
                    #line 1269 
                    break;
  }
  #line 1297 
  read_register(priv->net_dev,8U,& inta);
  #line 1298 
  read_register(priv->net_dev,12U,& inta_mask);
  #line 1299 
  inta &= 3238068243U;
  #line 1301 
  if ((inta & inta_mask) != 0U) 
                                #line 1302 
                                write_register(priv->net_dev,8U,inta);
  #line 1304 
  if ((ipw2100_debug_level & 65536U) != 0U) {
    #line 1304 
    int tmp_6;
    #line 1304 
    char *tmp_7;
    #line 1304 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1304 
                                                             tmp_6 = 73; else 
                                                                    #line 1304 
                                                                    tmp_6 = 85;
    #line 1304 
    printk((char *)"\001",tmp_6,(char *)"ipw2100_start_adapter");
    #line 1304 
    if (i != 0) 
                #line 1304 
                tmp_7 = (char *)"SUCCESS"; else 
                                                #line 1304 
                                                tmp_7 = (char *)"FAILED";
    #line 1304 
    printk((char *)"f/w initialization complete: %s\n",tmp_7);
  }
  #line 1307 
  if (i == 0) {
    #line 1308 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 1311 
    return -5;
  }
  #line 1315 
  read_register(priv->net_dev,48U,& gpio);
  #line 1317 
  gpio |= 204U;
  #line 1319 
  write_register(priv->net_dev,48U,gpio);
  #line 1322 
  priv->status |= 4UL;
  #line 1325 
  priv->status &= 18446744073709550079UL;
  #line 1327 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1327 
    int tmp_9;
    #line 1327 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1327 
                                                             tmp_9 = 73; else 
                                                                    #line 1327 
                                                                    tmp_9 = 85;
    #line 1327 
    printk((char *)"\001",tmp_9,(char *)"ipw2100_start_adapter");
    #line 1327 
    printk((char *)"exit\n");
  }
  #line 1329 
  return 0;
}

#line 1332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void ipw2100_reset_fatalerror(struct ipw2100_priv *priv)
{
  #line 1337 
  u32 tmp;
  #line 1334 
  if (priv->fatal_error == 0U) 
                               #line 1335 
                               return;
  #line 1337 
  tmp = priv->fatal_index;
  #line 1337 
  (priv->fatal_index) ++;
  #line 1337 
  priv->fatal_errors[tmp] = priv->fatal_error;
  #line 1338 
  priv->fatal_index %= 5U;
  #line 1339 
  priv->fatal_error = 0U;
  #line 1340 
  return;
}

#line 1343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_power_cycle_adapter(struct ipw2100_priv *priv)
{
  #line 1345 
  u32 reg;
  #line 1346 
  int i;
  #line 1348 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1348 
    int tmp_0;
    #line 1348 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1348 
                                                             tmp_0 = 73; else 
                                                                    #line 1348 
                                                                    tmp_0 = 85;
    #line 1348 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_power_cycle_adapter");
    #line 1348 
    printk((char *)"Power cycling the hardware.\n");
  }
  #line 1350 
  ipw2100_hw_set_gpio(priv);
  #line 1353 
  write_register(priv->net_dev,32U,512U);
  #line 1358 
  i = 5;
  #line 1359 
  while (1) {
    #line 1360 
    __const_udelay(42950UL);
    #line 1361 
    read_register(priv->net_dev,32U,& reg);
    #line 1363 
    if ((reg & 256U) != 0U) 
                            #line 1364 
                            break;
    #line 1365 
    i --;
    #line 1365 
    if (! (i != 0)) 
                    #line 1359 
                    break;
  }
  #line 1367 
  priv->status &= 18446744073172680703UL;
  #line 1369 
  if (i == 0) {
    #line 1370 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 1370 
      int tmp_2;
      #line 1370 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1370 
                                                               tmp_2 = 73; else 
                                                                    #line 1370 
                                                                    tmp_2 = 85;
      #line 1370 
      printk((char *)"\001",tmp_2,(char *)"ipw2100_power_cycle_adapter");
      #line 1370 
      printk((char *)"exit - waited too long for master assert stop\n");
    }
    #line 1372 
    return -5;
  }
  #line 1375 
  write_register(priv->net_dev,32U,128U);
  #line 1379 
  ipw2100_reset_fatalerror(priv);
  #line 1382 
  priv->status &= 18446744073709550067UL;
  #line 1385 
  return 0;
}

#line 1396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_hw_phy_off(struct ipw2100_priv *priv)
{
  #line 1406 
  int err;
  #line 1406 
  int i;
  #line 1407 
  u32 val1;
  #line 1407 
  u32 val2;
  #line 1401 
  struct host_command cmd = {.host_command = 61U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 0U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 1409 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 1409 
    int tmp_0;
    #line 1409 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1409 
                                                             tmp_0 = 73; else 
                                                                    #line 1409 
                                                                    tmp_0 = 85;
    #line 1409 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_hw_phy_off");
    #line 1409 
    printk((char *)"CARD_DISABLE_PHY_OFF\n");
  }
  #line 1412 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 1413 
  if (err != 0) 
                #line 1414 
                return err;
  #line 1416 
  i = 0;
  #line 1416 
  while (i <= 2499) {
    {
      #line 1417 
      read_nic_dword(priv->net_dev,2228224U,& val1);
      #line 1418 
      read_nic_dword(priv->net_dev,3145732U,& val2);
      #line 1420 
      if ((val1 & 8U) != 0U && (val2 & 1U) != 0U) 
                                                  #line 1422 
                                                  return 0;
      #line 1424 
      schedule_timeout_uninterruptible((long)msecs_to_jiffies(50U));
    }
    #line 1416 
    i ++;
  }
  #line 1427 
  return -5;
}

#line 1430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_enable_adapter(struct ipw2100_priv *priv)
{
  #line 1432 
  struct host_command cmd = {.host_command = 2U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 0U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 1437 
  int err = 0;
  #line 1439 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 1439 
    int tmp_0;
    #line 1439 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1439 
                                                             tmp_0 = 73; else 
                                                                    #line 1439 
                                                                    tmp_0 = 85;
    #line 1439 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_enable_adapter");
    #line 1439 
    printk((char *)"HOST_COMPLETE\n");
  }
  #line 1441 
  if ((priv->status & 8UL) != 0UL) 
                                   #line 1442 
                                   return 0;
  #line 1444 
  cif_mutex_lock_adapter_mutex_of_ipw2100_priv(& priv->adapter_mutex);
  #line 1446 
  if (rf_kill_active(priv) != 0) {
    #line 1447 
    if ((ipw2100_debug_level & 32U) != 0U) {
      #line 1447 
      int tmp_2;
      #line 1447 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1447 
                                                               tmp_2 = 73; else 
                                                                    #line 1447 
                                                                    tmp_2 = 85;
      #line 1447 
      printk((char *)"\001",tmp_2,(char *)"ipw2100_enable_adapter");
      #line 1447 
      printk((char *)"Command aborted due to RF kill active.\n");
    }
    #line 1448 
    goto fail_up;
  }
  #line 1451 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 1452 
  if (err != 0) {
    #line 1453 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 1453 
      int tmp_5;
      #line 1453 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1453 
                                                               tmp_5 = 73; else 
                                                                    #line 1453 
                                                                    tmp_5 = 85;
      #line 1453 
      printk((char *)"\001",tmp_5,(char *)"ipw2100_enable_adapter");
      #line 1453 
      printk((char *)"Failed to send HOST_COMPLETE command\n");
    }
    #line 1454 
    goto fail_up;
  }
  #line 1457 
  err = ipw2100_wait_for_card_state(priv,0);
  #line 1458 
  if (err != 0) {
    #line 1459 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 1459 
      int tmp_7;
      #line 1459 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1459 
                                                               tmp_7 = 73; else 
                                                                    #line 1459 
                                                                    tmp_7 = 85;
      #line 1459 
      printk((char *)"\001",tmp_7,(char *)"ipw2100_enable_adapter");
      #line 1459 
      printk((char *)"%s: card not responding to init command.\n",(char *)(& (priv->net_dev)->name));
    }
    #line 1461 
    goto fail_up;
  }
  #line 1464 
  if (priv->stop_hang_check != 0) {
    #line 1465 
    priv->stop_hang_check = 0;
    #line 1466 
    cif_schedule_delayed_work(& priv->hang_check,125UL);
  }
  #line 1469 
  fail_up: 
           #line 1469 
  ;
  #line 1470 
  cif_mutex_unlock_adapter_mutex_of_ipw2100_priv(& priv->adapter_mutex);
  #line 1471 
  return err;
}

#line 1474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_hw_stop_adapter(struct ipw2100_priv *priv)
{
  #line 1483 
  int err;
  #line 1483 
  int i;
  #line 1484 
  u32 reg;
  #line 1478 
  struct host_command cmd = {.host_command = 58U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 0U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 1486 
  if ((priv->status & 4UL) == 0UL) 
                                   #line 1487 
                                   return 0;
  #line 1489 
  priv->status |= 16UL;
  #line 1494 
  if (priv->fatal_error == 0U) {
    #line 1497 
    ipw2100_enable_adapter(priv);
    #line 1499 
    err = ipw2100_hw_phy_off(priv);
    #line 1500 
    if (err != 0) 
                  #line 1501 
                  printk((char *)"\001",err);
    #line 1524 
    if ((ipw2100_debug_level & 32U) != 0U) {
      #line 1524 
      int tmp_0;
      #line 1524 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1524 
                                                               tmp_0 = 73; else 
                                                                    #line 1524 
                                                                    tmp_0 = 85;
      #line 1524 
      printk((char *)"\001",tmp_0,(char *)"ipw2100_hw_stop_adapter");
      #line 1524 
      printk((char *)"HOST_PRE_POWER_DOWN\n");
    }
    #line 1526 
    err = ipw2100_hw_send_command(priv,& cmd);
    #line 1527 
    if (err != 0) 
                  #line 1528 
                  printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
    else {
      #line 1532 
      schedule_timeout_uninterruptible((long)msecs_to_jiffies(100U));
    }
  }
  #line 1535 
  priv->status &= 18446744073709551607UL;
  #line 1541 
  ipw2100_hw_set_gpio(priv);
  #line 1551 
  write_register(priv->net_dev,32U,512U);
  #line 1556 
  i = 5;
  #line 1556 
  while (i > 0) {
    #line 1557 
    __const_udelay(42950UL);
    #line 1560 
    read_register(priv->net_dev,32U,& reg);
    #line 1562 
    if ((reg & 256U) != 0U) 
                            #line 1563 
                            break;
    #line 1556 
    i --;
  }
  #line 1566 
  if (i == 0) 
              #line 1567 
              printk((char *)"\001",(char *)(& (priv->net_dev)->name));
  #line 1572 
  write_register(priv->net_dev,32U,128U);
  #line 1575 
  priv->status &= 18446744073709551595UL;
  #line 1577 
  return 0;
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_disable_adapter(struct ipw2100_priv *priv)
{
  #line 1582 
  struct host_command cmd = {.host_command = 44U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 0U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 1587 
  int err = 0;
  #line 1589 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 1589 
    int tmp_0;
    #line 1589 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1589 
                                                             tmp_0 = 73; else 
                                                                    #line 1589 
                                                                    tmp_0 = 85;
    #line 1589 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_disable_adapter");
    #line 1589 
    printk((char *)"CARD_DISABLE\n");
  }
  #line 1591 
  if ((priv->status & 8UL) == 0UL) 
                                   #line 1592 
                                   return 0;
  #line 1595 
  priv->status &= 18446744073709550079UL;
  #line 1597 
  if (priv->stop_hang_check == 0) {
    #line 1598 
    priv->stop_hang_check = 1;
    #line 1599 
    cancel_delayed_work(& priv->hang_check);
  }
  #line 1602 
  cif_mutex_lock_adapter_mutex_of_ipw2100_priv(& priv->adapter_mutex);
  #line 1604 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 1605 
  if (err != 0) {
    #line 1606 
    printk((char *)"\001");
    #line 1608 
    goto fail_up;
  }
  #line 1611 
  err = ipw2100_wait_for_card_state(priv,1);
  #line 1612 
  if (err != 0) {
    #line 1613 
    printk((char *)"\001");
    #line 1615 
    goto fail_up;
  }
  #line 1618 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1618 
    int tmp_2;
    #line 1618 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1618 
                                                             tmp_2 = 73; else 
                                                                    #line 1618 
                                                                    tmp_2 = 85;
    #line 1618 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_disable_adapter");
    #line 1618 
    printk((char *)"TODO: implement scan state machine\n");
  }
  #line 1620 
  fail_up: 
           #line 1620 
  ;
  #line 1621 
  cif_mutex_unlock_adapter_mutex_of_ipw2100_priv(& priv->adapter_mutex);
  #line 1622 
  return err;
}

#line 1625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_scan_options(struct ipw2100_priv *priv)
{
  #line 1632 
  int err;
  #line 1627 
  struct host_command cmd = {.host_command = 46U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 8U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 1634 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1634 
    int tmp_0;
    #line 1634 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1634 
                                                             tmp_0 = 73; else 
                                                                    #line 1634 
                                                                    tmp_0 = 85;
    #line 1634 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_set_scan_options");
    #line 1634 
    printk((char *)"enter\n");
  }
  #line 1636 
  if ((ipw2100_debug_level & 2048U) != 0U) {
    #line 1636 
    int tmp_2;
    #line 1636 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1636 
                                                             tmp_2 = 73; else 
                                                                    #line 1636 
                                                                    tmp_2 = 85;
    #line 1636 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_set_scan_options");
    #line 1636 
    printk((char *)"setting scan options\n");
  }
  #line 1638 
  cmd.host_command_parameters[0] = 0U;
  #line 1640 
  if ((priv->config & 64UL) == 0UL) 
                                    #line 1641 
                                    cmd.host_command_parameters[0] |= 1U;
  #line 1642 
  if (((int)(priv->ieee)->sec.flags & 256) != 0 && (unsigned int)(priv->ieee)->sec.enabled != 0U) 
    #line 1643 
    cmd.host_command_parameters[0] |= 2U;
  #line 1644 
  if ((priv->config & 1024UL) != 0UL) 
                                      #line 1645 
                                      cmd.host_command_parameters[0] |= 8U;
  #line 1647 
  cmd.host_command_parameters[1] = priv->channel_mask;
  #line 1649 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 1651 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 1651 
    int tmp_4;
    #line 1651 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1651 
                                                             tmp_4 = 73; else 
                                                                    #line 1651 
                                                                    tmp_4 = 85;
    #line 1651 
    printk((char *)"\001",tmp_4,(char *)"ipw2100_set_scan_options");
    #line 1651 
    printk((char *)"SET_SCAN_OPTIONS 0x%04X\n",cmd.host_command_parameters[0]);
  }
  #line 1654 
  return err;
}

#line 1657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_start_scan(struct ipw2100_priv *priv)
{
  #line 1664 
  int err;
  #line 1659 
  struct host_command cmd = {.host_command = 43U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 1666 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 1666 
    int tmp_0;
    #line 1666 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1666 
                                                             tmp_0 = 73; else 
                                                                    #line 1666 
                                                                    tmp_0 = 85;
    #line 1666 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_start_scan");
    #line 1666 
    printk((char *)"START_SCAN\n");
  }
  #line 1668 
  cmd.host_command_parameters[0] = 0U;
  #line 1671 
  if ((priv->ieee)->iw_mode == 6) 
                                  #line 1672 
                                  return 1;
  #line 1674 
  if ((priv->status & 16777216UL) != 0UL) {
    #line 1675 
    if ((ipw2100_debug_level & 2048U) != 0U) {
      #line 1675 
      int tmp_2;
      #line 1675 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1675 
                                                               tmp_2 = 73; else 
                                                                    #line 1675 
                                                                    tmp_2 = 85;
      #line 1675 
      printk((char *)"\001",tmp_2,(char *)"ipw2100_start_scan");
      #line 1675 
      printk((char *)"Scan requested while already in scan...\n");
    }
    #line 1676 
    return 0;
  }
  #line 1679 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1679 
    int tmp_4;
    #line 1679 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1679 
                                                             tmp_4 = 73; else 
                                                                    #line 1679 
                                                                    tmp_4 = 85;
    #line 1679 
    printk((char *)"\001",tmp_4,(char *)"ipw2100_start_scan");
    #line 1679 
    printk((char *)"enter\n");
  }
  #line 1686 
  if ((ipw2100_debug_level & 2048U) != 0U) {
    #line 1686 
    int tmp_6;
    #line 1686 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1686 
                                                             tmp_6 = 73; else 
                                                                    #line 1686 
                                                                    tmp_6 = 85;
    #line 1686 
    printk((char *)"\001",tmp_6,(char *)"ipw2100_start_scan");
    #line 1686 
    printk((char *)"starting scan\n");
  }
  #line 1688 
  priv->status |= 16777216UL;
  #line 1689 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 1690 
  if (err != 0) 
                #line 1691 
                priv->status &= 18446744073692774399UL;
  #line 1693 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1693 
    int tmp_8;
    #line 1693 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1693 
                                                             tmp_8 = 73; else 
                                                                    #line 1693 
                                                                    tmp_8 = 85;
    #line 1693 
    printk((char *)"\001",tmp_8,(char *)"ipw2100_start_scan");
    #line 1693 
    printk((char *)"exit\n");
  }
  #line 1695 
  return err;
}

#line 1698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct libipw_geo ipw_geos[1U] = {{.name = {(unsigned char)'-', (unsigned char)'-', (unsigned char)'-'}, .bg_channels = (unsigned char)14U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}, {.freq = 2467U, .channel = (unsigned char)12U}, {.freq = 2472U, .channel = (unsigned char)13U}, {.freq = 2484U, .channel = (unsigned char)14U}}}};
#line 1710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_up(struct ipw2100_priv *priv, int deferred)
{
  #line 1712 
  unsigned long flags;
  #line 1714 
  u32 lock;
  #line 1713 
  int err = 0;
  #line 1715 
  u32 ord_len = 4U;
  #line 1718 
  if (priv->suspend_time != 0LL) {
    #line 1719 
    libipw_networks_age(priv->ieee,(unsigned long)priv->suspend_time);
    #line 1720 
    priv->suspend_time = 0LL;
  }
  #line 1724 
  if ((priv->status & 8192UL) != 0UL) {
    #line 1725 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 1725 
      int tmp_0;
      #line 1725 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1725 
                                                               tmp_0 = 73; else 
                                                                    #line 1725 
                                                                    tmp_0 = 85;
      #line 1725 
      printk((char *)"\001",tmp_0,(char *)"ipw2100_up");
      #line 1725 
      printk((char *)"%s: Radio is disabled by Manual Disable ",(char *)(& (priv->net_dev)->name));
    }
    #line 1727 
    return 0;
  }
  #line 1733 
  pm_qos_update_request(& ipw2100_pm_qos_req,175);
  #line 1736 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 1737 
  ipw2100_disable_interrupts(priv);
  #line 1740 
  ipw2100_reset_fatalerror(priv);
  #line 1741 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 1743 
  if ((priv->status & 1UL) != 0UL || (priv->status & 536870912UL) != 0UL) {
    #line 1746 
    err = ipw2100_power_cycle_adapter(priv);
    #line 1747 
    if (err != 0) {
      #line 1748 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name));
      #line 1751 
      goto exit;
    }
  }
  else 
       #line 1754 
       priv->status |= 1UL;
  #line 1757 
  err = ipw2100_start_adapter(priv);
  #line 1758 
  if (err != 0) {
    #line 1759 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 1762 
    goto exit;
  }
  #line 1765 
  ipw2100_initialize_ordinals(priv);
  #line 1768 
  err = ipw2100_get_hw_features(priv);
  #line 1769 
  if (err != 0) {
    #line 1770 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 1773 
    goto exit;
  }
  #line 1777 
  libipw_set_geo(priv->ieee,ipw_geos);
  #line 1778 
  (priv->ieee)->freq_band = 1;
  #line 1780 
  lock = 0U;
  #line 1781 
  err = ipw2100_set_ordinal(priv,120U,& lock,& ord_len);
  #line 1782 
  if (err != 0) {
    #line 1783 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 1786 
    goto exit;
  }
  #line 1789 
  priv->status &= 18446744073692774399UL;
  #line 1791 
  if (rf_kill_active(priv) != 0) {
    #line 1792 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 1795 
    if (priv->stop_rf_kill != 0) {
      #line 1796 
      priv->stop_rf_kill = 0;
      #line 1797 
      ;
      #line 1797 
      cif_schedule_delayed_work(& priv->rf_kill,round_jiffies_relative(250UL));
    }
    #line 1801 
    deferred = 1;
  }
  #line 1805 
  ipw2100_enable_interrupts(priv);
  #line 1809 
  err = ipw2100_adapter_setup(priv);
  #line 1810 
  if (err != 0) {
    #line 1811 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 1813 
    goto exit;
  }
  #line 1816 
  if (deferred == 0) {
    #line 1818 
    err = ipw2100_enable_adapter(priv);
    #line 1819 
    if (err != 0) {
      #line 1820 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name));
      #line 1823 
      ipw2100_hw_stop_adapter(priv);
      #line 1824 
      goto exit;
    }
    #line 1828 
    ipw2100_set_scan_options(priv);
    #line 1829 
    ipw2100_start_scan(priv);
  }
  #line 1832 
  exit: 
        #line 1832 
  ;
  #line 1833 
  return err;
}

#line 1836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_down(struct ipw2100_priv *priv)
{
  #line 1838 
  unsigned long flags;
  #line 1839 
  union iwreq_data wrqu = {.ap_addr = {.sa_family = (unsigned short)1U, .sa_data = {(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0}}};
  #line 1843 
  int associated = (int)priv->status & 1024;
  #line 1846 
  if (priv->stop_rf_kill == 0) {
    #line 1847 
    priv->stop_rf_kill = 1;
    #line 1848 
    cancel_delayed_work(& priv->rf_kill);
  }
  #line 1852 
  if (priv->stop_hang_check == 0) {
    #line 1853 
    priv->stop_hang_check = 1;
    #line 1854 
    cancel_delayed_work(& priv->hang_check);
  }
  #line 1858 
  if ((priv->status & 536870912UL) != 0UL) 
                                           #line 1859 
                                           cancel_delayed_work(& priv->reset_work);
  #line 1863 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 1864 
  ipw2100_enable_interrupts(priv);
  #line 1865 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 1867 
  if (ipw2100_hw_stop_adapter(priv) != 0) 
                                          #line 1868 
                                          printk((char *)"\001",(char *)(& (priv->net_dev)->name));
  #line 1874 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 1875 
  ipw2100_disable_interrupts(priv);
  #line 1876 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 1878 
  pm_qos_update_request(& ipw2100_pm_qos_req,-1);
  #line 1881 
  if (associated != 0) 
                       #line 1882 
                       wireless_send_event(priv->net_dev,35605U,& wrqu,(char *)0);
  #line 1884 
  priv->status &= 18446744073709550079UL;
  #line 1885 
  netif_carrier_off(priv->net_dev);
  #line 1886 
  netif_stop_queue(priv->net_dev);
  #line 1887 
  return;
}

#line 1889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wdev_init(struct net_device *dev)
{
  #line 1894 
  int i;
  #line 1891 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 1892 
  struct libipw_geo *geo = libipw_get_geo(priv->ieee);
  #line 1893 
  struct wireless_dev *wdev = & (priv->ieee)->wdev;
  #line 1896 
  memcpy((void *)(& (wdev->wiphy)->perm_addr),(void *)(& priv->mac_addr),6UL);
  #line 1899 
  if ((unsigned int)geo->bg_channels != 0U) {
    #line 1900 
    struct ieee80211_supported_band *bg_band = & (priv->ieee)->bg_band;
    #line 1902 
    bg_band->band = NL80211_BAND_2GHZ;
    #line 1903 
    bg_band->n_channels = (int)geo->bg_channels;
    #line 1904 
    bg_band->channels = (struct ieee80211_channel *)kcalloc((unsigned long)geo->bg_channels,64UL,3264U);
    #line 1907 
    if (bg_band->channels == (struct ieee80211_channel *)0) {
      #line 1908 
      ipw2100_down(priv);
      #line 1909 
      return -12;
    }
    #line 1912 
    i = 0;
    #line 1912 
    while ((int)geo->bg_channels > i) {
      #line 1913 
      (bg_band->channels + (unsigned long)i)->band = NL80211_BAND_2GHZ;
      #line 1914 
      (bg_band->channels + (unsigned long)i)->center_freq = geo->bg[i].freq;
      #line 1915 
      (bg_band->channels + (unsigned long)i)->hw_value = (unsigned short)geo->bg[i].channel;
      #line 1916 
      (bg_band->channels + (unsigned long)i)->max_power = (int)geo->bg[i].max_power;
      #line 1917 
      if (((int)geo->bg[i].flags & 1) != 0) 
                                            #line 1918 
                                            (bg_band->channels + (unsigned long)i)->flags |= 2U;
      #line 1920 
      if (((int)geo->bg[i].flags & 8) != 0) 
                                            #line 1921 
                                            (bg_band->channels + (unsigned long)i)->flags |= 2U;
      #line 1923 
      if (((int)geo->bg[i].flags & 32) != 0) 
                                             #line 1924 
                                             (bg_band->channels + (unsigned long)i)->flags |= 8U;
      #line 1912 
      i ++;
    }
    #line 1931 
    bg_band->bitrates = (struct ieee80211_rate *)(& ipw2100_bg_rates);
    #line 1932 
    bg_band->n_bitrates = 4;
    #line 1934 
    (wdev->wiphy)->bands[0] = bg_band;
  }
  #line 1937 
  (wdev->wiphy)->cipher_suites = (u32 *)(& ipw_cipher_suites);
  #line 1938 
  (wdev->wiphy)->n_cipher_suites = 4;
  #line 1940 
  set_wiphy_dev(wdev->wiphy,& (priv->pci_dev)->dev);
  #line 1941 
  if (wiphy_register(wdev->wiphy) != 0) 
                                        #line 1942 
                                        return -5;
  #line 1943 
  return 0;
}

#line 1946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_reset_adapter(struct work_struct *work)
{
  #line 1949 
  void *__mptr;
  #line 1950 
  unsigned long flags;
  #line 1949 
  __mptr = (void *)work;
  #line 1948 
  struct ipw2100_priv *priv = ((struct ipw2100_priv *)(__mptr + 18446744073709550528U));
  #line 1951 
  union iwreq_data wrqu = {.ap_addr = {.sa_family = (unsigned short)1U, .sa_data = {(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0}}};
  #line 1955 
  int associated = (int)priv->status & 1024;
  #line 1957 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 1958 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 1958 
    int tmp_1;
    #line 1958 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1958 
                                                             tmp_1 = 73; else 
                                                                    #line 1958 
                                                                    tmp_1 = 85;
    #line 1958 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_reset_adapter");
    #line 1958 
    printk((char *)": %s: Restarting adapter.\n",(char *)(& (priv->net_dev)->name));
  }
  #line 1959 
  (priv->resets) ++;
  #line 1960 
  priv->status &= 18446744073709550079UL;
  #line 1961 
  priv->status |= 1073741824UL;
  #line 1965 
  cancel_delayed_work(& priv->reset_work);
  #line 1966 
  priv->status |= 536870912UL;
  #line 1967 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 1969 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 1971 
  priv->stop_hang_check = 1;
  #line 1972 
  cancel_delayed_work(& priv->hang_check);
  #line 1975 
  if (associated != 0) 
                       #line 1976 
                       wireless_send_event(priv->net_dev,35605U,& wrqu,(char *)0);
  #line 1978 
  ipw2100_up(priv,0);
  #line 1979 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 1980 
  return;
}

#line 1983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void isr_indicate_associated(struct ipw2100_priv *priv, u32 status)
{
  #line 1987 
  int ret;
  #line 1988 
  unsigned int len;
  #line 1988 
  unsigned int essid_len;
  #line 1989 
  char essid[32U];
  #line 1990 
  u32 txrate;
  #line 1991 
  u32 chan;
  #line 1992 
  char *txratename;
  #line 1993 
  u8 bssid[6U];
  #line 2002 
  essid_len = 32U;
  #line 2003 
  ret = ipw2100_get_ordinal(priv,1006U,(void *)(& essid),& essid_len);
  #line 2005 
  if (ret != 0) {
    #line 2006 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2006 
      int tmp_0;
      #line 2006 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2006 
                                                               tmp_0 = 73; else 
                                                                    #line 2006 
                                                                    tmp_0 = 85;
      #line 2006 
      printk((char *)"\001",tmp_0,(char *)"isr_indicate_associated");
      #line 2006 
      printk((char *)"failed querying ordinals at line %d\n",2006);
    }
    #line 2008 
    return;
  }
  #line 2011 
  len = 4U;
  #line 2012 
  ret = ipw2100_get_ordinal(priv,192U,(void *)(& txrate),& len);
  #line 2013 
  if (ret != 0) {
    #line 2014 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2014 
      int tmp_2;
      #line 2014 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2014 
                                                               tmp_2 = 73; else 
                                                                    #line 2014 
                                                                    tmp_2 = 85;
      #line 2014 
      printk((char *)"\001",tmp_2,(char *)"isr_indicate_associated");
      #line 2014 
      printk((char *)"failed querying ordinals at line %d\n",2014);
    }
    #line 2016 
    return;
  }
  #line 2019 
  len = 4U;
  #line 2020 
  ret = ipw2100_get_ordinal(priv,189U,(void *)(& chan),& len);
  #line 2021 
  if (ret != 0) {
    #line 2022 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2022 
      int tmp_4;
      #line 2022 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2022 
                                                               tmp_4 = 73; else 
                                                                    #line 2022 
                                                                    tmp_4 = 85;
      #line 2022 
      printk((char *)"\001",tmp_4,(char *)"isr_indicate_associated");
      #line 2022 
      printk((char *)"failed querying ordinals at line %d\n",2022);
    }
    #line 2024 
    return;
  }
  #line 2026 
  len = 6U;
  #line 2027 
  ret = ipw2100_get_ordinal(priv,1014U,(void *)(& bssid),& len);
  #line 2029 
  if (ret != 0) {
    #line 2030 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2030 
      int tmp_6;
      #line 2030 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2030 
                                                               tmp_6 = 73; else 
                                                                    #line 2030 
                                                                    tmp_6 = 85;
      #line 2030 
      printk((char *)"\001",tmp_6,(char *)"isr_indicate_associated");
      #line 2030 
      printk((char *)"failed querying ordinals at line %d\n",2030);
    }
    #line 2032 
    return;
  }
  #line 2034 
  memcpy((void *)(& (priv->ieee)->bssid),(void *)(& bssid),6UL);
  #line 2036 
  switch (txrate) {
    #line 2037 
    case (u32)1: 
                 #line 2037 
    ;
    #line 2038 
    txratename = (char *)"1Mbps";
    #line 2039 
    break;
    #line 2040 
    case (u32)2: 
                 #line 2040 
    ;
    #line 2041 
    txratename = (char *)"2Mbsp";
    #line 2042 
    break;
    #line 2043 
    case (u32)4: 
                 #line 2043 
    ;
    #line 2044 
    txratename = (char *)"5.5Mbps";
    #line 2045 
    break;
    #line 2046 
    case (u32)8: 
                 #line 2046 
    ;
    #line 2047 
    txratename = (char *)"11Mbps";
    #line 2048 
    break;
    #line 2049 
    default: 
             #line 2049 
    ;
    #line 2050 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2050 
      int tmp_8;
      #line 2050 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2050 
                                                               tmp_8 = 73; else 
                                                                    #line 2050 
                                                                    tmp_8 = 85;
      #line 2050 
      printk((char *)"\001",tmp_8,(char *)"isr_indicate_associated");
      #line 2050 
      printk((char *)"Unknown rate: %d\n",txrate);
    }
    #line 2051 
    txratename = (char *)"unknown rate";
    #line 2052 
    break;
  }
  #line 2055 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 2055 
    int tmp_10;
    #line 2055 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2055 
                                                             tmp_10 = 73; else 
                                                                    #line 2055 
                                                                    tmp_10 = 85;
    #line 2055 
    printk((char *)"\001",tmp_10,(char *)"isr_indicate_associated");
    #line 2055 
    printk((char *)"%s: Associated with \'%*pE\' at %s, channel %d (BSSID=%pM)\n",(char *)(& (priv->net_dev)->name),essid_len,(char *)(& essid),txratename,chan,(u8 *)(& bssid));
  }
  #line 2060 
  if ((priv->config & 2UL) == 0UL) {
    #line 2061 
    unsigned char __UNIQUE_ID___x563;
    #line 2061 
    int tmp_11;
    {
      #line 2061 
      __UNIQUE_ID___x563 = (unsigned char)essid_len;
      #line 2061 
      unsigned char __UNIQUE_ID___y564 = (unsigned char)32U;
      #line 2061 
      if ((int)__UNIQUE_ID___x563 < (int)__UNIQUE_ID___y564) 
                                                             #line 2061 
                                                             tmp_11 = (int)__UNIQUE_ID___x563; else 
                                                                    #line 2061 
                                                                    tmp_11 = (int)__UNIQUE_ID___y564;
      }
    #line 2061 
    priv->essid_len = (unsigned char)tmp_11;
    #line 2062 
    memcpy((void *)(& priv->essid),(void *)(& essid),(unsigned long)priv->essid_len);
  }
  #line 2064 
  priv->channel = (unsigned char)chan;
  #line 2065 
  memcpy((void *)(& priv->bssid),(void *)(& bssid),6UL);
  #line 2067 
  priv->status |= 512UL;
  #line 2068 
  priv->connect_start = ktime_get_boottime_seconds();
  #line 2070 
  cif_schedule_delayed_work(& priv->wx_event_work,25UL);
  #line 2071 
  return;
}

#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_essid(struct ipw2100_priv *priv, char *essid, int length, int batch_mode)
{
  #line 2076 
  int __UNIQUE_ID___x565;
  #line 2076 
  int tmp;
  #line 2082 
  int err;
  {
    #line 2076 
    __UNIQUE_ID___x565 = length;
    #line 2076 
    int __UNIQUE_ID___y566 = 32;
    #line 2076 
    if (__UNIQUE_ID___x565 < __UNIQUE_ID___y566) 
                                                 #line 2076 
                                                 tmp = __UNIQUE_ID___x565; else 
                                                                    #line 2076 
                                                                    tmp = __UNIQUE_ID___y566;
    }
  #line 2076 
  int ssid_len = tmp;
  #line 2077 
  struct host_command cmd = {.host_command = 8U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = (unsigned int)ssid_len, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 2084 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 2084 
    int tmp_2;
    #line 2084 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2084 
                                                             tmp_2 = 73; else 
                                                                    #line 2084 
                                                                    tmp_2 = 85;
    #line 2084 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_set_essid");
    #line 2084 
    printk((char *)"SSID: \'%*pE\'\n",ssid_len,essid);
  }
  #line 2086 
  if (ssid_len != 0) 
                     #line 2087 
                     memcpy((void *)(& cmd.host_command_parameters),(void *)essid,(unsigned long)ssid_len);
  #line 2089 
  if (batch_mode == 0) {
    #line 2090 
    err = ipw2100_disable_adapter(priv);
    #line 2091 
    if (err != 0) 
                  #line 2092 
                  return err;
  }
  #line 2097 
  if (ssid_len == 0 && (priv->config & 64UL) == 0UL) {
    #line 2098 
    int i;
    #line 2099 
    u8 *bogus = (u8 *)(& cmd.host_command_parameters);
    #line 2100 
    i = 0;
    #line 2100 
    while (i <= 31) {
      #line 2101 
      *(bogus + (unsigned long)i) = (unsigned char)((unsigned int)((unsigned char)i) + 24U);
      #line 2100 
      i ++;
    }
    #line 2102 
    cmd.host_command_length = 32U;
  }
  #line 2108 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 2109 
  if (err == 0) {
    #line 2110 
    memset((void *)((u8 *)(& priv->essid) + (unsigned long)ssid_len),0,(unsigned long)(32 - ssid_len));
    #line 2111 
    memcpy((void *)(& priv->essid),(void *)essid,(unsigned long)ssid_len);
    #line 2112 
    priv->essid_len = (unsigned char)ssid_len;
  }
  #line 2115 
  if (batch_mode == 0) {
    #line 2116 
    if (ipw2100_enable_adapter(priv) != 0) 
                                           #line 2117 
                                           err = -5;
  }
  #line 2120 
  return err;
}

#line 2123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void isr_indicate_association_lost(struct ipw2100_priv *priv, u32 status)
{
  #line 2125 
  if ((ipw2100_debug_level & 5184U) != 0U) {
    #line 2125 
    int tmp_0;
    #line 2125 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2125 
                                                             tmp_0 = 73; else 
                                                                    #line 2125 
                                                                    tmp_0 = 85;
    #line 2125 
    printk((char *)"\001",tmp_0,(char *)"isr_indicate_association_lost");
    #line 2125 
    printk((char *)"disassociated: \'%*pE\' %pM\n",(int)priv->essid_len,(u8 *)(& priv->essid),(u8 *)(& priv->bssid));
  }
  #line 2129 
  priv->status &= 18446744073709550079UL;
  #line 2131 
  if ((priv->status & 16UL) != 0UL) {
    #line 2132 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2132 
      int tmp_2;
      #line 2132 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2132 
                                                               tmp_2 = 73; else 
                                                                    #line 2132 
                                                                    tmp_2 = 85;
      #line 2132 
      printk((char *)"\001",tmp_2,(char *)"isr_indicate_association_lost");
      #line 2132 
      printk((char *)"Card is stopping itself, discard ASSN_LOST.\n");
    }
    #line 2133 
    return;
  }
  #line 2136 
  eth_zero_addr((u8 *)(& priv->bssid));
  #line 2137 
  eth_zero_addr((u8 *)(& (priv->ieee)->bssid));
  #line 2139 
  netif_carrier_off(priv->net_dev);
  #line 2140 
  netif_stop_queue(priv->net_dev);
  #line 2142 
  if ((priv->status & 4UL) == 0UL) 
                                   #line 2143 
                                   return;
  #line 2145 
  if ((priv->status & 1073741824UL) != 0UL) 
                                            #line 2146 
                                            cif_schedule_delayed_work(& priv->security_work,0UL);
  #line 2148 
  cif_schedule_delayed_work(& priv->wx_event_work,0UL);
  #line 2149 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void isr_indicate_rf_kill(struct ipw2100_priv *priv, u32 status)
{
  #line 2153 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 2153 
    int tmp_0;
    #line 2153 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2153 
                                                             tmp_0 = 73; else 
                                                                    #line 2153 
                                                                    tmp_0 = 85;
    #line 2153 
    printk((char *)"\001",tmp_0,(char *)"isr_indicate_rf_kill");
    #line 2153 
    printk((char *)"%s: RF Kill state changed to radio OFF.\n",(char *)(& (priv->net_dev)->name));
  }
  #line 2157 
  wiphy_rfkill_set_hw_state((priv->ieee)->wdev.wiphy,(_Bool)1);
  #line 2158 
  priv->status |= 4096UL;
  #line 2161 
  priv->stop_rf_kill = 0;
  #line 2162 
  ;
  #line 2162 
  ;
  #line 2162 
  mod_delayed_work(system_wq,& priv->rf_kill,round_jiffies_relative(250UL));
  #line 2163 
  return;
}

#line 2165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_scan_event(struct work_struct *work)
{
  #line 2167 
  void *__mptr;
  #line 2169 
  union iwreq_data wrqu;
  #line 2167 
  __mptr = (void *)work;
  #line 2167 
  struct ipw2100_priv *priv = ((struct ipw2100_priv *)(__mptr + 18446744073709549608U));
  #line 2171 
  wrqu.data.length = (unsigned short)0U;
  #line 2172 
  wrqu.data.flags = (unsigned short)0U;
  #line 2173 
  wireless_send_event(priv->net_dev,35609U,& wrqu,(char *)0);
  #line 2174 
  return;
}

#line 2176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void isr_scan_complete(struct ipw2100_priv *priv, u32 status)
{
  #line 2178 
  if ((ipw2100_debug_level & 2048U) != 0U) {
    #line 2178 
    int tmp_0;
    #line 2178 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2178 
                                                             tmp_0 = 73; else 
                                                                    #line 2178 
                                                                    tmp_0 = 85;
    #line 2178 
    printk((char *)"\001",tmp_0,(char *)"isr_scan_complete");
    #line 2178 
    printk((char *)"scan complete\n");
  }
  #line 2180 
  ((priv->ieee)->scans) ++;
  #line 2181 
  priv->status &= 18446744073692774399UL;
  #line 2184 
  if (priv->user_requested_scan == 0) {
    #line 2185 
    ;
    #line 2185 
    cif_schedule_delayed_work(& priv->scan_event,round_jiffies_relative(msecs_to_jiffies(4000U)));
  }
  else {
    #line 2188 
    priv->user_requested_scan = 0;
    #line 2189 
    mod_delayed_work(system_wq,& priv->scan_event,0UL);
  }
  #line 2191 
  return;
}

#line 2208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void isr_indicate_scanning(struct ipw2100_priv *priv, u32 status)
{
  #line 2210 
  if ((ipw2100_debug_level & 2048U) != 0U) {
    #line 2210 
    int tmp_0;
    #line 2210 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2210 
                                                             tmp_0 = 73; else 
                                                                    #line 2210 
                                                                    tmp_0 = 85;
    #line 2210 
    printk((char *)"\001",tmp_0,(char *)"isr_indicate_scanning");
    #line 2210 
    printk((char *)"Scanning...\n");
  }
  #line 2211 
  priv->status |= 16777216UL;
  #line 2212 
  return;
}

#line 2214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct ipw2100_status_indicator status_handlers[13U] = {{.status = 1, .name = (char *)"IPW_STATE_INITIALIZED"}, {.status = 2, .name = (char *)"IPW_STATE_COUNTRY_FOUND"}, {.status = 4, .cb = & isr_indicate_associated, .name = (char *)"IPW_STATE_ASSOCIATED"}, {.status = 8, .cb = & isr_indicate_association_lost, .name = (char *)"IPW_STATE_ASSN_LOST"}, {.status = 16, .name = (char *)"IPW_STATE_ASSN_CHANGED"}, {.status = 32, .cb = & isr_scan_complete, .name = (char *)"IPW_STATE_SCAN_COMPLETE"}, {.status = 64, .name = (char *)"IPW_STATE_ENTERED_PSP"}, {.status = 128, .name = (char *)"IPW_STATE_LEFT_PSP"}, {.status = 256, .cb = & isr_indicate_rf_kill, .name = (char *)"IPW_STATE_RF_KILL"}, {.status = 512, .name = (char *)"IPW_STATE_DISABLED"}, {.status = 1024, .name = (char *)"IPW_STATE_POWER_DOWN"}, {.status = 2048, .cb = & isr_indicate_scanning, .name = (char *)"IPW_STATE_SCANNING"}, {.status = -1, .name = (char *)"-1"}};
#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void isr_status_change(struct ipw2100_priv *priv, int status)
{
  #line 2232 
  int i;
  #line 2234 
  if ((status == 2048 && (priv->status & 1024UL) != 0UL) && (priv->status & 16777216UL) == 0UL) {
    #line 2237 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2237 
      int tmp_0;
      #line 2237 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2237 
                                                               tmp_0 = 73; else 
                                                                    #line 2237 
                                                                    tmp_0 = 85;
      #line 2237 
      printk((char *)"\001",tmp_0,(char *)"isr_status_change");
      #line 2237 
      printk((char *)"Scan detected while associated, with ");
    }
    #line 2241 
    schedule_reset(priv);
  }
  #line 2244 
  i = 0;
  #line 2244 
  while (status_handlers[i].status != -1) {
    #line 2245 
    if (status_handlers[i].status == status) {
      #line 2246 
      if ((ipw2100_debug_level & 1024U) != 0U) {
        #line 2246 
        int tmp_2;
        #line 2246 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 2246 
                                                                 tmp_2 = 73; else 
                                                                    #line 2246 
                                                                    tmp_2 = 85;
        #line 2246 
        printk((char *)"\001",tmp_2,(char *)"isr_status_change");
        #line 2246 
        printk((char *)"Status change: %s\n",status_handlers[i].name);
      }
      #line 2248 
      if (status_handlers[i].cb != (void (*)(struct ipw2100_priv *, u32 ))0) 
        #line 2249 
        (*(status_handlers[i].cb))(priv,(unsigned int)status);
      #line 2250 
      priv->wstats.status = (unsigned short)status;
      #line 2251 
      return;
    }
    #line 2244 
    i ++;
  }
  #line 2255 
  if ((ipw2100_debug_level & 1024U) != 0U) {
    #line 2255 
    int tmp_4;
    #line 2255 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2255 
                                                             tmp_4 = 73; else 
                                                                    #line 2255 
                                                                    tmp_4 = 85;
    #line 2255 
    printk((char *)"\001",tmp_4,(char *)"isr_status_change");
    #line 2255 
    printk((char *)"unknown status received: %04x\n",status);
  }
  #line 2257 
  return;
}

#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void isr_rx_complete_command(struct ipw2100_priv *priv, struct ipw2100_cmd_header *cmd)
{
  #line 2262 
  if (cmd->host_command_reg <= 69U) 
    #line 2263 
    if ((ipw2100_debug_level & 32U) != 0U) {
      #line 2263 
      int tmp_0;
      #line 2263 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2263 
                                                               tmp_0 = 73; else 
                                                                    #line 2263 
                                                                    tmp_0 = 85;
      #line 2263 
      printk((char *)"\001",tmp_0,(char *)"isr_rx_complete_command");
      #line 2263 
      printk((char *)"Command completed \'%s (%d)\'\n",command_types[cmd->host_command_reg],cmd->host_command_reg);
    }
  #line 2268 
  if (cmd->host_command_reg == 2U) 
                                   #line 2269 
                                   priv->status |= 8UL;
  #line 2271 
  if (cmd->host_command_reg == 44U) 
                                    #line 2272 
                                    priv->status &= 18446744073709551607UL;
  #line 2274 
  priv->status &= 18446744073709551613UL;
  #line 2276 
  __wake_up(& priv->wait_command_queue,1U,1,(void *)0);
  #line 2277 
  return;
}

#line 2280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static char *frame_types[5U] = {(char *)"COMMAND_STATUS_VAL", (char *)"STATUS_CHANGE_VAL", (char *)"P80211_DATA_VAL", (char *)"P8023_DATA_VAL", (char *)"HOST_NOTIFICATION_VAL"};
#line 2289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_alloc_skb(struct ipw2100_priv *priv, struct ipw2100_rx_packet *packet)
{
  #line 2292 
  packet->skb = dev_alloc_skb(2340U);
  #line 2293 
  if (packet->skb == (struct sk_buff *)0) 
                                          #line 2294 
                                          return -12;
  #line 2296 
  packet->rxp = (struct ipw2100_rx *)(packet->skb)->data;
  #line 2297 
  packet->dma_addr = pci_map_single(priv->pci_dev,(void *)(packet->skb)->data,2340UL,2);
  #line 2300 
  if (pci_dma_mapping_error(priv->pci_dev,packet->dma_addr) != 0) {
    #line 2301 
    consume_skb(packet->skb);
    #line 2302 
    return -12;
  }
  #line 2305 
  return 0;
}

#line 2315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_snapshot_free(struct ipw2100_priv *priv)
{
  #line 2317 
  int i;
  #line 2318 
  if (priv->snapshot[0] == (u8 *)0U) 
                                     #line 2319 
                                     return;
  #line 2320 
  i = 0;
  #line 2320 
  while (i <= 47) {
    #line 2321 
    kfree((void *)priv->snapshot[i]);
    #line 2320 
    i ++;
  }
  #line 2322 
  priv->snapshot[0] = (u8 *)0U;
  #line 2323 
  return;
}

#line 2401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static u8 packet_data[2340U];
#line 2404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_corruption_detected(struct ipw2100_priv *priv, int i)
{
  #line 2412 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 2412 
    int tmp_0;
    #line 2412 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2412 
                                                             tmp_0 = 73; else 
                                                                    #line 2412 
                                                                    tmp_0 = 85;
    #line 2412 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_corruption_detected");
    #line 2412 
    printk((char *)": PCI latency error detected at 0x%04zX.\n",(unsigned long)i * 8UL);
  }
  #line 2444 
  priv->fatal_error = 268435456U;
  #line 2445 
  ((priv->net_dev)->stats.rx_errors) ++;
  #line 2446 
  schedule_reset(priv);
  #line 2447 
  return;
}

#line 2449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void isr_rx(struct ipw2100_priv *priv, int i, struct libipw_rx_stats *stats)
{
  #line 2491 
  unsigned int __UNIQUE_ID___x567;
  #line 2491 
  unsigned int tmp_11;
  #line 2467 
  int tmp_8;
  #line 2452 
  struct net_device *dev = priv->net_dev;
  #line 2453 
  struct ipw2100_status *status = priv->status_queue.drv + (unsigned long)i;
  #line 2454 
  struct ipw2100_rx_packet *packet = priv->rx_buffers + (unsigned long)i;
  #line 2456 
  if ((ipw2100_debug_level & 16777216U) != 0U) {
    #line 2456 
    int tmp_0;
    #line 2456 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2456 
                                                             tmp_0 = 73; else 
                                                                    #line 2456 
                                                                    tmp_0 = 85;
    #line 2456 
    printk((char *)"\001",tmp_0,(char *)"isr_rx");
    #line 2456 
    printk((char *)"Handler...\n");
  }
  #line 2458 
  ;
  #line 2458 
  if ((long)(status->frame_size > (unsigned int)skb_tailroom(packet->skb)) != 0L) {
    #line 2459 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2459 
      int tmp_2;
      #line 2459 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2459 
                                                               tmp_2 = 73; else 
                                                                    #line 2459 
                                                                    tmp_2 = 85;
      #line 2459 
      printk((char *)"\001",tmp_2,(char *)"isr_rx");
      #line 2459 
      ;
      #line 2459 
      ;
      #line 2459 
      printk((char *)"%s: frame_size (%u) > skb_tailroom (%u)!",(char *)(& dev->name),status->frame_size,skb_tailroom(packet->skb));
    }
    #line 2463 
    (dev->stats.rx_errors) ++;
    #line 2464 
    return;
  }
  #line 2467 
  if (netif_running(dev)) 
                          #line 2467 
                          tmp_8 = 0; else 
                                          #line 2467 
                                          tmp_8 = 1;
  #line 2467 
  if ((long)tmp_8 != 0L) {
    #line 2468 
    (dev->stats.rx_errors) ++;
    #line 2469 
    (priv->wstats.discard.misc) ++;
    #line 2470 
    if ((ipw2100_debug_level & 8192U) != 0U) {
      #line 2470 
      int tmp_6;
      #line 2470 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2470 
                                                               tmp_6 = 73; else 
                                                                    #line 2470 
                                                                    tmp_6 = 85;
      #line 2470 
      printk((char *)"\001",tmp_6,(char *)"isr_rx");
      #line 2470 
      printk((char *)"Dropping packet while interface is not up.\n");
    }
    #line 2471 
    return;
  }
  #line 2474 
  if ((long)((priv->ieee)->iw_mode != 6) != 0L && (long)((priv->status & 1024UL) == 0UL) != 0L) {
    #line 2476 
    if ((ipw2100_debug_level & 8192U) != 0U) {
      #line 2476 
      int tmp_10;
      #line 2476 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2476 
                                                               tmp_10 = 73; else 
                                                                    #line 2476 
                                                                    tmp_10 = 85;
      #line 2476 
      printk((char *)"\001",tmp_10,(char *)"isr_rx");
      #line 2476 
      printk((char *)"Dropping packet while not associated.\n");
    }
    #line 2477 
    (priv->wstats.discard.misc) ++;
    #line 2478 
    return;
  }
  #line 2481 
  pci_unmap_single(priv->pci_dev,packet->dma_addr,2340UL,2);
  #line 2485 
  skb_put(packet->skb,status->frame_size);
  {
    #line 2491 
    __UNIQUE_ID___x567 = status->frame_size;
    #line 2491 
    unsigned int __UNIQUE_ID___y568 = 2340U;
    #line 2491 
    if (__UNIQUE_ID___x567 < __UNIQUE_ID___y568) 
                                                 #line 2491 
                                                 tmp_11 = __UNIQUE_ID___x567; else 
                                                                    #line 2491 
                                                                    tmp_11 = __UNIQUE_ID___y568;
    }
  #line 2490 
  ;
  #line 2490 
  skb_copy_from_linear_data(packet->skb,(void *)(& packet_data),tmp_11);
  #line 2495 
  if (libipw_rx(priv->ieee,packet->skb,stats) == 0) {
    #line 2497 
    if ((ipw2100_debug_level & 8192U) != 0U) {
      #line 2497 
      int tmp_14;
      #line 2497 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2497 
                                                               tmp_14 = 73; else 
                                                                    #line 2497 
                                                                    tmp_14 = 85;
      #line 2497 
      printk((char *)"\001",tmp_14,(char *)"isr_rx");
      #line 2497 
      printk((char *)"%s: Non consumed packet:\n",(char *)(& dev->name));
    }
    #line 2499 
    printk_buf(8192,(u8 *)(& packet_data),status->frame_size);
    #line 2501 
    (dev->stats.rx_errors) ++;
    #line 2504 
    dev_kfree_skb_any(packet->skb);
    #line 2505 
    packet->skb = (struct sk_buff *)0;
  }
  #line 2509 
  if ((long)(ipw2100_alloc_skb(priv,packet) != 0) != 0L) {
    #line 2510 
    printk((char *)"\001",(char *)(& dev->name));
    #line 2514 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2514 
      int tmp_17;
      #line 2514 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2514 
                                                               tmp_17 = 73; else 
                                                                    #line 2514 
                                                                    tmp_17 = 85;
      #line 2514 
      printk((char *)"\001",tmp_17,(char *)"isr_rx");
      #line 2514 
      printk((char *)"TODO: Shutdown adapter...\n");
    }
  }
  #line 2518 
  (priv->rx_queue.drv + (unsigned long)i)->host_addr = (unsigned int)packet->dma_addr;
  #line 2519 
  return;
}

#line 2523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void isr_rx_monitor(struct ipw2100_priv *priv, int i, struct libipw_rx_stats *stats)
{
  #line 2536 
  struct ipw_rt_hdr *ipw_rt;
  #line 2551 
  int tmp_8;
  #line 2526 
  struct net_device *dev = priv->net_dev;
  #line 2527 
  struct ipw2100_status *status = priv->status_queue.drv + (unsigned long)i;
  #line 2528 
  struct ipw2100_rx_packet *packet = priv->rx_buffers + (unsigned long)i;
  #line 2538 
  if ((ipw2100_debug_level & 16777216U) != 0U) {
    #line 2538 
    int tmp_0;
    #line 2538 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2538 
                                                             tmp_0 = 73; else 
                                                                    #line 2538 
                                                                    tmp_0 = 85;
    #line 2538 
    printk((char *)"\001",tmp_0,(char *)"isr_rx_monitor");
    #line 2538 
    printk((char *)"Handler...\n");
  }
  #line 2540 
  ;
  #line 2540 
  if ((long)((unsigned long)status->frame_size > (unsigned long)skb_tailroom(packet->skb) + 18446744073709551607UL) != 0L) {
    #line 2542 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2542 
      int tmp_2;
      #line 2542 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2542 
                                                               tmp_2 = 73; else 
                                                                    #line 2542 
                                                                    tmp_2 = 85;
      #line 2542 
      printk((char *)"\001",tmp_2,(char *)"isr_rx_monitor");
      #line 2542 
      ;
      #line 2542 
      ;
      #line 2542 
      printk((char *)"%s: frame_size (%u) > skb_tailroom (%u)!",(char *)(& dev->name),status->frame_size,skb_tailroom(packet->skb));
    }
    #line 2547 
    (dev->stats.rx_errors) ++;
    #line 2548 
    return;
  }
  #line 2551 
  if (netif_running(dev)) 
                          #line 2551 
                          tmp_8 = 0; else 
                                          #line 2551 
                                          tmp_8 = 1;
  #line 2551 
  if ((long)tmp_8 != 0L) {
    #line 2552 
    (dev->stats.rx_errors) ++;
    #line 2553 
    (priv->wstats.discard.misc) ++;
    #line 2554 
    if ((ipw2100_debug_level & 8192U) != 0U) {
      #line 2554 
      int tmp_6;
      #line 2554 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2554 
                                                               tmp_6 = 73; else 
                                                                    #line 2554 
                                                                    tmp_6 = 85;
      #line 2554 
      printk((char *)"\001",tmp_6,(char *)"isr_rx_monitor");
      #line 2554 
      printk((char *)"Dropping packet while interface is not up.\n");
    }
    #line 2555 
    return;
  }
  #line 2558 
  if ((long)((priv->config & 2048UL) != 0UL) != 0L && (long)(((int)status->flags & 4) != 0) != 0L) {
    #line 2560 
    if ((ipw2100_debug_level & 16777216U) != 0U) {
      #line 2560 
      int tmp_10;
      #line 2560 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2560 
                                                               tmp_10 = 73; else 
                                                                    #line 2560 
                                                                    tmp_10 = 85;
      #line 2560 
      printk((char *)"\001",tmp_10,(char *)"isr_rx_monitor");
      #line 2560 
      printk((char *)"CRC error in packet.  Dropping.\n");
    }
    #line 2561 
    (dev->stats.rx_errors) ++;
    #line 2562 
    return;
  }
  #line 2565 
  pci_unmap_single(priv->pci_dev,packet->dma_addr,2340UL,2);
  #line 2567 
  __memmove((void *)((packet->skb)->data + 9UL),(void *)(packet->skb)->data,(unsigned long)status->frame_size);
  #line 2570 
  ipw_rt = (struct ipw_rt_hdr *)(packet->skb)->data;
  #line 2572 
  ipw_rt->rt_hdr.it_version = (unsigned char)0U;
  #line 2573 
  ipw_rt->rt_hdr.it_pad = (unsigned char)0U;
  #line 2574 
  ipw_rt->rt_hdr.it_len = (unsigned short)9U;
  #line 2576 
  ipw_rt->rt_hdr.it_present = 32U;
  #line 2578 
  ipw_rt->rt_dbmsignal = (signed char)((unsigned int)status->rssi + 158U);
  #line 2580 
  skb_put(packet->skb,status->frame_size + 9U);
  #line 2582 
  if (libipw_rx(priv->ieee,packet->skb,stats) == 0) {
    #line 2583 
    (dev->stats.rx_errors) ++;
    #line 2586 
    dev_kfree_skb_any(packet->skb);
    #line 2587 
    packet->skb = (struct sk_buff *)0;
  }
  #line 2591 
  if ((long)(ipw2100_alloc_skb(priv,packet) != 0) != 0L) {
    #line 2592 
    printk((char *)"\001",(char *)(& dev->name));
    #line 2596 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 2596 
      int tmp_13;
      #line 2596 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2596 
                                                               tmp_13 = 73; else 
                                                                    #line 2596 
                                                                    tmp_13 = 85;
      #line 2596 
      printk((char *)"\001",tmp_13,(char *)"isr_rx_monitor");
      #line 2596 
      printk((char *)"TODO: Shutdown adapter...\n");
    }
  }
  #line 2600 
  (priv->rx_queue.drv + (unsigned long)i)->host_addr = (unsigned int)packet->dma_addr;
  #line 2601 
  return;
}

#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_corruption_check(struct ipw2100_priv *priv, int i)
{
  #line 2607 
  struct ipw2100_status *status = priv->status_queue.drv + (unsigned long)i;
  #line 2608 
  struct ipw2100_rx *u = (priv->rx_buffers + (unsigned long)i)->rxp;
  #line 2609 
  u16 frame_type = (unsigned short)((unsigned int)status->status_fields & 15U);
  #line 2611 
  switch ((int)frame_type) {
    #line 2612 
    case 0: 
            #line 2612 
    ;
    #line 2613 
    return status->frame_size != 496U;
    #line 2614 
    case 1: 
            #line 2614 
    ;
    #line 2615 
    return status->frame_size != 4U;
    #line 2616 
    case 4: 
            #line 2616 
    ;
    #line 2617 
    return status->frame_size <= 7U;
    #line 2618 
    case 2: 
            #line 2618 
    ;
    #line 2619 
    case 3: 
            #line 2619 
    ;
    #line 2621 
    return 0;
  }
  #line 2634 
  return 1;
}

#line 2661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void __ipw2100_rx_process(struct ipw2100_priv *priv)
{
  #line 2665 
  struct ipw2100_rx_packet *packet;
  #line 2666 
  u16 frame_type;
  #line 2667 
  u32 r;
  #line 2667 
  u32 w;
  #line 2667 
  u32 i;
  #line 2667 
  u32 s;
  #line 2668 
  struct ipw2100_rx *u;
  #line 2663 
  struct ipw2100_bd_queue *rxq = & priv->rx_queue;
  #line 2664 
  struct ipw2100_status_queue *sq = & priv->status_queue;
  #line 2669 
  struct libipw_rx_stats stats = {.mac_time = (unsigned int)jiffies, .rssi = (signed char)0, .signal = (unsigned char)0, .noise = (unsigned char)0, .rate = (unsigned short)0, .received_channel = (unsigned char)0, .control = (unsigned char)0, .mask = (unsigned char)0, .freq = (unsigned char)0, .len = (unsigned short)0, .tsf = 0ULL, .beacon_time = 0U};
  #line 2673 
  read_register(priv->net_dev,672U,& r);
  #line 2674 
  read_register(priv->net_dev,4000U,& w);
  #line 2676 
  if (rxq->entries <= r) {
    #line 2677 
    if ((ipw2100_debug_level & 16777216U) != 0U) {
      #line 2677 
      int tmp_0;
      #line 2677 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2677 
                                                               tmp_0 = 73; else 
                                                                    #line 2677 
                                                                    tmp_0 = 85;
      #line 2677 
      printk((char *)"\001",tmp_0,(char *)"__ipw2100_rx_process");
      #line 2677 
      printk((char *)"exit - bad read index\n");
    }
    #line 2678 
    return;
  }
  #line 2681 
  i = (rxq->next + 1U) % rxq->entries;
  #line 2682 
  s = i;
  #line 2683 
  while (i != r) {
    #line 2687 
    packet = priv->rx_buffers + (unsigned long)i;
    #line 2691 
    pci_dma_sync_single_for_cpu(priv->pci_dev,packet->dma_addr,2340UL,2);
    #line 2695 
    if ((long)(ipw2100_corruption_check(priv,(int)i) != 0) != 0L) {
      #line 2696 
      ipw2100_corruption_detected(priv,(int)i);
      #line 2697 
      goto increment;
    }
    #line 2700 
    u = packet->rxp;
    #line 2701 
    frame_type = (unsigned short)((unsigned int)(sq->drv + (unsigned long)i)->status_fields & 15U);
    #line 2702 
    stats.rssi = (signed char)((unsigned int)(sq->drv + (unsigned long)i)->rssi + 158U);
    #line 2703 
    stats.len = (unsigned short)(sq->drv + (unsigned long)i)->frame_size;
    #line 2705 
    stats.mask = (unsigned char)0U;
    #line 2706 
    if ((int)stats.rssi != 0) 
                              #line 2707 
                              stats.mask = (unsigned char)((unsigned int)stats.mask | 2U);
    #line 2708 
    stats.freq = (unsigned char)1U;
    #line 2710 
    if ((ipw2100_debug_level & 16777216U) != 0U) {
      #line 2710 
      int tmp_3;
      #line 2710 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2710 
                                                               tmp_3 = 73; else 
                                                                    #line 2710 
                                                                    tmp_3 = 85;
      #line 2710 
      printk((char *)"\001",tmp_3,(char *)"__ipw2100_rx_process");
      #line 2710 
      printk((char *)"%s: \'%s\' frame type received (%d).\n",(char *)(& (priv->net_dev)->name),frame_types[(int)frame_type],(int)stats.len);
    }
    #line 2714 
    switch ((int)frame_type) {
      #line 2715 
      case 0: 
              #line 2715 
      ;
      #line 2717 
      isr_rx_complete_command(priv,& u->rx_data.command);
      #line 2718 
      break;
      #line 2720 
      case 1: 
              #line 2720 
      ;
      #line 2721 
      isr_status_change(priv,(int)u->rx_data.status);
      #line 2722 
      break;
      #line 2724 
      case 2: 
              #line 2724 
      ;
      #line 2725 
      case 3: 
              #line 2725 
      ;
      #line 2727 
      if ((priv->ieee)->iw_mode == 6) {
        #line 2728 
        isr_rx_monitor(priv,(int)i,& stats);
        #line 2729 
        break;
      }
      #line 2732 
      if ((unsigned int)stats.len <= 23U) 
                                          #line 2733 
                                          break;
      #line 2734 
      switch ((int)u->rx_data.header.frame_ctl & 12) {
        #line 2735 
        case 0: 
                #line 2735 
        ;
        #line 2736 
        libipw_rx_mgt(priv->ieee,& u->rx_data.header,& stats);
        #line 2738 
        break;
        #line 2740 
        case 4: 
                #line 2740 
        ;
        #line 2741 
        break;
        #line 2743 
        case 8: 
                #line 2743 
        ;
        #line 2744 
        isr_rx(priv,(int)i,& stats);
        #line 2745 
        break;
      }
      #line 2748 
      break;
    }
    #line 2751 
    increment: 
               #line 2751 
    ;
    #line 2753 
    (rxq->drv + (unsigned long)i)->status.info.field = (unsigned char)0U;
    #line 2755 
    i = (i + 1U) % rxq->entries;
  }
  #line 2758 
  if (i != s) {
    #line 2760 
    if (i == 0U) 
                 #line 2760 
                 rxq->next = rxq->entries + 4294967295U; else 
                                                              #line 2760 
                                                              rxq->next = i + 4294967295U;
    #line 2762 
    write_register(priv->net_dev,4000U,rxq->next);
  }
  #line 2765 
  return;
}

#line 2806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int __ipw2100_tx_process(struct ipw2100_priv *priv)
{
  #line 2821 
  void *__mptr;
  #line 2809 
  struct ipw2100_bd *tbd;
  #line 2810 
  struct list_head *element;
  #line 2811 
  struct ipw2100_tx_packet *packet;
  #line 2812 
  int descriptors_used;
  #line 2813 
  int e;
  #line 2813 
  int i;
  #line 2814 
  u32 r;
  #line 2814 
  u32 w;
  #line 2808 
  struct ipw2100_bd_queue *txq = & priv->tx_queue;
  #line 2814 
  u32 frag_num = 0U;
  #line 2816 
  if (list_empty(& priv->fw_pend_list) != 0) 
                                             #line 2817 
                                             return 0;
  #line 2819 
  element = priv->fw_pend_list.next;
  #line 2821 
  __mptr = (void *)element;
  #line 2821 
  packet = ((struct ipw2100_tx_packet *)(__mptr + 18446744073709551576U));
  #line 2822 
  tbd = txq->drv + (unsigned long)packet->index;
  #line 2825 
  switch (packet->type) {
    #line 2826 
    case 51966: 
                #line 2826 
    ;
    #line 2828 
    descriptors_used = 1;
    #line 2829 
    e = (int)txq->oldest;
    #line 2830 
    break;
    #line 2832 
    case 51967: 
                #line 2832 
    ;
    #line 2834 
    descriptors_used = (int)tbd->num_fragments;
    #line 2835 
    frag_num = (unsigned int)((int)tbd->num_fragments + -1);
    #line 2836 
    e = (int)(txq->oldest + frag_num);
    #line 2837 
    e = (int)((unsigned int)e % txq->entries);
    #line 2838 
    break;
    #line 2840 
    default: 
             #line 2840 
    ;
    #line 2841 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 2843 
    return 0;
  }
  #line 2850 
  read_register(priv->net_dev,640U,& r);
  #line 2852 
  read_register(priv->net_dev,3968U,& w);
  #line 2854 
  if (txq->next != w) 
                      #line 2855 
                      printk((char *)"\001",(char *)(& (priv->net_dev)->name));
  #line 2880 
  if ((r > w || (unsigned int)e >= r && (unsigned int)e < w) && ((unsigned int)e >= r || (unsigned int)e < w)) {
    #line 2881 
    if ((ipw2100_debug_level & 8388608U) != 0U) {
      #line 2881 
      int tmp_2;
      #line 2881 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2881 
                                                               tmp_2 = 73; else 
                                                                    #line 2881 
                                                                    tmp_2 = 85;
      #line 2881 
      printk((char *)"\001",tmp_2,(char *)"__ipw2100_tx_process");
      #line 2881 
      printk((char *)"exit - no processed packets ready to release.\n");
    }
    #line 2882 
    return 0;
  }
  #line 2885 
  list_del(element);
  #line 2886 
  (priv->fw_pend_stat.value) --;
  #line 2886 
  ;
  #line 2886 
  if (priv->fw_pend_stat.value < priv->fw_pend_stat.lo) 
                                                        #line 2886 
                                                        priv->fw_pend_stat.lo = priv->fw_pend_stat.value;
  #line 2890 
  i = (int)txq->oldest;
  #line 2891 
  if ((ipw2100_debug_level & 8388608U) != 0U) {
    #line 2891 
    int tmp_4;
    #line 2891 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2891 
                                                             tmp_4 = 73; else 
                                                                    #line 2891 
                                                                    tmp_4 = 85;
    #line 2891 
    printk((char *)"\001",tmp_4,(char *)"__ipw2100_tx_process");
    #line 2891 
    printk((char *)"TX%d V=%p P=%04X T=%04X L=%d\n",i,txq->drv + (unsigned long)i,(unsigned int)txq->nic + (unsigned int)((unsigned long)i) * 16U,(txq->drv + (unsigned long)i)->host_addr,(txq->drv + (unsigned long)i)->buf_length);
  }
  #line 2896 
  if (packet->type == 51967) {
    #line 2897 
    i = (int)((unsigned int)(i + 1) % txq->entries);
    #line 2899 
    if ((ipw2100_debug_level & 8388608U) != 0U) {
      #line 2899 
      int tmp_6;
      #line 2899 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2899 
                                                               tmp_6 = 73; else 
                                                                    #line 2899 
                                                                    tmp_6 = 85;
      #line 2899 
      printk((char *)"\001",tmp_6,(char *)"__ipw2100_tx_process");
      #line 2899 
      printk((char *)"TX%d V=%p P=%04X T=%04X L=%d\n",i,txq->drv + (unsigned long)i,(unsigned int)txq->nic + (unsigned int)((unsigned long)i) * 16U,(txq->drv + (unsigned long)i)->host_addr,(txq->drv + (unsigned long)i)->buf_length);
    }
  }
  #line 2909 
  switch (packet->type) {
    #line 2910 
    case 51967: 
                #line 2910 
    ;
    #line 2911 
    if ((unsigned int)(txq->drv + (unsigned long)txq->oldest)->status.info.fields.txType != 0U) 
      #line 2912 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name),txq->oldest,packet->index);
    #line 2918 
    i = 0;
    #line 2918 
    while ((unsigned int)i < frag_num) {
      #line 2919 
      tbd = txq->drv + (unsigned long)((unsigned int)((packet->index + 1) + i) % txq->entries);
      #line 2921 
      if ((ipw2100_debug_level & 8388608U) != 0U) {
        #line 2921 
        int tmp_8;
        #line 2921 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 2921 
                                                                 tmp_8 = 73; else 
                                                                    #line 2921 
                                                                    tmp_8 = 85;
        #line 2921 
        printk((char *)"\001",tmp_8,(char *)"__ipw2100_tx_process");
        #line 2921 
        printk((char *)"TX%d P=%08x L=%d\n",(unsigned int)((packet->index + 1) + i) % txq->entries,tbd->host_addr,tbd->buf_length);
      }
      #line 2925 
      pci_unmap_single(priv->pci_dev,(unsigned long long)tbd->host_addr,(unsigned long)tbd->buf_length,1);
      #line 2918 
      i ++;
    }
    #line 2930 
    libipw_txb_free(packet->info.d_struct.txb);
    #line 2931 
    packet->info.d_struct.txb = (struct libipw_txb *)0;
    #line 2933 
    list_add_tail(element,& priv->tx_free_list);
    #line 2934 
    (priv->tx_free_stat.value) ++;
    #line 2934 
    ;
    #line 2934 
    if (priv->tx_free_stat.value > priv->tx_free_stat.hi) 
                                                          #line 2934 
                                                          priv->tx_free_stat.hi = priv->tx_free_stat.value;
    #line 2938 
    if ((priv->status & 1024UL) != 0UL) 
                                        #line 2939 
                                        netif_wake_queue(priv->net_dev);
    #line 2943 
    netif_trans_update(priv->net_dev);
    #line 2945 
    break;
    #line 2947 
    case 51966: 
                #line 2947 
    ;
    #line 2948 
    if ((unsigned int)(txq->drv + (unsigned long)txq->oldest)->status.info.fields.txType != 1U) 
      #line 2949 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name),txq->oldest,packet->index);
    #line 2955 
    if ((packet->info.c_struct.cmd)->host_command_reg <= 69U) 
      #line 2957 
      if ((ipw2100_debug_level & 8388608U) != 0U) {
        #line 2957 
        int tmp_10;
        #line 2957 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 2957 
                                                                 tmp_10 = 73; else 
                                                                    #line 2957 
                                                                    tmp_10 = 85;
        #line 2957 
        printk((char *)"\001",tmp_10,(char *)"__ipw2100_tx_process");
        #line 2957 
        printk((char *)"Command \'%s (%d)\' processed: %d.\n",command_types[(packet->info.c_struct.cmd)->host_command_reg],(packet->info.c_struct.cmd)->host_command_reg,(packet->info.c_struct.cmd)->cmd_status_reg);
      }
    #line 2965 
    list_add_tail(element,& priv->msg_free_list);
    #line 2966 
    (priv->msg_free_stat.value) ++;
    #line 2966 
    ;
    #line 2966 
    if (priv->msg_free_stat.value > priv->msg_free_stat.hi) 
                                                            #line 2966 
                                                            priv->msg_free_stat.hi = priv->msg_free_stat.value;
    #line 2967 
    break;
  }
  #line 2971 
  txq->oldest = (unsigned int)(e + 1) % txq->entries;
  #line 2973 
  txq->available += (unsigned int)descriptors_used;
  #line 2974 
  priv->txq_stat.value = (int)txq->available;
  #line 2974 
  if (priv->txq_stat.value > priv->txq_stat.hi) 
                                                #line 2974 
                                                priv->txq_stat.hi = priv->txq_stat.value;
  #line 2974 
  if (priv->txq_stat.value < priv->txq_stat.lo) 
                                                #line 2974 
                                                priv->txq_stat.lo = priv->txq_stat.value;
  #line 2976 
  if ((ipw2100_debug_level & 8388608U) != 0U) {
    #line 2976 
    int tmp_12;
    #line 2976 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2976 
                                                             tmp_12 = 73; else 
                                                                    #line 2976 
                                                                    tmp_12 = 85;
    #line 2976 
    printk((char *)"\001",tmp_12,(char *)"__ipw2100_tx_process");
    #line 2976 
    printk((char *)"packet latency (send to process)  %ld jiffies\n",jiffies - (unsigned long)packet->jiffy_start);
  }
  #line 2979 
  return list_empty(& priv->fw_pend_list) == 0;
}

#line 2982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
__inline static void __ipw2100_tx_complete(struct ipw2100_priv *priv)
{
  #line 2984 
  int i = 0;
  #line 2986 
  while (1) {
    #line 2986 
    if (__ipw2100_tx_process(priv) != 0) {
      #line 2986 
      if (! (i <= 199)) 
                        #line 2986 
                        break;
    }
    else 
         #line 2986 
         break;
    #line 2987 
    i ++;
  }
  #line 2989 
  if (i == 200) 
                #line 2990 
                printk((char *)"\001",(char *)(& (priv->net_dev)->name),i);
  #line 2993 
  return;
}

#line 2996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_tx_send_commands(struct ipw2100_priv *priv)
{
  #line 2998 
  struct list_head *element;
  #line 2999 
  struct ipw2100_tx_packet *packet;
  #line 3001 
  struct ipw2100_bd *tbd;
  #line 3000 
  struct ipw2100_bd_queue *txq = & priv->tx_queue;
  #line 3002 
  int next = (int)txq->next;
  #line 3004 
  while (1) {
    #line 3004 
    if (! (list_empty(& priv->msg_pend_list) == 0)) 
                                                    #line 3004 
                                                    break;
    {
      #line 3020 
      void *__mptr;
      #line 3011 
      if (txq->available <= 3U) {
        #line 3012 
        if ((ipw2100_debug_level & 8388608U) != 0U) {
          #line 3012 
          int tmp_0;
          #line 3012 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 3012 
                                                                   tmp_0 = 73; else 
                                                                    #line 3012 
                                                                    tmp_0 = 85;
          #line 3012 
          printk((char *)"\001",tmp_0,(char *)"ipw2100_tx_send_commands");
          #line 3012 
          printk((char *)"no room in tx_queue\n");
        }
        #line 3013 
        break;
      }
      #line 3016 
      element = priv->msg_pend_list.next;
      #line 3017 
      list_del(element);
      #line 3018 
      (priv->msg_pend_stat.value) --;
      #line 3018 
      ;
      #line 3018 
      if (priv->msg_pend_stat.value < priv->msg_pend_stat.lo) 
                                                              #line 3018 
                                                              priv->msg_pend_stat.lo = priv->msg_pend_stat.value;
      #line 3020 
      __mptr = (void *)element;
      #line 3020 
      packet = ((struct ipw2100_tx_packet *)(__mptr + 18446744073709551576U));
      #line 3022 
      if ((ipw2100_debug_level & 8388608U) != 0U) {
        #line 3022 
        int tmp_3;
        #line 3022 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 3022 
                                                                 tmp_3 = 73; else 
                                                                    #line 3022 
                                                                    tmp_3 = 85;
        #line 3022 
        printk((char *)"\001",tmp_3,(char *)"ipw2100_tx_send_commands");
        #line 3022 
        printk((char *)"using TBD at virt=%p, phys=%04X\n",txq->drv + (unsigned long)txq->next,(unsigned int)txq->nic + txq->next * 16U);
      }
      #line 3027 
      packet->index = (int)txq->next;
      #line 3029 
      tbd = txq->drv + (unsigned long)txq->next;
      #line 3032 
      tbd->host_addr = (unsigned int)packet->info.c_struct.cmd_phys;
      #line 3033 
      tbd->buf_length = 496U;
      #line 3036 
      tbd->num_fragments = (unsigned char)1U;
      #line 3037 
      tbd->status.info.field = (unsigned char)10U;
      #line 3042 
      (txq->next) ++;
      #line 3043 
      txq->next %= txq->entries;
      #line 3044 
      (txq->available) --;
      #line 3045 
      (priv->txq_stat.value) --;
      #line 3045 
      ;
      #line 3045 
      if (priv->txq_stat.value < priv->txq_stat.lo) 
                                                    #line 3045 
                                                    priv->txq_stat.lo = priv->txq_stat.value;
      #line 3047 
      list_add_tail(element,& priv->fw_pend_list);
      #line 3048 
      (priv->fw_pend_stat.value) ++;
      #line 3048 
      ;
      #line 3048 
      if (priv->fw_pend_stat.value > priv->fw_pend_stat.hi) 
                                                            #line 3048 
                                                            priv->fw_pend_stat.hi = priv->fw_pend_stat.value;
    }
  }
  #line 3051 
  if (txq->next != (unsigned int)next) {
    #line 3053 
    ldv_inline_asm();
    #line 3055 
    write_register(priv->net_dev,3968U,txq->next);
  }
  #line 3059 
  return;
}

#line 3065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_tx_send_data(struct ipw2100_priv *priv)
{
  #line 3067 
  struct list_head *element;
  #line 3068 
  struct ipw2100_tx_packet *packet;
  #line 3070 
  struct ipw2100_bd *tbd;
  #line 3073 
  struct ipw2100_data_header *ipw_hdr;
  #line 3074 
  struct libipw_hdr_3addr *hdr;
  #line 3069 
  struct ipw2100_bd_queue *txq = & priv->tx_queue;
  #line 3071 
  int next = (int)txq->next;
  #line 3072 
  int i = 0;
  #line 3076 
  while (1) {
    #line 3076 
    if (! (list_empty(& priv->tx_pend_list) == 0)) 
                                                   #line 3076 
                                                   break;
    {
      #line 3084 
      void *__mptr;
      #line 3083 
      element = priv->tx_pend_list.next;
      #line 3084 
      __mptr = (void *)element;
      #line 3084 
      packet = ((struct ipw2100_tx_packet *)(__mptr + 18446744073709551576U));
      #line 3086 
      if ((long)((unsigned int)(packet->info.d_struct.txb)->nr_frags > 5U) != 0L) 
        #line 3090 
        if ((ipw2100_debug_level & 4U) != 0U) {
          #line 3090 
          int tmp_1;
          #line 3090 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 3090 
                                                                   tmp_1 = 73; else 
                                                                    #line 3090 
                                                                    tmp_1 = 85;
          #line 3090 
          printk((char *)"\001",tmp_1,(char *)"ipw2100_tx_send_data");
          #line 3090 
          printk((char *)"%s: Maximum BD threshold exceeded.  ",(char *)(& (priv->net_dev)->name));
        }
      #line 3095 
      if (txq->available <= (unsigned int)((int)(packet->info.d_struct.txb)->nr_frags + 3)) {
        #line 3096 
        if ((ipw2100_debug_level & 8388608U) != 0U) {
          #line 3096 
          int tmp_3;
          #line 3096 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 3096 
                                                                   tmp_3 = 73; else 
                                                                    #line 3096 
                                                                    tmp_3 = 85;
          #line 3096 
          printk((char *)"\001",tmp_3,(char *)"ipw2100_tx_send_data");
          #line 3096 
          printk((char *)"no room in tx_queue\n");
        }
        #line 3097 
        break;
      }
      #line 3100 
      list_del(element);
      #line 3101 
      (priv->tx_pend_stat.value) --;
      #line 3101 
      ;
      #line 3101 
      if (priv->tx_pend_stat.value < priv->tx_pend_stat.lo) 
                                                            #line 3101 
                                                            priv->tx_pend_stat.lo = priv->tx_pend_stat.value;
      #line 3103 
      tbd = txq->drv + (unsigned long)txq->next;
      #line 3105 
      packet->index = (int)txq->next;
      #line 3107 
      ipw_hdr = packet->info.d_struct.data;
      #line 3108 
      hdr = (struct libipw_hdr_3addr *)((packet->info.d_struct.txb)->fragments[0])->data;
      #line 3111 
      if ((priv->ieee)->iw_mode == 2) {
        #line 3114 
        memcpy((void *)(& ipw_hdr->src_addr),(void *)(& hdr->addr2),6UL);
        #line 3115 
        memcpy((void *)(& ipw_hdr->dst_addr),(void *)(& hdr->addr3),6UL);
      }
      else 
        #line 3116 
        if ((priv->ieee)->iw_mode == 1) {
          #line 3119 
          memcpy((void *)(& ipw_hdr->src_addr),(void *)(& hdr->addr2),6UL);
          #line 3120 
          memcpy((void *)(& ipw_hdr->dst_addr),(void *)(& hdr->addr1),6UL);
        }
      #line 3123 
      ipw_hdr->host_command_reg = 33U;
      #line 3124 
      ipw_hdr->host_command_reg1 = 0U;
      #line 3127 
      ipw_hdr->needs_encryption = (unsigned char)0U;
      #line 3128 
      ipw_hdr->encrypted = (packet->info.d_struct.txb)->encrypted;
      #line 3129 
      if ((unsigned int)(packet->info.d_struct.txb)->nr_frags > 1U) 
                                                                    #line 3130 
                                                                    ipw_hdr->fragment_size = (unsigned short)((unsigned int)(packet->info.d_struct.txb)->frag_size + 65512U); else 
                                                                    #line 3134 
                                                                    ipw_hdr->fragment_size = (unsigned short)0U;
      #line 3136 
      tbd->host_addr = (unsigned int)packet->info.d_struct.data_phys;
      #line 3137 
      tbd->buf_length = 52U;
      #line 3138 
      tbd->num_fragments = (unsigned char)((unsigned int)(packet->info.d_struct.txb)->nr_frags + 1U);
      #line 3139 
      tbd->status.info.field = (unsigned char)1U;
      #line 3142 
      (txq->next) ++;
      #line 3143 
      txq->next %= txq->entries;
      #line 3145 
      if ((ipw2100_debug_level & 8388608U) != 0U) {
        #line 3145 
        int tmp_5;
        #line 3145 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 3145 
                                                                 tmp_5 = 73; else 
                                                                    #line 3145 
                                                                    tmp_5 = 85;
        #line 3145 
        printk((char *)"\001",tmp_5,(char *)"ipw2100_tx_send_data");
        #line 3145 
        printk((char *)"data header tbd TX%d P=%08x L=%d\n",packet->index,tbd->host_addr,tbd->buf_length);
      }
      #line 3148 
      if ((unsigned int)(packet->info.d_struct.txb)->nr_frags > 1U) 
        #line 3149 
        if ((ipw2100_debug_level & 2097152U) != 0U) {
          #line 3149 
          int tmp_7;
          #line 3149 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 3149 
                                                                   tmp_7 = 73; else 
                                                                    #line 3149 
                                                                    tmp_7 = 85;
          #line 3149 
          printk((char *)"\001",tmp_7,(char *)"ipw2100_tx_send_data");
          #line 3149 
          printk((char *)"fragment Tx: %d frames\n",(int)(packet->info.d_struct.txb)->nr_frags);
        }
      #line 3153 
      i = 0;
      #line 3153 
      while ((int)(packet->info.d_struct.txb)->nr_frags > i) {
        {
          #line 3154 
          tbd = txq->drv + (unsigned long)txq->next;
          #line 3155 
          if ((int)(packet->info.d_struct.txb)->nr_frags + -1 == i) 
                                                                    #line 3156 
                                                                    tbd->status.info.field = (unsigned char)8U; else 
                                                                    #line 3160 
                                                                    tbd->status.info.field = (unsigned char)1U;
          #line 3164 
          tbd->buf_length = ((packet->info.d_struct.txb)->fragments[i])->len + 4294967272U;
          #line 3167 
          tbd->host_addr = (unsigned int)pci_map_single(priv->pci_dev,
                       (void *)(((packet->info.d_struct.txb)->fragments[i])->data + 24U),
                       (unsigned long)tbd->buf_length,1);
          #line 3174 
          if (pci_dma_mapping_error(priv->pci_dev,
                               (unsigned long long)tbd->host_addr) != 0) {
            #line 3176 
            if ((ipw2100_debug_level & 8388608U) != 0U) {
              #line 3176 
              int tmp_10;
              #line 3176 
              if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                #line 3176 
                tmp_10 = 73; else 
                                  #line 3176 
                                  tmp_10 = 85;
              #line 3176 
              printk((char *)"\001",tmp_10,(char *)"ipw2100_tx_send_data");
              #line 3176 
              printk((char *)"dma mapping error\n");
            }
            #line 3177 
            break;
          }
          #line 3180 
          if ((ipw2100_debug_level & 8388608U) != 0U) {
            #line 3180 
            int tmp_13;
            #line 3180 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 3180 
              tmp_13 = 73; else 
                                #line 3180 
                                tmp_13 = 85;
            #line 3180 
            printk((char *)"\001",tmp_13,(char *)"ipw2100_tx_send_data");
            #line 3180 
            printk((char *)"data frag tbd TX%d P=%08x L=%d\n",txq->next,tbd->host_addr,tbd->buf_length);
          }
          #line 3184 
          pci_dma_sync_single_for_device(priv->pci_dev,(unsigned long long)tbd->host_addr,(unsigned long)tbd->buf_length,1);
          #line 3189 
          (txq->next) ++;
          #line 3190 
          txq->next %= txq->entries;
        }
        #line 3153 
        i ++;
      }
      #line 3193 
      txq->available = (txq->available - (unsigned int)(packet->info.d_struct.txb)->nr_frags) - 1U;
      #line 3194 
      priv->txq_stat.value = (int)txq->available;
      #line 3194 
      if (priv->txq_stat.value > priv->txq_stat.hi) 
                                                    #line 3194 
                                                    priv->txq_stat.hi = priv->txq_stat.value;
      #line 3194 
      if (priv->txq_stat.value < priv->txq_stat.lo) 
                                                    #line 3194 
                                                    priv->txq_stat.lo = priv->txq_stat.value;
      #line 3196 
      list_add_tail(element,& priv->fw_pend_list);
      #line 3197 
      (priv->fw_pend_stat.value) ++;
      #line 3197 
      ;
      #line 3197 
      if (priv->fw_pend_stat.value > priv->fw_pend_stat.hi) 
                                                            #line 3197 
                                                            priv->fw_pend_stat.hi = priv->fw_pend_stat.value;
    }
  }
  #line 3200 
  if (txq->next != (unsigned int)next) 
                                       #line 3203 
                                       write_register(priv->net_dev,3968U,txq->next);
  #line 3206 
  return;
}

#line 3209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_irq_tasklet(struct ipw2100_priv *priv)
{
  #line 3212 
  unsigned long flags;
  #line 3213 
  u32 inta;
  #line 3213 
  u32 tmp;
  #line 3211 
  struct net_device *dev = priv->net_dev;
  #line 3215 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 3216 
  ipw2100_disable_interrupts(priv);
  #line 3218 
  read_register(dev,8U,& inta);
  #line 3220 
  if ((ipw2100_debug_level & 33554432U) != 0U) {
    #line 3220 
    int tmp_1;
    #line 3220 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3220 
                                                             tmp_1 = 73; else 
                                                                    #line 3220 
                                                                    tmp_1 = 85;
    #line 3220 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_irq_tasklet");
    #line 3220 
    printk((char *)"enter - INTA: 0x%08lX\n",(unsigned long)inta & 3238068243UL);
  }
  #line 3223 
  (priv->in_isr) ++;
  #line 3224 
  (priv->interrupts) ++;
  #line 3229 
  if ((ipw2100_debug_level & 33554432U) != 0U) {
    #line 3229 
    int tmp_3;
    #line 3229 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3229 
                                                             tmp_3 = 73; else 
                                                                    #line 3229 
                                                                    tmp_3 = 85;
    #line 3229 
    printk((char *)"\001",tmp_3,(char *)"ipw2100_irq_tasklet");
    #line 3229 
    printk((char *)"INTA: 0x%08lX\n",(unsigned long)inta & 3238068243UL);
  }
  #line 3232 
  if ((inta & 1073741824U) != 0U) {
    #line 3233 
    printk((char *)"\001");
    #line 3235 
    (priv->inta_other) ++;
    #line 3236 
    write_register(dev,8U,1073741824U);
    #line 3238 
    read_nic_dword(dev,174064U,& priv->fatal_error);
    #line 3239 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 3239 
      int tmp_5;
      #line 3239 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3239 
                                                               tmp_5 = 73; else 
                                                                    #line 3239 
                                                                    tmp_5 = 85;
      #line 3239 
      printk((char *)"\001",tmp_5,(char *)"ipw2100_irq_tasklet");
      #line 3239 
      printk((char *)"%s: Fatal error value: 0x%08X\n",(char *)(& (priv->net_dev)->name),priv->fatal_error);
    }
    #line 3242 
    read_nic_dword(dev,priv->fatal_error & 262143U,& tmp);
    #line 3243 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 3243 
      int tmp_7;
      #line 3243 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3243 
                                                               tmp_7 = 73; else 
                                                                    #line 3243 
                                                                    tmp_7 = 85;
      #line 3243 
      printk((char *)"\001",tmp_7,(char *)"ipw2100_irq_tasklet");
      #line 3243 
      printk((char *)"%s: Fatal error address value: 0x%08X\n",(char *)(& (priv->net_dev)->name),tmp);
    }
    #line 3247 
    schedule_reset(priv);
  }
  #line 3250 
  if ((inta & 2147483648U) != 0U) {
    #line 3251 
    printk((char *)"\001");
    #line 3253 
    (priv->inta_other) ++;
    #line 3254 
    write_register(dev,8U,2147483648U);
  }
  #line 3257 
  if ((inta & 2U) != 0U) {
    #line 3258 
    if ((ipw2100_debug_level & 33554432U) != 0U) {
      #line 3258 
      int tmp_9;
      #line 3258 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3258 
                                                               tmp_9 = 73; else 
                                                                    #line 3258 
                                                                    tmp_9 = 85;
      #line 3258 
      printk((char *)"\001",tmp_9,(char *)"ipw2100_irq_tasklet");
      #line 3258 
      printk((char *)"RX interrupt\n");
    }
    #line 3260 
    (priv->rx_interrupts) ++;
    #line 3262 
    write_register(dev,8U,2U);
    #line 3264 
    __ipw2100_rx_process(priv);
    #line 3265 
    __ipw2100_tx_complete(priv);
  }
  #line 3268 
  if ((inta & 1U) != 0U) {
    #line 3269 
    if ((ipw2100_debug_level & 33554432U) != 0U) {
      #line 3269 
      int tmp_11;
      #line 3269 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3269 
                                                               tmp_11 = 73; else 
                                                                    #line 3269 
                                                                    tmp_11 = 85;
      #line 3269 
      printk((char *)"\001",tmp_11,(char *)"ipw2100_irq_tasklet");
      #line 3269 
      printk((char *)"TX interrupt\n");
    }
    #line 3271 
    (priv->tx_interrupts) ++;
    #line 3273 
    write_register(dev,8U,1U);
    #line 3275 
    __ipw2100_tx_complete(priv);
    #line 3276 
    ipw2100_tx_send_commands(priv);
    #line 3277 
    ipw2100_tx_send_data(priv);
  }
  #line 3280 
  if ((inta & 4U) != 0U) {
    #line 3281 
    if ((ipw2100_debug_level & 33554432U) != 0U) {
      #line 3281 
      int tmp_13;
      #line 3281 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3281 
                                                               tmp_13 = 73; else 
                                                                    #line 3281 
                                                                    tmp_13 = 85;
      #line 3281 
      printk((char *)"\001",tmp_13,(char *)"ipw2100_irq_tasklet");
      #line 3281 
      printk((char *)"TX complete\n");
    }
    #line 3282 
    (priv->inta_other) ++;
    #line 3283 
    write_register(dev,8U,4U);
    #line 3285 
    __ipw2100_tx_complete(priv);
  }
  #line 3288 
  if ((inta & 8U) != 0U) {
    #line 3290 
    (priv->inta_other) ++;
    #line 3291 
    write_register(dev,8U,8U);
  }
  #line 3294 
  if ((inta & 16777216U) != 0U) {
    #line 3295 
    if ((ipw2100_debug_level & 33554432U) != 0U) {
      #line 3295 
      int tmp_15;
      #line 3295 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3295 
                                                               tmp_15 = 73; else 
                                                                    #line 3295 
                                                                    tmp_15 = 85;
      #line 3295 
      printk((char *)"\001",tmp_15,(char *)"ipw2100_irq_tasklet");
      #line 3295 
      printk((char *)"FW init done interrupt\n");
    }
    #line 3296 
    (priv->inta_other) ++;
    #line 3298 
    read_register(dev,8U,& tmp);
    #line 3299 
    if ((tmp & 3221225472U) != 0U) 
                                   #line 3301 
                                   write_register(dev,8U,3221225472U);
    #line 3306 
    write_register(dev,8U,16777216U);
  }
  #line 3309 
  if ((inta & 16U) != 0U) {
    #line 3310 
    if ((ipw2100_debug_level & 33554432U) != 0U) {
      #line 3310 
      int tmp_17;
      #line 3310 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3310 
                                                               tmp_17 = 73; else 
                                                                    #line 3310 
                                                                    tmp_17 = 85;
      #line 3310 
      printk((char *)"\001",tmp_17,(char *)"ipw2100_irq_tasklet");
      #line 3310 
      printk((char *)"Status change interrupt\n");
    }
    #line 3311 
    (priv->inta_other) ++;
    #line 3312 
    write_register(dev,8U,16U);
  }
  #line 3315 
  if ((inta & 65536U) != 0U) {
    #line 3316 
    if ((ipw2100_debug_level & 33554432U) != 0U) {
      #line 3316 
      int tmp_19;
      #line 3316 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3316 
                                                               tmp_19 = 73; else 
                                                                    #line 3316 
                                                                    tmp_19 = 85;
      #line 3316 
      printk((char *)"\001",tmp_19,(char *)"ipw2100_irq_tasklet");
      #line 3316 
      printk((char *)"slave host mode interrupt\n");
    }
    #line 3317 
    (priv->inta_other) ++;
    #line 3318 
    write_register(dev,8U,65536U);
  }
  #line 3322 
  (priv->in_isr) --;
  #line 3323 
  ipw2100_enable_interrupts(priv);
  #line 3325 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 3327 
  if ((ipw2100_debug_level & 33554432U) != 0U) {
    #line 3327 
    int tmp_21;
    #line 3327 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3327 
                                                             tmp_21 = 73; else 
                                                                    #line 3327 
                                                                    tmp_21 = 85;
    #line 3327 
    printk((char *)"\001",tmp_21,(char *)"ipw2100_irq_tasklet");
    #line 3327 
    printk((char *)"exit\n");
  }
  #line 3329 
  return;
}

#line 3330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static irqreturn_t ipw2100_interrupt(int irq, void *data)
{
  #line 3333 
  u32 inta;
  #line 3333 
  u32 inta_mask;
  #line 3332 
  struct ipw2100_priv *priv = (struct ipw2100_priv *)data;
  #line 3335 
  if (data == (void *)0) 
                         #line 3336 
                         return IRQ_NONE;
  #line 3338 
  cif_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 3344 
  if ((priv->status & 2048UL) == 0UL) 
                                      #line 3346 
                                      goto none;
  #line 3349 
  read_register(priv->net_dev,12U,& inta_mask);
  #line 3350 
  read_register(priv->net_dev,8U,& inta);
  #line 3352 
  if (inta == 4294967295U) {
    #line 3354 
    printk((char *)"\001");
    #line 3355 
    goto none;
  }
  #line 3358 
  inta &= 3238068243U;
  #line 3360 
  if ((inta & inta_mask) == 0U) 
                                #line 3362 
                                goto none;
  #line 3369 
  ipw2100_disable_interrupts(priv);
  #line 3371 
  cif_tasklet_schedule(& priv->irq_tasklet);
  #line 3372 
  cif_spin_unlock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 3374 
  return IRQ_HANDLED;
  #line 3375 
  none: 
        #line 3375 
  ;
  #line 3376 
  cif_spin_unlock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 3377 
  return IRQ_NONE;
}

#line 3380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static netdev_tx_t ipw2100_tx(struct libipw_txb *txb, struct net_device *dev, int pri)
{
  #line 3401 
  void *__mptr;
  #line 3384 
  struct list_head *element;
  #line 3385 
  struct ipw2100_tx_packet *packet;
  #line 3386 
  unsigned long flags;
  #line 3383 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 3388 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 3390 
  if ((priv->status & 1024UL) == 0UL) {
    #line 3391 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 3391 
      int tmp_1;
      #line 3391 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3391 
                                                               tmp_1 = 73; else 
                                                                    #line 3391 
                                                                    tmp_1 = 85;
      #line 3391 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_tx");
      #line 3391 
      printk((char *)"Can not transmit when not connected.\n");
    }
    #line 3392 
    ((priv->net_dev)->stats.tx_carrier_errors) ++;
    #line 3393 
    netif_stop_queue(dev);
    #line 3394 
    goto fail_unlock;
  }
  #line 3397 
  if (list_empty(& priv->tx_free_list) != 0) 
                                             #line 3398 
                                             goto fail_unlock;
  #line 3400 
  element = priv->tx_free_list.next;
  #line 3401 
  __mptr = (void *)element;
  #line 3401 
  packet = ((struct ipw2100_tx_packet *)(__mptr + 18446744073709551576U));
  #line 3403 
  packet->info.d_struct.txb = txb;
  #line 3405 
  if ((ipw2100_debug_level & 8388608U) != 0U) {
    #line 3405 
    int tmp_5;
    #line 3405 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3405 
                                                             tmp_5 = 73; else 
                                                                    #line 3405 
                                                                    tmp_5 = 85;
    #line 3405 
    printk((char *)"\001",tmp_5,(char *)"ipw2100_tx");
    #line 3405 
    printk((char *)"Sending fragment (%d bytes):\n",(txb->fragments[0])->len);
  }
  #line 3406 
  printk_buf(8388608,(txb->fragments[0])->data,(txb->fragments[0])->len);
  #line 3408 
  packet->jiffy_start = (int)jiffies;
  #line 3410 
  list_del(element);
  #line 3411 
  (priv->tx_free_stat.value) --;
  #line 3411 
  ;
  #line 3411 
  if (priv->tx_free_stat.value < priv->tx_free_stat.lo) 
                                                        #line 3411 
                                                        priv->tx_free_stat.lo = priv->tx_free_stat.value;
  #line 3413 
  list_add_tail(element,& priv->tx_pend_list);
  #line 3414 
  (priv->tx_pend_stat.value) ++;
  #line 3414 
  ;
  #line 3414 
  if (priv->tx_pend_stat.value > priv->tx_pend_stat.hi) 
                                                        #line 3414 
                                                        priv->tx_pend_stat.hi = priv->tx_pend_stat.value;
  #line 3416 
  ipw2100_tx_send_data(priv);
  #line 3418 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 3419 
  return NETDEV_TX_OK;
  #line 3421 
  fail_unlock: 
               #line 3421 
  ;
  #line 3422 
  netif_stop_queue(dev);
  #line 3423 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 3424 
  return NETDEV_TX_BUSY;
}

#line 3427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_msg_allocate(struct ipw2100_priv *priv)
{
  #line 3429 
  int i;
  #line 3429 
  int j;
  #line 3430 
  void *v;
  #line 3431 
  dma_addr_t p;
  #line 3429 
  int err = -22;
  #line 3434 
  priv->msg_buffers = (struct ipw2100_tx_packet *)kmalloc_array(40UL,56UL,3264U);
  #line 3437 
  if (priv->msg_buffers == (struct ipw2100_tx_packet *)0) 
                                                          #line 3438 
                                                          return -12;
  #line 3440 
  i = 0;
  #line 3440 
  while (i <= 39) {
    #line 3441 
    v = pci_alloc_consistent(priv->pci_dev,496UL,& p);
    #line 3444 
    if (v == (void *)0) {
      #line 3445 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name));
      #line 3448 
      err = -12;
      #line 3449 
      break;
    }
    #line 3452 
    (priv->msg_buffers + (unsigned long)i)->type = 51966;
    #line 3453 
    (priv->msg_buffers + (unsigned long)i)->info.c_struct.cmd = (struct ipw2100_cmd_header *)v;
    #line 3455 
    (priv->msg_buffers + (unsigned long)i)->info.c_struct.cmd_phys = p;
    #line 3440 
    i ++;
  }
  #line 3458 
  if (i == 40) 
               #line 3459 
               return 0;
  #line 3461 
  j = 0;
  #line 3461 
  while (j < i) {
    #line 3462 
    pci_free_consistent(priv->pci_dev,496UL,(void *)(priv->msg_buffers + (unsigned long)j)->info.c_struct.cmd,(priv->msg_buffers + (unsigned long)j)->info.c_struct.cmd_phys);
    #line 3461 
    j ++;
  }
  #line 3469 
  kfree((void *)priv->msg_buffers);
  #line 3470 
  priv->msg_buffers = (struct ipw2100_tx_packet *)0;
  #line 3472 
  return err;
}

#line 3475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_msg_initialize(struct ipw2100_priv *priv)
{
  #line 3477 
  int i;
  #line 3479 
  INIT_LIST_HEAD(& priv->msg_free_list);
  #line 3480 
  INIT_LIST_HEAD(& priv->msg_pend_list);
  #line 3482 
  i = 0;
  #line 3482 
  while (i <= 39) {
    #line 3483 
    list_add_tail(& (priv->msg_buffers + (unsigned long)i)->list,& priv->msg_free_list);
    #line 3482 
    i ++;
  }
  #line 3484 
  priv->msg_free_stat.value = i;
  #line 3484 
  if (priv->msg_free_stat.value > priv->msg_free_stat.hi) 
                                                          #line 3484 
                                                          priv->msg_free_stat.hi = priv->msg_free_stat.value;
  #line 3484 
  if (priv->msg_free_stat.value < priv->msg_free_stat.lo) 
                                                          #line 3484 
                                                          priv->msg_free_stat.lo = priv->msg_free_stat.value;
  #line 3486 
  return 0;
}

#line 3489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_msg_free(struct ipw2100_priv *priv)
{
  #line 3491 
  int i;
  #line 3493 
  if (priv->msg_buffers == (struct ipw2100_tx_packet *)0) 
                                                          #line 3494 
                                                          return;
  #line 3496 
  i = 0;
  #line 3496 
  while (i <= 39) {
    #line 3497 
    pci_free_consistent(priv->pci_dev,496UL,(void *)(priv->msg_buffers + (unsigned long)i)->info.c_struct.cmd,(priv->msg_buffers + (unsigned long)i)->info.c_struct.cmd_phys);
    #line 3496 
    i ++;
  }
  #line 3504 
  kfree((void *)priv->msg_buffers);
  #line 3505 
  priv->msg_buffers = (struct ipw2100_tx_packet *)0;
  #line 3506 
  return;
}

#line 3508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_pci(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 3511 
  void *__mptr;
  #line 3513 
  int i;
  #line 3513 
  int j;
  #line 3514 
  u32 val;
  #line 3511 
  __mptr = (void *)d;
  #line 3511 
  struct pci_dev *pci_dev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 3512 
  char *out = buf;
  #line 3516 
  i = 0;
  #line 3516 
  while (i <= 15) {
    {
      #line 3517 
      out += (unsigned long)sprintf(out,(char *)"[%08X] ",i * 16);
      #line 3518 
      j = 0;
      #line 3518 
      while (j <= 15) {
        {
          #line 3519 
          pci_read_config_dword(pci_dev,i * 16 + j,& val);
          #line 3520 
          out += (unsigned long)sprintf(out,(char *)"%08X ",val);
        }
        #line 3518 
        j += 4;
      }
      #line 3522 
      out += (unsigned long)sprintf(out,(char *)"\n");
    }
    #line 3516 
    i ++;
  }
  #line 3525 
  return out - buf;
}

#line 3528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_pci = {.attr = {.name = (char *)"pci", .mode = (unsigned short)292U}, .show = & show_pci};
#line 3530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_cfg(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 3533 
  struct ipw2100_priv *p = dev_get_drvdata(d);
  #line 3534 
  return (long)sprintf(buf,(char *)"0x%08x\n",(int)p->config);
}

#line 3537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_cfg = {.attr = {.name = (char *)"cfg", .mode = (unsigned short)292U}, .show = & show_cfg};
#line 3539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_status(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 3542 
  struct ipw2100_priv *p = dev_get_drvdata(d);
  #line 3543 
  return (long)sprintf(buf,(char *)"0x%08x\n",(int)p->status);
}

#line 3546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_status = {.attr = {.name = (char *)"status", .mode = (unsigned short)292U}, .show = & show_status};
#line 3548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_capability(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 3551 
  struct ipw2100_priv *p = dev_get_drvdata(d);
  #line 3552 
  return (long)sprintf(buf,(char *)"0x%08x\n",(int)p->capability);
}

#line 3555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_capability = {.attr = {.name = (char *)"capability", .mode = (unsigned short)292U}, .show = & show_capability};
#line 3561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct __anonstruct_hw_data_1031 hw_data[5U] = {{.addr = 36U, .name = (char *)"REG_GP_CNTRL"}, {.addr = 48U, .name = (char *)"REG_GPIO"}, {.addr = 8U, .name = (char *)"REG_INTA"}, {.addr = 12U, .name = (char *)"REG_INTA_MASK"}, {.addr = 32U, .name = (char *)"REG_RESET_REG"}};
#line 3571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct __anonstruct_nic_data_1032 nic_data[3U] = {{.addr = 2228224U, .name = (char *)"IPW2100_CONTROL_REG", .size = 2UL}, {.addr = 2162708U, .name = (char *)"0x210014", .size = 1UL}, {.addr = 2162688U, .name = (char *)"0x210000", .size = 1UL}};
#line 3579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct __anonstruct_ord_data_1033 ord_data[147U] = {{.index = (unsigned char)1U, .name = (char *)"STAT_TX_HOST_REQUESTS", .desc = (char *)"requested Host Tx\'s (MSDU)"}, {.index = (unsigned char)2U, .name = (char *)"STAT_TX_HOST_COMPLETE", .desc = (char *)"successful Host Tx\'s (MSDU)"}, {.index = (unsigned char)3U, .name = (char *)"STAT_TX_DIR_DATA", .desc = (char *)"successful Directed Tx\'s (MSDU)"}, {.index = (unsigned char)4U, .name = (char *)"STAT_TX_DIR_DATA1", .desc = (char *)"successful Directed Tx\'s (MSDU) @ 1MB"}, {.index = (unsigned char)5U, .name = (char *)"STAT_TX_DIR_DATA2", .desc = (char *)"successful Directed Tx\'s (MSDU) @ 2MB"}, {.index = (unsigned char)6U, .name = (char *)"STAT_TX_DIR_DATA5_5", .desc = (char *)"successful Directed Tx\'s (MSDU) @ 5_5MB"}, {.index = (unsigned char)7U, .name = (char *)"STAT_TX_DIR_DATA11", .desc = (char *)"successful Directed Tx\'s (MSDU) @ 11MB"}, {.index = (unsigned char)13U, .name = (char *)"STAT_TX_NODIR_DATA1", .desc = (char *)"successful Non_Directed Tx\'s (MSDU) @ 1MB"}, {.index = (unsigned char)14U, .name = (char *)"STAT_TX_NODIR_DATA2", .desc = (char *)"successful Non_Directed Tx\'s (MSDU) @ 2MB"}, {.index = (unsigned char)15U, .name = (char *)"STAT_TX_NODIR_DATA5_5", .desc = (char *)"successful Non_Directed Tx\'s (MSDU) @ 5.5MB"}, {.index = (unsigned char)16U, .name = (char *)"STAT_TX_NODIR_DATA11", .desc = (char *)"successful Non_Directed Tx\'s (MSDU) @ 11MB"}, {.index = (unsigned char)21U, .name = (char *)"STAT_NULL_DATA", .desc = (char *)"successful NULL data Tx\'s"}, {.index = (unsigned char)22U, .name = (char *)"STAT_TX_RTS", .desc = (char *)"successful Tx RTS"}, {.index = (unsigned char)23U, .name = (char *)"STAT_TX_CTS", .desc = (char *)"successful Tx CTS"}, {.index = (unsigned char)24U, .name = (char *)"STAT_TX_ACK", .desc = (char *)"successful Tx ACK"}, {.index = (unsigned char)25U, .name = (char *)"STAT_TX_ASSN", .desc = (char *)"successful Association Tx\'s"}, {.index = (unsigned char)26U, .name = (char *)"STAT_TX_ASSN_RESP", .desc = (char *)"successful Association response Tx\'s"}, {.index = (unsigned char)27U, .name = (char *)"STAT_TX_REASSN", .desc = (char *)"successful Reassociation Tx\'s"}, {.index = (unsigned char)28U, .name = (char *)"STAT_TX_REASSN_RESP", .desc = (char *)"successful Reassociation response Tx\'s"}, {.index = (unsigned char)29U, .name = (char *)"STAT_TX_PROBE", .desc = (char *)"probes successfully transmitted"}, {.index = (unsigned char)30U, .name = (char *)"STAT_TX_PROBE_RESP", .desc = (char *)"probe responses successfully transmitted"}, {.index = (unsigned char)31U, .name = (char *)"STAT_TX_BEACON", .desc = (char *)"tx beacon"}, {.index = (unsigned char)32U, .name = (char *)"STAT_TX_ATIM", .desc = (char *)"Tx ATIM"}, {.index = (unsigned char)33U, .name = (char *)"STAT_TX_DISASSN", .desc = (char *)"successful Disassociation TX"}, {.index = (unsigned char)34U, .name = (char *)"STAT_TX_AUTH", .desc = (char *)"successful Authentication Tx"}, {.index = (unsigned char)35U, .name = (char *)"STAT_TX_DEAUTH", .desc = (char *)"successful Deauthentication TX"}, {.index = (unsigned char)41U, .name = (char *)"STAT_TX_TOTAL_BYTES", .desc = (char *)"Total successful Tx data bytes"}, {.index = (unsigned char)42U, .name = (char *)"STAT_TX_RETRIES", .desc = (char *)"Tx retries"}, {.index = (unsigned char)43U, .name = (char *)"STAT_TX_RETRY1", .desc = (char *)"Tx retries at 1MBPS"}, {.index = (unsigned char)44U, .name = (char *)"STAT_TX_RETRY2", .desc = (char *)"Tx retries at 2MBPS"}, {.index = (unsigned char)45U, .name = (char *)"STAT_TX_RETRY5_5", .desc = (char *)"Tx retries at 5.5MBPS"}, {.index = (unsigned char)46U, .name = (char *)"STAT_TX_RETRY11", .desc = (char *)"Tx retries at 11MBPS"}, {.index = (unsigned char)51U, .name = (char *)"STAT_TX_FAILURES", .desc = (char *)"Tx Failures"}, {.index = (unsigned char)53U, .name = (char *)"STAT_TX_MAX_TRIES_IN_HOP", .desc = (char *)"times max tries in a hop failed"}, {.index = (unsigned char)56U, .name = (char *)"STAT_TX_DISASSN_FAIL", .desc = (char *)"times disassociation failed"}, {.index = (unsigned char)57U, .name = (char *)"STAT_TX_ERR_CTS", .desc = (char *)"missed/bad CTS frames"}, {.index = (unsigned char)59U, .name = (char *)"STAT_TX_ERR_ACK", .desc = (char *)"tx err due to acks"}, {.index = (unsigned char)61U, .name = (char *)"STAT_RX_HOST", .desc = (char *)"packets passed to host"}, {.index = (unsigned char)62U, .name = (char *)"STAT_RX_DIR_DATA", .desc = (char *)"directed packets"}, {.index = (unsigned char)63U, .name = (char *)"STAT_RX_DIR_DATA1", .desc = (char *)"directed packets at 1MB"}, {.index = (unsigned char)64U, .name = (char *)"STAT_RX_DIR_DATA2", .desc = (char *)"directed packets at 2MB"}, {.index = (unsigned char)65U, .name = (char *)"STAT_RX_DIR_DATA5_5", .desc = (char *)"directed packets at 5.5MB"}, {.index = (unsigned char)66U, .name = (char *)"STAT_RX_DIR_DATA11", .desc = (char *)"directed packets at 11MB"}, {.index = (unsigned char)71U, .name = (char *)"STAT_RX_NODIR_DATA", .desc = (char *)"nondirected packets"}, {.index = (unsigned char)72U, .name = (char *)"STAT_RX_NODIR_DATA1", .desc = (char *)"nondirected packets at 1MB"}, {.index = (unsigned char)73U, .name = (char *)"STAT_RX_NODIR_DATA2", .desc = (char *)"nondirected packets at 2MB"}, {.index = (unsigned char)74U, .name = (char *)"STAT_RX_NODIR_DATA5_5", .desc = (char *)"nondirected packets at 5.5MB"}, {.index = (unsigned char)75U, .name = (char *)"STAT_RX_NODIR_DATA11", .desc = (char *)"nondirected packets at 11MB"}, {.index = (unsigned char)80U, .name = (char *)"STAT_RX_NULL_DATA", .desc = (char *)"null data rx\'s"}, {.index = (unsigned char)82U, .name = (char *)"STAT_RX_RTS", .desc = (char *)"Rx RTS"}, {.index = (unsigned char)83U, .name = (char *)"STAT_RX_CTS", .desc = (char *)"Rx CTS"}, {.index = (unsigned char)84U, .name = (char *)"STAT_RX_ACK", .desc = (char *)"Rx ACK"}, {.index = (unsigned char)85U, .name = (char *)"STAT_RX_CFEND", .desc = (char *)"Rx CF End"}, {.index = (unsigned char)86U, .name = (char *)"STAT_RX_CFEND_ACK", .desc = (char *)"Rx CF End + CF Ack"}, {.index = (unsigned char)87U, .name = (char *)"STAT_RX_ASSN", .desc = (char *)"Association Rx\'s"}, {.index = (unsigned char)88U, .name = (char *)"STAT_RX_ASSN_RESP", .desc = (char *)"Association response Rx\'s"}, {.index = (unsigned char)89U, .name = (char *)"STAT_RX_REASSN", .desc = (char *)"Reassociation Rx\'s"}, {.index = (unsigned char)90U, .name = (char *)"STAT_RX_REASSN_RESP", .desc = (char *)"Reassociation response Rx\'s"}, {.index = (unsigned char)91U, .name = (char *)"STAT_RX_PROBE", .desc = (char *)"probe Rx\'s"}, {.index = (unsigned char)92U, .name = (char *)"STAT_RX_PROBE_RESP", .desc = (char *)"probe response Rx\'s"}, {.index = (unsigned char)93U, .name = (char *)"STAT_RX_BEACON", .desc = (char *)"Rx beacon"}, {.index = (unsigned char)94U, .name = (char *)"STAT_RX_ATIM", .desc = (char *)"Rx ATIM"}, {.index = (unsigned char)95U, .name = (char *)"STAT_RX_DISASSN", .desc = (char *)"disassociation Rx"}, {.index = (unsigned char)96U, .name = (char *)"STAT_RX_AUTH", .desc = (char *)"authentication Rx"}, {.index = (unsigned char)97U, .name = (char *)"STAT_RX_DEAUTH", .desc = (char *)"deauthentication Rx"}, {.index = (unsigned char)101U, .name = (char *)"STAT_RX_TOTAL_BYTES", .desc = (char *)"Total rx data bytes received"}, {.index = (unsigned char)102U, .name = (char *)"STAT_RX_ERR_CRC", .desc = (char *)"packets with Rx CRC error"}, {.index = (unsigned char)103U, .name = (char *)"STAT_RX_ERR_CRC1", .desc = (char *)"Rx CRC errors at 1MB"}, {.index = (unsigned char)104U, .name = (char *)"STAT_RX_ERR_CRC2", .desc = (char *)"Rx CRC errors at 2MB"}, {.index = (unsigned char)105U, .name = (char *)"STAT_RX_ERR_CRC5_5", .desc = (char *)"Rx CRC errors at 5.5MB"}, {.index = (unsigned char)106U, .name = (char *)"STAT_RX_ERR_CRC11", .desc = (char *)"Rx CRC errors at 11MB"}, {.index = (unsigned char)112U, .name = (char *)"STAT_RX_DUPLICATE1", .desc = (char *)"duplicate rx packets at 1MB"}, {.index = (unsigned char)113U, .name = (char *)"STAT_RX_DUPLICATE2", .desc = (char *)"duplicate rx packets at 2MB"}, {.index = (unsigned char)114U, .name = (char *)"STAT_RX_DUPLICATE5_5", .desc = (char *)"duplicate rx packets at 5.5MB"}, {.index = (unsigned char)115U, .name = (char *)"STAT_RX_DUPLICATE11", .desc = (char *)"duplicate rx packets at 11MB"}, {.index = (unsigned char)119U, .name = (char *)"STAT_RX_DUPLICATE", .desc = (char *)"duplicate rx packets"}, {.index = (unsigned char)120U, .name = (char *)"PERS_DB_LOCK", .desc = (char *)"locking fw permanent  db"}, {.index = (unsigned char)121U, .name = (char *)"PERS_DB_SIZE", .desc = (char *)"size of fw permanent  db"}, {.index = (unsigned char)122U, .name = (char *)"PERS_DB_ADDR", .desc = (char *)"address of fw permanent  db"}, {.index = (unsigned char)123U, .name = (char *)"STAT_RX_INVALID_PROTOCOL", .desc = (char *)"rx frames with invalid protocol"}, {.index = (unsigned char)124U, .name = (char *)"SYS_BOOT_TIME", .desc = (char *)"Boot time"}, {.index = (unsigned char)125U, .name = (char *)"STAT_RX_NO_BUFFER", .desc = (char *)"rx frames rejected due to no buffer"}, {.index = (unsigned char)128U, .name = (char *)"STAT_RX_MISSING_FRAG", .desc = (char *)"rx frames dropped due to missing fragment"}, {.index = (unsigned char)129U, .name = (char *)"STAT_RX_ORPHAN_FRAG", .desc = (char *)"rx frames dropped due to non-sequential fragment"}, {.index = (unsigned char)130U, .name = (char *)"STAT_RX_ORPHAN_FRAME", .desc = (char *)"rx frames dropped due to unmatched 1st frame"}, {.index = (unsigned char)131U, .name = (char *)"STAT_RX_FRAG_AGEOUT", .desc = (char *)"rx frames dropped due to uncompleted frame"}, {.index = (unsigned char)133U, .name = (char *)"STAT_RX_ICV_ERRORS", .desc = (char *)"ICV errors during decryption"}, {.index = (unsigned char)137U, .name = (char *)"STAT_PSP_SUSPENSION", .desc = (char *)"times adapter suspended"}, {.index = (unsigned char)138U, .name = (char *)"STAT_PSP_BCN_TIMEOUT", .desc = (char *)"beacon timeout"}, {.index = (unsigned char)139U, .name = (char *)"STAT_PSP_POLL_TIMEOUT", .desc = (char *)"poll response timeouts"}, {.index = (unsigned char)140U, .name = (char *)"STAT_PSP_NONDIR_TIMEOUT", .desc = (char *)"timeouts waiting for last {broad,multi}cast pkt"}, {.index = (unsigned char)141U, .name = (char *)"STAT_PSP_RX_DTIMS", .desc = (char *)"PSP DTIMs received"}, {.index = (unsigned char)142U, .name = (char *)"STAT_PSP_RX_TIMS", .desc = (char *)"PSP TIMs received"}, {.index = (unsigned char)143U, .name = (char *)"STAT_PSP_STATION_ID", .desc = (char *)"PSP Station ID"}, {.index = (unsigned char)147U, .name = (char *)"LAST_ASSN_TIME", .desc = (char *)"RTC time of last association"}, {.index = (unsigned char)148U, .name = (char *)"STAT_PERCENT_MISSED_BCNS", .desc = (char *)"current calculation of % missed beacons"}, {.index = (unsigned char)149U, .name = (char *)"STAT_PERCENT_RETRIES", .desc = (char *)"current calculation of % missed tx retries"}, {.index = (unsigned char)150U, .name = (char *)"ASSOCIATED_AP_PTR", .desc = (char *)"0 if not associated, else pointer to AP table entry"}, {.index = (unsigned char)151U, .name = (char *)"AVAILABLE_AP_CNT", .desc = (char *)"AP\'s described in the AP table"}, {.index = (unsigned char)152U, .name = (char *)"AP_LIST_PTR", .desc = (char *)"Ptr to list of available APs"}, {.index = (unsigned char)153U, .name = (char *)"STAT_AP_ASSNS", .desc = (char *)"associations"}, {.index = (unsigned char)154U, .name = (char *)"STAT_ASSN_FAIL", .desc = (char *)"association failures"}, {.index = (unsigned char)155U, .name = (char *)"STAT_ASSN_RESP_FAIL", .desc = (char *)"failures due to response fail"}, {.index = (unsigned char)156U, .name = (char *)"STAT_FULL_SCANS", .desc = (char *)"full scans"}, {.index = (unsigned char)157U, .name = (char *)"CARD_DISABLED", .desc = (char *)"Card Disabled"}, {.index = (unsigned char)158U, .name = (char *)"STAT_ROAM_INHIBIT", .desc = (char *)"times roaming was inhibited due to activity"}, {.index = (unsigned char)160U, .name = (char *)"RSSI_AT_ASSN", .desc = (char *)"RSSI of associated AP at time of association"}, {.index = (unsigned char)161U, .name = (char *)"STAT_ASSN_CAUSE1", .desc = (char *)"reassociation: no probe response or TX on hop"}, {.index = (unsigned char)162U, .name = (char *)"STAT_ASSN_CAUSE2", .desc = (char *)"reassociation: poor tx/rx quality"}, {.index = (unsigned char)163U, .name = (char *)"STAT_ASSN_CAUSE3", .desc = (char *)"reassociation: tx/rx quality (excessive AP load"}, {.index = (unsigned char)164U, .name = (char *)"STAT_ASSN_CAUSE4", .desc = (char *)"reassociation: AP RSSI level"}, {.index = (unsigned char)165U, .name = (char *)"STAT_ASSN_CAUSE5", .desc = (char *)"reassociations due to load leveling"}, {.index = (unsigned char)170U, .name = (char *)"STAT_AUTH_FAIL", .desc = (char *)"times authentication failed"}, {.index = (unsigned char)171U, .name = (char *)"STAT_AUTH_RESP_FAIL", .desc = (char *)"times authentication response failed"}, {.index = (unsigned char)172U, .name = (char *)"STATION_TABLE_CNT", .desc = (char *)"entries in association table"}, {.index = (unsigned char)173U, .name = (char *)"RSSI_AVG_CURR", .desc = (char *)"Current avg RSSI"}, {.index = (unsigned char)177U, .name = (char *)"POWER_MGMT_MODE", .desc = (char *)"Power mode - 0=CAM, 1=PSP"}, {.index = (unsigned char)179U, .name = (char *)"COUNTRY_CODE", .desc = (char *)"IEEE country code as recv\'d from beacon"}, {.index = (unsigned char)180U, .name = (char *)"COUNTRY_CHANNELS", .desc = (char *)"channels supported by country"}, {.index = (unsigned char)181U, .name = (char *)"RESET_CNT", .desc = (char *)"adapter resets (warm)"}, {.index = (unsigned char)182U, .name = (char *)"BEACON_INTERVAL", .desc = (char *)"Beacon interval"}, {.index = (unsigned char)185U, .name = (char *)"ANTENNA_DIVERSITY", .desc = (char *)"TRUE if antenna diversity is disabled"}, {.index = (unsigned char)188U, .name = (char *)"DTIM_PERIOD", .desc = (char *)"beacon intervals between DTIMs"}, {.index = (unsigned char)189U, .name = (char *)"OUR_FREQ", .desc = (char *)"current radio freq lower digits - channel ID"}, {.index = (unsigned char)190U, .name = (char *)"RTC_TIME", .desc = (char *)"current RTC time"}, {.index = (unsigned char)191U, .name = (char *)"PORT_TYPE", .desc = (char *)"operating mode"}, {.index = (unsigned char)192U, .name = (char *)"CURRENT_TX_RATE", .desc = (char *)"current tx rate"}, {.index = (unsigned char)193U, .name = (char *)"SUPPORTED_RATES", .desc = (char *)"supported tx rates"}, {.index = (unsigned char)194U, .name = (char *)"ATIM_WINDOW", .desc = (char *)"current ATIM Window"}, {.index = (unsigned char)195U, .name = (char *)"BASIC_RATES", .desc = (char *)"basic tx rates"}, {.index = (unsigned char)196U, .name = (char *)"NIC_HIGHEST_RATE", .desc = (char *)"NIC highest tx rate"}, {.index = (unsigned char)197U, .name = (char *)"AP_HIGHEST_RATE", .desc = (char *)"AP highest tx rate"}, {.index = (unsigned char)198U, .name = (char *)"CAPABILITIES", .desc = (char *)"Management frame capability field"}, {.index = (unsigned char)199U, .name = (char *)"AUTH_TYPE", .desc = (char *)"Type of authentication"}, {.index = (unsigned char)200U, .name = (char *)"RADIO_TYPE", .desc = (char *)"Adapter card platform type"}, {.index = (unsigned char)201U, .name = (char *)"RTS_THRESHOLD", .desc = (char *)"Min packet length for RTS handshaking"}, {.index = (unsigned char)202U, .name = (char *)"INT_MODE", .desc = (char *)"International mode"}, {.index = (unsigned char)203U, .name = (char *)"FRAGMENTATION_THRESHOLD", .desc = (char *)"protocol frag threshold"}, {.index = (unsigned char)204U, .name = (char *)"EEPROM_SRAM_DB_BLOCK_START_ADDRESS", .desc = (char *)"EEPROM offset in SRAM"}, {.index = (unsigned char)205U, .name = (char *)"EEPROM_SRAM_DB_BLOCK_SIZE", .desc = (char *)"EEPROM size in SRAM"}, {.index = (unsigned char)206U, .name = (char *)"EEPROM_SKU_CAPABILITY", .desc = (char *)"EEPROM SKU Capability"}, {.index = (unsigned char)207U, .name = (char *)"EEPROM_IBSS_11B_CHANNELS", .desc = (char *)"EEPROM IBSS 11b channel set"}, {.index = (unsigned char)209U, .name = (char *)"MAC_VERSION", .desc = (char *)"MAC Version"}, {.index = (unsigned char)210U, .name = (char *)"MAC_REVISION", .desc = (char *)"MAC Revision"}, {.index = (unsigned char)211U, .name = (char *)"RADIO_VERSION", .desc = (char *)"Radio Version"}, {.index = (unsigned char)212U, .name = (char *)"NIC_MANF_DATE_TIME", .desc = (char *)"MANF Date/Time STAMP"}, {.index = (unsigned char)213U, .name = (char *)"UCODE_VERSION", .desc = (char *)"Ucode Version"}};
#line 3792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_registers(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 3795 
  int i;
  #line 3796 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 3797 
  struct net_device *dev = priv->net_dev;
  #line 3798 
  char *out = buf;
  #line 3799 
  u32 val = 0U;
  #line 3801 
  out += (unsigned long)sprintf(out,(char *)"%30s [Address ] : Hex\n",(char *)"Register");
  #line 3803 
  i = 0;
  #line 3803 
  while ((unsigned int)i <= 4U) {
    {
      #line 3804 
      read_register(dev,hw_data[i].addr,& val);
      #line 3806 
      out += (unsigned long)sprintf(out,(char *)"%30s [%08X] : %08X\n",hw_data[i].name,
                hw_data[i].addr,val);
    }
    #line 3803 
    i ++;
  }
  #line 3809 
  return out - buf;
}

#line 3812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_registers = {.attr = {.name = (char *)"registers", .mode = (unsigned short)292U}, .show = & show_registers};
#line 3814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_hardware(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 3820 
  int i;
  #line 3817 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 3818 
  struct net_device *dev = priv->net_dev;
  #line 3819 
  char *out = buf;
  #line 3822 
  out += (unsigned long)sprintf(out,(char *)"%30s [Address ] : Hex\n",(char *)"NIC entry");
  #line 3824 
  i = 0;
  #line 3824 
  while ((unsigned int)i <= 2U) {
    {
      #line 3825 
      u8 tmp8;
      #line 3826 
      u16 tmp16;
      #line 3827 
      u32 tmp32;
      #line 3829 
      switch (nic_data[i].size) {
        #line 3830 
        case (size_t)1: 
                        #line 3830 
        ;
        #line 3831 
        read_nic_byte(dev,nic_data[i].addr,& tmp8);
        #line 3834 
        out += (unsigned long)sprintf(out,(char *)"%30s [%08X] : %02X\n",nic_data[i].name,
                nic_data[i].addr,(int)tmp8);
        #line 3835 
        break;
        #line 3836 
        case (size_t)2: 
                        #line 3836 
        ;
        #line 3837 
        read_nic_word(dev,nic_data[i].addr,& tmp16);
        #line 3840 
        out += (unsigned long)sprintf(out,(char *)"%30s [%08X] : %04X\n",nic_data[i].name,
                nic_data[i].addr,(int)tmp16);
        #line 3841 
        break;
        #line 3842 
        case (size_t)4: 
                        #line 3842 
        ;
        #line 3843 
        read_nic_dword(dev,nic_data[i].addr,& tmp32);
        #line 3846 
        out += (unsigned long)sprintf(out,(char *)"%30s [%08X] : %08X\n",nic_data[i].name,
                nic_data[i].addr,tmp32);
        #line 3847 
        break;
      }
    }
    #line 3824 
    i ++;
  }
  #line 3850 
  return out - buf;
}

#line 3853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_hardware = {.attr = {.name = (char *)"hardware", .mode = (unsigned short)292U}, .show = & show_hardware};
#line 3855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_memory(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 3862 
  u32 buffer[4U];
  #line 3863 
  int i;
  #line 3864 
  char line[81U];
  #line 3858 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 3859 
  struct net_device *dev = priv->net_dev;
  #line 3860 
  unsigned long loop = 0UL;
  #line 3861 
  int len = 0;
  #line 3866 
  if (loop > 196607UL) 
                       #line 3867 
                       loop = 0UL;
  #line 3870 
  while ((unsigned int)len <= 3967U && loop <= 196607UL) {
    #line 3872 
    if (priv->snapshot[0] != (u8 *)0U) {
      #line 3873 
      i = 0;
      #line 3873 
      while (i <= 3) {
        #line 3874 
        buffer[i] = *((u32 *)(priv->snapshot[(((unsigned long)(i * 4) + loop) >> 12) & 255UL] + (((unsigned long)(i * 4) + loop) & 4095UL)));
        #line 3873 
        i ++;
      }
    }
    else {
      #line 3877 
      i = 0;
      #line 3877 
      while (i <= 3) {
        #line 3878 
        read_nic_dword(dev,(unsigned int)(i * 4) + (unsigned int)loop,& buffer[i]);
        #line 3877 
        i ++;
      }
    }
    #line 3880 
    if (priv->dump_raw != 0) {
      #line 3901 
      len = sprintf(buf + (unsigned long)len,(char *)"%c%c%c%c",
                (int)*((u8 *)(& buffer)),(int)*((u8 *)(& buffer) + 1U),
                (int)*((u8 *)(& buffer) + 2U),(int)*((u8 *)(& buffer) + 3U),
                (int)*((u8 *)(& buffer) + 4U),(int)*((u8 *)(& buffer) + 5U),
                (int)*((u8 *)(& buffer) + 6U),(int)*((u8 *)(& buffer) + 7U),
                (int)*((u8 *)(& buffer) + 8U),(int)*((u8 *)(& buffer) + 9U),
                (int)*((u8 *)(& buffer) + 10U),
                (int)*((u8 *)(& buffer) + 11U),
                (int)*((u8 *)(& buffer) + 12U),
                (int)*((u8 *)(& buffer) + 13U),
                (int)*((u8 *)(& buffer) + 14U),
                (int)*((u8 *)(& buffer) + 15U)) + len;
    }
    else {
      #line 3903 
      ;
      #line 3905 
      len = sprintf(buf + (unsigned long)len,(char *)"%s\n",
                snprint_line((char *)(& line),81UL,(u8 *)(& buffer),16U,
                     (unsigned int)loop)) + len;
    }
    #line 3906 
    loop += 16UL;
  }
  #line 3909 
  return (long)len;
}

#line 3912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t store_memory(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 3915 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 3916 
  struct net_device *dev = priv->net_dev;
  #line 3917 
  char *p = buf;
  #line 3919 
  struct net_device *tmp_2 = dev;
  #line 3921 
  if (count == 0UL) 
                    #line 3922 
                    return (long)count;
  #line 3924 
  if ((int)*p == 49) 
                     #line 3924 
                     goto _LOR_0;
  else 
    #line 3924 
    if (count > 1UL) {
      #line 3925 
      if ((unsigned int)__tolower((unsigned char)((int)((unsigned char)*p))) == 111U) {
        #line 3925 
        if ((unsigned int)__tolower((unsigned char)((int)((unsigned char)*(p + 1U)))) == 110U) {
          #line 3924 
          _LOR_0: {
                    #line 3926 
                    if ((ipw2100_debug_level & 4U) != 0U) {
                      #line 3926 
                      int tmp_1;
                      #line 3926 
                      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                        #line 3926 
                        tmp_1 = 73; else 
                                         #line 3926 
                                         tmp_1 = 85;
                      #line 3926 
                      printk((char *)"\001",tmp_1,(char *)"store_memory");
                      #line 3926 
                      printk((char *)"%s: Setting memory dump to RAW mode.\n",(char *)(& dev->name));
                    }
                    #line 3928 
                    priv->dump_raw = 1;
                  }
        }
        else 
             #line 3924 
             goto _LAND_2;
      }
      else 
           #line 3924 
           goto _LAND_2;
    }
    else {
      #line 3924 
      _LAND_2: 
               #line 3930 
      ;
      #line 3930 
      if ((int)*p == 48) 
                         #line 3930 
                         goto _LOR;
      else 
        #line 3930 
        if (count > 1UL) {
          #line 3930 
          if ((unsigned int)__tolower((unsigned char)((int)((unsigned char)*p))) == 111U) {
            #line 3930 
            if ((unsigned int)__tolower((unsigned char)((int)((unsigned char)*(p + 1U)))) == 102U) {
              #line 3930 
              _LOR: {
                      #line 3932 
                      if ((ipw2100_debug_level & 4U) != 0U) {
                        #line 3932 
                        int tmp_3;
                        #line 3932 
                        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                          #line 3932 
                          tmp_3 = 73; else 
                                           #line 3932 
                                           tmp_3 = 85;
                        #line 3932 
                        printk((char *)"\001",tmp_3,(char *)"store_memory");
                        #line 3932 
                        printk((char *)"%s: Setting memory dump to HEX mode.\n",(char *)(& dev->name));
                      }
                      #line 3934 
                      priv->dump_raw = 0;
                    }
            }
            else 
                 #line 3930 
                 goto _LAND_0;
          }
          else 
               #line 3930 
               goto _LAND_0;
        }
        else {
          #line 3930 
          _LAND_0: 
          #line 3936 
          if ((unsigned int)__tolower((unsigned char)((int)((unsigned char)*p))) == 114U) {
            #line 3937 
            if ((ipw2100_debug_level & 4U) != 0U) {
              #line 3937 
              int tmp_5;
              #line 3937 
              if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                #line 3937 
                tmp_5 = 73; else 
                                 #line 3937 
                                 tmp_5 = 85;
              #line 3937 
              printk((char *)"\001",tmp_5,(char *)"store_memory");
              #line 3937 
              printk((char *)"%s: Resetting firmware snapshot.\n",(char *)(& dev->name));
            }
            #line 3938 
            ipw2100_snapshot_free(priv);
          }
          else 
            #line 3941 
            if ((ipw2100_debug_level & 4U) != 0U) {
              #line 3941 
              int tmp_7;
              #line 3941 
              if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                #line 3941 
                tmp_7 = 73; else 
                                 #line 3941 
                                 tmp_7 = 85;
              #line 3941 
              printk((char *)"\001",tmp_7,(char *)"store_memory");
              #line 3941 
              printk((char *)"%s: Usage: 0|on = HEX, 1|off = RAW, ",(char *)(& dev->name));
            }
        }
    }
  #line 3944 
  return (long)count;
}

#line 3947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_memory = {.attr = {.name = (char *)"memory", .mode = (unsigned short)420U}, .show = & show_memory, .store = & store_memory};
#line 3949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_ordinals(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 3955 
  u32 val_len;
  #line 3952 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 3953 
  u32 val = 0U;
  #line 3954 
  int len = 0;
  #line 3956 
  int loop = 0;
  #line 3958 
  if ((priv->status & 12288UL) != 0UL) 
                                       #line 3959 
                                       return 0L;
  #line 3961 
  if ((unsigned int)loop > 146U) 
                                 #line 3962 
                                 loop = 0;
  #line 3965 
  while ((unsigned int)len <= 3967U && (unsigned int)loop <= 146U) {
    #line 3966 
    val_len = 4U;
    #line 3968 
    if (ipw2100_get_ordinal(priv,(unsigned int)ord_data[loop].index,
                            (void *)(& val),& val_len) != 0) {
      #line 3972 
      len = sprintf(buf + (unsigned long)len,(char *)"[0x%02X] = ERROR    %s\n",
                (int)ord_data[loop].index,ord_data[loop].desc) + len;
    }
    else {
      #line 3976 
      len = sprintf(buf + (unsigned long)len,(char *)"[0x%02X] = 0x%08X %s\n",
                (int)ord_data[loop].index,val,ord_data[loop].desc) + len;
    }
    #line 3977 
    loop ++;
  }
  #line 3980 
  return (long)len;
}

#line 3983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_ordinals = {.attr = {.name = (char *)"ordinals", .mode = (unsigned short)292U}, .show = & show_ordinals};
#line 3985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_stats(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 3997 
  char *tmp_3;
  #line 3988 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 3989 
  char *out = buf;
  #line 3993 
  out += (unsigned long)sprintf(out,(char *)"interrupts: %d {tx: %d, rx: %d, other: %d}\n",
                priv->interrupts,priv->tx_interrupts,priv->rx_interrupts,
                priv->inta_other);
  #line 3994 
  out += (unsigned long)sprintf(out,(char *)"firmware resets: %d\n",priv->resets);
  #line 3995 
  out += (unsigned long)sprintf(out,(char *)"firmware hangs: %d\n",priv->hangs);
  #line 3997 
  if (priv->snapshot[0] != (u8 *)0U) 
                                     #line 3997 
                                     tmp_3 = (char *)"YES"; else 
                                                                 #line 3997 
                                                                 tmp_3 = (char *)"NO";
  #line 3998 
  out += (unsigned long)sprintf(out,(char *)"packet mismatch image: %s\n",tmp_3);
  #line 4001 
  return out - buf;
}

#line 4004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_stats = {.attr = {.name = (char *)"stats", .mode = (unsigned short)292U}, .show = & show_stats};
#line 4006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_switch_mode(struct ipw2100_priv *priv, u32 mode)
{
  #line 4008 
  int err;
  #line 4010 
  if ((unsigned int)(priv->ieee)->iw_mode == mode) 
                                                   #line 4011 
                                                   return 0;
  #line 4013 
  err = ipw2100_disable_adapter(priv);
  #line 4014 
  if (err != 0) {
    #line 4015 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
    #line 4017 
    return err;
  }
  #line 4020 
  switch (mode) {
    #line 4021 
    case (u32)2: 
                 #line 4021 
    ;
    #line 4022 
    (priv->net_dev)->type = (unsigned short)1U;
    #line 4023 
    break;
    #line 4024 
    case (u32)1: 
                 #line 4024 
    ;
    #line 4025 
    (priv->net_dev)->type = (unsigned short)1U;
    #line 4026 
    break;
    #line 4028 
    case (u32)6: 
                 #line 4028 
    ;
    #line 4029 
    priv->last_mode = (priv->ieee)->iw_mode;
    #line 4030 
    (priv->net_dev)->type = (unsigned short)803U;
    #line 4031 
    break;
  }
  #line 4035 
  (priv->ieee)->iw_mode = (int)mode;
  #line 4040 
  ipw2100_firmware.version = 0;
  #line 4043 
  printk((char *)"\001",(char *)(& (priv->net_dev)->name));
  #line 4044 
  priv->reset_backoff = 0LL;
  #line 4045 
  schedule_reset(priv);
  #line 4047 
  return 0;
}

#line 4050  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_internals(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 4053 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 4054 
  int len = 0;
  #line 4058 
  if ((priv->status & 1024UL) != 0UL) {
    #line 4059 
    ;
    #line 4059 
    ;
    #line 4060 
    len = sprintf(buf + (unsigned long)len,(char *)"connected: %llu\n",
                ktime_get_boottime_seconds() - priv->connect_start) + len;
  }
  else {
    #line 4062 
    len = sprintf(buf + (unsigned long)len,(char *)"not connected\n") + len;
  }
  #line 4064 
  len = sprintf(buf + (unsigned long)len,
                (char *)"ieee->crypt_info.crypt[priv->ieee->crypt_info.tx_keyidx]",
                (priv->ieee)->crypt_info.crypt[(priv->ieee)->crypt_info.tx_keyidx]) + len;
  #line 4065 
  len = sprintf(buf + (unsigned long)len,(char *)"status",priv->status) + len;
  #line 4066 
  len = sprintf(buf + (unsigned long)len,(char *)"config",priv->config) + len;
  #line 4067 
  len = sprintf(buf + (unsigned long)len,(char *)"capability",
                priv->capability) + len;
  #line 4071 
  len = sprintf(buf + (unsigned long)len,(char *)"last_rtc: %lu\n",
                (unsigned long)priv->last_rtc) + len;
  #line 4073 
  len = sprintf(buf + (unsigned long)len,(char *)"fatal_error",
                priv->fatal_error) + len;
  #line 4074 
  len = sprintf(buf + (unsigned long)len,(char *)"stop_hang_check",
                priv->stop_hang_check) + len;
  #line 4075 
  len = sprintf(buf + (unsigned long)len,(char *)"stop_rf_kill",
                 priv->stop_rf_kill) + len;
  #line 4076 
  len = sprintf(buf + (unsigned long)len,(char *)"messages_sent",
                 priv->messages_sent) + len;
  #line 4078 
  len = sprintf(buf + (unsigned long)len,(char *)"tx_pend_stat.value",
                 priv->tx_pend_stat.value) + len;
  #line 4079 
  len = sprintf(buf + (unsigned long)len,(char *)"tx_pend_stat.hi",
                 priv->tx_pend_stat.hi) + len;
  #line 4081 
  len = sprintf(buf + (unsigned long)len,(char *)"tx_free_stat.value",
                 priv->tx_free_stat.value) + len;
  #line 4082 
  len = sprintf(buf + (unsigned long)len,(char *)"tx_free_stat.lo",
                 priv->tx_free_stat.lo) + len;
  #line 4084 
  len = sprintf(buf + (unsigned long)len,(char *)"msg_free_stat.value",
                 priv->msg_free_stat.value) + len;
  #line 4085 
  len = sprintf(buf + (unsigned long)len,(char *)"msg_free_stat.lo",
                 priv->msg_free_stat.lo) + len;
  #line 4087 
  len = sprintf(buf + (unsigned long)len,(char *)"msg_pend_stat.value",
                 priv->msg_pend_stat.value) + len;
  #line 4088 
  len = sprintf(buf + (unsigned long)len,(char *)"msg_pend_stat.hi",
                 priv->msg_pend_stat.hi) + len;
  #line 4090 
  len = sprintf(buf + (unsigned long)len,(char *)"fw_pend_stat.value",
                 priv->fw_pend_stat.value) + len;
  #line 4091 
  len = sprintf(buf + (unsigned long)len,(char *)"fw_pend_stat.hi",
                 priv->fw_pend_stat.hi) + len;
  #line 4093 
  len = sprintf(buf + (unsigned long)len,(char *)"txq_stat.value",
                 priv->txq_stat.value) + len;
  #line 4094 
  len = sprintf(buf + (unsigned long)len,(char *)"txq_stat.lo",
                 priv->txq_stat.lo) + len;
  #line 4096 
  len = sprintf(buf + (unsigned long)len,(char *)"ieee->scans",
                 (priv->ieee)->scans) + len;
  #line 4097 
  len = sprintf(buf + (unsigned long)len,(char *)"reset_backoff",
                 priv->reset_backoff) + len;
  #line 4099 
  return (long)len;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_internals = {.attr = {.name = (char *)"internals", .mode = (unsigned short)292U}, .show = & show_internals};
#line 4104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_bssinfo(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 4108 
  char essid[33U];
  #line 4109 
  u8 bssid[6U];
  #line 4112 
  unsigned int length;
  #line 4113 
  int ret;
  #line 4107 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 4110 
  u32 chan = 0U;
  #line 4111 
  char *out = buf;
  #line 4115 
  if ((priv->status & 12288UL) != 0UL) 
                                       #line 4116 
                                       return 0L;
  #line 4118 
  memset((void *)(& essid),0,33UL);
  #line 4119 
  memset((void *)(& bssid),0,6UL);
  #line 4121 
  length = 32U;
  #line 4122 
  ret = ipw2100_get_ordinal(priv,1006U,(void *)(& essid),& length);
  #line 4123 
  if (ret != 0) 
    #line 4124 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4124 
      int tmp_1;
      #line 4124 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4124 
                                                               tmp_1 = 73; else 
                                                                    #line 4124 
                                                                    tmp_1 = 85;
      #line 4124 
      printk((char *)"\001",tmp_1,(char *)"show_bssinfo");
      #line 4124 
      printk((char *)"failed querying ordinals at line %d\n",4124);
    }
  #line 4127 
  length = 6U;
  #line 4128 
  ret = ipw2100_get_ordinal(priv,1014U,(void *)(& bssid),& length);
  #line 4130 
  if (ret != 0) 
    #line 4131 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4131 
      int tmp_3;
      #line 4131 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4131 
                                                               tmp_3 = 73; else 
                                                                    #line 4131 
                                                                    tmp_3 = 85;
      #line 4131 
      printk((char *)"\001",tmp_3,(char *)"show_bssinfo");
      #line 4131 
      printk((char *)"failed querying ordinals at line %d\n",4131);
    }
  #line 4134 
  length = 4U;
  #line 4135 
  ret = ipw2100_get_ordinal(priv,189U,(void *)(& chan),& length);
  #line 4136 
  if (ret != 0) 
    #line 4137 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4137 
      int tmp_5;
      #line 4137 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4137 
                                                               tmp_5 = 73; else 
                                                                    #line 4137 
                                                                    tmp_5 = 85;
      #line 4137 
      printk((char *)"\001",tmp_5,(char *)"show_bssinfo");
      #line 4137 
      printk((char *)"failed querying ordinals at line %d\n",4137);
    }
  #line 4140 
  out += (unsigned long)sprintf(out,(char *)"ESSID: %s\n",(char *)(& essid));
  #line 4141 
  out += (unsigned long)sprintf(out,(char *)"BSSID:   %pM\n",(u8 *)(& bssid));
  #line 4142 
  out += (unsigned long)sprintf(out,(char *)"Channel: %d\n",chan);
  #line 4144 
  return out - buf;
}

#line 4147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_bssinfo = {.attr = {.name = (char *)"bssinfo", .mode = (unsigned short)292U}, .show = & show_bssinfo};
#line 4150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t debug_level_show(struct device_driver *d, char *buf)
{
  #line 4152 
  return (long)sprintf(buf,(char *)"0x%08X\n",ipw2100_debug_level);
}

#line 4155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t debug_level_store(struct device_driver *d, char *buf, size_t count)
{
  #line 4158 
  u32 val;
  #line 4159 
  int ret;
  #line 4161 
  ret = kstrtou32(buf,0U,& val);
  #line 4162 
  if (ret != 0) {
    #line 4163 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4163 
      int tmp_0;
      #line 4163 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4163 
                                                               tmp_0 = 73; else 
                                                                    #line 4163 
                                                                    tmp_0 = 85;
      #line 4163 
      printk((char *)"\001",tmp_0,(char *)"debug_level_store");
      #line 4163 
      printk((char *)": %s is not in hex or decimal form.\n",buf);
    }
  }
  else 
       #line 4165 
       ipw2100_debug_level = val;
  #line 4167 
  return (long)strnlen(buf,count);
}

#line 4169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct driver_attribute driver_attr_debug_level = {.attr = {.name = (char *)"debug_level", .mode = (unsigned short)420U}, .show = & debug_level_show, .store = & debug_level_store};
#line 4172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_fatal_error(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 4177 
  int i;
  #line 4175 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 4176 
  char *out = buf;
  #line 4179 
  if (priv->fatal_error != 0U) {
    #line 4180 
    out += (unsigned long)sprintf(out,(char *)"0x%08X\n",priv->fatal_error);
  }
  else {
    #line 4182 
    out += (unsigned long)sprintf(out,(char *)"0\n");
  }
  #line 4184 
  i = 1;
  #line 4184 
  while (i <= 5) {
    {
      #line 4185 
      if (priv->fatal_errors[(priv->fatal_index - (unsigned int)i) % 5U] == 0U) 
        #line 4187 
        goto __Cont;
      #line 4191 
      out += (unsigned long)sprintf(out,(char *)"%d. 0x%08X\n",i,
                priv->fatal_errors[(priv->fatal_index - (unsigned int)i) % 5U]);
    }
    #line 4184 
    __Cont: 
            #line 4184 
    i ++;
  }
  #line 4194 
  return out - buf;
}

#line 4197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t store_fatal_error(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 4201 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 4202 
  schedule_reset(priv);
  #line 4203 
  return (long)count;
}

#line 4206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_fatal_error = {.attr = {.name = (char *)"fatal_error", .mode = (unsigned short)420U}, .show = & show_fatal_error, .store = & store_fatal_error};
#line 4208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_scan_age(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 4211 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 4212 
  return (long)sprintf(buf,(char *)"%d\n",(priv->ieee)->scan_age);
}

#line 4215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t store_scan_age(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 4220 
  unsigned long val;
  #line 4221 
  int ret;
  #line 4218 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 4219 
  struct net_device *dev = priv->net_dev;
  #line 4223 
  struct net_device *tmp_2 = dev;
  #line 4225 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4225 
    int tmp_1;
    #line 4225 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4225 
                                                             tmp_1 = 73; else 
                                                                    #line 4225 
                                                                    tmp_1 = 85;
    #line 4225 
    printk((char *)"\001",tmp_1,(char *)"store_scan_age");
    #line 4225 
    printk((char *)"enter\n");
  }
  #line 4227 
  ret = kstrtoul(buf,0U,& val);
  #line 4228 
  if (ret != 0) {
    #line 4229 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4229 
      int tmp_3;
      #line 4229 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4229 
                                                               tmp_3 = 73; else 
                                                                    #line 4229 
                                                                    tmp_3 = 85;
      #line 4229 
      printk((char *)"\001",tmp_3,(char *)"store_scan_age");
      #line 4229 
      printk((char *)"%s: user supplied invalid value.\n",(char *)(& dev->name));
    }
  }
  else {
    #line 4231 
    (priv->ieee)->scan_age = (int)val;
    #line 4232 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4232 
      int tmp_5;
      #line 4232 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4232 
                                                               tmp_5 = 73; else 
                                                                    #line 4232 
                                                                    tmp_5 = 85;
      #line 4232 
      printk((char *)"\001",tmp_5,(char *)"store_scan_age");
      #line 4232 
      printk((char *)"set scan_age = %u\n",(priv->ieee)->scan_age);
    }
  }
  #line 4235 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4235 
    int tmp_7;
    #line 4235 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4235 
                                                             tmp_7 = 73; else 
                                                                    #line 4235 
                                                                    tmp_7 = 85;
    #line 4235 
    printk((char *)"\001",tmp_7,(char *)"store_scan_age");
    #line 4235 
    printk((char *)"exit\n");
  }
  #line 4236 
  return (long)strnlen(buf,count);
}

#line 4239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_scan_age = {.attr = {.name = (char *)"scan_age", .mode = (unsigned short)420U}, .show = & show_scan_age, .store = & store_scan_age};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t show_rf_kill(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 4249 
  int tmp_1;
  #line 4248 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 4249 
  if (rf_kill_active(priv) != 0) 
                                 #line 4249 
                                 tmp_1 = 2; else 
                                                 #line 4249 
                                                 tmp_1 = 0;
  #line 4249 
  int val = ((int)(priv->status >> 13) & 1) | tmp_1;
  #line 4251 
  return (long)sprintf(buf,(char *)"%i\n",val);
}

#line 4254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw_radio_kill_sw(struct ipw2100_priv *priv, int disable_radio)
{
  #line 4256 
  if ((disable_radio == 0) ^ (int)((_Bool)(priv->status >> 13 != 0))) 
    #line 4258 
    return 0;
  #line 4260 
  if ((ipw2100_debug_level & 131072U) != 0U) {
    #line 4260 
    int tmp_0;
    #line 4260 
    char *tmp_1;
    #line 4260 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4260 
                                                             tmp_0 = 73; else 
                                                                    #line 4260 
                                                                    tmp_0 = 85;
    #line 4260 
    printk((char *)"\001",tmp_0,(char *)"ipw_radio_kill_sw");
    #line 4260 
    if (disable_radio != 0) 
                            #line 4260 
                            tmp_1 = (char *)"OFF"; else 
                                                        #line 4260 
                                                        tmp_1 = (char *)"ON";
    #line 4260 
    printk((char *)"Manual SW RF Kill set to: RADIO  %s\n",tmp_1);
  }
  #line 4263 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 4265 
  if (disable_radio != 0) {
    #line 4266 
    priv->status |= 8192UL;
    #line 4267 
    ipw2100_down(priv);
  }
  else {
    #line 4269 
    priv->status &= 18446744073709543423UL;
    #line 4270 
    if (rf_kill_active(priv) != 0) {
      #line 4271 
      if ((ipw2100_debug_level & 131072U) != 0U) {
        #line 4271 
        int tmp_3;
        #line 4271 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 4271 
                                                                 tmp_3 = 73; else 
                                                                    #line 4271 
                                                                    tmp_3 = 85;
        #line 4271 
        printk((char *)"\001",tmp_3,(char *)"ipw_radio_kill_sw");
        #line 4271 
        printk((char *)"Can not turn radio back on - ");
      }
      #line 4274 
      priv->stop_rf_kill = 0;
      #line 4275 
      ;
      #line 4275 
      ;
      #line 4275 
      mod_delayed_work(system_wq,& priv->rf_kill,round_jiffies_relative(250UL));
    }
    else 
         #line 4278 
         schedule_reset(priv);
  }
  #line 4281 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 4282 
  return 1;
}

#line 4285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static ssize_t store_rf_kill(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 4288 
  struct ipw2100_priv *priv = dev_get_drvdata(d);
  #line 4289 
  ipw_radio_kill_sw(priv,(int)*buf == 49);
  #line 4290 
  return (long)count;
}

#line 4293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct device_attribute dev_attr_rf_kill = {.attr = {.name = (char *)"rf_kill", .mode = (unsigned short)420U}, .show = & show_rf_kill, .store = & store_rf_kill};
#line 4295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct attribute *ipw2100_sysfs_entries[15U] = {& dev_attr_hardware.attr, & dev_attr_registers.attr, & dev_attr_ordinals.attr, & dev_attr_pci.attr, & dev_attr_stats.attr, & dev_attr_internals.attr, & dev_attr_bssinfo.attr, & dev_attr_memory.attr, & dev_attr_scan_age.attr, & dev_attr_fatal_error.attr, & dev_attr_rf_kill.attr, & dev_attr_cfg.attr, & dev_attr_status.attr, & dev_attr_capability.attr};
#line 4313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct attribute_group ipw2100_attribute_group = {.attrs = (struct attribute **)(& ipw2100_sysfs_entries)};
#line 4317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int status_queue_allocate(struct ipw2100_priv *priv, int entries)
{
  #line 4319 
  struct ipw2100_status_queue *q = & priv->status_queue;
  #line 4321 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4321 
    int tmp_0;
    #line 4321 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4321 
                                                             tmp_0 = 73; else 
                                                                    #line 4321 
                                                                    tmp_0 = 85;
    #line 4321 
    printk((char *)"\001",tmp_0,(char *)"status_queue_allocate");
    #line 4321 
    printk((char *)"enter\n");
  }
  #line 4323 
  q->size = (unsigned int)((unsigned long)entries) * 8U;
  #line 4324 
  q->drv = (struct ipw2100_status *)pci_alloc_consistent(priv->pci_dev,(unsigned long)q->size,& q->nic);
  #line 4325 
  if (q->drv == (struct ipw2100_status *)0) {
    #line 4326 
    printk((char *)"\001");
    #line 4327 
    return -12;
  }
  #line 4330 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4330 
    int tmp_3;
    #line 4330 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4330 
                                                             tmp_3 = 73; else 
                                                                    #line 4330 
                                                                    tmp_3 = 85;
    #line 4330 
    printk((char *)"\001",tmp_3,(char *)"status_queue_allocate");
    #line 4330 
    printk((char *)"exit\n");
  }
  #line 4332 
  return 0;
}

#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void status_queue_free(struct ipw2100_priv *priv)
{
  #line 4337 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4337 
    int tmp_0;
    #line 4337 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4337 
                                                             tmp_0 = 73; else 
                                                                    #line 4337 
                                                                    tmp_0 = 85;
    #line 4337 
    printk((char *)"\001",tmp_0,(char *)"status_queue_free");
    #line 4337 
    printk((char *)"enter\n");
  }
  #line 4339 
  if (priv->status_queue.drv != (struct ipw2100_status *)0) {
    #line 4340 
    pci_free_consistent(priv->pci_dev,(unsigned long)priv->status_queue.size,(void *)priv->status_queue.drv,priv->status_queue.nic);
    #line 4343 
    priv->status_queue.drv = (struct ipw2100_status *)0;
  }
  #line 4346 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4346 
    int tmp_2;
    #line 4346 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4346 
                                                             tmp_2 = 73; else 
                                                                    #line 4346 
                                                                    tmp_2 = 85;
    #line 4346 
    printk((char *)"\001",tmp_2,(char *)"status_queue_free");
    #line 4346 
    printk((char *)"exit\n");
  }
  #line 4348 
  return;
}

#line 4349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int bd_queue_allocate(struct ipw2100_priv *priv, struct ipw2100_bd_queue *q, int entries)
{
  #line 4352 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4352 
    int tmp_0;
    #line 4352 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4352 
                                                             tmp_0 = 73; else 
                                                                    #line 4352 
                                                                    tmp_0 = 85;
    #line 4352 
    printk((char *)"\001",tmp_0,(char *)"bd_queue_allocate");
    #line 4352 
    printk((char *)"enter\n");
  }
  #line 4354 
  memset((void *)q,0,40UL);
  #line 4356 
  q->entries = (unsigned int)entries;
  #line 4357 
  q->size = (unsigned int)((unsigned long)entries) * 16U;
  #line 4358 
  q->drv = (struct ipw2100_bd *)pci_alloc_consistent(priv->pci_dev,(unsigned long)q->size,& q->nic);
  #line 4359 
  if (q->drv == (struct ipw2100_bd *)0) {
    #line 4360 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4360 
      int tmp_3;
      #line 4360 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4360 
                                                               tmp_3 = 73; else 
                                                                    #line 4360 
                                                                    tmp_3 = 85;
      #line 4360 
      printk((char *)"\001",tmp_3,(char *)"bd_queue_allocate");
      #line 4360 
      printk((char *)"can\'t allocate shared memory for buffer descriptors\n");
    }
    #line 4362 
    return -12;
  }
  #line 4365 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4365 
    int tmp_5;
    #line 4365 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4365 
                                                             tmp_5 = 73; else 
                                                                    #line 4365 
                                                                    tmp_5 = 85;
    #line 4365 
    printk((char *)"\001",tmp_5,(char *)"bd_queue_allocate");
    #line 4365 
    printk((char *)"exit\n");
  }
  #line 4367 
  return 0;
}

#line 4370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void bd_queue_free(struct ipw2100_priv *priv, struct ipw2100_bd_queue *q)
{
  #line 4372 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4372 
    int tmp_0;
    #line 4372 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4372 
                                                             tmp_0 = 73; else 
                                                                    #line 4372 
                                                                    tmp_0 = 85;
    #line 4372 
    printk((char *)"\001",tmp_0,(char *)"bd_queue_free");
    #line 4372 
    printk((char *)"enter\n");
  }
  #line 4374 
  if (q == (struct ipw2100_bd_queue *)0) 
                                         #line 4375 
                                         return;
  #line 4377 
  if (q->drv != (struct ipw2100_bd *)0) {
    #line 4378 
    pci_free_consistent(priv->pci_dev,(unsigned long)q->size,(void *)q->drv,q->nic);
    #line 4379 
    q->drv = (struct ipw2100_bd *)0;
  }
  #line 4382 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4382 
    int tmp_2;
    #line 4382 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4382 
                                                             tmp_2 = 73; else 
                                                                    #line 4382 
                                                                    tmp_2 = 85;
    #line 4382 
    printk((char *)"\001",tmp_2,(char *)"bd_queue_free");
    #line 4382 
    printk((char *)"exit\n");
  }
  #line 4384 
  return;
}

#line 4385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void bd_queue_initialize(struct ipw2100_priv *priv, struct ipw2100_bd_queue *q, u32 base, u32 size, u32 r, u32 w)
{
  #line 4389 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4389 
    int tmp_0;
    #line 4389 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4389 
                                                             tmp_0 = 73; else 
                                                                    #line 4389 
                                                                    tmp_0 = 85;
    #line 4389 
    printk((char *)"\001",tmp_0,(char *)"bd_queue_initialize");
    #line 4389 
    printk((char *)"enter\n");
  }
  #line 4391 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4391 
    int tmp_2;
    #line 4391 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4391 
                                                             tmp_2 = 73; else 
                                                                    #line 4391 
                                                                    tmp_2 = 85;
    #line 4391 
    printk((char *)"\001",tmp_2,(char *)"bd_queue_initialize");
    #line 4391 
    printk((char *)"initializing bd queue at virt=%p, phys=%08x\n",q->drv,(unsigned int)q->nic);
  }
  #line 4394 
  write_register(priv->net_dev,base,(unsigned int)q->nic);
  #line 4395 
  write_register(priv->net_dev,size,q->entries);
  #line 4396 
  write_register(priv->net_dev,r,q->oldest);
  #line 4397 
  write_register(priv->net_dev,w,q->next);
  #line 4399 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4399 
    int tmp_4;
    #line 4399 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4399 
                                                             tmp_4 = 73; else 
                                                                    #line 4399 
                                                                    tmp_4 = 85;
    #line 4399 
    printk((char *)"\001",tmp_4,(char *)"bd_queue_initialize");
    #line 4399 
    printk((char *)"exit\n");
  }
  #line 4401 
  return;
}

#line 4402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_kill_works(struct ipw2100_priv *priv)
{
  #line 4404 
  priv->stop_rf_kill = 1;
  #line 4405 
  priv->stop_hang_check = 1;
  #line 4406 
  cancel_delayed_work_sync(& priv->reset_work);
  #line 4407 
  cancel_delayed_work_sync(& priv->security_work);
  #line 4408 
  cancel_delayed_work_sync(& priv->wx_event_work);
  #line 4409 
  cancel_delayed_work_sync(& priv->hang_check);
  #line 4410 
  cancel_delayed_work_sync(& priv->rf_kill);
  #line 4411 
  cancel_delayed_work_sync(& priv->scan_event);
  #line 4412 
  return;
}

#line 4414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_tx_allocate(struct ipw2100_priv *priv)
{
  #line 4416 
  int i;
  #line 4416 
  int j;
  #line 4416 
  int err;
  #line 4417 
  void *v;
  #line 4418 
  dma_addr_t p;
  #line 4420 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4420 
    int tmp_0;
    #line 4420 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4420 
                                                             tmp_0 = 73; else 
                                                                    #line 4420 
                                                                    tmp_0 = 85;
    #line 4420 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_tx_allocate");
    #line 4420 
    printk((char *)"enter\n");
  }
  #line 4422 
  err = bd_queue_allocate(priv,& priv->tx_queue,256);
  #line 4423 
  if (err != 0) {
    #line 4424 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name));
    #line 4426 
    return err;
  }
  #line 4429 
  priv->tx_buffers = (struct ipw2100_tx_packet *)kmalloc_array(128UL,56UL,2592U);
  #line 4432 
  if (priv->tx_buffers == (struct ipw2100_tx_packet *)0) {
    #line 4433 
    bd_queue_free(priv,& priv->tx_queue);
    #line 4434 
    return -12;
  }
  #line 4437 
  i = 0;
  #line 4437 
  while (i <= 127) {
    #line 4438 
    v = pci_alloc_consistent(priv->pci_dev,52UL,& p);
    #line 4441 
    if (v == (void *)0) {
      #line 4442 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name));
      #line 4445 
      err = -12;
      #line 4446 
      break;
    }
    #line 4449 
    (priv->tx_buffers + (unsigned long)i)->type = 51967;
    #line 4450 
    (priv->tx_buffers + (unsigned long)i)->info.d_struct.data = (struct ipw2100_data_header *)v;
    #line 4452 
    (priv->tx_buffers + (unsigned long)i)->info.d_struct.data_phys = p;
    #line 4453 
    (priv->tx_buffers + (unsigned long)i)->info.d_struct.txb = (struct libipw_txb *)0;
    #line 4437 
    i ++;
  }
  #line 4456 
  if (i == 128) 
                #line 4457 
                return 0;
  #line 4459 
  j = 0;
  #line 4459 
  while (j < i) {
    #line 4460 
    pci_free_consistent(priv->pci_dev,52UL,(void *)(priv->tx_buffers + (unsigned long)j)->info.d_struct.data,(priv->tx_buffers + (unsigned long)j)->info.d_struct.data_phys);
    #line 4459 
    j ++;
  }
  #line 4467 
  kfree((void *)priv->tx_buffers);
  #line 4468 
  priv->tx_buffers = (struct ipw2100_tx_packet *)0;
  #line 4470 
  return err;
}

#line 4473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_tx_initialize(struct ipw2100_priv *priv)
{
  #line 4475 
  int i;
  #line 4477 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4477 
    int tmp_0;
    #line 4477 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4477 
                                                             tmp_0 = 73; else 
                                                                    #line 4477 
                                                                    tmp_0 = 85;
    #line 4477 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_tx_initialize");
    #line 4477 
    printk((char *)"enter\n");
  }
  #line 4482 
  INIT_LIST_HEAD(& priv->fw_pend_list);
  {
    #line 4483 
    priv->fw_pend_stat.hi = 0;
    #line 4483 
    priv->fw_pend_stat.value = 0;
    #line 4483 
    priv->fw_pend_stat.lo = 2147483647;
  }
  #line 4488 
  INIT_LIST_HEAD(& priv->tx_pend_list);
  #line 4489 
  INIT_LIST_HEAD(& priv->tx_free_list);
  {
    #line 4490 
    priv->tx_pend_stat.hi = 0;
    #line 4490 
    priv->tx_pend_stat.value = 0;
    #line 4490 
    priv->tx_pend_stat.lo = 2147483647;
  }
  {
    #line 4491 
    priv->tx_free_stat.hi = 0;
    #line 4491 
    priv->tx_free_stat.value = 0;
    #line 4491 
    priv->tx_free_stat.lo = 2147483647;
  }
  #line 4493 
  i = 0;
  #line 4493 
  while (i <= 127) {
    #line 4496 
    if ((priv->tx_buffers + (unsigned long)i)->info.d_struct.txb != (struct libipw_txb *)0) {
      #line 4497 
      libipw_txb_free((priv->tx_buffers + (unsigned long)i)->info.d_struct.txb);
      #line 4499 
      (priv->tx_buffers + (unsigned long)i)->info.d_struct.txb = (struct libipw_txb *)0;
    }
    #line 4502 
    list_add_tail(& (priv->tx_buffers + (unsigned long)i)->list,& priv->tx_free_list);
    #line 4493 
    i ++;
  }
  #line 4505 
  priv->tx_free_stat.value = i;
  #line 4505 
  if (priv->tx_free_stat.value > priv->tx_free_stat.hi) 
                                                        #line 4505 
                                                        priv->tx_free_stat.hi = priv->tx_free_stat.value;
  #line 4505 
  if (priv->tx_free_stat.value < priv->tx_free_stat.lo) 
                                                        #line 4505 
                                                        priv->tx_free_stat.lo = priv->tx_free_stat.value;
  #line 4507 
  priv->tx_queue.oldest = 0U;
  #line 4508 
  priv->tx_queue.available = priv->tx_queue.entries;
  #line 4509 
  priv->tx_queue.next = 0U;
  {
    #line 4510 
    priv->txq_stat.hi = 0;
    #line 4510 
    priv->txq_stat.value = 0;
    #line 4510 
    priv->txq_stat.lo = 2147483647;
  }
  #line 4511 
  priv->txq_stat.value = (int)priv->tx_queue.available;
  #line 4511 
  if (priv->txq_stat.value > priv->txq_stat.hi) 
                                                #line 4511 
                                                priv->txq_stat.hi = priv->txq_stat.value;
  #line 4511 
  if (priv->txq_stat.value < priv->txq_stat.lo) 
                                                #line 4511 
                                                priv->txq_stat.lo = priv->txq_stat.value;
  #line 4513 
  bd_queue_initialize(priv,& priv->tx_queue,512U,516U,640U,3968U);
  #line 4519 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4519 
    int tmp_6;
    #line 4519 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4519 
                                                             tmp_6 = 73; else 
                                                                    #line 4519 
                                                                    tmp_6 = 85;
    #line 4519 
    printk((char *)"\001",tmp_6,(char *)"ipw2100_tx_initialize");
    #line 4519 
    printk((char *)"exit\n");
  }
  #line 4521 
  return;
}

#line 4523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_tx_free(struct ipw2100_priv *priv)
{
  #line 4525 
  int i;
  #line 4527 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4527 
    int tmp_0;
    #line 4527 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4527 
                                                             tmp_0 = 73; else 
                                                                    #line 4527 
                                                                    tmp_0 = 85;
    #line 4527 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_tx_free");
    #line 4527 
    printk((char *)"enter\n");
  }
  #line 4529 
  bd_queue_free(priv,& priv->tx_queue);
  #line 4531 
  if (priv->tx_buffers == (struct ipw2100_tx_packet *)0) 
                                                         #line 4532 
                                                         return;
  #line 4534 
  i = 0;
  #line 4534 
  while (i <= 127) {
    #line 4535 
    if ((priv->tx_buffers + (unsigned long)i)->info.d_struct.txb != (struct libipw_txb *)0) {
      #line 4536 
      libipw_txb_free((priv->tx_buffers + (unsigned long)i)->info.d_struct.txb);
      #line 4538 
      (priv->tx_buffers + (unsigned long)i)->info.d_struct.txb = (struct libipw_txb *)0;
    }
    #line 4540 
    if ((priv->tx_buffers + (unsigned long)i)->info.d_struct.data != (struct ipw2100_data_header *)0) 
      #line 4541 
      pci_free_consistent(priv->pci_dev,52UL,(void *)(priv->tx_buffers + (unsigned long)i)->info.d_struct.data,(priv->tx_buffers + (unsigned long)i)->info.d_struct.data_phys);
    #line 4534 
    i ++;
  }
  #line 4549 
  kfree((void *)priv->tx_buffers);
  #line 4550 
  priv->tx_buffers = (struct ipw2100_tx_packet *)0;
  #line 4552 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4552 
    int tmp_2;
    #line 4552 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4552 
                                                             tmp_2 = 73; else 
                                                                    #line 4552 
                                                                    tmp_2 = 85;
    #line 4552 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_tx_free");
    #line 4552 
    printk((char *)"exit\n");
  }
  #line 4554 
  return;
}

#line 4555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_rx_allocate(struct ipw2100_priv *priv)
{
  #line 4557 
  int i;
  #line 4557 
  int j;
  #line 4557 
  int err = -22;
  #line 4559 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4559 
    int tmp_0;
    #line 4559 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4559 
                                                             tmp_0 = 73; else 
                                                                    #line 4559 
                                                                    tmp_0 = 85;
    #line 4559 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_rx_allocate");
    #line 4559 
    printk((char *)"enter\n");
  }
  #line 4561 
  err = bd_queue_allocate(priv,& priv->rx_queue,256);
  #line 4562 
  if (err != 0) {
    #line 4563 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4563 
      int tmp_2;
      #line 4563 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4563 
                                                               tmp_2 = 73; else 
                                                                    #line 4563 
                                                                    tmp_2 = 85;
      #line 4563 
      printk((char *)"\001",tmp_2,(char *)"ipw2100_rx_allocate");
      #line 4563 
      printk((char *)"failed bd_queue_allocate\n");
    }
    #line 4564 
    return err;
  }
  #line 4567 
  err = status_queue_allocate(priv,256);
  #line 4568 
  if (err != 0) {
    #line 4569 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4569 
      int tmp_4;
      #line 4569 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4569 
                                                               tmp_4 = 73; else 
                                                                    #line 4569 
                                                                    tmp_4 = 85;
      #line 4569 
      printk((char *)"\001",tmp_4,(char *)"ipw2100_rx_allocate");
      #line 4569 
      printk((char *)"failed status_queue_allocate\n");
    }
    #line 4570 
    bd_queue_free(priv,& priv->rx_queue);
    #line 4571 
    return err;
  }
  #line 4577 
  priv->rx_buffers = (struct ipw2100_rx_packet *)kmalloc_array(256UL,48UL,3264U);
  #line 4580 
  if (priv->rx_buffers == (struct ipw2100_rx_packet *)0) {
    #line 4581 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4581 
      int tmp_7;
      #line 4581 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4581 
                                                               tmp_7 = 73; else 
                                                                    #line 4581 
                                                                    tmp_7 = 85;
      #line 4581 
      printk((char *)"\001",tmp_7,(char *)"ipw2100_rx_allocate");
      #line 4581 
      printk((char *)"can\'t allocate rx packet buffer table\n");
    }
    #line 4583 
    bd_queue_free(priv,& priv->rx_queue);
    #line 4585 
    status_queue_free(priv);
    #line 4587 
    return -12;
  }
  #line 4590 
  i = 0;
  #line 4590 
  while (i <= 255) {
    {
      #line 4591 
      struct ipw2100_rx_packet *packet = priv->rx_buffers + (unsigned long)i;
      #line 4593 
      err = ipw2100_alloc_skb(priv,packet);
      #line 4594 
      if ((long)(err != 0) != 0L) {
        #line 4595 
        err = -12;
        #line 4596 
        break;
      }
      #line 4600 
      (priv->rx_queue.drv + (unsigned long)i)->host_addr = (unsigned int)packet->dma_addr;
      #line 4601 
      (priv->rx_queue.drv + (unsigned long)i)->buf_length = 2340U;
      #line 4602 
      (priv->status_queue.drv + (unsigned long)i)->status_fields = (unsigned short)0U;
    }
    #line 4590 
    i ++;
  }
  #line 4605 
  if (i == 256) 
                #line 4606 
                return 0;
  #line 4608 
  j = 0;
  #line 4608 
  while (j < i) {
    #line 4609 
    pci_unmap_single(priv->pci_dev,(priv->rx_buffers + (unsigned long)j)->dma_addr,48UL,2);
    #line 4612 
    consume_skb((priv->rx_buffers + (unsigned long)j)->skb);
    #line 4608 
    j ++;
  }
  #line 4615 
  kfree((void *)priv->rx_buffers);
  #line 4616 
  priv->rx_buffers = (struct ipw2100_rx_packet *)0;
  #line 4618 
  bd_queue_free(priv,& priv->rx_queue);
  #line 4620 
  status_queue_free(priv);
  #line 4622 
  return err;
}

#line 4625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_rx_initialize(struct ipw2100_priv *priv)
{
  #line 4627 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4627 
    int tmp_0;
    #line 4627 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4627 
                                                             tmp_0 = 73; else 
                                                                    #line 4627 
                                                                    tmp_0 = 85;
    #line 4627 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_rx_initialize");
    #line 4627 
    printk((char *)"enter\n");
  }
  #line 4629 
  priv->rx_queue.oldest = 0U;
  #line 4630 
  priv->rx_queue.available = priv->rx_queue.entries + 4294967295U;
  #line 4631 
  priv->rx_queue.next = priv->rx_queue.entries + 4294967295U;
  {
    #line 4633 
    priv->rxq_stat.hi = 0;
    #line 4633 
    priv->rxq_stat.value = 0;
    #line 4633 
    priv->rxq_stat.lo = 2147483647;
  }
  #line 4634 
  priv->rxq_stat.value = (int)priv->rx_queue.available;
  #line 4634 
  if (priv->rxq_stat.value > priv->rxq_stat.hi) 
                                                #line 4634 
                                                priv->rxq_stat.hi = priv->rxq_stat.value;
  #line 4634 
  if (priv->rxq_stat.value < priv->rxq_stat.lo) 
                                                #line 4634 
                                                priv->rxq_stat.lo = priv->rxq_stat.value;
  #line 4636 
  bd_queue_initialize(priv,& priv->rx_queue,576U,584U,672U,4000U);
  #line 4643 
  write_register(priv->net_dev,580U,(unsigned int)priv->status_queue.nic);
  #line 4646 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4646 
    int tmp_3;
    #line 4646 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4646 
                                                             tmp_3 = 73; else 
                                                                    #line 4646 
                                                                    tmp_3 = 85;
    #line 4646 
    printk((char *)"\001",tmp_3,(char *)"ipw2100_rx_initialize");
    #line 4646 
    printk((char *)"exit\n");
  }
  #line 4648 
  return;
}

#line 4649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_rx_free(struct ipw2100_priv *priv)
{
  #line 4651 
  int i;
  #line 4653 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4653 
    int tmp_0;
    #line 4653 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4653 
                                                             tmp_0 = 73; else 
                                                                    #line 4653 
                                                                    tmp_0 = 85;
    #line 4653 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_rx_free");
    #line 4653 
    printk((char *)"enter\n");
  }
  #line 4655 
  bd_queue_free(priv,& priv->rx_queue);
  #line 4656 
  status_queue_free(priv);
  #line 4658 
  if (priv->rx_buffers == (struct ipw2100_rx_packet *)0) 
                                                         #line 4659 
                                                         return;
  #line 4661 
  i = 0;
  #line 4661 
  while (i <= 255) {
    #line 4662 
    if ((priv->rx_buffers + (unsigned long)i)->rxp != (struct ipw2100_rx *)0) {
      #line 4663 
      pci_unmap_single(priv->pci_dev,(priv->rx_buffers + (unsigned long)i)->dma_addr,2340UL,2);
      #line 4667 
      consume_skb((priv->rx_buffers + (unsigned long)i)->skb);
    }
    #line 4661 
    i ++;
  }
  #line 4671 
  kfree((void *)priv->rx_buffers);
  #line 4672 
  priv->rx_buffers = (struct ipw2100_rx_packet *)0;
  #line 4674 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4674 
    int tmp_2;
    #line 4674 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4674 
                                                             tmp_2 = 73; else 
                                                                    #line 4674 
                                                                    tmp_2 = 85;
    #line 4674 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_rx_free");
    #line 4674 
    printk((char *)"exit\n");
  }
  #line 4676 
  return;
}

#line 4677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_read_mac_address(struct ipw2100_priv *priv)
{
  #line 4680 
  u8 addr[6U];
  #line 4682 
  int err;
  #line 4679 
  u32 length = 6U;
  #line 4684 
  err = ipw2100_get_ordinal(priv,1001U,(void *)(& addr),& length);
  #line 4685 
  if (err != 0) {
    #line 4686 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4686 
      int tmp_0;
      #line 4686 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4686 
                                                               tmp_0 = 73; else 
                                                                    #line 4686 
                                                                    tmp_0 = 85;
      #line 4686 
      printk((char *)"\001",tmp_0,(char *)"ipw2100_read_mac_address");
      #line 4686 
      printk((char *)"MAC address read failed\n");
    }
    #line 4687 
    return -5;
  }
  #line 4690 
  memcpy((void *)(priv->net_dev)->dev_addr,(void *)(& addr),6UL);
  #line 4691 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4691 
    int tmp_2;
    #line 4691 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4691 
                                                             tmp_2 = 73; else 
                                                                    #line 4691 
                                                                    tmp_2 = 85;
    #line 4691 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_read_mac_address");
    #line 4691 
    printk((char *)"card MAC is %pM\n",(priv->net_dev)->dev_addr);
  }
  #line 4693 
  return 0;
}

#line 4702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_mac_address(struct ipw2100_priv *priv, int batch_mode)
{
  #line 4709 
  int err;
  #line 4704 
  struct host_command cmd = {.host_command = 11U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 6U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 4711 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 4711 
    int tmp_0;
    #line 4711 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4711 
                                                             tmp_0 = 73; else 
                                                                    #line 4711 
                                                                    tmp_0 = 85;
    #line 4711 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_set_mac_address");
    #line 4711 
    printk((char *)"SET_MAC_ADDRESS\n");
  }
  #line 4713 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4713 
    int tmp_2;
    #line 4713 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4713 
                                                             tmp_2 = 73; else 
                                                                    #line 4713 
                                                                    tmp_2 = 85;
    #line 4713 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_set_mac_address");
    #line 4713 
    printk((char *)"enter\n");
  }
  #line 4715 
  if ((priv->config & 8UL) != 0UL) {
    #line 4716 
    memcpy((void *)(& cmd.host_command_parameters),(void *)(& priv->mac_addr),6UL);
    #line 4717 
    memcpy((void *)(priv->net_dev)->dev_addr,(void *)(& priv->mac_addr),6UL);
  }
  else 
       #line 4719 
       memcpy((void *)(& cmd.host_command_parameters),(void *)(priv->net_dev)->dev_addr,6UL);
  #line 4722 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 4724 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 4724 
    int tmp_4;
    #line 4724 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4724 
                                                             tmp_4 = 73; else 
                                                                    #line 4724 
                                                                    tmp_4 = 85;
    #line 4724 
    printk((char *)"\001",tmp_4,(char *)"ipw2100_set_mac_address");
    #line 4724 
    printk((char *)"exit\n");
  }
  #line 4725 
  return err;
}

#line 4728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_port_type(struct ipw2100_priv *priv, u32 port_type, int batch_mode)
{
  #line 4736 
  int err;
  #line 4731 
  struct host_command cmd = {.host_command = 12U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 4738 
  switch (port_type) {
    #line 4739 
    case (u32)2: 
                 #line 4739 
    ;
    #line 4740 
    cmd.host_command_parameters[0] = 1U;
    #line 4741 
    break;
    #line 4742 
    case (u32)1: 
                 #line 4742 
    ;
    #line 4743 
    cmd.host_command_parameters[0] = 3U;
    #line 4744 
    break;
  }
  #line 4747 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 4747 
    int tmp_0;
    #line 4747 
    char *tmp_1;
    #line 4747 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4747 
                                                             tmp_0 = 73; else 
                                                                    #line 4747 
                                                                    tmp_0 = 85;
    #line 4747 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_set_port_type");
    #line 4747 
    if (port_type == 3U) 
                         #line 4747 
                         tmp_1 = (char *)"Ad-Hoc"; else 
                                                        #line 4747 
                                                        tmp_1 = (char *)"Managed";
    #line 4747 
    printk((char *)"PORT_TYPE: %s\n",tmp_1);
  }
  #line 4750 
  if (batch_mode == 0) {
    #line 4751 
    err = ipw2100_disable_adapter(priv);
    #line 4752 
    if (err != 0) {
      #line 4753 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
      #line 4756 
      return err;
    }
  }
  #line 4761 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 4763 
  if (batch_mode == 0) 
                       #line 4764 
                       ipw2100_enable_adapter(priv);
  #line 4766 
  return err;
}

#line 4769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_channel(struct ipw2100_priv *priv, u32 channel_0, int batch_mode)
{
  #line 4777 
  int err;
  #line 4772 
  struct host_command cmd = {.host_command = 14U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 4779 
  cmd.host_command_parameters[0] = channel_0;
  #line 4781 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 4781 
    int tmp_0;
    #line 4781 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4781 
                                                             tmp_0 = 73; else 
                                                                    #line 4781 
                                                                    tmp_0 = 85;
    #line 4781 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_set_channel");
    #line 4781 
    printk((char *)"CHANNEL: %d\n",channel_0);
  }
  #line 4784 
  if ((priv->ieee)->iw_mode == 2) 
                                  #line 4785 
                                  return 0;
  #line 4787 
  if (channel_0 > 14U) 
                       #line 4789 
                       return -22;
  #line 4791 
  if (batch_mode == 0) {
    #line 4792 
    err = ipw2100_disable_adapter(priv);
    #line 4793 
    if (err != 0) 
                  #line 4794 
                  return err;
  }
  #line 4797 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 4798 
  if (err != 0) {
    #line 4799 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 4799 
      int tmp_2;
      #line 4799 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4799 
                                                               tmp_2 = 73; else 
                                                                    #line 4799 
                                                                    tmp_2 = 85;
      #line 4799 
      printk((char *)"\001",tmp_2,(char *)"ipw2100_set_channel");
      #line 4799 
      printk((char *)"Failed to set channel to %d",channel_0);
    }
    #line 4800 
    return err;
  }
  #line 4803 
  if (channel_0 != 0U) 
                       #line 4804 
                       priv->config |= 1UL; else 
                                                 #line 4806 
                                                 priv->config &= 18446744073709551614UL;
  #line 4808 
  priv->channel = (unsigned char)channel_0;
  #line 4810 
  if (batch_mode == 0) {
    #line 4811 
    err = ipw2100_enable_adapter(priv);
    #line 4812 
    if (err != 0) 
                  #line 4813 
                  return err;
  }
  #line 4816 
  return 0;
}

#line 4819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_system_config(struct ipw2100_priv *priv, int batch_mode)
{
  #line 4826 
  u32 ibss_mask;
  #line 4827 
  int err;
  #line 4821 
  struct host_command cmd = {.host_command = 6U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 12U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 4826 
  u32 len = 4U;
  #line 4831 
  if (batch_mode == 0) {
    #line 4832 
    err = ipw2100_disable_adapter(priv);
    #line 4833 
    if (err != 0) 
                  #line 4834 
                  return err;
  }
  #line 4837 
  if ((priv->ieee)->iw_mode == 1) 
                                  #line 4838 
                                  cmd.host_command_parameters[0] |= 32U;
  #line 4840 
  cmd.host_command_parameters[0] |= 114688U;
  #line 4843 
  if ((priv->config & 16UL) == 0UL) 
                                    #line 4844 
                                    cmd.host_command_parameters[0] |= 16U;
  #line 4846 
  err = ipw2100_get_ordinal(priv,207U,(void *)(& ibss_mask),& len);
  #line 4849 
  if (err != 0) 
                #line 4850 
                ibss_mask = 34815U;
  #line 4852 
  cmd.host_command_parameters[1] = 16383U;
  #line 4853 
  cmd.host_command_parameters[2] = ibss_mask & 16383U;
  #line 4858 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 4859 
  if (err != 0) 
                #line 4860 
                return err;
  #line 4871 
  if (batch_mode == 0) {
    #line 4872 
    err = ipw2100_enable_adapter(priv);
    #line 4873 
    if (err != 0) 
                  #line 4874 
                  return err;
  }
  #line 4877 
  return 0;
}

#line 4880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_tx_rates(struct ipw2100_priv *priv, u32 rate, int batch_mode)
{
  #line 4888 
  int err;
  #line 4883 
  struct host_command cmd = {.host_command = 19U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 4890 
  cmd.host_command_parameters[0] = rate & 15U;
  #line 4892 
  if (batch_mode == 0) {
    #line 4893 
    err = ipw2100_disable_adapter(priv);
    #line 4894 
    if (err != 0) 
                  #line 4895 
                  return err;
  }
  #line 4899 
  ipw2100_hw_send_command(priv,& cmd);
  #line 4902 
  cmd.host_command = 18U;
  #line 4903 
  ipw2100_hw_send_command(priv,& cmd);
  #line 4906 
  cmd.host_command = 62U;
  #line 4907 
  ipw2100_hw_send_command(priv,& cmd);
  #line 4909 
  if (batch_mode == 0) {
    #line 4910 
    err = ipw2100_enable_adapter(priv);
    #line 4911 
    if (err != 0) 
                  #line 4912 
                  return err;
  }
  #line 4915 
  priv->tx_rates = rate;
  #line 4917 
  return 0;
}

#line 4920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_power_mode(struct ipw2100_priv *priv, int power_level)
{
  #line 4927 
  int err;
  #line 4922 
  struct host_command cmd = {.host_command = 17U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 4929 
  cmd.host_command_parameters[0] = (unsigned int)power_level;
  #line 4931 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 4932 
  if (err != 0) 
                #line 4933 
                return err;
  #line 4935 
  if (power_level == 0) 
                        #line 4936 
                        priv->power_mode &= 15; else 
                                                     #line 4938 
                                                     priv->power_mode = power_level | 16;
  #line 4952 
  return 0;
}

#line 4955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_rts_threshold(struct ipw2100_priv *priv, u32 threshold)
{
  #line 4962 
  int err;
  #line 4957 
  struct host_command cmd = {.host_command = 15U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 4964 
  if ((threshold & 2147483648U) != 0U) 
                                       #line 4965 
                                       cmd.host_command_parameters[0] = 2304U; else 
                                                                    #line 4967 
                                                                    cmd.host_command_parameters[0] = threshold & 2147483647U;
  #line 4969 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 4970 
  if (err != 0) 
                #line 4971 
                return err;
  #line 4973 
  priv->rts_threshold = threshold;
  #line 4975 
  return 0;
}

#line 5019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_short_retry(struct ipw2100_priv *priv, u32 retry)
{
  #line 5026 
  int err;
  #line 5021 
  struct host_command cmd = {.host_command = 51U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5028 
  cmd.host_command_parameters[0] = retry;
  #line 5030 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5031 
  if (err != 0) 
                #line 5032 
                return err;
  #line 5034 
  priv->short_retry_limit = (int)retry;
  #line 5036 
  return 0;
}

#line 5039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_long_retry(struct ipw2100_priv *priv, u32 retry)
{
  #line 5046 
  int err;
  #line 5041 
  struct host_command cmd = {.host_command = 52U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5048 
  cmd.host_command_parameters[0] = retry;
  #line 5050 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5051 
  if (err != 0) 
                #line 5052 
                return err;
  #line 5054 
  priv->long_retry_limit = (int)retry;
  #line 5056 
  return 0;
}

#line 5059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_mandatory_bssid(struct ipw2100_priv *priv, u8 *bssid, int batch_mode)
{
  #line 5062 
  unsigned int tmp;
  #line 5067 
  int err;
  #line 5062 
  if (bssid == (u8 *)0U) 
                         #line 5062 
                         tmp = 0U; else 
                                        #line 5062 
                                        tmp = 6U;
  #line 5062 
  struct host_command cmd = {.host_command = 9U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = tmp, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5070 
  if (bssid != (u8 *)0U) {
    #line 5071 
    if ((ipw2100_debug_level & 32U) != 0U) {
      #line 5071 
      int tmp_1;
      #line 5071 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5071 
                                                               tmp_1 = 73; else 
                                                                    #line 5071 
                                                                    tmp_1 = 85;
      #line 5071 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_set_mandatory_bssid");
      #line 5071 
      printk((char *)"MANDATORY_BSSID: %pM\n",bssid);
    }
  }
  else 
    #line 5073 
    if ((ipw2100_debug_level & 32U) != 0U) {
      #line 5073 
      int tmp_3;
      #line 5073 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5073 
                                                               tmp_3 = 73; else 
                                                                    #line 5073 
                                                                    tmp_3 = 85;
      #line 5073 
      printk((char *)"\001",tmp_3,(char *)"ipw2100_set_mandatory_bssid");
      #line 5073 
      printk((char *)"MANDATORY_BSSID: <clear>\n");
    }
  #line 5076 
  if (bssid != (u8 *)0U) 
                         #line 5077 
                         memcpy((void *)(& cmd.host_command_parameters),(void *)bssid,6UL);
  #line 5079 
  if (batch_mode == 0) {
    #line 5080 
    err = ipw2100_disable_adapter(priv);
    #line 5081 
    if (err != 0) 
                  #line 5082 
                  return err;
  }
  #line 5085 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5087 
  if (batch_mode == 0) 
                       #line 5088 
                       ipw2100_enable_adapter(priv);
  #line 5090 
  return err;
}

#line 5093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_disassociate_bssid(struct ipw2100_priv *priv)
{
  #line 5100 
  int err;
  #line 5095 
  struct host_command cmd = {.host_command = 68U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 6U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5102 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 5102 
    int tmp_0;
    #line 5102 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5102 
                                                             tmp_0 = 73; else 
                                                                    #line 5102 
                                                                    tmp_0 = 85;
    #line 5102 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_disassociate_bssid");
    #line 5102 
    printk((char *)"DISASSOCIATION_BSSID\n");
  }
  #line 5108 
  memcpy((void *)(& cmd.host_command_parameters),(void *)(& priv->bssid),6UL);
  #line 5110 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5112 
  return err;
}

#line 5115 
#line 5119 
static int ipw2100_set_wpa_ie(struct ipw2100_priv *priv, struct ipw2100_wpa_assoc_frame *wpa_frame, int batch_mode);
#line 5119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_wpa_ie(struct ipw2100_priv *priv, struct ipw2100_wpa_assoc_frame *wpa_frame, int batch_mode)
{
  #line 5128 
  int err;
  #line 5123 
  struct host_command cmd = {.host_command = 69U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 400U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5130 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 5130 
    int tmp_0;
    #line 5130 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5130 
                                                             tmp_0 = 73; else 
                                                                    #line 5130 
                                                                    tmp_0 = 85;
    #line 5130 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_set_wpa_ie");
    #line 5130 
    printk((char *)"SET_WPA_IE\n");
  }
  #line 5132 
  if (batch_mode == 0) {
    #line 5133 
    err = ipw2100_disable_adapter(priv);
    #line 5134 
    if (err != 0) 
                  #line 5135 
                  return err;
  }
  #line 5138 
  memcpy((void *)(& cmd.host_command_parameters),(void *)wpa_frame,400UL);
  #line 5141 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5143 
  if (batch_mode == 0) {
    #line 5144 
    if (ipw2100_enable_adapter(priv) != 0) 
                                           #line 5145 
                                           err = -5;
  }
  #line 5148 
  return err;
}

#line 5159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_security_information(struct ipw2100_priv *priv, int auth_mode, int security_level, int unicast_using_group, int batch_mode)
{
  #line 5172 
  int err;
  #line 5165 
  struct host_command cmd = {.host_command = 67U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 9U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5170 
  struct security_info_params *security = (struct security_info_params *)(& cmd.host_command_parameters);
  #line 5173 
  memset((void *)security,0,9UL);
  #line 5179 
  security->auth_mode = (unsigned char)auth_mode;
  #line 5180 
  security->unicast_using_group = (unsigned char)unicast_using_group;
  #line 5182 
  switch (security_level) {
    #line 5183 
    default: 
             #line 5183 
    ;
    #line 5184 
    case 0: 
            #line 5184 
    ;
    #line 5185 
    security->allowed_ciphers = 1U;
    #line 5186 
    break;
    #line 5187 
    case 1: 
            #line 5187 
    ;
    #line 5188 
    security->allowed_ciphers = 34U;
    #line 5190 
    break;
    #line 5191 
    case 2: 
            #line 5191 
    ;
    #line 5192 
    security->allowed_ciphers = 38U;
    #line 5194 
    break;
    #line 5195 
    case 3: 
            #line 5195 
    ;
    #line 5196 
    security->allowed_ciphers = 98U;
    #line 5198 
    break;
    #line 5199 
    case 4: 
            #line 5199 
    ;
    #line 5200 
    security->allowed_ciphers = 54U;
    #line 5202 
    break;
  }
  #line 5205 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 5205 
    int tmp_0;
    #line 5205 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5205 
                                                             tmp_0 = 73; else 
                                                                    #line 5205 
                                                                    tmp_0 = 85;
    #line 5205 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_set_security_information");
    #line 5205 
    printk((char *)"SET_SECURITY_INFORMATION: auth:%d cipher:0x%02X (level %d)\n",(int)security->auth_mode,security->allowed_ciphers,security_level);
  }
  #line 5209 
  security->replay_counters_number = (unsigned char)0U;
  #line 5211 
  if (batch_mode == 0) {
    #line 5212 
    err = ipw2100_disable_adapter(priv);
    #line 5213 
    if (err != 0) 
                  #line 5214 
                  return err;
  }
  #line 5217 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5219 
  if (batch_mode == 0) 
                       #line 5220 
                       ipw2100_enable_adapter(priv);
  #line 5222 
  return err;
}

#line 5225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_tx_power(struct ipw2100_priv *priv, u32 tx_power)
{
  #line 5227 
  struct host_command cmd = {.host_command = 36U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5232 
  int err = 0;
  #line 5233 
  u32 tmp = tx_power;
  #line 5235 
  if (tx_power != 32U) 
                       #line 5236 
                       tmp = ((tx_power + 12U) * 16U) / 28U;
  #line 5239 
  cmd.host_command_parameters[0] = tmp;
  #line 5241 
  if ((priv->ieee)->iw_mode == 1) 
                                  #line 5242 
                                  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5243 
  if (err == 0) 
                #line 5244 
                priv->tx_power = (int)tx_power;
  #line 5246 
  return 0;
}

#line 5249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_ibss_beacon_interval(struct ipw2100_priv *priv, u32 interval, int batch_mode)
{
  #line 5257 
  int err;
  #line 5252 
  struct host_command cmd = {.host_command = 29U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5259 
  cmd.host_command_parameters[0] = interval;
  #line 5261 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 5261 
    int tmp_0;
    #line 5261 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5261 
                                                             tmp_0 = 73; else 
                                                                    #line 5261 
                                                                    tmp_0 = 85;
    #line 5261 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_set_ibss_beacon_interval");
    #line 5261 
    printk((char *)"enter\n");
  }
  #line 5263 
  if ((priv->ieee)->iw_mode == 1) {
    #line 5264 
    if (batch_mode == 0) {
      #line 5265 
      err = ipw2100_disable_adapter(priv);
      #line 5266 
      if (err != 0) 
                    #line 5267 
                    return err;
    }
    #line 5270 
    ipw2100_hw_send_command(priv,& cmd);
    #line 5272 
    if (batch_mode == 0) {
      #line 5273 
      err = ipw2100_enable_adapter(priv);
      #line 5274 
      if (err != 0) 
                    #line 5275 
                    return err;
    }
  }
  #line 5279 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 5279 
    int tmp_2;
    #line 5279 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5279 
                                                             tmp_2 = 73; else 
                                                                    #line 5279 
                                                                    tmp_2 = 85;
    #line 5279 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_set_ibss_beacon_interval");
    #line 5279 
    printk((char *)"exit\n");
  }
  #line 5281 
  return 0;
}

#line 5284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_queues_initialize(struct ipw2100_priv *priv)
{
  #line 5286 
  ipw2100_tx_initialize(priv);
  #line 5287 
  ipw2100_rx_initialize(priv);
  #line 5288 
  ipw2100_msg_initialize(priv);
  #line 5289 
  return;
}

#line 5291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_queues_free(struct ipw2100_priv *priv)
{
  #line 5293 
  ipw2100_tx_free(priv);
  #line 5294 
  ipw2100_rx_free(priv);
  #line 5295 
  ipw2100_msg_free(priv);
  #line 5296 
  return;
}

#line 5298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_queues_allocate(struct ipw2100_priv *priv)
{
  #line 5300 
  if (ipw2100_tx_allocate(priv) != 0) 
                                      #line 5300 
                                      goto _LOR;
  else {
    #line 5300 
    if (ipw2100_rx_allocate(priv) != 0) 
                                        #line 5300 
                                        goto _LOR;
    else {
      #line 5301 
      if (ipw2100_msg_allocate(priv) != 0) 
                                           #line 5300 
                                           _LOR: 
                                                 #line 5302 
                                                 goto fail;
    }
  }
  #line 5304 
  return 0;
  #line 5306 
  fail: 
        #line 5306 
  ;
  #line 5307 
  ipw2100_tx_free(priv);
  #line 5308 
  ipw2100_rx_free(priv);
  #line 5309 
  ipw2100_msg_free(priv);
  #line 5310 
  return -12;
}

#line 5315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_wep_flags(struct ipw2100_priv *priv, u32 flags, int batch_mode)
{
  #line 5323 
  int err;
  #line 5318 
  struct host_command cmd = {.host_command = 26U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5325 
  cmd.host_command_parameters[0] = flags;
  #line 5327 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 5327 
    int tmp_0;
    #line 5327 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5327 
                                                             tmp_0 = 73; else 
                                                                    #line 5327 
                                                                    tmp_0 = 85;
    #line 5327 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_set_wep_flags");
    #line 5327 
    printk((char *)"WEP_FLAGS: flags = 0x%08X\n",flags);
  }
  #line 5329 
  if (batch_mode == 0) {
    #line 5330 
    err = ipw2100_disable_adapter(priv);
    #line 5331 
    if (err != 0) {
      #line 5332 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
      #line 5335 
      return err;
    }
  }
  #line 5340 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5342 
  if (batch_mode == 0) 
                       #line 5343 
                       ipw2100_enable_adapter(priv);
  #line 5345 
  return err;
}

#line 5375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_key(struct ipw2100_priv *priv, int idx, char *key, int len, int batch_mode)
{
  #line 5378 
  int tmp;
  #line 5378 
  int tmp_0;
  #line 5385 
  int err;
  #line 5378 
  if (len != 0) {
    #line 5378 
    if (len <= 5) 
                  #line 5378 
                  tmp = 5; else 
                                #line 5378 
                                tmp = 13;
    #line 5378 
    tmp_0 = tmp;
  }
  else 
       #line 5378 
       tmp_0 = 0;
  #line 5378 
  int keylen = tmp_0;
  #line 5379 
  struct host_command cmd = {.host_command = 20U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 15U, .host_command_parameters = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 5384 
  struct ipw2100_wep_key *wep_key = (struct ipw2100_wep_key *)(& cmd.host_command_parameters);
  #line 5387 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 5387 
    int tmp_2;
    #line 5387 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5387 
                                                             tmp_2 = 73; else 
                                                                    #line 5387 
                                                                    tmp_2 = 85;
    #line 5387 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_set_key");
    #line 5387 
    printk((char *)"WEP_KEY_INFO: index = %d, len = %d/%d\n",idx,keylen,len);
  }
  #line 5394 
  wep_key->idx = (unsigned char)idx;
  #line 5395 
  wep_key->len = (unsigned char)keylen;
  #line 5397 
  if (keylen != 0) {
    #line 5398 
    memcpy((void *)(& wep_key->key),(void *)key,(unsigned long)len);
    #line 5399 
    memset((void *)((u8 *)(& wep_key->key) + (unsigned long)len),0,(unsigned long)(keylen - len));
  }
  #line 5403 
  if (keylen == 0) {
    #line 5404 
    if ((ipw2100_debug_level & 4194304U) != 0U) {
      #line 5404 
      int tmp_4;
      #line 5404 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5404 
                                                               tmp_4 = 73; else 
                                                                    #line 5404 
                                                                    tmp_4 = 85;
      #line 5404 
      printk((char *)"\001",tmp_4,(char *)"ipw2100_set_key");
      #line 5404 
      printk((char *)"%s: Clearing key %d\n",(char *)(& (priv->net_dev)->name),(int)wep_key->idx);
    }
  }
  else 
    #line 5406 
    if (keylen == 5) {
      #line 5407 
      if ((ipw2100_debug_level & 4194304U) != 0U) {
        #line 5407 
        int tmp_6;
        #line 5407 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 5407 
                                                                 tmp_6 = 73; else 
                                                                    #line 5407 
                                                                    tmp_6 = 85;
        #line 5407 
        printk((char *)"\001",tmp_6,(char *)"ipw2100_set_key");
        #line 5407 
        printk((char *)"%s: idx: %d, len: %d key: ",(char *)(& (priv->net_dev)->name),(int)wep_key->idx,(int)wep_key->len,(int)wep_key->key[0],(int)wep_key->key[1],(int)wep_key->key[2],(int)wep_key->key[3],(int)wep_key->key[4]);
      }
    }
    else 
      #line 5411 
      if ((ipw2100_debug_level & 4194304U) != 0U) {
        #line 5411 
        int tmp_8;
        #line 5411 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 5411 
                                                                 tmp_8 = 73; else 
                                                                    #line 5411 
                                                                    tmp_8 = 85;
        #line 5411 
        printk((char *)"\001",tmp_8,(char *)"ipw2100_set_key");
        #line 5411 
        printk((char *)"%s: idx: %d, len: %d key: ",(char *)(& (priv->net_dev)->name),(int)wep_key->idx,(int)wep_key->len,(int)wep_key->key[0],(int)wep_key->key[1],(int)wep_key->key[2],(int)wep_key->key[3],(int)wep_key->key[4],(int)wep_key->key[5],(int)wep_key->key[6],(int)wep_key->key[7],(int)wep_key->key[8],(int)wep_key->key[9],(int)wep_key->key[10]);
      }
  #line 5416 
  if (batch_mode == 0) {
    #line 5417 
    err = ipw2100_disable_adapter(priv);
    #line 5419 
    if (err != 0) {
      #line 5420 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
      #line 5423 
      return err;
    }
  }
  #line 5428 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5430 
  if (batch_mode == 0) {
    #line 5431 
    int err2 = ipw2100_enable_adapter(priv);
    #line 5432 
    if (err == 0) 
                  #line 5433 
                  err = err2;
  }
  #line 5435 
  return err;
}

#line 5438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_key_index(struct ipw2100_priv *priv, int idx, int batch_mode)
{
  #line 5447 
  int err;
  #line 5441 
  struct host_command cmd = {.host_command = 25U, .host_command1 = 0U, .host_command_sequence = 0U, .host_command_length = 4U, .host_command_parameters = {(unsigned int)idx}};
  #line 5449 
  if ((ipw2100_debug_level & 32U) != 0U) {
    #line 5449 
    int tmp_0;
    #line 5449 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5449 
                                                             tmp_0 = 73; else 
                                                                    #line 5449 
                                                                    tmp_0 = 85;
    #line 5449 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_set_key_index");
    #line 5449 
    printk((char *)"WEP_KEY_INDEX: index = %d\n",idx);
  }
  #line 5451 
  if ((unsigned int)idx > 3U) 
                              #line 5452 
                              return -22;
  #line 5454 
  if (batch_mode == 0) {
    #line 5455 
    err = ipw2100_disable_adapter(priv);
    #line 5456 
    if (err != 0) {
      #line 5457 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name),err);
      #line 5460 
      return err;
    }
  }
  #line 5465 
  err = ipw2100_hw_send_command(priv,& cmd);
  #line 5467 
  if (batch_mode == 0) 
                       #line 5468 
                       ipw2100_enable_adapter(priv);
  #line 5470 
  return err;
}

#line 5473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_configure_security(struct ipw2100_priv *priv, int batch_mode)
{
  #line 5475 
  int i;
  #line 5475 
  int err;
  #line 5475 
  int auth_mode;
  #line 5475 
  int sec_level;
  #line 5475 
  int use_group;
  #line 5536 
  unsigned int tmp;
  #line 5477 
  if ((priv->status & 4UL) == 0UL) 
                                   #line 5478 
                                   return 0;
  #line 5480 
  if (batch_mode == 0) {
    #line 5481 
    err = ipw2100_disable_adapter(priv);
    #line 5482 
    if (err != 0) 
                  #line 5483 
                  return err;
  }
  #line 5486 
  if ((unsigned int)(priv->ieee)->sec.enabled == 0U) 
                                                     #line 5487 
                                                     err = ipw2100_set_security_information(priv,0,0,0,1);
  else {
    #line 5491 
    auth_mode = 0;
    #line 5492 
    if (((int)(priv->ieee)->sec.flags & 32) != 0) 
      #line 5493 
      if ((unsigned int)(priv->ieee)->sec.auth_mode == 1U) 
                                                           #line 5494 
                                                           auth_mode = 1;
      else 
        #line 5495 
        if ((unsigned int)(priv->ieee)->sec.auth_mode == 128U) 
                                                               #line 5496 
                                                               auth_mode = 128;
    #line 5499 
    sec_level = 0;
    #line 5500 
    if (((int)(priv->ieee)->sec.flags & 128) != 0) 
                                                   #line 5501 
                                                   sec_level = (int)(priv->ieee)->sec.level;
    #line 5503 
    use_group = 0;
    #line 5504 
    if (((int)(priv->ieee)->sec.flags & 64) != 0) 
                                                  #line 5505 
                                                  use_group = (int)(priv->ieee)->sec.unicast_uses_group;
    #line 5507 
    err = ipw2100_set_security_information(priv,auth_mode,sec_level,use_group,1);
  }
  #line 5512 
  if (err != 0) 
                #line 5513 
                goto exit;
  #line 5515 
  if ((unsigned int)(priv->ieee)->sec.enabled != 0U) {
    #line 5516 
    i = 0;
    #line 5516 
    while (i <= 3) {
      #line 5517 
      if ((((int)(priv->ieee)->sec.flags >> i) & 1) == 0) {
        #line 5518 
        memset((void *)(& (priv->ieee)->sec.keys[i]),0,13UL);
        #line 5519 
        (priv->ieee)->sec.key_sizes[i] = (unsigned char)0U;
      }
      else {
        #line 5521 
        err = ipw2100_set_key(priv,i,(char *)(& (priv->ieee)->sec.keys[i]),(int)(priv->ieee)->sec.key_sizes[i],1);
        #line 5525 
        if (err != 0) 
                      #line 5526 
                      goto exit;
      }
      #line 5516 
      i ++;
    }
    #line 5530 
    ipw2100_set_key_index(priv,(priv->ieee)->crypt_info.tx_keyidx,1);
  }
  #line 5536 
  if ((unsigned int)(priv->ieee)->sec.enabled != 0U) 
                                                     #line 5536 
                                                     tmp = 8U; else 
                                                                    #line 5536 
                                                                    tmp = 0U;
  #line 5535 
  ;
  #line 5535 
  err = ipw2100_set_wep_flags(priv,tmp,1);
  #line 5539 
  if (err != 0) 
                #line 5540 
                goto exit;
  #line 5542 
  priv->status &= 18446744072635809791UL;
  #line 5544 
  exit: 
        #line 5544 
  ;
  #line 5545 
  if (batch_mode == 0) 
                       #line 5546 
                       ipw2100_enable_adapter(priv);
  #line 5548 
  return err;
}

#line 5551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_security_work(struct work_struct *work)
{
  #line 5554 
  void *__mptr;
  #line 5554 
  __mptr = (void *)work;
  #line 5553 
  struct ipw2100_priv *priv = ((struct ipw2100_priv *)(__mptr + 18446744073709550344U));
  #line 5559 
  if ((priv->status & 1024UL) == 0UL && (priv->status & 1073741824UL) != 0UL) 
    #line 5561 
    ipw2100_configure_security(priv,0);
  #line 5562 
  return;
}

#line 5564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void shim__set_security(struct net_device *dev, struct libipw_security *sec)
{
  #line 5568 
  int i;
  #line 5567 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 5570 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 5571 
  if ((priv->status & 32UL) == 0UL) 
                                    #line 5572 
                                    goto done;
  #line 5574 
  i = 0;
  #line 5574 
  while (i <= 3) {
    #line 5575 
    if ((((int)sec->flags >> i) & 1) != 0) {
      #line 5576 
      (priv->ieee)->sec.key_sizes[i] = sec->key_sizes[i];
      #line 5577 
      if ((unsigned int)sec->key_sizes[i] == 0U) 
                                                 #line 5578 
                                                 (priv->ieee)->sec.flags = (unsigned short)((int)(priv->ieee)->sec.flags & ~ (1 << i)); else 
                                                                    #line 5580 
                                                                    memcpy((void *)(& (priv->ieee)->sec.keys[i]),(void *)(& sec->keys[i]),(unsigned long)sec->key_sizes[i]);
      #line 5582 
      if ((unsigned int)sec->level == 1U) {
        #line 5583 
        (priv->ieee)->sec.flags = (unsigned short)((int)(priv->ieee)->sec.flags | (1 << i));
        #line 5584 
        priv->status |= 1073741824UL;
      }
      else 
           #line 5586 
           (priv->ieee)->sec.flags = (unsigned short)((int)(priv->ieee)->sec.flags & ~ (1 << i));
    }
    #line 5574 
    i ++;
  }
  #line 5590 
  if (((int)sec->flags & 16) != 0 && (int)(priv->ieee)->sec.active_key != (int)sec->active_key) {
    #line 5592 
    (priv->ieee)->sec.active_key = sec->active_key;
    #line 5593 
    (priv->ieee)->sec.flags = (unsigned short)((unsigned int)(priv->ieee)->sec.flags | 16U);
    #line 5594 
    priv->status |= 1073741824UL;
  }
  #line 5597 
  if (((int)sec->flags & 32) != 0 && (int)(priv->ieee)->sec.auth_mode != (int)sec->auth_mode) {
    #line 5599 
    (priv->ieee)->sec.auth_mode = sec->auth_mode;
    #line 5600 
    (priv->ieee)->sec.flags = (unsigned short)((unsigned int)(priv->ieee)->sec.flags | 32U);
    #line 5601 
    priv->status |= 1073741824UL;
  }
  #line 5604 
  if (((int)sec->flags & 256) != 0 && (int)(priv->ieee)->sec.enabled != (int)sec->enabled) {
    #line 5605 
    (priv->ieee)->sec.flags = (unsigned short)((unsigned int)(priv->ieee)->sec.flags | 256U);
    #line 5606 
    (priv->ieee)->sec.enabled = sec->enabled;
    #line 5607 
    priv->status |= 1073741824UL;
  }
  #line 5610 
  if (((int)sec->flags & 512) != 0) 
                                    #line 5611 
                                    (priv->ieee)->sec.encrypt = sec->encrypt;
  #line 5613 
  if (((int)sec->flags & 128) != 0 && (int)(priv->ieee)->sec.level != (int)sec->level) {
    #line 5614 
    (priv->ieee)->sec.level = sec->level;
    #line 5615 
    (priv->ieee)->sec.flags = (unsigned short)((unsigned int)(priv->ieee)->sec.flags | 128U);
    #line 5616 
    priv->status |= 1073741824UL;
  }
  #line 5619 
  if ((ipw2100_debug_level & 4194304U) != 0U) {
    #line 5619 
    int tmp_1;
    #line 5619 
    int tmp_2;
    #line 5619 
    int tmp_3;
    #line 5619 
    int tmp_4;
    #line 5619 
    int tmp_5;
    #line 5619 
    int tmp_6;
    #line 5619 
    int tmp_7;
    #line 5619 
    int tmp_8;
    #line 5619 
    int tmp_9;
    #line 5619 
    int tmp_10;
    #line 5619 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5619 
                                                             tmp_1 = 73; else 
                                                                    #line 5619 
                                                                    tmp_1 = 85;
    #line 5619 
    printk((char *)"\001",tmp_1,(char *)"shim__set_security");
    #line 5619 
    if (((int)(priv->ieee)->sec.flags & 1) != 0) 
                                                 #line 5619 
                                                 tmp_2 = 49; else 
                                                                  #line 5619 
                                                                  tmp_2 = 48;
    #line 5619 
    if (((int)(priv->ieee)->sec.flags & 2) != 0) 
                                                 #line 5619 
                                                 tmp_3 = 49; else 
                                                                  #line 5619 
                                                                  tmp_3 = 48;
    #line 5619 
    if (((int)(priv->ieee)->sec.flags & 4) != 0) 
                                                 #line 5619 
                                                 tmp_4 = 49; else 
                                                                  #line 5619 
                                                                  tmp_4 = 48;
    #line 5619 
    if (((int)(priv->ieee)->sec.flags & 8) != 0) 
                                                 #line 5619 
                                                 tmp_5 = 49; else 
                                                                  #line 5619 
                                                                  tmp_5 = 48;
    #line 5619 
    if (((int)(priv->ieee)->sec.flags & 16) != 0) 
                                                  #line 5619 
                                                  tmp_6 = 49; else 
                                                                   #line 5619 
                                                                   tmp_6 = 48;
    #line 5619 
    if (((int)(priv->ieee)->sec.flags & 32) != 0) 
                                                  #line 5619 
                                                  tmp_7 = 49; else 
                                                                   #line 5619 
                                                                   tmp_7 = 48;
    #line 5619 
    if (((int)(priv->ieee)->sec.flags & 64) != 0) 
                                                  #line 5619 
                                                  tmp_8 = 49; else 
                                                                   #line 5619 
                                                                   tmp_8 = 48;
    #line 5619 
    if (((int)(priv->ieee)->sec.flags & 128) != 0) 
                                                   #line 5619 
                                                   tmp_9 = 49; else 
                                                                    #line 5619 
                                                                    tmp_9 = 48;
    #line 5619 
    if (((int)(priv->ieee)->sec.flags & 256) != 0) 
                                                   #line 5619 
                                                   tmp_10 = 49; else 
                                                                  #line 5619 
                                                                  tmp_10 = 48;
    #line 5619 
    printk((char *)"Security flags: %c %c%c%c%c %c%c%c%c\n",tmp_10,tmp_9,tmp_8,tmp_7,tmp_6,tmp_5,tmp_4,tmp_3,tmp_2);
  }
  #line 5635 
  if ((priv->status & 1536UL) == 0UL) 
                                      #line 5636 
                                      ipw2100_configure_security(priv,0);
  #line 5637 
  done: 
        #line 5637 
  ;
  #line 5638 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 5639 
  return;
}

#line 5641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_adapter_setup(struct ipw2100_priv *priv)
{
  #line 5643 
  int err;
  #line 5645 
  u8 *bssid;
  #line 5644 
  int batch_mode = 1;
  #line 5647 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 5647 
    int tmp_0;
    #line 5647 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5647 
                                                             tmp_0 = 73; else 
                                                                    #line 5647 
                                                                    tmp_0 = 85;
    #line 5647 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_adapter_setup");
    #line 5647 
    printk((char *)"enter\n");
  }
  #line 5649 
  err = ipw2100_disable_adapter(priv);
  #line 5650 
  if (err != 0) 
                #line 5651 
                return err;
  #line 5653 
  if ((priv->ieee)->iw_mode == 6) {
    #line 5654 
    err = ipw2100_set_channel(priv,(unsigned int)priv->channel,batch_mode);
    #line 5655 
    if (err != 0) 
                  #line 5656 
                  return err;
    #line 5658 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 5658 
      int tmp_2;
      #line 5658 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5658 
                                                               tmp_2 = 73; else 
                                                                    #line 5658 
                                                                    tmp_2 = 85;
      #line 5658 
      printk((char *)"\001",tmp_2,(char *)"ipw2100_adapter_setup");
      #line 5658 
      printk((char *)"exit\n");
    }
    #line 5660 
    return 0;
  }
  #line 5664 
  err = ipw2100_read_mac_address(priv);
  #line 5665 
  if (err != 0) 
                #line 5666 
                return -5;
  #line 5668 
  err = ipw2100_set_mac_address(priv,batch_mode);
  #line 5669 
  if (err != 0) 
                #line 5670 
                return err;
  #line 5672 
  err = ipw2100_set_port_type(priv,(unsigned int)(priv->ieee)->iw_mode,batch_mode);
  #line 5673 
  if (err != 0) 
                #line 5674 
                return err;
  #line 5676 
  if ((priv->ieee)->iw_mode == 1) {
    #line 5677 
    err = ipw2100_set_channel(priv,(unsigned int)priv->channel,batch_mode);
    #line 5678 
    if (err != 0) 
                  #line 5679 
                  return err;
  }
  #line 5682 
  err = ipw2100_system_config(priv,batch_mode);
  #line 5683 
  if (err != 0) 
                #line 5684 
                return err;
  #line 5686 
  err = ipw2100_set_tx_rates(priv,priv->tx_rates,batch_mode);
  #line 5687 
  if (err != 0) 
                #line 5688 
                return err;
  #line 5691 
  err = ipw2100_set_power_mode(priv,0);
  #line 5692 
  if (err != 0) 
                #line 5693 
                return err;
  #line 5695 
  err = ipw2100_set_rts_threshold(priv,priv->rts_threshold);
  #line 5696 
  if (err != 0) 
                #line 5697 
                return err;
  #line 5699 
  if ((priv->config & 4UL) != 0UL) 
                                   #line 5700 
                                   bssid = (u8 *)(& priv->bssid); else 
                                                                    #line 5702 
                                                                    bssid = (u8 *)0U;
  #line 5703 
  err = ipw2100_set_mandatory_bssid(priv,bssid,batch_mode);
  #line 5704 
  if (err != 0) 
                #line 5705 
                return err;
  #line 5707 
  if ((priv->config & 2UL) != 0UL) 
                                   #line 5708 
                                   err = ipw2100_set_essid(priv,(char *)(& priv->essid),(int)priv->essid_len,batch_mode); else 
                                                                    #line 5711 
                                                                    err = ipw2100_set_essid(priv,(char *)0,0,batch_mode);
  #line 5712 
  if (err != 0) 
                #line 5713 
                return err;
  #line 5715 
  err = ipw2100_configure_security(priv,batch_mode);
  #line 5716 
  if (err != 0) 
                #line 5717 
                return err;
  #line 5719 
  if ((priv->ieee)->iw_mode == 1) {
    #line 5720 
    err = ipw2100_set_ibss_beacon_interval(priv,priv->beacon_interval,batch_mode);
    #line 5724 
    if (err != 0) 
                  #line 5725 
                  return err;
    #line 5727 
    err = ipw2100_set_tx_power(priv,(unsigned int)priv->tx_power);
    #line 5728 
    if (err != 0) 
                  #line 5729 
                  return err;
  }
  #line 5739 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 5739 
    int tmp_4;
    #line 5739 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5739 
                                                             tmp_4 = 73; else 
                                                                    #line 5739 
                                                                    tmp_4 = 85;
    #line 5739 
    printk((char *)"\001",tmp_4,(char *)"ipw2100_adapter_setup");
    #line 5739 
    printk((char *)"exit\n");
  }
  #line 5741 
  return 0;
}

#line 5753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_set_address(struct net_device *dev, void *p)
{
  #line 5755 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 5756 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 5757 
  int err = 0;
  #line 5759 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 5760 
                                                      return -99;
  #line 5762 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 5764 
  priv->config |= 8UL;
  #line 5765 
  memcpy((void *)(& priv->mac_addr),(void *)(& addr->sa_data),6UL);
  #line 5767 
  err = ipw2100_set_mac_address(priv,0);
  #line 5768 
  if (err != 0) 
                #line 5769 
                goto done;
  #line 5771 
  priv->reset_backoff = 0LL;
  #line 5772 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 5773 
  ipw2100_reset_adapter(& priv->reset_work.work);
  #line 5774 
  return 0;
  #line 5776 
  done: 
        #line 5776 
  ;
  #line 5777 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 5778 
  return err;
}

#line 5781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_open(struct net_device *dev)
{
  #line 5784 
  unsigned long flags;
  #line 5783 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 5785 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 5785 
    int tmp_1;
    #line 5785 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5785 
                                                             tmp_1 = 73; else 
                                                                    #line 5785 
                                                                    tmp_1 = 85;
    #line 5785 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_open");
    #line 5785 
    printk((char *)"dev->open\n");
  }
  #line 5787 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 5788 
  if ((priv->status & 1024UL) != 0UL) {
    #line 5789 
    netif_carrier_on(dev);
    #line 5790 
    netif_start_queue(dev);
  }
  #line 5792 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 5794 
  return 0;
}

#line 5797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_close(struct net_device *dev)
{
  #line 5800 
  unsigned long flags;
  #line 5801 
  struct list_head *element;
  #line 5802 
  struct ipw2100_tx_packet *packet;
  #line 5799 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 5804 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 5804 
    int tmp_1;
    #line 5804 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5804 
                                                             tmp_1 = 73; else 
                                                                    #line 5804 
                                                                    tmp_1 = 85;
    #line 5804 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_close");
    #line 5804 
    printk((char *)"enter\n");
  }
  #line 5806 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 5808 
  if ((priv->status & 1024UL) != 0UL) 
                                      #line 5809 
                                      netif_carrier_off(dev);
  #line 5810 
  netif_stop_queue(dev);
  #line 5813 
  while (1) {
    #line 5813 
    if (! (list_empty(& priv->tx_pend_list) == 0)) 
                                                   #line 5813 
                                                   break;
    {
      #line 5815 
      void *__mptr;
      #line 5814 
      element = priv->tx_pend_list.next;
      #line 5815 
      __mptr = (void *)element;
      #line 5815 
      packet = ((struct ipw2100_tx_packet *)(__mptr + 18446744073709551576U));
      #line 5817 
      list_del(element);
      #line 5818 
      (priv->tx_pend_stat.value) --;
      #line 5818 
      ;
      #line 5818 
      if (priv->tx_pend_stat.value < priv->tx_pend_stat.lo) 
                                                            #line 5818 
                                                            priv->tx_pend_stat.lo = priv->tx_pend_stat.value;
      #line 5820 
      libipw_txb_free(packet->info.d_struct.txb);
      #line 5821 
      packet->info.d_struct.txb = (struct libipw_txb *)0;
      #line 5823 
      list_add_tail(element,& priv->tx_free_list);
      #line 5824 
      (priv->tx_free_stat.value) ++;
      #line 5824 
      ;
      #line 5824 
      if (priv->tx_free_stat.value > priv->tx_free_stat.hi) 
                                                            #line 5824 
                                                            priv->tx_free_stat.hi = priv->tx_free_stat.value;
    }
  }
  #line 5826 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 5828 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 5828 
    int tmp_5;
    #line 5828 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5828 
                                                             tmp_5 = 73; else 
                                                                    #line 5828 
                                                                    tmp_5 = 85;
    #line 5828 
    printk((char *)"\001",tmp_5,(char *)"ipw2100_close");
    #line 5828 
    printk((char *)"exit\n");
  }
  #line 5830 
  return 0;
}

#line 5836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_tx_timeout(struct net_device *dev)
{
  #line 5838 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 5840 
  (dev->stats.tx_errors) ++;
  #line 5843 
  if ((priv->ieee)->iw_mode == 6) 
                                  #line 5844 
                                  return;
  #line 5847 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 5847 
    int tmp_1;
    #line 5847 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5847 
                                                             tmp_1 = 73; else 
                                                                    #line 5847 
                                                                    tmp_1 = 85;
    #line 5847 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_tx_timeout");
    #line 5847 
    printk((char *)"%s: TX timed out.  Scheduling firmware restart.\n",(char *)(& dev->name));
  }
  #line 5849 
  schedule_reset(priv);
  #line 5850 
  return;
}

#line 5852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wpa_enable(struct ipw2100_priv *priv, int value)
{
  #line 5856 
  (priv->ieee)->wpa_enabled = value;
  #line 5857 
  return 0;
}

#line 5860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wpa_set_auth_algs(struct ipw2100_priv *priv, int value)
{
  #line 5863 
  struct libipw_device *ieee = priv->ieee;
  #line 5864 
  struct libipw_security sec = {.active_key = (unsigned short)0, .enabled = (unsigned short)0, .unicast_uses_group = (unsigned short)0, .encrypt = (unsigned short)0, .auth_mode = (unsigned char)0, .encode_alg = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .key_sizes = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .keys = {{(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}, .level = (unsigned char)0, .flags = (unsigned short)32U};
  #line 5867 
  int ret = 0;
  #line 5869 
  if ((value & 2) != 0) {
    #line 5870 
    sec.auth_mode = (unsigned char)1U;
    #line 5871 
    ieee->open_wep = 0;
  }
  else 
    #line 5872 
    if ((value & 1) != 0) {
      #line 5873 
      sec.auth_mode = (unsigned char)0U;
      #line 5874 
      ieee->open_wep = 1;
    }
    else 
      #line 5875 
      if ((value & 4) != 0) {
        #line 5876 
        sec.auth_mode = (unsigned char)128U;
        #line 5877 
        ieee->open_wep = 1;
      }
      else 
           #line 5879 
           return -22;
  #line 5881 
  if (ieee->set_security != (void (*)(struct net_device *, struct libipw_security *))0) 
    #line 5882 
    (*(ieee->set_security))(ieee->dev,& sec); else 
                                                   #line 5884 
                                                   ret = -95;
  #line 5886 
  return ret;
}

#line 5889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_wpa_assoc_frame(struct ipw2100_priv *priv, char *wpa_ie, int wpa_ie_len)
{
  #line 5893 
  struct ipw2100_wpa_assoc_frame frame;
  #line 5895 
  frame.fixed_ie_mask = (unsigned short)0U;
  #line 5898 
  memcpy((void *)(& frame.var_ie),(void *)wpa_ie,(unsigned long)wpa_ie_len);
  #line 5899 
  frame.var_ie_len = (unsigned int)wpa_ie_len;
  #line 5902 
  ipw2100_wpa_enable(priv,1);
  #line 5903 
  ipw2100_set_wpa_ie(priv,& frame,0);
  #line 5904 
  return;
}

#line 5906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw_ethtool_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 5910 
  char fw_ver[64U];
  #line 5910 
  char ucode_ver[64U];
  #line 5909 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 5912 
  strlcpy((char *)(& info->driver),(char *)"ipw2100",32UL);
  #line 5913 
  strlcpy((char *)(& info->version),(char *)"git-1.2.2",32UL);
  #line 5915 
  ipw2100_get_fwversion(priv,(char *)(& fw_ver),64UL);
  #line 5916 
  ipw2100_get_ucodeversion(priv,(char *)(& ucode_ver),64UL);
  #line 5918 
  snprintf((char *)(& info->fw_version),32UL,(char *)"%s:%d:%s",(char *)(& fw_ver),priv->eeprom_version,(char *)(& ucode_ver));
  #line 5921 
  ;
  #line 5921 
  strlcpy((char *)(& info->bus_info),pci_name(priv->pci_dev),32UL);
  #line 5922 
  return;
}

#line 5925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static u32 ipw2100_ethtool_get_link(struct net_device *dev)
{
  #line 5927 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 5928 
  return (unsigned int)(priv->status >> 10) & 1U;
}

#line 5931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct ethtool_ops ipw2100_ethtool_ops = {.get_drvinfo = & ipw_ethtool_get_drvinfo, .get_link = & ipw2100_ethtool_get_link};
#line 5936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_hang_check(struct work_struct *work)
{
  #line 5939 
  void *__mptr;
  #line 5940 
  unsigned long flags;
  #line 5939 
  __mptr = (void *)work;
  #line 5938 
  struct ipw2100_priv *priv = ((struct ipw2100_priv *)(__mptr + 18446744073709549976U));
  #line 5941 
  u32 rtc = 2779096485U;
  #line 5942 
  u32 len = 4U;
  #line 5943 
  int restart = 0;
  #line 5945 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 5947 
  if (priv->fatal_error != 0U) {
    #line 5949 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 5949 
      int tmp_1;
      #line 5949 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5949 
                                                               tmp_1 = 73; else 
                                                                    #line 5949 
                                                                    tmp_1 = 85;
      #line 5949 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_hang_check");
      #line 5949 
      printk((char *)"%s: Hardware fatal error detected.\n",(char *)(& (priv->net_dev)->name));
    }
    #line 5952 
    restart = 1;
  }
  else {
    #line 5953 
    if (ipw2100_get_ordinal(priv,190U,(void *)(& rtc),& len) != 0) 
                                                                   #line 5953 
                                                                   goto _LOR;
    else 
      #line 5953 
      if (priv->last_rtc == rtc) {
        #line 5953 
        _LOR: {
                #line 5956 
                if ((ipw2100_debug_level & 4U) != 0U) {
                  #line 5956 
                  int tmp_3;
                  #line 5956 
                  if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                    #line 5956 
                    tmp_3 = 73; else 
                                     #line 5956 
                                     tmp_3 = 85;
                  #line 5956 
                  printk((char *)"\001",tmp_3,(char *)"ipw2100_hang_check");
                  #line 5956 
                  printk((char *)"%s: Firmware RTC stalled.\n",(char *)(& (priv->net_dev)->name));
                }
                #line 5959 
                restart = 1;
              }
      }
  }
  #line 5962 
  if (restart != 0) {
    #line 5964 
    priv->stop_hang_check = 1;
    #line 5965 
    (priv->hangs) ++;
    #line 5968 
    schedule_reset(priv);
  }
  #line 5971 
  priv->last_rtc = rtc;
  #line 5973 
  if (priv->stop_hang_check == 0) 
                                  #line 5974 
                                  cif_schedule_delayed_work(& priv->hang_check,125UL);
  #line 5976 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 5977 
  return;
}

#line 5979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_rf_kill(struct work_struct *work)
{
  #line 5982 
  void *__mptr;
  #line 5983 
  unsigned long flags;
  #line 5982 
  __mptr = (void *)work;
  #line 5981 
  struct ipw2100_priv *priv = ((struct ipw2100_priv *)(__mptr + 18446744073709549792U));
  #line 5985 
  cif___ldv_spin_lock_low_lock_of_ipw2100_priv(& priv->low_lock);
  #line 5987 
  if (rf_kill_active(priv) != 0) {
    #line 5988 
    if ((ipw2100_debug_level & 131072U) != 0U) {
      #line 5988 
      int tmp_1;
      #line 5988 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5988 
                                                               tmp_1 = 73; else 
                                                                    #line 5988 
                                                                    tmp_1 = 85;
      #line 5988 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_rf_kill");
      #line 5988 
      printk((char *)"RF Kill active, rescheduling GPIO check\n");
    }
    #line 5989 
    if (priv->stop_rf_kill == 0) {
      #line 5990 
      ;
      #line 5990 
      cif_schedule_delayed_work(& priv->rf_kill,round_jiffies_relative(250UL));
    }
    #line 5992 
    goto exit_unlock;
  }
  #line 5997 
  if ((priv->status & 12288UL) == 0UL) {
    #line 5998 
    if ((ipw2100_debug_level & 131072U) != 0U) {
      #line 5998 
      int tmp_5;
      #line 5998 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5998 
                                                               tmp_5 = 73; else 
                                                                    #line 5998 
                                                                    tmp_5 = 85;
      #line 5998 
      printk((char *)"\001",tmp_5,(char *)"ipw2100_rf_kill");
      #line 5998 
      printk((char *)"HW RF Kill no longer active, restarting ");
    }
    #line 6000 
    schedule_reset(priv);
  }
  else 
    #line 6002 
    if ((ipw2100_debug_level & 131072U) != 0U) {
      #line 6002 
      int tmp_7;
      #line 6002 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6002 
                                                               tmp_7 = 73; else 
                                                                    #line 6002 
                                                                    tmp_7 = 85;
      #line 6002 
      printk((char *)"\001",tmp_7,(char *)"ipw2100_rf_kill");
      #line 6002 
      printk((char *)"HW RF Kill deactivated.  SW RF Kill still ");
    }
  #line 6005 
  exit_unlock: 
               #line 6005 
  ;
  #line 6006 
  cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(& priv->low_lock,flags);
  #line 6007 
  return;
}

#line 6011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct net_device_ops ipw2100_netdev_ops = {.ndo_open = & ipw2100_open, .ndo_stop = & ipw2100_close, .ndo_start_xmit = & libipw_xmit, .ndo_set_mac_address = & ipw2100_set_address, .ndo_validate_addr = & eth_validate_addr, .ndo_tx_timeout = & ipw2100_tx_timeout};
#line 6022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct net_device *ipw2100_alloc_device(struct pci_dev *pci_dev, void *ioaddr)
{
  #line 6025 
  struct ipw2100_priv *priv;
  #line 6026 
  struct net_device *dev;
  #line 6028 
  dev = alloc_libipw(2712,0);
  #line 6029 
  if (dev == (struct net_device *)0) 
                                     #line 6030 
                                     return (struct net_device *)0;
  #line 6031 
  priv = (struct ipw2100_priv *)libipw_priv(dev);
  #line 6032 
  priv->ieee = (struct libipw_device *)netdev_priv(dev);
  #line 6033 
  priv->pci_dev = pci_dev;
  #line 6034 
  priv->net_dev = dev;
  #line 6035 
  priv->ioaddr = ioaddr;
  #line 6037 
  (priv->ieee)->hard_start_xmit = & ipw2100_tx;
  #line 6038 
  (priv->ieee)->set_security = & shim__set_security;
  #line 6040 
  (priv->ieee)->perfect_rssi = -20;
  #line 6041 
  (priv->ieee)->worst_rssi = -85;
  #line 6043 
  dev->netdev_ops = & ipw2100_netdev_ops;
  #line 6044 
  dev->ethtool_ops = & ipw2100_ethtool_ops;
  #line 6045 
  dev->wireless_handlers = & ipw2100_wx_handler_def;
  #line 6046 
  priv->wireless_data.libipw = priv->ieee;
  #line 6047 
  dev->wireless_data = & priv->wireless_data;
  #line 6048 
  dev->watchdog_timeo = 750;
  #line 6049 
  dev->irq = 0;
  #line 6050 
  dev->min_mtu = 68U;
  #line 6051 
  dev->max_mtu = 2304U;
  #line 6063 
  priv->power_mode = 6;
  #line 6066 
  priv->config |= 2048UL;
  #line 6068 
  (priv->ieee)->wpa_enabled = 0;
  #line 6069 
  (priv->ieee)->drop_unencrypted = 0;
  #line 6070 
  (priv->ieee)->privacy_invoked = 0;
  #line 6071 
  (priv->ieee)->ieee802_1x = 1;
  #line 6074 
  switch (network_mode) {
    #line 6075 
    case 1: 
            #line 6075 
    ;
    #line 6076 
    (priv->ieee)->iw_mode = 1;
    #line 6077 
    break;
    #line 6079 
    case 2: 
            #line 6079 
    ;
    #line 6080 
    (priv->ieee)->iw_mode = 6;
    #line 6081 
    break;
    #line 6083 
    default: 
             #line 6083 
    ;
    #line 6084 
    case 0: 
            #line 6084 
    ;
    #line 6085 
    (priv->ieee)->iw_mode = 2;
    #line 6086 
    break;
  }
  #line 6089 
  if (disable == 1) 
                    #line 6090 
                    priv->status |= 8192UL;
  #line 6092 
  if ((unsigned int)channel + 4294967295U <= 13U) {
    #line 6094 
    priv->config |= 1UL;
    #line 6095 
    priv->channel = (unsigned char)channel;
  }
  #line 6098 
  if (associate != 0) 
                      #line 6099 
                      priv->config |= 64UL;
  #line 6101 
  priv->beacon_interval = 100U;
  #line 6102 
  priv->short_retry_limit = 7;
  #line 6103 
  priv->long_retry_limit = 4;
  #line 6104 
  priv->rts_threshold = 2147484648U;
  #line 6105 
  priv->frag_threshold = 2147485994U;
  #line 6106 
  priv->tx_power = 32;
  #line 6107 
  priv->tx_rates = 15U;
  #line 6109 
  strcpy((char *)(& priv->nick),(char *)"ipw2100");
  #line 6111 
  spinlock_check(& priv->low_lock);
  {
    #line 6111 
    struct lock_class_key __key;
    #line 6111 
    __raw_spin_lock_init(& priv->low_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&priv->low_lock)->rlock",& __key);
  }
  {
    #line 6112 
    struct lock_class_key __key_0;
    #line 6112 
    __mutex_init(& priv->action_mutex,(char *)"&priv->action_mutex",& __key_0);
  }
  {
    #line 6113 
    struct lock_class_key __key_1;
    #line 6113 
    __mutex_init(& priv->adapter_mutex,(char *)"&priv->adapter_mutex",& __key_1);
  }
  {
    #line 6115 
    struct lock_class_key __key_2;
    #line 6115 
    __init_waitqueue_head(& priv->wait_command_queue,(char *)"&priv->wait_command_queue",& __key_2);
  }
  #line 6117 
  netif_carrier_off(dev);
  #line 6119 
  INIT_LIST_HEAD(& priv->msg_free_list);
  #line 6120 
  INIT_LIST_HEAD(& priv->msg_pend_list);
  {
    #line 6121 
    priv->msg_free_stat.hi = 0;
    #line 6121 
    priv->msg_free_stat.value = 0;
    #line 6121 
    priv->msg_free_stat.lo = 2147483647;
  }
  {
    #line 6122 
    priv->msg_pend_stat.hi = 0;
    #line 6122 
    priv->msg_pend_stat.value = 0;
    #line 6122 
    priv->msg_pend_stat.lo = 2147483647;
  }
  #line 6124 
  INIT_LIST_HEAD(& priv->tx_free_list);
  #line 6125 
  INIT_LIST_HEAD(& priv->tx_pend_list);
  {
    #line 6126 
    priv->tx_free_stat.hi = 0;
    #line 6126 
    priv->tx_free_stat.value = 0;
    #line 6126 
    priv->tx_free_stat.lo = 2147483647;
  }
  {
    #line 6127 
    priv->tx_pend_stat.hi = 0;
    #line 6127 
    priv->tx_pend_stat.value = 0;
    #line 6127 
    priv->tx_pend_stat.lo = 2147483647;
  }
  #line 6129 
  INIT_LIST_HEAD(& priv->fw_pend_list);
  {
    #line 6130 
    priv->fw_pend_stat.hi = 0;
    #line 6130 
    priv->fw_pend_stat.value = 0;
    #line 6130 
    priv->fw_pend_stat.lo = 2147483647;
  }
  {
    #line 6132 
    struct lock_class_key __key_3;
    #line 6132 
    __init_work(& priv->reset_work.work,0);
    #line 6132 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 6132 
    priv->reset_work.work.data = __constr_expr_41;
    #line 6132 
    lockdep_init_map(& priv->reset_work.work.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 6132 
    INIT_LIST_HEAD(& priv->reset_work.work.entry);
    #line 6132 
    priv->reset_work.work.func = & ipw2100_reset_adapter;
  }
  {
    #line 6132 
    struct lock_class_key __key_4;
    #line 6132 
    init_timer_key(& priv->reset_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->reset_work)->timer",& __key_4);
  }
  {
    #line 6133 
    struct lock_class_key __key_5;
    #line 6133 
    __init_work(& priv->security_work.work,0);
    #line 6133 
    atomic_long_t __constr_expr_42 = {.counter = 137438953408LL};
    #line 6133 
    priv->security_work.work.data = __constr_expr_42;
    #line 6133 
    lockdep_init_map(& priv->security_work.work.lockdep_map,(char *)"(work_completion)",& __key_5,0);
    #line 6133 
    INIT_LIST_HEAD(& priv->security_work.work.entry);
    #line 6133 
    priv->security_work.work.func = & ipw2100_security_work;
  }
  {
    #line 6133 
    struct lock_class_key __key_6;
    #line 6133 
    init_timer_key(& priv->security_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->security_work)->timer",& __key_6);
  }
  {
    #line 6134 
    struct lock_class_key __key_7;
    #line 6134 
    __init_work(& priv->wx_event_work.work,0);
    #line 6134 
    atomic_long_t __constr_expr_43 = {.counter = 137438953408LL};
    #line 6134 
    priv->wx_event_work.work.data = __constr_expr_43;
    #line 6134 
    lockdep_init_map(& priv->wx_event_work.work.lockdep_map,(char *)"(work_completion)",& __key_7,0);
    #line 6134 
    INIT_LIST_HEAD(& priv->wx_event_work.work.entry);
    #line 6134 
    priv->wx_event_work.work.func = & ipw2100_wx_event_work;
  }
  {
    #line 6134 
    struct lock_class_key __key_8;
    #line 6134 
    init_timer_key(& priv->wx_event_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->wx_event_work)->timer",& __key_8);
  }
  {
    #line 6135 
    struct lock_class_key __key_9;
    #line 6135 
    __init_work(& priv->hang_check.work,0);
    #line 6135 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 6135 
    priv->hang_check.work.data = __constr_expr_44;
    #line 6135 
    lockdep_init_map(& priv->hang_check.work.lockdep_map,(char *)"(work_completion)",& __key_9,0);
    #line 6135 
    INIT_LIST_HEAD(& priv->hang_check.work.entry);
    #line 6135 
    priv->hang_check.work.func = & ipw2100_hang_check;
  }
  {
    #line 6135 
    struct lock_class_key __key_10;
    #line 6135 
    init_timer_key(& priv->hang_check.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->hang_check)->timer",& __key_10);
  }
  {
    #line 6136 
    struct lock_class_key __key_11;
    #line 6136 
    __init_work(& priv->rf_kill.work,0);
    #line 6136 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 6136 
    priv->rf_kill.work.data = __constr_expr_45;
    #line 6136 
    lockdep_init_map(& priv->rf_kill.work.lockdep_map,(char *)"(work_completion)",& __key_11,0);
    #line 6136 
    INIT_LIST_HEAD(& priv->rf_kill.work.entry);
    #line 6136 
    priv->rf_kill.work.func = & ipw2100_rf_kill;
  }
  {
    #line 6136 
    struct lock_class_key __key_12;
    #line 6136 
    init_timer_key(& priv->rf_kill.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->rf_kill)->timer",& __key_12);
  }
  {
    #line 6137 
    struct lock_class_key __key_13;
    #line 6137 
    __init_work(& priv->scan_event.work,0);
    #line 6137 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 6137 
    priv->scan_event.work.data = __constr_expr_46;
    #line 6137 
    lockdep_init_map(& priv->scan_event.work.lockdep_map,(char *)"(work_completion)",& __key_13,0);
    #line 6137 
    INIT_LIST_HEAD(& priv->scan_event.work.entry);
    #line 6137 
    priv->scan_event.work.func = & ipw2100_scan_event;
  }
  {
    #line 6137 
    struct lock_class_key __key_14;
    #line 6137 
    init_timer_key(& priv->scan_event.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->scan_event)->timer",& __key_14);
  }
  #line 6139 
  cif_tasklet_init(& priv->irq_tasklet,(void (*)(unsigned long ))(& ipw2100_irq_tasklet),(unsigned long)priv);
  #line 6143 
  priv->stop_rf_kill = 1;
  #line 6144 
  priv->stop_hang_check = 1;
  #line 6146 
  return dev;
}

#line 6149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_pci_init_one(struct pci_dev *pci_dev, struct pci_device_id *ent)
{
  #line 6152 
  void *ioaddr;
  #line 6157 
  u32 val;
  #line 6153 
  struct net_device *dev = (struct net_device *)0;
  #line 6154 
  struct ipw2100_priv *priv = (struct ipw2100_priv *)0;
  #line 6155 
  int err = 0;
  #line 6156 
  int registered = 0;
  #line 6159 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 6159 
    int tmp_0;
    #line 6159 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6159 
                                                             tmp_0 = 73; else 
                                                                    #line 6159 
                                                                    tmp_0 = 85;
    #line 6159 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_pci_init_one");
    #line 6159 
    printk((char *)"enter\n");
  }
  #line 6161 
  if ((pci_dev->resource[0].flags & 512UL) == 0UL) {
    #line 6162 
    if ((ipw2100_debug_level & 4U) != 0U) {
      #line 6162 
      int tmp_2;
      #line 6162 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6162 
                                                               tmp_2 = 73; else 
                                                                    #line 6162 
                                                                    tmp_2 = 85;
      #line 6162 
      printk((char *)"\001",tmp_2,(char *)"ipw2100_pci_init_one");
      #line 6162 
      printk((char *)"weird - resource type is not memory\n");
    }
    #line 6163 
    err = -19;
    #line 6164 
    goto out;
  }
  #line 6167 
  ioaddr = pci_iomap(pci_dev,0,0UL);
  #line 6168 
  if (ioaddr == (void *)0) {
    #line 6169 
    printk((char *)"\001");
    #line 6171 
    err = -5;
    #line 6172 
    goto fail;
  }
  #line 6176 
  dev = ipw2100_alloc_device(pci_dev,ioaddr);
  #line 6177 
  if (dev == (struct net_device *)0) {
    #line 6178 
    printk((char *)"\001");
    #line 6180 
    err = -12;
    #line 6181 
    goto fail;
  }
  #line 6185 
  err = pci_enable_device(pci_dev);
  #line 6186 
  if (err != 0) {
    #line 6187 
    printk((char *)"\001");
    #line 6189 
    return err;
  }
  #line 6192 
  priv = (struct ipw2100_priv *)libipw_priv(dev);
  #line 6194 
  pci_set_master(pci_dev);
  #line 6195 
  pci_set_drvdata(pci_dev,(void *)priv);
  #line 6197 
  err = pci_set_dma_mask(pci_dev,4294967295ULL);
  #line 6198 
  if (err != 0) {
    #line 6199 
    printk((char *)"\001");
    #line 6201 
    pci_disable_device(pci_dev);
    #line 6202 
    return err;
  }
  #line 6205 
  err = pci_request_regions(pci_dev,(char *)"ipw2100");
  #line 6206 
  if (err != 0) {
    #line 6207 
    printk((char *)"\001");
    #line 6209 
    pci_disable_device(pci_dev);
    #line 6210 
    return err;
  }
  #line 6215 
  pci_read_config_dword(pci_dev,64,& val);
  #line 6216 
  if ((val & 65280U) != 0U) 
                            #line 6217 
                            pci_write_config_dword(pci_dev,64,val & 4294902015U);
  #line 6219 
  if (! ipw2100_hw_is_adapter_in_system(dev)) {
    #line 6220 
    printk((char *)"\001");
    #line 6222 
    err = -19;
    #line 6223 
    goto fail;
  }
  #line 6226 
  dev->dev.parent = & pci_dev->dev;
  #line 6229 
  priv->status |= 2048UL;
  #line 6230 
  ipw2100_disable_interrupts(priv);
  #line 6233 
  if (ipw2100_queues_allocate(priv) != 0) {
    #line 6234 
    printk((char *)"\001");
    #line 6236 
    err = -12;
    #line 6237 
    goto fail;
  }
  #line 6239 
  ipw2100_queues_initialize(priv);
  #line 6241 
  err = cif_request_irq(pci_dev->irq,& ipw2100_interrupt,128UL,(char *)(& dev->name),(void *)priv);
  #line 6243 
  if (err != 0) {
    #line 6244 
    printk((char *)"\001",pci_dev->irq);
    #line 6246 
    goto fail;
  }
  #line 6248 
  dev->irq = (int)pci_dev->irq;
  #line 6250 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 6250 
    int tmp_7;
    #line 6250 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6250 
                                                             tmp_7 = 73; else 
                                                                    #line 6250 
                                                                    tmp_7 = 85;
    #line 6250 
    printk((char *)"\001",tmp_7,(char *)"ipw2100_pci_init_one");
    #line 6250 
    printk((char *)"Attempting to register device...\n");
  }
  #line 6252 
  printk((char *)"\001");
  #line 6255 
  err = ipw2100_up(priv,1);
  #line 6256 
  if (err != 0) 
                #line 6257 
                goto fail;
  #line 6259 
  err = ipw2100_wdev_init(dev);
  #line 6260 
  if (err != 0) 
                #line 6261 
                goto fail;
  #line 6262 
  registered = 1;
  #line 6269 
  err = cif_register_netdev(dev);
  #line 6270 
  if (err != 0) {
    #line 6271 
    printk((char *)"\001");
    #line 6273 
    goto fail;
  }
  #line 6275 
  registered = 2;
  #line 6277 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6279 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 6279 
    int tmp_9;
    #line 6279 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6279 
                                                             tmp_9 = 73; else 
                                                                    #line 6279 
                                                                    tmp_9 = 85;
    #line 6279 
    printk((char *)"\001",tmp_9,(char *)"ipw2100_pci_init_one");
    #line 6279 
    ;
    #line 6279 
    printk((char *)"%s: Bound to %s\n",(char *)(& dev->name),pci_name(pci_dev));
  }
  #line 6282 
  err = sysfs_create_group(& pci_dev->dev.kobj,& ipw2100_attribute_group);
  #line 6283 
  if (err != 0) 
                #line 6284 
                goto fail_unlock;
  #line 6288 
  if ((priv->status & 12288UL) == 0UL) {
    #line 6290 
    if (ipw2100_enable_adapter(priv) != 0) {
      #line 6291 
      printk((char *)"\001",(char *)(& (priv->net_dev)->name));
      #line 6294 
      ipw2100_hw_stop_adapter(priv);
      #line 6295 
      err = -5;
      #line 6296 
      goto fail_unlock;
    }
    #line 6300 
    ipw2100_set_scan_options(priv);
    #line 6301 
    ipw2100_start_scan(priv);
  }
  #line 6304 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 6304 
    int tmp_13;
    #line 6304 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6304 
                                                             tmp_13 = 73; else 
                                                                    #line 6304 
                                                                    tmp_13 = 85;
    #line 6304 
    printk((char *)"\001",tmp_13,(char *)"ipw2100_pci_init_one");
    #line 6304 
    printk((char *)"exit\n");
  }
  #line 6306 
  priv->status |= 32UL;
  #line 6308 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6309 
  out: 
       #line 6309 
  ;
  #line 6310 
  return err;
  #line 6312 
  fail_unlock: 
               #line 6312 
  ;
  #line 6313 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6314 
  fail: 
        #line 6314 
  ;
  #line 6315 
  if (dev != (struct net_device *)0) {
    #line 6316 
    if (registered > 1) 
                        #line 6317 
                        cif_unregister_netdev(dev);
    #line 6319 
    if (registered != 0) {
      #line 6320 
      wiphy_unregister((priv->ieee)->wdev.wiphy);
      #line 6321 
      kfree((void *)(priv->ieee)->bg_band.channels);
    }
    #line 6324 
    ipw2100_hw_stop_adapter(priv);
    #line 6326 
    ipw2100_disable_interrupts(priv);
    #line 6328 
    if (dev->irq != 0) 
                       #line 6329 
                       cif_free_irq((unsigned int)dev->irq,(void *)priv);
    #line 6331 
    ipw2100_kill_works(priv);
    #line 6334 
    ipw2100_queues_free(priv);
    #line 6335 
    sysfs_remove_group(& pci_dev->dev.kobj,& ipw2100_attribute_group);
    #line 6338 
    free_libipw(dev,0);
  }
  #line 6341 
  pci_iounmap(pci_dev,ioaddr);
  #line 6343 
  pci_release_regions(pci_dev);
  #line 6344 
  pci_disable_device(pci_dev);
  #line 6345 
  goto out;
}

#line 6348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_pci_remove_one(struct pci_dev *pci_dev)
{
  #line 6350 
  struct ipw2100_priv *priv = pci_get_drvdata(pci_dev);
  #line 6351 
  struct net_device *dev = priv->net_dev;
  #line 6353 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6355 
  priv->status &= 18446744073709551583UL;
  #line 6357 
  sysfs_remove_group(& pci_dev->dev.kobj,& ipw2100_attribute_group);
  #line 6360 
  if (ipw2100_firmware.version != 0) 
                                     #line 6361 
                                     ipw2100_release_firmware(priv,& ipw2100_firmware);
  #line 6364 
  ipw2100_down(priv);
  #line 6368 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6374 
  cif_unregister_netdev(dev);
  #line 6376 
  ipw2100_kill_works(priv);
  #line 6378 
  ipw2100_queues_free(priv);
  #line 6381 
  ipw2100_snapshot_free(priv);
  #line 6383 
  cif_free_irq((unsigned int)dev->irq,(void *)priv);
  #line 6385 
  pci_iounmap(pci_dev,priv->ioaddr);
  #line 6388 
  wiphy_unregister((priv->ieee)->wdev.wiphy);
  #line 6389 
  kfree((void *)(priv->ieee)->bg_band.channels);
  #line 6390 
  free_libipw(dev,0);
  #line 6392 
  pci_release_regions(pci_dev);
  #line 6393 
  pci_disable_device(pci_dev);
  #line 6395 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 6395 
    int tmp_1;
    #line 6395 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6395 
                                                             tmp_1 = 73; else 
                                                                    #line 6395 
                                                                    tmp_1 = 85;
    #line 6395 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_pci_remove_one");
    #line 6395 
    printk((char *)"exit\n");
  }
  #line 6397 
  return;
}

#line 6399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_suspend(struct pci_dev *pci_dev, pm_message_t state)
{
  #line 6401 
  struct ipw2100_priv *priv = pci_get_drvdata(pci_dev);
  #line 6402 
  struct net_device *dev = priv->net_dev;
  #line 6404 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 6404 
    int tmp_1;
    #line 6404 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6404 
                                                             tmp_1 = 73; else 
                                                                    #line 6404 
                                                                    tmp_1 = 85;
    #line 6404 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_suspend");
    #line 6404 
    printk((char *)"%s: Going into suspend...\n",(char *)(& dev->name));
  }
  #line 6406 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6407 
  if ((priv->status & 32UL) != 0UL) 
                                    #line 6409 
                                    ipw2100_down(priv);
  #line 6413 
  netif_device_detach(dev);
  #line 6415 
  pci_save_state(pci_dev);
  #line 6416 
  pci_disable_device(pci_dev);
  #line 6417 
  pci_set_power_state(pci_dev,3);
  #line 6419 
  priv->suspend_at = ktime_get_boottime_seconds();
  #line 6421 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6423 
  return 0;
}

#line 6426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_resume(struct pci_dev *pci_dev)
{
  #line 6430 
  int err;
  #line 6431 
  u32 val;
  #line 6428 
  struct ipw2100_priv *priv = pci_get_drvdata(pci_dev);
  #line 6429 
  struct net_device *dev = priv->net_dev;
  #line 6436 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6438 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 6438 
    int tmp_1;
    #line 6438 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6438 
                                                             tmp_1 = 73; else 
                                                                    #line 6438 
                                                                    tmp_1 = 85;
    #line 6438 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_resume");
    #line 6438 
    printk((char *)"%s: Coming out of suspend...\n",(char *)(& dev->name));
  }
  #line 6440 
  pci_set_power_state(pci_dev,0);
  #line 6441 
  err = pci_enable_device(pci_dev);
  #line 6442 
  if (err != 0) {
    #line 6443 
    printk((char *)"\001",(char *)(& dev->name));
    #line 6445 
    cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
    #line 6446 
    return err;
  }
  #line 6448 
  pci_restore_state(pci_dev);
  #line 6456 
  pci_read_config_dword(pci_dev,64,& val);
  #line 6457 
  if ((val & 65280U) != 0U) 
                            #line 6458 
                            pci_write_config_dword(pci_dev,64,val & 4294902015U);
  #line 6462 
  netif_device_attach(dev);
  #line 6464 
  priv->suspend_time = ktime_get_boottime_seconds() - priv->suspend_at;
  #line 6467 
  if ((priv->status & 8192UL) == 0UL) 
                                      #line 6468 
                                      ipw2100_up(priv,0);
  #line 6470 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6472 
  return 0;
}

#line 6476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_shutdown(struct pci_dev *pci_dev)
{
  #line 6478 
  struct ipw2100_priv *priv = pci_get_drvdata(pci_dev);
  #line 6481 
  ipw2100_down(priv);
  #line 6483 
  pci_disable_device(pci_dev);
  #line 6484 
  return;
}

#line 6488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct pci_device_id ipw2100_pci_id_table[41U] = {{.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9504U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9505U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9508U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9509U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9510U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9506U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9507U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9511U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9512U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9513U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9515U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9516U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9517U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9552U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9553U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9555U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9556U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9557U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9568U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9570U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9571U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9569U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9573U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9574U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9575U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9584U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9600U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9602U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9603U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9601U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9605U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9606U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9607U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9616U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9618U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9617U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9619U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9622U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9624U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9632U}};
#line 6538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
struct pci_device_id __mod_pci__ipw2100_pci_id_table_device_table[41U];
#line 6540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct pci_driver ipw2100_pci_driver = {.name = (char *)"ipw2100", .id_table = (struct pci_device_id *)(& ipw2100_pci_id_table), .probe = & ipw2100_pci_init_one, .remove = & ipw2100_pci_remove_one, .suspend = & ipw2100_suspend, .resume = & ipw2100_resume, .shutdown = & ipw2100_shutdown};
#line 6561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_init(void)
{
  #line 6563 
  int ret;
  #line 6565 
  printk((char *)"\001",(char *)"Intel(R) PRO/Wireless 2100 Network Driver",(char *)"git-1.2.2");
  #line 6566 
  printk((char *)"\001",(char *)"Copyright(c) 2003-2006 Intel Corporation");
  #line 6568 
  pm_qos_add_request(& ipw2100_pm_qos_req,1,-1);
  #line 6571 
  ret = cif___pci_register_driver(& ipw2100_pci_driver,& __this_module,(char *)"ipw2100");
  #line 6572 
  if (ret != 0) 
                #line 6573 
                goto out;
  #line 6576 
  ipw2100_debug_level = (unsigned int)debug;
  #line 6577 
  ret = driver_create_file(& ipw2100_pci_driver.driver,& driver_attr_debug_level);
  #line 6581 
  out: 
       #line 6581 
  ;
  #line 6582 
  return ret;
}

#line 6588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_exit(void)
{
  #line 6592 
  driver_remove_file(& ipw2100_pci_driver.driver,& driver_attr_debug_level);
  #line 6595 
  cif_pci_unregister_driver(& ipw2100_pci_driver);
  #line 6596 
  pm_qos_remove_request(& ipw2100_pm_qos_req);
  #line 6597 
  return;
}

#line 6602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_name(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6610 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 6611 
  if ((priv->status & 1024UL) == 0UL) 
                                      #line 6612 
                                      strcpy((char *)(& wrqu->name),(char *)"unassociated"); else 
                                                                    #line 6614 
                                                                    snprintf((char *)(& wrqu->name),16UL,(char *)"IEEE 802.11b");
  #line 6616 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 6616 
    int tmp_1;
    #line 6616 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6616 
                                                             tmp_1 = 73; else 
                                                                    #line 6616 
                                                                    tmp_1 = 85;
    #line 6616 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_name");
    #line 6616 
    printk((char *)"Name: %s\n",(char *)(& wrqu->name));
  }
  #line 6617 
  return 0;
}

#line 6620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_freq(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6624 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 6625 
  struct iw_freq *fwrq = & wrqu->freq;
  #line 6626 
  int err = 0;
  #line 6628 
  if ((priv->ieee)->iw_mode == 2) 
                                  #line 6629 
                                  return -95;
  #line 6631 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6632 
  if ((priv->status & 32UL) == 0UL) {
    #line 6633 
    err = -5;
    #line 6634 
    goto done;
  }
  #line 6638 
  if ((int)fwrq->e == 1) 
    #line 6639 
    if ((unsigned int)fwrq->m + 4053767296U <= 7500000U) {
      #line 6640 
      int f = fwrq->m / 100000;
      #line 6641 
      int c = 0;
      #line 6643 
      while (c <= 13 && (long)f != ipw2100_frequencies[c]) 
                                                           #line 6645 
                                                           c ++;
      #line 6648 
      fwrq->e = (short)0;
      #line 6649 
      fwrq->m = c + 1;
    }
  #line 6653 
  if ((int)fwrq->e > 0 || fwrq->m > 1000) {
    #line 6654 
    err = -95;
    #line 6655 
    goto done;
  }
  else {
    #line 6657 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 6657 
      int tmp_1;
      #line 6657 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6657 
                                                               tmp_1 = 73; else 
                                                                    #line 6657 
                                                                    tmp_1 = 85;
      #line 6657 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_freq");
      #line 6657 
      printk((char *)"SET Freq/Channel -> %d\n",fwrq->m);
    }
    #line 6658 
    err = ipw2100_set_channel(priv,(unsigned int)fwrq->m,0);
  }
  #line 6661 
  done: 
        #line 6661 
  ;
  #line 6662 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6663 
  return err;
}

#line 6666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_freq(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6674 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 6676 
  wrqu->freq.e = (short)0;
  #line 6680 
  if ((priv->config & 1UL) != 0UL || (priv->status & 1024UL) != 0UL) 
    #line 6682 
    wrqu->freq.m = (int)priv->channel; else 
                                            #line 6684 
                                            wrqu->freq.m = 0;
  #line 6686 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 6686 
    int tmp_1;
    #line 6686 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6686 
                                                             tmp_1 = 73; else 
                                                                    #line 6686 
                                                                    tmp_1 = 85;
    #line 6686 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_freq");
    #line 6686 
    printk((char *)"GET Freq/Channel -> %d\n",(int)priv->channel);
  }
  #line 6687 
  return 0;
}

#line 6691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_mode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6695 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 6696 
  int err = 0;
  #line 6698 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 6698 
    int tmp_1;
    #line 6698 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6698 
                                                             tmp_1 = 73; else 
                                                                    #line 6698 
                                                                    tmp_1 = 85;
    #line 6698 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_mode");
    #line 6698 
    printk((char *)"SET Mode -> %d\n",wrqu->mode);
  }
  #line 6700 
  if (wrqu->mode == (unsigned int)(priv->ieee)->iw_mode) 
                                                         #line 6701 
                                                         return 0;
  #line 6703 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6704 
  if ((priv->status & 32UL) == 0UL) {
    #line 6705 
    err = -5;
    #line 6706 
    goto done;
  }
  #line 6709 
  switch (wrqu->mode) {
    #line 6711 
    case (__u32)6: 
                   #line 6711 
    ;
    #line 6712 
    err = ipw2100_switch_mode(priv,6U);
    #line 6713 
    break;
    #line 6715 
    case (__u32)1: 
                   #line 6715 
    ;
    #line 6716 
    err = ipw2100_switch_mode(priv,1U);
    #line 6717 
    break;
    #line 6718 
    case (__u32)2: 
                   #line 6718 
    ;
    #line 6719 
    case (__u32)0: 
                   #line 6719 
    ;
    #line 6720 
    default: 
             #line 6720 
    ;
    #line 6721 
    err = ipw2100_switch_mode(priv,2U);
    #line 6722 
    break;
  }
  #line 6725 
  done: 
        #line 6725 
  ;
  #line 6726 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6727 
  return err;
}

#line 6730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_mode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6738 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 6740 
  wrqu->mode = (unsigned int)(priv->ieee)->iw_mode;
  #line 6741 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 6741 
    int tmp_1;
    #line 6741 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6741 
                                                             tmp_1 = 73; else 
                                                                    #line 6741 
                                                                    tmp_1 = 85;
    #line 6741 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_mode");
    #line 6741 
    printk((char *)"GET Mode -> %d\n",wrqu->mode);
  }
  #line 6743 
  return 0;
}

#line 6749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static s32 timeout_duration[5U] = {350000, 250000, 75000, 37000, 25000};
#line 6757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static s32 period_duration[5U] = {400000, 700000, 1000000, 1000000, 1000000};
#line 6765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_range(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6775 
  u16 val;
  #line 6776 
  int i;
  #line 6776 
  int level;
  #line 6773 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 6774 
  struct iw_range *range = (struct iw_range *)extra;
  #line 6778 
  wrqu->data.length = (unsigned short)568U;
  #line 6779 
  memset((void *)range,0,568UL);
  #line 6790 
  range->throughput = 5000000U;
  #line 6794 
  range->max_qual.qual = (unsigned char)100U;
  #line 6796 
  range->max_qual.level = (unsigned char)0U;
  #line 6797 
  range->max_qual.noise = (unsigned char)0U;
  #line 6798 
  range->max_qual.updated = (unsigned char)7U;
  #line 6800 
  range->avg_qual.qual = (unsigned char)70U;
  #line 6802 
  range->avg_qual.level = (unsigned char)178U;
  #line 6803 
  range->avg_qual.noise = (unsigned char)0U;
  #line 6804 
  range->avg_qual.updated = (unsigned char)7U;
  #line 6806 
  range->num_bitrates = (unsigned char)4U;
  #line 6808 
  i = 0;
  #line 6808 
  while ((unsigned int)i <= 3U) {
    #line 6809 
    range->bitrate[i] = (int)ipw2100_bg_rates[i].bitrate * 100000;
    #line 6808 
    i ++;
  }
  #line 6812 
  range->min_rts = 1;
  #line 6813 
  range->max_rts = 2304;
  #line 6814 
  range->min_frag = 256;
  #line 6815 
  range->max_frag = 2346;
  #line 6817 
  range->min_pmp = period_duration[0];
  #line 6818 
  range->max_pmp = period_duration[4];
  #line 6819 
  range->min_pmt = timeout_duration[4];
  #line 6820 
  range->max_pmt = timeout_duration[0];
  #line 6823 
  range->pmp_flags = (unsigned short)4096U;
  #line 6825 
  range->pmt_flags = (unsigned short)8192U;
  #line 6827 
  range->pm_capa = (unsigned short)12288U;
  #line 6829 
  range->encoding_size[0] = (unsigned short)5U;
  #line 6830 
  range->encoding_size[1] = (unsigned short)13U;
  #line 6831 
  range->num_encoding_sizes = (unsigned char)2U;
  #line 6832 
  range->max_encoding_tokens = (unsigned char)4U;
  #line 6835 
  if ((priv->ieee)->iw_mode == 1) {
    #line 6836 
    range->txpower_capa = (unsigned short)0U;
    #line 6837 
    range->num_txpower = (unsigned char)8U;
    #line 6838 
    i = 0;
    #line 6838 
    level = 256;
    #line 6838 
    while (i <= 7) {
      #line 6843 
      range->txpower[i] = level / 16;
      #line 6839 
      i ++;
      #line 6840 
      level += -64;
    }
  }
  else {
    #line 6845 
    range->txpower_capa = (unsigned short)0U;
    #line 6846 
    range->num_txpower = (unsigned char)0U;
  }
  #line 6850 
  range->we_version_compiled = (unsigned char)22U;
  #line 6851 
  range->we_version_source = (unsigned char)18U;
  #line 6861 
  range->num_channels = (unsigned short)14U;
  #line 6863 
  val = (unsigned short)0U;
  #line 6864 
  i = 0;
  #line 6864 
  while ((unsigned int)i <= 13U) {
    #line 6867 
    range->freq[(int)val].i = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
    #line 6868 
    range->freq[(int)val].m = (int)(ipw2100_frequencies[i] * (long)100000U);
    #line 6869 
    range->freq[(int)val].e = (short)1;
    #line 6870 
    val = (u16)((int)val + 1);
    #line 6872 
    if ((unsigned int)val == 32U) 
                                  #line 6873 
                                  break;
    #line 6864 
    i ++;
  }
  #line 6875 
  range->num_frequency = (unsigned char)val;
  #line 6878 
  range->event_capa[0] = 69206096U;
  #line 6880 
  range->event_capa[1] = 1024U;
  #line 6882 
  range->enc_capa = 15U;
  #line 6885 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 6885 
    int tmp_1;
    #line 6885 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6885 
                                                             tmp_1 = 73; else 
                                                                    #line 6885 
                                                                    tmp_1 = 85;
    #line 6885 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_range");
    #line 6885 
    printk((char *)"GET Range\n");
  }
  #line 6887 
  return 0;
}

#line 6890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_wap(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6894 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 6895 
  int err = 0;
  #line 6898 
  if ((unsigned int)wrqu->ap_addr.sa_family != 1U) 
                                                   #line 6899 
                                                   return -22;
  #line 6901 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6902 
  if ((priv->status & 32UL) == 0UL) {
    #line 6903 
    err = -5;
    #line 6904 
    goto done;
  }
  #line 6907 
  if ((int)is_broadcast_ether_addr((u8 *)(& wrqu->ap_addr.sa_data)) != 0) 
    #line 6907 
    goto _LOR;
  else {
    #line 6907 
    if ((int)is_zero_ether_addr((u8 *)(& wrqu->ap_addr.sa_data)) != 0) {
      #line 6907 
      _LOR: {
              #line 6910 
              if ((ipw2100_debug_level & 8U) != 0U) {
                #line 6910 
                int tmp_1;
                #line 6910 
                if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                  #line 6910 
                  tmp_1 = 73; else 
                                   #line 6910 
                                   tmp_1 = 85;
                #line 6910 
                printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_wap");
                #line 6910 
                printk((char *)"exit - disable mandatory BSSID\n");
              }
              #line 6911 
              priv->config &= 18446744073709551611UL;
              #line 6912 
              err = ipw2100_set_mandatory_bssid(priv,(u8 *)0U,0);
              #line 6913 
              goto done;
            }
    }
  }
  #line 6916 
  priv->config |= 4UL;
  #line 6917 
  memcpy((void *)(& priv->mandatory_bssid_mac),(void *)(& wrqu->ap_addr.sa_data),6UL);
  #line 6919 
  err = ipw2100_set_mandatory_bssid(priv,(u8 *)(& wrqu->ap_addr.sa_data),0);
  #line 6921 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 6921 
    int tmp_5;
    #line 6921 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6921 
                                                             tmp_5 = 73; else 
                                                                    #line 6921 
                                                                    tmp_5 = 85;
    #line 6921 
    printk((char *)"\001",tmp_5,(char *)"ipw2100_wx_set_wap");
    #line 6921 
    printk((char *)"SET BSSID -> %pM\n",(char *)(& wrqu->ap_addr.sa_data));
  }
  #line 6923 
  done: 
        #line 6923 
  ;
  #line 6924 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6925 
  return err;
}

#line 6928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_wap(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6936 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 6940 
  if ((priv->config & 4UL) != 0UL || (priv->status & 1024UL) != 0UL) {
    #line 6941 
    wrqu->ap_addr.sa_family = (unsigned short)1U;
    #line 6942 
    memcpy((void *)(& wrqu->ap_addr.sa_data),(void *)(& priv->bssid),6UL);
  }
  else 
       #line 6944 
       eth_zero_addr((u8 *)(& wrqu->ap_addr.sa_data));
  #line 6946 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 6946 
    int tmp_1;
    #line 6946 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6946 
                                                             tmp_1 = 73; else 
                                                                    #line 6946 
                                                                    tmp_1 = 85;
    #line 6946 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_wap");
    #line 6946 
    printk((char *)"Getting WAP BSSID: %pM\n",(char *)(& wrqu->ap_addr.sa_data));
  }
  #line 6947 
  return 0;
}

#line 6950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_essid(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6977 
  int tmp_2;
  #line 6977 
  int __UNIQUE_ID___x569;
  #line 6954 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 6955 
  char *essid = (char *)"";
  #line 6956 
  int length = 0;
  #line 6957 
  int err = 0;
  #line 6959 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6960 
  if ((priv->status & 32UL) == 0UL) {
    #line 6961 
    err = -5;
    #line 6962 
    goto done;
  }
  #line 6965 
  if ((unsigned int)wrqu->essid.flags != 0U && (unsigned int)wrqu->essid.length != 0U) {
    #line 6966 
    length = (int)wrqu->essid.length;
    #line 6967 
    essid = extra;
  }
  #line 6970 
  if (length == 0) {
    #line 6971 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 6971 
      int tmp_1;
      #line 6971 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6971 
                                                               tmp_1 = 73; else 
                                                                    #line 6971 
                                                                    tmp_1 = 85;
      #line 6971 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_essid");
      #line 6971 
      printk((char *)"Setting ESSID to ANY\n");
    }
    #line 6972 
    priv->config &= 18446744073709551613UL;
    #line 6973 
    err = ipw2100_set_essid(priv,(char *)0,0,0);
    #line 6974 
    goto done;
  }
  {
    #line 6977 
    __UNIQUE_ID___x569 = length;
    #line 6977 
    int __UNIQUE_ID___y570 = 32;
    #line 6977 
    if (__UNIQUE_ID___x569 < __UNIQUE_ID___y570) 
                                                 #line 6977 
                                                 tmp_2 = __UNIQUE_ID___x569; else 
                                                                    #line 6977 
                                                                    tmp_2 = __UNIQUE_ID___y570;
    }
  #line 6977 
  length = tmp_2;
  #line 6979 
  priv->config |= 2UL;
  #line 6981 
  if ((int)priv->essid_len == length) {
    #line 6981 
    if (memcmp((void *)(& priv->essid),(void *)extra,(unsigned long)length) == 0) {
      #line 6982 
      if ((ipw2100_debug_level & 8U) != 0U) {
        #line 6982 
        int tmp_5;
        #line 6982 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 6982 
                                                                 tmp_5 = 73; else 
                                                                    #line 6982 
                                                                    tmp_5 = 85;
        #line 6982 
        printk((char *)"\001",tmp_5,(char *)"ipw2100_wx_set_essid");
        #line 6982 
        printk((char *)"ESSID set to current ESSID.\n");
      }
      #line 6983 
      err = 0;
      #line 6984 
      goto done;
    }
  }
  #line 6987 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 6987 
    int tmp_8;
    #line 6987 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6987 
                                                             tmp_8 = 73; else 
                                                                    #line 6987 
                                                                    tmp_8 = 85;
    #line 6987 
    printk((char *)"\001",tmp_8,(char *)"ipw2100_wx_set_essid");
    #line 6987 
    printk((char *)"Setting ESSID: \'%*pE\' (%d)\n",length,essid,length);
  }
  #line 6989 
  priv->essid_len = (unsigned char)length;
  #line 6990 
  memcpy((void *)(& priv->essid),(void *)essid,(unsigned long)priv->essid_len);
  #line 6992 
  err = ipw2100_set_essid(priv,essid,length,0);
  #line 6994 
  done: 
        #line 6994 
  ;
  #line 6995 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 6996 
  return err;
}

#line 6999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_essid(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7007 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7011 
  if ((priv->config & 2UL) != 0UL || (priv->status & 1024UL) != 0UL) {
    #line 7012 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 7012 
      int tmp_1;
      #line 7012 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7012 
                                                               tmp_1 = 73; else 
                                                                    #line 7012 
                                                                    tmp_1 = 85;
      #line 7012 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_essid");
      #line 7012 
      printk((char *)"Getting essid: \'%*pE\'\n",(int)priv->essid_len,(u8 *)(& priv->essid));
    }
    #line 7014 
    memcpy((void *)extra,(void *)(& priv->essid),(unsigned long)priv->essid_len);
    #line 7015 
    wrqu->essid.length = (unsigned short)priv->essid_len;
    #line 7016 
    wrqu->essid.flags = (unsigned short)1U;
  }
  else {
    #line 7018 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 7018 
      int tmp_3;
      #line 7018 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7018 
                                                               tmp_3 = 73; else 
                                                                    #line 7018 
                                                                    tmp_3 = 85;
      #line 7018 
      printk((char *)"\001",tmp_3,(char *)"ipw2100_wx_get_essid");
      #line 7018 
      printk((char *)"Getting essid: ANY\n");
    }
    #line 7019 
    wrqu->essid.length = (unsigned short)0U;
    #line 7020 
    wrqu->essid.flags = (unsigned short)0U;
  }
  #line 7023 
  return 0;
}

#line 7026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_nick(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7039 
  unsigned long __UNIQUE_ID___x571;
  #line 7039 
  unsigned long tmp_0;
  #line 7034 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7036 
  if ((unsigned int)wrqu->data.length > 32U) 
                                             #line 7037 
                                             return -7;
  {
    #line 7039 
    __UNIQUE_ID___x571 = (unsigned long)wrqu->data.length;
    #line 7039 
    unsigned long __UNIQUE_ID___y572 = 33UL;
    #line 7039 
    if (__UNIQUE_ID___x571 < __UNIQUE_ID___y572) 
                                                 #line 7039 
                                                 tmp_0 = __UNIQUE_ID___x571; else 
                                                                    #line 7039 
                                                                    tmp_0 = __UNIQUE_ID___y572;
    }
  #line 7039 
  wrqu->data.length = (unsigned short)tmp_0;
  #line 7040 
  memset((void *)(& priv->nick),0,33UL);
  #line 7041 
  memcpy((void *)(& priv->nick),(void *)extra,(unsigned long)wrqu->data.length);
  #line 7043 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7043 
    int tmp_3;
    #line 7043 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7043 
                                                             tmp_3 = 73; else 
                                                                    #line 7043 
                                                                    tmp_3 = 85;
    #line 7043 
    printk((char *)"\001",tmp_3,(char *)"ipw2100_wx_set_nick");
    #line 7043 
    printk((char *)"SET Nickname -> %s\n",(char *)(& priv->nick));
  }
  #line 7045 
  return 0;
}

#line 7048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_nick(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7056 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7058 
  wrqu->data.length = (unsigned short)cif_strlen((char *)(& priv->nick));
  #line 7059 
  memcpy((void *)extra,(void *)(& priv->nick),(unsigned long)wrqu->data.length);
  #line 7060 
  wrqu->data.flags = (unsigned short)1U;
  #line 7062 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7062 
    int tmp_2;
    #line 7062 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7062 
                                                             tmp_2 = 73; else 
                                                                    #line 7062 
                                                                    tmp_2 = 85;
    #line 7062 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_wx_get_nick");
    #line 7062 
    printk((char *)"GET Nickname -> %s\n",extra);
  }
  #line 7064 
  return 0;
}

#line 7067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_rate(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7073 
  u32 rate;
  #line 7071 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7072 
  u32 target_rate = (unsigned int)wrqu->bitrate.value;
  #line 7074 
  int err = 0;
  #line 7076 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7077 
  if ((priv->status & 32UL) == 0UL) {
    #line 7078 
    err = -5;
    #line 7079 
    goto done;
  }
  #line 7082 
  rate = 0U;
  #line 7084 
  if (target_rate == 1000000U || (unsigned int)wrqu->bitrate.fixed == 0U && target_rate > 1000000U) 
    #line 7086 
    rate |= 1U;
  #line 7087 
  if (target_rate == 2000000U || (unsigned int)wrqu->bitrate.fixed == 0U && target_rate > 2000000U) 
    #line 7089 
    rate |= 2U;
  #line 7090 
  if (target_rate == 5500000U || (unsigned int)wrqu->bitrate.fixed == 0U && target_rate > 5500000U) 
    #line 7092 
    rate |= 4U;
  #line 7093 
  if (target_rate == 11000000U || (unsigned int)wrqu->bitrate.fixed == 0U && target_rate > 11000000U) 
    #line 7095 
    rate |= 8U;
  #line 7096 
  if (rate == 0U) 
                  #line 7097 
                  rate = 15U;
  #line 7099 
  err = ipw2100_set_tx_rates(priv,rate,0);
  #line 7101 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7101 
    int tmp_1;
    #line 7101 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7101 
                                                             tmp_1 = 73; else 
                                                                    #line 7101 
                                                                    tmp_1 = 85;
    #line 7101 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_rate");
    #line 7101 
    printk((char *)"SET Rate -> %04X\n",rate);
  }
  #line 7102 
  done: 
        #line 7102 
  ;
  #line 7103 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7104 
  return err;
}

#line 7107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_rate(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7112 
  int val;
  #line 7111 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7113 
  unsigned int len = 4U;
  #line 7114 
  int err = 0;
  #line 7116 
  if (((priv->status & 8UL) == 0UL || (priv->status & 12288UL) != 0UL) || (priv->status & 1024UL) == 0UL) {
    #line 7119 
    wrqu->bitrate.value = 0;
    #line 7120 
    return 0;
  }
  #line 7123 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7124 
  if ((priv->status & 32UL) == 0UL) {
    #line 7125 
    err = -5;
    #line 7126 
    goto done;
  }
  #line 7129 
  err = ipw2100_get_ordinal(priv,192U,(void *)(& val),& len);
  #line 7130 
  if (err != 0) {
    #line 7131 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 7131 
      int tmp_1;
      #line 7131 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7131 
                                                               tmp_1 = 73; else 
                                                                    #line 7131 
                                                                    tmp_1 = 85;
      #line 7131 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_rate");
      #line 7131 
      printk((char *)"failed querying ordinals.\n");
    }
    #line 7132 
    goto done;
  }
  #line 7135 
  switch (val & 15) {
    #line 7136 
    case 1: 
            #line 7136 
    ;
    #line 7137 
    wrqu->bitrate.value = 1000000;
    #line 7138 
    break;
    #line 7139 
    case 2: 
            #line 7139 
    ;
    #line 7140 
    wrqu->bitrate.value = 2000000;
    #line 7141 
    break;
    #line 7142 
    case 4: 
            #line 7142 
    ;
    #line 7143 
    wrqu->bitrate.value = 5500000;
    #line 7144 
    break;
    #line 7145 
    case 8: 
            #line 7145 
    ;
    #line 7146 
    wrqu->bitrate.value = 11000000;
    #line 7147 
    break;
    #line 7148 
    default: 
             #line 7148 
    ;
    #line 7149 
    wrqu->bitrate.value = 0;
  }
  #line 7152 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7152 
    int tmp_3;
    #line 7152 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7152 
                                                             tmp_3 = 73; else 
                                                                    #line 7152 
                                                                    tmp_3 = 85;
    #line 7152 
    printk((char *)"\001",tmp_3,(char *)"ipw2100_wx_get_rate");
    #line 7152 
    printk((char *)"GET Rate -> %d\n",wrqu->bitrate.value);
  }
  #line 7154 
  done: 
        #line 7154 
  ;
  #line 7155 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7156 
  return err;
}

#line 7159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_rts(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7164 
  int value;
  #line 7164 
  int err;
  #line 7163 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7167 
  if ((unsigned int)wrqu->rts.fixed == 0U) 
                                           #line 7168 
                                           return -22;
  #line 7170 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7171 
  if ((priv->status & 32UL) == 0UL) {
    #line 7172 
    err = -5;
    #line 7173 
    goto done;
  }
  #line 7176 
  if ((unsigned int)wrqu->rts.disabled != 0U) 
                                              #line 7177 
                                              value = (int)(priv->rts_threshold | 2147483648U);
  else {
    #line 7179 
    if ((unsigned int)wrqu->rts.value + 4294967295U > 2303U) {
      #line 7180 
      err = -22;
      #line 7181 
      goto done;
    }
    #line 7183 
    value = wrqu->rts.value;
  }
  #line 7186 
  err = ipw2100_set_rts_threshold(priv,(unsigned int)value);
  #line 7188 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7188 
    int tmp_1;
    #line 7188 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7188 
                                                             tmp_1 = 73; else 
                                                                    #line 7188 
                                                                    tmp_1 = 85;
    #line 7188 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_rts");
    #line 7188 
    printk((char *)"SET RTS Threshold -> 0x%08X\n",value);
  }
  #line 7189 
  done: 
        #line 7189 
  ;
  #line 7190 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7191 
  return err;
}

#line 7194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_rts(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7202 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7204 
  wrqu->rts.value = (int)priv->rts_threshold & 2147483647;
  #line 7205 
  wrqu->rts.fixed = (unsigned char)1U;
  #line 7208 
  wrqu->rts.disabled = (unsigned char)(priv->rts_threshold >> 31);
  #line 7210 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7210 
    int tmp_1;
    #line 7210 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7210 
                                                             tmp_1 = 73; else 
                                                                    #line 7210 
                                                                    tmp_1 = 85;
    #line 7210 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_rts");
    #line 7210 
    printk((char *)"GET RTS Threshold -> 0x%08X\n",wrqu->rts.value);
  }
  #line 7212 
  return 0;
}

#line 7215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_txpow(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7220 
  int value;
  #line 7219 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7220 
  int err = 0;
  #line 7222 
  if (ipw_radio_kill_sw(priv,(int)wrqu->txpower.disabled) != 0) 
                                                                #line 7223 
                                                                return -115;
  #line 7225 
  if ((priv->ieee)->iw_mode != 1) 
                                  #line 7226 
                                  return 0;
  #line 7228 
  if (((int)wrqu->txpower.flags & 255) != 0) 
                                             #line 7229 
                                             return -22;
  #line 7231 
  if ((unsigned int)wrqu->txpower.fixed == 0U) 
                                               #line 7232 
                                               value = 32;
  else {
    #line 7234 
    if ((unsigned int)wrqu->txpower.value + 12U > 28U) 
                                                       #line 7236 
                                                       return -22;
    #line 7238 
    value = wrqu->txpower.value;
  }
  #line 7241 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7242 
  if ((priv->status & 32UL) == 0UL) {
    #line 7243 
    err = -5;
    #line 7244 
    goto done;
  }
  #line 7247 
  err = ipw2100_set_tx_power(priv,(unsigned int)value);
  #line 7249 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7249 
    int tmp_2;
    #line 7249 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7249 
                                                             tmp_2 = 73; else 
                                                                    #line 7249 
                                                                    tmp_2 = 85;
    #line 7249 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_wx_set_txpow");
    #line 7249 
    printk((char *)"SET TX Power -> %d\n",value);
  }
  #line 7251 
  done: 
        #line 7251 
  ;
  #line 7252 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7253 
  return err;
}

#line 7256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_txpow(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7264 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7266 
  wrqu->txpower.disabled = (unsigned char)((priv->status & 12288UL) != 0UL);
  #line 7268 
  if (priv->tx_power == 32) {
    #line 7269 
    wrqu->txpower.fixed = (unsigned char)0U;
    #line 7270 
    wrqu->txpower.value = 16;
  }
  else {
    #line 7272 
    wrqu->txpower.fixed = (unsigned char)1U;
    #line 7273 
    wrqu->txpower.value = priv->tx_power;
  }
  #line 7276 
  wrqu->txpower.flags = (unsigned short)0U;
  #line 7278 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7278 
    int tmp_1;
    #line 7278 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7278 
                                                             tmp_1 = 73; else 
                                                                    #line 7278 
                                                                    tmp_1 = 85;
    #line 7278 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_txpow");
    #line 7278 
    printk((char *)"GET TX Power -> %d\n",wrqu->txpower.value);
  }
  #line 7280 
  return 0;
}

#line 7283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_frag(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7291 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7293 
  if ((unsigned int)wrqu->frag.fixed == 0U) 
                                            #line 7294 
                                            return -22;
  #line 7296 
  if ((unsigned int)wrqu->frag.disabled != 0U) {
    #line 7297 
    priv->frag_threshold |= 2147483648U;
    #line 7298 
    (priv->ieee)->fts = (unsigned short)2346U;
  }
  else {
    #line 7300 
    if ((unsigned int)wrqu->frag.value + 4294967040U > 2090U) 
                                                              #line 7302 
                                                              return -22;
    #line 7304 
    (priv->ieee)->fts = (unsigned short)((unsigned int)((unsigned short)wrqu->frag.value) & 65534U);
    #line 7305 
    priv->frag_threshold = (unsigned int)(priv->ieee)->fts;
  }
  #line 7308 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7308 
    int tmp_1;
    #line 7308 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7308 
                                                             tmp_1 = 73; else 
                                                                    #line 7308 
                                                                    tmp_1 = 85;
    #line 7308 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_frag");
    #line 7308 
    printk((char *)"SET Frag Threshold -> %d\n",(int)(priv->ieee)->fts);
  }
  #line 7310 
  return 0;
}

#line 7313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_frag(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7321 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7322 
  wrqu->frag.value = (int)priv->frag_threshold & 2147483647;
  #line 7323 
  wrqu->frag.fixed = (unsigned char)0U;
  #line 7324 
  wrqu->frag.disabled = (unsigned char)(priv->frag_threshold >> 31);
  #line 7326 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7326 
    int tmp_1;
    #line 7326 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7326 
                                                             tmp_1 = 73; else 
                                                                    #line 7326 
                                                                    tmp_1 = 85;
    #line 7326 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_frag");
    #line 7326 
    printk((char *)"GET Frag Threshold -> %d\n",wrqu->frag.value);
  }
  #line 7328 
  return 0;
}

#line 7331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_retry(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7335 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7336 
  int err = 0;
  #line 7338 
  if (((int)wrqu->retry.flags & 8192) != 0 || (unsigned int)wrqu->retry.disabled != 0U) 
    #line 7339 
    return -22;
  #line 7341 
  if (((int)wrqu->retry.flags & 4096) == 0) 
                                            #line 7342 
                                            return 0;
  #line 7344 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7345 
  if ((priv->status & 32UL) == 0UL) {
    #line 7346 
    err = -5;
    #line 7347 
    goto done;
  }
  #line 7350 
  if (((int)wrqu->retry.flags & 16) != 0) {
    #line 7351 
    err = ipw2100_set_short_retry(priv,(unsigned int)wrqu->retry.value);
    #line 7352 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 7352 
      int tmp_1;
      #line 7352 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7352 
                                                               tmp_1 = 73; else 
                                                                    #line 7352 
                                                                    tmp_1 = 85;
      #line 7352 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_retry");
      #line 7352 
      printk((char *)"SET Short Retry Limit -> %d\n",wrqu->retry.value);
    }
    #line 7354 
    goto done;
  }
  #line 7357 
  if (((int)wrqu->retry.flags & 32) != 0) {
    #line 7358 
    err = ipw2100_set_long_retry(priv,(unsigned int)wrqu->retry.value);
    #line 7359 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 7359 
      int tmp_3;
      #line 7359 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7359 
                                                               tmp_3 = 73; else 
                                                                    #line 7359 
                                                                    tmp_3 = 85;
      #line 7359 
      printk((char *)"\001",tmp_3,(char *)"ipw2100_wx_set_retry");
      #line 7359 
      printk((char *)"SET Long Retry Limit -> %d\n",wrqu->retry.value);
    }
    #line 7361 
    goto done;
  }
  #line 7364 
  err = ipw2100_set_short_retry(priv,(unsigned int)wrqu->retry.value);
  #line 7365 
  if (err == 0) 
                #line 7366 
                err = ipw2100_set_long_retry(priv,(unsigned int)wrqu->retry.value);
  #line 7368 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7368 
    int tmp_5;
    #line 7368 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7368 
                                                             tmp_5 = 73; else 
                                                                    #line 7368 
                                                                    tmp_5 = 85;
    #line 7368 
    printk((char *)"\001",tmp_5,(char *)"ipw2100_wx_set_retry");
    #line 7368 
    printk((char *)"SET Both Retry Limits -> %d\n",wrqu->retry.value);
  }
  #line 7370 
  done: 
        #line 7370 
  ;
  #line 7371 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7372 
  return err;
}

#line 7375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_retry(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7383 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7385 
  wrqu->retry.disabled = (unsigned char)0U;
  #line 7387 
  if (((int)wrqu->retry.flags & 61440) == 8192) 
                                                #line 7388 
                                                return -22;
  #line 7390 
  if (((int)wrqu->retry.flags & 32) != 0) {
    #line 7391 
    wrqu->retry.flags = (unsigned short)4128U;
    #line 7392 
    wrqu->retry.value = priv->long_retry_limit;
  }
  else {
    #line 7394 
    if (priv->short_retry_limit != priv->long_retry_limit) 
                                                           #line 7394 
                                                           wrqu->retry.flags = (unsigned short)4112U; else 
                                                                    #line 7394 
                                                                    wrqu->retry.flags = (unsigned short)4096U;
    #line 7399 
    wrqu->retry.value = priv->short_retry_limit;
  }
  #line 7402 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7402 
    int tmp_1;
    #line 7402 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7402 
                                                             tmp_1 = 73; else 
                                                                    #line 7402 
                                                                    tmp_1 = 85;
    #line 7402 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_retry");
    #line 7402 
    printk((char *)"GET Retry -> %d\n",wrqu->retry.value);
  }
  #line 7404 
  return 0;
}

#line 7407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_scan(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7411 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7412 
  int err = 0;
  #line 7414 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7415 
  if ((priv->status & 32UL) == 0UL) {
    #line 7416 
    err = -5;
    #line 7417 
    goto done;
  }
  #line 7420 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7420 
    int tmp_1;
    #line 7420 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7420 
                                                             tmp_1 = 73; else 
                                                                    #line 7420 
                                                                    tmp_1 = 85;
    #line 7420 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_scan");
    #line 7420 
    printk((char *)"Initiating scan...\n");
  }
  #line 7422 
  priv->user_requested_scan = 1;
  #line 7423 
  if (ipw2100_set_scan_options(priv) != 0) 
                                           #line 7423 
                                           goto _LOR;
  else {
    #line 7423 
    if (ipw2100_start_scan(priv) != 0) {
      #line 7423 
      _LOR: 
            #line 7424 
      ;
      #line 7424 
      if ((ipw2100_debug_level & 8U) != 0U) {
        #line 7424 
        int tmp_3;
        #line 7424 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 7424 
                                                                 tmp_3 = 73; else 
                                                                    #line 7424 
                                                                    tmp_3 = 85;
        #line 7424 
        printk((char *)"\001",tmp_3,(char *)"ipw2100_wx_set_scan");
        #line 7424 
        printk((char *)"Start scan failed.\n");
      }
    }
  }
  #line 7430 
  done: 
        #line 7430 
  ;
  #line 7431 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7432 
  return err;
}

#line 7435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_scan(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7443 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7444 
  return libipw_wx_get_scan(priv->ieee,info,wrqu,extra);
}

#line 7450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_encode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *key)
{
  #line 7458 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7459 
  return libipw_wx_set_encode(priv->ieee,info,wrqu,key);
}

#line 7462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_encode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *key)
{
  #line 7470 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7471 
  return libipw_wx_get_encode(priv->ieee,info,wrqu,key);
}

#line 7474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_power(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7478 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7479 
  int err = 0;
  #line 7481 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7482 
  if ((priv->status & 32UL) == 0UL) {
    #line 7483 
    err = -5;
    #line 7484 
    goto done;
  }
  #line 7487 
  if ((unsigned int)wrqu->power.disabled != 0U) {
    #line 7488 
    priv->power_mode &= 15;
    #line 7489 
    err = ipw2100_set_power_mode(priv,0);
    #line 7490 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 7490 
      int tmp_1;
      #line 7490 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7490 
                                                               tmp_1 = 73; else 
                                                                    #line 7490 
                                                                    tmp_1 = 85;
      #line 7490 
      printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_set_power");
      #line 7490 
      printk((char *)"SET Power Management Mode -> off\n");
    }
    #line 7491 
    goto done;
  }
  #line 7494 
  switch ((int)wrqu->power.flags & 3840) {
    #line 7495 
    case 0: 
            #line 7495 
    ;
    #line 7496 
    case 3840: 
               #line 7496 
    ;
    #line 7497 
    case 768: 
              #line 7497 
    ;
    #line 7498 
    break;
    #line 7499 
    default: 
             #line 7499 
    ;
    #line 7500 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 7500 
      int tmp_3;
      #line 7500 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7500 
                                                               tmp_3 = 73; else 
                                                                    #line 7500 
                                                                    tmp_3 = 85;
      #line 7500 
      printk((char *)"\001",tmp_3,(char *)"ipw2100_wx_set_power");
      #line 7500 
      printk((char *)"SET PM Mode: %X not supported.\n",(int)wrqu->power.flags);
    }
    #line 7502 
    err = -95;
    #line 7503 
    goto done;
  }
  #line 7508 
  priv->power_mode |= 16;
  #line 7509 
  err = ipw2100_set_power_mode(priv,priv->power_mode & 15);
  #line 7511 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7511 
    int tmp_5;
    #line 7511 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7511 
                                                             tmp_5 = 73; else 
                                                                    #line 7511 
                                                                    tmp_5 = 85;
    #line 7511 
    printk((char *)"\001",tmp_5,(char *)"ipw2100_wx_set_power");
    #line 7511 
    printk((char *)"SET Power Management Mode -> 0x%02X\n",priv->power_mode);
  }
  #line 7513 
  done: 
        #line 7513 
  ;
  #line 7514 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7515 
  return err;
}

#line 7519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_power(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7527 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7529 
  if ((priv->power_mode & 16) == 0) 
                                    #line 7530 
                                    wrqu->power.disabled = (unsigned char)1U;
  else {
    #line 7532 
    wrqu->power.disabled = (unsigned char)0U;
    #line 7533 
    wrqu->power.flags = (unsigned short)0U;
  }
  #line 7536 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 7536 
    int tmp_1;
    #line 7536 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7536 
                                                             tmp_1 = 73; else 
                                                                    #line 7536 
                                                                    tmp_1 = 85;
    #line 7536 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_get_power");
    #line 7536 
    printk((char *)"GET Power Management Mode -> %02X\n",priv->power_mode);
  }
  #line 7538 
  return 0;
}

#line 7546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_genie(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7553 
  u8 *buf;
  #line 7551 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7552 
  struct libipw_device *ieee = priv->ieee;
  #line 7555 
  if (ieee->wpa_enabled == 0) 
                              #line 7556 
                              return -95;
  #line 7558 
  if ((unsigned int)wrqu->data.length > 64U || (unsigned int)wrqu->data.length != 0U && extra == (char *)0) 
    #line 7560 
    return -22;
  #line 7562 
  if ((unsigned int)wrqu->data.length != 0U) {
    #line 7563 
    buf = (u8 *)cif_kmemdup((void *)extra,(unsigned long)wrqu->data.length,3264U);
    #line 7564 
    if (buf == (u8 *)0U) 
                         #line 7565 
                         return -12;
    #line 7567 
    kfree((void *)ieee->wpa_ie);
    #line 7568 
    ieee->wpa_ie = buf;
    #line 7569 
    ieee->wpa_ie_len = (unsigned long)wrqu->data.length;
  }
  else {
    #line 7571 
    kfree((void *)ieee->wpa_ie);
    #line 7572 
    ieee->wpa_ie = (u8 *)0U;
    #line 7573 
    ieee->wpa_ie_len = 0UL;
  }
  #line 7576 
  ipw2100_wpa_assoc_frame(priv,(char *)ieee->wpa_ie,(int)ieee->wpa_ie_len);
  #line 7578 
  return 0;
}

#line 7582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_genie(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7586 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7587 
  struct libipw_device *ieee = priv->ieee;
  #line 7589 
  if (ieee->wpa_ie_len == 0UL || ieee->wpa_ie == (u8 *)0U) {
    #line 7590 
    wrqu->data.length = (unsigned short)0U;
    #line 7591 
    return 0;
  }
  #line 7594 
  if ((unsigned long)wrqu->data.length < ieee->wpa_ie_len) 
                                                           #line 7595 
                                                           return -7;
  #line 7597 
  wrqu->data.length = (unsigned short)ieee->wpa_ie_len;
  #line 7598 
  memcpy((void *)extra,(void *)ieee->wpa_ie,ieee->wpa_ie_len);
  #line 7600 
  return 0;
}

#line 7604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_auth(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7611 
  struct lib80211_crypt_data *crypt;
  #line 7612 
  unsigned long flags;
  #line 7608 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7609 
  struct libipw_device *ieee = priv->ieee;
  #line 7610 
  struct iw_param *param = & wrqu->param;
  #line 7613 
  int ret = 0;
  #line 7615 
  switch ((int)param->flags & 4095) {
    #line 7616 
    case 0: 
            #line 7616 
    ;
    #line 7617 
    case 1: 
            #line 7617 
    ;
    #line 7618 
    case 2: 
            #line 7618 
    ;
    #line 7619 
    case 3: 
            #line 7619 
    ;
    #line 7623 
    break;
    #line 7625 
    case 4: 
            #line 7625 
    ;
    #line 7626 
    crypt = (priv->ieee)->crypt_info.crypt[(priv->ieee)->crypt_info.tx_keyidx];
    #line 7627 
    if ((crypt == (struct lib80211_crypt_data *)0 || (crypt->ops)->set_flags == (unsigned long (*)(unsigned long , void *))0) || (crypt->ops)->get_flags == (unsigned long (*)(void *))0) 
      #line 7628 
      break;
    #line 7630 
    flags = (*((crypt->ops)->get_flags))(crypt->priv);
    #line 7632 
    if (param->value != 0) 
                           #line 7633 
                           flags |= 1UL; else 
                                              #line 7635 
                                              flags &= 18446744073709551614UL;
    #line 7637 
    (*((crypt->ops)->set_flags))(flags,crypt->priv);
    #line 7639 
    break;
    #line 7641 
    case 5: 
            #line 7641 
    ;
    {
      #line 7653 
      struct libipw_security sec = {.active_key = (unsigned short)0, .enabled = (unsigned short)param->value, .unicast_uses_group = (unsigned short)0, .encrypt = (unsigned short)0, .auth_mode = (unsigned char)0, .encode_alg = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .key_sizes = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .keys = {{(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}, .level = (unsigned char)0, .flags = (unsigned short)256U};
      #line 7657 
      (priv->ieee)->drop_unencrypted = param->value;
      #line 7661 
      if (param->value == 0) {
        #line 7662 
        sec.flags = (unsigned short)((unsigned int)sec.flags | 128U);
        #line 7663 
        sec.level = (unsigned char)0U;
      }
      else {
        #line 7665 
        sec.flags = (unsigned short)((unsigned int)sec.flags | 128U);
        #line 7666 
        sec.level = (unsigned char)1U;
      }
      #line 7668 
      if ((priv->ieee)->set_security != (void (*)(struct net_device *, struct libipw_security *))0) 
        #line 7669 
        (*((priv->ieee)->set_security))((priv->ieee)->dev,& sec);
      #line 7670 
      break;
    }
    #line 7673 
    case 6: 
            #line 7673 
    ;
    #line 7674 
    ret = ipw2100_wpa_set_auth_algs(priv,param->value);
    #line 7675 
    break;
    #line 7677 
    case 7: 
            #line 7677 
    ;
    #line 7678 
    ret = ipw2100_wpa_enable(priv,param->value);
    #line 7679 
    break;
    #line 7681 
    case 8: 
            #line 7681 
    ;
    #line 7682 
    ieee->ieee802_1x = param->value;
    #line 7683 
    break;
    #line 7686 
    case 10: 
             #line 7686 
    ;
    #line 7687 
    ieee->privacy_invoked = param->value;
    #line 7688 
    break;
    #line 7690 
    default: 
             #line 7690 
    ;
    #line 7691 
    return -95;
  }
  #line 7693 
  return ret;
}

#line 7697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_auth(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7703 
  struct lib80211_crypt_data *crypt;
  #line 7701 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7702 
  struct libipw_device *ieee = priv->ieee;
  #line 7704 
  struct iw_param *param = & wrqu->param;
  #line 7706 
  switch ((int)param->flags & 4095) {
    #line 7707 
    case 0: 
            #line 7707 
    ;
    #line 7708 
    case 1: 
            #line 7708 
    ;
    #line 7709 
    case 2: 
            #line 7709 
    ;
    #line 7710 
    case 3: 
            #line 7710 
    ;
    #line 7714 
    break;
    #line 7716 
    case 4: 
            #line 7716 
    ;
    #line 7717 
    crypt = (priv->ieee)->crypt_info.crypt[(priv->ieee)->crypt_info.tx_keyidx];
    #line 7718 
    if (crypt == (struct lib80211_crypt_data *)0 || (crypt->ops)->get_flags == (unsigned long (*)(void *))0) {
      #line 7719 
      printk((char *)"\001");
      #line 7721 
      break;
    }
    #line 7724 
    param->value = ((*((crypt->ops)->get_flags))(crypt->priv) & 1UL) != 0UL;
    #line 7727 
    break;
    #line 7729 
    case 5: 
            #line 7729 
    ;
    #line 7730 
    param->value = ieee->drop_unencrypted;
    #line 7731 
    break;
    #line 7733 
    case 6: 
            #line 7733 
    ;
    #line 7734 
    param->value = (int)(priv->ieee)->sec.auth_mode;
    #line 7735 
    break;
    #line 7737 
    case 7: 
            #line 7737 
    ;
    #line 7738 
    param->value = ieee->wpa_enabled;
    #line 7739 
    break;
    #line 7741 
    case 8: 
            #line 7741 
    ;
    #line 7742 
    param->value = ieee->ieee802_1x;
    #line 7743 
    break;
    #line 7745 
    case 9: 
            #line 7745 
    ;
    #line 7746 
    case 10: 
             #line 7746 
    ;
    #line 7747 
    param->value = ieee->privacy_invoked;
    #line 7748 
    break;
    #line 7750 
    default: 
             #line 7750 
    ;
    #line 7751 
    return -95;
  }
  #line 7753 
  return 0;
}

#line 7757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_encodeext(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7761 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7762 
  return libipw_wx_set_encodeext(priv->ieee,info,wrqu,extra);
}

#line 7766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_encodeext(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7770 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7771 
  return libipw_wx_get_encodeext(priv->ieee,info,wrqu,extra);
}

#line 7775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_mlme(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7779 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7780 
  struct iw_mlme *mlme = (struct iw_mlme *)extra;
  #line 7782 
  switch ((int)mlme->cmd) {
    #line 7783 
    case 0: 
            #line 7783 
    ;
    #line 7785 
    break;
    #line 7787 
    case 1: 
            #line 7787 
    ;
    #line 7788 
    ipw2100_disassociate_bssid(priv);
    #line 7789 
    break;
    #line 7791 
    default: 
             #line 7791 
    ;
    #line 7792 
    return -95;
  }
  #line 7794 
  return 0;
}

#line 7803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_promisc(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7807 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7808 
  int *parms = (int *)extra;
  #line 7809 
  int enable = *parms > 0;
  #line 7810 
  int err = 0;
  #line 7812 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7813 
  if ((priv->status & 32UL) == 0UL) {
    #line 7814 
    err = -5;
    #line 7815 
    goto done;
  }
  #line 7818 
  if (enable != 0) {
    #line 7819 
    if ((priv->ieee)->iw_mode == 6) {
      #line 7820 
      err = ipw2100_set_channel(priv,(unsigned int)*(parms + 1U),0);
      #line 7821 
      goto done;
    }
    #line 7823 
    priv->channel = (unsigned char)*(parms + 1U);
    #line 7824 
    err = ipw2100_switch_mode(priv,6U);
  }
  else 
    #line 7826 
    if ((priv->ieee)->iw_mode == 6) 
                                    #line 7827 
                                    err = ipw2100_switch_mode(priv,(unsigned int)priv->last_mode);
  #line 7829 
  done: 
        #line 7829 
  ;
  #line 7830 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7831 
  return err;
}

#line 7834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_reset(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7838 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7839 
  if ((priv->status & 32UL) != 0UL) 
                                    #line 7840 
                                    schedule_reset(priv);
  #line 7841 
  return 0;
}

#line 7846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_powermode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7850 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7851 
  int err = 0;
  #line 7851 
  int mode = *((int *)extra);
  #line 7853 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7854 
  if ((priv->status & 32UL) == 0UL) {
    #line 7855 
    err = -5;
    #line 7856 
    goto done;
  }
  #line 7859 
  if ((unsigned int)mode > 5U) 
                               #line 7860 
                               mode = 6;
  #line 7862 
  if ((priv->power_mode & 15) != mode) 
                                       #line 7863 
                                       err = ipw2100_set_power_mode(priv,mode);
  #line 7864 
  done: 
        #line 7864 
  ;
  #line 7865 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7866 
  return err;
}

#line 7870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_powermode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7880 
  s32 timeout;
  #line 7880 
  s32 period;
  #line 7878 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7879 
  int level = priv->power_mode & 15;
  #line 7882 
  if ((priv->power_mode & 16) == 0) 
                                    #line 7883 
                                    snprintf(extra,80UL,(char *)"Power save level: %d (Off)",level);
  else 
    #line 7886 
    switch (level) {
      #line 7887 
      case 0: 
              #line 7887 
      ;
      #line 7888 
      snprintf(extra,80UL,(char *)"Power save level: %d (None)",level);
      #line 7890 
      break;
      #line 7891 
      case 6: 
              #line 7891 
      ;
      #line 7892 
      snprintf(extra,80UL,(char *)"Power save level: %d (Auto)",level);
      #line 7894 
      break;
      #line 7895 
      default: 
               #line 7895 
      ;
      #line 7896 
      timeout = timeout_duration[level + -1] / 1000;
      #line 7897 
      period = period_duration[level + -1] / 1000;
      #line 7898 
      snprintf(extra,80UL,(char *)"Power save level: %d ",level,timeout,period);
    }
  #line 7905 
  wrqu->data.length = (unsigned short)((unsigned int)((unsigned short)cif_strlen(extra)) + 1U);
  #line 7907 
  return 0;
}

#line 7910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_preamble(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7915 
  int err;
  #line 7914 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7915 
  int mode = *((int *)extra);
  #line 7917 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7918 
  if ((priv->status & 32UL) == 0UL) {
    #line 7919 
    err = -5;
    #line 7920 
    goto done;
  }
  #line 7923 
  if (mode == 1) 
                 #line 7924 
                 priv->config |= 16UL;
  else 
    #line 7925 
    if (mode == 0) 
                   #line 7926 
                   priv->config &= 18446744073709551599UL;
    else {
      #line 7928 
      err = -22;
      #line 7929 
      goto done;
    }
  #line 7932 
  err = ipw2100_system_config(priv,0);
  #line 7934 
  done: 
        #line 7934 
  ;
  #line 7935 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7936 
  return err;
}

#line 7939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_preamble(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7947 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7949 
  if ((priv->config & 16UL) != 0UL) 
                                    #line 7950 
                                    snprintf((char *)(& wrqu->name),16UL,(char *)"long (1)"); else 
                                                                    #line 7952 
                                                                    snprintf((char *)(& wrqu->name),16UL,(char *)"auto (0)");
  #line 7954 
  return 0;
}

#line 7958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_set_crc_check(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7963 
  int err;
  #line 7962 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7963 
  int mode = *((int *)extra);
  #line 7965 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7966 
  if ((priv->status & 32UL) == 0UL) {
    #line 7967 
    err = -5;
    #line 7968 
    goto done;
  }
  #line 7971 
  if (mode == 1) 
                 #line 7972 
                 priv->config |= 2048UL;
  else 
    #line 7973 
    if (mode == 0) 
                   #line 7974 
                   priv->config &= 18446744073709549567UL;
    else {
      #line 7976 
      err = -22;
      #line 7977 
      goto done;
    }
  #line 7979 
  err = 0;
  #line 7981 
  done: 
        #line 7981 
  ;
  #line 7982 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 7983 
  return err;
}

#line 7986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_wx_get_crc_check(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 7994 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 7996 
  if ((priv->config & 2048UL) != 0UL) 
                                      #line 7997 
                                      snprintf((char *)(& wrqu->name),16UL,(char *)"CRC checked (1)"); else 
                                                                    #line 7999 
                                                                    snprintf((char *)(& wrqu->name),16UL,(char *)"CRC ignored (0)");
  #line 8001 
  return 0;
}

#line 8005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static iw_handler ipw2100_wx_handlers[54U] = {[1] = & ipw2100_wx_get_name, [4] = & ipw2100_wx_set_freq, & ipw2100_wx_get_freq, & ipw2100_wx_set_mode, & ipw2100_wx_get_mode, [11] = & ipw2100_wx_get_range, [20] = & ipw2100_wx_set_wap, & ipw2100_wx_get_wap, & ipw2100_wx_set_mlme, [24] = & ipw2100_wx_set_scan, & ipw2100_wx_get_scan, & ipw2100_wx_set_essid, & ipw2100_wx_get_essid, & ipw2100_wx_set_nick, & ipw2100_wx_get_nick, [32] = & ipw2100_wx_set_rate, & ipw2100_wx_get_rate, & ipw2100_wx_set_rts, & ipw2100_wx_get_rts, & ipw2100_wx_set_frag, & ipw2100_wx_get_frag, & ipw2100_wx_set_txpow, & ipw2100_wx_get_txpow, & ipw2100_wx_set_retry, & ipw2100_wx_get_retry, & ipw2100_wx_set_encode, & ipw2100_wx_get_encode, & ipw2100_wx_set_power, & ipw2100_wx_get_power, [48] = & ipw2100_wx_set_genie, & ipw2100_wx_get_genie, & ipw2100_wx_set_auth, & ipw2100_wx_get_auth, & ipw2100_wx_set_encodeext, & ipw2100_wx_get_encodeext};
#line 8052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct iw_priv_args ipw2100_private_args[8U] = {{.cmd = 35808U, .set_args = (unsigned short)18434U, .name = {(char)'m', (char)'o', (char)'n', (char)'i', (char)'t', (char)'o', (char)'r'}}, {.cmd = 35809U, .set_args = (unsigned short)18432U, .name = {(char)'r', (char)'e', (char)'s', (char)'e', (char)'t'}}, {.cmd = 35810U, .set_args = (unsigned short)18433U, .name = {(char)'s', (char)'e', (char)'t', (char)'_', (char)'p', (char)'o', (char)'w', (char)'e', (char)'r'}}, {.cmd = 35811U, .get_args = (unsigned short)10320U, .name = {(char)'g', (char)'e', (char)'t', (char)'_', (char)'p', (char)'o', (char)'w', (char)'e', (char)'r'}}, {.cmd = 35812U, .set_args = (unsigned short)18433U, .name = {(char)'s', (char)'e', (char)'t', (char)'_', (char)'p', (char)'r', (char)'e', (char)'a', (char)'m', (char)'b', (char)'l', (char)'e'}}, {.cmd = 35813U, .get_args = (unsigned short)10256U, .name = {(char)'g', (char)'e', (char)'t', (char)'_', (char)'p', (char)'r', (char)'e', (char)'a', (char)'m', (char)'b', (char)'l', (char)'e'}}, {.cmd = 35814U, .set_args = (unsigned short)18433U, .name = {(char)'s', (char)'e', (char)'t', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k'}}, {.cmd = 35815U, .get_args = (unsigned short)10256U, .name = {(char)'g', (char)'e', (char)'t', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k'}}};
#line 8086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static iw_handler ipw2100_private_handler[8U] = {& ipw2100_wx_set_promisc, & ipw2100_wx_reset, & ipw2100_wx_set_powermode, & ipw2100_wx_get_powermode, & ipw2100_wx_set_preamble, & ipw2100_wx_get_preamble, & ipw2100_wx_set_crc_check, & ipw2100_wx_get_crc_check};
#line 8112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct iw_statistics *ipw2100_wx_wireless_stats(struct net_device *dev)
{
  #line 8122 
  int rssi_qual;
  #line 8123 
  int tx_qual;
  #line 8124 
  int beacon_qual;
  #line 8125 
  int quality;
  #line 8128 
  struct iw_statistics *wstats;
  #line 8129 
  u32 rssi;
  #line 8129 
  u32 tx_retries;
  #line 8129 
  u32 missed_beacons;
  #line 8129 
  u32 tx_failures;
  #line 8127 
  struct ipw2100_priv *priv = libipw_priv(dev);
  #line 8130 
  u32 ord_len = 4U;
  #line 8132 
  if (priv == (struct ipw2100_priv *)0) 
                                        #line 8133 
                                        return (struct iw_statistics *)0;
  #line 8135 
  wstats = & priv->wstats;
  #line 8142 
  if ((priv->status & 1024UL) == 0UL) {
    #line 8143 
    wstats->miss.beacon = 0U;
    #line 8144 
    wstats->discard.retries = 0U;
    #line 8145 
    wstats->qual.qual = (unsigned char)0U;
    #line 8146 
    wstats->qual.level = (unsigned char)0U;
    #line 8147 
    wstats->qual.noise = (unsigned char)0U;
    #line 8148 
    wstats->qual.updated = (unsigned char)7U;
    #line 8149 
    wstats->qual.updated = (unsigned char)((unsigned int)wstats->qual.updated | 112U);
    #line 8151 
    return wstats;
  }
  #line 8154 
  if (ipw2100_get_ordinal(priv,148U,(void *)(& missed_beacons),& ord_len) != 0) 
    #line 8156 
    goto fail_get_ordinal;
  #line 8159 
  if ((priv->status & 1024UL) == 0UL) {
    #line 8160 
    wstats->qual.qual = (unsigned char)0U;
    #line 8161 
    wstats->qual.level = (unsigned char)0U;
  }
  else {
    #line 8212 
    int __UNIQUE_ID___x573;
    #line 8212 
    int tmp_3;
    #line 8213 
    int __UNIQUE_ID___x575;
    #line 8213 
    int tmp_5;
    #line 8163 
    if (ipw2100_get_ordinal(priv,173U,(void *)(& rssi),& ord_len) != 0) 
      #line 8165 
      goto fail_get_ordinal;
    #line 8166 
    wstats->qual.level = (unsigned char)((unsigned int)((unsigned char)rssi) + 158U);
    #line 8167 
    if (rssi <= 9U) 
                    #line 8168 
                    rssi_qual = (int)((rssi * 30U) / 10U);
    else 
      #line 8169 
      if (rssi <= 14U) 
                       #line 8170 
                       rssi_qual = (int)((rssi * 30U + 4294966996U) / 5U + 30U);
      else 
        #line 8171 
        if (rssi <= 19U) 
                         #line 8172 
                         rssi_qual = (int)((rssi * 20U + 4294966996U) / 5U + 60U);
        else 
          #line 8173 
          if (rssi <= 29U) 
                           #line 8174 
                           rssi_qual = (int)((rssi * 10U + 4294967096U) / 10U + 80U); else 
                                                                    #line 8177 
                                                                    rssi_qual = (int)((rssi * 10U + 4294966996U) / 10U + 90U);
    #line 8180 
    if (ipw2100_get_ordinal(priv,149U,(void *)(& tx_retries),& ord_len) != 0) 
      #line 8182 
      goto fail_get_ordinal;
    #line 8184 
    if (tx_retries > 75U) 
                          #line 8185 
                          tx_qual = (int)((tx_retries * 4294967266U + 2700U) / 15U);
    else 
      #line 8186 
      if (tx_retries > 70U) 
                            #line 8187 
                            tx_qual = (int)((tx_retries * 4294967266U + 2250U) / 5U + 30U);
      else 
        #line 8188 
        if (tx_retries > 65U) 
                              #line 8189 
                              tx_qual = (int)((tx_retries * 4294967276U + 1400U) / 5U + 60U);
        else 
          #line 8190 
          if (tx_retries > 50U) 
                                #line 8191 
                                tx_qual = (int)((tx_retries * 4294967286U + 650U) / 15U + 80U); else 
                                                                    #line 8194 
                                                                    tx_qual = (int)((tx_retries * 4294967286U + 500U) / 50U + 90U);
    #line 8197 
    if (missed_beacons > 50U) 
                              #line 8198 
                              beacon_qual = (int)((missed_beacons * 4294967266U + 1800U) / 10U);
    else 
      #line 8199 
      if (missed_beacons > 40U) 
                                #line 8200 
                                beacon_qual = (int)((missed_beacons * 4294967266U + 1500U) / 10U + 30U);
      else 
        #line 8202 
        if (missed_beacons > 32U) 
                                  #line 8203 
                                  beacon_qual = (int)((missed_beacons * 4294967276U + 800U) / 18U + 60U);
        else 
          #line 8205 
          if (missed_beacons > 20U) 
                                    #line 8206 
                                    beacon_qual = (int)((missed_beacons * 4294967286U + 320U) / 20U + 80U); else 
                                                                    #line 8209 
                                                                    beacon_qual = (int)((missed_beacons * 4294967286U + 200U) / 20U + 90U);
    {
      #line 8212 
      __UNIQUE_ID___x573 = tx_qual;
      #line 8212 
      int __UNIQUE_ID___y574 = rssi_qual;
      #line 8212 
      if (__UNIQUE_ID___x573 < __UNIQUE_ID___y574) 
                                                   #line 8212 
                                                   tmp_3 = __UNIQUE_ID___x573; else 
                                                                    #line 8212 
                                                                    tmp_3 = __UNIQUE_ID___y574;
      }
    #line 8212 
    quality = tmp_3;
    {
      #line 8213 
      __UNIQUE_ID___x575 = beacon_qual;
      #line 8213 
      int __UNIQUE_ID___y576 = quality;
      #line 8213 
      if (__UNIQUE_ID___x575 < __UNIQUE_ID___y576) 
                                                   #line 8213 
                                                   tmp_5 = __UNIQUE_ID___x575; else 
                                                                    #line 8213 
                                                                    tmp_5 = __UNIQUE_ID___y576;
      }
    #line 8213 
    quality = tmp_5;
    #line 8216 
    if (beacon_qual == quality) {
      #line 8217 
      if ((ipw2100_debug_level & 8U) != 0U) {
        #line 8217 
        int tmp_8;
        #line 8217 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 8217 
                                                                 tmp_8 = 73; else 
                                                                    #line 8217 
                                                                    tmp_8 = 85;
        #line 8217 
        printk((char *)"\001",tmp_8,(char *)"ipw2100_wx_wireless_stats");
        #line 8217 
        printk((char *)"Quality clamped by Missed Beacons\n");
      }
    }
    else 
      #line 8218 
      if (tx_qual == quality) {
        #line 8219 
        if ((ipw2100_debug_level & 8U) != 0U) {
          #line 8219 
          int tmp_10;
          #line 8219 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 8219 
                                                                   tmp_10 = 73; else 
                                                                    #line 8219 
                                                                    tmp_10 = 85;
          #line 8219 
          printk((char *)"\001",tmp_10,(char *)"ipw2100_wx_wireless_stats");
          #line 8219 
          printk((char *)"Quality clamped by Tx Retries\n");
        }
      }
      else 
        #line 8220 
        if (quality != 100) {
          #line 8221 
          if ((ipw2100_debug_level & 8U) != 0U) {
            #line 8221 
            int tmp_12;
            #line 8221 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 8221 
              tmp_12 = 73; else 
                                #line 8221 
                                tmp_12 = 85;
            #line 8221 
            printk((char *)"\001",tmp_12,(char *)"ipw2100_wx_wireless_stats");
            #line 8221 
            printk((char *)"Quality clamped by Signal Strength\n");
          }
        }
        else 
          #line 8223 
          if ((ipw2100_debug_level & 8U) != 0U) {
            #line 8223 
            int tmp_14;
            #line 8223 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 8223 
              tmp_14 = 73; else 
                                #line 8223 
                                tmp_14 = 85;
            #line 8223 
            printk((char *)"\001",tmp_14,(char *)"ipw2100_wx_wireless_stats");
            #line 8223 
            printk((char *)"Quality not clamped.\n");
          }
    #line 8226 
    wstats->qual.qual = (unsigned char)quality;
    #line 8227 
    wstats->qual.level = (unsigned char)((unsigned int)((unsigned char)rssi) + 158U);
  }
  #line 8230 
  wstats->qual.noise = (unsigned char)0U;
  #line 8231 
  wstats->qual.updated = (unsigned char)7U;
  #line 8232 
  wstats->qual.updated = (unsigned char)((unsigned int)wstats->qual.updated | 64U);
  #line 8235 
  wstats->miss.beacon = missed_beacons;
  #line 8237 
  if (ipw2100_get_ordinal(priv,51U,(void *)(& tx_failures),& ord_len) != 0) 
    #line 8239 
    goto fail_get_ordinal;
  #line 8240 
  wstats->discard.retries = tx_failures;
  #line 8242 
  return wstats;
  #line 8244 
  fail_get_ordinal: 
                    #line 8244 
  ;
  #line 8245 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 8245 
    int tmp_17;
    #line 8245 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8245 
                                                             tmp_17 = 73; else 
                                                                    #line 8245 
                                                                    tmp_17 = 85;
    #line 8245 
    printk((char *)"\001",tmp_17,(char *)"ipw2100_wx_wireless_stats");
    #line 8245 
    printk((char *)"failed querying ordinals.\n");
  }
  #line 8247 
  return (struct iw_statistics *)0;
}

#line 8250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static struct iw_handler_def ipw2100_wx_handler_def = {.standard = (iw_handler *)(& ipw2100_wx_handlers), .num_standard = (unsigned short)54U, .num_private = (unsigned short)8U, .num_private_args = (unsigned short)8U, .private = (iw_handler *)(& ipw2100_private_handler), .private_args = (struct iw_priv_args *)(& ipw2100_private_args), .get_wireless_stats = & ipw2100_wx_wireless_stats};
#line 8260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_wx_event_work(struct work_struct *work)
{
  #line 8263 
  void *__mptr;
  #line 8264 
  union iwreq_data wrqu;
  #line 8263 
  __mptr = (void *)work;
  #line 8262 
  struct ipw2100_priv *priv = ((struct ipw2100_priv *)(__mptr + 18446744073709550160U));
  #line 8265 
  unsigned int len = 6U;
  #line 8267 
  if ((priv->status & 16UL) != 0UL) 
                                    #line 8268 
                                    return;
  #line 8270 
  cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 8272 
  if ((ipw2100_debug_level & 8U) != 0U) {
    #line 8272 
    int tmp_1;
    #line 8272 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8272 
                                                             tmp_1 = 73; else 
                                                                    #line 8272 
                                                                    tmp_1 = 85;
    #line 8272 
    printk((char *)"\001",tmp_1,(char *)"ipw2100_wx_event_work");
    #line 8272 
    printk((char *)"enter\n");
  }
  #line 8274 
  cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  #line 8276 
  wrqu.ap_addr.sa_family = (unsigned short)1U;
  #line 8279 
  if ((priv->status & 1536UL) == 0UL || (priv->status & 12288UL) != 0UL) 
    #line 8279 
    goto _LOR;
  else {
    #line 8280 
    if (ipw2100_get_ordinal(priv,1014U,(void *)(& priv->bssid),& len) != 0) 
      #line 8279 
      _LOR: 
            #line 8283 
            eth_zero_addr((u8 *)(& wrqu.ap_addr.sa_data));
    else {
      #line 8287 
      memcpy((void *)(& wrqu.ap_addr.sa_data),(void *)(& priv->bssid),6UL);
      #line 8288 
      memcpy((void *)(& (priv->ieee)->bssid),(void *)(& priv->bssid),6UL);
      #line 8289 
      priv->status &= 18446744073709551103UL;
      #line 8290 
      priv->status |= 1024UL;
      #line 8291 
      netif_carrier_on(priv->net_dev);
      #line 8292 
      netif_wake_queue(priv->net_dev);
    }
  }
  #line 8295 
  if ((priv->status & 1024UL) == 0UL) {
    #line 8296 
    if ((ipw2100_debug_level & 8U) != 0U) {
      #line 8296 
      int tmp_4;
      #line 8296 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8296 
                                                               tmp_4 = 73; else 
                                                                    #line 8296 
                                                                    tmp_4 = 85;
      #line 8296 
      printk((char *)"\001",tmp_4,(char *)"ipw2100_wx_event_work");
      #line 8296 
      printk((char *)"Configuring ESSID\n");
    }
    #line 8297 
    cif_mutex_lock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
    #line 8300 
    if ((priv->config & 2UL) != 0UL) 
                                     #line 8301 
                                     ipw2100_set_essid(priv,(char *)(& priv->essid),(int)priv->essid_len,0); else 
                                                                    #line 8304 
                                                                    ipw2100_set_essid(priv,(char *)0,0,0);
    #line 8305 
    cif_mutex_unlock_action_mutex_of_ipw2100_priv(& priv->action_mutex);
  }
  #line 8308 
  wireless_send_event(priv->net_dev,35605U,& wrqu,(char *)0);
  #line 8309 
  return;
}

#line 8346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_mod_firmware_load(struct ipw2100_fw *fw)
{
  #line 8348 
  struct ipw2100_fw_header *h = (struct ipw2100_fw_header *)(fw->fw_entry)->data;
  #line 8351 
  if (((int)h->version & 255) != 1) {
    #line 8352 
    printk((char *)"\001",(int)h->version);
    #line 8356 
    return 1;
  }
  #line 8359 
  fw->version = (int)h->version;
  #line 8360 
  fw->fw.data = (void *)((fw->fw_entry)->data + 12UL);
  #line 8361 
  fw->fw.size = (unsigned long)h->fw_size;
  #line 8362 
  fw->uc.data = fw->fw.data + (unsigned long)h->fw_size;
  #line 8363 
  fw->uc.size = (unsigned long)h->uc_size;
  #line 8365 
  return 0;
}

#line 8368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_get_firmware(struct ipw2100_priv *priv, struct ipw2100_fw *fw)
{
  #line 8371 
  char *fw_name;
  #line 8372 
  int rc;
  #line 8374 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 8374 
    int tmp_0;
    #line 8374 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8374 
                                                             tmp_0 = 73; else 
                                                                    #line 8374 
                                                                    tmp_0 = 85;
    #line 8374 
    printk((char *)"\001",tmp_0,(char *)"ipw2100_get_firmware");
    #line 8374 
    printk((char *)"%s: Using hotplug firmware load.\n",(char *)(& (priv->net_dev)->name));
  }
  #line 8377 
  switch ((priv->ieee)->iw_mode) {
    #line 8378 
    case 1: 
            #line 8378 
    ;
    #line 8379 
    fw_name = (char *)"ipw2100-";
    #line 8380 
    break;
    #line 8382 
    case 6: 
            #line 8382 
    ;
    #line 8383 
    fw_name = (char *)"ipw2100-";
    #line 8384 
    break;
    #line 8386 
    case 2: 
            #line 8386 
    ;
    #line 8387 
    default: 
             #line 8387 
    ;
    #line 8388 
    fw_name = (char *)"ipw2100-";
    #line 8389 
    break;
  }
  #line 8392 
  rc = cif_request_firmware(& fw->fw_entry,fw_name,& (priv->pci_dev)->dev);
  #line 8394 
  if (rc < 0) {
    #line 8395 
    printk((char *)"\001",(char *)(& (priv->net_dev)->name),fw_name);
    #line 8398 
    return rc;
  }
  #line 8400 
  if ((ipw2100_debug_level & 4U) != 0U) {
    #line 8400 
    int tmp_2;
    #line 8400 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8400 
                                                             tmp_2 = 73; else 
                                                                    #line 8400 
                                                                    tmp_2 = 85;
    #line 8400 
    printk((char *)"\001",tmp_2,(char *)"ipw2100_get_firmware");
    #line 8400 
    printk((char *)"firmware data %p size %zd\n",(fw->fw_entry)->data,(fw->fw_entry)->size);
  }
  #line 8403 
  ipw2100_mod_firmware_load(fw);
  #line 8405 
  return 0;
}

#line 8414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static void ipw2100_release_firmware(struct ipw2100_priv *priv, struct ipw2100_fw *fw)
{
  #line 8417 
  fw->version = 0;
  #line 8418 
  cif_release_firmware(fw->fw_entry);
  #line 8419 
  fw->fw_entry = (struct firmware *)0;
  #line 8420 
  return;
}

#line 8422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_get_fwversion(struct ipw2100_priv *priv, char *buf, size_t max)
{
  #line 8425 
  char ver[14U];
  #line 8427 
  u32 tmp;
  #line 8428 
  int i;
  #line 8426 
  u32 len = 14U;
  #line 8430 
  if (ipw2100_get_ordinal(priv,1012U,(void *)(& ver),& len) != 0) 
                                                                  #line 8431 
                                                                  return -5;
  #line 8432 
  tmp = (unsigned int)max;
  #line 8433 
  if ((unsigned long)len >= max) 
                                 #line 8434 
                                 len = (unsigned int)max + 4294967295U;
  #line 8435 
  i = 0;
  #line 8435 
  while ((unsigned int)i < len) {
    #line 8436 
    *(buf + (unsigned long)i) = ver[i];
    #line 8435 
    i ++;
  }
  #line 8437 
  *(buf + (unsigned long)i) = (char)0;
  #line 8438 
  return (int)tmp;
}

#line 8441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_get_ucodeversion(struct ipw2100_priv *priv, char *buf, size_t max)
{
  #line 8444 
  u32 ver;
  #line 8445 
  u32 len = 4U;
  #line 8447 
  if (ipw2100_get_ordinal(priv,213U,(void *)(& ver),& len) != 0) 
                                                                 #line 8448 
                                                                 return -5;
  #line 8449 
  return snprintf(buf,max,(char *)"%08X",ver);
}

#line 8455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_fw_download(struct ipw2100_priv *priv, struct ipw2100_fw *fw)
{
  #line 8465 
  unsigned int addr;
  #line 8466 
  unsigned short len;
  #line 8468 
  unsigned char *firmware_data = (unsigned char *)fw->fw.data;
  #line 8469 
  unsigned int firmware_data_left = (unsigned int)fw->fw.size;
  #line 8471 
  while (firmware_data_left != 0U) {
    #line 8472 
    addr = *((u32 *)firmware_data);
    #line 8473 
    firmware_data += 4U;
    #line 8474 
    firmware_data_left += 4294967292U;
    #line 8476 
    len = *((u16 *)firmware_data);
    #line 8477 
    firmware_data += 2U;
    #line 8478 
    firmware_data_left += 4294967294U;
    #line 8480 
    if ((unsigned int)len > 32U) {
      #line 8481 
      printk((char *)"\001",(int)len);
      #line 8484 
      return -22;
    }
    #line 8487 
    write_nic_memory(priv->net_dev,addr,(unsigned int)len,firmware_data);
    #line 8488 
    firmware_data += (unsigned long)len;
    #line 8489 
    firmware_data_left -= (unsigned int)len;
  }
  #line 8492 
  return 0;
}

#line 8512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2100.c"
static int ipw2100_ucode_download(struct ipw2100_priv *priv, struct ipw2100_fw *fw)
{
  #line 8520 
  struct symbol_alive_response response;
  #line 8521 
  int i;
  #line 8521 
  int j;
  #line 8522 
  u8 data;
  #line 8515 
  struct net_device *dev = priv->net_dev;
  #line 8516 
  unsigned char *microcode_data = (unsigned char *)fw->uc.data;
  #line 8517 
  unsigned int microcode_data_left = (unsigned int)fw->uc.size;
  #line 8518 
  void *reg = priv->ioaddr;
  #line 8525 
  write_nic_word(dev,2228224U,(unsigned short)1795);
  #line 8526 
  readl(reg);
  #line 8527 
  write_nic_word(dev,2228224U,(unsigned short)1799);
  #line 8528 
  readl(reg);
  #line 8531 
  write_nic_byte(dev,2162708U,(unsigned char)114);
  #line 8532 
  readl(reg);
  #line 8533 
  write_nic_byte(dev,2162708U,(unsigned char)114);
  #line 8534 
  readl(reg);
  #line 8537 
  write_nic_byte(dev,2162688U,(unsigned char)64);
  #line 8538 
  readl(reg);
  #line 8539 
  write_nic_byte(dev,2162688U,(unsigned char)0);
  #line 8540 
  readl(reg);
  #line 8541 
  write_nic_byte(dev,2162688U,(unsigned char)64);
  #line 8542 
  readl(reg);
  #line 8546 
  while (microcode_data_left != 0U) {
    #line 8547 
    unsigned char *tmp;
    #line 8548 
    unsigned char *tmp_0;
    #line 8547 
    tmp = microcode_data;
    #line 8547 
    microcode_data ++;
    #line 8547 
    ;
    #line 8547 
    ;
    #line 8547 
    write_nic_byte(dev,2162704U,(unsigned char)((int)*tmp));
    #line 8548 
    tmp_0 = microcode_data;
    #line 8548 
    microcode_data ++;
    #line 8548 
    ;
    #line 8548 
    ;
    #line 8548 
    write_nic_byte(dev,2162704U,(unsigned char)((int)*tmp_0));
    #line 8549 
    microcode_data_left += 4294967294U;
  }
  #line 8553 
  write_nic_byte(dev,2162688U,(unsigned char)0);
  #line 8554 
  readl(reg);
  #line 8558 
  write_nic_byte(dev,2162688U,(unsigned char)0);
  #line 8559 
  readl(reg);
  #line 8560 
  write_nic_byte(dev,2162688U,(unsigned char)128);
  #line 8561 
  readl(reg);
  #line 8564 
  write_nic_word(dev,2228224U,(unsigned short)1795);
  #line 8565 
  readl(reg);
  #line 8566 
  write_nic_word(dev,2228224U,(unsigned short)1799);
  #line 8567 
  readl(reg);
  #line 8570 
  write_nic_byte(dev,2162708U,(unsigned char)114);
  #line 8571 
  readl(reg);
  #line 8572 
  write_nic_byte(dev,2162708U,(unsigned char)114);
  #line 8573 
  readl(reg);
  #line 8577 
  write_nic_byte(dev,2162688U,(unsigned char)0);
  #line 8578 
  readl(reg);
  #line 8579 
  write_nic_byte(dev,2162688U,(unsigned char)128);
  #line 8583 
  i = 0;
  #line 8583 
  while (i <= 9) {
    #line 8584 
    __const_udelay(42950UL);
    #line 8587 
    read_nic_byte(dev,2162688U,& data);
    #line 8588 
    if (((int)data & 1) != 0) 
                              #line 8589 
                              break;
    #line 8583 
    i ++;
  }
  #line 8592 
  if (i == 10) {
    #line 8593 
    printk((char *)"\001",(char *)(& dev->name));
    #line 8595 
    return -5;
  }
  #line 8599 
  i = 0;
  #line 8599 
  while (i <= 29) {
    #line 8601 
    j = 0;
    #line 8601 
    while ((unsigned int)j <= 13U) {
      #line 8603 
      read_nic_word(dev,2162692U,(u16 *)(& response) + (unsigned long)j);
      #line 8602 
      j ++;
    }
    #line 8605 
    if ((unsigned int)response.cmd_id == 1U && (unsigned int)response.ucode_valid == 1U) 
      #line 8606 
      break;
    #line 8607 
    __const_udelay(42950UL);
    #line 8599 
    i ++;
  }
  #line 8610 
  if (i == 30) {
    #line 8611 
    printk((char *)"\001",(char *)(& dev->name));
    #line 8614 
    printk_buf(1,(u8 *)(& response),28U);
    #line 8615 
    return -5;
  }
  #line 8618 
  return 0;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
struct pci_driver *emg_alias_ipw2100_pci_driver = & ipw2100_pci_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
struct pci_device_id (*emg_alias_ipw2100_pci_id_table)[41U] = & ipw2100_pci_id_table;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 100 
#line 100 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 101 
#line 101 
int emg_register_netdev(struct net_device *arg0);
#line 102 
#line 102 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 103 
#line 103 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 104 
#line 104 
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);
#line 105 
#line 105 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 106 
#line 106 
void emg_unregister_netdev(struct net_device *arg0);
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
int emg_wrapper_ipw2100_close(struct net_device *arg0)
{
  #line 111 
  return ipw2100_close(arg0);
}

#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
unsigned int emg_wrapper_ipw2100_ethtool_get_link(struct net_device *arg0)
{
  #line 116 
  return ipw2100_ethtool_get_link(arg0);
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
enum irqreturn emg_wrapper_ipw2100_interrupt(int arg0, void *arg1)
{
  #line 121 
  return ipw2100_interrupt(arg0,arg1);
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
int emg_wrapper_ipw2100_open(struct net_device *arg0)
{
  #line 126 
  return ipw2100_open(arg0);
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
int emg_wrapper_ipw2100_pci_init_one(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 131 
  return ipw2100_pci_init_one(arg0,arg1);
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
void emg_wrapper_ipw2100_pci_remove_one(struct pci_dev *arg0)
{
  #line 136 
  ipw2100_pci_remove_one(arg0);
  #line 137 
  return;
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
int emg_wrapper_ipw2100_resume(struct pci_dev *arg0)
{
  #line 141 
  return ipw2100_resume(arg0);
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
int emg_wrapper_ipw2100_set_address(struct net_device *arg0, void *arg1)
{
  #line 146 
  return ipw2100_set_address(arg0,arg1);
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
void emg_wrapper_ipw2100_shutdown(struct pci_dev *arg0)
{
  #line 151 
  ipw2100_shutdown(arg0);
  #line 152 
  return;
}

#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
int emg_wrapper_ipw2100_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 156 
  return ipw2100_suspend(arg0,arg1);
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
void emg_wrapper_ipw2100_tx_timeout(struct net_device *arg0)
{
  #line 161 
  ipw2100_tx_timeout(arg0);
  #line 162 
  return;
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
void emg_wrapper_ipw_ethtool_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 166 
  ipw_ethtool_get_drvinfo(arg0,arg1);
  #line 167 
  return;
}

#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
void emg_ipw2100_exit(void)
{
  #line 171 
  ipw2100_exit();
  #line 172 
  return;
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
int emg_ipw2100_init(void)
{
  #line 175 
  return ipw2100_init();
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 196 
  ldv_set_bit(nr,addr);
  #line 197 
  return;
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 203 
  ldv_clear_bit(nr,addr);
  #line 204 
  return;
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 210 
  ldv_init_list_head(list);
  #line 211 
  return;
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static size_t cif_strlen(char *s)
{
  #line 224 
  return ldv_strlen(s);
}

#line 465  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 468 
  return ldv_kmalloc_array(n,size,flags);
}

#line 472  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 475 
  return ldv_kcalloc(n,size,flags);
}

#line 750  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 753 
  return ldv_kmemdup(src,len,gfp);
}

#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 875 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 879  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif___ldv_spin_lock_low_lock_of_ipw2100_priv(spinlock_t *lock)
{
  #line 882 
  ldv_spin_model_lock((char *)"low_lock_of_ipw2100_priv");
  #line 884 
  __ldv_spin_lock(lock);
  #line 885 
  return;
}

#line 888  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_spin_unlock_irqrestore_low_lock_of_ipw2100_priv(spinlock_t *lock, unsigned long flags)
{
  #line 891 
  ldv_spin_model_unlock((char *)"low_lock_of_ipw2100_priv");
  #line 893 
  spin_unlock_irqrestore(lock,flags);
  #line 894 
  return;
}

#line 897  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_mutex_lock_adapter_mutex_of_ipw2100_priv(struct mutex *lock)
{
  #line 900 
  ldv_mutex_model_lock(lock,(char *)"adapter_mutex_of_ipw2100_priv");
  #line 901 
  return;
}

#line 904  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_mutex_unlock_adapter_mutex_of_ipw2100_priv(struct mutex *lock)
{
  #line 907 
  ldv_mutex_model_unlock(lock,(char *)"adapter_mutex_of_ipw2100_priv");
  #line 908 
  return;
}

#line 911  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_mutex_lock_action_mutex_of_ipw2100_priv(struct mutex *lock)
{
  #line 914 
  ldv_mutex_model_lock(lock,(char *)"action_mutex_of_ipw2100_priv");
  #line 915 
  return;
}

#line 918  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_mutex_unlock_action_mutex_of_ipw2100_priv(struct mutex *lock)
{
  #line 921 
  ldv_mutex_model_unlock(lock,(char *)"action_mutex_of_ipw2100_priv");
  #line 922 
  return;
}

#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_spin_lock_low_lock_of_ipw2100_priv(spinlock_t *lock)
{
  #line 928 
  ldv_spin_model_lock((char *)"low_lock_of_ipw2100_priv");
  #line 930 
  spin_lock(lock);
  #line 931 
  return;
}

#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 938 
  emg_tasklet_schedule(t);
  #line 939 
  return;
}

#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_spin_unlock_low_lock_of_ipw2100_priv(spinlock_t *lock)
{
  #line 945 
  ldv_spin_model_unlock((char *)"low_lock_of_ipw2100_priv");
  #line 947 
  spin_unlock(lock);
  #line 948 
  return;
}

#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 955 
  emg_tasklet_init(t,func,data);
  #line 956 
  return;
}

#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 963 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 971 
  return emg_register_netdev(dev);
}

#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 979 
  emg_unregister_netdev(dev);
  #line 980 
  return;
}

#line 983  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 987 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 991  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 995 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1003 
  emg_pci_unregister_driver(dev);
  #line 1004 
  return;
}

#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 1010 
  return ldv_request_firmware(fw);
}

#line 1014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/0/concurrency safety/weaver/ipw2100.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 1017 
  ldv_release_firmware(fw);
  #line 1018 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
#line 141 
void emg_dispatch_deregister_10(struct net_device *arg0);
#line 61 
#line 107 
void emg_dispatch_deregister_4(struct pci_driver *arg0);
#line 62 
#line 98 
void emg_dispatch_irq_deregister_3(int arg0);
#line 63 
#line 127 
void emg_dispatch_irq_register_6(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 64 
#line 87 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 65 
#line 116 
void emg_dispatch_register_5(struct net_device *arg0);
#line 66 
#line 741 
void *emg_entry_point_insmod(void *arg0);
#line 68 
#line 150 
void *emg_interrupt_interrupt_scenario_ipw2100_interrupt(void *arg0);
#line 69 
#line 213 
void *emg_net_random_allocationless_scenario_ipw_ethtool_get_drvinfo(void *arg0);
#line 70 
#line 327 
void *emg_pci_pci_scenario_ipw2100_pci_driver(void *arg0);
#line 78 
#line 770 
int main(void);
#line 81  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_11;
#line 82  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 88 
  int ret;
  #line 89 
  struct emg_struct_pci_scenario_ipw2100_pci_driver_13 *cf_arg_13;
  #line 90 
  cf_arg_13 = (struct emg_struct_pci_scenario_ipw2100_pci_driver_13 *)ldv_xmalloc(16UL);
  #line 91 
  cf_arg_13->arg0 = arg0;
  #line 92 
  ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_pci_pci_scenario_ipw2100_pci_driver,(void *)cf_arg_13);
  #line 93 
  __VERIFIER_assume(ret == 0);
  #line 94 
  return;
}

#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_3(int arg0)
{
  #line 99 
  int ret;
  #line 100 
  struct emg_struct_free_irq_3 *cf_arg_11;
  #line 101 
  ret = pthread_join(emg_thread_11,(void **)0);
  #line 102 
  __VERIFIER_assume(ret == 0);
  #line 103 
  return;
}

#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_4(struct pci_driver *arg0)
{
  #line 108 
  int ret;
  #line 109 
  struct emg_struct_pci_scenario_ipw2100_pci_driver_13 *cf_arg_13;
  #line 110 
  ret = pthread_join(emg_thread_13,(void **)0);
  #line 111 
  __VERIFIER_assume(ret == 0);
  #line 112 
  return;
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct net_device *arg0)
{
  #line 117 
  int ret;
  #line 118 
  struct emg_struct_random_allocationless_scenario_ipw_ethtool_get_drvinfo_12 *cf_arg_12;
  #line 119 
  cf_arg_12 = (struct emg_struct_random_allocationless_scenario_ipw_ethtool_get_drvinfo_12 *)ldv_xmalloc(16UL);
  #line 120 
  cf_arg_12->arg0 = arg0;
  #line 121 
  ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_ipw_ethtool_get_drvinfo,(void *)cf_arg_12);
  #line 122 
  __VERIFIER_assume(ret == 0);
  #line 123 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_6(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 128 
  int ret;
  #line 129 
  struct emg_struct_interrupt_scenario_ipw2100_interrupt_11 *cf_arg_11;
  #line 130 
  cf_arg_11 = (struct emg_struct_interrupt_scenario_ipw2100_interrupt_11 *)ldv_xmalloc(40UL);
  #line 131 
  cf_arg_11->arg0 = arg0;
  #line 132 
  cf_arg_11->arg1 = arg1;
  #line 133 
  cf_arg_11->arg2 = arg2;
  #line 134 
  cf_arg_11->arg3 = arg3;
  #line 135 
  ret = pthread_create(& emg_thread_11,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_ipw2100_interrupt,(void *)cf_arg_11);
  #line 136 
  __VERIFIER_assume(ret == 0);
  #line 137 
  return;
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_10(struct net_device *arg0)
{
  #line 142 
  int ret;
  #line 143 
  struct emg_struct_random_allocationless_scenario_ipw_ethtool_get_drvinfo_12 *cf_arg_12;
  #line 144 
  ret = pthread_join(emg_thread_12,(void **)0);
  #line 145 
  __VERIFIER_assume(ret == 0);
  #line 146 
  return;
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_ipw2100_interrupt(void *arg0)
{
  #line 153 
  enum irqreturn (*emg_11_callback)(int , void *);
  #line 154 
  void *emg_11_data;
  #line 155 
  int emg_11_line;
  #line 156 
  enum irqreturn emg_11_ret_val;
  #line 157 
  enum irqreturn (*emg_11_thread)(int , void *);
  #line 159 
  struct emg_struct_interrupt_scenario_ipw2100_interrupt_11 *data = (struct emg_struct_interrupt_scenario_ipw2100_interrupt_11 *)arg0;
  #line 162 
  emg_11_callback = & emg_wrapper_ipw2100_interrupt;
  #line 165 
  if (data != (struct emg_struct_interrupt_scenario_ipw2100_interrupt_11 *)0) {
    #line 166 
    emg_11_line = data->arg0;
    #line 167 
    emg_11_callback = data->arg1;
    #line 168 
    emg_11_thread = data->arg2;
    #line 169 
    emg_11_data = data->arg3;
    #line 170 
    ldv_free((void *)data);
  }
  #line 176 
  ldv_switch_to_interrupt_context();
  #line 180 
  emg_11_ret_val = emg_wrapper_ipw2100_interrupt(emg_11_line,emg_11_data);
  #line 185 
  ldv_switch_to_process_context();
  #line 188 
  if (ldv_undef_int() != 0) {
    #line 190 
    __VERIFIER_assume(emg_11_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 194 
    if (emg_11_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 195 
                                                              (*emg_11_thread)(emg_11_line,emg_11_data);
  }
  else 
       #line 200 
       __VERIFIER_assume(emg_11_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 208 
  return (void *)0;
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_ipw_ethtool_get_drvinfo(void *arg0)
{
  #line 216 
  struct net_device *emg_12_container;
  #line 217 
  struct sk_buff *emg_12_emg_param_0_2;
  #line 218 
  struct ethtool_drvinfo *emg_12_emg_param_1_0;
  #line 219 
  void *emg_12_emg_param_1_1;
  #line 220 
  int emg_repeat_cnt_call_12 = 1;
  #line 222 
  struct emg_struct_random_allocationless_scenario_ipw_ethtool_get_drvinfo_12 *data = (struct emg_struct_random_allocationless_scenario_ipw_ethtool_get_drvinfo_12 *)arg0;
  #line 227 
  if (data != (struct emg_struct_random_allocationless_scenario_ipw_ethtool_get_drvinfo_12 *)0) {
    #line 228 
    emg_12_container = data->arg0;
    #line 229 
    ldv_free((void *)data);
  }
  #line 234 
  goto emg_call_12;
  #line 238 
  return (void *)0;
  #line 241 
  emg_call_12: 
               #line 241 
  ;
  #line 242 
  switch (ldv_undef_int()) {
    #line 243 
    case 0: 
            #line 243 
    ;
    #line 245 
    (*emg_alias_eth_validate_addr)(emg_12_container);
    #line 247 
    break;
    #line 249 
    case 1: 
            #line 249 
    ;
    #line 251 
    emg_wrapper_ipw2100_tx_timeout(emg_12_container);
    #line 253 
    break;
    #line 255 
    case 2: 
            #line 255 
    ;
    #line 257 
    emg_12_emg_param_0_2 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 257 
    emg_12_emg_param_0_2 = emg_12_emg_param_0_2;
    #line 261 
    libipw_xmit(emg_12_emg_param_0_2,emg_12_container);
    #line 265 
    ldv_free((void *)emg_12_emg_param_0_2);
    #line 267 
    break;
    #line 269 
    case 3: 
            #line 269 
    ;
    #line 271 
    emg_12_emg_param_1_1 = ldv_xmalloc_unknown_size(0UL);
    #line 271 
    emg_12_emg_param_1_1 = emg_12_emg_param_1_1;
    #line 275 
    emg_wrapper_ipw2100_set_address(emg_12_container,emg_12_emg_param_1_1);
    #line 279 
    ldv_free(emg_12_emg_param_1_1);
    #line 281 
    break;
    #line 283 
    case 4: 
            #line 283 
    ;
    #line 285 
    emg_wrapper_ipw2100_ethtool_get_link(emg_12_container);
    #line 287 
    break;
    #line 289 
    case 5: 
            #line 289 
    ;
    #line 291 
    emg_12_emg_param_1_0 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 291 
    emg_12_emg_param_1_0 = emg_12_emg_param_1_0;
    #line 295 
    emg_wrapper_ipw_ethtool_get_drvinfo(emg_12_container,emg_12_emg_param_1_0);
    #line 299 
    ldv_free((void *)emg_12_emg_param_1_0);
    #line 302 
    if (emg_repeat_cnt_call_12 > 0) {
      #line 303 
      emg_repeat_cnt_call_12 --;
      #line 305 
      goto emg_call_12;
    }
    else 
         #line 307 
         __VERIFIER_assume(0);
    #line 311 
    break;
    #line 313 
    case 6: 
            #line 313 
    ;
    #line 317 
    break;
    #line 319 
    default: 
             #line 319 
    ;
    #line 319 
    __VERIFIER_assume(0);
  }
  #line 322 
  return (void *)0;
}

#line 327  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_ipw2100_pci_driver(void *arg0)
{
  #line 330 
  int emg_13_choice;
  #line 331 
  struct pci_driver *emg_13_container;
  #line 332 
  struct pci_device_id *emg_13_device_id;
  #line 333 
  struct pci_dev *emg_13_resource_0;
  #line 334 
  struct pm_message emg_13_resource_1;
  #line 335 
  int emg_13_ret;
  #line 336 
  int emg_repeat_cnt_call_13_0 = 1;
  #line 337 
  int emg_repeat_cnt_call_13_1 = 1;
  #line 338 
  int emg_repeat_cnt_main_13_0 = 1;
  #line 339 
  int emg_repeat_cnt_main_13_1 = 1;
  #line 341 
  struct emg_struct_pci_scenario_ipw2100_pci_driver_13 *data = (struct emg_struct_pci_scenario_ipw2100_pci_driver_13 *)arg0;
  #line 345 
  emg_13_choice = 0;
  #line 346 
  emg_13_ret = ldv_undef_int();
  #line 347 
  emg_13_choice = 0;
  #line 348 
  emg_13_container = emg_alias_ipw2100_pci_driver;
  #line 349 
  emg_13_ret = ldv_undef_int();
  #line 351 
  __VERIFIER_assume(data->arg0 == emg_alias_ipw2100_pci_driver);
  #line 353 
  if (data != (struct emg_struct_pci_scenario_ipw2100_pci_driver_13 *)0) {
    #line 354 
    emg_13_container = data->arg0;
    #line 355 
    ldv_free((void *)data);
  }
  #line 360 
  emg_13_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 361 
  emg_13_choice = __ldv_undef_int_range(0,40);
  #line 362 
  emg_13_device_id = emg_13_container->id_table + (unsigned long)emg_13_choice;
  #line 366 
  goto emg_main_13;
  #line 370 
  return (void *)0;
  #line 373 
  emg_call_13: 
               #line 373 
  ;
  #line 374 
  switch (ldv_undef_int()) {
    #line 375 
    case 0: 
            #line 375 
    ;
    #line 380 
    if (emg_repeat_cnt_call_13_0 > 0) {
      #line 381 
      emg_repeat_cnt_call_13_0 --;
      #line 383 
      goto emg_call_13;
    }
    else 
         #line 385 
         __VERIFIER_assume(0);
    #line 389 
    break;
    #line 391 
    case 1: 
            #line 391 
    ;
    #line 393 
    emg_13_ret = emg_wrapper_ipw2100_suspend(emg_13_resource_0,emg_13_resource_1);
    #line 398 
    emg_13_ret = ldv_filter_err_code(emg_13_ret);
    #line 402 
    emg_wrapper_ipw2100_resume(emg_13_resource_0);
    #line 405 
    if (emg_repeat_cnt_call_13_1 > 0) {
      #line 406 
      emg_repeat_cnt_call_13_1 --;
      #line 408 
      goto emg_call_13;
    }
    else 
         #line 410 
         __VERIFIER_assume(0);
    #line 414 
    break;
    #line 416 
    case 2: 
            #line 416 
    ;
    #line 418 
    emg_wrapper_ipw2100_shutdown(emg_13_resource_0);
    #line 422 
    emg_wrapper_ipw2100_pci_remove_one(emg_13_resource_0);
    #line 425 
    if (emg_repeat_cnt_main_13_0 > 0) {
      #line 426 
      emg_repeat_cnt_main_13_0 --;
      #line 428 
      goto emg_main_13;
    }
    else 
         #line 430 
         __VERIFIER_assume(0);
    #line 434 
    break;
    #line 436 
    default: 
             #line 436 
    ;
    #line 436 
    __VERIFIER_assume(0);
  }
  #line 439 
  return (void *)0;
  #line 442 
  emg_main_13: 
               #line 442 
  ;
  #line 443 
  if (ldv_undef_int() != 0) {
    #line 446 
    ldv_pre_probe();
    #line 450 
    emg_13_ret = emg_wrapper_ipw2100_pci_init_one(emg_13_resource_0,emg_13_device_id);
    #line 455 
    emg_13_ret = ldv_post_probe(emg_13_ret);
    #line 458 
    if (ldv_undef_int() != 0) {
      #line 460 
      __VERIFIER_assume(emg_13_ret == 0);
      #line 464 
      goto emg_call_13;
    }
    else 
         #line 469 
         __VERIFIER_assume(emg_13_ret != 0);
    #line 473 
    if (emg_repeat_cnt_main_13_1 > 0) {
      #line 474 
      emg_repeat_cnt_main_13_1 --;
      #line 476 
      goto emg_main_13;
    }
    else 
         #line 478 
         __VERIFIER_assume(0);
  }
  else 
       #line 484 
       ldv_free((void *)emg_13_resource_0);
  #line 492 
  return (void *)0;
}

#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 500 
  struct pci_driver *emg_2_pci_driver;
  #line 502 
  emg_2_pci_driver = emg_alias_ipw2100_pci_driver;
  #line 503 
  if (ldv_undef_int() != 0) {
    #line 505 
    emg_2_pci_driver = arg0;
    #line 509 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 513 
    return 0;
  }
  else {
    #line 517 
    return ldv_undef_int_negative();
  }
}

#line 525  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 528 
  int emg_3_line;
  #line 531 
  emg_3_line = (int)arg0;
  #line 535 
  emg_dispatch_irq_deregister_3(emg_3_line);
  #line 536 
  ;
  #line 536 
  return (void *)0;
}

#line 542  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 545 
  struct pci_driver *emg_4_pci_driver;
  #line 547 
  emg_4_pci_driver = emg_alias_ipw2100_pci_driver;
  #line 549 
  emg_4_pci_driver = arg0;
  #line 553 
  emg_dispatch_deregister_4(emg_4_pci_driver);
  #line 556 
  return;
}

#line 561  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 564 
  struct net_device *emg_5_netdev;
  #line 565 
  int emg_5_ret;
  #line 568 
  emg_5_ret = ldv_undef_int();
  #line 569 
  emg_5_ret = ldv_undef_int();
  #line 570 
  if (ldv_undef_int() != 0) {
    #line 572 
    emg_5_netdev = arg0;
    #line 576 
    emg_5_ret = emg_wrapper_ipw2100_open(emg_5_netdev);
    #line 579 
    if (ldv_undef_int() != 0) {
      #line 581 
      __VERIFIER_assume(emg_5_ret == 0);
      #line 585 
      emg_dispatch_register_5(emg_5_netdev);
      #line 589 
      return 0;
    }
    else {
      #line 593 
      __VERIFIER_assume(emg_5_ret != 0);
      #line 594 
      ldv_failed_register_netdev();
      #line 595 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 600 
    ldv_failed_register_netdev();
    #line 601 
    return ldv_undef_int_negative();
  }
}

#line 609  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 612 
  enum irqreturn (*emg_6_callback)(int , void *);
  #line 613 
  void *emg_6_data;
  #line 614 
  int emg_6_line;
  #line 615 
  enum irqreturn (*emg_6_thread)(int , void *);
  #line 617 
  emg_6_callback = & emg_wrapper_ipw2100_interrupt;
  #line 618 
  if (ldv_undef_int() != 0) {
    #line 620 
    emg_6_line = (int)arg0;
    #line 621 
    emg_6_callback = arg1;
    #line 622 
    emg_6_thread = (enum irqreturn (*)(int , void *))0;
    #line 623 
    emg_6_data = arg4;
    #line 627 
    emg_dispatch_irq_register_6(emg_6_line,emg_6_callback,emg_6_thread,emg_6_data);
    #line 631 
    return 0;
  }
  else {
    #line 635 
    return ldv_undef_int_negative();
  }
}

#line 643  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 646 
  struct delayed_work *emg_7_delayed_work;
  #line 647 
  struct work_struct *emg_7_emg_param_0_0;
  #line 649 
  if (ldv_undef_int() != 0) {
    #line 651 
    emg_7_delayed_work = arg0;
    #line 655 
    emg_7_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 655 
    emg_7_emg_param_0_0 = emg_7_emg_param_0_0;
    #line 659 
    if (emg_7_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 660 
      (*(emg_7_delayed_work->work.func))(emg_7_emg_param_0_0);
    #line 665 
    ldv_free((void *)emg_7_emg_param_0_0);
    #line 669 
    return (_Bool)1;
  }
  else 
       #line 673 
       return (_Bool)0;
}

#line 681  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  #line 686 
  arg0->func = arg1;
  #line 687 
  arg0->data = arg2;
  #line 688 
  arg0->count.counter = 0;
  #line 691 
  return;
}

#line 696  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 699 
  unsigned long emg_9_emg_param_0_0;
  #line 700 
  struct tasklet_struct *emg_9_tasklet_struct;
  #line 703 
  emg_9_tasklet_struct = arg0;
  #line 707 
  if (emg_9_tasklet_struct->count.counter == 0) 
    #line 708 
    if (emg_9_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                   #line 709 
                                                                   (*(emg_9_tasklet_struct->func))(emg_9_emg_param_0_0);
  #line 714 
  return;
}

#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 722 
  struct net_device *emg_10_netdev;
  #line 725 
  emg_10_netdev = arg0;
  #line 729 
  emg_wrapper_ipw2100_close(emg_10_netdev);
  #line 733 
  emg_dispatch_deregister_10(emg_10_netdev);
  #line 736 
  return;
}

#line 741  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 744 
  int emg_1_ret;
  #line 747 
  emg_1_ret = emg_ipw2100_init();
  #line 748 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 751 
  if (ldv_undef_int() != 0) {
    #line 753 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 757 
    emg_ipw2100_exit();
  }
  else 
       #line 761 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 765 
  return (void *)0;
}

#line 770  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2100.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 772 
  ldv_initialize();
  #line 774 
  emg_entry_point_insmod((void *)0);
  #line 776 
  return 0;
}

