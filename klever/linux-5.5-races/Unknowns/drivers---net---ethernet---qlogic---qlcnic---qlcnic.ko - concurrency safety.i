/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long ulong;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_105 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_105 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_117 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_117 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_118 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_118 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_130 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_128 {
   struct __anonstruct_129 __anonCompField___anonunion_128_28 ;
   struct __anonstruct_130 __anonCompField___anonunion_128_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_128 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_131 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_131 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_136 {
   struct list_head slab_list ;
   struct __anonstruct_137 __anonCompField___anonunion_136_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_138 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_139 __anonCompField___anonunion_138_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_135 {
   union __anonunion_136 __anonCompField___anonstruct_135_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_138 __anonCompField___anonstruct_135_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_143 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_142 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_143 __anonCompField___anonstruct_142_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_144 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_132 {
   struct __anonstruct_133 __anonCompField___anonunion_132_31 ;
   struct __anonstruct_134 __anonCompField___anonunion_132_32 ;
   struct __anonstruct_135 __anonCompField___anonunion_132_37 ;
   struct __anonstruct_140 __anonCompField___anonunion_132_38 ;
   struct __anonstruct_141 __anonCompField___anonunion_132_39 ;
   struct __anonstruct_142 __anonCompField___anonunion_132_41 ;
   struct __anonstruct_144 __anonCompField___anonunion_132_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_145 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_132 __anonCompField_page_43 ;
   union __anonunion_145 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_146 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_147 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_147 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_251 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_251 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_252 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_252 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 143 
struct poll_table_struct;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_253 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_253 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_294 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_294 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_296 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_297 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_298 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_301 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_302 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_300 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_301 _addr_bnd ;
   struct __anonstruct__addr_pkey_302 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_299 {
   void *_addr ;
   union __anonunion_300 __anonCompField___anonstruct__sigfault_299_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_303 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_304 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_295 _kill ;
   struct __anonstruct__timer_296 _timer ;
   struct __anonstruct__rt_297 _rt ;
   struct __anonstruct__sigchld_298 _sigchld ;
   struct __anonstruct__sigfault_299 _sigfault ;
   struct __anonstruct__sigpoll_303 _sigpoll ;
   struct __anonstruct__sigsys_304 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_309 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_309 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_314 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_314 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_316 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_316 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_394 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_394 __anonCompField_pci_dev_56 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_408 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_407 {
   struct __anonstruct_408 __anonCompField___anonunion_407_57 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_407 __anonCompField_lockref_58 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_410 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_59 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_409 __anonCompField_qstr_60 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_412 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_411 __anonCompField_dentry_61 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_412 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_419 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_420 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_419 __anonCompField_io_cq_62 ;
   union __anonunion_420 __anonCompField_io_cq_63 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_421 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_421 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_422 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_422 __anonCompField_kqid_64 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_424 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_423 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_424 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_423 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_427 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_428 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_429 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_430 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_427 __anonCompField_inode_65 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_428 __anonCompField_inode_66 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_429 __anonCompField_inode_67 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_430 __anonCompField_inode_68 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_431 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_431 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_433 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_432 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_433 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_432 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_445 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_444 {
   struct __anonstruct_445 __anonCompField___anonunion_444_69 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_444 __anonCompField_ctl_table_header_70 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_449 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_449 __anonCompField_kernel_param_71 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_463 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_465 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_464 {
   unsigned long nr_segs ;
   struct __anonstruct_465 __anonCompField___anonunion_464_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_463 __anonCompField_iov_iter_72 ;
   union __anonunion_464 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_468 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_468 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_469 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_469 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_470 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_470 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_471 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_471 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_472 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_472 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_473 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_473 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_474 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_474 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_475 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_475 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_476 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_477 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_476 ifr_ifrn ;
   union __anonunion_ifr_ifru_477 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11221 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11221 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_512 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_512 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_513 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_513 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_524 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_525 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_526 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_527 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_524 ports ;
   struct __anonstruct_icmpt_525 icmpt ;
   struct __anonstruct_dnports_526 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_527 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_528 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_528 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_534 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_535 __anonCompField___anonstruct_534_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct __anonstruct_534 __anonCompField___anonunion_533_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_537 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   struct __anonstruct_539 __anonCompField___anonunion_538_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_541 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   __wsum csum ;
   struct __anonstruct_541 __anonCompField___anonunion_540_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_543 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_544 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_533 __anonCompField_sk_buff_92 ;
   union __anonunion_536 __anonCompField_sk_buff_93 ;
   union __anonunion_537 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_538 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_542 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_543 __anonCompField_sk_buff_100 ;
   union __anonunion_544 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_570 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_570 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_573 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_573 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_574 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_574 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_575 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_575 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_576 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_576 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_577 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_577 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 178 
struct fib_rules_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_579 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_579 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_592 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct __anonstruct_592 __anonCompField___anonunion_591_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_591 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_594 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct keyring_index_key index_key ;
   struct __anonstruct_596 __anonCompField___anonunion_595_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   union key_payload payload ;
   struct __anonstruct_598 __anonCompField___anonunion_597_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_593 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_594 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_595 __anonCompField_key_109 ;
   union __anonunion_597 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_601 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_601 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_604 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_603 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_604 __anonCompField___anonunion_603_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_603 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_608 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_608 __anonCompField___anonstruct_607_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_612 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   union __anonunion_614 __anonCompField___anonstruct_613_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_615 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_616 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_617 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_619 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_606 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_610 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_612 test ;
   struct __anonstruct_613 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_615 info ;
   struct __anonstruct_query_616 query ;
   struct __anonstruct_raw_tracepoint_617 raw_tracepoint ;
   struct __anonstruct_618 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_619 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_646 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_646 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_648 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct __anonstruct_tail_call_648 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_647 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_649 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_651 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_651 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_653 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_652 {
   struct __anonstruct_653 __anonCompField___anonunion_652_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_652 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15272 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15273 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct dn_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15272 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15273 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_697 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_697 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_698 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_698 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_701 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_702 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_704 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_705 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_703 {
   struct __anonstruct_elv_704 elv ;
   struct __anonstruct_flush_705 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_706 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_701 __anonCompField_request_164 ;
   union __anonunion_702 __anonCompField_request_165 ;
   union __anonunion_703 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_706 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
struct qlcnic_pci_info;
#line 140 
struct qlcnic_info;
#line 141 
struct qlcnic_cmd_args;
#line 142 
struct qlcnic_host_sds_ring;
#line 143 
struct qlcnic_host_tx_ring;
#line 144 
struct qlcnic_hardware_context;
#line 145 
struct qlcnic_adapter;
#line 146 
struct qlcnic_fw_dump;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct __host_producer_mbx {
   u32 reg_buf ;
   u32 jmb_buf ;
} __attribute__((__packed__));
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_rcv_mbx_out {
   u8 rcv_num ;
   u8 sts_num ;
   u16 ctx_id ;
   u8 state ;
   u8 num_pci_func ;
   u8 phy_port ;
   u8 vport_id ;
   u32 host_csmr[8U] ;
   struct __host_producer_mbx host_prod[8U] ;
} __attribute__((__packed__));
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_tx_mbx_out {
   u32 host_prod ;
   u16 ctx_id ;
   u8 state ;
   u8 rsvd ;
} __attribute__((__packed__));
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_intrpt_config {
   u8 type ;
   u8 enabled ;
   u16 id ;
   u32 src ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_macvlan_mbx {
   u8 mac_addr0 ;
   u8 mac_addr1 ;
   u8 mac_addr2 ;
   u8 mac_addr3 ;
   u8 mac_addr4 ;
   u8 mac_addr5 ;
   u16 vlan ;
};
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlc_83xx_fw_info {
   struct firmware *fw ;
   char fw_file_name[20U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlc_83xx_reset {
   struct qlc_83xx_reset_hdr *hdr ;
   int seq_index ;
   int seq_error ;
   int array_index ;
   u32 array[16U] ;
   u8 *buff ;
   u8 *stop_offset ;
   u8 *start_offset ;
   u8 *init_offset ;
   u8 seq_end ;
   u8 template_end ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlc_83xx_idc {
   int (*state_entry)(struct qlcnic_adapter *) ;
   u64 sec_counter ;
   u64 delay ;
   unsigned long status ;
   int err_code ;
   int collect_dump ;
   u8 curr_state ;
   u8 prev_state ;
   u8 vnic_state ;
   u8 vnic_wait_limit ;
   u8 quiesce_req ;
   u8 delay_reset ;
   char **name ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
struct qlcnic_dcb;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
struct qlcnic_dcb_ops {
   int (*query_hw_capability)(struct qlcnic_dcb *, char *) ;
   int (*get_hw_capability)(struct qlcnic_dcb *) ;
   int (*query_cee_param)(struct qlcnic_dcb *, char *, u8 ) ;
   void (*init_dcbnl_ops)(struct qlcnic_dcb *) ;
   void (*aen_handler)(struct qlcnic_dcb *, void *) ;
   int (*get_cee_cfg)(struct qlcnic_dcb *) ;
   void (*get_info)(struct qlcnic_dcb *) ;
   int (*attach)(struct qlcnic_dcb *) ;
   void (*free)(struct qlcnic_dcb *) ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
struct qlcnic_dcb {
   struct qlcnic_dcb_mbx_params *param ;
   struct qlcnic_adapter *adapter ;
   struct delayed_work aen_work ;
   struct workqueue_struct *wq ;
   struct qlcnic_dcb_ops *ops ;
   struct qlcnic_dcb_cfg *cfg ;
   unsigned long state ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct cmd_desc_type0 {
   u8 tcp_hdr_offset ;
   u8 ip_hdr_offset ;
   __le16 flags_opcode ;
   __le32 nfrags__length ;
   __le64 addr_buffer2 ;
   __le16 encap_descr ;
   __le16 mss ;
   u8 port_ctxid ;
   u8 hdr_length ;
   u8 outer_hdr_length ;
   u8 rsvd1 ;
   __le64 addr_buffer3 ;
   __le64 addr_buffer1 ;
   __le16 buffer_length[4U] ;
   __le64 addr_buffer4 ;
   u8 eth_addr[6U] ;
   __le16 vlan_TCI ;
} __attribute__((__aligned__(64)));
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct rcv_desc {
   __le16 reference_handle ;
   __le16 reserved ;
   __le32 buffer_length ;
   __le64 addr_buffer ;
} __attribute__((__packed__));
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct status_desc {
   __le64 status_desc_data[2U] ;
} __attribute__((__aligned__(16)));
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_fdt {
   u32 valid ;
   u16 ver ;
   u16 len ;
   u16 cksum ;
   u16 unused ;
   u8 model[16U] ;
   u8 mfg_id ;
   u16 id ;
   u8 flag ;
   u8 erase_cmd ;
   u8 alt_erase_cmd ;
   u8 write_enable_cmd ;
   u8 write_enable_bits ;
   u8 write_statusreg_cmd ;
   u8 unprotected_sec_cmd ;
   u8 read_manuf_cmd ;
   u32 block_size ;
   u32 alt_block_size ;
   u32 flash_size ;
   u32 write_enable_data ;
   u8 readid_addr_len ;
   u8 write_disable_bits ;
   u8 read_dev_id_len ;
   u8 chip_erase_cmd ;
   u16 read_timeo ;
   u8 protected_sec_cmd ;
   u8 resvd[65U] ;
};
#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_skb_frag {
   u64 dma ;
   u64 length ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cmd_buffer {
   struct sk_buff *skb ;
   struct qlcnic_skb_frag frag_array[18U] ;
   u32 frag_count ;
};
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_rx_buffer {
   u16 ref_handle ;
   struct sk_buff *skb ;
   struct list_head list ;
   u64 dma ;
};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_nic_intr_coalesce {
   u8 type ;
   u8 sts_ring_mask ;
   u16 rx_packets ;
   u16 rx_time_us ;
   u16 tx_packets ;
   u16 tx_time_us ;
   u16 flag ;
   u32 timer_out ;
};
#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_fw_dump {
   u8 clr ;
   bool enable ;
   u32 size ;
   u32 cap_mask ;
   void *data ;
   void *tmpl_hdr ;
   dma_addr_t phys_addr ;
   void *dma_buffer ;
   bool use_pex_dma ;
   u32 tmpl_hdr_size ;
   u32 version ;
   u32 num_entries ;
   u32 offset ;
};
#line 468 
struct qlcnic_hardware_ops;
#line 468 
struct qlcnic_sriov;
#line 468 
struct qlcnic_mailbox;
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hardware_context {
   void *pci_base0 ;
   void *ocm_win_crb ;
   unsigned long pci_len0 ;
   rwlock_t crb_lock ;
   struct mutex mem_lock ;
   u8 revision_id ;
   u8 pci_func ;
   u8 linkup ;
   u8 loopback_state ;
   u8 beacon_state ;
   u8 has_link_events ;
   u8 fw_type ;
   u8 physical_port ;
   u8 reset_context ;
   u8 msix_supported ;
   u8 max_mac_filters ;
   u8 mc_enabled ;
   u8 max_mc_count ;
   u8 diag_test ;
   u8 num_msix ;
   u8 nic_mode ;
   int diag_cnt ;
   u16 max_uc_count ;
   u16 port_type ;
   u16 board_type ;
   u16 supported_type ;
   u32 link_speed ;
   u16 link_duplex ;
   u16 link_autoneg ;
   u16 module_type ;
   u16 op_mode ;
   u16 switch_mode ;
   u16 max_tx_ques ;
   u16 max_rx_ques ;
   u16 max_mtu ;
   u32 msg_enable ;
   u16 total_nic_func ;
   u16 max_pci_func ;
   u32 max_vnic_func ;
   u32 total_pci_func ;
   u32 capabilities ;
   u32 extra_capability[3U] ;
   u32 temp ;
   u32 int_vec_bit ;
   u32 fw_hal_version ;
   u32 port_config ;
   struct qlcnic_hardware_ops *hw_ops ;
   struct qlcnic_nic_intr_coalesce coal ;
   struct qlcnic_fw_dump fw_dump ;
   struct qlcnic_fdt fdt ;
   struct qlc_83xx_reset reset ;
   struct qlc_83xx_idc idc ;
   struct qlc_83xx_fw_info *fw_info ;
   struct qlcnic_intrpt_config *intr_tbl ;
   struct qlcnic_sriov *sriov ;
   u32 *reg_tbl ;
   u32 *ext_reg_tbl ;
   u32 mbox_aen[5U] ;
   u32 mbox_reg[4U] ;
   struct qlcnic_mailbox *mailbox ;
   u8 extend_lb_time ;
   u8 phys_port_id[6U] ;
   u8 lb_mode ;
   u8 vxlan_port_count ;
   u16 vxlan_port ;
   struct device *hwmon_dev ;
   u32 post_mode ;
   bool run_post ;
};
#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_adapter_stats {
   u64 xmitcalled ;
   u64 xmitfinished ;
   u64 rxdropped ;
   u64 txdropped ;
   u64 csummed ;
   u64 rx_pkts ;
   u64 lro_pkts ;
   u64 rxbytes ;
   u64 txbytes ;
   u64 lrobytes ;
   u64 lso_frames ;
   u64 encap_lso_frames ;
   u64 encap_tx_csummed ;
   u64 encap_rx_csummed ;
   u64 xmit_on ;
   u64 xmit_off ;
   u64 skb_alloc_failure ;
   u64 null_rxbuf ;
   u64 rx_dma_map_error ;
   u64 tx_dma_map_error ;
   u64 spurious_intr ;
   u64 mac_filter_limit_overrun ;
   u64 mbx_spurious_intr ;
};
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_host_rds_ring {
   void *crb_rcv_producer ;
   struct rcv_desc *desc_head ;
   struct qlcnic_rx_buffer *rx_buf_arr ;
   u32 num_desc ;
   u32 producer ;
   u32 dma_size ;
   u32 skb_size ;
   u32 flags ;
   struct list_head free_list ;
   spinlock_t lock ;
   dma_addr_t phys_addr ;
} __attribute__((__aligned__(4096)));
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_host_sds_ring {
   u32 consumer ;
   u32 num_desc ;
   void *crb_sts_consumer ;
   struct qlcnic_host_tx_ring *tx_ring ;
   struct status_desc *desc_head ;
   struct qlcnic_adapter *adapter ;
   struct napi_struct napi ;
   struct list_head free_list[3U] ;
   void *crb_intr_mask ;
   int irq ;
   dma_addr_t phys_addr ;
   char name[28U] ;
} __attribute__((__aligned__(4096)));
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_tx_queue_stats {
   u64 xmit_on ;
   u64 xmit_off ;
   u64 xmit_called ;
   u64 xmit_finished ;
   u64 tx_bytes ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_host_tx_ring {
   int irq ;
   void *crb_intr_mask ;
   char name[28U] ;
   u16 ctx_id ;
   u32 state ;
   u32 producer ;
   u32 sw_consumer ;
   u32 num_desc ;
   struct qlcnic_tx_queue_stats tx_stats ;
   void *crb_cmd_producer ;
   struct cmd_desc_type0 *desc_head ;
   struct qlcnic_adapter *adapter ;
   struct napi_struct napi ;
   struct qlcnic_cmd_buffer *cmd_buf_arr ;
   __le32 *hw_consumer ;
   dma_addr_t phys_addr ;
   dma_addr_t hw_cons_phys_addr ;
   struct netdev_queue *txq ;
   spinlock_t tx_clean_lock ;
} __attribute__((__aligned__(4096)));
#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_recv_context {
   struct qlcnic_host_rds_ring *rds_rings ;
   struct qlcnic_host_sds_ring *sds_rings ;
   u32 state ;
   u16 context_id ;
   u16 virt_port ;
};
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_filter_hash {
   struct hlist_head *fhead ;
   u8 fnum ;
   u16 fmax ;
   u16 fbucket_size ;
};
#line 1091 
struct qlcnic_mbx_ops;
#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mailbox {
   struct workqueue_struct *work_q ;
   struct qlcnic_adapter *adapter ;
   struct qlcnic_mbx_ops *ops ;
   struct work_struct work ;
   struct completion completion ;
   struct list_head cmd_q ;
   unsigned long status ;
   spinlock_t queue_lock ;
   spinlock_t aen_lock ;
   u32 rsp_status ;
   u32 num_cmds ;
};
#line 1105 
struct qlcnic_npar_info;
#line 1105 
struct qlcnic_eswitch;
#line 1105 
struct qlcnic_nic_template;
#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_adapter {
   struct qlcnic_hardware_context *ahw ;
   struct qlcnic_recv_context *recv_ctx ;
   struct qlcnic_host_tx_ring *tx_ring ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   unsigned long state ;
   u32 flags ;
   u16 num_txd ;
   u16 num_rxd ;
   u16 num_jumbo_rxd ;
   u16 max_rxd ;
   u16 max_jumbo_rxd ;
   u8 max_rds_rings ;
   u8 max_sds_rings ;
   u8 max_tx_rings ;
   u8 drv_tx_rings ;
   u8 drv_sds_rings ;
   u8 drv_tss_rings ;
   u8 drv_rss_rings ;
   u8 rx_csum ;
   u8 portnum ;
   u8 fw_wait_cnt ;
   u8 fw_fail_cnt ;
   u8 tx_timeo_cnt ;
   u8 need_fw_reset ;
   u8 reset_ctx_cnt ;
   u16 is_up ;
   u16 rx_pvid ;
   u16 tx_pvid ;
   u32 irq ;
   u32 heartbeat ;
   u8 dev_state ;
   u8 reset_ack_timeo ;
   u8 dev_init_timeo ;
   u8 mac_addr[6U] ;
   u64 dev_rst_time ;
   bool drv_mac_learn ;
   bool fdb_mac_learn ;
   bool rx_mac_learn ;
   unsigned long vlans[64U] ;
   u8 flash_mfg_id ;
   struct qlcnic_npar_info *npars ;
   struct qlcnic_eswitch *eswitch ;
   struct qlcnic_nic_template *nic_ops ;
   struct qlcnic_adapter_stats stats ;
   struct list_head mac_list ;
   void *tgt_mask_reg ;
   void *tgt_status_reg ;
   void *crb_int_state_reg ;
   void *isr_int_vec ;
   struct msix_entry *msix_entries ;
   struct workqueue_struct *qlcnic_wq ;
   struct delayed_work fw_work ;
   struct delayed_work idc_aen_work ;
   struct delayed_work mbx_poll_work ;
   struct qlcnic_dcb *dcb ;
   struct qlcnic_filter_hash fhash ;
   struct qlcnic_filter_hash rx_fhash ;
   struct list_head vf_mc_list ;
   spinlock_t mac_learn_lock ;
   spinlock_t rx_mac_learn_lock ;
   u32 file_prd_off ;
   u32 fw_version ;
   u32 offload_flags ;
   struct firmware *fw ;
};
#line 1231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_info {
   u16 pci_func ;
   u16 op_mode ;
   u16 phys_port ;
   u16 switch_mode ;
   u32 capabilities ;
   u8 max_mac_filters ;
   u16 max_mtu ;
   u16 max_tx_ques ;
   u16 max_rx_ques ;
   u16 min_tx_bw ;
   u16 max_tx_bw ;
   u32 op_type ;
   u16 max_bw_reg_offset ;
   u16 max_linkspeed_reg_offset ;
   u32 capability1 ;
   u32 capability2 ;
   u32 capability3 ;
   u16 max_tx_mac_filters ;
   u16 max_rx_mcast_mac_filters ;
   u16 max_rx_ucast_mac_filters ;
   u16 max_rx_ip_addr ;
   u16 max_rx_lro_flow ;
   u16 max_rx_status_rings ;
   u16 max_rx_buf_rings ;
   u16 max_tx_vlan_keys ;
   u8 total_pf ;
   u8 total_rss_engines ;
   u16 max_vports ;
   u16 linkstate_reg_offset ;
   u16 bit_offsets ;
   u16 max_local_ipv6_addrs ;
   u16 max_remote_ipv6_addrs ;
};
#line 1282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_pci_info {
   u16 id ;
   u16 active ;
   u16 type ;
   u16 default_port ;
   u16 tx_min_bw ;
   u16 tx_max_bw ;
   u8 mac[6U] ;
   u16 func_count ;
};
#line 1293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_npar_info {
   bool eswitch_status ;
   u16 pvid ;
   u16 min_bw ;
   u16 max_bw ;
   u8 phy_port ;
   u8 type ;
   u8 active ;
   u8 enable_pm ;
   u8 dest_npar ;
   u8 discard_tagged ;
   u8 mac_override ;
   u8 mac_anti_spoof ;
   u8 promisc_mode ;
   u8 offload_flags ;
   u8 pci_func ;
   u8 mac[6U] ;
};
#line 1312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_eswitch {
   u8 port ;
   u8 active_vports ;
   u8 active_vlans ;
   u8 active_ucast_filters ;
   u8 max_ucast_filters ;
   u8 max_active_vlans ;
   u32 flags ;
};
#line 1520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct _cdrp_cmd {
   u32 num ;
   u32 *arg ;
};
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cmd_args {
   struct completion completion ;
   struct list_head list ;
   struct _cdrp_cmd req ;
   struct _cdrp_cmd rsp ;
   atomic_t rsp_status ;
   int pay_size ;
   u32 rsp_opcode ;
   u32 total_cmds ;
   u32 op_type ;
   u32 type ;
   u32 cmd_op ;
   u32 *hdr ;
   u32 *pay ;
   u8 func_num ;
};
#line 1735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_nic_template {
   int (*config_bridged_mode)(struct qlcnic_adapter *, u32 ) ;
   int (*config_led)(struct qlcnic_adapter *, u32 , u32 ) ;
   int (*start_firmware)(struct qlcnic_adapter *) ;
   int (*init_driver)(struct qlcnic_adapter *) ;
   void (*request_reset)(struct qlcnic_adapter *, u32 ) ;
   void (*cancel_idc_work)(struct qlcnic_adapter *) ;
   int (*napi_add)(struct qlcnic_adapter *, struct net_device *) ;
   void (*napi_del)(struct qlcnic_adapter *) ;
   void (*config_ipaddr)(struct qlcnic_adapter *, __be32 , int ) ;
   irqreturn_t (*clear_legacy_intr)(struct qlcnic_adapter *) ;
   int (*shutdown)(struct pci_dev *) ;
   int (*resume)(struct qlcnic_adapter *) ;
};
#line 1750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mbx_ops {
   int (*enqueue_cmd)(struct qlcnic_adapter *, struct qlcnic_cmd_args *, unsigned long *) ;
   void (*dequeue_cmd)(struct qlcnic_adapter *, struct qlcnic_cmd_args *) ;
   void (*decode_resp)(struct qlcnic_adapter *, struct qlcnic_cmd_args *) ;
   void (*encode_cmd)(struct qlcnic_adapter *, struct qlcnic_cmd_args *) ;
   void (*nofity_fw)(struct qlcnic_adapter *, u8 ) ;
};
#line 1766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hardware_ops {
   void (*read_crb)(struct qlcnic_adapter *, char *, loff_t , size_t ) ;
   void (*write_crb)(struct qlcnic_adapter *, char *, loff_t , size_t ) ;
   int (*read_reg)(struct qlcnic_adapter *, ulong , int *) ;
   int (*write_reg)(struct qlcnic_adapter *, ulong , u32 ) ;
   void (*get_ocm_win)(struct qlcnic_hardware_context *) ;
   int (*get_mac_address)(struct qlcnic_adapter *, u8 *, u8 ) ;
   int (*setup_intr)(struct qlcnic_adapter *) ;
   int (*alloc_mbx_args)(struct qlcnic_cmd_args *, struct qlcnic_adapter *, u32 ) ;
   int (*mbx_cmd)(struct qlcnic_adapter *, struct qlcnic_cmd_args *) ;
   void (*get_func_no)(struct qlcnic_adapter *) ;
   int (*api_lock)(struct qlcnic_adapter *) ;
   void (*api_unlock)(struct qlcnic_adapter *) ;
   void (*add_sysfs)(struct qlcnic_adapter *) ;
   void (*remove_sysfs)(struct qlcnic_adapter *) ;
   void (*process_lb_rcv_ring_diag)(struct qlcnic_host_sds_ring *) ;
   int (*create_rx_ctx)(struct qlcnic_adapter *) ;
   int (*create_tx_ctx)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *, int ) ;
   void (*del_rx_ctx)(struct qlcnic_adapter *) ;
   void (*del_tx_ctx)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *) ;
   int (*setup_link_event)(struct qlcnic_adapter *, int ) ;
   int (*get_nic_info)(struct qlcnic_adapter *, struct qlcnic_info *, u8 ) ;
   int (*get_pci_info)(struct qlcnic_adapter *, struct qlcnic_pci_info *) ;
   int (*set_nic_info)(struct qlcnic_adapter *, struct qlcnic_info *) ;
   int (*change_macvlan)(struct qlcnic_adapter *, u8 *, u16 , u8 ) ;
   void (*napi_enable)(struct qlcnic_adapter *) ;
   void (*napi_disable)(struct qlcnic_adapter *) ;
   int (*config_intr_coal)(struct qlcnic_adapter *, struct ethtool_coalesce *) ;
   int (*config_rss)(struct qlcnic_adapter *, int ) ;
   int (*config_hw_lro)(struct qlcnic_adapter *, int ) ;
   int (*config_loopback)(struct qlcnic_adapter *, u8 ) ;
   int (*clear_loopback)(struct qlcnic_adapter *, u8 ) ;
   int (*config_promisc_mode)(struct qlcnic_adapter *, u32 ) ;
   void (*change_l2_filter)(struct qlcnic_adapter *, u64 *, u16 , struct qlcnic_host_tx_ring *) ;
   int (*get_board_info)(struct qlcnic_adapter *) ;
   void (*set_mac_filter_count)(struct qlcnic_adapter *) ;
   void (*free_mac_list)(struct qlcnic_adapter *) ;
   int (*read_phys_port_id)(struct qlcnic_adapter *) ;
   pci_ers_result_t (*io_error_detected)(struct pci_dev *, pci_channel_state_t ) ;
   pci_ers_result_t (*io_slot_reset)(struct pci_dev *) ;
   void (*io_resume)(struct pci_dev *) ;
   void (*get_beacon_state)(struct qlcnic_adapter *) ;
   void (*enable_sds_intr)(struct qlcnic_adapter *, struct qlcnic_host_sds_ring *) ;
   void (*disable_sds_intr)(struct qlcnic_adapter *, struct qlcnic_host_sds_ring *) ;
   void (*enable_tx_intr)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *) ;
   void (*disable_tx_intr)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *) ;
   u32 (*get_saved_state)(void *, u32 ) ;
   void (*set_saved_state)(void *, u32 , u32 ) ;
   void (*cache_tmpl_hdr_values)(struct qlcnic_fw_dump *) ;
   u32 (*get_cap_size)(void *, int ) ;
   void (*set_sys_info)(void *, int , u32 ) ;
   void (*store_cap_mask)(void *, u32 ) ;
   bool (*encap_rx_offload)(struct qlcnic_adapter *) ;
   bool (*encap_tx_offload)(struct qlcnic_adapter *) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_bc_payload {
   u64 payload[126U] ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_bc_hdr {
   u8 version ;
   u8 msg_type : 4 ;
   u8 rsvd1 : 3 ;
   u8 op_type : 1 ;
   u8 num_cmds ;
   u8 num_frags ;
   u8 frag_num ;
   u8 cmd_op ;
   u16 seq_id ;
   u64 rsvd3 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_trans_list {
   spinlock_t lock ;
   struct list_head wait_list ;
   int count ;
};
#line 65 
enum qlcnic_trans_state {
    QLC_INIT = 0,
    QLC_WAIT_FOR_CHANNEL_FREE = 1,
    QLC_WAIT_FOR_RESP = 2,
    QLC_ABORT = 3,
    QLC_END = 4
};
#line 74 
struct qlcnic_vf_info;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_bc_trans {
   u8 func_id ;
   u8 active ;
   u8 curr_rsp_frag ;
   u8 curr_req_frag ;
   u16 cmd_id ;
   u16 req_pay_size ;
   u16 rsp_pay_size ;
   u32 trans_id ;
   enum qlcnic_trans_state trans_state ;
   struct list_head list ;
   struct qlcnic_bc_hdr *req_hdr ;
   struct qlcnic_bc_hdr *rsp_hdr ;
   struct qlcnic_bc_payload *req_pay ;
   struct qlcnic_bc_payload *rsp_pay ;
   struct completion resp_cmpl ;
   struct qlcnic_vf_info *vf ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_resources {
   u16 num_tx_mac_filters ;
   u16 num_rx_ucast_mac_filters ;
   u16 num_rx_mcast_mac_filters ;
   u16 num_txvlan_keys ;
   u16 num_rx_queues ;
   u16 num_tx_queues ;
   u16 num_rx_buf_rings ;
   u16 num_rx_status_rings ;
   u16 num_destip ;
   u32 num_lro_flows_supported ;
   u16 max_local_ipv6_addrs ;
   u16 max_remote_ipv6_addrs ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_vport {
   u16 handle ;
   u16 max_tx_bw ;
   u16 min_tx_bw ;
   u16 pvid ;
   u8 vlan_mode ;
   u8 qos ;
   bool spoofchk ;
   u8 mac[6U] ;
};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_vf_info {
   u8 pci_func ;
   u16 rx_ctx_id ;
   u16 tx_ctx_id ;
   u16 *sriov_vlans ;
   int num_vlan ;
   unsigned long state ;
   struct completion ch_free_cmpl ;
   struct work_struct trans_work ;
   struct work_struct flr_work ;
   struct mutex send_cmd_lock ;
   struct qlcnic_bc_trans *send_cmd ;
   struct qlcnic_bc_trans *flr_trans ;
   struct qlcnic_trans_list rcv_act ;
   struct qlcnic_trans_list rcv_pend ;
   struct qlcnic_adapter *adapter ;
   struct qlcnic_vport *vp ;
   spinlock_t vlan_list_lock ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_back_channel {
   u16 trans_counter ;
   struct workqueue_struct *bc_trans_wq ;
   struct workqueue_struct *bc_async_wq ;
   struct workqueue_struct *bc_flr_wq ;
   struct qlcnic_adapter *adapter ;
   struct list_head async_cmd_list ;
   struct work_struct vf_async_work ;
   spinlock_t queue_lock ;
};
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_sriov {
   u16 vp_handle ;
   u8 num_vfs ;
   u8 any_vlan ;
   u8 vlan_mode ;
   u16 num_allowed_vlans ;
   u16 *allowed_vlans ;
   u16 vlan ;
   struct qlcnic_resources ff_max ;
   struct qlcnic_back_channel bc ;
   struct qlcnic_vf_info *vf_info ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
struct qlcnic_sriov_cmd_handler {
   int (*fn)(struct qlcnic_bc_trans *, struct qlcnic_cmd_args *) ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
struct qlcnic_sriov_fw_cmd_handler {
   u32 cmd ;
   int (*fn)(struct qlcnic_bc_trans *, struct qlcnic_cmd_args *) ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_979 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_979 key ;
} __attribute__((__aligned__(8)));
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_983 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_985 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_987 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1037 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1039 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
struct qlcnic_mailbox_metadata {
   u32 cmd ;
   u32 in_args ;
   u32 out_args ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_sds_mbx {
   u32 phy_addr_low ;
   u32 phy_addr_high ;
   u32 rsvd1[4U] ;
   u16 sds_ring_size ;
   u16 rsvd2 ;
   u16 rsvd3[2U] ;
   u16 intrpt_id ;
   u8 intrpt_val ;
   u8 rsvd4 ;
   u32 rsvd5 ;
} __attribute__((__packed__));
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_rds_mbx {
   u32 phy_addr_reg_low ;
   u32 phy_addr_reg_high ;
   u32 phy_addr_jmb_low ;
   u32 phy_addr_jmb_high ;
   u16 reg_ring_sz ;
   u16 reg_ring_len ;
   u16 jmb_ring_sz ;
   u16 jmb_ring_len ;
} __attribute__((__packed__));
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_add_rings_mbx_out {
   u8 rcv_num ;
   u8 sts_num ;
   u16 ctx_id ;
   u32 host_csmr[8U] ;
   struct __host_producer_mbx host_prod[8U] ;
} __attribute__((__packed__));
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_tx_mbx {
   u32 phys_addr_low ;
   u32 phys_addr_high ;
   u32 cnsmr_index_low ;
   u32 cnsmr_index_high ;
   u16 size ;
   u16 intr_id ;
   u8 src ;
   u8 rsvd[3U] ;
} __attribute__((__packed__));
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1957 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1959 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1961 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
enum qlcnic_vlan_operations {
    QLC_VLAN_ADD = 0,
    QLC_VLAN_DELETE = 1
};
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
enum qlcnic_mac_type {
    QLCNIC_UNICAST_MAC = 0,
    QLCNIC_MULTICAST_MAC = 1,
    QLCNIC_BROADCAST_MAC = 2
};
#line 857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mac_vlan_list {
   struct list_head list ;
   uint8_t mac_addr[8U] ;
   u16 vlan_id ;
   enum qlcnic_mac_type mac_type ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_async_cmd {
   struct list_head list ;
   struct qlcnic_cmd_args *cmd ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2925 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2927 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2929 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2933 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_3896 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_3896 __anonCompField_ip_ra_chain_195 ;
   struct callback_head rcu ;
};
#line 938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hdr.h"
struct crb_128M_2M_sub_block_map {
   unsigned int valid ;
   unsigned int start_128M ;
   unsigned int end_128M ;
   unsigned int start_2M ;
};
#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hdr.h"
struct crb_128M_2M_block_map {
   struct crb_128M_2M_sub_block_map sub_block[16U] ;
};
#line 986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_nic_req {
   __le64 qhdr ;
   __le64 req_hdr ;
   __le64 words[6U] ;
} __attribute__((__packed__));
#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mac_req {
   u8 op ;
   u8 tag ;
   u8 mac_addr[6U] ;
};
#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_vlan_req {
   __le16 vlan_id ;
   __le16 rsvd[3U] ;
} __attribute__((__packed__));
#line 1003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_ipaddr {
   __be32 ipv4 ;
   __be32 ipv6[4U] ;
};
#line 1076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_filter {
   struct hlist_node fnode ;
   u8 faddr[6U] ;
   u16 vlan_id ;
   unsigned long ftime ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
struct qlcnic_ms_reg_ctrl {
   u32 ocm_window ;
   u32 control ;
   u32 hi ;
   u32 low ;
   u32 rd[4U] ;
   u32 wd[4U] ;
   u64 off ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct in_ifaddr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct ipv4_devconf {
   void *sysctl ;
   int data[32U] ;
   unsigned long state[1U] ;
};
#line 25 
struct ip_mc_list;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_device {
   struct net_device *dev ;
   refcount_t refcnt ;
   int dead ;
   struct in_ifaddr *ifa_list ;
   struct ip_mc_list *mc_list ;
   struct ip_mc_list **mc_hash ;
   int mc_count ;
   spinlock_t mc_tomb_lock ;
   struct ip_mc_list *mc_tomb ;
   unsigned long mr_v1_seen ;
   unsigned long mr_v2_seen ;
   unsigned long mr_maxdelay ;
   unsigned long mr_qi ;
   unsigned long mr_qri ;
   unsigned char mr_qrv ;
   unsigned char mr_gq_running ;
   unsigned char mr_ifc_count ;
   struct timer_list mr_gq_timer ;
   struct timer_list mr_ifc_timer ;
   struct neigh_parms *arp_parms ;
   struct ipv4_devconf cnf ;
   struct callback_head callback_head ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_ifaddr {
   struct hlist_node hash ;
   struct in_ifaddr *ifa_next ;
   struct in_device *ifa_dev ;
   struct callback_head callback_head ;
   __be32 ifa_local ;
   __be32 ifa_address ;
   __be32 ifa_mask ;
   __u32 ifa_rt_priority ;
   __be32 ifa_broadcast ;
   unsigned char ifa_scope ;
   unsigned char ifa_prefixlen ;
   __u32 ifa_flags ;
   char ifa_label[16U] ;
   __u32 ifa_valid_lft ;
   __u32 ifa_preferred_lft ;
   unsigned long ifa_cstamp ;
   unsigned long ifa_tstamp ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hwmon-sysfs.h"
struct sensor_device_attribute {
   struct device_attribute dev_attr ;
   int index ;
};
#line 1337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_pci_func_cfg {
   u16 func_type ;
   u16 min_bw ;
   u16 max_bw ;
   u16 port_num ;
   u8 pci_func ;
   u8 func_state ;
   u8 def_mac_addr[6U] ;
};
#line 1347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_npar_func_cfg {
   u32 fw_capab ;
   u16 port_num ;
   u16 min_bw ;
   u16 max_bw ;
   u16 max_tx_queues ;
   u16 max_rx_queues ;
   u8 pci_func ;
   u8 op_mode ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_pm_func_cfg {
   u8 pci_func ;
   u8 action ;
   u8 dest_npar ;
   u8 reserved[5U] ;
};
#line 1365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_esw_func_cfg {
   u16 vlan_id ;
   u8 op_mode ;
   u8 op_type ;
   u8 pci_func ;
   u8 host_vlan_tag ;
   u8 promisc_mode ;
   u8 discard_tagged ;
   u8 mac_override ;
   u8 mac_anti_spoof ;
   u8 offload_flags ;
   u8 reserved[5U] ;
};
#line 1493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct __qlcnic_esw_statistics {
   u16 context_id ;
   u16 version ;
   u16 size ;
   u16 unused ;
   u64 unicast_frames ;
   u64 multicast_frames ;
   u64 broadcast_frames ;
   u64 dropped_frames ;
   u64 errors ;
   u64 local_frames ;
   u64 numbytes ;
   u64 rsvd[3U] ;
};
#line 1508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_esw_statistics {
   struct __qlcnic_esw_statistics rx ;
   struct __qlcnic_esw_statistics tx ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_BIND = 6,
    KOBJ_UNBIND = 7,
    KOBJ_MAX = 8
};
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_83xx_dump_template_hdr {
   u32 type ;
   u32 offset ;
   u32 size ;
   u32 cap_mask ;
   u32 num_entries ;
   u32 version ;
   u32 timestamp ;
   u32 checksum ;
   u32 drv_cap_mask ;
   u32 sys_info[3U] ;
   u32 saved_state[16U] ;
   u32 cap_sizes[8U] ;
   u32 ocm_wnd_reg[16U] ;
   u32 rsvd[0U] ;
};
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_82xx_dump_template_hdr {
   u32 type ;
   u32 offset ;
   u32 size ;
   u32 cap_mask ;
   u32 num_entries ;
   u32 version ;
   u32 timestamp ;
   u32 checksum ;
   u32 drv_cap_mask ;
   u32 sys_info[3U] ;
   u32 saved_state[16U] ;
   u32 cap_sizes[8U] ;
   u32 rsvd[7U] ;
   u32 capabilities ;
   u32 rsvd1[0U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct qlcnic_pex_dma_descriptor {
   u32 read_data_size ;
   u32 dma_desc_cmd ;
   u32 src_addr_low ;
   u32 src_addr_high ;
   u32 dma_bus_addr_low ;
   u32 dma_bus_addr_high ;
   u32 rsvd[6U] ;
} __attribute__((__packed__));
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct qlcnic_common_entry_hdr {
   u32 type ;
   u32 offset ;
   u32 cap_size ;
   u8 mask ;
   u8 rsvd[2U] ;
   u8 flags ;
} __attribute__((__packed__));
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __crb {
   u32 addr ;
   u8 stride ;
   u8 rsvd1[3U] ;
   u32 data_size ;
   u32 no_ops ;
   u32 rsvd2[4U] ;
} __attribute__((__packed__));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __ctrl {
   u32 addr ;
   u8 stride ;
   u8 index_a ;
   u16 timeout ;
   u32 data_size ;
   u32 no_ops ;
   u8 opcode ;
   u8 index_v ;
   u8 shl_val ;
   u8 shr_val ;
   u32 val1 ;
   u32 val2 ;
   u32 val3 ;
} __attribute__((__packed__));
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __cache {
   u32 addr ;
   u16 stride ;
   u16 init_tag_val ;
   u32 size ;
   u32 no_ops ;
   u32 ctrl_addr ;
   u32 ctrl_val ;
   u32 read_addr ;
   u8 read_addr_stride ;
   u8 read_addr_num ;
   u8 rsvd1[2U] ;
} __attribute__((__packed__));
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __ocm {
   u8 rsvd[8U] ;
   u32 size ;
   u32 no_ops ;
   u8 rsvd1[8U] ;
   u32 read_addr ;
   u32 read_addr_stride ;
} __attribute__((__packed__));
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __mem {
   u32 desc_card_addr ;
   u32 dma_desc_cmd ;
   u32 start_dma_cmd ;
   u32 rsvd[3U] ;
   u32 addr ;
   u32 size ;
} __attribute__((__packed__));
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __mux {
   u32 addr ;
   u8 rsvd[4U] ;
   u32 size ;
   u32 no_ops ;
   u32 val ;
   u32 val_stride ;
   u32 read_addr ;
   u8 rsvd2[4U] ;
} __attribute__((__packed__));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __queue {
   u32 sel_addr ;
   u16 stride ;
   u8 rsvd[2U] ;
   u32 size ;
   u32 no_ops ;
   u8 rsvd2[8U] ;
   u32 read_addr ;
   u8 read_addr_stride ;
   u8 read_addr_cnt ;
   u8 rsvd3[2U] ;
} __attribute__((__packed__));
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __pollrd {
   u32 sel_addr ;
   u32 read_addr ;
   u32 sel_val ;
   u16 sel_val_stride ;
   u16 no_ops ;
   u32 poll_wait ;
   u32 poll_mask ;
   u32 data_size ;
   u8 rsvd[4U] ;
} __attribute__((__packed__));
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __mux2 {
   u32 sel_addr1 ;
   u32 sel_addr2 ;
   u32 sel_val1 ;
   u32 sel_val2 ;
   u32 no_ops ;
   u32 sel_val_mask ;
   u32 read_addr ;
   u8 sel_val_stride ;
   u8 data_size ;
   u8 rsvd[2U] ;
} __attribute__((__packed__));
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __pollrdmwr {
   u32 addr1 ;
   u32 addr2 ;
   u32 val1 ;
   u32 val2 ;
   u32 poll_wait ;
   u32 poll_mask ;
   u32 mod_mask ;
   u32 data_size ;
} __attribute__((__packed__));
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
union __anonunion_region_5920 {
   struct __crb crb ;
   struct __cache cache ;
   struct __ocm ocm ;
   struct __mem mem ;
   struct __mux mux ;
   struct __queue que ;
   struct __ctrl ctrl ;
   struct __pollrdmwr pollrdmwr ;
   struct __mux2 mux2 ;
   struct __pollrd pollrd ;
};
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct qlcnic_dump_entry {
   struct qlcnic_common_entry_hdr hdr ;
   union __anonunion_region_5920 region ;
} __attribute__((__packed__));
#line 244 
enum qlcnic_minidump_opcode {
    QLCNIC_DUMP_NOP = 0,
    QLCNIC_DUMP_READ_CRB = 1,
    QLCNIC_DUMP_READ_MUX = 2,
    QLCNIC_DUMP_QUEUE = 3,
    QLCNIC_DUMP_BRD_CONFIG = 4,
    QLCNIC_DUMP_READ_OCM = 6,
    QLCNIC_DUMP_PEG_REG = 7,
    QLCNIC_DUMP_L1_DTAG = 8,
    QLCNIC_DUMP_L1_ITAG = 9,
    QLCNIC_DUMP_L1_DATA = 11,
    QLCNIC_DUMP_L1_INST = 12,
    QLCNIC_DUMP_L2_DTAG = 21,
    QLCNIC_DUMP_L2_ITAG = 22,
    QLCNIC_DUMP_L2_DATA = 23,
    QLCNIC_DUMP_L2_INST = 24,
    QLCNIC_DUMP_POLL_RD = 35,
    QLCNIC_READ_MUX2 = 36,
    QLCNIC_READ_POLLRDMWR = 37,
    QLCNIC_DUMP_READ_ROM = 71,
    QLCNIC_DUMP_READ_MEM = 72,
    QLCNIC_DUMP_READ_CTRL = 98,
    QLCNIC_DUMP_TLHDR = 99,
    QLCNIC_DUMP_RDEND = 255
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct qlcnic_dump_operations {
   enum qlcnic_minidump_opcode opcode ;
   u32 (*handler)(struct qlcnic_adapter *, struct qlcnic_dump_entry *, __le32 *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_capability {
   bool tsa_capability ;
   bool ets_capability ;
   u8 max_num_tc ;
   u8 max_ets_tc ;
   u8 max_pfc_tc ;
   u8 dcb_capability ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_param {
   u32 hdr_prio_pfc_map[2U] ;
   u32 prio_pg_map[2U] ;
   u32 pg_bw_map[2U] ;
   u32 pg_tsa_map[2U] ;
   u32 app[8U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_mbx_params {
   struct qlcnic_dcb_param type[3U] ;
   u32 prio_tc_map ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_82xx_dcb_param_mbx_le {
   __le32 hdr_prio_pfc_map[2U] ;
   __le32 prio_pg_map[2U] ;
   __le32 pg_bw_map[2U] ;
   __le32 pg_tsa_map[2U] ;
   __le32 app[8U] ;
};
#line 105 
enum qlcnic_dcb_selector {
    QLC_SELECTOR_DEF = 0,
    QLC_SELECTOR_ETHER = 1,
    QLC_SELECTOR_TCP = 2,
    QLC_SELECTOR_UDP = 3
};
#line 112 
enum qlcnic_dcb_prio_type {
    QLC_PRIO_NONE = 0,
    QLC_PRIO_GROUP = 1,
    QLC_PRIO_LINK = 2
};
#line 118 
enum qlcnic_dcb_pfc_type {
    QLC_PFC_DISABLED = 0,
    QLC_PFC_FULL = 1,
    QLC_PFC_TX = 2,
    QLC_PFC_RX = 3
};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_prio_cfg {
   bool valid ;
   enum qlcnic_dcb_pfc_type pfc_type ;
};
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_pg_cfg {
   bool valid ;
   u8 total_bw_percent ;
   u8 prio_count ;
   u8 tsa_type ;
};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_tc_cfg {
   bool valid ;
   struct qlcnic_dcb_prio_cfg prio_cfg[8U] ;
   enum qlcnic_dcb_prio_type prio_type ;
   u8 link_percent ;
   u8 bwg_percent ;
   u8 up_tc_map ;
   u8 pgid ;
};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_app {
   bool valid ;
   enum qlcnic_dcb_selector selector ;
   u16 protocol ;
   u8 priority ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_cee {
   struct qlcnic_dcb_tc_cfg tc_cfg[8U] ;
   struct qlcnic_dcb_pg_cfg pg_cfg[8U] ;
   struct qlcnic_dcb_app app[8U] ;
   bool tc_param_valid ;
   bool pfc_mode_enable ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_cfg {
   struct qlcnic_dcb_cee type[3U] ;
   struct qlcnic_dcb_capability capability ;
   u32 version ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_6902 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct uni_table_desc {
   __le32 findex ;
   __le32 num_entries ;
   __le32 entry_size ;
   __le32 reserved[5U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct uni_data_desc {
   __le32 findex ;
   __le32 size ;
   __le32 reserved[5U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_flt_header {
   u16 version ;
   u16 len ;
   u16 checksum ;
   u16 reserved ;
};
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_flt_entry {
   u8 region ;
   u8 reserved0 ;
   u8 attrib ;
   u8 reserved1 ;
   u32 size ;
   u32 start_addr ;
   u32 end_addr ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
struct crb_addr_pair {
   u32 addr ;
   u32 data ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_reset_hdr {
   u16 version ;
   u16 signature ;
   u16 size ;
   u16 entries ;
   u16 hdr_size ;
   u16 checksum ;
   u16 init_offset ;
   u16 start_offset ;
} __attribute__((__packed__));
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_entry_hdr {
   u16 cmd ;
   u16 size ;
   u16 count ;
   u16 delay ;
} __attribute__((__packed__));
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_poll {
   u32 mask ;
   u32 status ;
} __attribute__((__packed__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_rmw {
   u32 mask ;
   u32 xor_value ;
   u32 or_value ;
   u8 shl ;
   u8 shr ;
   u8 index_a ;
   u8 rsvd ;
} __attribute__((__packed__));
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_entry {
   u32 arg1 ;
   u32 arg2 ;
} __attribute__((__packed__));
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_quad_entry {
   u32 dr_addr ;
   u32 dr_value ;
   u32 ar_addr ;
   u32 ar_value ;
} __attribute__((__packed__));
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_8838 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_8890 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct acpi_device;
#line 973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct rtable;
#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
   struct netlink_ext_ack *extack ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_metrics {
   u32 metrics[17U] ;
   refcount_t refcnt ;
} __attribute__((__aligned__(4)));
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct fib6_nh;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_exception {
   struct fib_nh_exception *fnhe_next ;
   int fnhe_genid ;
   __be32 fnhe_daddr ;
   u32 fnhe_pmtu ;
   bool fnhe_mtu_locked ;
   __be32 fnhe_gw ;
   unsigned long fnhe_expires ;
   struct rtable *fnhe_rth_input ;
   struct rtable *fnhe_rth_output ;
   unsigned long fnhe_stamp ;
   struct callback_head rcu ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fnhe_hash_bucket {
   struct fib_nh_exception *chain ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
union __anonunion_nhc_gw_9797 {
   __be32 ipv4 ;
   struct in6_addr ipv6 ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_common {
   struct net_device *nhc_dev ;
   int nhc_oif ;
   unsigned char nhc_scope ;
   u8 nhc_family ;
   u8 nhc_gw_family ;
   unsigned char nhc_flags ;
   struct lwtunnel_state *nhc_lwtstate ;
   union __anonunion_nhc_gw_9797 nhc_gw ;
   int nhc_weight ;
   atomic_t nhc_upper_bound ;
   struct rtable **nhc_pcpu_rth_output ;
   struct rtable *nhc_rth_input ;
   struct fnhe_hash_bucket *nhc_exceptions ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh {
   struct fib_nh_common nh_common ;
   struct hlist_node nh_hash ;
   struct fib_info *nh_parent ;
   __u32 nh_tclassid ;
   __be32 nh_saddr ;
   int nh_saddr_genid ;
};
#line 113 
struct nexthop;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info {
   struct hlist_node fib_hash ;
   struct hlist_node fib_lhash ;
   struct list_head nh_list ;
   struct net *fib_net ;
   int fib_treeref ;
   refcount_t fib_clntref ;
   unsigned int fib_flags ;
   unsigned char fib_dead ;
   unsigned char fib_protocol ;
   unsigned char fib_scope ;
   unsigned char fib_type ;
   __be32 fib_prefsrc ;
   u32 fib_tb_id ;
   u32 fib_priority ;
   struct dst_metrics *fib_metrics ;
   int fib_nhs ;
   bool fib_nh_is_v6 ;
   bool nh_updated ;
   struct nexthop *nh ;
   struct callback_head rcu ;
   struct fib_nh fib_nh[0U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/route.h"
struct uncached_list;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
union __anonunion_9806 {
   __be32 rt_gw4 ;
   struct in6_addr rt_gw6 ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   u8 rt_gw_family ;
   union __anonunion_9806 __anonCompField_rtable_194 ;
   u32 rt_mtu_locked : 1 ;
   u32 rt_pmtu : 31 ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
union __anonunion___u_9815 {
   struct in_device *__val ;
   char __c[1U] ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pci.h"
struct pci_sysdata {
   int domain ;
   int node ;
   struct acpi_device *companion ;
   void *iommu ;
   void *fwnode ;
   bool vmd_domain ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_9821 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_9820 {
   struct __anonstruct_s_9821 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_9820 __anonCompField_net_generic_197 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lwtunnel.h"
struct lwtunnel_state {
   __u16 type ;
   __u16 flags ;
   __u16 headroom ;
   atomic_t refcnt ;
   int (*orig_output)(struct net *, struct sock *, struct sk_buff *) ;
   int (*orig_input)(struct sk_buff *) ;
   struct callback_head rcu ;
   __u8 data[0U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_node {
   struct fib6_node *parent ;
   struct fib6_node *left ;
   struct fib6_node *right ;
   struct fib6_node *subtree ;
   struct fib6_info *leaf ;
   __u16 fn_bit ;
   __u16 fn_flags ;
   int fn_sernum ;
   struct fib6_info *rr_ptr ;
   struct callback_head rcu ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6key {
   struct in6_addr addr ;
   int plen ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_exception_bucket {
   struct hlist_head chain ;
   int depth ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_nh {
   struct fib_nh_common nh_common ;
   unsigned long last_probe ;
   struct rt6_info **rt6i_pcpu ;
   struct rt6_exception_bucket *rt6i_exception_bucket ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
union __anonunion_9824 {
   struct list_head fib6_siblings ;
   struct list_head nh_list ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_info {
   struct fib6_table *fib6_table ;
   struct fib6_info *fib6_next ;
   struct fib6_node *fib6_node ;
   union __anonunion_9824 __anonCompField_fib6_info_198 ;
   unsigned int fib6_nsiblings ;
   refcount_t fib6_ref ;
   unsigned long expires ;
   struct dst_metrics *fib6_metrics ;
   struct rt6key fib6_dst ;
   u32 fib6_flags ;
   struct rt6key fib6_src ;
   struct rt6key fib6_prefsrc ;
   u32 fib6_metric ;
   u8 fib6_protocol ;
   u8 fib6_type ;
   u8 should_flush : 1 ;
   u8 dst_nocount : 1 ;
   u8 dst_nopolicy : 1 ;
   u8 dst_host : 1 ;
   u8 fib6_destroying : 1 ;
   u8 unused : 3 ;
   struct callback_head rcu ;
   struct nexthop *nh ;
   struct fib6_nh fib6_nh[0U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_info {
   struct dst_entry dst ;
   struct fib6_info *from ;
   struct rt6key rt6i_dst ;
   struct rt6key rt6i_src ;
   struct in6_addr rt6i_gateway ;
   struct inet6_dev *rt6i_idev ;
   u32 rt6i_flags ;
   struct list_head rt6i_uncached ;
   struct uncached_list *rt6i_uncached_list ;
   unsigned short rt6i_nfheader_len ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_statistics {
   __u32 fib_nodes ;
   __u32 fib_route_nodes ;
   __u32 fib_rt_entries ;
   __u32 fib_rt_cache ;
   __u32 fib_discarded_routes ;
   atomic_t fib_rt_alloc ;
   atomic_t fib_rt_uncache ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_table {
   struct hlist_node tb6_hlist ;
   u32 tb6_id ;
   spinlock_t tb6_lock ;
   struct fib6_node tb6_root ;
   struct inet_peer_base tb6_peers ;
   unsigned int flags ;
   unsigned int fib_seq ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/addrconf.h"
struct prefix_info {
   __u8 type ;
   __u8 length ;
   __u8 prefix_len ;
   __u8 reserved : 6 ;
   __u8 autoconf : 1 ;
   __u8 onlink : 1 ;
   __be32 valid ;
   __be32 prefered ;
   __be32 reserved2 ;
   struct in6_addr prefix ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_9838 {
   struct fib_nh_common fib_nhc ;
   struct fib_nh fib_nh ;
   struct fib6_nh fib6_nh ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_info {
   struct hlist_node dev_hash ;
   struct nexthop *nh_parent ;
   u8 family ;
   bool reject_nh ;
   union __anonunion_9838 __anonCompField_nh_info_199 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_grp_entry {
   struct nexthop *nh ;
   u8 weight ;
   atomic_t upper_bound ;
   struct list_head nh_list ;
   struct nexthop *nh_parent ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_group {
   u16 num_nh ;
   bool mpath ;
   bool has_v4 ;
   struct nh_grp_entry nh_entries[0U] ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_9839 {
   struct nh_info *nh_info ;
   struct nh_group *nh_grp ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nexthop {
   struct rb_node rb_node ;
   struct list_head fi_list ;
   struct list_head f6i_list ;
   struct list_head grp_list ;
   struct net *net ;
   u32 id ;
   u8 protocol ;
   u8 nh_flags ;
   bool is_group ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   union __anonunion_9839 __anonCompField_nexthop_200 ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
struct udp_tunnel_info {
   unsigned short type ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hdr.h"
struct qlcnic_legacy_intr_set {
   u32 int_vec_bit ;
   u32 tgt_status_reg ;
   u32 tgt_mask_reg ;
   u32 pci_int_reg ;
};
#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_board_info {
   unsigned short vendor ;
   unsigned short device ;
   unsigned short sub_vendor ;
   unsigned short sub_device ;
   char short_name[100U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_sds_ring {
   __le64 host_phys_addr ;
   __le32 ring_size ;
   __le16 msi_index ;
   __le16 rsvd ;
} __attribute__((__packed__));
#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_rds_ring {
   __le64 host_phys_addr ;
   __le64 buff_size ;
   __le32 ring_size ;
   __le32 ring_kind ;
} __attribute__((__packed__));
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_rx_ctx {
   __le64 host_rsp_dma_addr ;
   __le32 capabilities[4U] ;
   __le32 host_int_crb_mode ;
   __le32 host_rds_crb_mode ;
   __le32 rds_ring_offset ;
   __le32 sds_ring_offset ;
   __le16 num_rds_rings ;
   __le16 num_sds_rings ;
   __le16 valid_field_offset ;
   u8 txrx_sds_binding ;
   u8 msix_handler ;
   u8 reserved[128U] ;
   char data[0U] ;
} __attribute__((__packed__));
#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_rds_ring {
   __le32 host_producer_crb ;
   __le32 rsvd1 ;
} __attribute__((__packed__));
#line 751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_sds_ring {
   __le32 host_consumer_crb ;
   __le32 interrupt_crb ;
} __attribute__((__packed__));
#line 756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_rx_ctx {
   __le32 rds_ring_offset ;
   __le32 sds_ring_offset ;
   __le32 host_ctx_state ;
   __le32 num_fn_per_port ;
   __le16 num_rds_rings ;
   __le16 num_sds_rings ;
   __le16 context_id ;
   u8 phys_port ;
   u8 virt_port ;
   u8 reserved[128U] ;
   char data[0U] ;
} __attribute__((__packed__));
#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_cds_ring {
   __le64 host_phys_addr ;
   __le32 ring_size ;
   __le32 rsvd ;
} __attribute__((__packed__));
#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_tx_ctx {
   __le64 host_rsp_dma_addr ;
   __le64 cmd_cons_dma_addr ;
   __le64 dummy_dma_addr ;
   __le32 capabilities[4U] ;
   __le32 host_int_crb_mode ;
   __le32 rsvd1 ;
   __le16 rsvd2 ;
   __le16 interrupt_ctl ;
   __le16 msi_index ;
   __le16 rsvd3 ;
   struct qlcnic_hostrq_cds_ring cds_ring ;
   u8 reserved[128U] ;
} __attribute__((__packed__));
#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_cds_ring {
   __le32 host_producer_crb ;
   __le32 interrupt_crb ;
} __attribute__((__packed__));
#line 815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_tx_ctx {
   __le32 host_ctx_state ;
   __le16 context_id ;
   u8 phys_port ;
   u8 virt_port ;
   struct qlcnic_cardrsp_cds_ring cds_ring ;
   u8 reserved[128U] ;
} __attribute__((__packed__));
#line 1192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_info_le {
   __le16 pci_func ;
   __le16 op_mode ;
   __le16 phys_port ;
   __le16 switch_mode ;
   __le32 capabilities ;
   u8 max_mac_filters ;
   u8 reserved1 ;
   __le16 max_mtu ;
   __le16 max_tx_ques ;
   __le16 max_rx_ques ;
   __le16 min_tx_bw ;
   __le16 max_tx_bw ;
   __le32 op_type ;
   __le16 max_bw_reg_offset ;
   __le16 max_linkspeed_reg_offset ;
   __le32 capability1 ;
   __le32 capability2 ;
   __le32 capability3 ;
   __le16 max_tx_mac_filters ;
   __le16 max_rx_mcast_mac_filters ;
   __le16 max_rx_ucast_mac_filters ;
   __le16 max_rx_ip_addr ;
   __le16 max_rx_lro_flow ;
   __le16 max_rx_status_rings ;
   __le16 max_rx_buf_rings ;
   __le16 max_tx_vlan_keys ;
   u8 total_pf ;
   u8 total_rss_engines ;
   __le16 max_vports ;
   __le16 linkstate_reg_offset ;
   __le16 bit_offsets ;
   __le16 max_local_ipv6_addrs ;
   __le16 max_remote_ipv6_addrs ;
   u8 reserved2[56U] ;
} __attribute__((__packed__));
#line 1266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_pci_info_le {
   __le16 id ;
   __le16 active ;
   __le16 type ;
   __le16 default_port ;
   __le16 tx_min_bw ;
   __le16 tx_max_bw ;
   __le16 reserved1[2U] ;
   u8 mac[6U] ;
   __le16 func_count ;
   u8 reserved2[104U] ;
} __attribute__((__packed__));
#line 1400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mac_statistics_le {
   __le64 mac_tx_frames ;
   __le64 mac_tx_bytes ;
   __le64 mac_tx_mcast_pkts ;
   __le64 mac_tx_bcast_pkts ;
   __le64 mac_tx_pause_cnt ;
   __le64 mac_tx_ctrl_pkt ;
   __le64 mac_tx_lt_64b_pkts ;
   __le64 mac_tx_lt_127b_pkts ;
   __le64 mac_tx_lt_255b_pkts ;
   __le64 mac_tx_lt_511b_pkts ;
   __le64 mac_tx_lt_1023b_pkts ;
   __le64 mac_tx_lt_1518b_pkts ;
   __le64 mac_tx_gt_1518b_pkts ;
   __le64 rsvd1[3U] ;
   __le64 mac_rx_frames ;
   __le64 mac_rx_bytes ;
   __le64 mac_rx_mcast_pkts ;
   __le64 mac_rx_bcast_pkts ;
   __le64 mac_rx_pause_cnt ;
   __le64 mac_rx_ctrl_pkt ;
   __le64 mac_rx_lt_64b_pkts ;
   __le64 mac_rx_lt_127b_pkts ;
   __le64 mac_rx_lt_255b_pkts ;
   __le64 mac_rx_lt_511b_pkts ;
   __le64 mac_rx_lt_1023b_pkts ;
   __le64 mac_rx_lt_1518b_pkts ;
   __le64 mac_rx_gt_1518b_pkts ;
   __le64 rsvd2[3U] ;
   __le64 mac_rx_length_error ;
   __le64 mac_rx_length_small ;
   __le64 mac_rx_length_large ;
   __le64 mac_rx_jabber ;
   __le64 mac_rx_dropped ;
   __le64 mac_rx_crc_error ;
   __le64 mac_align_error ;
} __attribute__((__packed__));
#line 1440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mac_statistics {
   u64 mac_tx_frames ;
   u64 mac_tx_bytes ;
   u64 mac_tx_mcast_pkts ;
   u64 mac_tx_bcast_pkts ;
   u64 mac_tx_pause_cnt ;
   u64 mac_tx_ctrl_pkt ;
   u64 mac_tx_lt_64b_pkts ;
   u64 mac_tx_lt_127b_pkts ;
   u64 mac_tx_lt_255b_pkts ;
   u64 mac_tx_lt_511b_pkts ;
   u64 mac_tx_lt_1023b_pkts ;
   u64 mac_tx_lt_1518b_pkts ;
   u64 mac_tx_gt_1518b_pkts ;
   u64 rsvd1[3U] ;
   u64 mac_rx_frames ;
   u64 mac_rx_bytes ;
   u64 mac_rx_mcast_pkts ;
   u64 mac_rx_bcast_pkts ;
   u64 mac_rx_pause_cnt ;
   u64 mac_rx_ctrl_pkt ;
   u64 mac_rx_lt_64b_pkts ;
   u64 mac_rx_lt_127b_pkts ;
   u64 mac_rx_lt_255b_pkts ;
   u64 mac_rx_lt_511b_pkts ;
   u64 mac_rx_lt_1023b_pkts ;
   u64 mac_rx_lt_1518b_pkts ;
   u64 mac_rx_gt_1518b_pkts ;
   u64 rsvd2[3U] ;
   u64 mac_rx_length_error ;
   u64 mac_rx_length_small ;
   u64 mac_rx_length_large ;
   u64 mac_rx_jabber ;
   u64 mac_rx_dropped ;
   u64 mac_rx_crc_error ;
   u64 mac_align_error ;
};
#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_esw_stats_le {
   __le16 context_id ;
   __le16 version ;
   __le16 size ;
   __le16 unused ;
   __le64 unicast_frames ;
   __le64 multicast_frames ;
   __le64 broadcast_frames ;
   __le64 dropped_frames ;
   __le64 errors ;
   __le64 local_frames ;
   __le64 numbytes ;
   __le64 rsvd[3U] ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct qlcnic_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_11851 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_11853 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_11855 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_11859 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_11861 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct __anonstruct_12839 {
   u64 hdr ;
   u64 body[7U] ;
};
#line 976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
union __anonunion_12838 {
   struct __anonstruct_12839 __anonCompField___anonunion_12838_204 ;
   u64 words[8U] ;
};
#line 976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_fw_msg {
   union __anonunion_12838 __anonCompField_qlcnic_fw_msg_205 ;
};
#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
typedef int ldv_func_ret_type;
#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
typedef int ldv_func_ret_type_0;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_15585 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_15585 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_15586 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_15586 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_15602 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_15602 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_15606 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_15606 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_15607 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_15608 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_15607 __anonCompField_media_link_90 ;
   union __anonunion_15608 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_15610 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_15609 {
   struct __anonstruct_dev_15610 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_15609 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_15624 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_15625 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_15623 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_15624 i2c ;
   struct __anonstruct_custom_15625 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_15623 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_16526 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_16526 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_4_18 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_devattr_instance_3_14 {
   struct device *arg0 ;
   struct device_attribute *arg1 ;
   int signal_pending ;
};
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_qlcnic_get_strings_19 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_qlcnic_driver_20 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_spin_lock_bh_vlan_list_lock_of_qlcnic_vf_info(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_spin_unlock_bh_vlan_list_lock_of_qlcnic_vf_info(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_qlcnic_trans_list(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 826 
static void cif___ldv_spin_lock_lock_of_qlcnic_trans_list(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 496 
#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 494  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 2029 
#line 2029 
int pci_enable_sriov(struct pci_dev *, int);
#line 2030 
#line 2030 
void pci_disable_sriov(struct pci_dev *);
#line 2034 
#line 2034 
int pci_vfs_assigned(struct pci_dev *);
#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 580 
void qlcnic_free_mbx_args(struct qlcnic_cmd_args *cmd);
#line 1691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1691 
void __qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev);
#line 1695 
#line 1695 
int __qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev);
#line 1703 
#line 1703 
int qlcnic_83xx_configure_opmode(struct qlcnic_adapter *adapter);
#line 1900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 arg)
{
  #line 1903 
  return (*(((adapter->ahw)->hw_ops)->alloc_mbx_args))(mbx,adapter,arg);
}

#line 1906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 1909 
  if (((adapter->ahw)->hw_ops)->mbx_cmd != (int (*)(struct qlcnic_adapter *, struct qlcnic_cmd_args *))0) {
    #line 1910 
    return (*(((adapter->ahw)->hw_ops)->mbx_cmd))(adapter,cmd);
  }
  #line 1912 
  return -5;
}

#line 1977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *info, u8 id)
{
  #line 1980 
  return (*(((adapter->ahw)->hw_ops)->get_nic_info))(adapter,info,
                                                  (unsigned char)((int)id));
}

#line 2329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_84xx_check(struct qlcnic_adapter *adapter)
{
  #line 2331 
  unsigned short device = (adapter->pdev)->device;
  #line 2334 
  return (_Bool)(((unsigned int)device == 32832U || (unsigned int)device == 33856U) != 0);
}

#line 2352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_sriov_pf_check(struct qlcnic_adapter *adapter)
{
  #line 2354 
  return (_Bool)((unsigned int)(adapter->ahw)->op_mode == 3U);
}

#line 2369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_83xx_pf_check(struct qlcnic_adapter *adapter)
{
  #line 2371 
  unsigned short device = (adapter->pdev)->device;
  #line 2373 
  return (_Bool)((unsigned int)device == 32816U);
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 188 
int qlcnic_sriov_init(struct qlcnic_adapter *adapter, int num_vfs);
#line 190 
#line 190 
void __qlcnic_sriov_cleanup(struct qlcnic_adapter *adapter);
#line 194 
#line 194 
int qlcnic_sriov_func_to_index(struct qlcnic_adapter *adapter, u8 pci_func);
#line 196 
#line 196 
int qlcnic_sriov_cfg_bc_intr(struct qlcnic_adapter *adapter, u8 enable);
#line 198 
#line 198 
void qlcnic_sriov_cleanup_list(struct qlcnic_trans_list *t_list);
#line 199 
#line 199 
int __qlcnic_sriov_add_act_list(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans);
#line 201 
#line 201 
int qlcnic_sriov_get_vf_vport_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u16 vport_id);
#line 204 
#line 204 
void qlcnic_sriov_free_vlans(struct qlcnic_adapter *adapter);
#line 205 
#line 205 
void qlcnic_sriov_alloc_vlans(struct qlcnic_adapter *adapter);
#line 206 
#line 206 
bool qlcnic_sriov_check_any_vlan(struct qlcnic_vf_info *vf);
#line 207 
#line 207 
void qlcnic_sriov_del_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id);
#line 209 
#line 209 
void qlcnic_sriov_add_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id);
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
__inline static bool qlcnic_sriov_enable_check(struct qlcnic_adapter *adapter)
{
  #line 214 
  return (_Bool)((int)test_bit(10L,& adapter->state) != 0);
}

#line 218 
#line 1488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_process_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd);
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_disable(struct qlcnic_adapter *adapter);
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_cleanup(struct qlcnic_adapter *adapter);
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_pci_sriov_configure(struct pci_dev *dev, int num_vfs);
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_create_rx_ctx(struct qlcnic_adapter *adapter, u32 *int_id);
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_create_tx_ctx(struct qlcnic_adapter *adapter, u32 *int_id);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_del_rx_ctx(struct qlcnic_adapter *adapter, u32 *int_id);
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_del_tx_ctx(struct qlcnic_adapter *adapter, u32 *int_id);
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_promisc(struct qlcnic_adapter *adapter, u32 *int_id);
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_ipaddr(struct qlcnic_adapter *adapter, u32 *int_id);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_macaddr(struct qlcnic_adapter *adapter, u32 *int_id);
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_handle_flr(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf);
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
bool qlcnic_sriov_soft_flr_check(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_vf_info *vf);
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_reset(struct qlcnic_adapter *adapter);
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_pf_reinit(struct qlcnic_adapter *adapter);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_mac(struct net_device *netdev, int vf, u8 *mac);
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_tx_rate(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate);
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi);
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos, __be16 vlan_proto);
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 2023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_spoofchk(struct net_device *netdev, int vf, bool chk);
#line 22 
#line 269 
static int qlcnic_sriov_pf_get_vport_handle(struct qlcnic_adapter *adapter, u8 func);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_set_vport_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u16 vport_id)
{
  #line 37 
  struct qlcnic_cmd_args cmd;
  #line 38 
  int err;
  #line 40 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,34U) != 0) 
                                                     #line 41 
                                                     return -12;
  #line 43 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)vport_id << 16) | 1);
  #line 44 
  *(cmd.req.arg + 2U) = (unsigned int)npar_info->bit_offsets;
  #line 45 
  *(cmd.req.arg + 2U) |= (unsigned int)((int)npar_info->min_tx_bw << 16);
  #line 46 
  *(cmd.req.arg + 3U) = (unsigned int)((int)npar_info->max_tx_bw | ((int)npar_info->max_tx_ques << 16));
  #line 47 
  *(cmd.req.arg + 4U) = (unsigned int)npar_info->max_tx_mac_filters;
  #line 48 
  *(cmd.req.arg + 4U) |= (unsigned int)((int)npar_info->max_rx_mcast_mac_filters << 16);
  #line 49 
  *(cmd.req.arg + 5U) = (unsigned int)((int)npar_info->max_rx_ucast_mac_filters | ((int)npar_info->max_rx_ip_addr << 16));
  #line 51 
  *(cmd.req.arg + 6U) = (unsigned int)((int)npar_info->max_rx_lro_flow | ((int)npar_info->max_rx_status_rings << 16));
  #line 53 
  *(cmd.req.arg + 7U) = (unsigned int)((int)npar_info->max_rx_buf_rings | ((int)npar_info->max_rx_ques << 16));
  #line 55 
  *(cmd.req.arg + 8U) = (unsigned int)npar_info->max_tx_vlan_keys;
  #line 56 
  *(cmd.req.arg + 8U) |= (unsigned int)((int)npar_info->max_local_ipv6_addrs << 16);
  #line 57 
  *(cmd.req.arg + 9U) = (unsigned int)npar_info->max_remote_ipv6_addrs;
  #line 59 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 60 
  if (err != 0) 
                #line 61 
                _dev_err(& (adapter->pdev)->dev,(char *)"Failed to set vport info, err=%d\n",err);
  #line 64 
  qlcnic_free_mbx_args(& cmd);
  #line 65 
  return err;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cal_res_limit(struct qlcnic_adapter *adapter, struct qlcnic_info *info, u16 func)
{
  #line 74 
  int vpid;
  #line 74 
  int id;
  #line 75 
  struct qlcnic_vport *vp;
  #line 76 
  u32 num_vfs;
  #line 76 
  u32 max;
  #line 76 
  u32 temp;
  #line 71 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 72 
  struct qlcnic_resources *res = & sriov->ff_max;
  #line 73 
  u16 num_macs = (unsigned short)((unsigned int)sriov->num_allowed_vlans + 1U);
  #line 74 
  int ret = -5;
  #line 78 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)((unsigned char)func)));
  #line 79 
  if (vpid < 0) 
                #line 80 
                return -22;
  #line 82 
  num_vfs = (unsigned int)sriov->num_vfs;
  #line 83 
  max = num_vfs + 1U;
  #line 84 
  info->bit_offsets = (unsigned short)65535U;
  #line 85 
  info->max_tx_ques = (unsigned short)((unsigned int)res->num_tx_queues / max);
  #line 87 
  if ((int)qlcnic_83xx_pf_check(adapter) != 0) 
                                               #line 88 
                                               num_macs = (unsigned short)2U;
  #line 90 
  info->max_rx_mcast_mac_filters = res->num_rx_mcast_mac_filters;
  #line 92 
  if ((int)((unsigned short)(adapter->ahw)->pci_func) == (int)func) {
    #line 93 
    info->min_tx_bw = (unsigned short)0U;
    #line 94 
    info->max_tx_bw = (unsigned short)100U;
    #line 96 
    temp = (unsigned int)res->num_rx_ucast_mac_filters - (unsigned int)num_macs * num_vfs;
    #line 97 
    info->max_rx_ucast_mac_filters = (unsigned short)temp;
    #line 98 
    temp = (unsigned int)res->num_tx_mac_filters - (unsigned int)num_macs * num_vfs;
    #line 99 
    info->max_tx_mac_filters = (unsigned short)temp;
    #line 100 
    temp = ((unsigned int)num_macs * num_vfs) * 7U;
    #line 101 
    temp = (unsigned int)res->num_rx_mcast_mac_filters - temp;
    #line 102 
    info->max_rx_mcast_mac_filters = (unsigned short)temp;
    #line 104 
    info->max_tx_ques = (unsigned short)((int)res->num_tx_queues - (int)((unsigned short)sriov->num_vfs));
  }
  else {
    #line 106 
    id = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)((unsigned char)func)));
    #line 107 
    if (id < 0) 
                #line 108 
                return id;
    #line 109 
    vp = (sriov->vf_info + (unsigned long)id)->vp;
    #line 110 
    info->min_tx_bw = vp->min_tx_bw;
    #line 111 
    info->max_tx_bw = vp->max_tx_bw;
    #line 113 
    info->max_rx_ucast_mac_filters = num_macs;
    #line 114 
    info->max_tx_mac_filters = num_macs;
    #line 115 
    temp = (unsigned int)((int)num_macs * 7);
    #line 116 
    info->max_rx_mcast_mac_filters = (unsigned short)temp;
    #line 118 
    info->max_tx_ques = (unsigned short)1U;
  }
  #line 121 
  info->max_rx_ip_addr = (unsigned short)((unsigned int)res->num_destip / max);
  #line 122 
  info->max_rx_status_rings = (unsigned short)((unsigned int)res->num_rx_status_rings / max);
  #line 123 
  info->max_rx_buf_rings = (unsigned short)((unsigned int)res->num_rx_buf_rings / max);
  #line 124 
  info->max_rx_ques = (unsigned short)((unsigned int)res->num_rx_queues / max);
  #line 125 
  info->max_rx_lro_flow = (unsigned short)(res->num_lro_flows_supported / max);
  #line 126 
  info->max_tx_vlan_keys = res->num_txvlan_keys;
  #line 127 
  info->max_local_ipv6_addrs = res->max_local_ipv6_addrs;
  #line 128 
  info->max_remote_ipv6_addrs = res->max_remote_ipv6_addrs;
  #line 130 
  ret = qlcnic_sriov_pf_set_vport_info(adapter,info,(unsigned short)((int)((unsigned short)vpid)));
  #line 131 
  if (ret != 0) 
                #line 132 
                return ret;
  #line 134 
  return 0;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_set_ff_max_res(struct qlcnic_adapter *adapter, struct qlcnic_info *info)
{
  #line 140 
  struct qlcnic_resources *ff_max = & ((adapter->ahw)->sriov)->ff_max;
  #line 142 
  ff_max->num_tx_mac_filters = info->max_tx_mac_filters;
  #line 143 
  ff_max->num_rx_ucast_mac_filters = info->max_rx_ucast_mac_filters;
  #line 144 
  ff_max->num_rx_mcast_mac_filters = info->max_rx_mcast_mac_filters;
  #line 145 
  ff_max->num_txvlan_keys = info->max_tx_vlan_keys;
  #line 146 
  ff_max->num_rx_queues = info->max_rx_ques;
  #line 147 
  ff_max->num_tx_queues = info->max_tx_ques;
  #line 148 
  ff_max->num_lro_flows_supported = (unsigned int)info->max_rx_lro_flow;
  #line 149 
  ff_max->num_destip = info->max_rx_ip_addr;
  #line 150 
  ff_max->num_rx_buf_rings = info->max_rx_buf_rings;
  #line 151 
  ff_max->num_rx_status_rings = info->max_rx_status_rings;
  #line 152 
  ff_max->max_remote_ipv6_addrs = info->max_remote_ipv6_addrs;
  #line 153 
  ff_max->max_local_ipv6_addrs = info->max_local_ipv6_addrs;
  #line 154 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_set_vf_max_vlan(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info)
{
  #line 160 
  int temp;
  #line 160 
  int total_fn;
  #line 159 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 162 
  temp = (int)npar_info->max_rx_mcast_mac_filters;
  #line 163 
  total_fn = (int)sriov->num_vfs + 1;
  #line 165 
  temp /= total_fn * 7;
  #line 166 
  sriov->num_allowed_vlans = (unsigned short)((unsigned int)((unsigned short)temp) + 65535U);
  #line 168 
  if ((int)qlcnic_83xx_pf_check(adapter) != 0) 
                                               #line 169 
                                               sriov->num_allowed_vlans = (unsigned short)1U;
  #line 171 
  netdev_info(adapter->netdev,(char *)"Max Guest VLANs supported per VF = %d\n",(int)sriov->num_allowed_vlans);
  #line 173 
  return;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_get_pf_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info)
{
  #line 178 
  int err;
  #line 179 
  struct qlcnic_cmd_args cmd;
  #line 181 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,33U) != 0) 
                                                     #line 182 
                                                     return -12;
  #line 184 
  *(cmd.req.arg + 1U) = 2U;
  #line 185 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 186 
  if (err != 0) {
    #line 187 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to get PF info, err=%d\n",err);
    #line 189 
    goto out;
  }
  #line 192 
  npar_info->total_pf = (unsigned char)*(cmd.rsp.arg + 2U);
  #line 193 
  npar_info->total_rss_engines = (unsigned char)(*(cmd.rsp.arg + 2U) >> 8);
  #line 194 
  npar_info->max_vports = (unsigned short)(*(cmd.rsp.arg + 2U) >> 16);
  #line 195 
  npar_info->max_tx_ques = (unsigned short)*(cmd.rsp.arg + 3U);
  #line 196 
  npar_info->max_tx_mac_filters = (unsigned short)(*(cmd.rsp.arg + 3U) >> 16);
  #line 197 
  npar_info->max_rx_mcast_mac_filters = (unsigned short)*(cmd.rsp.arg + 4U);
  #line 198 
  npar_info->max_rx_ucast_mac_filters = (unsigned short)(*(cmd.rsp.arg + 4U) >> 16);
  #line 199 
  npar_info->max_rx_ip_addr = (unsigned short)*(cmd.rsp.arg + 5U);
  #line 200 
  npar_info->max_rx_lro_flow = (unsigned short)(*(cmd.rsp.arg + 5U) >> 16);
  #line 201 
  npar_info->max_rx_status_rings = (unsigned short)*(cmd.rsp.arg + 6U);
  #line 202 
  npar_info->max_rx_buf_rings = (unsigned short)(*(cmd.rsp.arg + 6U) >> 16);
  #line 203 
  npar_info->max_rx_ques = (unsigned short)*(cmd.rsp.arg + 7U);
  #line 204 
  npar_info->max_tx_vlan_keys = (unsigned short)(*(cmd.rsp.arg + 7U) >> 16);
  #line 205 
  npar_info->max_local_ipv6_addrs = (unsigned short)*(cmd.rsp.arg + 8U);
  #line 206 
  npar_info->max_remote_ipv6_addrs = (unsigned short)(*(cmd.rsp.arg + 8U) >> 16);
  #line 208 
  qlcnic_sriov_set_vf_max_vlan(adapter,npar_info);
  #line 209 
  qlcnic_sriov_pf_set_ff_max_res(adapter,npar_info);
  #line 210 
  _dev_info(& (adapter->pdev)->dev,(char *)"\n\ttotal_pf: %d,\n",(int)npar_info->total_pf,(int)npar_info->total_rss_engines,(int)npar_info->max_vports,(int)npar_info->max_tx_ques,(int)npar_info->max_tx_mac_filters,(int)npar_info->max_rx_mcast_mac_filters,(int)npar_info->max_rx_ucast_mac_filters,(int)npar_info->max_rx_ip_addr,(int)npar_info->max_rx_lro_flow,(int)npar_info->max_rx_status_rings,(int)npar_info->max_rx_buf_rings,(int)npar_info->max_rx_ques,(int)npar_info->max_tx_vlan_keys,(int)npar_info->max_local_ipv6_addrs,(int)npar_info->max_remote_ipv6_addrs);
  #line 228 
  out: 
       #line 228 
  ;
  #line 229 
  qlcnic_free_mbx_args(& cmd);
  #line 230 
  return err;
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_reset_vport_handle(struct qlcnic_adapter *adapter, u8 func)
{
  #line 237 
  struct qlcnic_vport *vp;
  #line 238 
  int index;
  #line 236 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 240 
  if ((int)(adapter->ahw)->pci_func == (int)func) 
                                                  #line 241 
                                                  sriov->vp_handle = (unsigned short)0U;
  else {
    #line 243 
    index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)func));
    #line 244 
    if (index < 0) 
                   #line 245 
                   return;
    #line 246 
    vp = (sriov->vf_info + (unsigned long)index)->vp;
    #line 247 
    vp->handle = (unsigned short)0U;
  }
  #line 249 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_set_vport_handle(struct qlcnic_adapter *adapter, u16 vport_handle, u8 func)
{
  #line 255 
  struct qlcnic_vport *vp;
  #line 256 
  int index;
  #line 254 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 258 
  if ((int)(adapter->ahw)->pci_func == (int)func) 
                                                  #line 259 
                                                  sriov->vp_handle = vport_handle;
  else {
    #line 261 
    index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)func));
    #line 262 
    if (index < 0) 
                   #line 263 
                   return;
    #line 264 
    vp = (sriov->vf_info + (unsigned long)index)->vp;
    #line 265 
    vp->handle = vport_handle;
  }
  #line 267 
  return;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_get_vport_handle(struct qlcnic_adapter *adapter, u8 func)
{
  #line 273 
  struct qlcnic_vf_info *vf_info;
  #line 274 
  int index;
  #line 272 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 276 
  if ((int)(adapter->ahw)->pci_func == (int)func) 
                                                  #line 277 
                                                  return (int)sriov->vp_handle;
  else {
    #line 279 
    index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)func));
    #line 280 
    if (index >= 0) {
      #line 281 
      vf_info = sriov->vf_info + (unsigned long)index;
      #line 282 
      return (int)(vf_info->vp)->handle;
    }
  }
  #line 286 
  return -22;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_config_vport(struct qlcnic_adapter *adapter, u8 flag, u16 func)
{
  #line 292 
  struct qlcnic_cmd_args cmd;
  #line 293 
  int ret;
  #line 294 
  int vpid;
  #line 296 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,50U) != 0) 
                                                     #line 297 
                                                     return -12;
  #line 299 
  if ((unsigned int)flag != 0U) 
                                #line 300 
                                *(cmd.req.arg + 3U) = (unsigned int)((int)func << 8);
  else {
    #line 302 
    vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)((unsigned char)func)));
    #line 303 
    if (vpid < 0) {
      #line 304 
      ret = -22;
      #line 305 
      goto out;
    }
    #line 307 
    *(cmd.req.arg + 3U) = (unsigned int)(((vpid << 8) & 16776960) | 1);
  }
  #line 310 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  #line 311 
  if (ret != 0) {
    #line 312 
    char *tmp_0;
    #line 312 
    ;
    #line 312 
    ;
    #line 312 
    if ((unsigned int)flag != 0U) 
                                  #line 312 
                                  tmp_0 = (char *)"enable"; else 
                                                                 #line 312 
                                                                 tmp_0 = (char *)"disable";
    #line 312 
    ;
    #line 312 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed %s vport, err %d for func 0x%x\n",tmp_0,ret,(int)func);
    #line 315 
    goto out;
  }
  #line 318 
  if ((unsigned int)flag != 0U) {
    #line 319 
    vpid = (int)*(cmd.rsp.arg + 2U) & 65535;
    #line 320 
    qlcnic_sriov_pf_set_vport_handle(adapter,(unsigned short)((int)((unsigned short)vpid)),(unsigned char)((int)((unsigned char)func)));
  }
  else 
       #line 322 
       qlcnic_sriov_pf_reset_vport_handle(adapter,(unsigned char)((int)((unsigned char)func)));
  #line 325 
  out: 
       #line 325 
  ;
  #line 326 
  qlcnic_free_mbx_args(& cmd);
  #line 327 
  return ret;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_vlan_filtering(struct qlcnic_adapter *adapter, u8 enable)
{
  #line 333 
  struct qlcnic_cmd_args cmd;
  #line 334 
  int err;
  #line 336 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  #line 337 
  if (err != 0) 
                #line 338 
                return err;
  #line 340 
  *(cmd.req.arg + 1U) = 4U;
  #line 341 
  if ((unsigned int)enable != 0U) {
    #line 342 
    adapter->flags |= 8388608U;
    #line 343 
    *(cmd.req.arg + 1U) |= 65536U;
    #line 344 
    if ((int)qlcnic_84xx_check(adapter) != 0) 
                                              #line 345 
                                              *(cmd.req.arg + 1U) |= 524288U;
  }
  else 
       #line 347 
       adapter->flags &= 4286578687U;
  #line 350 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 351 
  if (err != 0) 
                #line 352 
                _dev_err(& (adapter->pdev)->dev,(char *)"Failed to configure VLAN filtering, err=%d\n",err);
  #line 355 
  qlcnic_free_mbx_args(& cmd);
  #line 356 
  return err;
}

#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_flood(struct qlcnic_adapter *adapter)
{
  #line 362 
  struct qlcnic_cmd_args cmd;
  #line 363 
  int err;
  #line 365 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  #line 366 
  if (err != 0) 
                #line 367 
                return err;
  #line 369 
  *(cmd.req.arg + 1U) = 65541U;
  #line 371 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 372 
  if (err != 0) 
                #line 373 
                _dev_err(& (adapter->pdev)->dev,(char *)"Failed to configure VF Flood bit on PF, err=%d\n",err);
  #line 377 
  qlcnic_free_mbx_args(& cmd);
  #line 378 
  return err;
}

#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_eswitch(struct qlcnic_adapter *adapter, u8 func, u8 enable)
{
  #line 384 
  struct qlcnic_cmd_args cmd;
  #line 385 
  int err = -5;
  #line 387 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,37U) != 0) 
                                                     #line 388 
                                                     return -12;
  #line 390 
  *(cmd.req.arg) |= 1610612736U;
  #line 391 
  *(cmd.req.arg + 1U) = (unsigned int)((((int)func << 2) & 60) | 66);
  #line 392 
  if ((unsigned int)enable != 0U) 
                                  #line 393 
                                  *(cmd.req.arg + 1U) |= 1U;
  #line 395 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 397 
  if (err != 0) {
    #line 398 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to enable sriov eswitch%d\n",err);
    #line 400 
    err = -5;
  }
  #line 403 
  qlcnic_free_mbx_args(& cmd);
  #line 404 
  return err;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_del_flr_queue(struct qlcnic_adapter *adapter)
{
  #line 411 
  int i;
  #line 409 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 410 
  struct qlcnic_back_channel *bc = & sriov->bc;
  #line 413 
  i = 0;
  #line 413 
  while ((int)sriov->num_vfs > i) {
    #line 414 
    cancel_work_sync(& (sriov->vf_info + (unsigned long)i)->flr_work);
    #line 413 
    i ++;
  }
  #line 416 
  destroy_workqueue(bc->bc_flr_wq);
  #line 417 
  return;
}

#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_create_flr_queue(struct qlcnic_adapter *adapter)
{
  #line 422 
  struct workqueue_struct *wq;
  #line 421 
  struct qlcnic_back_channel *bc = & ((adapter->ahw)->sriov)->bc;
  #line 424 
  wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"qlcnic-flr");
  #line 425 
  if (wq == (struct workqueue_struct *)0) {
    #line 426 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot create FLR workqueue\n");
    #line 427 
    return -12;
  }
  #line 430 
  bc->bc_flr_wq = wq;
  #line 431 
  return 0;
}

#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_cleanup(struct qlcnic_adapter *adapter)
{
  #line 436 
  u8 func = (adapter->ahw)->pci_func;
  #line 438 
  if (! qlcnic_sriov_enable_check(adapter)) 
                                            #line 439 
                                            return;
  #line 441 
  qlcnic_sriov_pf_del_flr_queue(adapter);
  #line 442 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  #line 443 
  qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)func));
  #line 444 
  qlcnic_sriov_pf_cfg_eswitch(adapter,(unsigned char)((int)func),(unsigned char)0);
  #line 445 
  qlcnic_sriov_pf_cfg_vlan_filtering(adapter,(unsigned char)0);
  #line 446 
  __qlcnic_sriov_cleanup(adapter);
  #line 447 
  (adapter->ahw)->op_mode = (unsigned short)0U;
  #line 448 
  cif_clear_bit(10L,& adapter->state);
  #line 449 
  return;
}

#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_disable(struct qlcnic_adapter *adapter)
{
  #line 453 
  if (! qlcnic_sriov_pf_check(adapter)) 
                                        #line 454 
                                        return;
  #line 456 
  if (! qlcnic_sriov_enable_check(adapter)) 
                                            #line 457 
                                            return;
  #line 459 
  pci_disable_sriov(adapter->pdev);
  #line 460 
  netdev_info(adapter->netdev,(char *)"SR-IOV is disabled successfully on port %d\n",(int)adapter->portnum);
  #line 463 
  return;
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_pci_sriov_disable(struct qlcnic_adapter *adapter)
{
  #line 467 
  struct net_device *netdev = adapter->netdev;
  #line 469 
  if (pci_vfs_assigned(adapter->pdev) != 0) {
    #line 470 
    netdev_err(adapter->netdev,(char *)"SR-IOV VFs belonging to port %d are assigned to VMs. SR-IOV can not be disabled on this port\n",(int)adapter->portnum);
    #line 473 
    netdev_info(adapter->netdev,(char *)"Please detach SR-IOV VFs belonging to port %d from VMs, and then try to disable SR-IOV on this port\n",(int)adapter->portnum);
    #line 476 
    return -1;
  }
  #line 479 
  qlcnic_sriov_pf_disable(adapter);
  #line 481 
  rtnl_lock();
  #line 482 
  if ((int)netif_running(netdev) != 0) 
                                       #line 483 
                                       __qlcnic_down(adapter,netdev);
  #line 485 
  qlcnic_sriov_free_vlans(adapter);
  #line 487 
  qlcnic_sriov_pf_cleanup(adapter);
  #line 492 
  if (qlcnic_83xx_configure_opmode(adapter) != 0) {
    #line 493 
    rtnl_unlock();
    #line 494 
    return -5;
  }
  #line 497 
  if ((int)netif_running(netdev) != 0) 
                                       #line 498 
                                       __qlcnic_up(adapter,netdev);
  #line 500 
  rtnl_unlock();
  #line 501 
  return 0;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_init(struct qlcnic_adapter *adapter)
{
  #line 507 
  struct qlcnic_info nic_info;
  #line 507 
  struct qlcnic_info pf_info;
  #line 507 
  struct qlcnic_info vp_info;
  #line 508 
  int err;
  #line 506 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 509 
  u8 func = ahw->pci_func;
  #line 511 
  if (! qlcnic_sriov_enable_check(adapter)) 
                                            #line 512 
                                            return 0;
  #line 514 
  err = qlcnic_sriov_pf_cfg_vlan_filtering(adapter,(unsigned char)1);
  #line 515 
  if (err != 0) 
                #line 516 
                return err;
  #line 518 
  if ((int)qlcnic_84xx_check(adapter) != 0) {
    #line 519 
    err = qlcnic_sriov_pf_cfg_flood(adapter);
    #line 520 
    if (err != 0) 
                  #line 521 
                  goto disable_vlan_filtering;
  }
  #line 524 
  err = qlcnic_sriov_pf_cfg_eswitch(adapter,(unsigned char)((int)func),(unsigned char)1);
  #line 525 
  if (err != 0) 
                #line 526 
                goto disable_vlan_filtering;
  #line 528 
  err = qlcnic_sriov_pf_config_vport(adapter,(unsigned char)1,(unsigned short)((int)func));
  #line 529 
  if (err != 0) 
                #line 530 
                goto disable_eswitch;
  #line 532 
  err = qlcnic_sriov_get_pf_info(adapter,& pf_info);
  #line 533 
  if (err != 0) 
                #line 534 
                goto delete_vport;
  #line 536 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)func));
  #line 537 
  if (err != 0) 
                #line 538 
                goto delete_vport;
  #line 540 
  err = qlcnic_sriov_pf_cal_res_limit(adapter,& vp_info,(unsigned short)((int)func));
  #line 541 
  if (err != 0) 
                #line 542 
                goto delete_vport;
  #line 544 
  err = qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)1);
  #line 545 
  if (err != 0) 
                #line 546 
                goto delete_vport;
  #line 548 
  ahw->physical_port = (unsigned char)nic_info.phys_port;
  #line 549 
  ahw->switch_mode = nic_info.switch_mode;
  #line 550 
  ahw->max_mtu = nic_info.max_mtu;
  #line 551 
  ahw->capabilities = nic_info.capabilities;
  #line 552 
  ahw->nic_mode = (unsigned char)1U;
  #line 553 
  return err;
  #line 555 
  delete_vport: 
                #line 555 
  ;
  #line 556 
  qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)func));
  #line 558 
  disable_eswitch: 
                   #line 558 
  ;
  #line 559 
  qlcnic_sriov_pf_cfg_eswitch(adapter,(unsigned char)((int)func),(unsigned char)0);
  #line 561 
  disable_vlan_filtering: 
                          #line 561 
  ;
  #line 562 
  qlcnic_sriov_pf_cfg_vlan_filtering(adapter,(unsigned char)0);
  #line 564 
  return err;
}

#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_enable(struct qlcnic_adapter *adapter, int num_vfs)
{
  #line 569 
  int err;
  #line 571 
  if (! qlcnic_sriov_enable_check(adapter)) 
                                            #line 572 
                                            return 0;
  #line 574 
  err = pci_enable_sriov(adapter->pdev,num_vfs);
  #line 575 
  if (err != 0) 
                #line 576 
                qlcnic_sriov_pf_cleanup(adapter);
  #line 578 
  return err;
}

#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int __qlcnic_pci_sriov_enable(struct qlcnic_adapter *adapter, int num_vfs)
{
  #line 584 
  int err = 0;
  #line 586 
  cif_set_bit(10L,& adapter->state);
  #line 587 
  (adapter->ahw)->op_mode = (unsigned short)3U;
  #line 589 
  err = qlcnic_sriov_init(adapter,num_vfs);
  #line 590 
  if (err != 0) 
                #line 591 
                goto clear_op_mode;
  #line 593 
  err = qlcnic_sriov_pf_create_flr_queue(adapter);
  #line 594 
  if (err != 0) 
                #line 595 
                goto sriov_cleanup;
  #line 597 
  err = qlcnic_sriov_pf_init(adapter);
  #line 598 
  if (err != 0) 
                #line 599 
                goto del_flr_queue;
  #line 601 
  qlcnic_sriov_alloc_vlans(adapter);
  #line 603 
  return err;
  #line 605 
  del_flr_queue: 
                 #line 605 
  ;
  #line 606 
  qlcnic_sriov_pf_del_flr_queue(adapter);
  #line 608 
  sriov_cleanup: 
                 #line 608 
  ;
  #line 609 
  __qlcnic_sriov_cleanup(adapter);
  #line 611 
  clear_op_mode: 
                 #line 611 
  ;
  #line 612 
  cif_clear_bit(10L,& adapter->state);
  #line 613 
  (adapter->ahw)->op_mode = (unsigned short)0U;
  #line 614 
  return err;
}

#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_pci_sriov_enable(struct qlcnic_adapter *adapter, int num_vfs)
{
  #line 620 
  int err;
  #line 619 
  struct net_device *netdev = adapter->netdev;
  #line 622 
  if ((adapter->flags & 4U) == 0U) {
    #line 623 
    netdev_err(netdev,(char *)"SR-IOV cannot be enabled, when legacy interrupts are enabled\n");
    #line 625 
    return -5;
  }
  #line 628 
  rtnl_lock();
  #line 629 
  if ((int)netif_running(netdev) != 0) 
                                       #line 630 
                                       __qlcnic_down(adapter,netdev);
  #line 632 
  err = __qlcnic_pci_sriov_enable(adapter,num_vfs);
  #line 633 
  if (err != 0) 
                #line 634 
                goto error;
  #line 636 
  if ((int)netif_running(netdev) != 0) 
                                       #line 637 
                                       __qlcnic_up(adapter,netdev);
  #line 639 
  rtnl_unlock();
  #line 640 
  err = qlcnic_sriov_pf_enable(adapter,num_vfs);
  #line 641 
  if (err == 0) {
    #line 642 
    netdev_info(netdev,(char *)"SR-IOV is enabled successfully on port %d\n",(int)adapter->portnum);
    #line 646 
    return num_vfs;
  }
  #line 649 
  rtnl_lock();
  #line 650 
  if ((int)netif_running(netdev) != 0) 
                                       #line 651 
                                       __qlcnic_down(adapter,netdev);
  #line 653 
  error: 
         #line 653 
  ;
  #line 654 
  if (qlcnic_83xx_configure_opmode(adapter) == 0) {
    #line 655 
    if ((int)netif_running(netdev) != 0) 
                                         #line 656 
                                         __qlcnic_up(adapter,netdev);
  }
  #line 659 
  rtnl_unlock();
  #line 660 
  netdev_info(netdev,(char *)"Failed to enable SR-IOV on port %d\n",(int)adapter->portnum);
  #line 663 
  return err;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_pci_sriov_configure(struct pci_dev *dev, int num_vfs)
{
  #line 669 
  int err;
  #line 668 
  struct qlcnic_adapter *adapter = pci_get_drvdata(dev);
  #line 671 
  if ((int)test_and_set_bit(2L,& adapter->state) != 0) 
                                                       #line 672 
                                                       return -16;
  #line 674 
  if (num_vfs == 0) 
                    #line 675 
                    err = qlcnic_pci_sriov_disable(adapter); else 
                                                                  #line 677 
                                                                  err = qlcnic_pci_sriov_enable(adapter,num_vfs);
  #line 679 
  cif_clear_bit(2L,& adapter->state);
  #line 680 
  return err;
}

#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_set_vf_acl(struct qlcnic_adapter *adapter, u8 func)
{
  #line 685 
  struct qlcnic_cmd_args cmd;
  #line 686 
  struct qlcnic_vport *vp;
  #line 687 
  int err;
  #line 687 
  int id;
  #line 688 
  u8 *mac;
  #line 690 
  id = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)func));
  #line 691 
  if (id < 0) 
              #line 692 
              return id;
  #line 694 
  vp = (((adapter->ahw)->sriov)->vf_info + (unsigned long)id)->vp;
  #line 695 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  #line 696 
  if (err != 0) 
                #line 697 
                return err;
  #line 699 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)func << 16) | 3);
  #line 700 
  if ((int)vp->spoofchk == 1) {
    #line 701 
    mac = (u8 *)(& vp->mac);
    #line 702 
    *(cmd.req.arg + 2U) |= 266U;
    #line 703 
    *(cmd.req.arg + 4U) = (unsigned int)((((int)*(mac + 5U) | ((int)*(mac + 4U) << 8)) | ((int)*(mac + 3U) << 16)) | ((int)*(mac + 2U) << 24));
    #line 705 
    *(cmd.req.arg + 5U) = (unsigned int)((int)*(mac + 1U) | ((int)*mac << 8));
  }
  #line 708 
  if ((unsigned int)vp->vlan_mode == 1U) {
    #line 709 
    *(cmd.req.arg + 2U) |= 64U;
    #line 710 
    *(cmd.req.arg + 3U) |= (unsigned int)((int)vp->pvid << 8);
  }
  #line 713 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 714 
  if (err != 0) 
                #line 715 
                _dev_err(& (adapter->pdev)->dev,(char *)"Failed to set ACL, err=%d\n",err);
  #line 718 
  qlcnic_free_mbx_args(& cmd);
  #line 719 
  return err;
}

#line 722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_set_vf_vport_info(struct qlcnic_adapter *adapter, u16 func)
{
  #line 725 
  struct qlcnic_info defvp_info;
  #line 726 
  int err;
  #line 728 
  err = qlcnic_sriov_pf_cal_res_limit(adapter,& defvp_info,(unsigned short)((int)func));
  #line 729 
  if (err != 0) 
                #line 730 
                return -5;
  #line 732 
  err = qlcnic_sriov_set_vf_acl(adapter,(unsigned char)((int)((unsigned char)func)));
  #line 733 
  if (err != 0) 
                #line 734 
                return err;
  #line 736 
  return 0;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_channel_cfg_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 744 
  struct qlcnic_adapter *adapter;
  #line 745 
  struct qlcnic_sriov *sriov;
  #line 747 
  size_t size;
  #line 748 
  int err;
  #line 742 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 743 
  struct qlcnic_vport *vp = vf->vp;
  #line 746 
  u16 func = (unsigned short)vf->pci_func;
  #line 750 
  adapter = vf->adapter;
  #line 751 
  sriov = (adapter->ahw)->sriov;
  #line 753 
  if ((unsigned int)(trans->req_hdr)->cmd_op == 0U) {
    #line 754 
    err = qlcnic_sriov_pf_config_vport(adapter,(unsigned char)1,(unsigned short)((int)func));
    #line 755 
    if (err == 0) {
      #line 756 
      err = qlcnic_sriov_set_vf_vport_info(adapter,(unsigned short)((int)func));
      #line 757 
      if (err != 0) 
                    #line 758 
                    qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)func));
    }
  }
  else {
    #line 761 
    if ((unsigned int)vp->vlan_mode == 2U) {
      #line 762 
      size = 2UL;
      #line 763 
      size = (unsigned long)sriov->num_allowed_vlans * size;
      #line 764 
      memset((void *)vf->sriov_vlans,0,size);
    }
    #line 767 
    err = qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)func));
  }
  #line 770 
  if (err != 0) 
                #line 771 
                goto err_out;
  #line 773 
  *(cmd->rsp.arg) |= 33554432U;
  #line 775 
  if ((unsigned int)(trans->req_hdr)->cmd_op == 0U) 
                                                    #line 776 
                                                    cif_set_bit(3L,& vf->state); else 
                                                                    #line 778 
                                                                    cif_clear_bit(3L,& vf->state);
  #line 780 
  return err;
  #line 782 
  err_out: 
           #line 782 
  ;
  #line 783 
  *(cmd->rsp.arg) |= 67108864U;
  #line 784 
  return err;
}

#line 787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_cfg_vf_def_mac(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, u16 vlan, u8 op)
{
  #line 791 
  struct qlcnic_cmd_args *cmd;
  #line 792 
  struct qlcnic_macvlan_mbx mv;
  #line 793 
  struct qlcnic_vport *vp;
  #line 794 
  u8 *addr;
  #line 795 
  int err;
  #line 796 
  u32 *buf;
  #line 797 
  int vpid;
  #line 799 
  vp = vf->vp;
  #line 801 
  cmd = (struct qlcnic_cmd_args *)kzalloc(200UL,2592U);
  #line 802 
  if (cmd == (struct qlcnic_cmd_args *)0) 
                                          #line 803 
                                          return -12;
  #line 805 
  err = qlcnic_alloc_mbx_args(cmd,adapter,69U);
  #line 806 
  if (err != 0) 
                #line 807 
                goto free_cmd;
  #line 809 
  cmd->type = 1U;
  #line 810 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)vf->pci_func));
  #line 811 
  if (vpid < 0) {
    #line 812 
    err = -22;
    #line 813 
    goto free_args;
  }
  #line 816 
  if ((unsigned int)vlan != 0U) 
    #line 817 
    if ((unsigned int)op == 1U || (unsigned int)op == 3U) 
                                                          #line 817 
                                                          op = (unsigned char)3U; else 
                                                                    #line 817 
                                                                    op = (unsigned char)4U;
  #line 820 
  *(cmd->req.arg + 1U) = (unsigned int)((int)op | 448);
  #line 821 
  *(cmd->req.arg + 1U) = (*(cmd->req.arg + 1U) | (unsigned int)(vpid << 16)) | 2147483648U;
  #line 823 
  addr = (u8 *)(& vp->mac);
  #line 824 
  mv.vlan = vlan;
  #line 825 
  mv.mac_addr0 = *addr;
  #line 826 
  mv.mac_addr1 = *(addr + 1U);
  #line 827 
  mv.mac_addr2 = *(addr + 2U);
  #line 828 
  mv.mac_addr3 = *(addr + 3U);
  #line 829 
  mv.mac_addr4 = *(addr + 4U);
  #line 830 
  mv.mac_addr5 = *(addr + 5U);
  #line 831 
  buf = cmd->req.arg + 2U;
  #line 832 
  memcpy((void *)buf,(void *)(& mv),8UL);
  #line 834 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 836 
  if (err == 0) 
                #line 837 
                return err;
  #line 839 
  free_args: 
             #line 839 
  ;
  #line 840 
  qlcnic_free_mbx_args(cmd);
  #line 841 
  free_cmd: 
            #line 841 
  ;
  #line 842 
  kfree((void *)cmd);
  #line 843 
  return err;
}

#line 846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_create_rx_ctx(struct qlcnic_cmd_args *cmd)
{
  #line 848 
  if (*(cmd->req.arg) >> 29 != 3U) 
                                   #line 849 
                                   return -22;
  #line 851 
  return 0;
}

#line 854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_83xx_cfg_default_mac_vlan(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, int opcode)
{
  #line 858 
  struct qlcnic_sriov *sriov;
  #line 859 
  u16 vlan;
  #line 860 
  int i;
  #line 862 
  sriov = (adapter->ahw)->sriov;
  #line 864 
  cif_spin_lock_bh_vlan_list_lock_of_qlcnic_vf_info(& vf->vlan_list_lock);
  #line 865 
  if (vf->num_vlan != 0) {
    #line 866 
    i = 0;
    #line 866 
    while ((int)sriov->num_allowed_vlans > i) {
      #line 867 
      vlan = *(vf->sriov_vlans + (unsigned long)i);
      #line 868 
      if ((unsigned int)vlan != 0U) 
                                    #line 869 
                                    qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)((int)vlan),(unsigned char)((int)((unsigned char)opcode)));
      #line 866 
      i ++;
    }
  }
  #line 873 
  cif_spin_unlock_bh_vlan_list_lock_of_qlcnic_vf_info(& vf->vlan_list_lock);
  #line 875 
  if ((unsigned int)(vf->vp)->vlan_mode != 1U) {
    #line 876 
    if ((int)qlcnic_83xx_pf_check(adapter) != 0) {
      #line 876 
      if ((int)qlcnic_sriov_check_any_vlan(vf) != 0) 
                                                     #line 878 
                                                     return;
    }
    #line 879 
    qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)0,(unsigned char)((int)((unsigned char)opcode)));
  }
  #line 881 
  return;
}

#line 883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_create_rx_ctx_cmd(struct qlcnic_bc_trans *tran, struct qlcnic_cmd_args *cmd)
{
  #line 888 
  struct qlcnic_rcv_mbx_out *mbx_out;
  #line 889 
  int err;
  #line 886 
  struct qlcnic_vf_info *vf = tran->vf;
  #line 887 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 891 
  err = qlcnic_sriov_validate_create_rx_ctx(cmd);
  #line 892 
  if (err != 0) {
    #line 893 
    *(cmd->rsp.arg) |= 201326592U;
    #line 894 
    return err;
  }
  #line 897 
  *(cmd->req.arg + 6U) = (unsigned int)(vf->vp)->handle;
  #line 898 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 900 
  if (err == 0) {
    #line 901 
    mbx_out = (struct qlcnic_rcv_mbx_out *)(cmd->rsp.arg + 1U);
    #line 902 
    vf->rx_ctx_id = mbx_out->ctx_id;
    #line 903 
    qlcnic_83xx_cfg_default_mac_vlan(adapter,vf,1);
  }
  else 
       #line 905 
       vf->rx_ctx_id = (unsigned short)0U;
  #line 908 
  return err;
}

#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_mac_address_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 915 
  u8 type;
  #line 915 
  u8 *mac;
  #line 914 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 917 
  type = (unsigned char)*(cmd->req.arg + 1U);
  #line 918 
  switch ((int)type) {
    #line 919 
    case 2: 
            #line 919 
    ;
    #line 920 
    case 5: 
            #line 920 
    ;
    #line 921 
    *(cmd->rsp.arg) = 67108864U;
    #line 922 
    break;
    #line 923 
    case 1: 
            #line 923 
    ;
    #line 924 
    *(cmd->rsp.arg) = 33554432U;
    #line 925 
    mac = (u8 *)(& (vf->vp)->mac);
    #line 926 
    *(cmd->rsp.arg + 2U) = (unsigned int)((int)*(mac + 1U) | (((int)*mac << 8) & 65535));
    #line 927 
    *(cmd->rsp.arg + 1U) = (unsigned int)(((int)*(mac + 5U) | (((int)*(mac + 4U) << 8) & 65535)) | (((int)*(mac + 3U) << 16) & 16711680)) | (unsigned int)((int)*(mac + 2U) << 24);
  }
  #line 932 
  return 0;
}

#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_create_tx_ctx(struct qlcnic_cmd_args *cmd)
{
  #line 937 
  if (*(cmd->req.arg) >> 29 != 3U) 
                                   #line 938 
                                   return -22;
  #line 940 
  return 0;
}

#line 943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_create_tx_ctx_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 948 
  struct qlcnic_tx_mbx_out *mbx_out;
  #line 949 
  int err;
  #line 946 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 947 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 951 
  err = qlcnic_sriov_validate_create_tx_ctx(cmd);
  #line 952 
  if (err != 0) {
    #line 953 
    *(cmd->rsp.arg) |= 201326592U;
    #line 954 
    return err;
  }
  #line 957 
  *(cmd->req.arg + 5U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  #line 958 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 959 
  if (err == 0) {
    #line 960 
    mbx_out = (struct qlcnic_tx_mbx_out *)(cmd->rsp.arg + 2U);
    #line 961 
    vf->tx_ctx_id = mbx_out->ctx_id;
  }
  else 
       #line 963 
       vf->tx_ctx_id = (unsigned short)0U;
  #line 966 
  return err;
}

#line 969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_del_rx_ctx(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 972 
  if (*(cmd->req.arg) >> 29 != 3U) 
                                   #line 973 
                                   return -22;
  #line 975 
  if ((*(cmd->req.arg + 1U) & 65535U) != (unsigned int)vf->rx_ctx_id) 
    #line 976 
    return -22;
  #line 978 
  return 0;
}

#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_del_rx_ctx_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 986 
  int err;
  #line 984 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 985 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 988 
  err = qlcnic_sriov_validate_del_rx_ctx(vf,cmd);
  #line 989 
  if (err != 0) {
    #line 990 
    *(cmd->rsp.arg) |= 201326592U;
    #line 991 
    return err;
  }
  #line 994 
  qlcnic_83xx_cfg_default_mac_vlan(adapter,vf,2);
  #line 995 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  #line 996 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 998 
  if (err == 0) 
                #line 999 
                vf->rx_ctx_id = (unsigned short)0U;
  #line 1001 
  return err;
}

#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_del_tx_ctx(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1007 
  if (*(cmd->req.arg) >> 29 != 3U) 
                                   #line 1008 
                                   return -22;
  #line 1010 
  if ((*(cmd->req.arg + 1U) & 65535U) != (unsigned int)vf->tx_ctx_id) 
    #line 1011 
    return -22;
  #line 1013 
  return 0;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_del_tx_ctx_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1021 
  int err;
  #line 1019 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1020 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1023 
  err = qlcnic_sriov_validate_del_tx_ctx(vf,cmd);
  #line 1024 
  if (err != 0) {
    #line 1025 
    *(cmd->rsp.arg) |= 201326592U;
    #line 1026 
    return err;
  }
  #line 1029 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  #line 1030 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 1032 
  if (err == 0) 
                #line 1033 
                vf->tx_ctx_id = (unsigned short)0U;
  #line 1035 
  return err;
}

#line 1038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_lro(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1041 
  if (*(cmd->req.arg + 1U) >> 16 != (unsigned int)vf->rx_ctx_id) 
                                                                 #line 1042 
                                                                 return -22;
  #line 1044 
  return 0;
}

#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_lro_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1052 
  int err;
  #line 1050 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1051 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1054 
  err = qlcnic_sriov_validate_cfg_lro(vf,cmd);
  #line 1055 
  if (err != 0) {
    #line 1056 
    *(cmd->rsp.arg) |= 201326592U;
    #line 1057 
    return err;
  }
  #line 1060 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 1061 
  return err;
}

#line 1064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_ip_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1069 
  int err;
  #line 1067 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1068 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1071 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  #line 1072 
  *(cmd->req.arg + 1U) |= 2147483648U;
  #line 1074 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 1075 
  return err;
}

#line 1078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_intrpt(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1081 
  if (((*(cmd->req.arg + 1U) >> 8) & 255U) != (unsigned int)vf->pci_func) 
    #line 1082 
    return -22;
  #line 1084 
  if ((*(cmd->req.arg + 1U) & 65536U) == 0U) 
                                             #line 1085 
                                             return -22;
  #line 1087 
  if ((*(cmd->req.arg + 1U) & 255U) != 1U) 
                                           #line 1088 
                                           return -22;
  #line 1090 
  return 0;
}

#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_intrpt_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1098 
  int err;
  #line 1096 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1097 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1100 
  err = qlcnic_sriov_validate_cfg_intrpt(vf,cmd);
  #line 1101 
  if (err != 0) 
                #line 1102 
                *(cmd->rsp.arg) |= 201326592U; else 
                                                    #line 1104 
                                                    err = qlcnic_issue_cmd(adapter,cmd);
  #line 1106 
  return err;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_mtu(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1113 
  if (*(cmd->req.arg + 1U) != (unsigned int)vf->rx_ctx_id) 
                                                           #line 1114 
                                                           return -22;
  #line 1116 
  if (*(cmd->req.arg + 2U) > (unsigned int)(adapter->ahw)->max_mtu) 
                                                                    #line 1117 
                                                                    return -22;
  #line 1119 
  return 0;
}

#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_set_mtu_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1127 
  int err;
  #line 1125 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1126 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1129 
  err = qlcnic_sriov_validate_mtu(adapter,vf,cmd);
  #line 1130 
  if (err != 0) 
                #line 1131 
                *(cmd->rsp.arg) |= 201326592U; else 
                                                    #line 1133 
                                                    err = qlcnic_issue_cmd(adapter,cmd);
  #line 1135 
  return err;
}

#line 1138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_get_nic_info(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1141 
  if ((*(cmd->req.arg + 1U) & 2147483648U) != 0U) {
    #line 1142 
    if (((*(cmd->req.arg + 1U) >> 16) & 32767U) != (unsigned int)vf->pci_func) 
      #line 1143 
      return -22;
  }
  else 
       #line 1145 
       *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  #line 1148 
  return 0;
}

#line 1151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_get_nic_info_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1156 
  int err;
  #line 1154 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1155 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1158 
  err = qlcnic_sriov_validate_get_nic_info(vf,cmd);
  #line 1159 
  if (err != 0) {
    #line 1160 
    *(cmd->rsp.arg) |= 201326592U;
    #line 1161 
    return err;
  }
  #line 1164 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 1165 
  return err;
}

#line 1168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_rss(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1171 
  if (*(cmd->req.arg + 1U) != (unsigned int)vf->rx_ctx_id) 
                                                           #line 1172 
                                                           return -22;
  #line 1174 
  return 0;
}

#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_rss_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1182 
  int err;
  #line 1180 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1181 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1184 
  err = qlcnic_sriov_validate_cfg_rss(vf,cmd);
  #line 1185 
  if (err != 0) 
                #line 1186 
                *(cmd->rsp.arg) |= 201326592U; else 
                                                    #line 1188 
                                                    err = qlcnic_issue_cmd(adapter,cmd);
  #line 1190 
  return err;
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_intrcoal(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1198 
  u16 ctx_id;
  #line 1198 
  u16 pkts;
  #line 1198 
  u16 time;
  #line 1200 
  u8 type;
  #line 1197 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  #line 1199 
  int err = -22;
  #line 1202 
  type = (unsigned char)((unsigned int)((unsigned char)*(cmd->req.arg + 1U)) & 7U);
  #line 1203 
  ctx_id = (unsigned short)(*(cmd->req.arg + 1U) >> 16);
  #line 1204 
  pkts = (unsigned short)*(cmd->req.arg + 2U);
  #line 1205 
  time = (unsigned short)(*(cmd->req.arg + 2U) >> 16);
  #line 1207 
  switch ((int)type) {
    #line 1208 
    case 1: 
            #line 1208 
    ;
    #line 1209 
    if (((int)vf->rx_ctx_id != (int)ctx_id || (int)coal->rx_packets < (int)pkts) || (int)coal->rx_time_us > (int)time) 
      #line 1211 
      goto err_label;
    #line 1212 
    break;
    #line 1213 
    case 2: 
            #line 1213 
    ;
    #line 1214 
    if (((int)vf->tx_ctx_id != (int)ctx_id || (int)coal->tx_packets < (int)pkts) || (int)coal->tx_time_us > (int)time) 
      #line 1216 
      goto err_label;
    #line 1217 
    break;
    #line 1218 
    default: 
             #line 1218 
    ;
    #line 1219 
    netdev_err(adapter->netdev,(char *)"Invalid coalescing type 0x%x received\n",(int)type);
    #line 1221 
    return err;
  }
  #line 1224 
  return 0;
  #line 1226 
  err_label: 
             #line 1226 
  ;
  #line 1227 
  netdev_err(adapter->netdev,(char *)"Expected: rx_ctx_id 0x%x rx_packets 0x%x rx_time_us 0x%x tx_ctx_id 0x%x tx_packets 0x%x tx_time_us 0x%x\n",(int)vf->rx_ctx_id,(int)coal->rx_packets,(int)coal->rx_time_us,(int)vf->tx_ctx_id,(int)coal->tx_packets,(int)coal->tx_time_us);
  #line 1230 
  netdev_err(adapter->netdev,(char *)"Received: ctx_id 0x%x packets 0x%x time_us 0x%x type 0x%x\n",(int)ctx_id,(int)pkts,(int)time,(int)type);
  #line 1233 
  return err;
}

#line 1236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_intrcoal_cmd(struct qlcnic_bc_trans *tran, struct qlcnic_cmd_args *cmd)
{
  #line 1241 
  int err;
  #line 1239 
  struct qlcnic_vf_info *vf = tran->vf;
  #line 1240 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1243 
  err = qlcnic_sriov_validate_cfg_intrcoal(adapter,vf,cmd);
  #line 1244 
  if (err != 0) {
    #line 1245 
    *(cmd->rsp.arg) |= 201326592U;
    #line 1246 
    return err;
  }
  #line 1249 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 1250 
  return err;
}

#line 1253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_macvlan(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1258 
  u8 op;
  #line 1258 
  u8 new_op;
  #line 1257 
  struct qlcnic_vport *vp = vf->vp;
  #line 1260 
  if ((*(cmd->req.arg + 1U) & 256U) == 0U) 
                                           #line 1261 
                                           return -22;
  #line 1263 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  #line 1264 
  *(cmd->req.arg + 1U) |= 2147483648U;
  #line 1266 
  if ((unsigned int)vp->vlan_mode == 1U) {
    #line 1267 
    op = (unsigned char)((unsigned int)((unsigned char)*(cmd->req.arg + 1U)) & 7U);
    #line 1268 
    *(cmd->req.arg + 1U) &= 4294967288U;
    #line 1269 
    if ((unsigned int)op == 1U || (unsigned int)op == 3U) 
                                                          #line 1269 
                                                          new_op = (unsigned char)3U; else 
                                                                    #line 1269 
                                                                    new_op = (unsigned char)4U;
    #line 1271 
    *(cmd->req.arg + 3U) |= (unsigned int)((int)vp->pvid << 16);
    #line 1272 
    *(cmd->req.arg + 1U) |= (unsigned int)new_op;
  }
  #line 1275 
  return 0;
}

#line 1278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_macvlan_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1283 
  int err;
  #line 1281 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1282 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1285 
  err = qlcnic_sriov_validate_cfg_macvlan(adapter,vf,cmd);
  #line 1286 
  if (err != 0) {
    #line 1287 
    *(cmd->rsp.arg) |= 201326592U;
    #line 1288 
    return err;
  }
  #line 1291 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 1292 
  return err;
}

#line 1295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_linkevent(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1298 
  if (*(cmd->req.arg + 1U) >> 16 != (unsigned int)vf->rx_ctx_id) 
                                                                 #line 1299 
                                                                 return -22;
  #line 1301 
  return 0;
}

#line 1304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_linkevent_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1309 
  int err;
  #line 1307 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1308 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1311 
  err = qlcnic_sriov_validate_linkevent(vf,cmd);
  #line 1312 
  if (err != 0) {
    #line 1313 
    *(cmd->rsp.arg) |= 201326592U;
    #line 1314 
    return err;
  }
  #line 1317 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 1318 
  return err;
}

#line 1321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_promisc_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1326 
  int err;
  #line 1324 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1325 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1328 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  #line 1329 
  *(cmd->req.arg + 1U) |= 2147483648U;
  #line 1330 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 1331 
  return err;
}

#line 1334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_get_acl_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1340 
  struct qlcnic_adapter *adapter;
  #line 1341 
  struct qlcnic_sriov *sriov;
  #line 1337 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 1338 
  struct qlcnic_vport *vp = vf->vp;
  #line 1339 
  u8 mode = vp->vlan_mode;
  #line 1343 
  adapter = vf->adapter;
  #line 1344 
  sriov = (adapter->ahw)->sriov;
  #line 1346 
  *(cmd->rsp.arg) |= 33554432U;
  #line 1351 
  if ((int)qlcnic_84xx_check(adapter) != 0) 
    #line 1351 
    if ((unsigned int)mode == 1U) 
                                  #line 1352 
                                  return 0;
  #line 1354 
  switch ((int)mode) {
    #line 1355 
    case 2: 
            #line 1355 
    ;
    #line 1356 
    *(cmd->rsp.arg + 1U) = (unsigned int)((int)mode | 256);
    #line 1357 
    *(cmd->rsp.arg + 2U) = (unsigned int)((int)sriov->num_allowed_vlans << 16);
    #line 1358 
    break;
    #line 1359 
    case 1: 
            #line 1359 
    ;
    #line 1360 
    *(cmd->rsp.arg + 1U) = (unsigned int)(((int)mode | 256) | ((int)vp->pvid << 16));
    #line 1361 
    break;
  }
  #line 1364 
  return 0;
}

#line 1367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_del_guest_vlan(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1372 
  u16 vlan;
  #line 1371 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 1374 
  if (! qlcnic_sriov_check_any_vlan(vf)) 
                                         #line 1375 
                                         return -22;
  #line 1377 
  vlan = (unsigned short)(*(cmd->req.arg + 1U) >> 16);
  #line 1378 
  if ((unsigned int)vf->rx_ctx_id == 0U) {
    #line 1379 
    qlcnic_sriov_del_vlan_id(sriov,vf,(unsigned short)((int)vlan));
    #line 1380 
    return 0;
  }
  #line 1383 
  qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)((int)vlan),(unsigned char)2);
  #line 1384 
  qlcnic_sriov_del_vlan_id(sriov,vf,(unsigned short)((int)vlan));
  #line 1386 
  if ((int)qlcnic_83xx_pf_check(adapter) != 0) 
                                               #line 1387 
                                               qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)0,(unsigned char)1);
  #line 1389 
  return 0;
}

#line 1392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_add_guest_vlan(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  #line 1398 
  u16 vlan;
  #line 1396 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 1397 
  int err = -5;
  #line 1400 
  if ((int)qlcnic_83xx_pf_check(adapter) != 0) {
    #line 1400 
    if ((int)qlcnic_sriov_check_any_vlan(vf) != 0) 
                                                   #line 1401 
                                                   return err;
  }
  #line 1403 
  vlan = (unsigned short)(*(cmd->req.arg + 1U) >> 16);
  #line 1405 
  if ((unsigned int)vf->rx_ctx_id == 0U) {
    #line 1406 
    qlcnic_sriov_add_vlan_id(sriov,vf,(unsigned short)((int)vlan));
    #line 1407 
    return 0;
  }
  #line 1410 
  if ((int)qlcnic_83xx_pf_check(adapter) != 0) {
    #line 1411 
    err = qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)0,(unsigned char)2);
    #line 1413 
    if (err != 0) 
                  #line 1414 
                  return err;
  }
  #line 1417 
  err = qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)((int)vlan),(unsigned char)1);
  #line 1419 
  if (err != 0) {
    #line 1420 
    if ((int)qlcnic_83xx_pf_check(adapter) != 0) 
                                                 #line 1421 
                                                 qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)0,(unsigned char)1);
    #line 1423 
    return err;
  }
  #line 1426 
  qlcnic_sriov_add_vlan_id(sriov,vf,(unsigned short)((int)vlan));
  #line 1427 
  return err;
}

#line 1430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_guest_vlan_cmd(struct qlcnic_bc_trans *tran, struct qlcnic_cmd_args *cmd)
{
  #line 1437 
  u8 op;
  #line 1451 
  unsigned int tmp;
  #line 1433 
  struct qlcnic_vf_info *vf = tran->vf;
  #line 1434 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1435 
  struct qlcnic_vport *vp = vf->vp;
  #line 1436 
  int err = -5;
  #line 1439 
  if ((unsigned int)vp->vlan_mode != 2U) {
    #line 1440 
    *(cmd->rsp.arg) |= 67108864U;
    #line 1441 
    return err;
  }
  #line 1444 
  op = (unsigned char)((unsigned int)((unsigned char)*(cmd->req.arg + 1U)) & 15U);
  #line 1446 
  if ((unsigned int)op != 0U) 
                              #line 1447 
                              err = qlcnic_sriov_pf_add_guest_vlan(adapter,vf,cmd); else 
                                                                    #line 1449 
                                                                    err = qlcnic_sriov_pf_del_guest_vlan(adapter,vf,cmd);
  #line 1451 
  if (err != 0) 
                #line 1451 
                tmp = 67108864U; else 
                                      #line 1451 
                                      tmp = 33554432U;
  #line 1451 
  *(cmd->rsp.arg) |= tmp;
  #line 1452 
  return err;
}

#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_pf_passthru_supp_cmds[5U] = {15, 103, 104, 96, 97};
#line 1463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static struct qlcnic_sriov_cmd_handler qlcnic_pf_bc_cmd_hdlr[4U] = {{.fn = & qlcnic_sriov_pf_channel_cfg_cmd}, {.fn = & qlcnic_sriov_pf_channel_cfg_cmd}, {.fn = & qlcnic_sriov_pf_get_acl_cmd}, {.fn = & qlcnic_sriov_pf_cfg_guest_vlan_cmd}};
#line 1470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static struct qlcnic_sriov_fw_cmd_handler qlcnic_pf_fw_cmd_hdlr[15U] = {{.cmd = 7U, .fn = & qlcnic_sriov_pf_create_rx_ctx_cmd}, {.cmd = 9U, .fn = & qlcnic_sriov_pf_create_tx_ctx_cmd}, {.cmd = 31U, .fn = & qlcnic_sriov_pf_mac_address_cmd}, {.cmd = 8U, .fn = & qlcnic_sriov_pf_del_rx_ctx_cmd}, {.cmd = 10U, .fn = & qlcnic_sriov_pf_del_tx_ctx_cmd}, {.cmd = 74U, .fn = & qlcnic_sriov_pf_cfg_lro_cmd}, {.cmd = 1U, .fn = & qlcnic_sriov_pf_cfg_ip_cmd}, {.cmd = 2U, .fn = & qlcnic_sriov_pf_cfg_intrpt_cmd}, {.cmd = 18U, .fn = & qlcnic_sriov_pf_set_mtu_cmd}, {.cmd = 33U, .fn = & qlcnic_sriov_pf_get_nic_info_cmd}, {.cmd = 65U, .fn = & qlcnic_sriov_pf_cfg_rss_cmd}, {.cmd = 67U, .fn = & qlcnic_sriov_pf_cfg_intrcoal_cmd}, {.cmd = 69U, .fn = & qlcnic_sriov_pf_cfg_macvlan_cmd}, {.cmd = 72U, .fn = & qlcnic_sriov_pf_linkevent_cmd}, {.cmd = 73U, .fn = & qlcnic_sriov_pf_cfg_promisc_cmd}};
#line 1488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_process_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1492 
  u8 size;
  #line 1492 
  u8 cmd_op;
  #line 1494 
  cmd_op = (trans->req_hdr)->cmd_op;
  #line 1496 
  if ((unsigned int)(trans->req_hdr)->op_type == 1U) {
    #line 1497 
    size = (unsigned char)4U;
    #line 1498 
    if ((int)cmd_op < (int)size) {
      #line 1499 
      (*(qlcnic_pf_bc_cmd_hdlr[(int)cmd_op].fn))(trans,cmd);
      #line 1500 
      return;
    }
  }
  else {
    #line 1503 
    int i;
    #line 1504 
    size = (unsigned char)15U;
    #line 1505 
    i = 0;
    #line 1505 
    while ((int)size > i) {
      #line 1506 
      if ((unsigned int)cmd_op == qlcnic_pf_fw_cmd_hdlr[i].cmd) {
        #line 1507 
        (*(qlcnic_pf_fw_cmd_hdlr[i].fn))(trans,cmd);
        #line 1508 
        return;
      }
      #line 1505 
      i ++;
    }
    #line 1512 
    size = (unsigned char)5U;
    #line 1513 
    i = 0;
    #line 1513 
    while ((int)size > i) {
      #line 1514 
      if ((int)cmd_op == qlcnic_pf_passthru_supp_cmds[i]) {
        #line 1515 
        qlcnic_issue_cmd(adapter,cmd);
        #line 1516 
        return;
      }
      #line 1513 
      i ++;
    }
  }
  #line 1521 
  *(cmd->rsp.arg) |= 301989888U;
  #line 1522 
  return;
}

#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_create_rx_ctx(struct qlcnic_adapter *adapter, u32 *int_id)
{
  #line 1527 
  u16 vpid;
  #line 1529 
  vpid = (unsigned short)qlcnic_sriov_pf_get_vport_handle(adapter,
                                       (unsigned char)((int)(adapter->ahw)->pci_func));
  #line 1531 
  *int_id |= (unsigned int)vpid;
  #line 1532 
  return;
}

#line 1534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_del_rx_ctx(struct qlcnic_adapter *adapter, u32 *int_id)
{
  #line 1537 
  u16 vpid;
  #line 1539 
  vpid = (unsigned short)qlcnic_sriov_pf_get_vport_handle(adapter,
                                       (unsigned char)((int)(adapter->ahw)->pci_func));
  #line 1541 
  *int_id |= (unsigned int)((int)vpid << 16);
  #line 1542 
  return;
}

#line 1544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_create_tx_ctx(struct qlcnic_adapter *adapter, u32 *int_id)
{
  #line 1547 
  int vpid;
  #line 1549 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)(adapter->ahw)->pci_func));
  #line 1551 
  *int_id |= (unsigned int)(vpid << 16);
  #line 1552 
  return;
}

#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_del_tx_ctx(struct qlcnic_adapter *adapter, u32 *int_id)
{
  #line 1557 
  u16 vpid;
  #line 1559 
  vpid = (unsigned short)qlcnic_sriov_pf_get_vport_handle(adapter,
                                       (unsigned char)((int)(adapter->ahw)->pci_func));
  #line 1561 
  *int_id |= (unsigned int)((int)vpid << 16);
  #line 1562 
  return;
}

#line 1564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_promisc(struct qlcnic_adapter *adapter, u32 *int_id)
{
  #line 1567 
  u16 vpid;
  #line 1569 
  vpid = (unsigned short)qlcnic_sriov_pf_get_vport_handle(adapter,
                                       (unsigned char)((int)(adapter->ahw)->pci_func));
  #line 1571 
  *int_id = (*int_id | (unsigned int)((int)vpid << 16)) | 2147483648U;
  #line 1572 
  return;
}

#line 1574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_ipaddr(struct qlcnic_adapter *adapter, u32 *int_id)
{
  #line 1577 
  u16 vpid;
  #line 1579 
  vpid = (unsigned short)qlcnic_sriov_pf_get_vport_handle(adapter,
                                       (unsigned char)((int)(adapter->ahw)->pci_func));
  #line 1581 
  *int_id = (*int_id | (unsigned int)((int)vpid << 16)) | 2147483648U;
  #line 1582 
  return;
}

#line 1584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_macaddr(struct qlcnic_adapter *adapter, u32 *int_id)
{
  #line 1587 
  u16 vpid;
  #line 1589 
  vpid = (unsigned short)qlcnic_sriov_pf_get_vport_handle(adapter,
                                       (unsigned char)((int)(adapter->ahw)->pci_func));
  #line 1591 
  *int_id = (*int_id | (unsigned int)((int)vpid << 16)) | 2147483648U;
  #line 1592 
  return;
}

#line 1594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_del_rx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf)
{
  #line 1597 
  struct qlcnic_cmd_args cmd;
  #line 1598 
  int vpid;
  #line 1600 
  if ((unsigned int)vf->rx_ctx_id == 0U) 
                                         #line 1601 
                                         return;
  #line 1603 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,8U) != 0) 
                                                    #line 1604 
                                                    return;
  #line 1606 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)vf->pci_func));
  #line 1607 
  if (vpid >= 0) {
    #line 1608 
    *(cmd.req.arg + 1U) = (unsigned int)((int)vf->rx_ctx_id | (vpid << 16));
    #line 1609 
    if (qlcnic_issue_cmd(adapter,& cmd) != 0) 
                                              #line 1610 
                                              _dev_err(& (adapter->pdev)->dev,(char *)"Failed to delete Tx ctx in firmware for func 0x%x\n",(int)vf->pci_func); else 
                                                                    #line 1614 
                                                                    vf->rx_ctx_id = (unsigned short)0U;
  }
  #line 1617 
  qlcnic_free_mbx_args(& cmd);
  #line 1618 
  return;
}

#line 1620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf)
{
  #line 1623 
  struct qlcnic_cmd_args cmd;
  #line 1624 
  int vpid;
  #line 1626 
  if ((unsigned int)vf->tx_ctx_id == 0U) 
                                         #line 1627 
                                         return;
  #line 1629 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,10U) != 0) 
                                                     #line 1630 
                                                     return;
  #line 1632 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)vf->pci_func));
  #line 1633 
  if (vpid >= 0) {
    #line 1634 
    *(cmd.req.arg + 1U) |= (unsigned int)((int)vf->tx_ctx_id | (vpid << 16));
    #line 1635 
    if (qlcnic_issue_cmd(adapter,& cmd) != 0) 
                                              #line 1636 
                                              _dev_err(& (adapter->pdev)->dev,(char *)"Failed to delete Tx ctx in firmware for func 0x%x\n",(int)vf->pci_func); else 
                                                                    #line 1640 
                                                                    vf->tx_ctx_id = (unsigned short)0U;
  }
  #line 1643 
  qlcnic_free_mbx_args(& cmd);
  #line 1644 
  return;
}

#line 1646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_add_act_list_irqsave(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans)
{
  #line 1651 
  unsigned long flag;
  #line 1650 
  struct qlcnic_trans_list *t_list = & vf->rcv_act;
  #line 1653 
  cif___ldv_spin_lock_lock_of_qlcnic_trans_list(& t_list->lock);
  #line 1655 
  __qlcnic_sriov_add_act_list(sriov,vf,trans);
  #line 1657 
  cif_spin_unlock_irqrestore_lock_of_qlcnic_trans_list(& t_list->lock,flag);
  #line 1658 
  return 0;
}

#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void __qlcnic_sriov_process_flr(struct qlcnic_vf_info *vf)
{
  #line 1663 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1665 
  qlcnic_sriov_cleanup_list(& vf->rcv_pend);
  #line 1666 
  cancel_work_sync(& vf->trans_work);
  #line 1667 
  qlcnic_sriov_cleanup_list(& vf->rcv_act);
  #line 1669 
  if ((int)test_bit(5L,& vf->state) != 0) {
    #line 1670 
    qlcnic_sriov_del_tx_ctx(adapter,vf);
    #line 1671 
    qlcnic_sriov_del_rx_ctx(adapter,vf);
  }
  #line 1674 
  qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)vf->pci_func));
  #line 1676 
  cif_clear_bit(4L,& vf->state);
  #line 1677 
  if ((int)test_bit(5L,& vf->state) != 0) {
    #line 1678 
    qlcnic_sriov_add_act_list_irqsave((adapter->ahw)->sriov,vf,vf->flr_trans);
    #line 1680 
    cif_clear_bit(5L,& vf->state);
    #line 1681 
    vf->flr_trans = (struct qlcnic_bc_trans *)0;
  }
  #line 1683 
  return;
}

#line 1685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_process_flr(struct work_struct *work)
{
  #line 1689 
  void *__mptr;
  #line 1687 
  struct qlcnic_vf_info *vf;
  #line 1689 
  __mptr = (void *)work;
  #line 1689 
  vf = ((struct qlcnic_vf_info *)(__mptr + 18446744073709551408U));
  #line 1690 
  __qlcnic_sriov_process_flr(vf);
  #line 1691 
  return;
}

#line 1694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_schedule_flr(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, void (*func)(struct work_struct *))
{
  #line 1698 
  if ((int)test_bit(2L,& (vf->adapter)->state) != 0) 
                                                     #line 1699 
                                                     return;
  {
    #line 1701 
    struct lock_class_key __key;
    #line 1701 
    __init_work(& vf->flr_work,0);
    #line 1701 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 1701 
    vf->flr_work.data = __constr_expr_41;
    #line 1701 
    lockdep_init_map(& vf->flr_work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1701 
    INIT_LIST_HEAD(& vf->flr_work.entry);
    #line 1701 
    vf->flr_work.func = func;
  }
  #line 1702 
  cif_queue_work(sriov->bc.bc_flr_wq,& vf->flr_work);
  #line 1703 
  return;
}

#line 1705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_handle_soft_flr(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_vf_info *vf)
{
  #line 1709 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 1711 
  cif_set_bit(4L,& vf->state);
  #line 1712 
  cif_clear_bit(3L,& vf->state);
  #line 1713 
  cif_set_bit(5L,& vf->state);
  #line 1714 
  vf->flr_trans = trans;
  #line 1715 
  qlcnic_sriov_schedule_flr(sriov,vf,& qlcnic_sriov_pf_process_flr);
  #line 1716 
  netdev_info(adapter->netdev,(char *)"Software FLR for PCI func %d\n",(int)vf->pci_func);
  #line 1718 
  return;
}

#line 1720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
bool qlcnic_sriov_soft_flr_check(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_vf_info *vf)
{
  #line 1724 
  struct qlcnic_bc_hdr *hdr = trans->req_hdr;
  #line 1726 
  if ((unsigned int)hdr->cmd_op == 0U && (unsigned int)hdr->op_type == 1U) {
    #line 1727 
    if ((int)test_bit(3L,& vf->state) != 0) {
      #line 1729 
      qlcnic_sriov_handle_soft_flr(adapter,trans,vf);
      #line 1730 
      return (_Bool)1;
    }
  }
  #line 1733 
  return (_Bool)0;
}

#line 1736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_handle_flr(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf)
{
  #line 1739 
  struct net_device *dev = (vf->adapter)->netdev;
  #line 1740 
  struct qlcnic_vport *vp = vf->vp;
  #line 1742 
  if (! test_and_set_bit(3L,& vf->state)) {
    #line 1743 
    cif_clear_bit(4L,& vf->state);
    #line 1744 
    return;
  }
  #line 1747 
  if ((int)test_and_set_bit(4L,& vf->state) != 0) {
    #line 1748 
    netdev_info(dev,(char *)"FLR for PCI func %d in progress\n",(int)vf->pci_func);
    #line 1750 
    return;
  }
  #line 1753 
  if ((unsigned int)vp->vlan_mode == 2U) 
                                         #line 1754 
                                         memset((void *)vf->sriov_vlans,0,(unsigned long)sriov->num_allowed_vlans * 2UL);
  #line 1757 
  qlcnic_sriov_schedule_flr(sriov,vf,& qlcnic_sriov_pf_process_flr);
  #line 1758 
  netdev_info(dev,(char *)"FLR received for PCI func %d\n",(int)vf->pci_func);
  #line 1759 
  return;
}

#line 1761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_reset(struct qlcnic_adapter *adapter)
{
  #line 1765 
  struct qlcnic_vf_info *vf;
  #line 1767 
  int i;
  #line 1763 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1764 
  struct qlcnic_sriov *sriov = ahw->sriov;
  #line 1766 
  u16 num_vfs = (unsigned short)sriov->num_vfs;
  #line 1769 
  i = 0;
  #line 1769 
  while ((int)num_vfs > i) {
    #line 1770 
    vf = sriov->vf_info + (unsigned long)i;
    #line 1771 
    vf->rx_ctx_id = (unsigned short)0U;
    #line 1772 
    vf->tx_ctx_id = (unsigned short)0U;
    #line 1773 
    cancel_work_sync(& vf->flr_work);
    #line 1774 
    __qlcnic_sriov_process_flr(vf);
    #line 1775 
    cif_clear_bit(3L,& vf->state);
    #line 1769 
    i ++;
  }
  #line 1778 
  qlcnic_sriov_pf_reset_vport_handle(adapter,(unsigned char)((int)ahw->pci_func));
  #line 1779 
  writel((unsigned int)(((int)ahw->num_msix + -1) << 8),ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 8U));
  #line 1780 
  return;
}

#line 1782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_pf_reinit(struct qlcnic_adapter *adapter)
{
  #line 1785 
  int err;
  #line 1784 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1787 
  if (! qlcnic_sriov_enable_check(adapter)) 
                                            #line 1788 
                                            return 0;
  #line 1790 
  ahw->op_mode = (unsigned short)3U;
  #line 1792 
  err = qlcnic_sriov_pf_init(adapter);
  #line 1793 
  if (err != 0) 
                #line 1794 
                return err;
  #line 1796 
  _dev_info(& (adapter->pdev)->dev,(char *)"%s: op_mode %d\n",(char *)"qlcnic_sriov_pf_reinit",(int)ahw->op_mode);
  #line 1798 
  return err;
}

#line 1801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_mac(struct net_device *netdev, int vf, u8 *mac)
{
  #line 1805 
  int i;
  #line 1805 
  int num_vfs;
  #line 1806 
  struct qlcnic_vf_info *vf_info;
  #line 1807 
  u8 *curr_mac;
  #line 1803 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1804 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 1809 
  if (! qlcnic_sriov_pf_check(adapter)) 
                                        #line 1810 
                                        return -95;
  #line 1812 
  num_vfs = (int)sriov->num_vfs;
  #line 1814 
  if (is_valid_ether_addr(mac)) {
    #line 1814 
    if (vf >= num_vfs) 
                       #line 1815 
                       return -22;
  }
  else 
       #line 1815 
       return -22;
  #line 1817 
  if ((int)ether_addr_equal((u8 *)(& adapter->mac_addr),mac) != 0) {
    #line 1818 
    netdev_err(netdev,(char *)"MAC address is already in use by the PF\n");
    #line 1819 
    return -22;
  }
  #line 1822 
  i = 0;
  #line 1822 
  while (i < num_vfs) {
    {
      #line 1823 
      vf_info = sriov->vf_info + (unsigned long)i;
      #line 1824 
      if ((int)ether_addr_equal((u8 *)(& (vf_info->vp)->mac),mac) != 0) {
        #line 1825 
        netdev_err(netdev,(char *)"MAC address is already in use by VF %d\n",i);
        #line 1828 
        return -22;
      }
    }
    #line 1822 
    i ++;
  }
  #line 1832 
  vf_info = sriov->vf_info + (unsigned long)vf;
  #line 1833 
  curr_mac = (u8 *)(& (vf_info->vp)->mac);
  #line 1835 
  if ((int)test_bit(3L,& vf_info->state) != 0) {
    #line 1836 
    netdev_err(netdev,(char *)"MAC address change failed for VF %d, as VF driver is loaded. Please unload VF driver and retry the operation\n",vf);
    #line 1839 
    return -95;
  }
  #line 1842 
  memcpy((void *)curr_mac,(void *)mac,(unsigned long)netdev->addr_len);
  #line 1843 
  netdev_info(netdev,(char *)"MAC Address %pM  is configured for VF %d\n",mac,vf);
  #line 1845 
  return 0;
}

#line 1848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_tx_rate(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate)
{
  #line 1853 
  struct qlcnic_vf_info *vf_info;
  #line 1854 
  struct qlcnic_info nic_info;
  #line 1855 
  struct qlcnic_vport *vp;
  #line 1856 
  u16 vpid;
  #line 1851 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1852 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 1858 
  if (! qlcnic_sriov_pf_check(adapter)) 
                                        #line 1859 
                                        return -95;
  #line 1861 
  if ((int)sriov->num_vfs <= vf) 
                                 #line 1862 
                                 return -22;
  #line 1864 
  vf_info = sriov->vf_info + (unsigned long)vf;
  #line 1865 
  vp = vf_info->vp;
  #line 1866 
  vpid = vp->handle;
  #line 1868 
  if (min_tx_rate == 0) 
                        #line 1869 
                        min_tx_rate = 100;
  #line 1871 
  if (max_tx_rate != 0 && (max_tx_rate > 9999 || max_tx_rate < min_tx_rate)) {
    #line 1873 
    netdev_err(netdev,(char *)"Invalid max Tx rate, allowed range is [%d - %d]",min_tx_rate,9999);
    #line 1876 
    return -22;
  }
  #line 1879 
  if (max_tx_rate == 0) 
                        #line 1880 
                        max_tx_rate = 10000;
  #line 1882 
  if (min_tx_rate != 0 && (min_tx_rate > max_tx_rate || min_tx_rate <= 99)) {
    #line 1884 
    netdev_err(netdev,(char *)"Invalid min Tx rate, allowed range is [%d - %d]",100,max_tx_rate);
    #line 1887 
    return -22;
  }
  #line 1890 
  if ((int)test_bit(3L,& vf_info->state) != 0) {
    #line 1891 
    if (qlcnic_sriov_get_vf_vport_info(adapter,& nic_info,
                                       (unsigned short)((int)vpid)) != 0) 
      #line 1892 
      return -5;
    #line 1894 
    nic_info.max_tx_bw = (unsigned short)(max_tx_rate / 100);
    #line 1895 
    nic_info.min_tx_bw = (unsigned short)(min_tx_rate / 100);
    #line 1896 
    nic_info.bit_offsets = (unsigned short)1U;
    #line 1898 
    if (qlcnic_sriov_pf_set_vport_info(adapter,& nic_info,
                                       (unsigned short)((int)vpid)) != 0) 
      #line 1899 
      return -5;
  }
  #line 1902 
  vp->max_tx_bw = (unsigned short)(max_tx_rate / 100);
  #line 1903 
  netdev_info(netdev,(char *)"Setting Max Tx rate %d (Mbps), %d %% of PF bandwidth, for VF %d\n",max_tx_rate,(int)vp->max_tx_bw,vf);
  #line 1906 
  vp->min_tx_bw = (unsigned short)(min_tx_rate / 100);
  #line 1907 
  netdev_info(netdev,(char *)"Setting Min Tx rate %d (Mbps), %d %% of PF bandwidth, for VF %d\n",min_tx_rate,(int)vp->min_tx_bw,vf);
  #line 1910 
  return 0;
}

#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos, __be16 vlan_proto)
{
  #line 1918 
  struct qlcnic_vf_info *vf_info;
  #line 1919 
  struct qlcnic_vport *vp;
  #line 1916 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1917 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 1921 
  if (! qlcnic_sriov_pf_check(adapter)) 
                                        #line 1922 
                                        return -95;
  #line 1924 
  if ((int)sriov->num_vfs <= vf || (unsigned int)qos > 7U) 
                                                           #line 1925 
                                                           return -22;
  #line 1927 
  if ((unsigned int)vlan_proto != 129U) 
                                        #line 1928 
                                        return -93;
  #line 1930 
  if ((unsigned int)vlan > 4095U) {
    #line 1931 
    netdev_err(netdev,(char *)"Invalid VLAN ID, allowed range is [0 - %d]\n",4095);
    #line 1934 
    return -22;
  }
  #line 1937 
  vf_info = sriov->vf_info + (unsigned long)vf;
  #line 1938 
  vp = vf_info->vp;
  #line 1939 
  if ((int)test_bit(3L,& vf_info->state) != 0) {
    #line 1940 
    netdev_err(netdev,(char *)"VLAN change failed for VF %d, as VF driver is loaded. Please unload VF driver and retry the operation\n",vf);
    #line 1943 
    return -95;
  }
  #line 1946 
  memset((void *)vf_info->sriov_vlans,0,(unsigned long)sriov->num_allowed_vlans * 2UL);
  #line 1949 
  switch ((int)vlan) {
    #line 1950 
    case 4095: 
               #line 1950 
    ;
    #line 1951 
    vp->vlan_mode = (unsigned char)2U;
    #line 1952 
    break;
    #line 1953 
    case 0: 
            #line 1953 
    ;
    #line 1954 
    vp->vlan_mode = (unsigned char)0U;
    #line 1955 
    vp->qos = (unsigned char)0U;
    #line 1956 
    break;
    #line 1957 
    default: 
             #line 1957 
    ;
    #line 1958 
    vp->vlan_mode = (unsigned char)1U;
    #line 1959 
    qlcnic_sriov_add_vlan_id(sriov,vf_info,(unsigned short)((int)vlan));
    #line 1960 
    vp->qos = qos;
    #line 1961 
    vp->pvid = vlan;
  }
  #line 1964 
  netdev_info(netdev,(char *)"Setting VLAN %d, QoS %d, for VF %d\n",(int)vlan,(int)qos,vf);
  #line 1966 
  return 0;
}

#line 1969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static __u32 qlcnic_sriov_get_vf_vlan(struct qlcnic_adapter *adapter, struct qlcnic_vport *vp, int vf)
{
  #line 1972 
  __u32 vlan = 0U;
  #line 1974 
  switch ((int)vp->vlan_mode) {
    #line 1975 
    case 1: 
            #line 1975 
    ;
    #line 1976 
    vlan = (unsigned int)vp->pvid;
    #line 1977 
    break;
    #line 1978 
    case 2: 
            #line 1978 
    ;
    #line 1979 
    vlan = 4095U;
    #line 1980 
    break;
    #line 1981 
    case 0: 
            #line 1981 
    ;
    #line 1982 
    vlan = 0U;
    #line 1983 
    break;
    #line 1984 
    default: 
             #line 1984 
    ;
    #line 1985 
    netdev_info(adapter->netdev,(char *)"Invalid VLAN mode = %d for VF %d\n",(int)vp->vlan_mode,vf);
  }
  #line 1989 
  return vlan;
}

#line 1992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi)
{
  #line 1997 
  struct qlcnic_vport *vp;
  #line 1995 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1996 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 1999 
  if (! qlcnic_sriov_pf_check(adapter)) 
                                        #line 2000 
                                        return -95;
  #line 2002 
  if ((int)sriov->num_vfs <= vf) 
                                 #line 2003 
                                 return -22;
  #line 2005 
  vp = (sriov->vf_info + (unsigned long)vf)->vp;
  #line 2006 
  memcpy((void *)(& ivi->mac),(void *)(& vp->mac),6UL);
  #line 2007 
  ivi->vlan = qlcnic_sriov_get_vf_vlan(adapter,vp,vf);
  #line 2008 
  ivi->qos = (unsigned int)vp->qos;
  #line 2009 
  ivi->spoofchk = (unsigned int)vp->spoofchk;
  #line 2010 
  if ((unsigned int)vp->max_tx_bw == 100U) 
                                           #line 2011 
                                           ivi->max_tx_rate = 0U; else 
                                                                    #line 2013 
                                                                    ivi->max_tx_rate = (unsigned int)((int)vp->max_tx_bw * 100);
  #line 2014 
  if ((unsigned int)vp->min_tx_bw == 1U) 
                                         #line 2015 
                                         ivi->min_tx_rate = 0U; else 
                                                                  #line 2017 
                                                                  ivi->min_tx_rate = (unsigned int)((int)vp->min_tx_bw * 100);
  #line 2019 
  ivi->vf = (unsigned int)vf;
  #line 2020 
  return 0;
}

#line 2023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_spoofchk(struct net_device *netdev, int vf, bool chk)
{
  #line 2027 
  struct qlcnic_vf_info *vf_info;
  #line 2028 
  struct qlcnic_vport *vp;
  #line 2025 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 2026 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 2030 
  if (! qlcnic_sriov_pf_check(adapter)) 
                                        #line 2031 
                                        return -95;
  #line 2033 
  if ((int)sriov->num_vfs <= vf) 
                                 #line 2034 
                                 return -22;
  #line 2036 
  vf_info = sriov->vf_info + (unsigned long)vf;
  #line 2037 
  vp = vf_info->vp;
  #line 2038 
  if ((int)test_bit(3L,& vf_info->state) != 0) {
    #line 2039 
    netdev_err(netdev,(char *)"Spoof check change failed for VF %d, as VF driver is loaded. Please unload VF driver and retry the operation\n",vf);
    #line 2042 
    return -95;
  }
  #line 2045 
  vp->spoofchk = chk;
  #line 2046 
  return 0;
}

#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
#line 101 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 309 
  return emg_queue_work(wq,work);
}

#line 494  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 497 
  return ldv_kzalloc(size,flags);
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_spin_lock_bh_vlan_list_lock_of_qlcnic_vf_info(spinlock_t *lock)
{
  #line 811 
  ldv_spin_model_lock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  #line 813 
  spin_lock_bh(lock);
  #line 814 
  return;
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_spin_unlock_bh_vlan_list_lock_of_qlcnic_vf_info(spinlock_t *lock)
{
  #line 820 
  ldv_spin_model_unlock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  #line 822 
  spin_unlock_bh(lock);
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif___ldv_spin_lock_lock_of_qlcnic_trans_list(spinlock_t *lock)
{
  #line 829 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_trans_list");
  #line 831 
  __ldv_spin_lock(lock);
  #line 832 
  return;
}

#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_pf.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_qlcnic_trans_list(spinlock_t *lock, unsigned long flags)
{
  #line 838 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_trans_list");
  #line 840 
  spin_unlock_irqrestore(lock,flags);
  #line 841 
  return;
}

/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_983 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_985 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_987 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_1037 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_1039 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_spin_lock_bh_queue_lock_of_qlcnic_mailbox(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_spin_unlock_bh_queue_lock_of_qlcnic_mailbox(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_spin_unlock_irqrestore_aen_lock_of_qlcnic_mailbox(spinlock_t *lock, unsigned long flags);
#line 26 
#line 849 
static void cif_mutex_lock_mem_lock_of_qlcnic_hardware_context(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 35 
#line 815 
static void cif___ldv_spin_lock_aen_lock_of_qlcnic_mailbox(spinlock_t *lock);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 856  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context(struct mutex *lock);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t *__d;
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void reinit_completion(struct completion *x)
{
  #line 100 
  x->done = 0U;
  #line 101 
  return;
}

#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 118 
#line 118 
void complete(struct completion *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 454 
#line 454 
void flush_workqueue(struct workqueue_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 496 
#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 353  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
#line 76 
int ___ratelimit(struct ratelimit_state *, char *);
#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1042 
int pci_find_ext_capability(struct pci_dev *, int);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_fw_version(struct qlcnic_adapter *adapter);
#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);
#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_setup_intr(struct qlcnic_adapter *adapter);
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_func_no(struct qlcnic_adapter *adapter);
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_cam_lock(struct qlcnic_adapter *adapter);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_cam_unlock(struct qlcnic_adapter *adapter);
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 544 
void qlcnic_83xx_add_sysfs(struct qlcnic_adapter *adapter);
#line 545 
#line 545 
void qlcnic_83xx_remove_sysfs(struct qlcnic_adapter *adapter);
#line 546 
#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size);
#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size);
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_rd_reg_indirect(struct qlcnic_adapter *adapter, ulong addr, int *err);
#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_wrt_reg_indirect(struct qlcnic_adapter *adapter, ulong addr, u32 data);
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode);
#line 551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_hw_lro(struct qlcnic_adapter *adapter, int mode);
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_rss(struct qlcnic_adapter *adapter, int enable);
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_change_l2_filter(struct qlcnic_adapter *adapter, u64 *addr, u16 vlan_id, struct qlcnic_host_tx_ring *tx_ring);
#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *pci_info);
#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *nic);
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_initialize_nic(struct qlcnic_adapter *adapter, int enable);
#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 559 
int qlcnic_83xx_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev);
#line 560 
#line 560 
void qlcnic_83xx_napi_del(struct qlcnic_adapter *adapter);
#line 561 
#line 561 
void qlcnic_83xx_napi_enable(struct qlcnic_adapter *adapter);
#line 562 
#line 562 
void qlcnic_83xx_napi_disable(struct qlcnic_adapter *adapter);
#line 563 
#line 1511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_led(struct qlcnic_adapter *adapter, u32 state, u32 beacon);
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 564 
int qlcnic_ind_wr(struct qlcnic_adapter *adapter, u32 addr, u32 data);
#line 565 
#line 565 
int qlcnic_ind_rd(struct qlcnic_adapter *adapter, u32 addr);
#line 566 
#line 1166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_create_rx_ctx(struct qlcnic_adapter *adapter);
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx, int ring);
#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_del_rx_ctx(struct qlcnic_adapter *adapter);
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring);
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u8 func_id);
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_setup_link_event(struct qlcnic_adapter *adapter, int enable);
#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 574 
void qlcnic_83xx_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring);
#line 575 
#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_intrpt(struct qlcnic_adapter *adapter, bool op_type);
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan_id, u8 op);
#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function);
#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 type);
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_intr_coal(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal);
#line 585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_rx_tx_intr_coal(struct qlcnic_adapter *adapter);
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_port_info(struct qlcnic_adapter *adapter);
#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_enable_mbx_interrupt(struct qlcnic_adapter *adapter);
#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_disable_mbx_intr(struct qlcnic_adapter *adapter);
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
irqreturn_t qlcnic_83xx_clear_legacy_intr(struct qlcnic_adapter *adapter);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
irqreturn_t qlcnic_83xx_intr(int irq, void *data);
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
irqreturn_t qlcnic_83xx_tmp_intr(int irq, void *data);
#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_check_vf(struct qlcnic_adapter *adapter, struct pci_device_id *ent);
#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_setup_mbx_intr(struct qlcnic_adapter *adapter);
#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_free_mbx_intr(struct qlcnic_adapter *adapter);
#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_register_map(struct qlcnic_hardware_context *ahw);
#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_idc_aen_work(struct work_struct *work);
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int mode);
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_erase_flash_sector(struct qlcnic_adapter *adapter, u32 sector_start_addr);
#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_bulk_write(struct qlcnic_adapter *adapter, u32 addr, u32 *p_data, int count);
#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_write32(struct qlcnic_adapter *adapter, u32 addr, u32 *p_data);
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_lock_flash(struct qlcnic_adapter *adapter);
#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_unlock_flash(struct qlcnic_adapter *adapter);
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_read_flash_mfg_id(struct qlcnic_adapter *adapter);
#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_read_flash_descriptor_table(struct qlcnic_adapter *adapter);
#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_read32(struct qlcnic_adapter *adapter, u32 flash_addr, u8 *p_data, int count);
#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_lockless_flash_read32(struct qlcnic_adapter *adapter, u32 flash_addr, u8 *p_data, int count);
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 615 
void qlcnic_83xx_idc_poll_dev_state(struct work_struct *work);
#line 616 
#line 616 
void qlcnic_83xx_idc_exit(struct qlcnic_adapter *adapter);
#line 617 
#line 617 
void qlcnic_83xx_idc_request_reset(struct qlcnic_adapter *adapter, u32 key);
#line 618 
#line 3016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_lock_driver(struct qlcnic_adapter *adapter);
#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_unlock_driver(struct qlcnic_adapter *adapter);
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_stats(struct qlcnic_adapter *adapter, u64 *data);
#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_extend_md_capab(struct qlcnic_adapter *adapter);
#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_link_ksettings(struct qlcnic_adapter *adapter, struct ethtool_link_ksettings *ecmd);
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_link_ksettings(struct qlcnic_adapter *adapter, struct ethtool_link_ksettings *ecmd);
#line 636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_pauseparam(struct qlcnic_adapter *adapter, struct ethtool_pauseparam *pause);
#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_pauseparam(struct qlcnic_adapter *adapter, struct ethtool_pauseparam *pause);
#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_test_link(struct qlcnic_adapter *adapter);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_port_type(struct qlcnic_adapter *adapter);
#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_reg_test(struct qlcnic_adapter *adapter);
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_regs_len(struct qlcnic_adapter *adapter);
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_registers(struct qlcnic_adapter *adapter, u32 *regs_buff);
#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_loopback_test(struct net_device *netdev, u8 mode);
#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_interrupt_test(struct net_device *netdev);
#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_led(struct net_device *netdev, enum ethtool_phys_id_state state);
#line 648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 3797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_test(struct qlcnic_adapter *adapter);
#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_enable_flash_write(struct qlcnic_adapter *adapter);
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_disable_flash_write(struct qlcnic_adapter *adapter);
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1050  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_enable_mbx_poll(struct qlcnic_adapter *adapter);
#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_disable_mbx_poll(struct qlcnic_adapter *adapter);
#line 653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 653 
int qlcnic_83xx_idc_init(struct qlcnic_adapter *adapter);
#line 654 
#line 654 
int qlcnic_83xx_idc_reattach_driver(struct qlcnic_adapter *adapter);
#line 655 
#line 655 
int qlcnic_83xx_set_vnic_opmode(struct qlcnic_adapter *adapter);
#line 656 
#line 656 
int qlcnic_83xx_check_vnic_state(struct qlcnic_adapter *adapter);
#line 657 
#line 657 
void qlcnic_83xx_aer_stop_poll_work(struct qlcnic_adapter *adapter);
#line 658 
#line 658 
int qlcnic_83xx_aer_reset(struct qlcnic_adapter *adapter);
#line 659 
#line 659 
void qlcnic_83xx_aer_start_poll_work(struct qlcnic_adapter *adapter);
#line 660 
#line 660 
u32 qlcnic_83xx_get_saved_state(void *t_hdr, u32 index);
#line 661 
#line 661 
void qlcnic_83xx_set_saved_state(void *t_hdr, u32 index, u32 value);
#line 662 
#line 662 
void qlcnic_83xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump);
#line 663 
#line 663 
u32 qlcnic_83xx_get_cap_size(void *t_hdr, int index);
#line 664 
#line 664 
void qlcnic_83xx_set_sys_info(void *t_hdr, int idx, u32 value);
#line 665 
#line 665 
void qlcnic_83xx_store_cap_mask(void *tmpl_hdr, u32 mask);
#line 666 
#line 3084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_ms_mem_write128(struct qlcnic_adapter *adapter, u64 addr, u32 *data, u32 count);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_aen_handler(struct qlcnic_dcb *dcb, void *msg)
{
  #line 106 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->aen_handler != (void (*)(struct qlcnic_dcb *, void *))0) 
    #line 107 
    (*((dcb->ops)->aen_handler))(dcb,msg);
  #line 108 
  return;
}

#line 1588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1588 
void qlcnic_schedule_work(struct qlcnic_adapter *adapter, void (*func)(struct work_struct *), int delay);
#line 1608 
#line 1608 
int qlcnic_fw_create_ctx(struct qlcnic_adapter *dev);
#line 1609 
#line 1609 
void qlcnic_fw_destroy_ctx(struct qlcnic_adapter *adapter);
#line 1618 
#line 1618 
void qlcnic_post_rx_buffers(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *rds_ring, u8 ring_id);
#line 1625 
#line 1625 
void qlcnic_82xx_free_mac_list(struct qlcnic_adapter *adapter);
#line 1634 
#line 1634 
int qlcnic_config_bridged_mode(struct qlcnic_adapter *adapter, u32 enable);
#line 1639 
#line 1639 
int qlcnic_do_lb_test(struct qlcnic_adapter *adapter, u8 mode);
#line 1650 
#line 1650 
void qlcnic_alloc_lb_filters_mem(struct qlcnic_adapter *adapter);
#line 1651 
#line 1651 
int qlcnic_enable_msix(struct qlcnic_adapter *adapter, u32 num_msix);
#line 1672 
#line 1672 
void qlcnic_advert_link_change(struct qlcnic_adapter *adapter, int linkup);
#line 1675 
#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_dump_mbx(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);
#line 1688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1688 
int qlcnic_setup_tss_rss_intr(struct qlcnic_adapter *adapter);
#line 1689 
#line 1689 
void qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev);
#line 1692 
#line 1692 
void qlcnic_detach(struct qlcnic_adapter *adapter);
#line 1694 
#line 1694 
int qlcnic_attach(struct qlcnic_adapter *adapter);
#line 1710 
#line 2465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_get_pci_func_type(struct qlcnic_adapter *adapter, u16 type, u16 *nic, u16 *fcoe, u16 *iscsi);
#line 1759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 4158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_init_mailbox_work(struct qlcnic_adapter *adapter);
#line 1760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 3988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_detach_mailbox_work(struct qlcnic_adapter *adapter);
#line 1761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 3861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_reinit_mbx_work(struct qlcnic_mailbox *mbx);
#line 1762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 3867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_free_mailbox(struct qlcnic_mailbox *mbx);
#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
struct qlcnic_nic_template qlcnic_vf_ops;
#line 1834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_83xx_encap_tx_offload(struct qlcnic_adapter *adapter)
{
  #line 1836 
  return (_Bool)(((adapter->ahw)->extra_capability[0] & 2U) != 0U);
}

#line 1840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_83xx_encap_rx_offload(struct qlcnic_adapter *adapter)
{
  #line 1842 
  return (_Bool)(((adapter->ahw)->extra_capability[0] & 1U) != 0U);
}

#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_get_func_no(struct qlcnic_adapter *adapter)
{
  #line 1917 
  (*(((adapter->ahw)->hw_ops)->get_func_no))(adapter);
  #line 1918 
  return;
}

#line 1920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_api_lock(struct qlcnic_adapter *adapter)
{
  #line 1922 
  return (*(((adapter->ahw)->hw_ops)->api_lock))(adapter);
}

#line 1925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_api_unlock(struct qlcnic_adapter *adapter)
{
  #line 1927 
  (*(((adapter->ahw)->hw_ops)->api_unlock))(adapter);
  #line 1928 
  return;
}

#line 1995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 id, u8 cmd)
{
  #line 1998 
  return (*(((adapter->ahw)->hw_ops)->change_macvlan))(adapter,addr,
                                                    (unsigned short)((int)id),
                                                    (unsigned char)((int)cmd));
}

#line 2144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_cancel_idc_work(struct qlcnic_adapter *adapter)
{
  #line 2146 
  if ((adapter->nic_ops)->cancel_idc_work != (void (*)(struct qlcnic_adapter *))0) 
    #line 2147 
    (*((adapter->nic_ops)->cancel_idc_work))(adapter);
  #line 2148 
  return;
}

#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate)
{
  #line 2159 
  return (*((adapter->nic_ops)->config_led))(adapter,state,rate);
}

#line 2192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_83xx_enable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 2195 
  writel(0U,tx_ring->crb_intr_mask);
  #line 2196 
  return;
}

#line 2199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_83xx_disable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 2202 
  writel(1U,tx_ring->crb_intr_mask);
  #line 2203 
  return;
}

#line 2207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_83xx_enable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  #line 2210 
  writel(0U,sds_ring->crb_intr_mask);
  #line 2211 
  return;
}

#line 2215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_83xx_disable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  #line 2218 
  writel(1U,sds_ring->crb_intr_mask);
  #line 2219 
  return;
}

#line 2242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_enable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  #line 2245 
  if (((adapter->ahw)->hw_ops)->enable_sds_intr != (void (*)(struct qlcnic_adapter *, struct qlcnic_host_sds_ring *))0) 
    #line 2246 
    (*(((adapter->ahw)->hw_ops)->enable_sds_intr))(adapter,sds_ring);
  #line 2247 
  return;
}

#line 2250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_disable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  #line 2253 
  if (((adapter->ahw)->hw_ops)->disable_sds_intr != (void (*)(struct qlcnic_adapter *, struct qlcnic_host_sds_ring *))0) 
    #line 2254 
    (*(((adapter->ahw)->hw_ops)->disable_sds_intr))(adapter,sds_ring);
  #line 2255 
  return;
}

#line 2289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_diag_lock(struct qlcnic_adapter *adapter)
{
  #line 2291 
  return (int)test_and_set_bit(13L,& adapter->state);
}

#line 2294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_release_diag_lock(struct qlcnic_adapter *adapter)
{
  #line 2296 
  cif_clear_bit_0(13L,& adapter->state);
  #line 2297 
  return;
}

#line 2357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_sriov_vf_check(struct qlcnic_adapter *adapter)
{
  #line 2360 
  bool status;
  #line 2359 
  unsigned short device = (adapter->pdev)->device;
  #line 2362 
  status = (_Bool)((((unsigned int)device == 33840U || (unsigned int)device == 33856U) || (unsigned int)device == 35888U) != 0);
  #line 2366 
  return status;
}

#line 2402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_swap32_buffer(u32 *buffer, int count)
{
  #line 2404 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
u32 qlcnic_83xx_reg_tbl[23U];
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
u32 qlcnic_83xx_ext_reg_tbl[43U];
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 193 
void qlcnic_sriov_vf_set_ops(struct qlcnic_adapter *adapter);
#line 195 
#line 195 
void qlcnic_sriov_handle_bc_event(struct qlcnic_adapter *adapter, u32 event);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
#line 966 
static void __qlcnic_83xx_process_aen(struct qlcnic_adapter *adapter);
#line 18 
#line 1910 
static int qlcnic_83xx_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode);
#line 19 
#line 2146 
static void qlcnic_83xx_configure_mac(struct qlcnic_adapter *adapter, u8 *mac, u8 type, struct qlcnic_cmd_args *cmd);
#line 21 
#line 1672 
static int qlcnic_83xx_get_port_config(struct qlcnic_adapter *adapter);
#line 22 
#line 2342 
static irqreturn_t qlcnic_83xx_handle_aen(int irq, void *data);
#line 23 
#line 4187 
static pci_ers_result_t qlcnic_83xx_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state);
#line 25 
#line 1655 
static int qlcnic_83xx_set_port_config(struct qlcnic_adapter *adapter);
#line 26 
#line 4209 
static pci_ers_result_t qlcnic_83xx_io_slot_reset(struct pci_dev *pdev);
#line 27 
#line 4232 
static void qlcnic_83xx_io_resume(struct pci_dev *pdev);
#line 28 
#line 1841 
static int qlcnic_83xx_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode);
#line 29 
#line 730 
static void qlcnic_83xx_set_mac_filter_count(struct qlcnic_adapter *adapter);
#line 30 
#line 3832 
static int qlcnic_83xx_resume(struct qlcnic_adapter *adapter);
#line 31 
#line 3810 
static int qlcnic_83xx_shutdown(struct pci_dev *pdev);
#line 32 
#line 1484 
static void qlcnic_83xx_get_beacon_state(struct qlcnic_adapter *adapter);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static struct qlcnic_mailbox_metadata qlcnic_83xx_mbx_tbl[54U] = {{.cmd = 1U, .in_args = 6U, .out_args = 1U}, {.cmd = 2U, .in_args = 18U, .out_args = 34U}, {.cmd = 7U, .in_args = 136U, .out_args = 27U}, {.cmd = 8U, .in_args = 2U, .out_args = 1U}, {.cmd = 9U, .in_args = 54U, .out_args = 18U}, {.cmd = 10U, .in_args = 2U, .out_args = 1U}, {.cmd = 13U, .in_args = 2U, .out_args = 1U}, {.cmd = 17U, .in_args = 22U, .out_args = 12U}, {.cmd = 18U, .in_args = 3U, .out_args = 1U}, {.cmd = 19U, .in_args = 4U, .out_args = 2U}, {.cmd = 20U, .in_args = 5U, .out_args = 1U}, {.cmd = 21U, .in_args = 4U, .out_args = 1U}, {.cmd = 22U, .in_args = 4U, .out_args = 2U}, {.cmd = 23U, .in_args = 4U, .out_args = 1U}, {.cmd = 24U, .in_args = 4U, .out_args = 2U}, {.cmd = 25U, .in_args = 4U, .out_args = 2U}, {.cmd = 31U, .in_args = 4U, .out_args = 3U}, {.cmd = 32U, .in_args = 1U, .out_args = 129U}, {.cmd = 33U, .in_args = 2U, .out_args = 19U}, {.cmd = 34U, .in_args = 32U, .out_args = 1U}, {.cmd = 36U, .in_args = 4U, .out_args = 3U}, {.cmd = 37U, .in_args = 4U, .out_args = 1U}, {.cmd = 38U, .in_args = 4U, .out_args = 3U}, {.cmd = 39U, .in_args = 4U, .out_args = 1U}, {.cmd = 40U, .in_args = 4U, .out_args = 1U}, {.cmd = 41U, .in_args = 4U, .out_args = 3U}, {.cmd = 42U, .in_args = 5U, .out_args = 1U}, {.cmd = 46U, .in_args = 4U, .out_args = 1U}, {.cmd = 47U, .in_args = 1U, .out_args = 4U}, {.cmd = 48U, .in_args = 5U, .out_args = 5U}, {.cmd = 72U, .in_args = 2U, .out_args = 1U}, {.cmd = 69U, .in_args = 4U, .out_args = 3U}, {.cmd = 67U, .in_args = 6U, .out_args = 1U}, {.cmd = 65U, .in_args = 14U, .out_args = 1U}, {.cmd = 68U, .in_args = 2U, .out_args = 1U}, {.cmd = 73U, .in_args = 2U, .out_args = 1U}, {.cmd = 74U, .in_args = 2U, .out_args = 1U}, {.cmd = 15U, .in_args = 2U, .out_args = 80U}, {.cmd = 102U, .in_args = 2U, .out_args = 1U}, {.cmd = 103U, .in_args = 2U, .out_args = 2U}, {.cmd = 104U, .in_args = 2U, .out_args = 4U}, {.cmd = 99U, .in_args = 5U, .out_args = 1U}, {.cmd = 96U, .in_args = 3U, .out_args = 1U}, {.cmd = 97U, .in_args = 2U, .out_args = 1U}, {.cmd = 105U, .in_args = 5U, .out_args = 1U}, {.cmd = 106U, .in_args = 1U, .out_args = 5U}, {.cmd = 111U, .in_args = 4U, .out_args = 1U}, {.cmd = 11U, .in_args = 130U, .out_args = 26U}, {.cmd = 50U, .in_args = 4U, .out_args = 4U}, {.cmd = 49U, .in_args = 2U, .out_args = 1U}, {.cmd = 52U, .in_args = 1U, .out_args = 2U}, {.cmd = 53U, .in_args = 1U, .out_args = 50U}, {.cmd = 78U, .in_args = 2U, .out_args = 1U}, {.cmd = 55U, .in_args = 4U, .out_args = 1U}};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
u32 qlcnic_83xx_ext_reg_tbl[43U] = {14540U, 14576U, 14588U, 12344U, 12348U, 13660U, 13664U, 13668U, 4096U, 4608U, 4612U, 14208U, 14212U, 14216U, 14220U, 14224U, 14228U, 14232U, 14236U, 14240U, 14244U, 14248U, 14252U, 14256U, 14260U, 14264U, 14268U, 14272U, 14276U, 14280U, 14284U, 14288U, 14292U, 14296U, 14300U, 14304U, 14308U, 14320U, 14324U, 14440U, 14444U, 13572U, 13476U};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
u32 qlcnic_83xx_reg_tbl[23U] = {13480U, 13484U, 13488U, 13568U, 13608U, 13624U, 13632U, 13636U, 13640U, 13644U, 13604U, 13648U, 13652U, 13656U, 13724U, 13820U, 13904U, 14140U, 14260U, 13676U, 13680U, 14416U, 14420U};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static struct qlcnic_hardware_ops qlcnic_83xx_hw_ops = {.read_crb = & qlcnic_83xx_read_crb, .write_crb = & qlcnic_83xx_write_crb, .read_reg = & qlcnic_83xx_rd_reg_indirect, .write_reg = & qlcnic_83xx_wrt_reg_indirect, .get_mac_address = & qlcnic_83xx_get_mac_address, .setup_intr = & qlcnic_83xx_setup_intr, .alloc_mbx_args = & qlcnic_83xx_alloc_mbx_args, .mbx_cmd = & qlcnic_83xx_issue_cmd, .get_func_no = & qlcnic_83xx_get_func_no, .api_lock = & qlcnic_83xx_cam_lock, .api_unlock = & qlcnic_83xx_cam_unlock, .add_sysfs = & qlcnic_83xx_add_sysfs, .remove_sysfs = & qlcnic_83xx_remove_sysfs, .process_lb_rcv_ring_diag = & qlcnic_83xx_process_rcv_ring_diag, .create_rx_ctx = & qlcnic_83xx_create_rx_ctx, .create_tx_ctx = & qlcnic_83xx_create_tx_ctx, .del_rx_ctx = & qlcnic_83xx_del_rx_ctx, .del_tx_ctx = & qlcnic_83xx_del_tx_ctx, .setup_link_event = & qlcnic_83xx_setup_link_event, .get_nic_info = & qlcnic_83xx_get_nic_info, .get_pci_info = & qlcnic_83xx_get_pci_info, .set_nic_info = & qlcnic_83xx_set_nic_info, .change_macvlan = & qlcnic_83xx_sre_macaddr_change, .napi_enable = & qlcnic_83xx_napi_enable, .napi_disable = & qlcnic_83xx_napi_disable, .config_intr_coal = & qlcnic_83xx_config_intr_coal, .config_rss = & qlcnic_83xx_config_rss, .config_hw_lro = & qlcnic_83xx_config_hw_lro, .config_promisc_mode = & qlcnic_83xx_nic_set_promisc, .change_l2_filter = & qlcnic_83xx_change_l2_filter, .get_board_info = & qlcnic_83xx_get_port_info, .set_mac_filter_count = & qlcnic_83xx_set_mac_filter_count, .free_mac_list = & qlcnic_82xx_free_mac_list, .io_error_detected = & qlcnic_83xx_io_error_detected, .io_slot_reset = & qlcnic_83xx_io_slot_reset, .io_resume = & qlcnic_83xx_io_resume, .get_beacon_state = & qlcnic_83xx_get_beacon_state, .enable_sds_intr = & qlcnic_83xx_enable_sds_intr, .disable_sds_intr = & qlcnic_83xx_disable_sds_intr, .enable_tx_intr = & qlcnic_83xx_enable_tx_intr, .disable_tx_intr = & qlcnic_83xx_disable_tx_intr, .get_saved_state = & qlcnic_83xx_get_saved_state, .set_saved_state = & qlcnic_83xx_set_saved_state, .cache_tmpl_hdr_values = & qlcnic_83xx_cache_tmpl_hdr_values, .get_cap_size = & qlcnic_83xx_get_cap_size, .set_sys_info = & qlcnic_83xx_set_sys_info, .store_cap_mask = & qlcnic_83xx_store_cap_mask, .encap_rx_offload = & qlcnic_83xx_encap_rx_offload, .encap_tx_offload = & qlcnic_83xx_encap_tx_offload};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static struct qlcnic_nic_template qlcnic_83xx_ops = {.config_bridged_mode = & qlcnic_config_bridged_mode, .config_led = & qlcnic_config_led, .request_reset = & qlcnic_83xx_idc_request_reset, .cancel_idc_work = & qlcnic_83xx_idc_exit, .napi_add = & qlcnic_83xx_napi_add, .napi_del = & qlcnic_83xx_napi_del, .config_ipaddr = & qlcnic_83xx_config_ipaddr, .clear_legacy_intr = & qlcnic_83xx_clear_legacy_intr, .shutdown = & qlcnic_83xx_shutdown, .resume = & qlcnic_83xx_resume};
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_register_map(struct qlcnic_hardware_context *ahw)
{
  #line 264 
  ahw->hw_ops = & qlcnic_83xx_hw_ops;
  #line 265 
  ahw->reg_tbl = (u32 *)(& qlcnic_83xx_reg_tbl);
  #line 266 
  ahw->ext_reg_tbl = (u32 *)(& qlcnic_83xx_ext_reg_tbl);
  #line 267 
  return;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_fw_version(struct qlcnic_adapter *adapter)
{
  #line 271 
  u32 fw_major;
  #line 271 
  u32 fw_minor;
  #line 271 
  u32 fw_build;
  #line 272 
  struct pci_dev *pdev = adapter->pdev;
  #line 274 
  fw_major = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 11U));
  #line 275 
  fw_minor = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 12U));
  #line 276 
  fw_build = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 13U));
  #line 277 
  adapter->fw_version = ((fw_major << 24) + (fw_minor << 16)) + fw_build;
  #line 279 
  _dev_info(& pdev->dev,(char *)"Driver v%s, firmware version %d.%d.%d\n",(char *)"5.3.66",fw_major,fw_minor,fw_build);
  #line 282 
  return (int)adapter->fw_version;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int __qlcnic_set_win_base(struct qlcnic_adapter *adapter, u32 addr)
{
  #line 287 
  void *base;
  #line 288 
  u32 val;
  #line 290 
  base = (adapter->ahw)->pci_base0 + (unsigned long)(((int)(adapter->ahw)->pci_func + 3584) * 4);
  #line 292 
  writel(addr,base);
  #line 293 
  val = readl(base);
  #line 294 
  if (val != addr) 
                   #line 295 
                   return -5;
  #line 297 
  return 0;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_rd_reg_indirect(struct qlcnic_adapter *adapter, ulong addr, int *err)
{
  #line 303 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 305 
  *err = __qlcnic_set_win_base(adapter,(unsigned int)addr);
  #line 306 
  if (*err == 0) {
    #line 307 
    return (int)readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 1U));
  }
  else {
    #line 309 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s failed, addr = 0x%lx\n",(char *)"qlcnic_83xx_rd_reg_indirect",addr);
    #line 311 
    return -5;
  }
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_wrt_reg_indirect(struct qlcnic_adapter *adapter, ulong addr, u32 data)
{
  #line 318 
  int err;
  #line 319 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 321 
  err = __qlcnic_set_win_base(adapter,(unsigned int)addr);
  #line 322 
  if (err == 0) {
    #line 323 
    writel(data,ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 1U));
    #line 324 
    return 0;
  }
  else {
    #line 326 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s failed, addr = 0x%x data = 0x%x\n",(char *)"qlcnic_83xx_wrt_reg_indirect",(int)addr,data);
    #line 329 
    return err;
  }
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_enable_legacy(struct qlcnic_adapter *adapter)
{
  #line 335 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 338 
  adapter->tgt_status_reg = ahw->pci_base0 + 14528U;
  #line 339 
  adapter->tgt_mask_reg = ahw->pci_base0 + 14536U;
  #line 340 
  adapter->isr_int_vec = ahw->pci_base0 + 14532U;
  #line 341 
  (adapter->msix_entries)->vector = (adapter->pdev)->irq;
  #line 342 
  _dev_info(& (adapter->pdev)->dev,(char *)"using legacy interrupt\n");
  #line 343 
  return;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_calculate_msix_vector(struct qlcnic_adapter *adapter)
{
  #line 347 
  int num_msix;
  #line 349 
  num_msix = (int)adapter->drv_sds_rings;
  #line 352 
  num_msix ++;
  #line 354 
  if ((adapter->flags & 65536U) == 0U) 
                                       #line 355 
                                       num_msix = (int)adapter->drv_tx_rings + num_msix;
  #line 357 
  return num_msix;
}

#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_setup_intr(struct qlcnic_adapter *adapter)
{
  #line 363 
  int err;
  #line 363 
  int i;
  #line 363 
  int num_msix;
  #line 362 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 365 
  if ((adapter->flags & 524288U) != 0U) {
    #line 366 
    err = qlcnic_setup_tss_rss_intr(adapter);
    #line 367 
    if (err < 0) 
                 #line 368 
                 return err;
    #line 369 
    num_msix = (int)ahw->num_msix;
  }
  else {
    #line 371 
    num_msix = qlcnic_83xx_calculate_msix_vector(adapter);
    #line 373 
    err = qlcnic_enable_msix(adapter,(unsigned int)num_msix);
    #line 374 
    if (err == -12) 
                    #line 375 
                    return err;
    #line 377 
    if ((adapter->flags & 4U) != 0U) 
                                     #line 378 
                                     num_msix = (int)ahw->num_msix;
    else {
      #line 380 
      if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                    #line 381 
                                                    return -22;
      #line 382 
      num_msix = 1;
      #line 383 
      adapter->drv_sds_rings = (unsigned char)1U;
      #line 384 
      adapter->drv_tx_rings = (unsigned char)1U;
    }
  }
  #line 389 
  ahw->intr_tbl = (struct qlcnic_intrpt_config *)cif_vzalloc(array_size((unsigned long)num_msix,8UL));
  #line 392 
  if (ahw->intr_tbl == (struct qlcnic_intrpt_config *)0) 
                                                         #line 393 
                                                         return -12;
  #line 395 
  if ((adapter->flags & 4U) == 0U) {
    #line 396 
    if ((unsigned int)(adapter->ahw)->pci_func > 7U) {
      #line 397 
      _dev_err(& (adapter->pdev)->dev,(char *)"PCI function number 8 and higher are not supported with legacy interrupt, func 0x%x\n",(int)ahw->pci_func);
      #line 399 
      return -95;
    }
    #line 402 
    qlcnic_83xx_enable_legacy(adapter);
  }
  #line 405 
  i = 0;
  #line 405 
  while (i < num_msix) {
    #line 406 
    if ((adapter->flags & 4U) != 0U) 
                                     #line 407 
                                     (ahw->intr_tbl + (unsigned long)i)->type = (unsigned char)3U; else 
                                                                    #line 409 
                                                                    (ahw->intr_tbl + (unsigned long)i)->type = (unsigned char)1U;
    #line 410 
    (ahw->intr_tbl + (unsigned long)i)->id = (unsigned short)i;
    #line 411 
    (ahw->intr_tbl + (unsigned long)i)->src = 0U;
    #line 405 
    i ++;
  }
  #line 414 
  return 0;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_clear_legacy_intr_mask(struct qlcnic_adapter *adapter)
{
  #line 419 
  writel(0U,adapter->tgt_mask_reg);
  #line 420 
  return;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_set_legacy_intr_mask(struct qlcnic_adapter *adapter)
{
  #line 424 
  if (adapter->tgt_mask_reg != (void *)0) 
                                          #line 425 
                                          writel(1U,adapter->tgt_mask_reg);
  #line 426 
  return;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_enable_legacy_msix_mbx_intr(struct qlcnic_adapter *adapter)
{
  #line 431 
  u32 mask;
  #line 438 
  mask = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 9U));
  #line 439 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)mask);
  #line 440 
  return;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_disable_mbx_intr(struct qlcnic_adapter *adapter)
{
  #line 444 
  u32 mask;
  #line 446 
  mask = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 9U));
  #line 447 
  writel(1U,(adapter->ahw)->pci_base0 + (unsigned long)mask);
  #line 448 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 8U));
  #line 449 
  return;
}

#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_get_mbx_data(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 454 
  int i;
  #line 456 
  if (cmd->op_type == 1U) 
                          #line 457 
                          return;
  #line 459 
  i = 0;
  #line 459 
  while (cmd->rsp.num > (unsigned int)i) {
    #line 460 
    *(cmd->rsp.arg + (unsigned long)i) = readl((adapter->ahw)->pci_base0 + ((unsigned long)(i * 4) + (unsigned long)2048U));
    #line 459 
    i ++;
  }
  #line 461 
  return;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
irqreturn_t qlcnic_83xx_clear_legacy_intr(struct qlcnic_adapter *adapter)
{
  #line 465 
  u32 intr_val;
  #line 466 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 467 
  int retries = 0;
  #line 469 
  intr_val = readl(adapter->tgt_status_reg);
  #line 471 
  if ((intr_val & 2147483648U) == 0U) 
                                      #line 472 
                                      return IRQ_NONE;
  #line 474 
  if ((intr_val & 255U) != (unsigned int)(adapter->ahw)->pci_func) {
    #line 475 
    (adapter->stats.spurious_intr) ++;
    #line 476 
    return IRQ_NONE;
  }
  #line 478 
  ldv_inline_asm();
  #line 482 
  writel(0U,adapter->isr_int_vec);
  #line 483 
  intr_val = readl(adapter->isr_int_vec);
  #line 484 
  while (1) {
    #line 485 
    intr_val = readl(adapter->tgt_status_reg);
    #line 486 
    if ((intr_val & 255U) != (unsigned int)ahw->pci_func) 
                                                          #line 487 
                                                          break;
    #line 488 
    retries ++;
    #line 489 
    if (! ((intr_val & 1073741824U) != 0U && retries <= 99)) 
                                                             #line 484 
                                                             break;
  }
  #line 492 
  return IRQ_HANDLED;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_notify_mbx_response(struct qlcnic_mailbox *mbx)
{
  #line 497 
  mbx->rsp_status = 1U;
  #line 498 
  complete(& mbx->completion);
  #line 499 
  return;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_poll_process_aen(struct qlcnic_adapter *adapter)
{
  #line 503 
  u32 resp;
  #line 503 
  u32 event;
  #line 505 
  unsigned long flags;
  #line 503 
  u32 rsp_status = 1U;
  #line 504 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  #line 507 
  cif___ldv_spin_lock_aen_lock_of_qlcnic_mailbox(& mbx->aen_lock);
  #line 508 
  resp = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 4U));
  #line 509 
  if ((resp & 1U) == 0U) 
                         #line 510 
                         goto out;
  #line 512 
  event = readl((adapter->ahw)->pci_base0 + 2048U);
  #line 513 
  if ((event & 32768U) != 0U) 
                              #line 514 
                              __qlcnic_83xx_process_aen(adapter);
  else 
    #line 516 
    if (mbx->rsp_status != rsp_status) 
                                       #line 517 
                                       qlcnic_83xx_notify_mbx_response(mbx);
  #line 519 
  out: 
       #line 519 
  ;
  #line 520 
  qlcnic_83xx_enable_legacy_msix_mbx_intr(adapter);
  #line 521 
  cif_spin_unlock_irqrestore_aen_lock_of_qlcnic_mailbox(& mbx->aen_lock,flags);
  #line 522 
  return;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
irqreturn_t qlcnic_83xx_intr(int irq, void *data)
{
  #line 527 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 526 
  struct qlcnic_adapter *adapter = (struct qlcnic_adapter *)data;
  #line 528 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 530 
  if (qlcnic_83xx_clear_legacy_intr(adapter) == (unsigned int)IRQ_NONE) 
    #line 531 
    return IRQ_NONE;
  #line 533 
  qlcnic_83xx_poll_process_aen(adapter);
  #line 535 
  if ((unsigned int)ahw->diag_test != 0U) {
    #line 536 
    if ((unsigned int)ahw->diag_test == 1U) 
                                            #line 537 
                                            (ahw->diag_cnt) ++;
    #line 538 
    qlcnic_83xx_enable_legacy_msix_mbx_intr(adapter);
    #line 539 
    return IRQ_HANDLED;
  }
  #line 542 
  if (test_bit(1L,& adapter->state)) {
    #line 545 
    sds_ring = (adapter->recv_ctx)->sds_rings;
    #line 546 
    napi_schedule(& sds_ring->napi);
  }
  else 
       #line 543 
       qlcnic_83xx_enable_legacy_msix_mbx_intr(adapter);
  #line 549 
  return IRQ_HANDLED;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
irqreturn_t qlcnic_83xx_tmp_intr(int irq, void *data)
{
  #line 554 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  #line 555 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  #line 557 
  if ((adapter->flags & 4U) != 0U) 
                                   #line 558 
                                   goto done;
  #line 560 
  if ((*((adapter->nic_ops)->clear_legacy_intr))(adapter) == (unsigned int)IRQ_NONE) 
    #line 561 
    return IRQ_NONE;
  #line 563 
  done: 
        #line 563 
  ;
  #line 564 
  ((adapter->ahw)->diag_cnt) ++;
  #line 565 
  qlcnic_enable_sds_intr(adapter,sds_ring);
  #line 567 
  return IRQ_HANDLED;
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_free_mbx_intr(struct qlcnic_adapter *adapter)
{
  #line 572 
  u32 num_msix;
  #line 574 
  if ((adapter->flags & 4U) == 0U) 
                                   #line 575 
                                   qlcnic_83xx_set_legacy_intr_mask(adapter);
  #line 577 
  qlcnic_83xx_disable_mbx_intr(adapter);
  #line 579 
  if ((adapter->flags & 4U) != 0U) 
                                   #line 580 
                                   num_msix = (unsigned int)((int)(adapter->ahw)->num_msix + -1); else 
                                                                    #line 582 
                                                                    num_msix = 0U;
  #line 584 
  msleep(20U);
  #line 586 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 587 
    synchronize_irq((adapter->msix_entries + (unsigned long)num_msix)->vector);
    #line 588 
    cif_free_irq((adapter->msix_entries + (unsigned long)num_msix)->vector,(void *)adapter);
  }
  #line 590 
  return;
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_setup_mbx_intr(struct qlcnic_adapter *adapter)
{
  #line 594 
  irqreturn_t (*handler)(int , void *);
  #line 595 
  u32 val;
  #line 596 
  int err = 0;
  #line 597 
  unsigned long flags = 0UL;
  #line 599 
  if ((adapter->flags & 2U) == 0U && (adapter->flags & 4U) == 0U) 
                                                                  #line 601 
                                                                  flags |= 128UL;
  #line 603 
  if ((adapter->flags & 4U) != 0U) {
    #line 604 
    handler = & qlcnic_83xx_handle_aen;
    #line 605 
    val = (adapter->msix_entries + ((unsigned long)(adapter->ahw)->num_msix + 18446744073709551615U))->vector;
    #line 606 
    err = cif_request_irq(val,handler,flags,(char *)"qlcnic-MB",(void *)adapter);
    #line 607 
    if (err != 0) {
      #line 608 
      _dev_err(& (adapter->pdev)->dev,(char *)"failed to register MBX interrupt\n");
      #line 610 
      return err;
    }
  }
  else {
    #line 613 
    handler = & qlcnic_83xx_intr;
    #line 614 
    val = (adapter->msix_entries)->vector;
    #line 615 
    err = cif_request_irq(val,handler,flags,(char *)"qlcnic",(void *)adapter);
    #line 616 
    if (err != 0) {
      #line 617 
      _dev_err(& (adapter->pdev)->dev,(char *)"failed to register INTx interrupt\n");
      #line 619 
      return err;
    }
    #line 621 
    qlcnic_83xx_clear_legacy_intr_mask(adapter);
  }
  #line 625 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  #line 627 
  return err;
}

#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_func_no(struct qlcnic_adapter *adapter)
{
  #line 632 
  u32 val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 2U));
  #line 633 
  (adapter->ahw)->pci_func = (unsigned char)(val >> 24);
  #line 634 
  return;
}

#line 636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_cam_lock(struct qlcnic_adapter *adapter)
{
  #line 638 
  void *addr;
  #line 639 
  u32 val;
  #line 639 
  u32 limit = 0U;
  #line 641 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 643 
  addr = ahw->pci_base0 + (unsigned long)(((int)ahw->pci_func + 1800) * 8);
  #line 644 
  while (1) {
    #line 645 
    val = readl(addr);
    #line 646 
    if (val != 0U) {
      #line 648 
      writel((unsigned int)ahw->pci_func,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 3U));
      #line 650 
      return 0;
    }
    #line 652 
    usleep_range(1000UL,2000UL);
    #line 653 
    limit ++;
    #line 653 
    if (! (limit <= 10000U)) 
                             #line 644 
                             break;
  }
  #line 655 
  return -5;
}

#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_cam_unlock(struct qlcnic_adapter *adapter)
{
  #line 660 
  void *addr;
  #line 661 
  u32 val;
  #line 662 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 664 
  addr = ahw->pci_base0 + (unsigned long)((int)ahw->pci_func * 8 + 14404);
  #line 665 
  val = readl(addr);
  #line 666 
  return;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  #line 672 
  u32 data;
  #line 671 
  int ret = 0;
  #line 674 
  if (qlcnic_api_lock(adapter) != 0) {
    #line 675 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed to acquire lock. addr offset 0x%x\n",(char *)"qlcnic_83xx_read_crb",(unsigned int)offset);
    #line 678 
    return;
  }
  #line 681 
  data = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,
                                                (unsigned long)((unsigned int)offset),
                                                & ret);
  #line 682 
  qlcnic_api_unlock(adapter);
  #line 684 
  if (ret == -5) {
    #line 685 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed. addr offset 0x%x\n",(char *)"qlcnic_83xx_read_crb",(unsigned int)offset);
    #line 688 
    return;
  }
  #line 690 
  memcpy((void *)buf,(void *)(& data),size);
  #line 691 
  return;
}

#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  #line 696 
  u32 data;
  #line 698 
  memcpy((void *)(& data),(void *)buf,size);
  #line 699 
  qlcnic_83xx_wrt_reg_indirect(adapter,(unsigned long)((unsigned int)offset),data);
  #line 700 
  return;
}

#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_port_info(struct qlcnic_adapter *adapter)
{
  #line 705 
  int status;
  #line 704 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 707 
  status = qlcnic_83xx_get_port_config(adapter);
  #line 708 
  if (status != 0) 
                   #line 709 
                   _dev_err(& (adapter->pdev)->dev,(char *)"Get Port Info failed\n");
  else {
    #line 713 
    if ((ahw->port_config & 2048U) != 0U) 
                                          #line 714 
                                          ahw->port_type = (unsigned short)2U;
    else 
      #line 715 
      if (((ahw->port_config & 256U) != 0U || (ahw->port_config & 512U) != 0U) || (ahw->port_config & 1024U) != 0U) 
        #line 718 
        ahw->port_type = (unsigned short)1U; else 
                                                  #line 720 
                                                  ahw->port_type = (unsigned short)2U;
    #line 723 
    if ((ahw->port_config & 32768U) != 0U) 
                                           #line 724 
                                           ahw->link_autoneg = (unsigned short)1U;
  }
  #line 727 
  return status;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_set_mac_filter_count(struct qlcnic_adapter *adapter)
{
  #line 734 
  u16 count;
  #line 732 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 733 
  u16 act_pci_fn = ahw->total_nic_func;
  #line 736 
  ahw->max_mc_count = (unsigned char)38U;
  #line 737 
  if ((unsigned int)act_pci_fn <= 2U) 
                                      #line 738 
                                      count = (unsigned short)(4058 / (int)act_pci_fn); else 
                                                                    #line 741 
                                                                    count = (unsigned short)(2010 / (int)act_pci_fn);
  #line 743 
  ahw->max_uc_count = count;
  #line 744 
  return;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_enable_mbx_interrupt(struct qlcnic_adapter *adapter)
{
  #line 748 
  u32 val;
  #line 750 
  if ((adapter->flags & 4U) != 0U) 
                                   #line 751 
                                   val = (unsigned int)((((int)(adapter->ahw)->num_msix + -1) << 8) | 4); else 
                                                                    #line 753 
                                                                    val = 4U;
  #line 755 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 8U));
  #line 756 
  qlcnic_83xx_enable_legacy_msix_mbx_intr(adapter);
  #line 757 
  return;
}

#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_check_vf(struct qlcnic_adapter *adapter, struct pci_device_id *ent)
{
  #line 762 
  u32 op_mode;
  #line 762 
  u32 priv_level;
  #line 763 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 765 
  ahw->fw_hal_version = 2U;
  #line 766 
  qlcnic_get_func_no(adapter);
  #line 768 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) {
    #line 769 
    qlcnic_sriov_vf_set_ops(adapter);
    #line 770 
    return;
  }
  #line 774 
  op_mode = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 37U));
  #line 775 
  if (op_mode == 1431655765U) 
                              #line 776 
                              priv_level = 0U; else 
                                                    #line 778 
                                                    priv_level = (op_mode >> (int)ahw->pci_func * 2) & 3U;
  #line 781 
  if (priv_level == 2U) {
    #line 782 
    ahw->op_mode = (unsigned short)2U;
    #line 783 
    _dev_info(& (adapter->pdev)->dev,(char *)"HAL Version: %d Non Privileged function\n",ahw->fw_hal_version);
    #line 786 
    adapter->nic_ops = & qlcnic_vf_ops;
  }
  else {
    #line 788 
    if (pci_find_ext_capability(adapter->pdev,16) != 0) 
                                                        #line 790 
                                                        cif_set_bit_0(11L,& adapter->state);
    #line 791 
    adapter->nic_ops = & qlcnic_83xx_ops;
  }
  #line 793 
  return;
}

#line 795 
#line 2316 
static void qlcnic_83xx_handle_link_aen(struct qlcnic_adapter *adapter, u32 *data);
#line 797 
#line 957 
static void qlcnic_83xx_handle_idc_comp_aen(struct qlcnic_adapter *adapter, u32 *data);
#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_dump_mbx(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 803 
  int i;
  #line 805 
  if (cmd->op_type == 1U) 
                          #line 806 
                          return;
  #line 808 
  _dev_info(& (adapter->pdev)->dev,(char *)"Host MBX regs(%d)\n",cmd->req.num);
  #line 810 
  i = 0;
  #line 810 
  while (cmd->req.num > (unsigned int)i) {
    #line 811 
    if (i != 0 && ((unsigned int)i & 7U) == 0U) 
                                                #line 812 
                                                printk((char *)"\001");
    #line 813 
    printk((char *)"\001",*(cmd->req.arg + (unsigned long)i));
    #line 810 
    i ++;
  }
  #line 815 
  printk((char *)"\001");
  #line 816 
  _dev_info(& (adapter->pdev)->dev,(char *)"FW MBX regs(%d)\n",cmd->rsp.num);
  #line 818 
  i = 0;
  #line 818 
  while (cmd->rsp.num > (unsigned int)i) {
    #line 819 
    if (i != 0 && ((unsigned int)i & 7U) == 0U) 
                                                #line 820 
                                                printk((char *)"\001");
    #line 821 
    printk((char *)"\001",*(cmd->rsp.arg + (unsigned long)i));
    #line 818 
    i ++;
  }
  #line 823 
  printk((char *)"\001");
  #line 824 
  return;
}

#line 826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_poll_for_mbx_completion(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 831 
  unsigned long max_loops;
  #line 829 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 830 
  int opcode = (int)((unsigned short)*(cmd->req.arg));
  #line 833 
  max_loops = (unsigned long)(cmd->total_cmds * 5000000U);
  #line 835 
  while (max_loops != 0UL) {
    {
      #line 836 
      if (atomic_read(& cmd->rsp_status) == 1) 
                                               #line 838 
                                               return;
      #line 840 
      __const_udelay(4295UL);
    }
    #line 835 
    max_loops --;
  }
  #line 843 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: Mailbox command timed out, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n",(char *)"qlcnic_83xx_poll_for_mbx_completion",opcode,cmd->type,(int)ahw->pci_func,(int)ahw->op_mode);
  #line 846 
  flush_workqueue((ahw->mailbox)->work_q);
  #line 847 
  return;
}

#line 850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 855 
  int cmd_type;
  #line 855 
  int err;
  #line 855 
  int opcode;
  #line 856 
  unsigned long timeout;
  #line 853 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  #line 854 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 858 
  if (mbx == (struct qlcnic_mailbox *)0) 
                                         #line 859 
                                         return -5;
  #line 861 
  opcode = (int)((unsigned short)*(cmd->req.arg));
  #line 862 
  cmd_type = (int)cmd->type;
  #line 863 
  err = (*((mbx->ops)->enqueue_cmd))(adapter,cmd,& timeout);
  #line 864 
  if (err != 0) {
    #line 865 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Mailbox not available, cmd_op=0x%x, cmd_context=0x%x, pci_func=0x%x, op_mode=0x%x\n",(char *)"qlcnic_83xx_issue_cmd",opcode,cmd->type,(int)ahw->pci_func,(int)ahw->op_mode);
    #line 869 
    return err;
  }
  #line 872 
  switch (cmd_type) {
    #line 873 
    case 0: 
            #line 873 
    ;
    #line 874 
    if (wait_for_completion_timeout(& cmd->completion,timeout) == 0UL) {
      #line 875 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s: Mailbox command timed out, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n",(char *)"qlcnic_83xx_issue_cmd",opcode,cmd_type,(int)ahw->pci_func,(int)ahw->op_mode);
      #line 879 
      flush_workqueue(mbx->work_q);
    }
    #line 881 
    break;
    #line 882 
    case 1: 
            #line 882 
    ;
    #line 883 
    return 0;
    #line 884 
    case 2: 
            #line 884 
    ;
    #line 885 
    qlcnic_83xx_poll_for_mbx_completion(adapter,cmd);
    #line 886 
    break;
    #line 887 
    default: 
             #line 887 
    ;
    #line 888 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Invalid mailbox command, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n",(char *)"qlcnic_83xx_issue_cmd",opcode,cmd_type,(int)ahw->pci_func,(int)ahw->op_mode);
    #line 892 
    qlcnic_83xx_detach_mailbox_work(adapter);
  }
  #line 895 
  return (int)cmd->rsp_opcode;
}

#line 898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 type)
{
  #line 901 
  int i;
  #line 901 
  int size;
  #line 902 
  u32 temp;
  #line 903 
  struct qlcnic_mailbox_metadata *mbx_tbl;
  #line 905 
  memset((void *)mbx,0,200UL);
  #line 906 
  mbx_tbl = (struct qlcnic_mailbox_metadata *)(& qlcnic_83xx_mbx_tbl);
  #line 907 
  size = 54;
  #line 908 
  i = 0;
  #line 908 
  while (i < size) {
    #line 909 
    if ((mbx_tbl + (unsigned long)i)->cmd == type) {
      #line 910 
      mbx->op_type = 0U;
      #line 911 
      mbx->req.num = (mbx_tbl + (unsigned long)i)->in_args;
      #line 912 
      mbx->rsp.num = (mbx_tbl + (unsigned long)i)->out_args;
      #line 913 
      mbx->req.arg = (u32 *)kcalloc((unsigned long)mbx->req.num,4UL,2592U);
      #line 915 
      if (mbx->req.arg == (u32 *)0U) 
                                     #line 916 
                                     return -12;
      #line 917 
      mbx->rsp.arg = (u32 *)kcalloc((unsigned long)mbx->rsp.num,4UL,2592U);
      #line 919 
      if (mbx->rsp.arg == (u32 *)0U) {
        #line 920 
        kfree((void *)mbx->req.arg);
        #line 921 
        mbx->req.arg = (u32 *)0U;
        #line 922 
        return -12;
      }
      #line 924 
      temp = (adapter->ahw)->fw_hal_version << 29;
      #line 925 
      *(mbx->req.arg) = ((mbx->req.num << 16) | type) | temp;
      #line 926 
      mbx->cmd_op = type;
      #line 927 
      return 0;
    }
    #line 908 
    i ++;
  }
  #line 931 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: Invalid mailbox command opcode 0x%x\n",(char *)"qlcnic_83xx_alloc_mbx_args",type);
  #line 933 
  return -22;
}

#line 936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_idc_aen_work(struct work_struct *work)
{
  #line 942 
  void *__mptr;
  #line 938 
  struct qlcnic_adapter *adapter;
  #line 939 
  struct qlcnic_cmd_args cmd;
  #line 940 
  int i;
  #line 940 
  int err = 0;
  #line 942 
  __mptr = (void *)work;
  #line 942 
  adapter = ((struct qlcnic_adapter *)(__mptr + 18446744073709550520U));
  #line 943 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,99U);
  #line 944 
  if (err != 0) 
                #line 945 
                return;
  #line 947 
  i = 1;
  #line 947 
  while (i <= 4) {
    #line 948 
    *(cmd.req.arg + (unsigned long)i) = (adapter->ahw)->mbox_aen[i];
    #line 947 
    i ++;
  }
  #line 950 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 951 
  if (err != 0) 
                #line 952 
                _dev_info(& (adapter->pdev)->dev,(char *)"%s: Mailbox IDC ACK failed.\n",(char *)"qlcnic_83xx_idc_aen_work");
  #line 954 
  qlcnic_free_mbx_args(& cmd);
  #line 955 
  return;
}

#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_handle_idc_comp_aen(struct qlcnic_adapter *adapter, u32 *data)
{
  {
    #line 960 
    bool branch;
    #line 960 
    struct _ddebug __UNIQUE_ID_ddebug534 = {.modname = (char *)"qlcnic", .function = (char *)"qlcnic_83xx_handle_idc_comp_aen", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c", .format = (char *)"Completion AEN:0x%x.\n", .lineno = (unsigned int)960U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 960 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug534.key.dd_key_false.key,(_Bool)0);
    #line 960 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 960 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug534,& (adapter->pdev)->dev,(char *)"Completion AEN:0x%x.\n",(int)((unsigned short)*data));
  }
  #line 962 
  cif_clear_bit_0(3L,& (adapter->ahw)->idc.status);
  #line 963 
  return;
}

#line 966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void __qlcnic_83xx_process_aen(struct qlcnic_adapter *adapter)
{
  #line 969 
  u32 event[5U];
  #line 970 
  int i;
  #line 968 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 972 
  i = 0;
  #line 972 
  while (i <= 4) {
    #line 973 
    event[i] = readl(ahw->pci_base0 + ((unsigned long)(i * 4) + (unsigned long)2048U));
    #line 972 
    i ++;
  }
  #line 975 
  switch ((int)((unsigned short)event[0])) {
    #line 977 
    case 32769: 
                #line 977 
    ;
    #line 978 
    qlcnic_83xx_handle_link_aen(adapter,(u32 *)(& event));
    #line 979 
    break;
    #line 980 
    case 33024: 
                #line 980 
    ;
    #line 981 
    qlcnic_83xx_handle_idc_comp_aen(adapter,(u32 *)(& event));
    #line 982 
    break;
    #line 983 
    case 33025: 
                #line 983 
    ;
    #line 984 
    i = 0;
    #line 984 
    while (i <= 4) {
      #line 985 
      (adapter->ahw)->mbox_aen[i] = (unsigned int)((unsigned short)event[i]);
      #line 984 
      i ++;
    }
    #line 986 
    cif_queue_delayed_work(adapter->qlcnic_wq,& adapter->idc_aen_work,0UL);
    #line 988 
    break;
    #line 989 
    case 33026: 
                #line 989 
    ;
    #line 990 
    ahw->extend_lb_time = (unsigned char)((unsigned int)((unsigned char)(event[1] >> 8)) & 15U);
    #line 991 
    break;
    #line 992 
    case 32770: 
                #line 992 
    ;
    #line 993 
    qlcnic_sriov_handle_bc_event(adapter,event[1]);
    #line 994 
    break;
    #line 995 
    case 33072: 
                #line 995 
    ;
    #line 996 
    _dev_info(& (adapter->pdev)->dev,(char *)"SFP+ Insert AEN:0x%x.\n",(int)((unsigned short)event[0]));
    #line 998 
    break;
    #line 999 
    case 33073: 
                #line 999 
    ;
    #line 1000 
    _dev_info(& (adapter->pdev)->dev,(char *)"SFP Removed AEN:0x%x.\n",(int)((unsigned short)event[0]));
    #line 1002 
    break;
    #line 1003 
    case 33040: 
                #line 1003 
    ;
    #line 1004 
    qlcnic_dcb_aen_handler(adapter->dcb,(void *)(& event[1]));
    #line 1005 
    break;
    #line 1006 
    default: 
             #line 1006 
    ;
    {
      #line 1007 
      bool branch;
      #line 1007 
      struct _ddebug __UNIQUE_ID_ddebug535 = {.modname = (char *)"qlcnic", .function = (char *)"__qlcnic_83xx_process_aen", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c", .format = (char *)"Unsupported AEN:0x%x.\n", .lineno = (unsigned int)1007U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1007 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug535.key.dd_key_false.key,(_Bool)0);
      #line 1007 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1007 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug535,& (adapter->pdev)->dev,(char *)"Unsupported AEN:0x%x.\n",(int)((unsigned short)event[0]));
    }
    #line 1009 
    break;
  }
  #line 1012 
  writel(0U,ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 4U));
  #line 1013 
  return;
}

#line 1015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_process_aen(struct qlcnic_adapter *adapter)
{
  #line 1017 
  u32 resp;
  #line 1017 
  u32 event;
  #line 1020 
  unsigned long flags;
  #line 1017 
  u32 rsp_status = 1U;
  #line 1018 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1019 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  #line 1022 
  cif___ldv_spin_lock_aen_lock_of_qlcnic_mailbox(& mbx->aen_lock);
  #line 1023 
  resp = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 4U));
  #line 1024 
  if ((resp & 1U) != 0U) {
    #line 1025 
    event = readl(ahw->pci_base0 + 2048U);
    #line 1026 
    if ((event & 32768U) != 0U) 
                                #line 1027 
                                __qlcnic_83xx_process_aen(adapter);
    else 
      #line 1029 
      if (mbx->rsp_status != rsp_status) 
                                         #line 1030 
                                         qlcnic_83xx_notify_mbx_response(mbx);
  }
  #line 1033 
  cif_spin_unlock_irqrestore_aen_lock_of_qlcnic_mailbox(& mbx->aen_lock,flags);
  #line 1034 
  return;
}

#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_mbx_poll_work(struct work_struct *work)
{
  #line 1040 
  void *__mptr;
  #line 1038 
  struct qlcnic_adapter *adapter;
  #line 1040 
  __mptr = (void *)work;
  #line 1040 
  adapter = ((struct qlcnic_adapter *)(__mptr + 18446744073709550336U));
  #line 1042 
  if (! test_bit(12L,& adapter->state)) 
                                        #line 1043 
                                        return;
  #line 1045 
  qlcnic_83xx_process_aen(adapter);
  #line 1046 
  cif_queue_delayed_work(adapter->qlcnic_wq,& adapter->mbx_poll_work,25UL);
  #line 1047 
  return;
}

#line 1050  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_enable_mbx_poll(struct qlcnic_adapter *adapter)
{
  #line 1052 
  if ((int)test_and_set_bit(12L,& adapter->state) != 0) 
                                                        #line 1053 
                                                        return;
  {
    #line 1055 
    struct lock_class_key __key;
    #line 1055 
    __init_work(& adapter->mbx_poll_work.work,0);
    #line 1055 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 1055 
    adapter->mbx_poll_work.work.data = __constr_expr_41;
    #line 1055 
    lockdep_init_map(& adapter->mbx_poll_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1055 
    INIT_LIST_HEAD_0(& adapter->mbx_poll_work.work.entry);
    #line 1055 
    adapter->mbx_poll_work.work.func = & qlcnic_83xx_mbx_poll_work;
  }
  {
    #line 1055 
    struct lock_class_key __key_0;
    #line 1055 
    init_timer_key(& adapter->mbx_poll_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->mbx_poll_work)->timer",& __key_0);
  }
  #line 1056 
  cif_queue_delayed_work(adapter->qlcnic_wq,& adapter->mbx_poll_work,0UL);
  #line 1057 
  return;
}

#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_disable_mbx_poll(struct qlcnic_adapter *adapter)
{
  #line 1061 
  if (! test_and_set_bit(12L,& adapter->state)) 
                                                #line 1062 
                                                return;
  #line 1063 
  cancel_delayed_work_sync(& adapter->mbx_poll_work);
  #line 1064 
  return;
}

#line 1066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_add_rings(struct qlcnic_adapter *adapter)
{
  #line 1068 
  int index;
  #line 1068 
  int i;
  #line 1068 
  int err;
  #line 1068 
  int sds_mbx_size;
  #line 1069 
  u32 *buf;
  #line 1069 
  u32 intrpt_id;
  #line 1069 
  u32 intr_mask;
  #line 1070 
  u16 context_id;
  #line 1071 
  u8 num_sds;
  #line 1072 
  struct qlcnic_cmd_args cmd;
  #line 1073 
  struct qlcnic_host_sds_ring *sds;
  #line 1074 
  struct qlcnic_sds_mbx sds_mbx;
  #line 1075 
  struct qlcnic_add_rings_mbx_out *mbx_out;
  #line 1076 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1077 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1079 
  sds_mbx_size = 40;
  #line 1080 
  context_id = recv_ctx->context_id;
  #line 1081 
  num_sds = (unsigned char)((unsigned int)adapter->drv_sds_rings + 248U);
  #line 1082 
  (*((ahw->hw_ops)->alloc_mbx_args))(& cmd,adapter,11U);
  #line 1084 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)num_sds << 8) | ((int)context_id << 16));
  #line 1087 
  index = 2;
  #line 1088 
  i = 8;
  #line 1088 
  while ((int)adapter->drv_sds_rings > i) {
    #line 1089 
    memset((void *)(& sds_mbx),0,(unsigned long)sds_mbx_size);
    #line 1090 
    sds = recv_ctx->sds_rings + (unsigned long)i;
    #line 1091 
    sds->consumer = 0U;
    #line 1092 
    memset((void *)sds->desc_head,0,(unsigned long)sds->num_desc * 16UL);
    #line 1093 
    sds_mbx.phy_addr_low = (unsigned int)sds->phys_addr;
    #line 1094 
    sds_mbx.phy_addr_high = (unsigned int)(sds->phys_addr >> 32);
    #line 1095 
    sds_mbx.sds_ring_size = (unsigned short)sds->num_desc;
    #line 1097 
    if ((adapter->flags & 4U) != 0U) 
                                     #line 1098 
                                     intrpt_id = (unsigned int)(ahw->intr_tbl + (unsigned long)i)->id; else 
                                                                    #line 1100 
                                                                    intrpt_id = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 10U));
    #line 1102 
    if ((unsigned int)(adapter->ahw)->diag_test != 2U) 
                                                       #line 1103 
                                                       sds_mbx.intrpt_id = (unsigned short)intrpt_id; else 
                                                                    #line 1105 
                                                                    sds_mbx.intrpt_id = (unsigned short)65535U;
    #line 1106 
    sds_mbx.intrpt_val = (unsigned char)0U;
    #line 1107 
    buf = cmd.req.arg + (unsigned long)index;
    #line 1108 
    memcpy((void *)buf,(void *)(& sds_mbx),(unsigned long)sds_mbx_size);
    #line 1109 
    index = (int)((unsigned long)sds_mbx_size / 4UL + (unsigned long)index);
    #line 1088 
    i ++;
  }
  #line 1113 
  err = (*((ahw->hw_ops)->mbx_cmd))(adapter,& cmd);
  #line 1114 
  if (err != 0) {
    #line 1115 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to add rings %d\n",err);
    #line 1117 
    goto out;
  }
  #line 1120 
  mbx_out = (struct qlcnic_add_rings_mbx_out *)(cmd.rsp.arg + 1U);
  #line 1121 
  index = 0;
  #line 1123 
  i = 8;
  #line 1123 
  while ((int)adapter->drv_sds_rings > i) {
    #line 1124 
    sds = recv_ctx->sds_rings + (unsigned long)i;
    #line 1125 
    sds->crb_sts_consumer = ahw->pci_base0 + (unsigned long)mbx_out->host_csmr[index];
    #line 1127 
    if ((adapter->flags & 4U) != 0U) 
                                     #line 1128 
                                     intr_mask = (ahw->intr_tbl + (unsigned long)i)->src; else 
                                                                    #line 1130 
                                                                    intr_mask = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 9U));
    #line 1132 
    sds->crb_intr_mask = ahw->pci_base0 + (unsigned long)intr_mask;
    #line 1133 
    index ++;
    #line 1123 
    i ++;
  }
  #line 1135 
  out: 
       #line 1135 
  ;
  #line 1136 
  qlcnic_free_mbx_args(& cmd);
  #line 1137 
  return err;
}

#line 1140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_del_rx_ctx(struct qlcnic_adapter *adapter)
{
  #line 1142 
  int err;
  #line 1144 
  struct qlcnic_cmd_args cmd;
  #line 1143 
  u32 temp = 0U;
  #line 1145 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1147 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,8U) != 0) 
                                                    #line 1148 
                                                    return;
  #line 1150 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1151 
                                                *(cmd.req.arg) |= 1610612736U;
  else {
    #line 1150 
    if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                  #line 1151 
                                                  *(cmd.req.arg) |= 1610612736U;
  }
  #line 1153 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1154 
                                                qlcnic_pf_set_interface_id_del_rx_ctx(adapter,& temp);
  #line 1156 
  *(cmd.req.arg + 1U) = (unsigned int)recv_ctx->context_id | temp;
  #line 1157 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1158 
  if (err != 0) 
                #line 1159 
                _dev_err(& (adapter->pdev)->dev,(char *)"Failed to destroy rx ctx in firmware\n");
  #line 1162 
  recv_ctx->state = 0U;
  #line 1163 
  qlcnic_free_mbx_args(& cmd);
  #line 1164 
  return;
}

#line 1166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_create_rx_ctx(struct qlcnic_adapter *adapter)
{
  #line 1168 
  int i;
  #line 1168 
  int err;
  #line 1168 
  int index;
  #line 1168 
  int sds_mbx_size;
  #line 1168 
  int rds_mbx_size;
  #line 1169 
  u8 num_sds;
  #line 1169 
  u8 num_rds;
  #line 1170 
  u32 *buf;
  #line 1170 
  u32 intrpt_id;
  #line 1170 
  u32 intr_mask;
  #line 1171 
  struct qlcnic_host_sds_ring *sds;
  #line 1172 
  struct qlcnic_host_rds_ring *rds;
  #line 1173 
  struct qlcnic_sds_mbx sds_mbx;
  #line 1174 
  struct qlcnic_rds_mbx rds_mbx;
  #line 1175 
  struct qlcnic_cmd_args cmd;
  #line 1176 
  struct qlcnic_rcv_mbx_out *mbx_out;
  #line 1170 
  u32 cap = 0U;
  #line 1177 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1178 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1179 
  num_rds = adapter->max_rds_rings;
  #line 1181 
  if ((unsigned int)adapter->drv_sds_rings <= 8U) 
                                                  #line 1182 
                                                  num_sds = adapter->drv_sds_rings; else 
                                                                    #line 1184 
                                                                    num_sds = (unsigned char)8U;
  #line 1186 
  sds_mbx_size = 40;
  #line 1187 
  rds_mbx_size = 24;
  #line 1188 
  cap = 1U;
  #line 1190 
  if ((adapter->flags & 32768U) != 0U) 
                                       #line 1191 
                                       cap |= 131072U;
  #line 1194 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,7U);
  #line 1196 
  if (err != 0) 
                #line 1197 
                return err;
  #line 1199 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1200 
                                                *(cmd.req.arg) |= 1610612736U;
  else {
    #line 1199 
    if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                  #line 1200 
                                                  *(cmd.req.arg) |= 1610612736U;
  }
  #line 1202 
  *(cmd.req.arg + 1U) = cap;
  #line 1203 
  *(cmd.req.arg + 5U) = (unsigned int)((((int)num_rds << 5) | 1) | ((int)num_sds << 8));
  #line 1206 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1207 
                                                qlcnic_pf_set_interface_id_create_rx_ctx(adapter,cmd.req.arg + 6U);
  #line 1210 
  index = 8;
  #line 1211 
  i = 0;
  #line 1211 
  while ((int)num_sds > i) {
    #line 1212 
    memset((void *)(& sds_mbx),0,(unsigned long)sds_mbx_size);
    #line 1213 
    sds = recv_ctx->sds_rings + (unsigned long)i;
    #line 1214 
    sds->consumer = 0U;
    #line 1215 
    memset((void *)sds->desc_head,0,(unsigned long)sds->num_desc * 16UL);
    #line 1216 
    sds_mbx.phy_addr_low = (unsigned int)sds->phys_addr;
    #line 1217 
    sds_mbx.phy_addr_high = (unsigned int)(sds->phys_addr >> 32);
    #line 1218 
    sds_mbx.sds_ring_size = (unsigned short)sds->num_desc;
    #line 1219 
    if ((adapter->flags & 4U) != 0U) 
                                     #line 1220 
                                     intrpt_id = (unsigned int)(ahw->intr_tbl + (unsigned long)i)->id; else 
                                                                    #line 1222 
                                                                    intrpt_id = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 10U));
    #line 1223 
    if ((unsigned int)(adapter->ahw)->diag_test != 2U) 
                                                       #line 1224 
                                                       sds_mbx.intrpt_id = (unsigned short)intrpt_id; else 
                                                                    #line 1226 
                                                                    sds_mbx.intrpt_id = (unsigned short)65535U;
    #line 1227 
    sds_mbx.intrpt_val = (unsigned char)0U;
    #line 1228 
    buf = cmd.req.arg + (unsigned long)index;
    #line 1229 
    memcpy((void *)buf,(void *)(& sds_mbx),(unsigned long)sds_mbx_size);
    #line 1230 
    index = (int)((unsigned long)sds_mbx_size / 4UL + (unsigned long)index);
    #line 1211 
    i ++;
  }
  #line 1233 
  index = 88;
  #line 1234 
  rds = recv_ctx->rds_rings;
  #line 1235 
  rds->producer = 0U;
  #line 1236 
  memset((void *)(& rds_mbx),0,(unsigned long)rds_mbx_size);
  #line 1237 
  rds_mbx.phy_addr_reg_low = (unsigned int)rds->phys_addr;
  #line 1238 
  rds_mbx.phy_addr_reg_high = (unsigned int)(rds->phys_addr >> 32);
  #line 1239 
  rds_mbx.reg_ring_sz = (unsigned short)rds->dma_size;
  #line 1240 
  rds_mbx.reg_ring_len = (unsigned short)rds->num_desc;
  #line 1242 
  rds = recv_ctx->rds_rings + 1U;
  #line 1243 
  rds->producer = 0U;
  #line 1244 
  rds_mbx.phy_addr_jmb_low = (unsigned int)rds->phys_addr;
  #line 1245 
  rds_mbx.phy_addr_jmb_high = (unsigned int)(rds->phys_addr >> 32);
  #line 1246 
  rds_mbx.jmb_ring_sz = (unsigned short)rds->dma_size;
  #line 1247 
  rds_mbx.jmb_ring_len = (unsigned short)rds->num_desc;
  #line 1248 
  buf = cmd.req.arg + (unsigned long)index;
  #line 1249 
  memcpy((void *)buf,(void *)(& rds_mbx),(unsigned long)rds_mbx_size);
  #line 1252 
  err = (*((ahw->hw_ops)->mbx_cmd))(adapter,& cmd);
  #line 1253 
  if (err != 0) {
    #line 1254 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to create Rx ctx in firmware%d\n",err);
    #line 1256 
    goto out;
  }
  #line 1258 
  mbx_out = (struct qlcnic_rcv_mbx_out *)(cmd.rsp.arg + 1U);
  #line 1259 
  recv_ctx->context_id = mbx_out->ctx_id;
  #line 1260 
  recv_ctx->state = (unsigned int)mbx_out->state;
  #line 1261 
  recv_ctx->virt_port = (unsigned short)mbx_out->vport_id;
  #line 1262 
  _dev_info(& (adapter->pdev)->dev,(char *)"Rx Context[%d] Created, state:0x%x\n",(int)recv_ctx->context_id,recv_ctx->state);
  #line 1266 
  rds = recv_ctx->rds_rings;
  #line 1267 
  rds->crb_rcv_producer = ahw->pci_base0 + (unsigned long)mbx_out->host_prod[0].reg_buf;
  #line 1270 
  rds = recv_ctx->rds_rings + 1U;
  #line 1271 
  rds->crb_rcv_producer = ahw->pci_base0 + (unsigned long)mbx_out->host_prod[0].jmb_buf;
  #line 1274 
  i = 0;
  #line 1274 
  while ((int)num_sds > i) {
    #line 1275 
    sds = recv_ctx->sds_rings + (unsigned long)i;
    #line 1276 
    sds->crb_sts_consumer = ahw->pci_base0 + (unsigned long)mbx_out->host_csmr[i];
    #line 1278 
    if ((adapter->flags & 4U) != 0U) 
                                     #line 1279 
                                     intr_mask = (ahw->intr_tbl + (unsigned long)i)->src; else 
                                                                    #line 1281 
                                                                    intr_mask = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 9U));
    #line 1282 
    sds->crb_intr_mask = ahw->pci_base0 + (unsigned long)intr_mask;
    #line 1274 
    i ++;
  }
  #line 1285 
  if ((unsigned int)adapter->drv_sds_rings > 8U) 
                                                 #line 1286 
                                                 err = qlcnic_83xx_add_rings(adapter);
  #line 1287 
  out: 
       #line 1287 
  ;
  #line 1288 
  qlcnic_free_mbx_args(& cmd);
  #line 1289 
  return err;
}

#line 1292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 1295 
  struct qlcnic_cmd_args cmd;
  #line 1296 
  u32 temp = 0U;
  #line 1298 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,10U) != 0) 
                                                     #line 1299 
                                                     return;
  #line 1301 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1302 
                                                *(cmd.req.arg) |= 1610612736U;
  else {
    #line 1301 
    if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                  #line 1302 
                                                  *(cmd.req.arg) |= 1610612736U;
  }
  #line 1304 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1305 
                                                qlcnic_pf_set_interface_id_del_tx_ctx(adapter,& temp);
  #line 1307 
  *(cmd.req.arg + 1U) = (unsigned int)tx_ring->ctx_id | temp;
  #line 1308 
  if (qlcnic_issue_cmd(adapter,& cmd) != 0) 
                                            #line 1309 
                                            _dev_err(& (adapter->pdev)->dev,(char *)"Failed to destroy tx ctx in firmware\n");
  #line 1311 
  qlcnic_free_mbx_args(& cmd);
  #line 1312 
  return;
}

#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx, int ring)
{
  #line 1317 
  int err;
  #line 1318 
  u16 msix_id;
  #line 1319 
  u32 *buf;
  #line 1319 
  u32 intr_mask;
  #line 1320 
  struct qlcnic_cmd_args cmd;
  #line 1321 
  struct qlcnic_tx_mbx mbx;
  #line 1322 
  struct qlcnic_tx_mbx_out *mbx_out;
  #line 1324 
  u32 msix_vector;
  #line 1319 
  u32 temp = 0U;
  #line 1323 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1327 
  tx->producer = 0U;
  #line 1328 
  tx->sw_consumer = 0U;
  #line 1329 
  *(tx->hw_consumer) = 0U;
  #line 1331 
  memset((void *)(& mbx),0,24UL);
  #line 1334 
  mbx.phys_addr_low = (unsigned int)tx->phys_addr;
  #line 1335 
  mbx.phys_addr_high = (unsigned int)(tx->phys_addr >> 32);
  #line 1336 
  mbx.cnsmr_index_low = (unsigned int)tx->hw_cons_phys_addr;
  #line 1337 
  mbx.cnsmr_index_high = (unsigned int)(tx->hw_cons_phys_addr >> 32);
  #line 1338 
  mbx.size = (unsigned short)tx->num_desc;
  #line 1339 
  if ((adapter->flags & 4U) != 0U) {
    #line 1340 
    if ((adapter->flags & 65536U) == 0U) 
                                         #line 1341 
                                         msix_vector = (unsigned int)((int)adapter->drv_sds_rings + ring); else 
                                                                    #line 1343 
                                                                    msix_vector = (unsigned int)((int)adapter->drv_sds_rings + -1);
    #line 1344 
    msix_id = (ahw->intr_tbl + (unsigned long)msix_vector)->id;
  }
  else {
    #line 1346 
    msix_id = (unsigned short)readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 10U));
  }
  #line 1349 
  if ((unsigned int)(adapter->ahw)->diag_test != 2U) 
                                                     #line 1350 
                                                     mbx.intr_id = msix_id; else 
                                                                    #line 1352 
                                                                    mbx.intr_id = (unsigned short)65535U;
  #line 1353 
  mbx.src = (unsigned char)0U;
  #line 1355 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,9U);
  #line 1356 
  if (err != 0) 
                #line 1357 
                return err;
  #line 1359 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1360 
                                                *(cmd.req.arg) |= 1610612736U;
  else {
    #line 1359 
    if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                  #line 1360 
                                                  *(cmd.req.arg) |= 1610612736U;
  }
  #line 1362 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1363 
                                                qlcnic_pf_set_interface_id_create_tx_ctx(adapter,& temp);
  #line 1365 
  *(cmd.req.arg + 1U) = 1U;
  #line 1366 
  *(cmd.req.arg + 5U) = temp | 1U;
  #line 1368 
  buf = cmd.req.arg + 6U;
  #line 1369 
  memcpy((void *)buf,(void *)(& mbx),24UL);
  #line 1371 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1372 
  if (err != 0) {
    #line 1373 
    netdev_err(adapter->netdev,(char *)"Failed to create Tx ctx in firmware 0x%x\n",err);
    #line 1375 
    goto out;
  }
  #line 1377 
  mbx_out = (struct qlcnic_tx_mbx_out *)(cmd.rsp.arg + 2U);
  #line 1378 
  tx->crb_cmd_producer = ahw->pci_base0 + (unsigned long)mbx_out->host_prod;
  #line 1379 
  tx->ctx_id = mbx_out->ctx_id;
  #line 1380 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    #line 1382 
    intr_mask = (ahw->intr_tbl + (unsigned long)((int)adapter->drv_sds_rings + ring))->src;
    #line 1383 
    tx->crb_intr_mask = ahw->pci_base0 + (unsigned long)intr_mask;
  }
  #line 1385 
  netdev_info(adapter->netdev,(char *)"Tx Context[0x%x] Created, state:0x%x\n",(int)tx->ctx_id,(int)mbx_out->state);
  #line 1388 
  out: 
       #line 1388 
  ;
  #line 1389 
  qlcnic_free_mbx_args(& cmd);
  #line 1390 
  return err;
}

#line 1393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_diag_alloc_res(struct net_device *netdev, int test, u8 num_sds_ring)
{
  #line 1397 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1398 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 1400 
  u8 ring;
  #line 1401 
  int ret;
  #line 1396 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1399 
  u16 adapter_state = adapter->is_up;
  #line 1403 
  netif_device_detach(netdev);
  #line 1405 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1406 
                                       __qlcnic_down(adapter,netdev);
  #line 1408 
  qlcnic_detach(adapter);
  #line 1410 
  adapter->drv_sds_rings = (unsigned char)1U;
  #line 1411 
  (adapter->ahw)->diag_test = (unsigned char)test;
  #line 1412 
  (adapter->ahw)->linkup = (unsigned char)0U;
  #line 1414 
  ret = qlcnic_attach(adapter);
  #line 1415 
  if (ret != 0) {
    #line 1416 
    netif_device_attach(netdev);
    #line 1417 
    return ret;
  }
  #line 1420 
  ret = qlcnic_fw_create_ctx(adapter);
  #line 1421 
  if (ret != 0) {
    #line 1422 
    qlcnic_detach(adapter);
    #line 1423 
    if ((unsigned int)adapter_state == 777U) {
      #line 1424 
      adapter->drv_sds_rings = num_sds_ring;
      #line 1425 
      qlcnic_attach(adapter);
    }
    #line 1427 
    netif_device_attach(netdev);
    #line 1428 
    return ret;
  }
  #line 1431 
  ring = (unsigned char)0U;
  #line 1431 
  while ((int)adapter->max_rds_rings > (int)ring) {
    #line 1432 
    rds_ring = (adapter->recv_ctx)->rds_rings + (unsigned long)ring;
    #line 1433 
    qlcnic_post_rx_buffers(adapter,rds_ring,(unsigned char)((int)ring));
    #line 1431 
    ring = (u8)((int)ring + 1);
  }
  #line 1436 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    #line 1437 
    ring = (unsigned char)0U;
    #line 1437 
    while ((int)adapter->drv_sds_rings > (int)ring) {
      #line 1438 
      sds_ring = (adapter->recv_ctx)->sds_rings + (unsigned long)ring;
      #line 1439 
      qlcnic_enable_sds_intr(adapter,sds_ring);
      #line 1437 
      ring = (u8)((int)ring + 1);
    }
  }
  #line 1443 
  if ((unsigned int)(adapter->ahw)->diag_test == 2U) {
    #line 1444 
    (adapter->ahw)->loopback_state = (unsigned char)0U;
    #line 1445 
    (*(((adapter->ahw)->hw_ops)->setup_link_event))(adapter,1);
  }
  #line 1448 
  cif_set_bit_0(1L,& adapter->state);
  #line 1449 
  return 0;
}

#line 1452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_diag_free_res(struct net_device *netdev, u8 drv_sds_rings)
{
  #line 1456 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1457 
  int ring;
  #line 1455 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1459 
  cif_clear_bit_0(1L,& adapter->state);
  #line 1460 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    #line 1461 
    ring = 0;
    #line 1461 
    while ((int)adapter->drv_sds_rings > ring) {
      #line 1462 
      sds_ring = (adapter->recv_ctx)->sds_rings + (unsigned long)ring;
      #line 1463 
      if ((adapter->flags & 4U) != 0U) 
                                       #line 1464 
                                       qlcnic_disable_sds_intr(adapter,sds_ring);
      #line 1461 
      ring ++;
    }
  }
  #line 1468 
  qlcnic_fw_destroy_ctx(adapter);
  #line 1469 
  qlcnic_detach(adapter);
  #line 1471 
  (adapter->ahw)->diag_test = (unsigned char)0U;
  #line 1472 
  adapter->drv_sds_rings = drv_sds_rings;
  #line 1474 
  if (qlcnic_attach(adapter) != 0) 
                                   #line 1475 
                                   goto out;
  #line 1477 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1478 
                                       __qlcnic_up(adapter,netdev);
  #line 1480 
  out: 
       #line 1480 
  ;
  #line 1481 
  netif_device_attach(netdev);
  #line 1482 
  return;
}

#line 1484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_get_beacon_state(struct qlcnic_adapter *adapter)
{
  #line 1487 
  struct qlcnic_cmd_args cmd;
  #line 1488 
  u8 beacon_state;
  #line 1486 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1489 
  int err = 0;
  #line 1491 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,106U);
  #line 1492 
  if (err == 0) {
    #line 1493 
    err = qlcnic_issue_cmd(adapter,& cmd);
    #line 1494 
    if (err == 0) {
      #line 1495 
      beacon_state = (unsigned char)*(cmd.rsp.arg + 4U);
      #line 1496 
      if ((unsigned int)beacon_state == 13U) 
                                             #line 1497 
                                             ahw->beacon_state = (unsigned char)0U;
      else 
        #line 1498 
        if ((unsigned int)beacon_state == 14U) 
                                               #line 1499 
                                               ahw->beacon_state = (unsigned char)1U;
    }
  }
  else 
       #line 1502 
       netdev_err(adapter->netdev,(char *)"Get beacon state failed, err=%d\n",err);
  #line 1506 
  qlcnic_free_mbx_args(& cmd);
  #line 1508 
  return;
}

#line 1511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_led(struct qlcnic_adapter *adapter, u32 state, u32 beacon)
{
  #line 1514 
  struct qlcnic_cmd_args cmd;
  #line 1515 
  u32 mbx_in;
  #line 1516 
  int i;
  #line 1516 
  int status = 0;
  #line 1518 
  if (state != 0U) {
    #line 1520 
    status = qlcnic_alloc_mbx_args(& cmd,adapter,106U);
    #line 1522 
    if (status != 0) 
                     #line 1523 
                     return status;
    #line 1525 
    status = qlcnic_issue_cmd(adapter,& cmd);
    #line 1526 
    if (status != 0) {
      #line 1527 
      _dev_err(& (adapter->pdev)->dev,(char *)"Get led config failed.\n");
      #line 1529 
      goto mbx_err;
    }
    else {
      #line 1531 
      i = 0;
      #line 1531 
      while (i <= 3) {
        #line 1532 
        (adapter->ahw)->mbox_reg[i] = *(cmd.rsp.arg + ((unsigned long)i + (unsigned long)1U));
        #line 1531 
        i ++;
      }
    }
    #line 1534 
    qlcnic_free_mbx_args(& cmd);
    #line 1536 
    mbx_in = 83821823U;
    #line 1538 
    status = qlcnic_alloc_mbx_args(& cmd,adapter,105U);
    #line 1540 
    if (status != 0) 
                     #line 1541 
                     return status;
    #line 1543 
    *(cmd.req.arg + 1U) = mbx_in;
    #line 1544 
    *(cmd.req.arg + 2U) = mbx_in;
    #line 1545 
    *(cmd.req.arg + 3U) = mbx_in;
    #line 1546 
    if (beacon != 0U) 
                      #line 1547 
                      *(cmd.req.arg + 4U) = 14U;
    #line 1548 
    status = qlcnic_issue_cmd(adapter,& cmd);
    #line 1549 
    if (status != 0) 
                     #line 1550 
                     _dev_err(& (adapter->pdev)->dev,(char *)"Set led config failed.\n");
    #line 1553 
    mbx_err: 
             #line 1553 
    ;
    #line 1554 
    qlcnic_free_mbx_args(& cmd);
    #line 1555 
    return status;
  }
  else {
    #line 1559 
    status = qlcnic_alloc_mbx_args(& cmd,adapter,105U);
    #line 1561 
    if (status != 0) 
                     #line 1562 
                     return status;
    #line 1564 
    *(cmd.req.arg + 1U) = (adapter->ahw)->mbox_reg[0];
    #line 1565 
    *(cmd.req.arg + 2U) = (adapter->ahw)->mbox_reg[1];
    #line 1566 
    *(cmd.req.arg + 3U) = (adapter->ahw)->mbox_reg[2];
    #line 1567 
    if (beacon != 0U) 
                      #line 1568 
                      *(cmd.req.arg + 4U) = (adapter->ahw)->mbox_reg[3];
    #line 1569 
    status = qlcnic_issue_cmd(adapter,& cmd);
    #line 1570 
    if (status != 0) 
                     #line 1571 
                     _dev_err(& (adapter->pdev)->dev,(char *)"Restoring led config failed.\n");
    #line 1573 
    qlcnic_free_mbx_args(& cmd);
    #line 1574 
    return status;
  }
}

#line 1578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_led(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  #line 1581 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1582 
  int err = -5;
  #line 1582 
  int active = 1;
  #line 1584 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) {
    #line 1585 
    netdev_warn(netdev,(char *)"LED test is not supported in non-privileged mode\n");
    #line 1587 
    return -95;
  }
  #line 1590 
  switch ((unsigned int)state) {
    #line 1591 
    case (unsigned int)1: 
                          #line 1591 
    ;
    #line 1592 
    if ((int)test_and_set_bit(7L,& adapter->state) != 0) 
                                                         #line 1593 
                                                         return -16;
    #line 1595 
    if ((int)test_bit(2L,& adapter->state) != 0) 
                                                 #line 1596 
                                                 break;
    #line 1598 
    err = qlcnic_83xx_config_led(adapter,(unsigned int)active,0U);
    #line 1599 
    if (err != 0) 
                  #line 1600 
                  netdev_err(netdev,(char *)"Failed to set LED blink state\n");
    #line 1601 
    break;
    #line 1602 
    case (unsigned int)0: 
                          #line 1602 
    ;
    #line 1603 
    active = 0;
    #line 1605 
    if ((int)test_bit(2L,& adapter->state) != 0) 
                                                 #line 1606 
                                                 break;
    #line 1608 
    err = qlcnic_83xx_config_led(adapter,(unsigned int)active,0U);
    #line 1609 
    if (err != 0) 
                  #line 1610 
                  netdev_err(netdev,(char *)"Failed to reset LED blink state\n");
    #line 1611 
    break;
    #line 1613 
    default: 
             #line 1613 
    ;
    #line 1614 
    return -22;
  }
  #line 1617 
  if (active == 0 || err != 0) 
                               #line 1618 
                               cif_clear_bit_0(7L,& adapter->state);
  #line 1620 
  return err;
}

#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_initialize_nic(struct qlcnic_adapter *adapter, int enable)
{
  #line 1625 
  struct qlcnic_cmd_args cmd;
  #line 1626 
  int status;
  #line 1628 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 1629 
                                                return;
  #line 1631 
  if (enable != 0) 
                   #line 1632 
                   status = qlcnic_alloc_mbx_args(& cmd,adapter,96U); else 
                                                                    #line 1635 
                                                                    status = qlcnic_alloc_mbx_args(& cmd,adapter,97U);
  #line 1638 
  if (status != 0) 
                   #line 1639 
                   return;
  #line 1641 
  *(cmd.req.arg + 1U) = 2147483649U;
  #line 1643 
  if (adapter->dcb != (struct qlcnic_dcb *)0) 
                                              #line 1644 
                                              *(cmd.req.arg + 1U) |= 2U;
  #line 1646 
  status = qlcnic_issue_cmd(adapter,& cmd);
  #line 1647 
  if (status != 0) {
    #line 1648 
    char *tmp_0;
    #line 1648 
    if (enable != 0) 
                     #line 1648 
                     tmp_0 = (char *)"register"; else 
                                                      #line 1648 
                                                      tmp_0 = (char *)"unregister";
    #line 1648 
    ;
    #line 1648 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to %s in NIC IDC function event.\n",tmp_0);
  }
  #line 1652 
  qlcnic_free_mbx_args(& cmd);
  #line 1653 
  return;
}

#line 1655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_set_port_config(struct qlcnic_adapter *adapter)
{
  #line 1657 
  struct qlcnic_cmd_args cmd;
  #line 1658 
  int err;
  #line 1660 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,102U);
  #line 1661 
  if (err != 0) 
                #line 1662 
                return err;
  #line 1664 
  *(cmd.req.arg + 1U) = (adapter->ahw)->port_config;
  #line 1665 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1666 
  if (err != 0) 
                #line 1667 
                _dev_info(& (adapter->pdev)->dev,(char *)"Set Port Config failed.\n");
  #line 1668 
  qlcnic_free_mbx_args(& cmd);
  #line 1669 
  return err;
}

#line 1672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_get_port_config(struct qlcnic_adapter *adapter)
{
  #line 1674 
  struct qlcnic_cmd_args cmd;
  #line 1675 
  int err;
  #line 1677 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,103U);
  #line 1678 
  if (err != 0) 
                #line 1679 
                return err;
  #line 1681 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1682 
  if (err != 0) 
                #line 1683 
                _dev_info(& (adapter->pdev)->dev,(char *)"Get Port config failed\n"); else 
                                                                    #line 1685 
                                                                    (adapter->ahw)->port_config = *(cmd.rsp.arg + 1U);
  #line 1686 
  qlcnic_free_mbx_args(& cmd);
  #line 1687 
  return err;
}

#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_setup_link_event(struct qlcnic_adapter *adapter, int enable)
{
  #line 1692 
  int err;
  #line 1693 
  u32 temp;
  #line 1694 
  struct qlcnic_cmd_args cmd;
  #line 1701 
  unsigned int tmp;
  #line 1696 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,72U);
  #line 1697 
  if (err != 0) 
                #line 1698 
                return err;
  #line 1700 
  temp = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16);
  #line 1701 
  if (enable != 0) 
                   #line 1701 
                   tmp = 257U; else 
                                    #line 1701 
                                    tmp = 256U;
  #line 1701 
  *(cmd.req.arg + 1U) = tmp | temp;
  #line 1702 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1703 
  if (err != 0) 
                #line 1704 
                _dev_info(& (adapter->pdev)->dev,(char *)"Setup linkevent mailbox failed\n");
  #line 1706 
  qlcnic_free_mbx_args(& cmd);
  #line 1707 
  return err;
}

#line 1710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_set_interface_id_promisc(struct qlcnic_adapter *adapter, u32 *interface_id)
{
  #line 1713 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) {
    #line 1714 
    qlcnic_alloc_lb_filters_mem(adapter);
    #line 1715 
    qlcnic_pf_set_interface_id_promisc(adapter,interface_id);
    #line 1716 
    adapter->rx_mac_learn = (_Bool)1;
  }
  else {
    #line 1718 
    if (! qlcnic_sriov_vf_check(adapter)) 
                                          #line 1719 
                                          *interface_id = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16);
  }
  #line 1720 
  return;
}

#line 1723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode)
{
  #line 1727 
  int err;
  #line 1725 
  struct qlcnic_cmd_args *cmd = (struct qlcnic_cmd_args *)0;
  #line 1726 
  u32 temp = 0U;
  #line 1729 
  if ((adapter->recv_ctx)->state == 0U) 
                                        #line 1730 
                                        return -5;
  #line 1732 
  cmd = (struct qlcnic_cmd_args *)kzalloc_0(200UL,2592U);
  #line 1733 
  if (cmd == (struct qlcnic_cmd_args *)0) 
                                          #line 1734 
                                          return -12;
  #line 1736 
  err = qlcnic_alloc_mbx_args(cmd,adapter,73U);
  #line 1738 
  if (err != 0) 
                #line 1739 
                goto out;
  #line 1741 
  cmd->type = 1U;
  #line 1742 
  qlcnic_83xx_set_interface_id_promisc(adapter,& temp);
  #line 1744 
  if ((int)qlcnic_84xx_check(adapter) != 0) {
    #line 1744 
    if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                  #line 1745 
                                                  mode = 1U;
  }
  #line 1747 
  *(cmd->req.arg + 1U) = mode | temp;
  #line 1748 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 1749 
  if (err == 0) 
                #line 1750 
                return err;
  #line 1752 
  qlcnic_free_mbx_args(cmd);
  #line 1754 
  out: 
       #line 1754 
  ;
  #line 1755 
  kfree((void *)cmd);
  #line 1756 
  return err;
}

#line 1759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_loopback_test(struct net_device *netdev, u8 mode)
{
  #line 1783 
  char *tmp_2;
  #line 1761 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1762 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1763 
  u8 drv_sds_rings = adapter->drv_sds_rings;
  #line 1764 
  u8 drv_tx_rings = adapter->drv_tx_rings;
  #line 1765 
  int ret = 0;
  #line 1765 
  int loop = 0;
  #line 1767 
  if ((unsigned int)ahw->op_mode == 2U) {
    #line 1768 
    netdev_warn(netdev,(char *)"Loopback test not supported in non privileged mode\n");
    #line 1770 
    return -524;
  }
  #line 1773 
  if ((int)test_bit(2L,& adapter->state) != 0) {
    #line 1774 
    netdev_info(netdev,(char *)"Device is resetting\n");
    #line 1775 
    return -16;
  }
  #line 1778 
  if (qlcnic_get_diag_lock(adapter) != 0) {
    #line 1779 
    netdev_info(netdev,(char *)"Device is in diagnostics mode\n");
    #line 1780 
    return -16;
  }
  #line 1783 
  if ((unsigned int)mode == 1U) 
                                #line 1783 
                                tmp_2 = (char *)"internal"; else 
                                                                 #line 1783 
                                                                 tmp_2 = (char *)"external";
  #line 1783 
  ;
  #line 1783 
  netdev_info(netdev,(char *)"%s loopback test in progress\n",tmp_2);
  #line 1786 
  ret = qlcnic_83xx_diag_alloc_res(netdev,2,(unsigned char)((int)drv_sds_rings));
  #line 1788 
  if (ret != 0) 
                #line 1789 
                goto fail_diag_alloc;
  #line 1791 
  ret = qlcnic_83xx_set_lb_mode(adapter,(unsigned char)((int)mode));
  #line 1792 
  if (ret != 0) 
                #line 1793 
                goto free_diag_res;
  #line 1796 
  while (1) {
    {
      #line 1805 
      int tmp_4;
      #line 1797 
      msleep(20U);
      #line 1799 
      if ((int)test_bit(2L,& adapter->state) != 0) {
        #line 1800 
        netdev_info(netdev,(char *)"Device is resetting, free LB test resources\n");
        #line 1802 
        ret = -16;
        #line 1803 
        goto free_diag_res;
      }
      #line 1805 
      tmp_4 = loop;
      #line 1805 
      loop ++;
      #line 1805 
      ;
      #line 1805 
      if (tmp_4 > 250) {
        #line 1806 
        netdev_info(netdev,(char *)"Firmware didn\'t sent link up event to loopback request\n");
        #line 1808 
        ret = -110;
        #line 1809 
        qlcnic_83xx_clear_lb_mode(adapter,(unsigned char)((int)mode));
        #line 1810 
        goto free_diag_res;
      }
    }
    #line 1812 
    if (! ((((unsigned int)(adapter->ahw)->linkup != 0U && (unsigned int)ahw->has_link_events != 0U) != 0) != 1)) 
      #line 1796 
      break;
  }
  #line 1814 
  ret = qlcnic_do_lb_test(adapter,(unsigned char)((int)mode));
  #line 1816 
  qlcnic_83xx_clear_lb_mode(adapter,(unsigned char)((int)mode));
  #line 1818 
  free_diag_res: 
                 #line 1818 
  ;
  #line 1819 
  qlcnic_83xx_diag_free_res(netdev,(unsigned char)((int)drv_sds_rings));
  #line 1821 
  fail_diag_alloc: 
                   #line 1821 
  ;
  #line 1822 
  adapter->drv_sds_rings = drv_sds_rings;
  #line 1823 
  adapter->drv_tx_rings = drv_tx_rings;
  #line 1824 
  qlcnic_release_diag_lock(adapter);
  #line 1825 
  return ret;
}

#line 1828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_extend_lb_idc_cmpltn_wait(struct qlcnic_adapter *adapter, u32 *max_wait_count)
{
  #line 1832 
  int temp;
  #line 1831 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1834 
  netdev_info(adapter->netdev,(char *)"Received loopback IDC time extend event for 0x%x seconds\n",(int)ahw->extend_lb_time);
  #line 1836 
  temp = (int)ahw->extend_lb_time * 1000;
  #line 1837 
  *max_wait_count += (unsigned int)(temp / 20);
  #line 1838 
  ahw->extend_lb_time = (unsigned char)0U;
  #line 1839 
  return;
}

#line 1841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  #line 1845 
  u32 config;
  #line 1845 
  u32 max_wait_count;
  #line 1843 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1844 
  struct net_device *netdev = adapter->netdev;
  #line 1846 
  int status = 0;
  #line 1846 
  int loop = 0;
  #line 1848 
  ahw->extend_lb_time = (unsigned char)0U;
  #line 1849 
  max_wait_count = 250U;
  #line 1850 
  status = qlcnic_83xx_get_port_config(adapter);
  #line 1851 
  if (status != 0) 
                   #line 1852 
                   return status;
  #line 1854 
  config = ahw->port_config;
  #line 1857 
  if ((config & 4U) != 0U || (config & 8U) != 0U) {
    #line 1859 
    netdev_err(netdev,(char *)"Port already in Loopback mode.\n");
    #line 1861 
    return -115;
  }
  #line 1864 
  cif_set_bit_0(3L,& ahw->idc.status);
  #line 1866 
  if ((unsigned int)mode == 1U) 
                                #line 1867 
                                ahw->port_config |= 4U;
  #line 1868 
  if ((unsigned int)mode == 2U) 
                                #line 1869 
                                ahw->port_config |= 8U;
  #line 1871 
  status = qlcnic_83xx_set_port_config(adapter);
  #line 1872 
  if (status != 0) {
    #line 1873 
    netdev_err(netdev,(char *)"Failed to Set Loopback Mode = 0x%x.\n",ahw->port_config);
    #line 1876 
    ahw->port_config = config;
    #line 1877 
    cif_clear_bit_0(3L,& ahw->idc.status);
    #line 1878 
    return status;
  }
  #line 1882 
  while (1) {
    {
      #line 1896 
      int tmp_0;
      #line 1883 
      msleep(20U);
      #line 1885 
      if ((int)test_bit(2L,& adapter->state) != 0) {
        #line 1886 
        netdev_info(netdev,(char *)"Device is resetting, free LB test resources\n");
        #line 1888 
        cif_clear_bit_0(3L,& ahw->idc.status);
        #line 1889 
        return -16;
      }
      #line 1892 
      if ((unsigned int)ahw->extend_lb_time != 0U) 
                                                   #line 1893 
                                                   qlcnic_extend_lb_idc_cmpltn_wait(adapter,& max_wait_count);
      #line 1896 
      tmp_0 = loop;
      #line 1896 
      loop ++;
      #line 1896 
      ;
      #line 1896 
      if ((unsigned int)tmp_0 > max_wait_count) {
        #line 1897 
        netdev_err(netdev,(char *)"%s: Did not receive loopback IDC completion AEN\n",(char *)"qlcnic_83xx_set_lb_mode");
        #line 1899 
        cif_clear_bit_0(3L,& ahw->idc.status);
        #line 1900 
        qlcnic_83xx_clear_lb_mode(adapter,(unsigned char)((int)mode));
        #line 1901 
        return -110;
      }
    }
    #line 1903 
    if (! ((int)test_bit(3L,& ahw->idc.status) != 0)) 
                                                      #line 1882 
                                                      break;
  }
  #line 1905 
  qlcnic_sre_macaddr_change(adapter,(u8 *)(& adapter->mac_addr),(unsigned short)0,(unsigned char)1);
  #line 1907 
  return status;
}

#line 1910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  #line 1913 
  u32 max_wait_count;
  #line 1912 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1913 
  u32 config = ahw->port_config;
  #line 1914 
  struct net_device *netdev = adapter->netdev;
  #line 1915 
  int status = 0;
  #line 1915 
  int loop = 0;
  #line 1917 
  ahw->extend_lb_time = (unsigned char)0U;
  #line 1918 
  max_wait_count = 250U;
  #line 1919 
  cif_set_bit_0(3L,& ahw->idc.status);
  #line 1920 
  if ((unsigned int)mode == 1U) 
                                #line 1921 
                                ahw->port_config &= 4294967291U;
  #line 1922 
  if ((unsigned int)mode == 2U) 
                                #line 1923 
                                ahw->port_config &= 4294967287U;
  #line 1925 
  status = qlcnic_83xx_set_port_config(adapter);
  #line 1926 
  if (status != 0) {
    #line 1927 
    netdev_err(netdev,(char *)"Failed to Clear Loopback Mode = 0x%x.\n",ahw->port_config);
    #line 1930 
    ahw->port_config = config;
    #line 1931 
    cif_clear_bit_0(3L,& ahw->idc.status);
    #line 1932 
    return status;
  }
  #line 1936 
  while (1) {
    {
      #line 1950 
      int tmp_0;
      #line 1937 
      msleep(20U);
      #line 1939 
      if ((int)test_bit(2L,& adapter->state) != 0) {
        #line 1940 
        netdev_info(netdev,(char *)"Device is resetting, free LB test resources\n");
        #line 1942 
        cif_clear_bit_0(3L,& ahw->idc.status);
        #line 1943 
        return -16;
      }
      #line 1946 
      if ((unsigned int)ahw->extend_lb_time != 0U) 
                                                   #line 1947 
                                                   qlcnic_extend_lb_idc_cmpltn_wait(adapter,& max_wait_count);
      #line 1950 
      tmp_0 = loop;
      #line 1950 
      loop ++;
      #line 1950 
      ;
      #line 1950 
      if ((unsigned int)tmp_0 > max_wait_count) {
        #line 1951 
        netdev_err(netdev,(char *)"%s: Did not receive loopback IDC completion AEN\n",(char *)"qlcnic_83xx_clear_lb_mode");
        #line 1953 
        cif_clear_bit_0(3L,& ahw->idc.status);
        #line 1954 
        return -110;
      }
    }
    #line 1956 
    if (! ((int)test_bit(3L,& ahw->idc.status) != 0)) 
                                                      #line 1936 
                                                      break;
  }
  #line 1958 
  qlcnic_sre_macaddr_change(adapter,(u8 *)(& adapter->mac_addr),(unsigned short)0,(unsigned char)2);
  #line 1960 
  return status;
}

#line 1963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_set_interface_id_ipaddr(struct qlcnic_adapter *adapter, u32 *interface_id)
{
  #line 1966 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1967 
                                                qlcnic_pf_set_interface_id_ipaddr(adapter,interface_id);
  else {
    #line 1969 
    if (! qlcnic_sriov_vf_check(adapter)) 
                                          #line 1970 
                                          *interface_id = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16);
  }
  #line 1971 
  return;
}

#line 1974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int mode)
{
  #line 1977 
  int err;
  #line 1978 
  u32 temp_ip;
  #line 1979 
  struct qlcnic_cmd_args cmd;
  #line 1978 
  u32 temp = 0U;
  #line 1981 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,1U);
  #line 1983 
  if (err != 0) 
                #line 1984 
                return;
  #line 1986 
  qlcnic_83xx_set_interface_id_ipaddr(adapter,& temp);
  #line 1988 
  if (mode == 2) 
                 #line 1989 
                 *(cmd.req.arg + 1U) = temp | 1U; else 
                                                       #line 1991 
                                                       *(cmd.req.arg + 1U) = temp | 2U;
  #line 2001 
  temp_ip = __builtin_bswap32(__builtin_bswap32(ip));
  #line 2002 
  memcpy((void *)(cmd.req.arg + 2U),(void *)(& temp_ip),4UL);
  #line 2003 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2004 
  if (err != 0) {
    #line 2005 
    char *tmp_0;
    #line 2005 
    ;
    #line 2005 
    if (mode == 2) 
                   #line 2005 
                   tmp_0 = (char *)"Add"; else 
                                               #line 2005 
                                               tmp_0 = (char *)"Remove";
    #line 2005 
    ;
    #line 2005 
    _dev_err(& (adapter->netdev)->dev,(char *)"could not notify %s IP 0x%x request\n",tmp_0,ip);
  }
  #line 2009 
  qlcnic_free_mbx_args(& cmd);
  #line 2010 
  return;
}

#line 2012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_hw_lro(struct qlcnic_adapter *adapter, int mode)
{
  #line 2014 
  int err;
  #line 2015 
  u32 temp;
  #line 2015 
  u32 arg1;
  #line 2016 
  struct qlcnic_cmd_args cmd;
  #line 2017 
  int lro_bit_mask;
  #line 2019 
  if (mode != 0) 
                 #line 2019 
                 lro_bit_mask = 15; else 
                                         #line 2019 
                                         lro_bit_mask = 0;
  #line 2021 
  if ((adapter->recv_ctx)->state == 0U) 
                                        #line 2022 
                                        return 0;
  #line 2024 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,74U);
  #line 2025 
  if (err != 0) 
                #line 2026 
                return err;
  #line 2028 
  temp = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16);
  #line 2029 
  arg1 = (unsigned int)lro_bit_mask | temp;
  #line 2030 
  *(cmd.req.arg + 1U) = arg1;
  #line 2032 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2033 
  if (err != 0) 
                #line 2034 
                _dev_info(& (adapter->pdev)->dev,(char *)"LRO config failed\n");
  #line 2035 
  qlcnic_free_mbx_args(& cmd);
  #line 2037 
  return err;
}

#line 2040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_rss(struct qlcnic_adapter *adapter, int enable)
{
  #line 2042 
  int err;
  #line 2043 
  u32 word;
  #line 2044 
  struct qlcnic_cmd_args cmd;
  #line 2045 
  u64 key[5U] = {13739358738236749627ULL, 9237148971100220835ULL, 12572696337890028491ULL, 4873897208919303485ULL, 2691761430505084634ULL};
  #line 2049 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,65U);
  #line 2050 
  if (err != 0) 
                #line 2051 
                return err;
  #line 2061 
  word = (((unsigned int)enable << 8) & 256U) | 458992U;
  #line 2065 
  *(cmd.req.arg + 1U) = (unsigned int)(adapter->recv_ctx)->context_id;
  #line 2066 
  *(cmd.req.arg + 2U) = word;
  #line 2067 
  memcpy((void *)(cmd.req.arg + 4U),(void *)(& key),40UL);
  #line 2069 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2071 
  if (err != 0) 
                #line 2072 
                _dev_info(& (adapter->pdev)->dev,(char *)"RSS config failed\n");
  #line 2073 
  qlcnic_free_mbx_args(& cmd);
  #line 2075 
  return err;
}

#line 2079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_set_interface_id_macaddr(struct qlcnic_adapter *adapter, u32 *interface_id)
{
  #line 2082 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 2083 
                                                qlcnic_pf_set_interface_id_macaddr(adapter,interface_id);
  else {
    #line 2085 
    if (! qlcnic_sriov_vf_check(adapter)) 
                                          #line 2086 
                                          *interface_id = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16);
  }
  #line 2087 
  return;
}

#line 2090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan_id, u8 op)
{
  #line 2094 
  struct qlcnic_macvlan_mbx mv;
  #line 2095 
  u32 *buf;
  #line 2096 
  int err;
  #line 2093 
  struct qlcnic_cmd_args *cmd = (struct qlcnic_cmd_args *)0;
  #line 2095 
  u32 temp = 0U;
  #line 2098 
  if ((adapter->recv_ctx)->state == 0U) 
                                        #line 2099 
                                        return -5;
  #line 2101 
  cmd = (struct qlcnic_cmd_args *)kzalloc_0(200UL,2592U);
  #line 2102 
  if (cmd == (struct qlcnic_cmd_args *)0) 
                                          #line 2103 
                                          return -12;
  #line 2105 
  err = qlcnic_alloc_mbx_args(cmd,adapter,69U);
  #line 2106 
  if (err != 0) 
                #line 2107 
                goto out;
  #line 2109 
  cmd->type = 1U;
  #line 2111 
  if ((unsigned int)vlan_id != 0U) 
    #line 2112 
    if ((unsigned int)op == 1U || (unsigned int)op == 3U) 
                                                          #line 2112 
                                                          op = (unsigned char)3U; else 
                                                                    #line 2112 
                                                                    op = (unsigned char)4U;
  #line 2115 
  *(cmd->req.arg + 1U) = (unsigned int)((int)op | 256);
  #line 2116 
  qlcnic_83xx_set_interface_id_macaddr(adapter,& temp);
  #line 2117 
  *(cmd->req.arg + 1U) |= temp;
  #line 2118 
  mv.vlan = vlan_id;
  #line 2119 
  mv.mac_addr0 = *addr;
  #line 2120 
  mv.mac_addr1 = *(addr + 1U);
  #line 2121 
  mv.mac_addr2 = *(addr + 2U);
  #line 2122 
  mv.mac_addr3 = *(addr + 3U);
  #line 2123 
  mv.mac_addr4 = *(addr + 4U);
  #line 2124 
  mv.mac_addr5 = *(addr + 5U);
  #line 2125 
  buf = cmd->req.arg + 2U;
  #line 2126 
  memcpy((void *)buf,(void *)(& mv),8UL);
  #line 2127 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 2128 
  if (err == 0) 
                #line 2129 
                return err;
  #line 2131 
  qlcnic_free_mbx_args(cmd);
  #line 2132 
  out: 
       #line 2132 
  ;
  #line 2133 
  kfree((void *)cmd);
  #line 2134 
  return err;
}

#line 2137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_change_l2_filter(struct qlcnic_adapter *adapter, u64 *addr, u16 vlan_id, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 2141 
  u8 mac[6U];
  #line 2142 
  memcpy((void *)(& mac),(void *)addr,6UL);
  #line 2143 
  qlcnic_83xx_sre_macaddr_change(adapter,(u8 *)(& mac),(unsigned short)((int)vlan_id),(unsigned char)1);
  #line 2144 
  return;
}

#line 2146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_configure_mac(struct qlcnic_adapter *adapter, u8 *mac, u8 type, struct qlcnic_cmd_args *cmd)
{
  #line 2149 
  switch ((int)type) {
    #line 2150 
    case 2: 
            #line 2150 
    ;
    #line 2151 
    case 5: 
            #line 2151 
    ;
    #line 2152 
    memcpy((void *)(cmd->req.arg + 2U),(void *)mac,4UL);
    #line 2153 
    memcpy((void *)(cmd->req.arg + 3U),(void *)(mac + 4U),2UL);
    #line 2154 
    break;
  }
  #line 2156 
  *(cmd->req.arg + 1U) = (unsigned int)type;
  #line 2157 
  return;
}

#line 2159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function)
{
  #line 2162 
  int err;
  #line 2162 
  int i;
  #line 2163 
  struct qlcnic_cmd_args cmd;
  #line 2164 
  u32 mac_low;
  #line 2164 
  u32 mac_high;
  #line 2166 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,31U);
  #line 2167 
  if (err != 0) 
                #line 2168 
                return err;
  #line 2170 
  qlcnic_83xx_configure_mac(adapter,mac,(unsigned char)1,& cmd);
  #line 2171 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2173 
  if (err == 0) {
    #line 2174 
    mac_low = *(cmd.rsp.arg + 1U);
    #line 2175 
    mac_high = *(cmd.rsp.arg + 2U);
    #line 2177 
    i = 0;
    #line 2177 
    while (i <= 1) {
      #line 2178 
      *(mac + (unsigned long)i) = (unsigned char)(mac_high >> (1 - i) * 8);
      #line 2177 
      i ++;
    }
    #line 2179 
    i = 2;
    #line 2179 
    while (i <= 5) {
      #line 2180 
      *(mac + (unsigned long)i) = (unsigned char)(mac_low >> (5 - i) * 8);
      #line 2179 
      i ++;
    }
  }
  else {
    #line 2182 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to get mac address%d\n",err);
    #line 2184 
    err = -5;
  }
  #line 2186 
  qlcnic_free_mbx_args(& cmd);
  #line 2187 
  return err;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_set_rx_intr_coal(struct qlcnic_adapter *adapter)
{
  #line 2193 
  struct qlcnic_cmd_args cmd;
  #line 2194 
  u16 temp;
  #line 2195 
  int err;
  #line 2192 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  #line 2197 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,67U);
  #line 2198 
  if (err != 0) 
                #line 2199 
                return err;
  #line 2201 
  temp = (adapter->recv_ctx)->context_id;
  #line 2202 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)temp << 16) | 1);
  #line 2203 
  temp = coal->rx_time_us;
  #line 2204 
  *(cmd.req.arg + 2U) = (unsigned int)((int)coal->rx_packets | ((int)temp << 16));
  #line 2205 
  *(cmd.req.arg + 3U) = (unsigned int)coal->flag;
  #line 2207 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2208 
  if (err != 0) 
                #line 2209 
                netdev_err(adapter->netdev,(char *)"failed to set interrupt coalescing parameters\n");
  #line 2212 
  qlcnic_free_mbx_args(& cmd);
  #line 2214 
  return err;
}

#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_set_tx_intr_coal(struct qlcnic_adapter *adapter)
{
  #line 2220 
  struct qlcnic_cmd_args cmd;
  #line 2221 
  u16 temp;
  #line 2222 
  int err;
  #line 2219 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  #line 2224 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,67U);
  #line 2225 
  if (err != 0) 
                #line 2226 
                return err;
  #line 2228 
  temp = (adapter->tx_ring)->ctx_id;
  #line 2229 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)temp << 16) | 2);
  #line 2230 
  temp = coal->tx_time_us;
  #line 2231 
  *(cmd.req.arg + 2U) = (unsigned int)((int)coal->tx_packets | ((int)temp << 16));
  #line 2232 
  *(cmd.req.arg + 3U) = (unsigned int)coal->flag;
  #line 2234 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2235 
  if (err != 0) 
                #line 2236 
                netdev_err(adapter->netdev,(char *)"failed to set interrupt coalescing  parameters\n");
  #line 2239 
  qlcnic_free_mbx_args(& cmd);
  #line 2241 
  return err;
}

#line 2244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_rx_tx_intr_coal(struct qlcnic_adapter *adapter)
{
  #line 2246 
  int err = 0;
  #line 2248 
  err = qlcnic_83xx_set_rx_intr_coal(adapter);
  #line 2249 
  if (err != 0) 
                #line 2250 
                netdev_err(adapter->netdev,(char *)"failed to set Rx coalescing parameters\n");
  #line 2253 
  err = qlcnic_83xx_set_tx_intr_coal(adapter);
  #line 2254 
  if (err != 0) 
                #line 2255 
                netdev_err(adapter->netdev,(char *)"failed to set Tx coalescing parameters\n");
  #line 2258 
  return err;
}

#line 2261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_intr_coal(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal)
{
  #line 2265 
  u32 rx_coalesce_usecs;
  #line 2265 
  u32 rx_max_frames;
  #line 2266 
  u32 tx_coalesce_usecs;
  #line 2266 
  u32 tx_max_frames;
  #line 2267 
  int err;
  #line 2264 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  #line 2269 
  if ((adapter->recv_ctx)->state == 0U) 
                                        #line 2270 
                                        return -5;
  #line 2272 
  tx_coalesce_usecs = ethcoal->tx_coalesce_usecs;
  #line 2273 
  tx_max_frames = ethcoal->tx_max_coalesced_frames;
  #line 2274 
  rx_coalesce_usecs = ethcoal->rx_coalesce_usecs;
  #line 2275 
  rx_max_frames = ethcoal->rx_max_coalesced_frames;
  #line 2276 
  coal->flag = (unsigned short)4U;
  #line 2278 
  if ((unsigned int)coal->rx_time_us == rx_coalesce_usecs && (unsigned int)coal->rx_packets == rx_max_frames) {
    #line 2280 
    coal->type = (unsigned char)2U;
    #line 2281 
    coal->tx_time_us = (unsigned short)tx_coalesce_usecs;
    #line 2282 
    coal->tx_packets = (unsigned short)tx_max_frames;
  }
  else 
    #line 2283 
    if ((unsigned int)coal->tx_time_us == tx_coalesce_usecs && (unsigned int)coal->tx_packets == tx_max_frames) {
      #line 2285 
      coal->type = (unsigned char)1U;
      #line 2286 
      coal->rx_time_us = (unsigned short)rx_coalesce_usecs;
      #line 2287 
      coal->rx_packets = (unsigned short)rx_max_frames;
    }
    else {
      #line 2289 
      coal->type = (unsigned char)3U;
      #line 2290 
      coal->rx_time_us = (unsigned short)rx_coalesce_usecs;
      #line 2291 
      coal->rx_packets = (unsigned short)rx_max_frames;
      #line 2292 
      coal->tx_time_us = (unsigned short)tx_coalesce_usecs;
      #line 2293 
      coal->tx_packets = (unsigned short)tx_max_frames;
    }
  #line 2296 
  switch ((int)coal->type) {
    #line 2297 
    case 1: 
            #line 2297 
    ;
    #line 2298 
    err = qlcnic_83xx_set_rx_intr_coal(adapter);
    #line 2299 
    break;
    #line 2300 
    case 2: 
            #line 2300 
    ;
    #line 2301 
    err = qlcnic_83xx_set_tx_intr_coal(adapter);
    #line 2302 
    break;
    #line 2303 
    case 3: 
            #line 2303 
    ;
    #line 2304 
    err = qlcnic_83xx_set_rx_tx_intr_coal(adapter);
    #line 2305 
    break;
    #line 2306 
    default: 
             #line 2306 
    ;
    #line 2307 
    err = -22;
    #line 2308 
    netdev_err(adapter->netdev,(char *)"Invalid Interrupt coalescing type\n");
    #line 2310 
    break;
  }
  #line 2313 
  return err;
}

#line 2316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_handle_link_aen(struct qlcnic_adapter *adapter, u32 *data)
{
  #line 2320 
  u8 link_status;
  #line 2320 
  u8 duplex;
  #line 2319 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2322 
  link_status = (unsigned char)((unsigned int)((unsigned char)*(data + 3U)) & 1U);
  #line 2323 
  if ((unsigned int)link_status != 0U) {
    #line 2324 
    ahw->link_speed = (unsigned int)((unsigned short)(*(data + 2U) >> 16));
    #line 2325 
    duplex = (unsigned char)(*(data + 3U) >> 16);
    #line 2326 
    if ((unsigned int)duplex != 0U) 
                                    #line 2327 
                                    ahw->link_duplex = (unsigned short)1U; else 
                                                                    #line 2329 
                                                                    ahw->link_duplex = (unsigned short)0U;
  }
  else {
    #line 2331 
    ahw->link_speed = 4294967295U;
    #line 2332 
    ahw->link_duplex = (unsigned short)255U;
  }
  #line 2335 
  ahw->link_autoneg = (unsigned short)((unsigned char)((int)((unsigned short)(*(data + 3U) >> 16)) >> 8));
  #line 2336 
  ahw->module_type = (unsigned short)((unsigned char)((int)((unsigned short)*(data + 3U)) >> 8));
  #line 2337 
  ahw->has_link_events = (unsigned char)1U;
  #line 2338 
  ahw->lb_mode = (unsigned char)((unsigned int)((unsigned char)*(data + 4U)) & 3U);
  #line 2339 
  qlcnic_advert_link_change(adapter,(int)link_status);
  #line 2340 
  return;
}

#line 2342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static irqreturn_t qlcnic_83xx_handle_aen(int irq, void *data)
{
  #line 2344 
  u32 mask;
  #line 2344 
  u32 resp;
  #line 2344 
  u32 event;
  #line 2346 
  struct qlcnic_mailbox *mbx;
  #line 2347 
  unsigned long flags;
  #line 2344 
  u32 rsp_status = 1U;
  #line 2345 
  struct qlcnic_adapter *adapter = (struct qlcnic_adapter *)data;
  #line 2349 
  mbx = (adapter->ahw)->mailbox;
  #line 2350 
  cif___ldv_spin_lock_aen_lock_of_qlcnic_mailbox(& mbx->aen_lock);
  #line 2351 
  resp = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 4U));
  #line 2352 
  if ((resp & 1U) == 0U) 
                         #line 2353 
                         goto out;
  #line 2355 
  event = readl((adapter->ahw)->pci_base0 + 2048U);
  #line 2356 
  if ((event & 32768U) != 0U) 
                              #line 2357 
                              __qlcnic_83xx_process_aen(adapter);
  else 
    #line 2359 
    if (mbx->rsp_status != rsp_status) 
                                       #line 2360 
                                       qlcnic_83xx_notify_mbx_response(mbx); else 
                                                                    #line 2362 
                                                                    (adapter->stats.mbx_spurious_intr) ++;
  #line 2365 
  out: 
       #line 2365 
  ;
  #line 2366 
  mask = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 9U));
  #line 2367 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)mask);
  #line 2368 
  cif_spin_unlock_irqrestore_aen_lock_of_qlcnic_mailbox(& mbx->aen_lock,flags);
  #line 2369 
  return IRQ_HANDLED;
}

#line 2372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *nic)
{
  #line 2375 
  int i;
  #line 2376 
  struct qlcnic_cmd_args cmd;
  #line 2375 
  int err = -5;
  #line 2378 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) {
    #line 2379 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Error, invoked by non management func\n",(char *)"qlcnic_83xx_set_nic_info");
    #line 2382 
    return err;
  }
  #line 2385 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  #line 2386 
  if (err != 0) 
                #line 2387 
                return err;
  #line 2389 
  *(cmd.req.arg + 1U) = (unsigned int)((int)nic->pci_func << 16);
  #line 2390 
  *(cmd.req.arg + 2U) = 65536U;
  #line 2391 
  *(cmd.req.arg + 3U) = (unsigned int)((int)nic->phys_port | ((int)nic->switch_mode << 16));
  #line 2392 
  *(cmd.req.arg + 4U) = nic->capabilities;
  #line 2393 
  *(cmd.req.arg + 5U) = (unsigned int)((int)nic->max_mac_filters | ((int)nic->max_mtu << 16));
  #line 2394 
  *(cmd.req.arg + 6U) = (unsigned int)((int)nic->max_tx_ques | ((int)nic->max_rx_ques << 16));
  #line 2395 
  *(cmd.req.arg + 7U) = (unsigned int)((int)nic->min_tx_bw | ((int)nic->max_tx_bw << 16));
  #line 2396 
  i = 8;
  #line 2396 
  while (i <= 31) {
    #line 2397 
    *(cmd.req.arg + (unsigned long)i) = 0U;
    #line 2396 
    i ++;
  }
  #line 2399 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2401 
  if (err != 0) {
    #line 2402 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to set nic info%d\n",err);
    #line 2404 
    err = -5;
  }
  #line 2407 
  qlcnic_free_mbx_args(& cmd);
  #line 2409 
  return err;
}

#line 2412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u8 func_id)
{
  #line 2415 
  int err;
  #line 2416 
  u32 temp;
  #line 2418 
  struct qlcnic_cmd_args cmd;
  #line 2417 
  u8 op = (unsigned char)0U;
  #line 2419 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2421 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,33U);
  #line 2422 
  if (err != 0) 
                #line 2423 
                return err;
  #line 2425 
  if ((int)ahw->pci_func != (int)func_id) {
    #line 2426 
    temp = (unsigned int)((int)func_id << 16);
    #line 2427 
    *(cmd.req.arg + 1U) = ((unsigned int)op | temp) | 2147483648U;
  }
  else 
       #line 2429 
       *(cmd.req.arg + 1U) = (unsigned int)((int)ahw->pci_func << 16);
  #line 2431 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2432 
  if (err != 0) {
    #line 2433 
    _dev_info(& (adapter->pdev)->dev,(char *)"Failed to get nic info %d\n",err);
    #line 2435 
    goto out;
  }
  #line 2438 
  npar_info->op_type = *(cmd.rsp.arg + 1U);
  #line 2439 
  npar_info->pci_func = (unsigned short)*(cmd.rsp.arg + 2U);
  #line 2440 
  npar_info->op_mode = (unsigned short)(*(cmd.rsp.arg + 2U) >> 16);
  #line 2441 
  npar_info->phys_port = (unsigned short)*(cmd.rsp.arg + 3U);
  #line 2442 
  npar_info->switch_mode = (unsigned short)(*(cmd.rsp.arg + 3U) >> 16);
  #line 2443 
  npar_info->capabilities = *(cmd.rsp.arg + 4U);
  #line 2444 
  npar_info->max_mac_filters = (unsigned char)*(cmd.rsp.arg + 5U);
  #line 2445 
  npar_info->max_mtu = (unsigned short)(*(cmd.rsp.arg + 5U) >> 16);
  #line 2446 
  npar_info->max_tx_ques = (unsigned short)*(cmd.rsp.arg + 6U);
  #line 2447 
  npar_info->max_rx_ques = (unsigned short)(*(cmd.rsp.arg + 6U) >> 16);
  #line 2448 
  npar_info->min_tx_bw = (unsigned short)*(cmd.rsp.arg + 7U);
  #line 2449 
  npar_info->max_tx_bw = (unsigned short)(*(cmd.rsp.arg + 7U) >> 16);
  #line 2450 
  if ((*(cmd.rsp.arg + 8U) & 1U) != 0U) 
                                        #line 2451 
                                        npar_info->max_bw_reg_offset = (unsigned short)((unsigned int)((unsigned short)(*(cmd.rsp.arg + 8U) >> 1)) & 16383U);
  #line 2452 
  if ((*(cmd.rsp.arg + 8U) & 65536U) != 0U) {
    #line 2453 
    temp = (*(cmd.rsp.arg + 8U) >> 17) & 16383U;
    #line 2454 
    npar_info->max_linkspeed_reg_offset = (unsigned short)temp;
  }
  #line 2457 
  memcpy((void *)(& ahw->extra_capability),(void *)(cmd.rsp.arg + 16U),12UL);
  #line 2460 
  out: 
       #line 2460 
  ;
  #line 2461 
  qlcnic_free_mbx_args(& cmd);
  #line 2462 
  return err;
}

#line 2465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_get_pci_func_type(struct qlcnic_adapter *adapter, u16 type, u16 *nic, u16 *fcoe, u16 *iscsi)
{
  #line 2468 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2469 
  int err = 0;
  #line 2471 
  switch ((int)type) {
    #line 2472 
    case 1: 
            #line 2472 
    ;
    #line 2473 
    *nic = (u16)((int)*nic + 1);
    #line 2474 
    break;
    #line 2475 
    case 2: 
            #line 2475 
    ;
    #line 2476 
    *fcoe = (u16)((int)*fcoe + 1);
    #line 2477 
    break;
    #line 2478 
    case 3: 
            #line 2478 
    ;
    #line 2479 
    *iscsi = (u16)((int)*iscsi + 1);
    #line 2480 
    break;
    #line 2481 
    default: 
             #line 2481 
    ;
    #line 2482 
    _dev_err(dev,(char *)"%s: Unknown PCI type[%x]\n",(char *)"qlcnic_get_pci_func_type",(int)type);
    #line 2484 
    err = -5;
  }
  #line 2487 
  return err;
}

#line 2490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *pci_info)
{
  #line 2496 
  struct qlcnic_cmd_args cmd;
  #line 2497 
  int i;
  #line 2498 
  u32 temp;
  #line 2493 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2494 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2495 
  u16 nic = (unsigned short)0U;
  #line 2495 
  u16 fcoe = (unsigned short)0U;
  #line 2495 
  u16 iscsi = (unsigned short)0U;
  #line 2497 
  int err = 0;
  #line 2497 
  int j = 0;
  #line 2500 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,32U);
  #line 2501 
  if (err != 0) 
                #line 2502 
                return err;
  #line 2504 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2506 
  ahw->total_nic_func = (unsigned short)0U;
  #line 2507 
  if (err == 0) {
    #line 2508 
    ahw->max_pci_func = (unsigned short)((unsigned int)((unsigned short)*(cmd.rsp.arg + 1U)) & 255U);
    #line 2509 
    i = 2;
    #line 2509 
    j = 0;
    #line 2509 
    while (ahw->max_vnic_func > (unsigned int)j) {
      #line 2510 
      pci_info->id = (unsigned short)*(cmd.rsp.arg + (unsigned long)i);
      #line 2511 
      pci_info->active = (unsigned short)(*(cmd.rsp.arg + (unsigned long)i) >> 16);
      #line 2512 
      i ++;
      #line 2513 
      if ((unsigned int)pci_info->active == 0U) {
        #line 2514 
        i += 7;
        #line 2515 
        goto __Cont;
      }
      #line 2517 
      pci_info->type = (unsigned short)*(cmd.rsp.arg + (unsigned long)i);
      #line 2518 
      err = qlcnic_get_pci_func_type(adapter,(unsigned short)((int)pci_info->type),& nic,& fcoe,& iscsi);
      #line 2520 
      temp = *(cmd.rsp.arg + (unsigned long)i) >> 16;
      #line 2521 
      pci_info->default_port = (unsigned short)temp;
      #line 2522 
      i ++;
      #line 2523 
      pci_info->tx_min_bw = (unsigned short)*(cmd.rsp.arg + (unsigned long)i);
      #line 2524 
      temp = *(cmd.rsp.arg + (unsigned long)i) >> 16;
      #line 2525 
      pci_info->tx_max_bw = (unsigned short)temp;
      #line 2526 
      i += 2;
      #line 2527 
      memcpy((void *)(& pci_info->mac),(void *)(cmd.rsp.arg + (unsigned long)i),4UL);
      #line 2528 
      i ++;
      #line 2529 
      memcpy((void *)((u8 *)(& pci_info->mac) + 4UL),(void *)(cmd.rsp.arg + (unsigned long)i),2UL);
      #line 2530 
      i += 3;
      #line 2509 
      __Cont: 
              #line 2509 
      j ++;
      #line 2509 
      pci_info ++;
    }
  }
  else {
    #line 2533 
    _dev_err(dev,(char *)"Failed to get PCI Info, error = %d\n",err);
    #line 2534 
    err = -5;
  }
  #line 2537 
  ahw->total_nic_func = nic;
  #line 2538 
  ahw->total_pci_func = (unsigned int)(((int)nic + (int)fcoe) + (int)iscsi);
  #line 2539 
  if ((unsigned int)ahw->total_nic_func == 0U || ahw->total_pci_func == 0U) {
    #line 2540 
    _dev_err(dev,(char *)"%s: Invalid function count: total nic func[%x], total pci func[%x]\n",(char *)"qlcnic_83xx_get_pci_info",(int)ahw->total_nic_func,ahw->total_pci_func);
    #line 2542 
    err = -5;
  }
  #line 2544 
  qlcnic_free_mbx_args(& cmd);
  #line 2546 
  return err;
}

#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_intrpt(struct qlcnic_adapter *adapter, bool op_type)
{
  #line 2551 
  int i;
  #line 2551 
  int index;
  #line 2551 
  int err;
  #line 2552 
  u8 max_ints;
  #line 2553 
  u32 val;
  #line 2553 
  u32 temp;
  #line 2553 
  u32 type;
  #line 2554 
  struct qlcnic_cmd_args cmd;
  #line 2556 
  max_ints = (unsigned char)((unsigned int)(adapter->ahw)->num_msix + 255U);
  #line 2557 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,2U);
  #line 2558 
  if (err != 0) 
                #line 2559 
                return err;
  #line 2561 
  *(cmd.req.arg + 1U) = (unsigned int)max_ints;
  #line 2563 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 2564 
                                                *(cmd.req.arg + 1U) = (*(cmd.req.arg + 1U) | (unsigned int)((int)(adapter->ahw)->pci_func << 8)) | 65536U;
  #line 2566 
  i = 0;
  #line 2566 
  index = 2;
  #line 2566 
  while ((int)max_ints > i) {
    {
      #line 2571 
      int tmp_0;
      #line 2567 
      if ((int)op_type != 0) 
                             #line 2567 
                             type = 1U; else 
                                             #line 2567 
                                             type = 2U;
      #line 2568 
      val = (unsigned int)((int)((adapter->ahw)->intr_tbl + (unsigned long)i)->type << 4) | type;
      #line 2569 
      if ((unsigned int)((adapter->ahw)->intr_tbl + (unsigned long)i)->type == 3U) 
        #line 2570 
        val = (unsigned int)((int)((adapter->ahw)->intr_tbl + (unsigned long)i)->id << 16) | val;
      #line 2571 
      tmp_0 = index;
      #line 2571 
      index ++;
      #line 2571 
      *(cmd.req.arg + (unsigned long)tmp_0) = val;
    }
    #line 2566 
    i ++;
  }
  #line 2573 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 2574 
  if (err != 0) {
    #line 2575 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to configure interrupts 0x%x\n",err);
    #line 2577 
    goto out;
  }
  #line 2580 
  max_ints = (unsigned char)*(cmd.rsp.arg + 1U);
  #line 2581 
  i = 0;
  #line 2581 
  index = 2;
  #line 2581 
  while ((int)max_ints > i) {
    #line 2582 
    val = *(cmd.rsp.arg + (unsigned long)index);
    #line 2583 
    if ((unsigned int)((unsigned char)val) != 0U) {
      #line 2584 
      _dev_info(& (adapter->pdev)->dev,(char *)"Can\'t configure interrupt %d\n",(int)((adapter->ahw)->intr_tbl + (unsigned long)i)->id);
      #line 2587 
      goto __Cont;
    }
    #line 2589 
    if ((int)op_type != 0) {
      #line 2590 
      ((adapter->ahw)->intr_tbl + (unsigned long)i)->id = (unsigned short)(val >> 16);
      #line 2591 
      ((adapter->ahw)->intr_tbl + (unsigned long)i)->enabled = (unsigned char)1U;
      #line 2592 
      temp = *(cmd.rsp.arg + ((unsigned long)index + (unsigned long)1U));
      #line 2593 
      ((adapter->ahw)->intr_tbl + (unsigned long)i)->src = temp;
    }
    else {
      #line 2595 
      ((adapter->ahw)->intr_tbl + (unsigned long)i)->id = (unsigned short)i;
      #line 2596 
      ((adapter->ahw)->intr_tbl + (unsigned long)i)->enabled = (unsigned char)0U;
      #line 2597 
      ((adapter->ahw)->intr_tbl + (unsigned long)i)->src = 0U;
    }
    #line 2581 
    __Cont: 
            #line 2581 
    i ++;
    #line 2581 
    index += 2;
  }
  #line 2600 
  out: 
       #line 2600 
  ;
  #line 2601 
  qlcnic_free_mbx_args(& cmd);
  #line 2602 
  return err;
}

#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_lock_flash(struct qlcnic_adapter *adapter)
{
  #line 2607 
  int id;
  #line 2607 
  int timeout = 0;
  #line 2608 
  u32 status = 0U;
  #line 2610 
  while (status == 0U) {
    #line 2611 
    status = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 21U));
    #line 2612 
    if (status != 0U) 
                      #line 2613 
                      break;
    #line 2615 
    timeout ++;
    #line 2615 
    if (timeout > 9999) {
      #line 2616 
      id = (int)readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 3U));
      #line 2618 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed, lock held by %d\n",(char *)"qlcnic_83xx_lock_flash",id);
      #line 2620 
      return -5;
    }
    #line 2622 
    usleep_range(1000UL,2000UL);
  }
  #line 2625 
  writel((unsigned int)adapter->portnum,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 3U));
  #line 2626 
  return 0;
}

#line 2629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_unlock_flash(struct qlcnic_adapter *adapter)
{
  #line 2631 
  readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 22U));
  #line 2632 
  writel(255U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 3U));
  #line 2633 
  return;
}

#line 2635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_lockless_flash_read32(struct qlcnic_adapter *adapter, u32 flash_addr, u8 *p_data, int count)
{
  #line 2639 
  u32 word;
  #line 2639 
  u32 range;
  #line 2639 
  u32 flash_offset;
  #line 2639 
  u32 ret;
  #line 2640 
  ulong indirect_add;
  #line 2640 
  ulong direct_window;
  #line 2641 
  int i;
  #line 2639 
  u32 addr = flash_addr;
  #line 2641 
  int err = 0;
  #line 2643 
  flash_offset = addr & 65535U;
  #line 2644 
  if ((addr & 3U) != 0U) {
    #line 2645 
    _dev_err(& (adapter->pdev)->dev,(char *)"Illegal addr = 0x%x\n",addr);
    #line 2646 
    return -5;
  }
  #line 2649 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410416UL,addr & 4294901760U);
  #line 2652 
  range = (unsigned int)((unsigned long)count) * 4U + flash_offset;
  #line 2654 
  if (range > 65535U) {
    #line 2657 
    i = 0;
    #line 2657 
    while (i < count) {
      {
        #line 2658 
        indirect_add = (unsigned long)((addr & 65535U) | 1108672512U);
        #line 2659 
        ret = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,indirect_add,& err);
        #line 2660 
        if (err == -5) 
                       #line 2661 
                       return err;
        #line 2663 
        word = ret;
        #line 2664 
        *((u32 *)p_data) = word;
        #line 2665 
        p_data += 4U;
        #line 2666 
        addr += 4U;
        #line 2667 
        flash_offset += 4U;
        #line 2669 
        if (flash_offset > 65535U) {
          #line 2670 
          direct_window = 1108410416UL;
          #line 2672 
          qlcnic_83xx_wrt_reg_indirect(adapter,direct_window,addr);
          #line 2675 
          flash_offset = 0U;
        }
      }
      #line 2657 
      i ++;
    }
  }
  else {
    #line 2680 
    i = 0;
    #line 2680 
    while (i < count) {
      {
        #line 2681 
        indirect_add = (unsigned long)((addr & 65535U) | 1108672512U);
        #line 2682 
        ret = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,indirect_add,& err);
        #line 2683 
        if (err == -5) 
                       #line 2684 
                       return err;
        #line 2686 
        word = ret;
        #line 2687 
        *((u32 *)p_data) = word;
        #line 2688 
        p_data += 4U;
        #line 2689 
        addr += 4U;
      }
      #line 2680 
      i ++;
    }
  }
  #line 2693 
  return 0;
}

#line 2696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_poll_flash_status_reg(struct qlcnic_adapter *adapter)
{
  #line 2698 
  u32 status;
  #line 2699 
  int retries = 5000;
  #line 2700 
  int err = 0;
  #line 2702 
  while (1) {
    {
      #line 2703 
      status = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,1108344836UL,& err);
      #line 2704 
      if (err == -5) 
                     #line 2705 
                     return err;
      #line 2707 
      if ((status & 6U) == 6U) 
                               #line 2709 
                               break;
      #line 2711 
      usleep_range(1000UL,1100UL);
    }
    #line 2712 
    retries --;
    #line 2712 
    if (! (retries != 0)) 
                          #line 2702 
                          break;
  }
  #line 2714 
  if (retries == 0) 
                    #line 2715 
                    return -5;
  #line 2717 
  return 0;
}

#line 2720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_enable_flash_write(struct qlcnic_adapter *adapter)
{
  #line 2722 
  int ret;
  #line 2723 
  u32 cmd;
  #line 2724 
  cmd = (unsigned int)(adapter->ahw)->fdt.write_statusreg_cmd;
  #line 2725 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,cmd | 16580864U);
  #line 2727 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,(unsigned int)(adapter->ahw)->fdt.write_enable_bits);
  #line 2729 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,5U);
  #line 2731 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  #line 2732 
  if (ret != 0) 
                #line 2733 
                return -5;
  #line 2735 
  return 0;
}

#line 2738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_disable_flash_write(struct qlcnic_adapter *adapter)
{
  #line 2740 
  int ret;
  #line 2742 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,(unsigned int)((int)(adapter->ahw)->fdt.write_statusreg_cmd | 16580864));
  #line 2745 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,(unsigned int)(adapter->ahw)->fdt.write_disable_bits);
  #line 2747 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,5U);
  #line 2749 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  #line 2750 
  if (ret != 0) 
                #line 2751 
                return -5;
  #line 2753 
  return 0;
}

#line 2756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_read_flash_mfg_id(struct qlcnic_adapter *adapter)
{
  #line 2758 
  int ret;
  #line 2759 
  u32 mfg_id;
  #line 2758 
  int err = 0;
  #line 2761 
  if (qlcnic_83xx_lock_flash(adapter) != 0) 
                                            #line 2762 
                                            return -5;
  #line 2764 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,16580767U);
  #line 2766 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,63U);
  #line 2768 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  #line 2769 
  if (ret != 0) {
    #line 2770 
    qlcnic_83xx_unlock_flash(adapter);
    #line 2771 
    return -5;
  }
  #line 2774 
  mfg_id = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,1108410392UL,& err);
  #line 2775 
  if (err == -5) {
    #line 2776 
    qlcnic_83xx_unlock_flash(adapter);
    #line 2777 
    return err;
  }
  #line 2780 
  adapter->flash_mfg_id = (unsigned char)mfg_id;
  #line 2781 
  qlcnic_83xx_unlock_flash(adapter);
  #line 2783 
  return 0;
}

#line 2786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_read_flash_descriptor_table(struct qlcnic_adapter *adapter)
{
  #line 2788 
  int count;
  #line 2788 
  int fdt_size;
  #line 2788 
  int ret = 0;
  #line 2790 
  fdt_size = 128;
  #line 2791 
  count = (int)((unsigned long)fdt_size / 4UL);
  #line 2793 
  if (qlcnic_83xx_lock_flash(adapter) != 0) 
                                            #line 2794 
                                            return -5;
  #line 2796 
  memset((void *)(& (adapter->ahw)->fdt),0,(unsigned long)fdt_size);
  #line 2797 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,4128768U,(u8 *)(& (adapter->ahw)->fdt),count);
  #line 2800 
  qlcnic_swap32_buffer((u32 *)(& (adapter->ahw)->fdt),count);
  #line 2801 
  qlcnic_83xx_unlock_flash(adapter);
  #line 2802 
  return ret;
}

#line 2805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_erase_flash_sector(struct qlcnic_adapter *adapter, u32 sector_start_addr)
{
  #line 2808 
  u32 reversed_addr;
  #line 2808 
  u32 addr1;
  #line 2808 
  u32 addr2;
  #line 2808 
  u32 cmd;
  #line 2809 
  int ret = -5;
  #line 2811 
  if (qlcnic_83xx_lock_flash(adapter) != 0) 
                                            #line 2812 
                                            return -5;
  #line 2814 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    #line 2815 
    ret = qlcnic_83xx_enable_flash_write(adapter);
    #line 2816 
    if (ret != 0) {
      #line 2817 
      qlcnic_83xx_unlock_flash(adapter);
      #line 2818 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s failed at %d\n",(char *)"qlcnic_83xx_erase_flash_sector",2818);
      #line 2821 
      return ret;
    }
  }
  #line 2825 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  #line 2826 
  if (ret != 0) {
    #line 2827 
    qlcnic_83xx_unlock_flash(adapter);
    #line 2828 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed at %d\n",(char *)"qlcnic_83xx_erase_flash_sector",2828);
    #line 2830 
    return -5;
  }
  #line 2833 
  addr1 = (sector_start_addr << 16) & 16711680U;
  #line 2834 
  addr2 = (sector_start_addr >> 16) & 255U;
  #line 2835 
  reversed_addr = (addr1 | addr2) | (sector_start_addr & 65280U);
  #line 2837 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,reversed_addr);
  #line 2839 
  cmd = (unsigned int)((int)(adapter->ahw)->fdt.erase_cmd | 16581376);
  #line 2840 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) 
    #line 2841 
    qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,cmd); else 
                                                                 #line 2843 
                                                                 qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,16581592U);
  #line 2845 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,61U);
  #line 2848 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  #line 2849 
  if (ret != 0) {
    #line 2850 
    qlcnic_83xx_unlock_flash(adapter);
    #line 2851 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed at %d\n",(char *)"qlcnic_83xx_erase_flash_sector",2851);
    #line 2853 
    return -5;
  }
  #line 2856 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    #line 2857 
    ret = qlcnic_83xx_disable_flash_write(adapter);
    #line 2858 
    if (ret != 0) {
      #line 2859 
      qlcnic_83xx_unlock_flash(adapter);
      #line 2860 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed at %d\n",(char *)"qlcnic_83xx_erase_flash_sector",2860);
      #line 2862 
      return ret;
    }
  }
  #line 2866 
  qlcnic_83xx_unlock_flash(adapter);
  #line 2868 
  return 0;
}

#line 2871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_write32(struct qlcnic_adapter *adapter, u32 addr, u32 *p_data)
{
  #line 2874 
  int ret = -5;
  #line 2875 
  u32 addr1 = (addr >> 2) | 8388608U;
  #line 2877 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,addr1);
  #line 2878 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,*p_data);
  #line 2879 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,61U);
  #line 2881 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  #line 2882 
  if (ret != 0) {
    #line 2883 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed at %d\n",(char *)"qlcnic_83xx_flash_write32",2883);
    #line 2885 
    return -5;
  }
  #line 2888 
  return 0;
}

#line 2891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_bulk_write(struct qlcnic_adapter *adapter, u32 addr, u32 *p_data, int count)
{
  #line 2894 
  u32 temp;
  #line 2914 
  u32 *tmp_0;
  #line 2946 
  u32 *tmp_2;
  #line 2895 
  int ret = -5;
  #line 2895 
  int err = 0;
  #line 2897 
  if ((unsigned int)count + 4294967294U > 62U) {
    #line 2899 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Invalid word count\n",(char *)"qlcnic_83xx_flash_bulk_write");
    #line 2901 
    return -5;
  }
  #line 2904 
  temp = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,671670292UL,& err);
  #line 2905 
  if (err == -5) 
                 #line 2906 
                 return err;
  #line 2908 
  qlcnic_83xx_wrt_reg_indirect(adapter,671670292UL,temp | 4U);
  #line 2910 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,8388608U);
  #line 2914 
  tmp_0 = p_data;
  #line 2914 
  p_data ++;
  #line 2914 
  ;
  #line 2914 
  ;
  #line 2914 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,*tmp_0);
  #line 2915 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,67U);
  #line 2917 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  #line 2918 
  if (ret != 0) {
    #line 2919 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed at %d\n",(char *)"qlcnic_83xx_flash_bulk_write",2919);
    #line 2921 
    return -5;
  }
  #line 2924 
  count --;
  #line 2925 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,8388609U);
  #line 2928 
  while (count != 1) {
    #line 2930 
    u32 *tmp_1;
    #line 2930 
    tmp_1 = p_data;
    #line 2930 
    p_data ++;
    #line 2929 
    ;
    #line 2929 
    ;
    #line 2929 
    qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,*tmp_1);
    #line 2931 
    qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,127U);
    #line 2933 
    ret = qlcnic_83xx_poll_flash_status_reg(adapter);
    #line 2934 
    if (ret != 0) {
      #line 2935 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed at %d\n",(char *)"qlcnic_83xx_flash_bulk_write",2935);
      #line 2937 
      return -5;
    }
    #line 2939 
    count --;
  }
  #line 2942 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,(addr >> 2) | 8388608U);
  #line 2946 
  tmp_2 = p_data;
  #line 2946 
  p_data ++;
  #line 2946 
  ;
  #line 2946 
  ;
  #line 2946 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,*tmp_2);
  #line 2947 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,125U);
  #line 2949 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  #line 2950 
  if (ret != 0) {
    #line 2951 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed at %d\n",(char *)"qlcnic_83xx_flash_bulk_write",2951);
    #line 2953 
    return -5;
  }
  #line 2956 
  ret = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,671670288UL,& err);
  #line 2957 
  if (err == -5) 
                 #line 2958 
                 return err;
  #line 2960 
  if ((ret & 4) != 0) {
    #line 2961 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed at %d\n",(char *)"qlcnic_83xx_flash_bulk_write",2961);
    #line 2964 
    temp = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,671670292UL,& err);
    #line 2965 
    if (err == -5) 
                   #line 2966 
                   return err;
    #line 2968 
    qlcnic_83xx_wrt_reg_indirect(adapter,671670292UL,temp | 4U);
  }
  #line 2973 
  return 0;
}

#line 2976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_recover_driver_lock(struct qlcnic_adapter *adapter)
{
  #line 2978 
  u32 val;
  #line 2978 
  u32 id;
  #line 2980 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 18U));
  #line 2983 
  if ((val & 3U) == 0U) {
    #line 2984 
    val &= 4294967232U;
    #line 2985 
    val = ((unsigned int)((int)adapter->portnum << 2) | val) | 1U;
    #line 2987 
    writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 18U));
    #line 2988 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s: lock recovery initiated\n",(char *)"qlcnic_83xx_recover_driver_lock");
    #line 2990 
    msleep(200U);
    #line 2991 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 18U));
    #line 2992 
    id = (val >> 2) & 15U;
    #line 2993 
    if ((unsigned int)adapter->portnum == id) {
      #line 2994 
      val &= 4294967292U;
      #line 2995 
      val |= 2U;
      #line 2996 
      writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 18U));
      #line 2998 
      readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 40U));
      #line 3000 
      val &= 4294967232U;
      #line 3001 
      writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 18U));
      #line 3002 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s: lock recovery completed\n",(char *)"qlcnic_83xx_recover_driver_lock");
    }
    else 
         #line 3005 
         _dev_info(& (adapter->pdev)->dev,(char *)"%s: func %d to resume lock recovery process\n",(char *)"qlcnic_83xx_recover_driver_lock",id);
  }
  else 
       #line 3010 
       _dev_info(& (adapter->pdev)->dev,(char *)"%s: lock recovery initiated by other functions\n",(char *)"qlcnic_83xx_recover_driver_lock");
  #line 3011 
  return;
}

#line 3016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_lock_driver(struct qlcnic_adapter *adapter)
{
  #line 3018 
  u32 lock_alive_counter;
  #line 3018 
  u32 val;
  #line 3018 
  u32 id;
  #line 3018 
  u32 i = 0U;
  #line 3018 
  u32 status = 0U;
  #line 3018 
  u32 temp = 0U;
  #line 3019 
  int max_attempt = 0;
  #line 3021 
  while (status == 0U) {
    #line 3022 
    status = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 39U));
    #line 3023 
    if (status != 0U) 
                      #line 3024 
                      break;
    #line 3026 
    msleep(20U);
    #line 3027 
    i ++;
    #line 3029 
    if (i == 1U) 
                 #line 3030 
                 temp = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 41U));
    #line 3032 
    if (i == 100U) {
      #line 3033 
      val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 41U));
      #line 3034 
      if (val == temp) {
        #line 3035 
        id = val & 255U;
        #line 3036 
        _dev_info(& (adapter->pdev)->dev,(char *)"%s: lock to be recovered from %d\n",(char *)"qlcnic_83xx_lock_driver",id);
        #line 3039 
        qlcnic_83xx_recover_driver_lock(adapter);
        #line 3040 
        i = 0U;
        #line 3041 
        max_attempt ++;
      }
      else {
        #line 3043 
        _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed to get lock\n",(char *)"qlcnic_83xx_lock_driver");
        #line 3045 
        return -5;
      }
    }
    #line 3050 
    if (max_attempt == 3) {
      #line 3051 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed to get lock\n",(char *)"qlcnic_83xx_lock_driver");
      #line 3053 
      return -5;
    }
  }
  #line 3057 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 41U));
  #line 3058 
  lock_alive_counter = val >> 8;
  #line 3059 
  lock_alive_counter ++;
  #line 3060 
  val = (lock_alive_counter << 8) | (unsigned int)adapter->portnum;
  #line 3061 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 41U));
  #line 3063 
  return 0;
}

#line 3066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_unlock_driver(struct qlcnic_adapter *adapter)
{
  #line 3068 
  u32 val;
  #line 3068 
  u32 lock_alive_counter;
  #line 3068 
  u32 id;
  #line 3070 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 41U));
  #line 3071 
  id = val & 255U;
  #line 3072 
  lock_alive_counter = val >> 8;
  #line 3074 
  if ((unsigned int)adapter->portnum != id) 
                                            #line 3075 
                                            _dev_err(& (adapter->pdev)->dev,(char *)"%s:Warning func %d is unlocking lock owned by %d\n",(char *)"qlcnic_83xx_unlock_driver",(int)adapter->portnum,id);
  #line 3079 
  val = (lock_alive_counter << 8) | 255U;
  #line 3080 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 41U));
  #line 3081 
  readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 40U));
  #line 3082 
  return;
}

#line 3084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_ms_mem_write128(struct qlcnic_adapter *adapter, u64 addr, u32 *data, u32 count)
{
  #line 3087 
  int i;
  #line 3087 
  int j;
  #line 3088 
  u32 temp;
  #line 3087 
  int ret = 0;
  #line 3091 
  if ((addr & 15ULL) != 0ULL) 
                              #line 3092 
                              return -5;
  #line 3094 
  cif_mutex_lock_mem_lock_of_qlcnic_hardware_context(& (adapter->ahw)->mem_lock);
  #line 3095 
  qlcnic_ind_wr(adapter,1090519192U,0U);
  #line 3097 
  i = 0;
  #line 3097 
  while ((unsigned int)i < count) {
    {
      #line 3107 
      u32 *tmp;
      #line 3108 
      u32 *tmp_0;
      #line 3109 
      u32 *tmp_1;
      #line 3110 
      u32 *tmp_2;
      #line 3098 
      if (addr + 18446744060824649728ULL > 134217726ULL && addr > 268435454ULL) {
        #line 3102 
        cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context(& (adapter->ahw)->mem_lock);
        #line 3103 
        return -5;
      }
      #line 3106 
      qlcnic_ind_wr(adapter,1090519188U,(unsigned int)addr);
      #line 3107 
      tmp = data;
      #line 3107 
      data ++;
      #line 3107 
      ;
      #line 3107 
      ;
      #line 3107 
      qlcnic_ind_wr(adapter,1090519200U,*tmp);
      #line 3108 
      tmp_0 = data;
      #line 3108 
      data ++;
      #line 3108 
      ;
      #line 3108 
      ;
      #line 3108 
      qlcnic_ind_wr(adapter,1090519204U,*tmp_0);
      #line 3109 
      tmp_1 = data;
      #line 3109 
      data ++;
      #line 3109 
      ;
      #line 3109 
      ;
      #line 3109 
      qlcnic_ind_wr(adapter,1090519216U,*tmp_1);
      #line 3110 
      tmp_2 = data;
      #line 3110 
      data ++;
      #line 3110 
      ;
      #line 3110 
      ;
      #line 3110 
      qlcnic_ind_wr(adapter,1090519220U,*tmp_2);
      #line 3111 
      qlcnic_ind_wr(adapter,1090519184U,6U);
      #line 3112 
      qlcnic_ind_wr(adapter,1090519184U,7U);
      #line 3114 
      j = 0;
      #line 3114 
      while (j <= 999) {
        {
          #line 3115 
          temp = (unsigned int)qlcnic_ind_rd(adapter,1090519184U);
          #line 3117 
          if ((temp & 8U) == 0U) 
                                 #line 3118 
                                 break;
        }
        #line 3114 
        j ++;
      }
      #line 3122 
      if (j > 999) {
        {
          #line 3123 
          struct ratelimit_state _rs = {.lock = {.raw_lock = {.__anonCompField_qspinlock_9 = {.val = {.counter = 0}}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char *)"_rs.lock", .cpu = 0, .ip = 0UL}}, .interval = 1250, .burst = 10, .printed = 0, .missed = 0, .begin = 0UL, .flags = 0UL};
          {
            #line 3123 
            if (___ratelimit(& _rs,(char *)"qlcnic_ms_mem_write128") != 0) 
              #line 3123 
              printk((char *)"\001");
          }
        }
        #line 3125 
        cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context(& (adapter->ahw)->mem_lock);
        #line 3126 
        return -5;
      }
    }
    #line 3097 
    i ++;
    #line 3097 
    addr += 16ULL;
  }
  #line 3130 
  cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context(& (adapter->ahw)->mem_lock);
  #line 3132 
  return ret;
}

#line 3135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_read32(struct qlcnic_adapter *adapter, u32 flash_addr, u8 *p_data, int count)
{
  #line 3138 
  u32 word;
  #line 3138 
  u32 ret;
  #line 3139 
  ulong indirect_addr;
  #line 3140 
  int i;
  #line 3138 
  u32 addr = flash_addr;
  #line 3140 
  int err = 0;
  #line 3142 
  if (qlcnic_83xx_lock_flash(adapter) != 0) 
                                            #line 3143 
                                            return -5;
  #line 3145 
  if ((addr & 3U) != 0U) {
    #line 3146 
    _dev_err(& (adapter->pdev)->dev,(char *)"Illegal addr = 0x%x\n",addr);
    #line 3147 
    qlcnic_83xx_unlock_flash(adapter);
    #line 3148 
    return -5;
  }
  #line 3151 
  i = 0;
  #line 3151 
  while (i < count) {
    {
      #line 3152 
      if (qlcnic_83xx_wrt_reg_indirect(adapter,1108410416UL,addr) != 0) {
        #line 3155 
        qlcnic_83xx_unlock_flash(adapter);
        #line 3156 
        return -5;
      }
      #line 3159 
      indirect_addr = (unsigned long)((addr & 65535U) | 1108672512U);
      #line 3160 
      ret = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,indirect_addr,& err);
      #line 3161 
      if (err == -5) 
                     #line 3162 
                     return err;
      #line 3164 
      word = ret;
      #line 3165 
      *((u32 *)p_data) = word;
      #line 3166 
      p_data += 4U;
      #line 3167 
      addr += 4U;
    }
    #line 3151 
    i ++;
  }
  #line 3170 
  qlcnic_83xx_unlock_flash(adapter);
  #line 3172 
  return 0;
}

#line 3175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_port_type(struct qlcnic_adapter *adapter)
{
  #line 3178 
  struct qlcnic_cmd_args cmd;
  #line 3179 
  u32 config;
  #line 3180 
  int err;
  #line 3177 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3182 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,104U);
  #line 3183 
  if (err != 0) 
                #line 3184 
                return;
  #line 3186 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 3187 
  if (err != 0) {
    #line 3188 
    _dev_info(& (adapter->pdev)->dev,(char *)"Get Link Status Command failed: 0x%x\n",err);
    #line 3190 
    goto out;
  }
  else {
    #line 3192 
    config = *(cmd.rsp.arg + 3U);
    #line 3194 
    switch ((config >> 4) & 31U) {
      #line 3195 
      case (unsigned int)7: 
                            #line 3195 
      ;
      #line 3196 
      case (unsigned int)8: 
                            #line 3196 
      ;
      #line 3197 
      case (unsigned int)9: 
                            #line 3197 
      ;
      #line 3198 
      case (unsigned int)10: 
                             #line 3198 
      ;
      #line 3199 
      ahw->port_type = (unsigned short)1U;
      #line 3200 
      break;
      #line 3201 
      default: 
               #line 3201 
      ;
      #line 3202 
      ahw->port_type = (unsigned short)2U;
    }
  }
  #line 3205 
  out: 
       #line 3205 
  ;
  #line 3206 
  qlcnic_free_mbx_args(& cmd);
  #line 3207 
  return;
}

#line 3209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_test_link(struct qlcnic_adapter *adapter)
{
  #line 3211 
  u8 pci_func;
  #line 3212 
  int err;
  #line 3213 
  u32 state;
  #line 3214 
  struct qlcnic_cmd_args cmd;
  #line 3222 
  unsigned int tmp_0;
  #line 3213 
  u32 config = 0U;
  #line 3215 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3217 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 3218 
                                                pci_func = adapter->portnum; else 
                                                                    #line 3220 
                                                                    pci_func = ahw->pci_func;
  #line 3222 
  if ((unsigned int)pci_func > 7U) 
                                   #line 3222 
                                   tmp_0 = 13980U; else 
                                                        #line 3222 
                                                        tmp_0 = 13976U;
  #line 3222 
  ;
  #line 3222 
  state = readl(ahw->pci_base0 + tmp_0);
  #line 3223 
  if (((unsigned int)(1 << (int)pci_func * 4) & state) == 0U) {
    #line 3224 
    _dev_info(& (adapter->pdev)->dev,(char *)"link state down\n");
    #line 3225 
    return (int)config;
  }
  #line 3228 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,104U);
  #line 3229 
  if (err != 0) 
                #line 3230 
                return err;
  #line 3232 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 3233 
  if (err != 0) {
    #line 3234 
    _dev_info(& (adapter->pdev)->dev,(char *)"Get Link Status Command failed: 0x%x\n",err);
    #line 3236 
    goto out;
  }
  else {
    #line 3238 
    config = *(cmd.rsp.arg + 1U);
    #line 3239 
    switch ((config >> 3) & 7U) {
      #line 3240 
      case (unsigned int)1: 
                            #line 3240 
      ;
      #line 3241 
      ahw->link_speed = 10U;
      #line 3242 
      break;
      #line 3243 
      case (unsigned int)2: 
                            #line 3243 
      ;
      #line 3244 
      ahw->link_speed = 100U;
      #line 3245 
      break;
      #line 3246 
      case (unsigned int)3: 
                            #line 3246 
      ;
      #line 3247 
      ahw->link_speed = 1000U;
      #line 3248 
      break;
      #line 3249 
      case (unsigned int)4: 
                            #line 3249 
      ;
      #line 3250 
      ahw->link_speed = 10000U;
      #line 3251 
      break;
      #line 3252 
      default: 
               #line 3252 
      ;
      #line 3253 
      ahw->link_speed = 0U;
      #line 3254 
      break;
    }
    #line 3256 
    config = *(cmd.rsp.arg + 3U);
    #line 3257 
    switch ((config >> 4) & 31U) {
      #line 3258 
      case (unsigned int)1: 
                            #line 3258 
      ;
      #line 3259 
      case (unsigned int)2: 
                            #line 3259 
      ;
      #line 3260 
      case (unsigned int)3: 
                            #line 3260 
      ;
      #line 3261 
      ahw->supported_type = (unsigned short)3U;
      #line 3262 
      ahw->port_type = (unsigned short)2U;
      #line 3263 
      break;
      #line 3264 
      case (unsigned int)7: 
                            #line 3264 
      ;
      #line 3265 
      case (unsigned int)8: 
                            #line 3265 
      ;
      #line 3266 
      case (unsigned int)9: 
                            #line 3266 
      ;
      #line 3267 
      ahw->supported_type = (unsigned short)3U;
      #line 3268 
      ahw->port_type = (unsigned short)1U;
      #line 3269 
      break;
      #line 3270 
      case (unsigned int)10: 
                             #line 3270 
      ;
      #line 3271 
      ahw->supported_type = (unsigned short)0U;
      #line 3272 
      ahw->port_type = (unsigned short)1U;
      #line 3273 
      break;
      #line 3274 
      case (unsigned int)4: 
                            #line 3274 
      ;
      #line 3275 
      case (unsigned int)5: 
                            #line 3275 
      ;
      #line 3276 
      case (unsigned int)6: 
                            #line 3276 
      ;
      #line 3277 
      case (unsigned int)11: 
                             #line 3277 
      ;
      #line 3278 
      ahw->supported_type = (unsigned short)5U;
      #line 3279 
      ahw->port_type = (unsigned short)2U;
      #line 3280 
      break;
      #line 3281 
      default: 
               #line 3281 
      ;
      #line 3282 
      ahw->supported_type = (unsigned short)255U;
      #line 3283 
      ahw->port_type = (unsigned short)2U;
    }
    #line 3285 
    if ((config & 1U) != 0U) 
                             #line 3286 
                             err = 1;
  }
  #line 3288 
  out: 
       #line 3288 
  ;
  #line 3289 
  qlcnic_free_mbx_args(& cmd);
  #line 3290 
  return (int)config;
}

#line 3293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_link_ksettings(struct qlcnic_adapter *adapter, struct ethtool_link_ksettings *ecmd)
{
  #line 3299 
  u32 supported;
  #line 3299 
  u32 advertising;
  #line 3296 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3297 
  u32 config = 0U;
  #line 3298 
  int status = 0;
  #line 3301 
  if (! test_bit(16L,& adapter->state)) {
    #line 3303 
    status = qlcnic_83xx_get_port_info(adapter);
    #line 3305 
    config = (unsigned int)qlcnic_83xx_test_link(adapter);
    #line 3306 
    ahw->module_type = (unsigned short)((unsigned int)((unsigned short)(config >> 4)) & 31U);
  }
  #line 3310 
  ahw->board_type = (unsigned short)131U;
  #line 3312 
  if ((int)netif_running(adapter->netdev) != 0) {
    #line 3312 
    if ((unsigned int)ahw->has_link_events != 0U) {
      #line 3313 
      ecmd->base.speed = ahw->link_speed;
      #line 3314 
      ecmd->base.duplex = (unsigned char)ahw->link_duplex;
      #line 3315 
      ecmd->base.autoneg = (unsigned char)ahw->link_autoneg;
    }
    else 
         #line 3312 
         goto _LAND;
  }
  else {
    #line 3312 
    _LAND: {
             #line 3317 
             ecmd->base.speed = 4294967295U;
             #line 3318 
             ecmd->base.duplex = (unsigned char)255U;
             #line 3319 
             ecmd->base.autoneg = (unsigned char)0U;
           }
  }
  #line 3322 
  supported = 4202U;
  #line 3328 
  ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& ecmd->link_modes.advertising));
  #line 3331 
  if ((unsigned int)ecmd->base.autoneg == 1U) {
    #line 3332 
    if ((ahw->port_config & 256U) != 0U) 
                                         #line 3333 
                                         advertising |= 2U;
    #line 3334 
    if ((ahw->port_config & 512U) != 0U) 
                                         #line 3335 
                                         advertising |= 8U;
    #line 3336 
    if ((ahw->port_config & 1024U) != 0U) 
                                          #line 3337 
                                          advertising |= 32U;
    #line 3338 
    if ((ahw->port_config & 2048U) != 0U) 
                                          #line 3339 
                                          advertising |= 4096U;
    #line 3340 
    if ((ahw->port_config & 32768U) != 0U) 
                                           #line 3341 
                                           advertising |= 64U;
  }
  else 
    #line 3343 
    switch (ahw->link_speed) {
      #line 3344 
      case (u32)10: 
                    #line 3344 
      ;
      #line 3345 
      advertising = 2U;
      #line 3346 
      break;
      #line 3347 
      case (u32)100: 
                     #line 3347 
      ;
      #line 3348 
      advertising = 8U;
      #line 3349 
      break;
      #line 3350 
      case (u32)1000: 
                      #line 3350 
      ;
      #line 3351 
      advertising = 32U;
      #line 3352 
      break;
      #line 3353 
      case (u32)10000: 
                       #line 3353 
      ;
      #line 3354 
      advertising = 4096U;
      #line 3355 
      break;
      #line 3356 
      default: 
               #line 3356 
      ;
      #line 3357 
      break;
    }
  #line 3362 
  switch ((int)ahw->supported_type) {
    #line 3363 
    case 3: 
            #line 3363 
    ;
    #line 3364 
    supported |= 1024U;
    #line 3365 
    advertising |= 1024U;
    #line 3366 
    ecmd->base.port = (unsigned char)3U;
    #line 3367 
    break;
    #line 3368 
    case 0: 
            #line 3368 
    ;
    #line 3369 
    supported |= 128U;
    #line 3370 
    advertising |= 128U;
    #line 3371 
    ecmd->base.port = (unsigned char)0U;
    #line 3372 
    break;
    #line 3373 
    case 5: 
            #line 3373 
    ;
    #line 3374 
    supported |= 1024U;
    #line 3375 
    advertising |= 1024U;
    #line 3376 
    ecmd->base.port = (unsigned char)5U;
    #line 3377 
    break;
    #line 3378 
    default: 
             #line 3378 
    ;
    #line 3379 
    supported |= 1024U;
    #line 3380 
    advertising |= 1024U;
    #line 3381 
    ecmd->base.port = (unsigned char)255U;
    #line 3382 
    break;
  }
  #line 3384 
  ecmd->base.phy_address = ahw->physical_port;
  #line 3386 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& ecmd->link_modes.supported),supported);
  #line 3388 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& ecmd->link_modes.advertising),advertising);
  #line 3391 
  return status;
}

#line 3394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_link_ksettings(struct qlcnic_adapter *adapter, struct ethtool_link_ksettings *ecmd)
{
  #line 3397 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3398 
  u32 config = (adapter->ahw)->port_config;
  #line 3399 
  int status = 0;
  #line 3402 
  if ((unsigned int)ecmd->base.duplex == 0U) {
    #line 3403 
    netdev_info(adapter->netdev,(char *)"Half duplex mode not supported\n");
    #line 3405 
    return -22;
  }
  #line 3408 
  if ((unsigned int)ecmd->base.autoneg != 0U) {
    #line 3409 
    ahw->port_config |= 32768U;
    #line 3410 
    ahw->port_config |= 3584U;
  }
  else {
    #line 3414 
    ahw->port_config &= 4294934527U;
    #line 3415 
    switch (ecmd->base.speed) {
      #line 3416 
      case (__u32)10: 
                      #line 3416 
      ;
      #line 3417 
      ahw->port_config &= 4294963711U;
      #line 3420 
      ahw->port_config |= 256U;
      #line 3421 
      break;
      #line 3422 
      case (__u32)100: 
                       #line 3422 
      ;
      #line 3423 
      ahw->port_config &= 4294963967U;
      #line 3426 
      ahw->port_config |= 512U;
      #line 3427 
      break;
      #line 3428 
      case (__u32)1000: 
                        #line 3428 
      ;
      #line 3429 
      ahw->port_config &= 4294964479U;
      #line 3432 
      ahw->port_config |= 1024U;
      #line 3433 
      break;
      #line 3434 
      case (__u32)10000: 
                         #line 3434 
      ;
      #line 3435 
      ahw->port_config &= 4294965503U;
      #line 3438 
      ahw->port_config |= 2048U;
      #line 3439 
      break;
      #line 3440 
      default: 
               #line 3440 
      ;
      #line 3441 
      return -22;
    }
  }
  #line 3444 
  status = qlcnic_83xx_set_port_config(adapter);
  #line 3445 
  if (status != 0) {
    #line 3446 
    netdev_info(adapter->netdev,(char *)"Failed to Set Link Speed and autoneg.\n");
    #line 3448 
    ahw->port_config = config;
  }
  #line 3451 
  return status;
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static u64 *qlcnic_83xx_copy_stats(struct qlcnic_cmd_args *cmd, u64 *data, int index)
{
  #line 3457 
  u32 low;
  #line 3457 
  u32 hi;
  #line 3458 
  u64 val;
  #line 3463 
  u64 *tmp;
  #line 3460 
  low = *(cmd->rsp.arg + (unsigned long)index);
  #line 3461 
  hi = *(cmd->rsp.arg + ((unsigned long)index + (unsigned long)1U));
  #line 3462 
  val = (unsigned long long)low | ((unsigned long long)hi << 32);
  #line 3463 
  tmp = data;
  #line 3463 
  data ++;
  #line 3463 
  *tmp = val;
  #line 3464 
  return data;
}

#line 3467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static u64 *qlcnic_83xx_fill_stats(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd, u64 *data, int type, int *ret)
{
  #line 3471 
  int err;
  #line 3471 
  int k;
  #line 3471 
  int total_regs;
  #line 3473 
  *ret = 0;
  #line 3474 
  err = qlcnic_issue_cmd(adapter,cmd);
  #line 3475 
  if (err != 0) {
    #line 3476 
    _dev_info(& (adapter->pdev)->dev,(char *)"Error in get statistics mailbox command\n");
    #line 3478 
    *ret = -5;
    #line 3479 
    return data;
  }
  #line 3481 
  total_regs = (int)cmd->rsp.num;
  #line 3482 
  switch (type) {
    #line 3483 
    case 1: 
            #line 3483 
    ;
    #line 3485 
    k = 2;
    #line 3485 
    while (k <= 27) {
      #line 3486 
      data = qlcnic_83xx_copy_stats(cmd,data,k);
      #line 3485 
      k += 2;
    }
    #line 3489 
    k += 6;
    #line 3489 
    while (k <= 59) {
      #line 3490 
      data = qlcnic_83xx_copy_stats(cmd,data,k);
      #line 3489 
      k += 2;
    }
    #line 3493 
    k += 6;
    #line 3493 
    while (k <= 79) {
      #line 3494 
      data = qlcnic_83xx_copy_stats(cmd,data,k);
      #line 3493 
      k += 2;
    }
    #line 3496 
    while (k < total_regs) {
      #line 3497 
      data = qlcnic_83xx_copy_stats(cmd,data,k);
      #line 3496 
      k += 2;
    }
    #line 3498 
    break;
    #line 3499 
    case 2: 
            #line 3499 
    ;
    #line 3500 
    k = 2;
    #line 3500 
    while (k <= 7) {
      #line 3501 
      data = qlcnic_83xx_copy_stats(cmd,data,k);
      #line 3500 
      k += 2;
    }
    #line 3503 
    k += 2;
    #line 3503 
    while (k <= 23) {
      #line 3504 
      data = qlcnic_83xx_copy_stats(cmd,data,k);
      #line 3503 
      k += 2;
    }
    #line 3506 
    k += 2;
    #line 3506 
    while (k < total_regs) {
      #line 3507 
      data = qlcnic_83xx_copy_stats(cmd,data,k);
      #line 3506 
      k += 2;
    }
    #line 3508 
    break;
    #line 3509 
    case 3: 
            #line 3509 
    ;
    #line 3510 
    k = 2;
    #line 3510 
    while (k <= 9) {
      #line 3511 
      data = qlcnic_83xx_copy_stats(cmd,data,k);
      #line 3510 
      k += 2;
    }
    #line 3513 
    k += 2;
    #line 3513 
    while (k < total_regs) {
      #line 3514 
      data = qlcnic_83xx_copy_stats(cmd,data,k);
      #line 3513 
      k += 2;
    }
    #line 3515 
    break;
    #line 3516 
    default: 
             #line 3516 
    ;
    #line 3517 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Unknown get statistics mode\n");
    #line 3518 
    *ret = -5;
  }
  #line 3520 
  return data;
}

#line 3523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_stats(struct qlcnic_adapter *adapter, u64 *data)
{
  #line 3525 
  struct qlcnic_cmd_args cmd;
  #line 3526 
  struct net_device *netdev = adapter->netdev;
  #line 3527 
  int ret = 0;
  #line 3529 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,15U);
  #line 3530 
  if (ret != 0) 
                #line 3531 
                return;
  #line 3533 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)(adapter->tx_ring)->ctx_id << 16) | 2);
  #line 3534 
  cmd.rsp.num = 14U;
  #line 3535 
  data = qlcnic_83xx_fill_stats(adapter,& cmd,data,3,& ret);
  #line 3537 
  if (ret != 0) {
    #line 3538 
    netdev_err(netdev,(char *)"Error getting Tx stats\n");
    #line 3539 
    goto out;
  }
  #line 3542 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)adapter->portnum << 16) | 4);
  #line 3543 
  cmd.rsp.num = 94U;
  #line 3544 
  memset((void *)cmd.rsp.arg,0,(unsigned long)cmd.rsp.num * 4UL);
  #line 3545 
  data = qlcnic_83xx_fill_stats(adapter,& cmd,data,1,& ret);
  #line 3547 
  if (ret != 0) {
    #line 3548 
    netdev_err(netdev,(char *)"Error getting MAC stats\n");
    #line 3549 
    goto out;
  }
  #line 3552 
  *(cmd.req.arg + 1U) = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16);
  #line 3553 
  cmd.rsp.num = 40U;
  #line 3554 
  memset((void *)cmd.rsp.arg,0,(unsigned long)cmd.rsp.num * 4UL);
  #line 3555 
  data = qlcnic_83xx_fill_stats(adapter,& cmd,data,2,& ret);
  #line 3557 
  if (ret != 0) 
                #line 3558 
                netdev_err(netdev,(char *)"Error getting Rx stats\n");
  #line 3559 
  out: 
       #line 3559 
  ;
  #line 3560 
  qlcnic_free_mbx_args(& cmd);
  #line 3561 
  return;
}

#line 3566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_extend_md_capab(struct qlcnic_adapter *adapter)
{
  #line 3568 
  struct qlcnic_cmd_args cmd;
  #line 3569 
  int err;
  #line 3571 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,55U);
  #line 3573 
  if (err != 0) 
                #line 3574 
                return err;
  #line 3576 
  *(cmd.req.arg + 1U) = 3U;
  #line 3577 
  *(cmd.req.arg + 2U) = 13U;
  #line 3578 
  *(cmd.req.arg + 3U) = 13U;
  #line 3580 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 3581 
  if (err != 0) 
                #line 3582 
                _dev_err(& (adapter->pdev)->dev,(char *)"failed to issue extend iSCSI minidump capability\n");
  #line 3585 
  return err;
}

#line 3588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_reg_test(struct qlcnic_adapter *adapter)
{
  #line 3590 
  u32 major;
  #line 3590 
  u32 minor;
  #line 3590 
  u32 sub;
  #line 3592 
  major = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 11U));
  #line 3593 
  minor = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 12U));
  #line 3594 
  sub = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 13U));
  #line 3596 
  if (adapter->fw_version != ((major << 24) + (minor << 16)) + sub) {
    #line 3597 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s: Reg test failed\n",(char *)"qlcnic_83xx_reg_test");
    #line 3599 
    return 1;
  }
  #line 3601 
  return 0;
}

#line 3604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_regs_len(struct qlcnic_adapter *adapter)
{
  #line 3606 
  return 264;
}

#line 3612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_registers(struct qlcnic_adapter *adapter, u32 *regs_buff)
{
  #line 3614 
  int i;
  #line 3614 
  int j = 0;
  #line 3616 
  i = 3;
  #line 3616 
  while ((unsigned int)j <= 22U) {
    #line 3618 
    *(regs_buff + (unsigned long)i) = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + (unsigned long)j));
    #line 3617 
    i ++;
    #line 3617 
    j ++;
  }
  #line 3620 
  j = 0;
  #line 3620 
  while ((unsigned int)j <= 42U) {
    #line 3621 
    int tmp;
    #line 3621 
    tmp = i;
    #line 3621 
    i ++;
    #line 3621 
    *(regs_buff + (unsigned long)tmp) = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + (unsigned long)j));
    #line 3620 
    j ++;
  }
  #line 3622 
  return i;
}

#line 3625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_interrupt_test(struct net_device *netdev)
{
  #line 3629 
  struct qlcnic_cmd_args cmd;
  #line 3630 
  u8 val;
  #line 3632 
  u32 data;
  #line 3633 
  u16 intrpt_id;
  #line 3633 
  u16 id;
  #line 3634 
  int ret;
  #line 3627 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 3628 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3630 
  u8 drv_sds_rings = adapter->drv_sds_rings;
  #line 3631 
  u8 drv_tx_rings = adapter->drv_tx_rings;
  #line 3636 
  if ((int)test_bit(2L,& adapter->state) != 0) {
    #line 3637 
    netdev_info(netdev,(char *)"Device is resetting\n");
    #line 3638 
    return -16;
  }
  #line 3641 
  if (qlcnic_get_diag_lock(adapter) != 0) {
    #line 3642 
    netdev_info(netdev,(char *)"Device in diagnostics mode\n");
    #line 3643 
    return -16;
  }
  #line 3646 
  ret = qlcnic_83xx_diag_alloc_res(netdev,1,(unsigned char)((int)drv_sds_rings));
  #line 3648 
  if (ret != 0) 
                #line 3649 
                goto fail_diag_irq;
  #line 3651 
  ahw->diag_cnt = 0;
  #line 3652 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,17U);
  #line 3653 
  if (ret != 0) 
                #line 3654 
                goto fail_diag_irq;
  #line 3656 
  if ((adapter->flags & 4U) != 0U) 
                                   #line 3657 
                                   intrpt_id = (ahw->intr_tbl)->id;
  else {
    #line 3659 
    intrpt_id = (unsigned short)readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 10U));
  }
  #line 3661 
  *(cmd.req.arg + 1U) = 1U;
  #line 3662 
  *(cmd.req.arg + 2U) = (unsigned int)intrpt_id;
  #line 3663 
  *(cmd.req.arg + 3U) = 1U;
  #line 3665 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  #line 3666 
  data = *(cmd.rsp.arg + 2U);
  #line 3667 
  id = (unsigned short)data;
  #line 3668 
  val = (unsigned char)(data >> 16);
  #line 3669 
  if ((int)id != (int)intrpt_id) 
                                 #line 3670 
                                 _dev_info(& (adapter->pdev)->dev,(char *)"Interrupt generated: 0x%x, requested:0x%x\n",(int)id,(int)intrpt_id);
  #line 3673 
  if ((unsigned int)val != 0U) 
                               #line 3674 
                               _dev_err(& (adapter->pdev)->dev,(char *)"Interrupt test error: 0x%x\n",(int)val);
  #line 3676 
  if (ret != 0) 
                #line 3677 
                goto done;
  #line 3679 
  msleep(20U);
  #line 3680 
  ret = ahw->diag_cnt == 0;
  #line 3682 
  done: 
        #line 3682 
  ;
  #line 3683 
  qlcnic_free_mbx_args(& cmd);
  #line 3684 
  qlcnic_83xx_diag_free_res(netdev,(unsigned char)((int)drv_sds_rings));
  #line 3686 
  fail_diag_irq: 
                 #line 3686 
  ;
  #line 3687 
  adapter->drv_sds_rings = drv_sds_rings;
  #line 3688 
  adapter->drv_tx_rings = drv_tx_rings;
  #line 3689 
  qlcnic_release_diag_lock(adapter);
  #line 3690 
  return ret;
}

#line 3693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_pauseparam(struct qlcnic_adapter *adapter, struct ethtool_pauseparam *pause)
{
  #line 3698 
  u32 config;
  #line 3696 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3697 
  int status = 0;
  #line 3700 
  status = qlcnic_83xx_get_port_config(adapter);
  #line 3701 
  if (status != 0) {
    #line 3702 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Get Pause Config failed\n",(char *)"qlcnic_83xx_get_pauseparam");
    #line 3704 
    return;
  }
  #line 3706 
  config = ahw->port_config;
  #line 3707 
  if ((config & 32U) != 0U) 
    #line 3708 
    switch ((int)((unsigned short)(config >> 16))) {
      #line 3709 
      case 16: 
               #line 3709 
      ;
      #line 3710 
      pause->tx_pause = 1U;
      #line 3711 
      break;
      #line 3712 
      case 32: 
               #line 3712 
      ;
      #line 3713 
      pause->rx_pause = 1U;
      #line 3714 
      break;
      #line 3715 
      case 48: 
               #line 3715 
      ;
      #line 3716 
      default: 
               #line 3716 
      ;
      #line 3720 
      pause->tx_pause = 1U;
      #line 3721 
      pause->rx_pause = 1U;
    }
  #line 3725 
  if ((config & 32768U) != 0U) 
                               #line 3726 
                               pause->autoneg = 1U;
  #line 3727 
  return;
}

#line 3729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_pauseparam(struct qlcnic_adapter *adapter, struct ethtool_pauseparam *pause)
{
  #line 3734 
  u32 config;
  #line 3732 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3733 
  int status = 0;
  #line 3736 
  status = qlcnic_83xx_get_port_config(adapter);
  #line 3737 
  if (status != 0) {
    #line 3738 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Get Pause Config failed.\n",(char *)"qlcnic_83xx_set_pauseparam");
    #line 3740 
    return status;
  }
  #line 3742 
  config = ahw->port_config;
  #line 3744 
  if ((unsigned int)ahw->port_type == 1U) {
    #line 3745 
    if (pause->autoneg != 0U) 
                              #line 3746 
                              ahw->port_config |= 32768U;
    #line 3747 
    if (pause->autoneg == 0U) 
                              #line 3748 
                              ahw->port_config &= 4294934527U;
  }
  else 
    #line 3749 
    if ((unsigned int)ahw->port_type == 2U && pause->autoneg != 0U) 
                                                                    #line 3750 
                                                                    return -95;
  #line 3753 
  if ((config & 32U) == 0U) 
                            #line 3754 
                            ahw->port_config |= 32U;
  #line 3756 
  if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
                                                      #line 3757 
                                                      ahw->port_config |= 3145728U;
  else 
    #line 3758 
    if (pause->rx_pause != 0U && pause->tx_pause == 0U) {
      #line 3759 
      ahw->port_config &= 4293918719U;
      #line 3760 
      ahw->port_config |= 2097152U;
    }
    else 
      #line 3761 
      if (pause->tx_pause != 0U && pause->rx_pause == 0U) {
        #line 3762 
        ahw->port_config &= 4292870143U;
        #line 3763 
        ahw->port_config |= 1048576U;
      }
      else 
        #line 3764 
        if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
                                                            #line 3765 
                                                            ahw->port_config &= 4291821535U;
  #line 3768 
  status = qlcnic_83xx_set_port_config(adapter);
  #line 3769 
  if (status != 0) {
    #line 3770 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Set Pause Config failed.\n",(char *)"qlcnic_83xx_set_pauseparam");
    #line 3772 
    ahw->port_config = config;
  }
  #line 3774 
  return status;
}

#line 3777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_read_flash_status_reg(struct qlcnic_adapter *adapter)
{
  #line 3779 
  int ret;
  #line 3780 
  u32 temp;
  #line 3779 
  int err = 0;
  #line 3782 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,16580613U);
  #line 3784 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,63U);
  #line 3786 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  #line 3787 
  if (ret != 0) 
                #line 3788 
                return -5;
  #line 3790 
  temp = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,1108410392UL,& err);
  #line 3791 
  if (err == -5) 
                 #line 3792 
                 return err;
  #line 3794 
  return (int)temp & 255;
}

#line 3797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_test(struct qlcnic_adapter *adapter)
{
  #line 3799 
  int status;
  #line 3801 
  status = qlcnic_83xx_read_flash_status_reg(adapter);
  #line 3802 
  if (status == -5) {
    #line 3803 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s: EEPROM test failed.\n",(char *)"qlcnic_83xx_flash_test");
    #line 3805 
    return 1;
  }
  #line 3807 
  return 0;
}

#line 3810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_shutdown(struct pci_dev *pdev)
{
  #line 3814 
  int retval;
  #line 3812 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 3813 
  struct net_device *netdev = adapter->netdev;
  #line 3816 
  netif_device_detach(netdev);
  #line 3817 
  qlcnic_cancel_idc_work(adapter);
  #line 3819 
  if ((int)netif_running(netdev) != 0) 
                                       #line 3820 
                                       qlcnic_down(adapter,netdev);
  #line 3822 
  qlcnic_83xx_disable_mbx_intr(adapter);
  #line 3823 
  cancel_delayed_work_sync(& adapter->idc_aen_work);
  #line 3825 
  retval = pci_save_state(pdev);
  #line 3826 
  if (retval != 0) 
                   #line 3827 
                   return retval;
  #line 3829 
  return 0;
}

#line 3832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_resume(struct qlcnic_adapter *adapter)
{
  #line 3834 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3835 
  struct qlc_83xx_idc *idc = & ahw->idc;
  #line 3836 
  int err = 0;
  #line 3838 
  err = qlcnic_83xx_idc_init(adapter);
  #line 3839 
  if (err != 0) 
                #line 3840 
                return err;
  #line 3842 
  if ((unsigned int)ahw->nic_mode == 255U) 
    #line 3843 
    if ((unsigned int)ahw->op_mode == 0U) 
                                          #line 3844 
                                          qlcnic_83xx_set_vnic_opmode(adapter);
    else {
      #line 3846 
      err = qlcnic_83xx_check_vnic_state(adapter);
      #line 3847 
      if (err != 0) 
                    #line 3848 
                    return err;
    }
  #line 3852 
  err = qlcnic_83xx_idc_reattach_driver(adapter);
  #line 3853 
  if (err != 0) 
                #line 3854 
                return err;
  #line 3856 
  qlcnic_schedule_work(adapter,& qlcnic_83xx_idc_poll_dev_state,(int)idc->delay);
  #line 3858 
  return err;
}

#line 3861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_reinit_mbx_work(struct qlcnic_mailbox *mbx)
{
  #line 3863 
  reinit_completion(& mbx->completion);
  #line 3864 
  cif_set_bit_0(2L,& mbx->status);
  #line 3865 
  return;
}

#line 3867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_free_mailbox(struct qlcnic_mailbox *mbx)
{
  #line 3869 
  if (mbx == (struct qlcnic_mailbox *)0) 
                                         #line 3870 
                                         return;
  #line 3872 
  destroy_workqueue(mbx->work_q);
  #line 3873 
  kfree((void *)mbx);
  #line 3874 
  return;
}

#line 3877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_notify_cmd_completion(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 3880 
  atomic_set(& cmd->rsp_status,1);
  #line 3882 
  if (cmd->type == 1U) {
    #line 3883 
    qlcnic_free_mbx_args(cmd);
    #line 3884 
    kfree((void *)cmd);
    #line 3885 
    return;
  }
  #line 3887 
  complete(& cmd->completion);
  #line 3888 
  return;
}

#line 3890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_flush_mbx_queue(struct qlcnic_adapter *adapter)
{
  #line 3892 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  #line 3893 
  struct list_head *head = & mbx->cmd_q;
  #line 3894 
  struct qlcnic_cmd_args *cmd = (struct qlcnic_cmd_args *)0;
  #line 3896 
  cif_spin_lock_bh_queue_lock_of_qlcnic_mailbox(& mbx->queue_lock);
  #line 3898 
  while (1) {
    #line 3898 
    if (! (list_empty(head) == 0)) 
                                   #line 3898 
                                   break;
    {
      #line 3899 
      void *__mptr;
      #line 3899 
      __mptr = (void *)head->next;
      #line 3899 
      cmd = ((struct qlcnic_cmd_args *)(__mptr + 18446744073709551520U));
      #line 3900 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s: Mailbox command 0x%x\n",(char *)"qlcnic_83xx_flush_mbx_queue",cmd->cmd_op);
      #line 3902 
      list_del(& cmd->list);
      #line 3903 
      (mbx->num_cmds) --;
      #line 3904 
      qlcnic_83xx_notify_cmd_completion(adapter,cmd);
    }
  }
  #line 3907 
  cif_spin_unlock_bh_queue_lock_of_qlcnic_mailbox(& mbx->queue_lock);
  #line 3908 
  return;
}

#line 3910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_check_mbx_status(struct qlcnic_adapter *adapter)
{
  #line 3914 
  u32 host_mbx_ctrl;
  #line 3912 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3913 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  #line 3916 
  if (! test_bit(2L,& mbx->status)) 
                                    #line 3917 
                                    return -16;
  #line 3919 
  host_mbx_ctrl = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 3U));
  #line 3920 
  if (host_mbx_ctrl != 0U) {
    #line 3921 
    cif_clear_bit_0(2L,& mbx->status);
    #line 3922 
    ahw->idc.collect_dump = 1;
    #line 3923 
    return -5;
  }
  #line 3926 
  return 0;
}

#line 3929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_signal_mbx_cmd(struct qlcnic_adapter *adapter, u8 issue_cmd)
{
  #line 3932 
  if ((unsigned int)issue_cmd != 0U) 
                                     #line 3933 
                                     writel(1U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 3U)); else 
                                                                    #line 3935 
                                                                    writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 4U));
  #line 3936 
  return;
}

#line 3938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_dequeue_mbx_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 3941 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  #line 3943 
  cif_spin_lock_bh_queue_lock_of_qlcnic_mailbox(& mbx->queue_lock);
  #line 3945 
  list_del(& cmd->list);
  #line 3946 
  (mbx->num_cmds) --;
  #line 3948 
  cif_spin_unlock_bh_queue_lock_of_qlcnic_mailbox(& mbx->queue_lock);
  #line 3950 
  qlcnic_83xx_notify_cmd_completion(adapter,cmd);
  #line 3951 
  return;
}

#line 3953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_encode_mbx_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 3956 
  u32 mbx_cmd;
  #line 3956 
  u32 fw_hal_version;
  #line 3956 
  u32 hdr_size;
  #line 3956 
  u32 total_size;
  #line 3956 
  u32 tmp;
  #line 3958 
  int i;
  #line 3958 
  int j;
  #line 3957 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3960 
  if (cmd->op_type != 1U) {
    #line 3961 
    mbx_cmd = *(cmd->req.arg);
    #line 3962 
    writel(mbx_cmd,ahw->pci_base0);
    #line 3963 
    i = 1;
    #line 3963 
    while (cmd->req.num > (unsigned int)i) {
      #line 3964 
      writel(*(cmd->req.arg + (unsigned long)i),ahw->pci_base0 + (unsigned long)(i * 4));
      #line 3963 
      i ++;
    }
  }
  else {
    #line 3966 
    fw_hal_version = ahw->fw_hal_version;
    #line 3967 
    hdr_size = 4U;
    #line 3968 
    total_size = (unsigned int)cmd->pay_size + hdr_size;
    #line 3969 
    tmp = (total_size << 16) | 49U;
    #line 3970 
    mbx_cmd = (fw_hal_version << 29) | tmp;
    #line 3971 
    writel(mbx_cmd,ahw->pci_base0);
    #line 3974 
    mbx_cmd = 17U;
    #line 3976 
    if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                  #line 3977 
                                                  mbx_cmd = (unsigned int)((int)cmd->func_num << 5) | mbx_cmd;
    #line 3979 
    writel(mbx_cmd,ahw->pci_base0 + 4U);
    #line 3981 
    i = 2;
    #line 3981 
    j = 0;
    #line 3981 
    while ((unsigned int)j < hdr_size) {
      #line 3982 
      u32 *tmp_1;
      #line 3982 
      ;
      #line 3982 
      tmp_1 = cmd->hdr;
      #line 3982 
      (cmd->hdr) ++;
      #line 3982 
      ;
      #line 3982 
      writel(*tmp_1,ahw->pci_base0 + (unsigned long)(i * 4));
      #line 3981 
      i ++;
      #line 3981 
      j ++;
    }
    #line 3983 
    j = 0;
    #line 3983 
    while (cmd->pay_size > j) {
      #line 3984 
      u32 *tmp_2;
      #line 3984 
      ;
      #line 3984 
      tmp_2 = cmd->pay;
      #line 3984 
      (cmd->pay) ++;
      #line 3984 
      ;
      #line 3984 
      writel(*tmp_2,ahw->pci_base0 + (unsigned long)(i * 4));
      #line 3983 
      j ++;
      #line 3983 
      i ++;
    }
  }
  #line 3986 
  return;
}

#line 3988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_detach_mailbox_work(struct qlcnic_adapter *adapter)
{
  #line 3990 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  #line 3992 
  if (mbx == (struct qlcnic_mailbox *)0) 
                                         #line 3993 
                                         return;
  #line 3995 
  cif_clear_bit_0(2L,& mbx->status);
  #line 3996 
  complete(& mbx->completion);
  #line 3997 
  cancel_work_sync(& mbx->work);
  #line 3998 
  flush_workqueue(mbx->work_q);
  #line 3999 
  qlcnic_83xx_flush_mbx_queue(adapter);
  #line 4000 
  return;
}

#line 4002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_enqueue_mbx_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd, unsigned long *timeout)
{
  #line 4006 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  #line 4008 
  if ((int)test_bit(2L,& mbx->status) != 0) {
    #line 4009 
    atomic_set(& cmd->rsp_status,0);
    #line 4010 
    __init_completion(& cmd->completion);
    #line 4011 
    cmd->rsp_opcode = 3U;
    #line 4013 
    cif_spin_lock_bh_queue_lock_of_qlcnic_mailbox(& mbx->queue_lock);
    #line 4015 
    list_add_tail(& cmd->list,& mbx->cmd_q);
    #line 4016 
    (mbx->num_cmds) ++;
    #line 4017 
    cmd->total_cmds = mbx->num_cmds;
    #line 4018 
    *timeout = (unsigned long)(cmd->total_cmds * 1250U);
    #line 4019 
    cif_queue_work_0(mbx->work_q,& mbx->work);
    #line 4021 
    cif_spin_unlock_bh_queue_lock_of_qlcnic_mailbox(& mbx->queue_lock);
    #line 4023 
    return 0;
  }
  #line 4026 
  return -16;
}

#line 4029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_check_mac_rcode(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 4032 
  u8 mac_cmd_rcode;
  #line 4033 
  u32 fw_data;
  #line 4035 
  if (cmd->cmd_op == 69U) {
    #line 4036 
    fw_data = readl((adapter->ahw)->pci_base0 + 2056U);
    #line 4037 
    mac_cmd_rcode = (unsigned char)fw_data;
    #line 4038 
    if (((unsigned int)mac_cmd_rcode == 5U || (unsigned int)mac_cmd_rcode == 12U) || (unsigned int)mac_cmd_rcode == 13U) {
      #line 4041 
      cmd->rsp_opcode = 0U;
      #line 4042 
      return 0;
    }
  }
  #line 4046 
  return -22;
}

#line 4049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_decode_mbx_rsp(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 4054 
  u8 mbx_err_code;
  #line 4055 
  u32 fw_data;
  #line 4052 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 4053 
  struct device *dev = & (adapter->pdev)->dev;
  #line 4057 
  fw_data = readl(ahw->pci_base0 + 2048U);
  #line 4058 
  mbx_err_code = (unsigned char)(fw_data >> 25);
  #line 4059 
  qlcnic_83xx_get_mbx_data(adapter,cmd);
  #line 4061 
  switch ((int)mbx_err_code) {
    #line 4062 
    case 1: 
            #line 4062 
    ;
    #line 4063 
    case 26: 
             #line 4063 
    ;
    #line 4064 
    cmd->rsp_opcode = 0U;
    #line 4065 
    break;
    #line 4066 
    default: 
             #line 4066 
    ;
    #line 4067 
    if (qlcnic_83xx_check_mac_rcode(adapter,cmd) == 0) 
                                                       #line 4068 
                                                       break;
    #line 4070 
    _dev_err(dev,(char *)"%s: Mailbox command failed, opcode=0x%x, cmd_type=0x%x, func=0x%x, op_mode=0x%x, error=0x%x\n",(char *)"qlcnic_83xx_decode_mbx_rsp",cmd->cmd_op,cmd->type,(int)ahw->pci_func,(int)ahw->op_mode,(int)mbx_err_code);
    #line 4073 
    cmd->rsp_opcode = 2U;
    #line 4074 
    qlcnic_dump_mbx(adapter,cmd);
  }
  #line 4077 
  return;
}

#line 4080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_dump_mailbox_registers(struct qlcnic_adapter *adapter)
{
  #line 4083 
  u32 offset;
  #line 4082 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 4085 
  offset = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 9U));
  #line 4086 
  ;
  #line 4086 
  _dev_info(& (adapter->pdev)->dev,(char *)"Mbx interrupt mask=0x%x, Mbx interrupt enable=0x%x, Host mbx control=0x%x, Fw mbx control=0x%x",readl(ahw->pci_base0 + (unsigned long)offset),readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 8U)),readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 3U)),readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 4U)));
  #line 4087 
  return;
}

#line 4093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_mailbox_worker(struct work_struct *work)
{
  #line 4095 
  void *__mptr;
  #line 4101 
  struct qlcnic_hardware_context *ahw;
  #line 4103 
  unsigned long flags;
  #line 4095 
  __mptr = (void *)work;
  #line 4095 
  struct qlcnic_mailbox *mbx = ((struct qlcnic_mailbox *)(__mptr + 18446744073709551592U));
  #line 4097 
  struct qlcnic_adapter *adapter = mbx->adapter;
  #line 4098 
  struct qlcnic_mbx_ops *mbx_ops = mbx->ops;
  #line 4099 
  struct device *dev = & (adapter->pdev)->dev;
  #line 4100 
  struct list_head *head = & mbx->cmd_q;
  #line 4102 
  struct qlcnic_cmd_args *cmd = (struct qlcnic_cmd_args *)0;
  #line 4105 
  ahw = adapter->ahw;
  #line 4107 
  while (1) {
    {
      #line 4123 
      void *__mptr_0;
      #line 4108 
      if (qlcnic_83xx_check_mbx_status(adapter) != 0) {
        #line 4109 
        qlcnic_83xx_flush_mbx_queue(adapter);
        #line 4110 
        return;
      }
      #line 4113 
      cif___ldv_spin_lock_aen_lock_of_qlcnic_mailbox(& mbx->aen_lock);
      #line 4114 
      mbx->rsp_status = 0U;
      #line 4115 
      cif_spin_unlock_irqrestore_aen_lock_of_qlcnic_mailbox(& mbx->aen_lock,flags);
      #line 4117 
      cif_spin_lock_bh_queue_lock_of_qlcnic_mailbox(& mbx->queue_lock);
      #line 4119 
      if (list_empty(head) != 0) {
        #line 4120 
        cif_spin_unlock_bh_queue_lock_of_qlcnic_mailbox(& mbx->queue_lock);
        #line 4121 
        return;
      }
      #line 4123 
      __mptr_0 = (void *)head->next;
      #line 4123 
      cmd = ((struct qlcnic_cmd_args *)(__mptr_0 + 18446744073709551520U));
      #line 4125 
      cif_spin_unlock_bh_queue_lock_of_qlcnic_mailbox(& mbx->queue_lock);
      #line 4127 
      (*(mbx_ops->encode_cmd))(adapter,cmd);
      #line 4128 
      (*(mbx_ops->nofity_fw))(adapter,(unsigned char)1);
      #line 4130 
      if (wait_for_completion_timeout(& mbx->completion,1250UL) != 0UL) {
        #line 4132 
        (*(mbx_ops->decode_resp))(adapter,cmd);
        #line 4133 
        (*(mbx_ops->nofity_fw))(adapter,(unsigned char)0);
      }
      else {
        #line 4135 
        _dev_err(dev,(char *)"%s: Mailbox command timeout, opcode=0x%x, cmd_type=0x%x, func=0x%x, op_mode=0x%x\n",(char *)"qlcnic_83xx_mailbox_worker",cmd->cmd_op,cmd->type,(int)ahw->pci_func,(int)ahw->op_mode);
        #line 4138 
        cif_clear_bit_0(2L,& mbx->status);
        #line 4139 
        qlcnic_dump_mailbox_registers(adapter);
        #line 4140 
        qlcnic_83xx_get_mbx_data(adapter,cmd);
        #line 4141 
        qlcnic_dump_mbx(adapter,cmd);
        #line 4142 
        qlcnic_83xx_idc_request_reset(adapter,3735944941U);
        #line 4144 
        cmd->rsp_opcode = 17U;
      }
      #line 4146 
      (*(mbx_ops->dequeue_cmd))(adapter,cmd);
    }
  }
}

#line 4150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static struct qlcnic_mbx_ops qlcnic_83xx_mbx_ops = {.enqueue_cmd = & qlcnic_83xx_enqueue_mbx_cmd, .dequeue_cmd = & qlcnic_83xx_dequeue_mbx_cmd, .decode_resp = & qlcnic_83xx_decode_mbx_rsp, .encode_cmd = & qlcnic_83xx_encode_mbx_cmd, .nofity_fw = & qlcnic_83xx_signal_mbx_cmd};
#line 4158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_init_mailbox_work(struct qlcnic_adapter *adapter)
{
  #line 4161 
  struct qlcnic_mailbox *mbx;
  #line 4160 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 4163 
  ahw->mailbox = (struct qlcnic_mailbox *)kzalloc_0(376UL,3264U);
  #line 4164 
  if (ahw->mailbox == (struct qlcnic_mailbox *)0) 
                                                  #line 4165 
                                                  return -12;
  #line 4167 
  mbx = ahw->mailbox;
  #line 4168 
  mbx->ops = & qlcnic_83xx_mbx_ops;
  #line 4169 
  mbx->adapter = adapter;
  #line 4171 
  spinlock_check(& mbx->queue_lock);
  {
    #line 4171 
    struct lock_class_key __key;
    #line 4171 
    __raw_spin_lock_init(& mbx->queue_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&mbx->queue_lock)->rlock",& __key);
  }
  #line 4172 
  spinlock_check(& mbx->aen_lock);
  {
    #line 4172 
    struct lock_class_key __key_0;
    #line 4172 
    __raw_spin_lock_init(& mbx->aen_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&mbx->aen_lock)->rlock",& __key_0);
  }
  #line 4173 
  INIT_LIST_HEAD_0(& mbx->cmd_q);
  #line 4174 
  __init_completion(& mbx->completion);
  #line 4176 
  mbx->work_q = alloc_workqueue((char *)"%s",917514U,1,(char *)"qlcnic_mailbox");
  #line 4177 
  if (mbx->work_q == (struct workqueue_struct *)0) {
    #line 4178 
    kfree((void *)mbx);
    #line 4179 
    return -12;
  }
  {
    #line 4182 
    struct lock_class_key __key_1;
    #line 4182 
    __init_work(& mbx->work,0);
    #line 4182 
    atomic_long_t __constr_expr_42 = {.counter = 137438953408LL};
    #line 4182 
    mbx->work.data = __constr_expr_42;
    #line 4182 
    lockdep_init_map(& mbx->work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 4182 
    INIT_LIST_HEAD_0(& mbx->work.entry);
    #line 4182 
    mbx->work.func = & qlcnic_83xx_mailbox_worker;
  }
  #line 4183 
  cif_set_bit_0(2L,& mbx->status);
  #line 4184 
  return 0;
}

#line 4187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static pci_ers_result_t qlcnic_83xx_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 4190 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 4192 
  if (state == 3U) 
                   #line 4193 
                   return 4U;
  #line 4195 
  if (state == 1U) 
                   #line 4196 
                   return 5U;
  #line 4198 
  cif_set_bit_0(5L,& adapter->state);
  #line 4199 
  cif_set_bit_0(2L,& adapter->state);
  #line 4201 
  qlcnic_83xx_aer_stop_poll_work(adapter);
  #line 4203 
  pci_save_state(pdev);
  #line 4204 
  pci_disable_device(pdev);
  #line 4206 
  return 3U;
}

#line 4209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static pci_ers_result_t qlcnic_83xx_io_slot_reset(struct pci_dev *pdev)
{
  #line 4211 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 4212 
  int err = 0;
  #line 4214 
  pdev->error_state = 1U;
  #line 4215 
  err = pci_enable_device(pdev);
  #line 4216 
  if (err != 0) 
                #line 4217 
                goto disconnect;
  #line 4219 
  pci_set_power_state(pdev,0);
  #line 4220 
  pci_set_master(pdev);
  #line 4221 
  pci_restore_state(pdev);
  #line 4223 
  err = qlcnic_83xx_aer_reset(adapter);
  #line 4224 
  if (err == 0) 
                #line 4225 
                return 5U;
  #line 4226 
  disconnect: 
              #line 4226 
  ;
  #line 4227 
  cif_clear_bit_0(5L,& adapter->state);
  #line 4228 
  cif_clear_bit_0(2L,& adapter->state);
  #line 4229 
  return 4U;
}

#line 4232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_io_resume(struct pci_dev *pdev)
{
  #line 4234 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 4236 
  if ((int)test_and_set_bit(5L,& adapter->state) != 0) 
                                                       #line 4237 
                                                       qlcnic_83xx_aer_start_poll_work(adapter);
  #line 4238 
  return;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
#line 97 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 100 
#line 100 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 103 
#line 103 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 309 
  return emg_queue_work(wq,work);
}

#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 317 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 353  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 356 
  return ldv_kcalloc(n,size,flags);
}

#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 377 
  return ldv_kzalloc(size,flags);
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 811 
  return ldv_vzalloc(size);
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif___ldv_spin_lock_aen_lock_of_qlcnic_mailbox(spinlock_t *lock)
{
  #line 818 
  ldv_spin_model_lock((char *)"aen_lock_of_qlcnic_mailbox");
  #line 820 
  __ldv_spin_lock(lock);
  #line 821 
  return;
}

#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_spin_unlock_irqrestore_aen_lock_of_qlcnic_mailbox(spinlock_t *lock, unsigned long flags)
{
  #line 827 
  ldv_spin_model_unlock((char *)"aen_lock_of_qlcnic_mailbox");
  #line 829 
  spin_unlock_irqrestore_0(lock,flags);
  #line 830 
  return;
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 837 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 845 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 849  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_mutex_lock_mem_lock_of_qlcnic_hardware_context(struct mutex *lock)
{
  #line 852 
  ldv_mutex_model_lock(lock,(char *)"mem_lock_of_qlcnic_hardware_context");
  #line 853 
  return;
}

#line 856  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context(struct mutex *lock)
{
  #line 859 
  ldv_mutex_model_unlock(lock,(char *)"mem_lock_of_qlcnic_hardware_context");
  #line 860 
  return;
}

#line 863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_spin_lock_bh_queue_lock_of_qlcnic_mailbox(spinlock_t *lock)
{
  #line 866 
  ldv_spin_model_lock((char *)"queue_lock_of_qlcnic_mailbox");
  #line 868 
  spin_lock_bh_0(lock);
  #line 869 
  return;
}

#line 872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_hw.i.aux"
static void cif_spin_unlock_bh_queue_lock_of_qlcnic_mailbox(spinlock_t *lock)
{
  #line 875 
  ldv_spin_model_unlock((char *)"queue_lock_of_qlcnic_mailbox");
  #line 877 
  spin_unlock_bh_0(lock);
  #line 878 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_1957 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_0(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_1959 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_1961 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_splice(struct list_head *list, struct list_head *prev, struct list_head *next)
{
  #line 405 
  struct list_head *first = list->next;
  #line 406 
  struct list_head *last = list->prev;
  #line 408 
  first->prev = prev;
  #line 409 
  prev->next = first;
  #line 411 
  last->next = next;
  #line 412 
  next->prev = last;
  #line 413 
  return;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_splice_init(struct list_head *list, struct list_head *head)
{
  #line 449 
  if (list_empty_0(list) == 0) {
    #line 450 
    __list_splice(list,head,head->next);
    #line 451 
    INIT_LIST_HEAD_1(list);
  }
  #line 453 
  return;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_lock_of_qlcnic_trans_list(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_vlan_list_lock_of_qlcnic_vf_info(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_queue_lock_of_qlcnic_back_channel(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 640  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 894  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_bh_vlan_list_lock_of_qlcnic_vf_info_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 849  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_lock_of_qlcnic_trans_list(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 867  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_vlan_list_lock_of_qlcnic_vf_info(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 885  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_queue_lock_of_qlcnic_back_channel(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 903  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_bh_vlan_list_lock_of_qlcnic_vf_info_0(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_qlcnic_trans_list_0(spinlock_t *lock, unsigned long flags);
#line 26 
#line 826 
static void cif_mutex_lock_send_cmd_lock_of_qlcnic_vf_info(struct mutex *lock);
#line 35 
#line 808 
static void cif___ldv_spin_lock_lock_of_qlcnic_trans_list_0(spinlock_t *lock);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_mutex_unlock_send_cmd_lock_of_qlcnic_vf_info(struct mutex *lock);
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static bool cif_queue_work_1(struct workqueue_struct *wq, struct work_struct *work);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 473  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 494  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_use_msi;
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_use_msi_x;
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1581 
void qlcnic_prune_lb_filters(struct qlcnic_adapter *adapter);
#line 1620 
#line 1620 
void qlcnic_set_multi(struct net_device *netdev);
#line 1621 
#line 1621 
void qlcnic_flush_mcast_mac(struct qlcnic_adapter *adapter);
#line 1622 
#line 1622 
int qlcnic_nic_add_mac(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan, enum qlcnic_mac_type mac_type);
#line 1646 
#line 1646 
void qlcnic_set_tx_ring_count(struct qlcnic_adapter *adapter, u8 tx_cnt);
#line 1647 
#line 1647 
void qlcnic_set_sds_ring_count(struct qlcnic_adapter *adapter, u8 rx_cnt);
#line 1690 
#line 1690 
int qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev);
#line 1693 
#line 1693 
void qlcnic_teardown_intr(struct qlcnic_adapter *adapter);
#line 1696 
#line 1696 
void qlcnic_restore_indev_addr(struct net_device *netdev, unsigned long event);
#line 1704 
#line 1704 
int qlcnic_read_mac_addr(struct qlcnic_adapter *adapter);
#line 1705 
#line 1705 
int qlcnic_setup_netdev(struct qlcnic_adapter *adapter, struct net_device *netdev, int pci_using_dac);
#line 1708 
#line 1541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_vf_set_multi(struct net_device *netdev);
#line 1895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_setup_intr(struct qlcnic_adapter *adapter)
{
  #line 1897 
  return (*(((adapter->ahw)->hw_ops)->setup_intr))(adapter);
}

#line 2061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode)
{
  #line 2064 
  return (*(((adapter->ahw)->hw_ops)->config_promisc_mode))(adapter,mode);
}

#line 2079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_free_mac_list(struct qlcnic_adapter *adapter)
{
  #line 2081 
  (*(((adapter->ahw)->hw_ops)->free_mac_list))(adapter);
  #line 2082 
  return;
}

#line 2376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_83xx_vf_check(struct qlcnic_adapter *adapter)
{
  #line 2378 
  unsigned short device = (adapter->pdev)->device;
  #line 2381 
  return (_Bool)(((unsigned int)device == 33840U || (unsigned int)device == 35888U) != 0);
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_cleanup(struct qlcnic_adapter *adapter);
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_vf_register_map(struct qlcnic_hardware_context *ahw);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_vf_init(struct qlcnic_adapter *adapter, int pci_using_dac);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_cleanup_async_list(struct qlcnic_back_channel *bc);
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
#line 2048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_cfg_vf_guest_vlan(struct qlcnic_adapter *adapter, u16 vid, u8 enable);
#line 32 
#line 1596 
static void qlcnic_sriov_handle_async_issue_cmd(struct work_struct *work);
#line 33 
#line 2097 
static void qlcnic_sriov_vf_free_mac_list(struct qlcnic_adapter *adapter);
#line 34 
#line 716 
static int qlcnic_sriov_alloc_bc_mbx_args(struct qlcnic_cmd_args *mbx, u32 type);
#line 35 
#line 1899 
static void qlcnic_sriov_vf_poll_dev_state(struct work_struct *work);
#line 36 
#line 1937 
static void qlcnic_sriov_vf_cancel_fw_work(struct qlcnic_adapter *adapter);
#line 37 
#line 813 
static void qlcnic_sriov_cleanup_transaction(struct qlcnic_bc_trans *trans);
#line 38 
#line 1455 
static int qlcnic_sriov_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);
#line 40 
#line 1464 
static int qlcnic_sriov_channel_cfg_cmd(struct qlcnic_adapter *adapter, u8 cmd_op);
#line 41 
#line 1047 
static void qlcnic_sriov_process_bc_cmd(struct work_struct *work);
#line 42 
#line 2112 
static int qlcnic_sriov_vf_shutdown(struct pci_dev *pdev);
#line 43 
#line 2136 
static int qlcnic_sriov_vf_resume(struct qlcnic_adapter *adapter);
#line 44 
#line 1658 
static int qlcnic_sriov_async_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static struct qlcnic_hardware_ops qlcnic_sriov_vf_hw_ops = {.read_crb = & qlcnic_83xx_read_crb, .write_crb = & qlcnic_83xx_write_crb, .read_reg = & qlcnic_83xx_rd_reg_indirect, .write_reg = & qlcnic_83xx_wrt_reg_indirect, .get_mac_address = & qlcnic_83xx_get_mac_address, .setup_intr = & qlcnic_83xx_setup_intr, .alloc_mbx_args = & qlcnic_83xx_alloc_mbx_args, .mbx_cmd = & qlcnic_sriov_issue_cmd, .get_func_no = & qlcnic_83xx_get_func_no, .api_lock = & qlcnic_83xx_cam_lock, .api_unlock = & qlcnic_83xx_cam_unlock, .process_lb_rcv_ring_diag = & qlcnic_83xx_process_rcv_ring_diag, .create_rx_ctx = & qlcnic_83xx_create_rx_ctx, .create_tx_ctx = & qlcnic_83xx_create_tx_ctx, .del_rx_ctx = & qlcnic_83xx_del_rx_ctx, .del_tx_ctx = & qlcnic_83xx_del_tx_ctx, .setup_link_event = & qlcnic_83xx_setup_link_event, .get_nic_info = & qlcnic_83xx_get_nic_info, .get_pci_info = & qlcnic_83xx_get_pci_info, .set_nic_info = & qlcnic_83xx_set_nic_info, .change_macvlan = & qlcnic_83xx_sre_macaddr_change, .napi_enable = & qlcnic_83xx_napi_enable, .napi_disable = & qlcnic_83xx_napi_disable, .config_intr_coal = & qlcnic_83xx_config_intr_coal, .config_rss = & qlcnic_83xx_config_rss, .config_hw_lro = & qlcnic_83xx_config_hw_lro, .config_promisc_mode = & qlcnic_83xx_nic_set_promisc, .change_l2_filter = & qlcnic_83xx_change_l2_filter, .get_board_info = & qlcnic_83xx_get_port_info, .free_mac_list = & qlcnic_sriov_vf_free_mac_list, .enable_sds_intr = & qlcnic_83xx_enable_sds_intr, .disable_sds_intr = & qlcnic_83xx_disable_sds_intr, .encap_rx_offload = & qlcnic_83xx_encap_rx_offload, .encap_tx_offload = & qlcnic_83xx_encap_tx_offload};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static struct qlcnic_nic_template qlcnic_sriov_vf_ops = {.config_bridged_mode = & qlcnic_config_bridged_mode, .config_led = & qlcnic_config_led, .cancel_idc_work = & qlcnic_sriov_vf_cancel_fw_work, .napi_add = & qlcnic_83xx_napi_add, .napi_del = & qlcnic_83xx_napi_del, .config_ipaddr = & qlcnic_83xx_config_ipaddr, .clear_legacy_intr = & qlcnic_83xx_clear_legacy_intr, .shutdown = & qlcnic_sriov_vf_shutdown, .resume = & qlcnic_sriov_vf_resume};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static struct qlcnic_mailbox_metadata qlcnic_sriov_bc_mbx_tbl[4U] = {{.in_args = 2U, .out_args = 2U}, {.cmd = 1U, .in_args = 2U, .out_args = 2U}, {.cmd = 2U, .in_args = 3U, .out_args = 14U}, {.cmd = 3U, .in_args = 2U, .out_args = 2U}};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static bool qlcnic_sriov_bc_msg_check(u32 val)
{
  #line 105 
  return (_Bool)(((int)val & 1) != 0);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static bool qlcnic_sriov_channel_free_check(u32 val)
{
  #line 110 
  return (_Bool)(((int)(val >> 1) & 1) != 0);
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static bool qlcnic_sriov_flr_check(u32 val)
{
  #line 115 
  return (_Bool)(((int)(val >> 2) & 1) != 0);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static u8 qlcnic_sriov_target_func_id(u32 val)
{
  #line 120 
  return (unsigned char)(val >> 4);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_virtid_fn(struct qlcnic_adapter *adapter, int vf_id)
{
  #line 126 
  int pos;
  #line 127 
  u16 stride;
  #line 127 
  u16 offset;
  #line 125 
  struct pci_dev *dev = adapter->pdev;
  #line 129 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 130 
                                                return 0;
  #line 132 
  pos = pci_find_ext_capability(dev,16);
  #line 133 
  if (pos == 0) 
                #line 134 
                return 0;
  #line 135 
  pci_read_config_word(dev,pos + 20,& offset);
  #line 136 
  pci_read_config_word(dev,pos + 22,& stride);
  #line 138 
  return (int)((dev->devfn + (unsigned int)offset) + (unsigned int)((int)stride * vf_id)) & 255;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_init(struct qlcnic_adapter *adapter, int num_vfs)
{
  #line 143 
  struct qlcnic_sriov *sriov;
  #line 144 
  struct qlcnic_back_channel *bc;
  #line 145 
  struct workqueue_struct *wq;
  #line 146 
  struct qlcnic_vport *vp;
  #line 147 
  struct qlcnic_vf_info *vf;
  #line 148 
  int err;
  #line 148 
  int i;
  #line 150 
  if (! qlcnic_sriov_enable_check(adapter)) 
                                            #line 151 
                                            return -5;
  #line 153 
  sriov = (struct qlcnic_sriov *)kzalloc_1(264UL,3264U);
  #line 154 
  if (sriov == (struct qlcnic_sriov *)0) 
                                         #line 155 
                                         return -12;
  #line 157 
  (adapter->ahw)->sriov = sriov;
  #line 158 
  sriov->num_vfs = (unsigned char)num_vfs;
  #line 159 
  bc = & sriov->bc;
  #line 160 
  sriov->vf_info = (struct qlcnic_vf_info *)kcalloc_0((unsigned long)num_vfs,744UL,3264U);
  #line 162 
  if (sriov->vf_info == (struct qlcnic_vf_info *)0) {
    #line 163 
    err = -12;
    #line 164 
    goto qlcnic_free_sriov;
  }
  #line 167 
  wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"bc-trans");
  #line 168 
  if (wq == (struct workqueue_struct *)0) {
    #line 169 
    err = -12;
    #line 170 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot create bc-trans workqueue\n");
    #line 172 
    goto qlcnic_free_vf_info;
  }
  #line 175 
  bc->bc_trans_wq = wq;
  #line 177 
  wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"async");
  #line 178 
  if (wq == (struct workqueue_struct *)0) {
    #line 179 
    err = -12;
    #line 180 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot create async workqueue\n");
    #line 181 
    goto qlcnic_destroy_trans_wq;
  }
  #line 184 
  bc->bc_async_wq = wq;
  #line 185 
  INIT_LIST_HEAD_1(& bc->async_cmd_list);
  {
    #line 186 
    struct lock_class_key __key;
    #line 186 
    __init_work(& bc->vf_async_work,0);
    #line 186 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 186 
    bc->vf_async_work.data = __constr_expr_41;
    #line 186 
    lockdep_init_map(& bc->vf_async_work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 186 
    INIT_LIST_HEAD_1(& bc->vf_async_work.entry);
    #line 186 
    bc->vf_async_work.func = & qlcnic_sriov_handle_async_issue_cmd;
  }
  #line 187 
  spinlock_check(& bc->queue_lock);
  {
    #line 187 
    struct lock_class_key __key_0;
    #line 187 
    __raw_spin_lock_init(& bc->queue_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&bc->queue_lock)->rlock",& __key_0);
  }
  #line 188 
  bc->adapter = adapter;
  #line 190 
  i = 0;
  #line 190 
  while (i < num_vfs) {
    {
      #line 191 
      vf = sriov->vf_info + (unsigned long)i;
      #line 192 
      vf->adapter = adapter;
      #line 193 
      vf->pci_func = (unsigned char)qlcnic_sriov_virtid_fn(adapter,i);
      {
        #line 194 
        struct lock_class_key __key_1;
        #line 194 
        __mutex_init(& vf->send_cmd_lock,(char *)"&vf->send_cmd_lock",& __key_1);
      }
      #line 195 
      spinlock_check(& vf->vlan_list_lock);
      {
        #line 195 
        struct lock_class_key __key_2;
        #line 195 
        __raw_spin_lock_init(& vf->vlan_list_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&vf->vlan_list_lock)->rlock",& __key_2);
      }
      #line 196 
      INIT_LIST_HEAD_1(& vf->rcv_act.wait_list);
      #line 197 
      INIT_LIST_HEAD_1(& vf->rcv_pend.wait_list);
      #line 198 
      spinlock_check(& vf->rcv_act.lock);
      {
        #line 198 
        struct lock_class_key __key_3;
        #line 198 
        __raw_spin_lock_init(& vf->rcv_act.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&vf->rcv_act.lock)->rlock",& __key_3);
      }
      #line 199 
      spinlock_check(& vf->rcv_pend.lock);
      {
        #line 199 
        struct lock_class_key __key_4;
        #line 199 
        __raw_spin_lock_init(& vf->rcv_pend.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&vf->rcv_pend.lock)->rlock",& __key_4);
      }
      #line 200 
      __init_completion(& vf->ch_free_cmpl);
      {
        #line 202 
        struct lock_class_key __key_5;
        #line 202 
        __init_work(& vf->trans_work,0);
        #line 202 
        atomic_long_t __constr_expr_42 = {.counter = 137438953408LL};
        #line 202 
        vf->trans_work.data = __constr_expr_42;
        #line 202 
        lockdep_init_map(& vf->trans_work.lockdep_map,(char *)"(work_completion)",& __key_5,0);
        #line 202 
        INIT_LIST_HEAD_1(& vf->trans_work.entry);
        #line 202 
        vf->trans_work.func = & qlcnic_sriov_process_bc_cmd;
      }
      #line 204 
      if ((int)qlcnic_sriov_pf_check(adapter) != 0) {
        #line 205 
        vp = (struct qlcnic_vport *)kzalloc_1(18UL,3264U);
        #line 206 
        if (vp == (struct qlcnic_vport *)0) {
          #line 207 
          err = -12;
          #line 208 
          goto qlcnic_destroy_async_wq;
        }
        #line 210 
        (sriov->vf_info + (unsigned long)i)->vp = vp;
        #line 211 
        vp->vlan_mode = (unsigned char)2U;
        #line 212 
        vp->max_tx_bw = (unsigned short)100U;
        #line 213 
        vp->min_tx_bw = (unsigned short)1U;
        #line 214 
        vp->spoofchk = (_Bool)0;
        #line 215 
        eth_random_addr((u8 *)(& vp->mac));
        #line 216 
        _dev_info(& (adapter->pdev)->dev,(char *)"MAC Address %pM is configured for VF %d\n",(u8 *)(& vp->mac),i);
      }
    }
    #line 190 
    i ++;
  }
  #line 222 
  return 0;
  #line 224 
  qlcnic_destroy_async_wq: 
                           #line 224 
  ;
  #line 225 
  destroy_workqueue(bc->bc_async_wq);
  #line 227 
  qlcnic_destroy_trans_wq: 
                           #line 227 
  ;
  #line 228 
  destroy_workqueue(bc->bc_trans_wq);
  #line 230 
  qlcnic_free_vf_info: 
                       #line 230 
  ;
  #line 231 
  kfree((void *)sriov->vf_info);
  #line 233 
  qlcnic_free_sriov: 
                     #line 233 
  ;
  #line 234 
  kfree((void *)(adapter->ahw)->sriov);
  #line 235 
  return err;
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_cleanup_list(struct qlcnic_trans_list *t_list)
{
  #line 240 
  struct qlcnic_bc_trans *trans;
  #line 241 
  struct qlcnic_cmd_args cmd;
  #line 242 
  unsigned long flags;
  #line 244 
  cif___ldv_spin_lock_lock_of_qlcnic_trans_list_0(& t_list->lock);
  #line 246 
  while (1) {
    #line 246 
    if (! (list_empty_0(& t_list->wait_list) == 0)) 
                                                    #line 246 
                                                    break;
    {
      #line 247 
      void *__mptr;
      #line 247 
      __mptr = (void *)t_list->wait_list.next;
      #line 247 
      trans = ((struct qlcnic_bc_trans *)(__mptr + 18446744073709551592U));
      #line 249 
      list_del_0(& trans->list);
      #line 250 
      (t_list->count) --;
      #line 251 
      cmd.req.arg = (u32 *)trans->req_pay;
      #line 252 
      cmd.rsp.arg = (u32 *)trans->rsp_pay;
      #line 253 
      qlcnic_free_mbx_args(& cmd);
      #line 254 
      qlcnic_sriov_cleanup_transaction(trans);
    }
  }
  #line 257 
  cif_spin_unlock_irqrestore_lock_of_qlcnic_trans_list_0(& t_list->lock,flags);
  #line 258 
  return;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void __qlcnic_sriov_cleanup(struct qlcnic_adapter *adapter)
{
  #line 264 
  struct qlcnic_vf_info *vf;
  #line 265 
  int i;
  #line 262 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 263 
  struct qlcnic_back_channel *bc = & sriov->bc;
  #line 267 
  if (! qlcnic_sriov_enable_check(adapter)) 
                                            #line 268 
                                            return;
  #line 270 
  qlcnic_sriov_cleanup_async_list(bc);
  #line 271 
  destroy_workqueue(bc->bc_async_wq);
  #line 273 
  i = 0;
  #line 273 
  while ((int)sriov->num_vfs > i) {
    #line 274 
    vf = sriov->vf_info + (unsigned long)i;
    #line 275 
    qlcnic_sriov_cleanup_list(& vf->rcv_pend);
    #line 276 
    cancel_work_sync(& vf->trans_work);
    #line 277 
    qlcnic_sriov_cleanup_list(& vf->rcv_act);
    #line 273 
    i ++;
  }
  #line 280 
  destroy_workqueue(bc->bc_trans_wq);
  #line 282 
  i = 0;
  #line 282 
  while ((int)sriov->num_vfs > i) {
    #line 283 
    kfree((void *)(sriov->vf_info + (unsigned long)i)->vp);
    #line 282 
    i ++;
  }
  #line 285 
  kfree((void *)sriov->vf_info);
  #line 286 
  kfree((void *)(adapter->ahw)->sriov);
  #line 287 
  return;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_cleanup(struct qlcnic_adapter *adapter)
{
  #line 291 
  qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)1);
  #line 292 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  #line 293 
  __qlcnic_sriov_cleanup(adapter);
  #line 294 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_cleanup(struct qlcnic_adapter *adapter)
{
  #line 298 
  if (! test_bit(10L,& adapter->state)) 
                                        #line 299 
                                        return;
  #line 301 
  qlcnic_sriov_free_vlans(adapter);
  #line 303 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 304 
                                                qlcnic_sriov_pf_cleanup(adapter);
  #line 306 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 307 
                                                qlcnic_sriov_vf_cleanup(adapter);
  #line 308 
  return;
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_post_bc_msg(struct qlcnic_adapter *adapter, u32 *hdr, u32 *pay, u8 pci_func, u8 size)
{
  #line 315 
  struct qlcnic_cmd_args cmd;
  #line 316 
  unsigned long timeout;
  #line 317 
  int err;
  #line 313 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 314 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  #line 319 
  memset((void *)(& cmd),0,200UL);
  #line 320 
  cmd.hdr = hdr;
  #line 321 
  cmd.pay = pay;
  #line 322 
  cmd.pay_size = (int)size;
  #line 323 
  cmd.func_num = pci_func;
  #line 324 
  cmd.op_type = 1U;
  #line 325 
  cmd.cmd_op = (unsigned int)((struct qlcnic_bc_hdr *)hdr)->cmd_op;
  #line 327 
  err = (*((mbx->ops)->enqueue_cmd))(adapter,& cmd,& timeout);
  #line 328 
  if (err != 0) {
    #line 329 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Mailbox not available, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n",(char *)"qlcnic_sriov_post_bc_msg",cmd.cmd_op,cmd.type,(int)ahw->pci_func,(int)ahw->op_mode);
    #line 333 
    return err;
  }
  #line 336 
  if (wait_for_completion_timeout(& cmd.completion,timeout) == 0UL) {
    #line 337 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Mailbox command timed out, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n",(char *)"qlcnic_sriov_post_bc_msg",cmd.cmd_op,cmd.type,(int)ahw->pci_func,(int)ahw->op_mode);
    #line 341 
    flush_workqueue(mbx->work_q);
  }
  #line 344 
  return (int)cmd.rsp_opcode;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_cfg_buff_desc(struct qlcnic_adapter *adapter)
{
  #line 349 
  adapter->num_rxd = (unsigned short)2048U;
  #line 350 
  adapter->max_rxd = (unsigned short)8192U;
  #line 351 
  adapter->num_jumbo_rxd = (unsigned short)512U;
  #line 352 
  adapter->max_jumbo_rxd = (unsigned short)1024U;
  #line 353 
  adapter->num_txd = (unsigned short)1024U;
  #line 354 
  adapter->max_rds_rings = (unsigned char)2U;
  #line 355 
  return;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_get_vf_vport_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u16 vport_id)
{
  #line 361 
  struct qlcnic_cmd_args cmd;
  #line 362 
  int err;
  #line 363 
  u32 status;
  #line 360 
  struct device *dev = & (adapter->pdev)->dev;
  #line 365 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,33U);
  #line 366 
  if (err != 0) 
                #line 367 
                return err;
  #line 369 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)vport_id << 16) | 1);
  #line 370 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 371 
  if (err != 0) {
    #line 372 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to get vport info, err=%d\n",err);
    #line 374 
    qlcnic_free_mbx_args(& cmd);
    #line 375 
    return err;
  }
  #line 378 
  status = *(cmd.rsp.arg + 2U) & 65535U;
  #line 379 
  if ((status & 1U) != 0U) 
                           #line 380 
                           npar_info->min_tx_bw = (unsigned short)(*(cmd.rsp.arg + 2U) >> 16);
  #line 381 
  if ((status & 2U) != 0U) 
                           #line 382 
                           npar_info->max_tx_bw = (unsigned short)*(cmd.rsp.arg + 3U);
  #line 383 
  if ((status & 4U) != 0U) 
                           #line 384 
                           npar_info->max_tx_ques = (unsigned short)(*(cmd.rsp.arg + 3U) >> 16);
  #line 385 
  if ((status & 8U) != 0U) 
                           #line 386 
                           npar_info->max_tx_mac_filters = (unsigned short)*(cmd.rsp.arg + 4U);
  #line 387 
  if ((status & 16U) != 0U) 
                            #line 388 
                            npar_info->max_rx_mcast_mac_filters = (unsigned short)(*(cmd.rsp.arg + 4U) >> 16);
  #line 389 
  if ((status & 32U) != 0U) 
                            #line 390 
                            npar_info->max_rx_ucast_mac_filters = (unsigned short)*(cmd.rsp.arg + 5U);
  #line 391 
  if ((status & 64U) != 0U) 
                            #line 392 
                            npar_info->max_rx_ip_addr = (unsigned short)(*(cmd.rsp.arg + 5U) >> 16);
  #line 393 
  if ((status & 128U) != 0U) 
                             #line 394 
                             npar_info->max_rx_lro_flow = (unsigned short)*(cmd.rsp.arg + 6U);
  #line 395 
  if ((status & 256U) != 0U) 
                             #line 396 
                             npar_info->max_rx_status_rings = (unsigned short)(*(cmd.rsp.arg + 6U) >> 16);
  #line 397 
  if ((status & 512U) != 0U) 
                             #line 398 
                             npar_info->max_rx_buf_rings = (unsigned short)*(cmd.rsp.arg + 7U);
  #line 400 
  npar_info->max_rx_ques = (unsigned short)(*(cmd.rsp.arg + 7U) >> 16);
  #line 401 
  npar_info->max_tx_vlan_keys = (unsigned short)*(cmd.rsp.arg + 8U);
  #line 402 
  npar_info->max_local_ipv6_addrs = (unsigned short)(*(cmd.rsp.arg + 8U) >> 16);
  #line 403 
  npar_info->max_remote_ipv6_addrs = (unsigned short)*(cmd.rsp.arg + 9U);
  #line 405 
  _dev_info(dev,(char *)"\n\tmin_tx_bw: %d, max_tx_bw: %d max_tx_ques: %d,\n",(int)npar_info->min_tx_bw,(int)npar_info->max_tx_bw,(int)npar_info->max_tx_ques,(int)npar_info->max_tx_mac_filters,(int)npar_info->max_rx_mcast_mac_filters,(int)npar_info->max_rx_ucast_mac_filters,(int)npar_info->max_rx_ip_addr,(int)npar_info->max_rx_lro_flow,(int)npar_info->max_rx_status_rings,(int)npar_info->max_rx_buf_rings,(int)npar_info->max_rx_ques,(int)npar_info->max_tx_vlan_keys,(int)npar_info->max_local_ipv6_addrs,(int)npar_info->max_remote_ipv6_addrs);
  #line 420 
  qlcnic_free_mbx_args(& cmd);
  #line 421 
  return err;
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_set_pvid_mode(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 427 
  adapter->rx_pvid = (unsigned short)(*(cmd->rsp.arg + 1U) >> 16);
  #line 428 
  adapter->flags &= 4294967039U;
  #line 429 
  return 0;
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_set_guest_vlan_mode(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 436 
  int i;
  #line 436 
  int num_vlans;
  #line 437 
  u16 *vlans;
  #line 435 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 439 
  if (sriov->allowed_vlans != (u16 *)0U) 
                                         #line 440 
                                         return 0;
  #line 442 
  sriov->any_vlan = (unsigned char)((unsigned int)((unsigned char)*(cmd->rsp.arg + 2U)) & 15U);
  #line 443 
  sriov->num_allowed_vlans = (unsigned short)(*(cmd->rsp.arg + 2U) >> 16);
  #line 444 
  _dev_info(& (adapter->pdev)->dev,(char *)"Number of allowed Guest VLANs = %d\n",(int)sriov->num_allowed_vlans);
  #line 447 
  qlcnic_sriov_alloc_vlans(adapter);
  #line 449 
  if ((unsigned int)sriov->any_vlan == 0U) 
                                           #line 450 
                                           return 0;
  #line 452 
  num_vlans = (int)sriov->num_allowed_vlans;
  #line 453 
  sriov->allowed_vlans = (u16 *)kcalloc_0((unsigned long)num_vlans,2UL,3264U);
  #line 454 
  if (sriov->allowed_vlans == (u16 *)0U) 
                                         #line 455 
                                         return -12;
  #line 457 
  vlans = (u16 *)(cmd->rsp.arg + 3U);
  #line 458 
  i = 0;
  #line 458 
  while (i < num_vlans) {
    #line 459 
    *(sriov->allowed_vlans + (unsigned long)i) = *(vlans + (unsigned long)i);
    #line 458 
    i ++;
  }
  #line 461 
  return 0;
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_get_vf_acl(struct qlcnic_adapter *adapter)
{
  #line 467 
  struct qlcnic_cmd_args cmd;
  #line 466 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 468 
  int ret = 0;
  #line 470 
  memset((void *)(& cmd),0,200UL);
  #line 471 
  ret = qlcnic_sriov_alloc_bc_mbx_args(& cmd,2U);
  #line 472 
  if (ret != 0) 
                #line 473 
                return ret;
  #line 475 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  #line 476 
  if (ret != 0) 
                #line 477 
                _dev_err(& (adapter->pdev)->dev,(char *)"Failed to get ACL, err=%d\n",ret);
  else {
    #line 480 
    sriov->vlan_mode = (unsigned char)((unsigned int)((unsigned char)*(cmd.rsp.arg + 1U)) & 3U);
    #line 481 
    switch ((int)sriov->vlan_mode) {
      #line 482 
      case 2: 
              #line 482 
      ;
      #line 483 
      ret = qlcnic_sriov_set_guest_vlan_mode(adapter,& cmd);
      #line 484 
      break;
      #line 485 
      case 1: 
              #line 485 
      ;
      #line 486 
      ret = qlcnic_sriov_set_pvid_mode(adapter,& cmd);
      #line 487 
      break;
    }
  }
  #line 491 
  qlcnic_free_mbx_args(& cmd);
  #line 492 
  return ret;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_init_driver(struct qlcnic_adapter *adapter)
{
  #line 498 
  struct qlcnic_info nic_info;
  #line 499 
  int err;
  #line 497 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 501 
  err = qlcnic_sriov_get_vf_vport_info(adapter,& nic_info,(unsigned short)0);
  #line 502 
  if (err != 0) 
                #line 503 
                return err;
  #line 505 
  ahw->max_mc_count = (unsigned char)nic_info.max_rx_mcast_mac_filters;
  #line 507 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)ahw->pci_func));
  #line 508 
  if (err != 0) 
                #line 509 
                return -5;
  #line 511 
  if (qlcnic_83xx_get_port_info(adapter) != 0) 
                                               #line 512 
                                               return -5;
  #line 514 
  qlcnic_sriov_vf_cfg_buff_desc(adapter);
  #line 515 
  adapter->flags |= 128U;
  #line 516 
  _dev_info(& (adapter->pdev)->dev,(char *)"HAL Version: %d\n",(adapter->ahw)->fw_hal_version);
  #line 519 
  ahw->physical_port = (unsigned char)nic_info.phys_port;
  #line 520 
  ahw->switch_mode = nic_info.switch_mode;
  #line 521 
  ahw->max_mtu = nic_info.max_mtu;
  #line 522 
  ahw->op_mode = nic_info.op_mode;
  #line 523 
  ahw->capabilities = nic_info.capabilities;
  #line 524 
  return 0;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_setup_vf(struct qlcnic_adapter *adapter, int pci_using_dac)
{
  #line 530 
  int err;
  #line 532 
  adapter->flags |= 8388608U;
  #line 533 
  (adapter->ahw)->total_nic_func = (unsigned short)1U;
  #line 534 
  INIT_LIST_HEAD_1(& adapter->vf_mc_list);
  #line 535 
  if (qlcnic_use_msi_x == 0 && qlcnic_use_msi != 0) 
                                                    #line 536 
                                                    _dev_warn(& (adapter->pdev)->dev,(char *)"Device does not support MSI interrupts\n");
  #line 540 
  qlcnic_set_tx_ring_count(adapter,(unsigned char)1);
  #line 541 
  qlcnic_set_sds_ring_count(adapter,(unsigned char)1);
  #line 543 
  err = qlcnic_setup_intr(adapter);
  #line 544 
  if (err != 0) {
    #line 545 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to setup interrupt\n");
    #line 546 
    goto err_out_disable_msi;
  }
  #line 549 
  err = qlcnic_83xx_setup_mbx_intr(adapter);
  #line 550 
  if (err != 0) 
                #line 551 
                goto err_out_disable_msi;
  #line 553 
  err = qlcnic_sriov_init(adapter,1);
  #line 554 
  if (err != 0) 
                #line 555 
                goto err_out_disable_mbx_intr;
  #line 557 
  err = qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)1);
  #line 558 
  if (err != 0) 
                #line 559 
                goto err_out_cleanup_sriov;
  #line 561 
  err = qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)0);
  #line 562 
  if (err != 0) 
                #line 563 
                goto err_out_disable_bc_intr;
  #line 565 
  err = qlcnic_sriov_vf_init_driver(adapter);
  #line 566 
  if (err != 0) 
                #line 567 
                goto err_out_send_channel_term;
  #line 569 
  err = qlcnic_sriov_get_vf_acl(adapter);
  #line 570 
  if (err != 0) 
                #line 571 
                goto err_out_send_channel_term;
  #line 573 
  err = qlcnic_setup_netdev(adapter,adapter->netdev,pci_using_dac);
  #line 574 
  if (err != 0) 
                #line 575 
                goto err_out_send_channel_term;
  #line 577 
  pci_set_drvdata(adapter->pdev,(void *)adapter);
  #line 578 
  _dev_info(& (adapter->pdev)->dev,(char *)"%s: XGbE port initialized\n",(char *)(& (adapter->netdev)->name));
  #line 581 
  qlcnic_schedule_work(adapter,& qlcnic_sriov_vf_poll_dev_state,(int)(adapter->ahw)->idc.delay);
  #line 583 
  return 0;
  #line 585 
  err_out_send_channel_term: 
                             #line 585 
  ;
  #line 586 
  qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)1);
  #line 588 
  err_out_disable_bc_intr: 
                           #line 588 
  ;
  #line 589 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  #line 591 
  err_out_cleanup_sriov: 
                         #line 591 
  ;
  #line 592 
  __qlcnic_sriov_cleanup(adapter);
  #line 594 
  err_out_disable_mbx_intr: 
                            #line 594 
  ;
  #line 595 
  qlcnic_83xx_free_mbx_intr(adapter);
  #line 597 
  err_out_disable_msi: 
                       #line 597 
  ;
  #line 598 
  qlcnic_teardown_intr(adapter);
  #line 599 
  return err;
}

#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_check_dev_ready(struct qlcnic_adapter *adapter)
{
  #line 604 
  u32 state;
  #line 606 
  while (1) {
    #line 607 
    msleep(20U);
    #line 608 
    adapter->fw_fail_cnt = (u8)((int)adapter->fw_fail_cnt + 1);
    #line 608 
    if ((unsigned int)adapter->fw_fail_cnt > 5U) 
                                                 #line 609 
                                                 return -5;
    #line 610 
    state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
    #line 611 
    if (! (state != 3U)) 
                         #line 606 
                         break;
  }
  #line 613 
  return 0;
}

#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_vf_init(struct qlcnic_adapter *adapter, int pci_using_dac)
{
  #line 619 
  int err;
  #line 618 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 621 
  cif_set_bit_1(1L,& ahw->idc.status);
  #line 622 
  ahw->idc.delay = 250ULL;
  #line 623 
  ahw->reset_context = (unsigned char)0U;
  #line 624 
  adapter->fw_fail_cnt = (unsigned char)0U;
  #line 625 
  ahw->msix_supported = (unsigned char)1U;
  #line 626 
  adapter->need_fw_reset = (unsigned char)0U;
  #line 627 
  adapter->flags |= 65536U;
  #line 629 
  err = qlcnic_sriov_check_dev_ready(adapter);
  #line 630 
  if (err != 0) 
                #line 631 
                return err;
  #line 633 
  err = qlcnic_sriov_setup_vf(adapter,pci_using_dac);
  #line 634 
  if (err != 0) 
                #line 635 
                return err;
  #line 637 
  if (qlcnic_read_mac_addr(adapter) != 0) 
                                          #line 638 
                                          _dev_warn(& (adapter->pdev)->dev,(char *)"failed to read mac addr\n");
  {
    #line 640 
    struct lock_class_key __key;
    #line 640 
    __init_work(& adapter->idc_aen_work.work,0);
    #line 640 
    atomic_long_t __constr_expr_43 = {.counter = 137438953408LL};
    #line 640 
    adapter->idc_aen_work.work.data = __constr_expr_43;
    #line 640 
    lockdep_init_map(& adapter->idc_aen_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 640 
    INIT_LIST_HEAD_1(& adapter->idc_aen_work.work.entry);
    #line 640 
    adapter->idc_aen_work.work.func = & qlcnic_83xx_idc_aen_work;
  }
  {
    #line 640 
    struct lock_class_key __key_0;
    #line 640 
    init_timer_key(& adapter->idc_aen_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->idc_aen_work)->timer",& __key_0);
  }
  #line 642 
  cif_clear_bit_1(2L,& adapter->state);
  #line 643 
  return 0;
}

#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_vf_set_ops(struct qlcnic_adapter *adapter)
{
  #line 648 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 650 
  ahw->op_mode = (unsigned short)4U;
  #line 651 
  _dev_info(& (adapter->pdev)->dev,(char *)"HAL Version: %d Non Privileged SRIOV function\n",ahw->fw_hal_version);
  #line 654 
  adapter->nic_ops = & qlcnic_sriov_vf_ops;
  #line 655 
  cif_set_bit_1(10L,& adapter->state);
  #line 656 
  return;
}

#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_vf_register_map(struct qlcnic_hardware_context *ahw)
{
  #line 661 
  ahw->hw_ops = & qlcnic_sriov_vf_hw_ops;
  #line 662 
  ahw->reg_tbl = (u32 *)(& qlcnic_83xx_reg_tbl);
  #line 663 
  ahw->ext_reg_tbl = (u32 *)(& qlcnic_83xx_ext_reg_tbl);
  #line 664 
  return;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static u32 qlcnic_sriov_get_bc_paysize(u32 real_pay_size, u8 curr_frag)
{
  #line 668 
  u32 pay_size;
  #line 670 
  pay_size = real_pay_size / (unsigned int)(((int)curr_frag + 1) * 1008);
  #line 672 
  if (pay_size != 0U) 
                      #line 673 
                      pay_size = 1008U; else 
                                             #line 675 
                                             pay_size = real_pay_size % 1008U;
  #line 677 
  return pay_size;
}

#line 680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_func_to_index(struct qlcnic_adapter *adapter, u8 pci_func)
{
  #line 683 
  u8 i;
  #line 682 
  struct qlcnic_vf_info *vf_info = ((adapter->ahw)->sriov)->vf_info;
  #line 685 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 686 
                                                return 0;
  #line 688 
  i = (unsigned char)0U;
  #line 688 
  while ((int)((adapter->ahw)->sriov)->num_vfs > (int)i) {
    #line 689 
    if ((int)(vf_info + (unsigned long)i)->pci_func == (int)pci_func) 
      #line 690 
      return (int)i;
    #line 688 
    i = (u8)((int)i + 1);
  }
  #line 693 
  return -22;
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static int qlcnic_sriov_alloc_bc_trans(struct qlcnic_bc_trans **trans)
{
  #line 698 
  *trans = (struct qlcnic_bc_trans *)kzalloc_1(176UL,2592U);
  #line 699 
  if (*trans == (struct qlcnic_bc_trans *)0) 
                                             #line 700 
                                             return -12;
  #line 702 
  __init_completion(& (*trans)->resp_cmpl);
  #line 703 
  return 0;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static int qlcnic_sriov_alloc_bc_msg(struct qlcnic_bc_hdr **hdr, u32 size)
{
  #line 709 
  *hdr = (struct qlcnic_bc_hdr *)kcalloc_0((unsigned long)size,16UL,2592U);
  #line 710 
  if (*hdr == (struct qlcnic_bc_hdr *)0) 
                                         #line 711 
                                         return -12;
  #line 713 
  return 0;
}

#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_alloc_bc_mbx_args(struct qlcnic_cmd_args *mbx, u32 type)
{
  #line 718 
  struct qlcnic_mailbox_metadata *mbx_tbl;
  #line 719 
  int i;
  #line 719 
  int size;
  #line 721 
  mbx_tbl = (struct qlcnic_mailbox_metadata *)(& qlcnic_sriov_bc_mbx_tbl);
  #line 722 
  size = 4;
  #line 724 
  i = 0;
  #line 724 
  while (i < size) {
    #line 725 
    if ((mbx_tbl + (unsigned long)i)->cmd == type) {
      #line 726 
      mbx->op_type = 1U;
      #line 727 
      mbx->req.num = (mbx_tbl + (unsigned long)i)->in_args;
      #line 728 
      mbx->rsp.num = (mbx_tbl + (unsigned long)i)->out_args;
      #line 729 
      mbx->req.arg = (u32 *)kcalloc_0((unsigned long)mbx->req.num,4UL,2592U);
      #line 731 
      if (mbx->req.arg == (u32 *)0U) 
                                     #line 732 
                                     return -12;
      #line 733 
      mbx->rsp.arg = (u32 *)kcalloc_0((unsigned long)mbx->rsp.num,4UL,2592U);
      #line 735 
      if (mbx->rsp.arg == (u32 *)0U) {
        #line 736 
        kfree((void *)mbx->req.arg);
        #line 737 
        mbx->req.arg = (u32 *)0U;
        #line 738 
        return -12;
      }
      #line 740 
      *(mbx->req.arg) = ((mbx->req.num << 16) | type) | 1610612736U;
      #line 742 
      *(mbx->rsp.arg) = (type & 65535U) | (mbx->rsp.num << 16);
      #line 743 
      return 0;
    }
    #line 724 
    i ++;
  }
  #line 746 
  return -22;
}

#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_prepare_bc_hdr(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd, u16 seq, u8 msg_type)
{
  #line 753 
  struct qlcnic_bc_hdr *hdr;
  #line 754 
  int i;
  #line 755 
  u32 num_regs;
  #line 755 
  u32 bc_pay_sz;
  #line 756 
  u16 remainder;
  #line 757 
  u8 cmd_op;
  #line 757 
  u8 num_frags;
  #line 757 
  u8 t_num_frags;
  #line 759 
  bc_pay_sz = 1008U;
  #line 760 
  if ((unsigned int)msg_type == 0U) {
    #line 761 
    trans->req_pay = (struct qlcnic_bc_payload *)cmd->req.arg;
    #line 762 
    trans->rsp_pay = (struct qlcnic_bc_payload *)cmd->rsp.arg;
    #line 763 
    num_regs = cmd->req.num;
    #line 764 
    trans->req_pay_size = (unsigned short)((unsigned int)((unsigned short)num_regs) * 4U);
    #line 765 
    num_regs = cmd->rsp.num;
    #line 766 
    trans->rsp_pay_size = (unsigned short)((unsigned int)((unsigned short)num_regs) * 4U);
    #line 767 
    cmd_op = (unsigned char)*(cmd->req.arg);
    #line 768 
    remainder = (unsigned short)((unsigned int)trans->req_pay_size % bc_pay_sz);
    #line 769 
    num_frags = (unsigned char)((unsigned int)trans->req_pay_size / bc_pay_sz);
    #line 770 
    if ((unsigned int)remainder != 0U) 
                                       #line 771 
                                       num_frags = (u8)((int)num_frags + 1);
    #line 772 
    t_num_frags = num_frags;
    #line 773 
    if (qlcnic_sriov_alloc_bc_msg(& trans->req_hdr,(unsigned int)num_frags) != 0) 
      #line 774 
      return -12;
    #line 775 
    remainder = (unsigned short)((unsigned int)trans->rsp_pay_size % bc_pay_sz);
    #line 776 
    num_frags = (unsigned char)((unsigned int)trans->rsp_pay_size / bc_pay_sz);
    #line 777 
    if ((unsigned int)remainder != 0U) 
                                       #line 778 
                                       num_frags = (u8)((int)num_frags + 1);
    #line 779 
    if (qlcnic_sriov_alloc_bc_msg(& trans->rsp_hdr,(unsigned int)num_frags) != 0) 
      #line 780 
      return -12;
    #line 781 
    num_frags = t_num_frags;
    #line 782 
    hdr = trans->req_hdr;
  }
  else {
    #line 784 
    cmd->req.arg = (u32 *)trans->req_pay;
    #line 785 
    cmd->rsp.arg = (u32 *)trans->rsp_pay;
    #line 786 
    cmd_op = (unsigned char)*(cmd->req.arg);
    #line 787 
    cmd->cmd_op = (unsigned int)cmd_op;
    #line 788 
    remainder = (unsigned short)((unsigned int)trans->rsp_pay_size % bc_pay_sz);
    #line 789 
    num_frags = (unsigned char)((unsigned int)trans->rsp_pay_size / bc_pay_sz);
    #line 790 
    if ((unsigned int)remainder != 0U) 
                                       #line 791 
                                       num_frags = (u8)((int)num_frags + 1);
    #line 792 
    cmd->req.num = (unsigned int)trans->req_pay_size / 4U;
    #line 793 
    cmd->rsp.num = (unsigned int)trans->rsp_pay_size / 4U;
    #line 794 
    hdr = trans->rsp_hdr;
    #line 795 
    cmd->op_type = (unsigned int)(trans->req_hdr)->op_type;
  }
  #line 798 
  trans->trans_id = (unsigned int)seq;
  #line 799 
  trans->cmd_id = (unsigned short)cmd_op;
  #line 800 
  i = 0;
  #line 800 
  while ((int)num_frags > i) {
    #line 801 
    (hdr + (unsigned long)i)->version = (unsigned char)2U;
    #line 802 
    (hdr + (unsigned long)i)->msg_type = (unsigned char)msg_type;
    #line 803 
    (hdr + (unsigned long)i)->op_type = (unsigned char)cmd->op_type;
    #line 804 
    (hdr + (unsigned long)i)->num_cmds = (unsigned char)1U;
    #line 805 
    (hdr + (unsigned long)i)->num_frags = num_frags;
    #line 806 
    (hdr + (unsigned long)i)->frag_num = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
    #line 807 
    (hdr + (unsigned long)i)->cmd_op = cmd_op;
    #line 808 
    (hdr + (unsigned long)i)->seq_id = seq;
    #line 800 
    i ++;
  }
  #line 810 
  return 0;
}

#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_cleanup_transaction(struct qlcnic_bc_trans *trans)
{
  #line 815 
  if (trans == (struct qlcnic_bc_trans *)0) 
                                            #line 816 
                                            return;
  #line 817 
  kfree((void *)trans->req_hdr);
  #line 818 
  kfree((void *)trans->rsp_hdr);
  #line 819 
  kfree((void *)trans);
  #line 820 
  return;
}

#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_clear_trans(struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans, u8 type)
{
  #line 825 
  struct qlcnic_trans_list *t_list;
  #line 826 
  unsigned long flags;
  #line 827 
  int ret = 0;
  #line 829 
  if ((unsigned int)type == 1U) {
    #line 830 
    t_list = & vf->rcv_act;
    #line 831 
    cif___ldv_spin_lock_lock_of_qlcnic_trans_list_0(& t_list->lock);
    #line 832 
    (t_list->count) --;
    #line 833 
    list_del_0(& trans->list);
    #line 834 
    if (t_list->count > 0) 
                           #line 835 
                           ret = 1;
    #line 836 
    cif_spin_unlock_irqrestore_lock_of_qlcnic_trans_list_0(& t_list->lock,flags);
  }
  #line 838 
  if ((unsigned int)type == 0U) {
    #line 839 
    while (1) {
      #line 839 
      if (! ((int)test_and_set_bit(0L,& vf->state) != 0)) 
                                                          #line 839 
                                                          break;
      #line 840 
      msleep(100U);
    }
    #line 841 
    vf->send_cmd = (struct qlcnic_bc_trans *)0;
    #line 842 
    cif_clear_bit_1(0L,& vf->state);
  }
  #line 844 
  return ret;
}

#line 847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_schedule_bc_cmd(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, void (*func)(struct work_struct *))
{
  #line 851 
  if ((int)test_bit(4L,& vf->state) != 0) 
                                          #line 853 
                                          return;
  else 
    #line 851 
    if ((unsigned int)(vf->adapter)->need_fw_reset != 0U) 
                                                          #line 853 
                                                          return;
  #line 855 
  cif_queue_work_1(sriov->bc.bc_trans_wq,& vf->trans_work);
  #line 856 
  return;
}

#line 858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static void qlcnic_sriov_wait_for_resp(struct qlcnic_bc_trans *trans)
{
  #line 860 
  struct completion *cmpl = & trans->resp_cmpl;
  #line 862 
  if (wait_for_completion_timeout(cmpl,2500UL) != 0UL) 
                                                       #line 863 
                                                       trans->trans_state = QLC_END; else 
                                                                    #line 865 
                                                                    trans->trans_state = QLC_ABORT;
  #line 867 
  return;
}

#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_multi_frags(struct qlcnic_bc_trans *trans, u8 type)
{
  #line 873 
  if ((unsigned int)type == 1U) {
    #line 874 
    trans->curr_rsp_frag = (u8)((int)trans->curr_rsp_frag + 1);
    #line 875 
    if ((int)trans->curr_rsp_frag < (int)(trans->rsp_hdr)->num_frags) 
      #line 876 
      trans->trans_state = QLC_INIT; else 
                                          #line 878 
                                          trans->trans_state = QLC_END;
  }
  else {
    #line 880 
    trans->curr_req_frag = (u8)((int)trans->curr_req_frag + 1);
    #line 881 
    if ((int)trans->curr_req_frag < (int)(trans->req_hdr)->num_frags) 
      #line 882 
      trans->trans_state = QLC_INIT; else 
                                          #line 884 
                                          trans->trans_state = QLC_WAIT_FOR_RESP;
  }
  #line 886 
  return;
}

#line 888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_wait_for_channel_free(struct qlcnic_bc_trans *trans, u8 type)
{
  #line 891 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 892 
  struct completion *cmpl = & vf->ch_free_cmpl;
  #line 894 
  if (wait_for_completion_timeout(cmpl,2500UL) == 0UL) {
    #line 895 
    trans->trans_state = QLC_ABORT;
    #line 896 
    return;
  }
  #line 899 
  cif_clear_bit_1(2L,& vf->state);
  #line 900 
  qlcnic_sriov_handle_multi_frags(trans,(unsigned char)((int)type));
  #line 901 
  return;
}

#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_pull_bc_msg(struct qlcnic_adapter *adapter, u32 *hdr, u32 *pay, u32 size)
{
  #line 907 
  u8 i;
  #line 907 
  u8 hdr_size;
  #line 907 
  u8 j;
  #line 906 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 907 
  u8 max = (unsigned char)2U;
  #line 909 
  hdr_size = (unsigned char)4U;
  #line 910 
  max = (unsigned char)((int)((unsigned char)(size / 4U)) + (int)hdr_size);
  #line 912 
  i = (unsigned char)2U;
  #line 912 
  j = (unsigned char)0U;
  #line 912 
  while ((int)j < (int)hdr_size) {
    #line 913 
    u32 *tmp;
    #line 913 
    tmp = hdr;
    #line 913 
    hdr ++;
    #line 913 
    *tmp = readl(ahw->pci_base0 + ((unsigned long)((int)i * 4) + (unsigned long)2048U));
    #line 912 
    i = (u8)((int)i + 1);
    #line 912 
    j = (u8)((int)j + 1);
  }
  #line 914 
  while ((int)j < (int)max) {
    #line 915 
    u32 *tmp_0;
    #line 915 
    tmp_0 = pay;
    #line 915 
    pay ++;
    #line 915 
    *tmp_0 = readl(ahw->pci_base0 + ((unsigned long)((int)i * 4) + (unsigned long)2048U));
    #line 914 
    i = (u8)((int)i + 1);
    #line 914 
    j = (u8)((int)j + 1);
  }
  #line 916 
  return;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int __qlcnic_sriov_issue_bc_post(struct qlcnic_vf_info *vf)
{
  #line 920 
  int ret = -16;
  #line 921 
  u32 timeout = 10000U;
  #line 923 
  while (1) {
    {
      #line 924 
      if (! test_and_set_bit(2L,& vf->state)) {
        #line 925 
        ret = 0;
        #line 926 
        break;
      }
      #line 928 
      __const_udelay(4295000UL);
    }
    #line 929 
    timeout --;
    #line 929 
    if (! (timeout != 0U)) 
                           #line 923 
                           break;
  }
  #line 931 
  return ret;
}

#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_issue_bc_post(struct qlcnic_bc_trans *trans, u8 type)
{
  #line 937 
  u32 pay_size;
  #line 938 
  u32 *hdr;
  #line 938 
  u32 *pay;
  #line 939 
  int ret;
  #line 936 
  struct qlcnic_vf_info *vf = trans->vf;
  #line 940 
  u8 pci_func = trans->func_id;
  #line 942 
  if (__qlcnic_sriov_issue_bc_post(vf) != 0) 
                                             #line 943 
                                             return -16;
  #line 945 
  if ((unsigned int)type == 0U) {
    #line 946 
    hdr = (u32 *)(trans->req_hdr + (unsigned long)trans->curr_req_frag);
    #line 947 
    pay = (u32 *)(trans->req_pay + (unsigned long)trans->curr_req_frag);
    #line 948 
    pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->req_pay_size,(unsigned char)((int)trans->curr_req_frag));
    #line 950 
    pay_size /= 4U;
  }
  else {
    #line 952 
    hdr = (u32 *)(trans->rsp_hdr + (unsigned long)trans->curr_rsp_frag);
    #line 953 
    pay = (u32 *)(trans->rsp_pay + (unsigned long)trans->curr_rsp_frag);
    #line 954 
    pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->rsp_pay_size,(unsigned char)((int)trans->curr_rsp_frag));
    #line 956 
    pay_size /= 4U;
  }
  #line 959 
  ret = qlcnic_sriov_post_bc_msg(vf->adapter,hdr,pay,(unsigned char)((int)pci_func),(unsigned char)((int)((unsigned char)pay_size)));
  #line 961 
  return ret;
}

#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int __qlcnic_sriov_send_bc_msg(struct qlcnic_bc_trans *trans, struct qlcnic_vf_info *vf, u8 type)
{
  #line 967 
  bool flag = (_Bool)1;
  #line 968 
  int err = -5;
  #line 970 
  while ((int)flag != 0) {
    #line 971 
    if ((int)test_bit(4L,& vf->state) != 0) 
                                            #line 973 
                                            trans->trans_state = QLC_ABORT;
    else 
      #line 971 
      if ((unsigned int)(vf->adapter)->need_fw_reset != 0U) 
                                                            #line 973 
                                                            trans->trans_state = QLC_ABORT;
    #line 975 
    switch ((unsigned int)trans->trans_state) {
      #line 976 
      case (unsigned int)0: 
                            #line 976 
      ;
      #line 977 
      trans->trans_state = QLC_WAIT_FOR_CHANNEL_FREE;
      #line 978 
      if (qlcnic_sriov_issue_bc_post(trans,(unsigned char)((int)type)) != 0) 
        #line 979 
        trans->trans_state = QLC_ABORT;
      #line 980 
      break;
      #line 981 
      case (unsigned int)1: 
                            #line 981 
      ;
      #line 982 
      qlcnic_sriov_wait_for_channel_free(trans,(unsigned char)((int)type));
      #line 983 
      break;
      #line 984 
      case (unsigned int)2: 
                            #line 984 
      ;
      #line 985 
      qlcnic_sriov_wait_for_resp(trans);
      #line 986 
      break;
      #line 987 
      case (unsigned int)4: 
                            #line 987 
      ;
      #line 988 
      err = 0;
      #line 989 
      flag = (_Bool)0;
      #line 990 
      break;
      #line 991 
      case (unsigned int)3: 
                            #line 991 
      ;
      #line 992 
      err = -5;
      #line 993 
      flag = (_Bool)0;
      #line 994 
      cif_clear_bit_1(2L,& vf->state);
      #line 995 
      break;
      #line 996 
      default: 
               #line 996 
      ;
      #line 997 
      err = -5;
      #line 998 
      flag = (_Bool)0;
    }
  }
  #line 1001 
  return err;
}

#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_send_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, int pci_func)
{
  #line 1007 
  struct qlcnic_vf_info *vf;
  #line 1008 
  int err;
  #line 1008 
  int index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)((unsigned char)pci_func)));
  #line 1010 
  if (index < 0) 
                 #line 1011 
                 return -5;
  #line 1013 
  vf = ((adapter->ahw)->sriov)->vf_info + (unsigned long)index;
  #line 1014 
  trans->vf = vf;
  #line 1015 
  trans->func_id = (unsigned char)pci_func;
  #line 1017 
  if (! test_bit(3L,& vf->state)) {
    #line 1018 
    if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                  #line 1019 
                                                  return -5;
    #line 1020 
    if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
      #line 1020 
      if ((unsigned int)trans->cmd_id != 0U) 
                                             #line 1022 
                                             return -5;
  }
  #line 1025 
  cif_mutex_lock_send_cmd_lock_of_qlcnic_vf_info(& vf->send_cmd_lock);
  #line 1026 
  vf->send_cmd = trans;
  #line 1027 
  err = __qlcnic_sriov_send_bc_msg(trans,vf,(unsigned char)0);
  #line 1028 
  qlcnic_sriov_clear_trans(vf,trans,(unsigned char)0);
  #line 1029 
  cif_mutex_unlock_send_cmd_lock_of_qlcnic_vf_info(& vf->send_cmd_lock);
  #line 1030 
  return err;
}

#line 1033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void __qlcnic_sriov_process_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  #line 1038 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) {
    #line 1039 
    qlcnic_sriov_pf_process_bc_cmd(adapter,trans,cmd);
    #line 1040 
    return;
  }
  #line 1043 
  *(cmd->rsp.arg) |= 301989888U;
  #line 1044 
  return;
}

#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_process_bc_cmd(struct work_struct *work)
{
  #line 1049 
  void *__mptr;
  #line 1063 
  void *__mptr_0;
  #line 1053 
  struct qlcnic_cmd_args cmd;
  #line 1054 
  u8 req;
  #line 1049 
  __mptr = (void *)work;
  #line 1049 
  struct qlcnic_vf_info *vf = ((struct qlcnic_vf_info *)(__mptr + 18446744073709551488U));
  #line 1051 
  struct qlcnic_bc_trans *trans = (struct qlcnic_bc_trans *)0;
  #line 1052 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1056 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
                                                  #line 1057 
                                                  return;
  #line 1059 
  if ((int)test_bit(4L,& vf->state) != 0) 
                                          #line 1060 
                                          return;
  #line 1062 
  memset((void *)(& cmd),0,200UL);
  #line 1063 
  __mptr_0 = (void *)vf->rcv_act.wait_list.next;
  #line 1063 
  trans = ((struct qlcnic_bc_trans *)(__mptr_0 + 18446744073709551592U));
  #line 1065 
  adapter = vf->adapter;
  #line 1067 
  if (qlcnic_sriov_prepare_bc_hdr(trans,& cmd,
                                    (unsigned short)((int)(trans->req_hdr)->seq_id),
                                    (unsigned char)1) != 0) 
    #line 1069 
    goto cleanup_trans;
  #line 1071 
  __qlcnic_sriov_process_bc_cmd(adapter,trans,& cmd);
  #line 1072 
  trans->trans_state = QLC_INIT;
  #line 1073 
  __qlcnic_sriov_send_bc_msg(trans,vf,(unsigned char)1);
  #line 1075 
  cleanup_trans: 
                 #line 1075 
  ;
  #line 1076 
  qlcnic_free_mbx_args(& cmd);
  #line 1077 
  req = (unsigned char)qlcnic_sriov_clear_trans(vf,trans,(unsigned char)1);
  #line 1078 
  qlcnic_sriov_cleanup_transaction(trans);
  #line 1079 
  if ((unsigned int)req != 0U) 
                               #line 1080 
                               qlcnic_sriov_schedule_bc_cmd((adapter->ahw)->sriov,vf,& qlcnic_sriov_process_bc_cmd);
  #line 1082 
  return;
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_bc_resp(struct qlcnic_bc_hdr *hdr, struct qlcnic_vf_info *vf)
{
  #line 1087 
  struct qlcnic_bc_trans *trans;
  #line 1088 
  u32 pay_size;
  #line 1090 
  if ((int)test_and_set_bit(0L,& vf->state) != 0) 
                                                  #line 1091 
                                                  return;
  #line 1093 
  trans = vf->send_cmd;
  #line 1095 
  if (trans == (struct qlcnic_bc_trans *)0) 
                                            #line 1096 
                                            goto clear_send;
  #line 1098 
  if (trans->trans_id != (unsigned int)hdr->seq_id) 
                                                    #line 1099 
                                                    goto clear_send;
  #line 1101 
  pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->rsp_pay_size,(unsigned char)((int)trans->curr_rsp_frag));
  #line 1103 
  qlcnic_sriov_pull_bc_msg(vf->adapter,(u32 *)(trans->rsp_hdr + (unsigned long)trans->curr_rsp_frag),(u32 *)(trans->rsp_pay + (unsigned long)trans->curr_rsp_frag),pay_size);
  #line 1107 
  trans->curr_rsp_frag = (u8)((int)trans->curr_rsp_frag + 1);
  #line 1107 
  ;
  #line 1107 
  if ((int)trans->curr_rsp_frag < (int)(trans->rsp_hdr)->num_frags) 
                                                                    #line 1108 
                                                                    goto clear_send;
  #line 1110 
  complete(& trans->resp_cmpl);
  #line 1112 
  clear_send: 
              #line 1112 
  ;
  #line 1113 
  cif_clear_bit_1(0L,& vf->state);
  #line 1114 
  return;
}

#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int __qlcnic_sriov_add_act_list(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans)
{
  #line 1120 
  struct qlcnic_trans_list *t_list = & vf->rcv_act;
  #line 1122 
  (t_list->count) ++;
  #line 1123 
  list_add_tail_0(& trans->list,& t_list->wait_list);
  #line 1124 
  if (t_list->count == 1) 
                          #line 1125 
                          qlcnic_sriov_schedule_bc_cmd(sriov,vf,& qlcnic_sriov_process_bc_cmd);
  #line 1127 
  return 0;
}

#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_add_act_list(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans)
{
  #line 1134 
  struct qlcnic_trans_list *t_list = & vf->rcv_act;
  #line 1136 
  cif_spin_lock_lock_of_qlcnic_trans_list(& t_list->lock);
  #line 1138 
  __qlcnic_sriov_add_act_list(sriov,vf,trans);
  #line 1140 
  cif_spin_unlock_lock_of_qlcnic_trans_list(& t_list->lock);
  #line 1141 
  return 0;
}

#line 1144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_pending_trans(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_hdr *hdr)
{
  #line 1149 
  struct list_head *node;
  #line 1150 
  u32 pay_size;
  #line 1150 
  u32 curr_frag;
  #line 1148 
  struct qlcnic_bc_trans *trans = (struct qlcnic_bc_trans *)0;
  #line 1151 
  u8 found = (unsigned char)0U;
  #line 1151 
  u8 active = (unsigned char)0U;
  #line 1153 
  cif_spin_lock_lock_of_qlcnic_trans_list(& vf->rcv_pend.lock);
  #line 1154 
  if (vf->rcv_pend.count > 0) {
    #line 1155 
    node = vf->rcv_pend.wait_list.next;
    #line 1155 
    while (& vf->rcv_pend.wait_list != node) {
      {
        #line 1156 
        void *__mptr;
        #line 1156 
        __mptr = (void *)node;
        #line 1156 
        trans = ((struct qlcnic_bc_trans *)(__mptr + 18446744073709551592U));
        #line 1157 
        if (trans->trans_id == (unsigned int)hdr->seq_id) {
          #line 1158 
          found = (unsigned char)1U;
          #line 1159 
          break;
        }
      }
      #line 1155 
      node = node->next;
    }
  }
  #line 1164 
  if ((unsigned int)found != 0U) {
    #line 1165 
    curr_frag = (unsigned int)trans->curr_req_frag;
    #line 1166 
    pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->req_pay_size,(unsigned char)((int)((unsigned char)curr_frag)));
    #line 1168 
    qlcnic_sriov_pull_bc_msg(vf->adapter,(u32 *)(trans->req_hdr + (unsigned long)curr_frag),(u32 *)(trans->req_pay + (unsigned long)curr_frag),pay_size);
    #line 1172 
    trans->curr_req_frag = (u8)((int)trans->curr_req_frag + 1);
    #line 1173 
    if ((int)trans->curr_req_frag >= (int)hdr->num_frags) {
      #line 1174 
      (vf->rcv_pend.count) --;
      #line 1175 
      list_del_0(& trans->list);
      #line 1176 
      active = (unsigned char)1U;
    }
  }
  #line 1179 
  cif_spin_unlock_lock_of_qlcnic_trans_list(& vf->rcv_pend.lock);
  #line 1181 
  if ((unsigned int)active != 0U) {
    #line 1182 
    if (qlcnic_sriov_add_act_list(sriov,vf,trans) != 0) 
                                                        #line 1183 
                                                        qlcnic_sriov_cleanup_transaction(trans);
  }
  #line 1185 
  return;
}

#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_bc_cmd(struct qlcnic_sriov *sriov, struct qlcnic_bc_hdr *hdr, struct qlcnic_vf_info *vf)
{
  #line 1192 
  struct qlcnic_bc_trans *trans;
  #line 1194 
  struct qlcnic_cmd_args cmd;
  #line 1195 
  u32 pay_size;
  #line 1196 
  int err;
  #line 1197 
  u8 cmd_op;
  #line 1193 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1199 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
                                                  #line 1200 
                                                  return;
  #line 1202 
  if (! test_bit(3L,& vf->state)) 
    #line 1202 
    if ((unsigned int)hdr->op_type != 1U) 
      #line 1203 
      if ((unsigned int)hdr->cmd_op != 0U) 
                                           #line 1205 
                                           return;
  #line 1207 
  if ((unsigned int)hdr->frag_num > 1U) {
    #line 1208 
    qlcnic_sriov_handle_pending_trans(sriov,vf,hdr);
    #line 1209 
    return;
  }
  #line 1212 
  memset((void *)(& cmd),0,200UL);
  #line 1213 
  cmd_op = hdr->cmd_op;
  #line 1214 
  if (qlcnic_sriov_alloc_bc_trans(& trans) != 0) 
                                                 #line 1215 
                                                 return;
  #line 1217 
  if ((unsigned int)hdr->op_type == 1U) 
                                        #line 1218 
                                        err = qlcnic_sriov_alloc_bc_mbx_args(& cmd,(unsigned int)cmd_op); else 
                                                                    #line 1220 
                                                                    err = qlcnic_alloc_mbx_args(& cmd,adapter,(unsigned int)cmd_op);
  #line 1222 
  if (err != 0) {
    #line 1223 
    qlcnic_sriov_cleanup_transaction(trans);
    #line 1224 
    return;
  }
  #line 1227 
  cmd.op_type = (unsigned int)hdr->op_type;
  #line 1228 
  if (qlcnic_sriov_prepare_bc_hdr(trans,& cmd,
                                    (unsigned short)((int)hdr->seq_id),
                                    (unsigned char)0) != 0) {
    #line 1230 
    qlcnic_free_mbx_args(& cmd);
    #line 1231 
    qlcnic_sriov_cleanup_transaction(trans);
    #line 1232 
    return;
  }
  #line 1235 
  pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->req_pay_size,(unsigned char)((int)trans->curr_req_frag));
  #line 1237 
  qlcnic_sriov_pull_bc_msg(vf->adapter,(u32 *)(trans->req_hdr + (unsigned long)trans->curr_req_frag),(u32 *)(trans->req_pay + (unsigned long)trans->curr_req_frag),pay_size);
  #line 1241 
  trans->func_id = vf->pci_func;
  #line 1242 
  trans->vf = vf;
  #line 1243 
  trans->trans_id = (unsigned int)hdr->seq_id;
  #line 1244 
  trans->curr_req_frag = (u8)((int)trans->curr_req_frag + 1);
  #line 1246 
  if ((int)qlcnic_sriov_soft_flr_check(adapter,trans,vf) != 0) 
                                                               #line 1247 
                                                               return;
  #line 1249 
  if ((int)trans->curr_req_frag == (int)(trans->req_hdr)->num_frags) {
    #line 1250 
    if (qlcnic_sriov_add_act_list(sriov,vf,trans) != 0) {
      #line 1251 
      qlcnic_free_mbx_args(& cmd);
      #line 1252 
      qlcnic_sriov_cleanup_transaction(trans);
    }
  }
  else {
    #line 1255 
    cif_spin_lock_lock_of_qlcnic_trans_list(& vf->rcv_pend.lock);
    #line 1256 
    list_add_tail_0(& trans->list,& vf->rcv_pend.wait_list);
    #line 1257 
    (vf->rcv_pend.count) ++;
    #line 1258 
    cif_spin_unlock_lock_of_qlcnic_trans_list(& vf->rcv_pend.lock);
  }
  #line 1260 
  return;
}

#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_msg_event(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf)
{
  #line 1265 
  struct qlcnic_bc_hdr hdr;
  #line 1267 
  u8 msg_type;
  #line 1267 
  u8 i;
  #line 1266 
  u32 *ptr = (u32 *)(& hdr);
  #line 1269 
  i = (unsigned char)2U;
  #line 1269 
  while ((unsigned int)i <= 5U) {
    #line 1270 
    *(ptr + ((unsigned long)i + 18446744073709551614U)) = readl(((vf->adapter)->ahw)->pci_base0 + ((unsigned long)((int)i * 4) + (unsigned long)2048U));
    #line 1269 
    i = (u8)((int)i + 1);
  }
  #line 1271 
  msg_type = (unsigned char)hdr.msg_type;
  #line 1273 
  switch ((int)msg_type) {
    #line 1274 
    case 0: 
            #line 1274 
    ;
    #line 1275 
    qlcnic_sriov_handle_bc_cmd(sriov,& hdr,vf);
    #line 1276 
    break;
    #line 1277 
    case 1: 
            #line 1277 
    ;
    #line 1278 
    qlcnic_sriov_handle_bc_resp(& hdr,vf);
    #line 1279 
    break;
  }
  #line 1281 
  return;
}

#line 1283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_flr_event(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf)
{
  #line 1286 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 1288 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 1289 
                                                qlcnic_sriov_pf_handle_flr(sriov,vf); else 
                                                                    #line 1291 
                                                                    _dev_err(& (adapter->pdev)->dev,(char *)"Invalid event to VF. VF should not get FLR event\n");
  #line 1292 
  return;
}

#line 1295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_handle_bc_event(struct qlcnic_adapter *adapter, u32 event)
{
  #line 1297 
  struct qlcnic_vf_info *vf;
  #line 1298 
  struct qlcnic_sriov *sriov;
  #line 1299 
  int index;
  #line 1300 
  u8 pci_func;
  #line 1302 
  sriov = (adapter->ahw)->sriov;
  #line 1303 
  pci_func = qlcnic_sriov_target_func_id(event);
  #line 1304 
  index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)pci_func));
  #line 1306 
  if (index < 0) 
                 #line 1307 
                 return;
  #line 1309 
  vf = sriov->vf_info + (unsigned long)index;
  #line 1310 
  vf->pci_func = pci_func;
  #line 1312 
  if ((int)qlcnic_sriov_channel_free_check(event) != 0) 
                                                        #line 1313 
                                                        complete(& vf->ch_free_cmpl);
  #line 1315 
  if ((int)qlcnic_sriov_flr_check(event) != 0) {
    #line 1316 
    qlcnic_sriov_handle_flr_event(sriov,vf);
    #line 1317 
    return;
  }
  #line 1320 
  if ((int)qlcnic_sriov_bc_msg_check(event) != 0) 
                                                  #line 1321 
                                                  qlcnic_sriov_handle_msg_event(sriov,vf);
  #line 1322 
  return;
}

#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_cfg_bc_intr(struct qlcnic_adapter *adapter, u8 enable)
{
  #line 1326 
  struct qlcnic_cmd_args cmd;
  #line 1327 
  int err;
  #line 1329 
  if (! test_bit(10L,& adapter->state)) 
                                        #line 1330 
                                        return 0;
  #line 1332 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,49U) != 0) 
                                                     #line 1333 
                                                     return -12;
  #line 1335 
  if ((unsigned int)enable != 0U) 
                                  #line 1336 
                                  *(cmd.req.arg + 1U) = 240U;
  #line 1338 
  err = qlcnic_83xx_issue_cmd(adapter,& cmd);
  #line 1340 
  if (err != 0) {
    #line 1341 
    char *tmp_1;
    #line 1341 
    ;
    #line 1341 
    if ((unsigned int)enable != 0U) 
                                    #line 1341 
                                    tmp_1 = (char *)"enable"; else 
                                                                   #line 1341 
                                                                   tmp_1 = (char *)"disable";
    #line 1341 
    ;
    #line 1341 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to %s bc events, err=%d\n",tmp_1,err);
  }
  #line 1346 
  qlcnic_free_mbx_args(& cmd);
  #line 1347 
  return err;
}

#line 1350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_retry_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans)
{
  #line 1354 
  u32 state;
  #line 1353 
  u8 max = (unsigned char)5U;
  #line 1356 
  state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
  #line 1357 
  if (state == 3U) {
    #line 1358 
    msleep(20U);
    #line 1359 
    cif_clear_bit_1(2L,& (trans->vf)->state);
    #line 1360 
    trans->trans_state = QLC_INIT;
    #line 1361 
    adapter->fw_fail_cnt = (u8)((int)adapter->fw_fail_cnt + 1);
    #line 1361 
    ;
    #line 1361 
    if ((int)adapter->fw_fail_cnt > (int)max) 
                                              #line 1362 
                                              return -5; else 
                                                              #line 1364 
                                                              return 0;
  }
  #line 1367 
  return -5;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int __qlcnic_sriov_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 1376 
  struct qlcnic_bc_trans *trans;
  #line 1377 
  int err;
  #line 1378 
  u32 rsp_data;
  #line 1378 
  u32 opcode;
  #line 1378 
  u32 mbx_err_code;
  #line 1378 
  u32 rsp;
  #line 1373 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1374 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  #line 1375 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1379 
  ((adapter->ahw)->sriov)->bc.trans_counter = (u16)((int)((adapter->ahw)->sriov)->bc.trans_counter + 1);
  #line 1379 
  u16 seq = ((adapter->ahw)->sriov)->bc.trans_counter;
  #line 1380 
  u8 func = ahw->pci_func;
  #line 1382 
  rsp = (unsigned int)qlcnic_sriov_alloc_bc_trans(& trans);
  #line 1383 
  if (rsp != 0U) 
                 #line 1384 
                 goto free_cmd;
  #line 1386 
  rsp = (unsigned int)qlcnic_sriov_prepare_bc_hdr(trans,cmd,(unsigned short)((int)seq),
                                    (unsigned char)0);
  #line 1387 
  if (rsp != 0U) 
                 #line 1388 
                 goto cleanup_transaction;
  #line 1390 
  retry: 
         #line 1390 
  ;
  #line 1391 
  if (! test_bit(2L,& mbx->status)) {
    #line 1392 
    rsp = 4294967291U;
    #line 1393 
    if (((adapter->ahw)->msg_enable & 1U) != 0U) {
      #line 1393 
      ;
      #line 1393 
      ;
      #line 1393 
      printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"__qlcnic_sriov_issue_cmd",(int)((unsigned short)*(cmd->req.arg)),(int)func);
    }
    #line 1395 
    goto err_out;
  }
  #line 1398 
  err = qlcnic_sriov_send_bc_cmd(adapter,trans,(int)func);
  #line 1399 
  if (err != 0) {
    #line 1400 
    _dev_err(dev,(char *)"MBX command 0x%x timed out for VF %d\n",*(cmd->req.arg) & 65535U,(int)func);
    #line 1402 
    rsp = 17U;
    #line 1407 
    if ((unsigned int)(trans->req_hdr)->cmd_op == 0U) {
      #line 1407 
      if (qlcnic_sriov_retry_bc_cmd(adapter,trans) == 0) 
                                                         #line 1409 
                                                         goto retry;
    }
    #line 1411 
    goto err_out;
  }
  #line 1414 
  rsp_data = *(cmd->rsp.arg);
  #line 1415 
  mbx_err_code = rsp_data >> 25;
  #line 1416 
  opcode = (unsigned int)((unsigned short)*(cmd->req.arg));
  #line 1418 
  if (mbx_err_code == 1U || mbx_err_code == 26U) 
                                                 #line 1420 
                                                 rsp = 0U;
  else 
    #line 1422 
    if (cmd->type == 1U) 
                         #line 1423 
                         rsp = 0U;
    else {
      #line 1425 
      rsp = mbx_err_code;
      #line 1426 
      if (rsp == 0U) 
                     #line 1427 
                     rsp = 1U;
      #line 1429 
      _dev_err(dev,(char *)"MBX command 0x%x failed with err:0x%x for VF %d\n",opcode,mbx_err_code,(int)func);
    }
  #line 1435 
  err_out: 
           #line 1435 
  ;
  #line 1436 
  if (rsp == 17U) {
    #line 1437 
    ahw->reset_context = (unsigned char)1U;
    #line 1438 
    adapter->need_fw_reset = (unsigned char)1U;
    #line 1439 
    cif_clear_bit_1(2L,& mbx->status);
  }
  #line 1442 
  cleanup_transaction: 
                       #line 1442 
  ;
  #line 1443 
  qlcnic_sriov_cleanup_transaction(trans);
  #line 1445 
  free_cmd: 
            #line 1445 
  ;
  #line 1446 
  if (cmd->type == 1U) {
    #line 1447 
    qlcnic_free_mbx_args(cmd);
    #line 1448 
    kfree((void *)cmd);
  }
  #line 1451 
  return (int)rsp;
}

#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 1458 
  if (cmd->type == 1U) {
    #line 1459 
    return qlcnic_sriov_async_issue_cmd(adapter,cmd);
  }
  else {
    #line 1461 
    return __qlcnic_sriov_issue_cmd(adapter,cmd);
  }
}

#line 1464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_channel_cfg_cmd(struct qlcnic_adapter *adapter, u8 cmd_op)
{
  #line 1466 
  struct qlcnic_cmd_args cmd;
  #line 1468 
  int ret;
  #line 1467 
  struct qlcnic_vf_info *vf = ((adapter->ahw)->sriov)->vf_info;
  #line 1470 
  memset((void *)(& cmd),0,200UL);
  #line 1471 
  if (qlcnic_sriov_alloc_bc_mbx_args(& cmd,(unsigned int)cmd_op) != 0) 
    #line 1472 
    return -12;
  #line 1474 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  #line 1475 
  if (ret != 0) {
    #line 1476 
    char *tmp_0;
    #line 1476 
    ;
    #line 1476 
    if ((unsigned int)cmd_op != 0U) 
                                    #line 1476 
                                    tmp_0 = (char *)"term"; else 
                                                                 #line 1476 
                                                                 tmp_0 = (char *)"init";
    #line 1476 
    ;
    #line 1476 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed bc channel %s %d\n",tmp_0,ret);
    #line 1479 
    goto out;
  }
  #line 1482 
  cmd_op = (unsigned char)*(cmd.rsp.arg);
  #line 1483 
  if (*(cmd.rsp.arg) >> 25 == 2U) 
                                  #line 1484 
                                  return 2;
  #line 1485 
  if ((unsigned int)cmd_op == 0U) 
                                  #line 1486 
                                  cif_set_bit_1(3L,& vf->state); else 
                                                                   #line 1488 
                                                                   cif_clear_bit_1(3L,& vf->state);
  #line 1490 
  out: 
       #line 1490 
  ;
  #line 1491 
  qlcnic_free_mbx_args(& cmd);
  #line 1492 
  return ret;
}

#line 1495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_vf_add_mc_list(struct net_device *netdev, u8 *mac, enum qlcnic_mac_type mac_type)
{
  #line 1500 
  struct qlcnic_vf_info *vf;
  #line 1501 
  u16 vlan_id;
  #line 1502 
  int i;
  #line 1498 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1499 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 1504 
  vf = ((adapter->ahw)->sriov)->vf_info;
  #line 1506 
  if (qlcnic_sriov_check_any_vlan(vf)) {
    #line 1509 
    cif_spin_lock_vlan_list_lock_of_qlcnic_vf_info(& vf->vlan_list_lock);
    #line 1510 
    i = 0;
    #line 1510 
    while ((int)sriov->num_allowed_vlans > i) {
      #line 1511 
      vlan_id = *(vf->sriov_vlans + (unsigned long)i);
      #line 1512 
      if ((unsigned int)vlan_id != 0U) 
                                       #line 1513 
                                       qlcnic_nic_add_mac(adapter,mac,(unsigned short)((int)vlan_id),mac_type);
      #line 1510 
      i ++;
    }
    #line 1516 
    cif_spin_unlock_vlan_list_lock_of_qlcnic_vf_info(& vf->vlan_list_lock);
    #line 1517 
    if ((int)qlcnic_84xx_check(adapter) != 0) 
                                              #line 1518 
                                              qlcnic_nic_add_mac(adapter,mac,(unsigned short)0,mac_type);
  }
  else 
       #line 1507 
       qlcnic_nic_add_mac(adapter,mac,(unsigned short)0,mac_type);
  #line 1520 
  return;
}

#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_cleanup_async_list(struct qlcnic_back_channel *bc)
{
  #line 1525 
  struct qlcnic_async_cmd *entry;
  #line 1524 
  struct list_head *head = & bc->async_cmd_list;
  #line 1527 
  flush_workqueue(bc->bc_async_wq);
  #line 1528 
  cancel_work_sync(& bc->vf_async_work);
  #line 1530 
  cif_spin_lock_queue_lock_of_qlcnic_back_channel(& bc->queue_lock);
  #line 1531 
  while (1) {
    #line 1531 
    if (! (list_empty_0(head) == 0)) 
                                     #line 1531 
                                     break;
    {
      #line 1532 
      void *__mptr;
      #line 1532 
      __mptr = (void *)head->next;
      #line 1532 
      entry = ((struct qlcnic_async_cmd *)__mptr);
      #line 1534 
      list_del_0(& entry->list);
      #line 1535 
      kfree((void *)entry->cmd);
      #line 1536 
      kfree((void *)entry);
    }
  }
  #line 1538 
  cif_spin_unlock_queue_lock_of_qlcnic_back_channel(& bc->queue_lock);
  #line 1539 
  return;
}

#line 1541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_vf_set_multi(struct net_device *netdev)
{
  #line 1548 
  struct netdev_hw_addr *ha;
  #line 1543 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1544 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1545 
  u8 bcast_addr[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 1549 
  u32 mode = 0U;
  #line 1551 
  if (! test_bit(0L,& adapter->state)) 
                                       #line 1552 
                                       return;
  #line 1554 
  if ((netdev->flags & 256U) != 0U) {
    #line 1555 
    if ((adapter->flags & 2048U) == 0U) 
                                        #line 1556 
                                        mode = 1U;
  }
  else 
    #line 1557 
    if ((netdev->flags & 512U) != 0U || netdev->mc.count > (int)ahw->max_mc_count) 
      #line 1559 
      mode = 2U;
    else {
      #line 1561 
      qlcnic_vf_add_mc_list(netdev,(u8 *)(& bcast_addr),(enum qlcnic_mac_type)QLCNIC_BROADCAST_MAC);
      #line 1562 
      if (netdev->mc.count != 0) {
        #line 1564 
        void *__mptr;
        #line 1563 
        qlcnic_flush_mcast_mac(adapter);
        #line 1564 
        __mptr = (void *)netdev->mc.list.next;
        #line 1564 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 1564 
        while (& ha->list != & netdev->mc.list) {
          #line 1564 
          void *__mptr_0;
          #line 1565 
          qlcnic_vf_add_mc_list(netdev,(u8 *)(& ha->addr),(enum qlcnic_mac_type)QLCNIC_MULTICAST_MAC);
          #line 1564 
          __mptr_0 = (void *)ha->list.next;
          #line 1564 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
      }
    }
  #line 1573 
  if (netdev->uc.count > (int)ahw->max_uc_count) 
                                                 #line 1574 
                                                 mode = 1U;
  else 
    #line 1575 
    if (netdev->uc.count != 0) {
      #line 1576 
      void *__mptr_1;
      #line 1576 
      __mptr_1 = (void *)netdev->uc.list.next;
      #line 1576 
      ha = ((struct netdev_hw_addr *)__mptr_1);
      #line 1576 
      while (& ha->list != & netdev->uc.list) {
        #line 1576 
        void *__mptr_2;
        #line 1577 
        qlcnic_vf_add_mc_list(netdev,(u8 *)(& ha->addr),(enum qlcnic_mac_type)QLCNIC_UNICAST_MAC);
        #line 1576 
        __mptr_2 = (void *)ha->list.next;
        #line 1576 
        ha = ((struct netdev_hw_addr *)__mptr_2);
      }
    }
  #line 1581 
  if ((unsigned int)(adapter->pdev)->is_virtfn != 0U) 
    #line 1582 
    if (mode == 1U && ! adapter->fdb_mac_learn) {
      #line 1584 
      qlcnic_alloc_lb_filters_mem(adapter);
      #line 1585 
      adapter->drv_mac_learn = (_Bool)1;
      #line 1586 
      adapter->rx_mac_learn = (_Bool)1;
    }
    else {
      #line 1588 
      adapter->drv_mac_learn = (_Bool)0;
      #line 1589 
      adapter->rx_mac_learn = (_Bool)0;
    }
  #line 1593 
  qlcnic_nic_set_promisc(adapter,mode);
  #line 1594 
  return;
}

#line 1596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_async_issue_cmd(struct work_struct *work)
{
  #line 1611 
  void *__mptr_0;
  #line 1611 
  void *__mptr_1;
  #line 1604 
  void *__mptr;
  #line 1598 
  struct qlcnic_async_cmd *entry;
  #line 1598 
  struct qlcnic_async_cmd *tmp;
  #line 1599 
  struct qlcnic_back_channel *bc;
  #line 1600 
  struct qlcnic_cmd_args *cmd;
  #line 1601 
  struct list_head *head;
  #line 1602 
  struct list_head del_list = {.next = & del_list, .prev = & del_list};
  #line 1604 
  __mptr = (void *)work;
  #line 1604 
  bc = ((struct qlcnic_back_channel *)(__mptr + 18446744073709551560U));
  #line 1605 
  head = & bc->async_cmd_list;
  #line 1607 
  cif_spin_lock_queue_lock_of_qlcnic_back_channel(& bc->queue_lock);
  #line 1608 
  list_splice_init(head,& del_list);
  #line 1609 
  cif_spin_unlock_queue_lock_of_qlcnic_back_channel(& bc->queue_lock);
  #line 1611 
  __mptr_0 = (void *)del_list.next;
  #line 1611 
  entry = ((struct qlcnic_async_cmd *)__mptr_0);
  #line 1611 
  __mptr_1 = (void *)entry->list.next;
  #line 1612 
  tmp = ((struct qlcnic_async_cmd *)__mptr_1);
  #line 1611 
  while (& entry->list != & del_list) {
    #line 1611 
    void *__mptr_2;
    #line 1612 
    list_del_0(& entry->list);
    #line 1613 
    cmd = entry->cmd;
    #line 1614 
    __qlcnic_sriov_issue_cmd(bc->adapter,cmd);
    #line 1615 
    kfree((void *)entry);
    #line 1611 
    entry = tmp;
    #line 1611 
    __mptr_2 = (void *)tmp->list.next;
    #line 1611 
    tmp = ((struct qlcnic_async_cmd *)__mptr_2);
  }
  #line 1618 
  if (list_empty_0(head) == 0) 
                               #line 1619 
                               cif_queue_work_1(bc->bc_async_wq,& bc->vf_async_work);
  #line 1621 
  return;
}

#line 1625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static struct qlcnic_async_cmd *qlcnic_sriov_alloc_async_cmd(struct qlcnic_back_channel *bc, struct qlcnic_cmd_args *cmd)
{
  #line 1628 
  struct qlcnic_async_cmd *entry = (struct qlcnic_async_cmd *)0;
  #line 1630 
  entry = (struct qlcnic_async_cmd *)kzalloc_1(24UL,2592U);
  #line 1631 
  if (entry == (struct qlcnic_async_cmd *)0) 
                                             #line 1632 
                                             return (struct qlcnic_async_cmd *)0;
  #line 1634 
  entry->cmd = cmd;
  #line 1636 
  cif_spin_lock_queue_lock_of_qlcnic_back_channel(& bc->queue_lock);
  #line 1637 
  list_add_tail_0(& entry->list,& bc->async_cmd_list);
  #line 1638 
  cif_spin_unlock_queue_lock_of_qlcnic_back_channel(& bc->queue_lock);
  #line 1640 
  return entry;
}

#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_schedule_async_cmd(struct qlcnic_back_channel *bc, struct qlcnic_cmd_args *cmd)
{
  #line 1646 
  struct qlcnic_async_cmd *entry = (struct qlcnic_async_cmd *)0;
  #line 1648 
  entry = qlcnic_sriov_alloc_async_cmd(bc,cmd);
  #line 1649 
  if (entry == (struct qlcnic_async_cmd *)0) {
    #line 1650 
    qlcnic_free_mbx_args(cmd);
    #line 1651 
    kfree((void *)cmd);
    #line 1652 
    return;
  }
  #line 1655 
  cif_queue_work_1(bc->bc_async_wq,& bc->vf_async_work);
  #line 1656 
  return;
}

#line 1658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_async_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 1662 
  struct qlcnic_back_channel *bc = & ((adapter->ahw)->sriov)->bc;
  #line 1664 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
                                                  #line 1665 
                                                  return -5;
  #line 1667 
  qlcnic_sriov_schedule_async_cmd(bc,cmd);
  #line 1669 
  return 0;
}

#line 1672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_reinit_driver(struct qlcnic_adapter *adapter)
{
  #line 1674 
  int err;
  #line 1676 
  adapter->need_fw_reset = (unsigned char)0U;
  #line 1677 
  qlcnic_83xx_reinit_mbx_work((adapter->ahw)->mailbox);
  #line 1678 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  #line 1680 
  err = qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)1);
  #line 1681 
  if (err != 0) 
                #line 1682 
                return err;
  #line 1684 
  err = qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)0);
  #line 1685 
  if (err != 0) 
                #line 1686 
                goto err_out_cleanup_bc_intr;
  #line 1688 
  err = qlcnic_sriov_vf_init_driver(adapter);
  #line 1689 
  if (err != 0) 
                #line 1690 
                goto err_out_term_channel;
  #line 1692 
  return 0;
  #line 1694 
  err_out_term_channel: 
                        #line 1694 
  ;
  #line 1695 
  qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)1);
  #line 1697 
  err_out_cleanup_bc_intr: 
                           #line 1697 
  ;
  #line 1698 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  #line 1699 
  return err;
}

#line 1702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_attach(struct qlcnic_adapter *adapter)
{
  #line 1704 
  struct net_device *netdev = adapter->netdev;
  #line 1706 
  if ((int)netif_running(netdev) != 0) {
    #line 1707 
    if (qlcnic_up(adapter,netdev) == 0) 
                                        #line 1708 
                                        qlcnic_restore_indev_addr(netdev,1UL);
  }
  #line 1711 
  netif_device_attach(netdev);
  #line 1712 
  return;
}

#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_detach(struct qlcnic_adapter *adapter)
{
  #line 1719 
  u8 i;
  #line 1716 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1717 
  struct qlcnic_intrpt_config *intr_tbl = ahw->intr_tbl;
  #line 1718 
  struct net_device *netdev = adapter->netdev;
  #line 1719 
  u8 max_ints = (unsigned char)((unsigned int)ahw->num_msix + 255U);
  #line 1721 
  netif_device_detach(netdev);
  #line 1722 
  qlcnic_83xx_detach_mailbox_work(adapter);
  #line 1723 
  qlcnic_83xx_disable_mbx_intr(adapter);
  #line 1725 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1726 
                                       qlcnic_down(adapter,netdev);
  #line 1728 
  i = (unsigned char)0U;
  #line 1728 
  while ((int)i < (int)max_ints) {
    #line 1729 
    (intr_tbl + (unsigned long)i)->id = (unsigned short)i;
    #line 1730 
    (intr_tbl + (unsigned long)i)->enabled = (unsigned char)0U;
    #line 1731 
    (intr_tbl + (unsigned long)i)->src = 0U;
    #line 1728 
    i = (u8)((int)i + 1);
  }
  #line 1733 
  ahw->reset_context = (unsigned char)0U;
  #line 1734 
  return;
}

#line 1736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_handle_dev_ready(struct qlcnic_adapter *adapter)
{
  #line 1742 
  u32 state;
  #line 1738 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1739 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1740 
  struct qlc_83xx_idc *idc = & ahw->idc;
  #line 1741 
  u8 func = ahw->pci_func;
  #line 1744 
  if ((unsigned int)idc->prev_state == 4U || (unsigned int)idc->prev_state == 2U) {
    #line 1746 
    if (qlcnic_sriov_vf_reinit_driver(adapter) == 0) {
      #line 1747 
      qlcnic_sriov_vf_attach(adapter);
      #line 1748 
      adapter->fw_fail_cnt = (unsigned char)0U;
      #line 1749 
      _dev_info(dev,(char *)"%s: Reinitialization of VF 0x%x done after FW reset\n",(char *)"qlcnic_sriov_vf_handle_dev_ready",(int)func);
    }
    else {
      #line 1753 
      _dev_err(dev,(char *)"%s: Reinitialization of VF 0x%x failed after FW reset\n",(char *)"qlcnic_sriov_vf_handle_dev_ready",(int)func);
      #line 1756 
      state = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 12U));
      #line 1757 
      _dev_info(dev,(char *)"Current state 0x%x after FW reset\n",state);
    }
  }
  #line 1762 
  return 0;
}

#line 1765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_handle_context_reset(struct qlcnic_adapter *adapter)
{
  #line 1772 
  u32 state;
  #line 1767 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1768 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  #line 1769 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1770 
  struct qlc_83xx_idc *idc = & ahw->idc;
  #line 1771 
  u8 func = ahw->pci_func;
  #line 1774 
  adapter->reset_ctx_cnt = (u8)((int)adapter->reset_ctx_cnt + 1);
  #line 1777 
  if ((unsigned int)adapter->reset_ctx_cnt <= 2U) {
    #line 1778 
    adapter->need_fw_reset = (unsigned char)1U;
    #line 1779 
    cif_clear_bit_1(2L,& mbx->status);
    #line 1780 
    _dev_info(dev,(char *)"Resetting context, wait here to check if FW is in failed state\n");
    #line 1782 
    return 0;
  }
  #line 1788 
  if ((unsigned int)adapter->reset_ctx_cnt > 8U) {
    #line 1789 
    cif_clear_bit_1(1L,& idc->status);
    #line 1790 
    adapter->tx_timeo_cnt = (unsigned char)0U;
    #line 1791 
    adapter->fw_fail_cnt = (unsigned char)0U;
    #line 1792 
    adapter->reset_ctx_cnt = (unsigned char)0U;
    #line 1793 
    qlcnic_sriov_vf_detach(adapter);
    #line 1794 
    _dev_err(dev,(char *)"Device context resets have exceeded the threshold, device interface will be shutdown\n");
    #line 1796 
    return -5;
  }
  #line 1799 
  _dev_info(dev,(char *)"Resetting context of VF 0x%x\n",(int)func);
  #line 1800 
  _dev_info(dev,(char *)"%s: Context reset count %d for VF 0x%x\n",(char *)"qlcnic_sriov_vf_handle_context_reset",(int)adapter->reset_ctx_cnt,(int)func);
  #line 1802 
  cif_set_bit_1(2L,& adapter->state);
  #line 1803 
  adapter->need_fw_reset = (unsigned char)1U;
  #line 1804 
  cif_clear_bit_1(2L,& mbx->status);
  #line 1805 
  qlcnic_sriov_vf_detach(adapter);
  #line 1806 
  adapter->need_fw_reset = (unsigned char)0U;
  #line 1808 
  if (qlcnic_sriov_vf_reinit_driver(adapter) == 0) {
    #line 1809 
    qlcnic_sriov_vf_attach(adapter);
    #line 1810 
    adapter->tx_timeo_cnt = (unsigned char)0U;
    #line 1811 
    adapter->reset_ctx_cnt = (unsigned char)0U;
    #line 1812 
    adapter->fw_fail_cnt = (unsigned char)0U;
    #line 1813 
    _dev_info(dev,(char *)"Done resetting context for VF 0x%x\n",(int)func);
  }
  else {
    #line 1815 
    _dev_err(dev,(char *)"%s: Reinitialization of VF 0x%x failed\n",(char *)"qlcnic_sriov_vf_handle_context_reset",(int)func);
    #line 1817 
    state = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 12U));
    #line 1818 
    _dev_info(dev,(char *)"%s: Current state 0x%x\n",(char *)"qlcnic_sriov_vf_handle_context_reset",state);
  }
  #line 1821 
  return 0;
}

#line 1824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_ready_state(struct qlcnic_adapter *adapter)
{
  #line 1826 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1827 
  int ret = 0;
  #line 1829 
  if ((unsigned int)ahw->idc.prev_state != 3U) 
                                               #line 1830 
                                               ret = qlcnic_sriov_vf_handle_dev_ready(adapter);
  else 
    #line 1831 
    if ((unsigned int)ahw->reset_context != 0U) 
                                                #line 1832 
                                                ret = qlcnic_sriov_vf_handle_context_reset(adapter);
  #line 1834 
  cif_clear_bit_1(2L,& adapter->state);
  #line 1835 
  return ret;
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_failed_state(struct qlcnic_adapter *adapter)
{
  #line 1840 
  struct qlc_83xx_idc *idc = & (adapter->ahw)->idc;
  #line 1842 
  _dev_err(& (adapter->pdev)->dev,(char *)"Device is in failed state\n");
  #line 1843 
  if ((unsigned int)idc->prev_state == 3U) 
                                           #line 1844 
                                           qlcnic_sriov_vf_detach(adapter);
  #line 1846 
  cif_clear_bit_1(1L,& idc->status);
  #line 1847 
  cif_clear_bit_1(2L,& adapter->state);
  #line 1848 
  return -5;
}

#line 1852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_need_quiescent_state(struct qlcnic_adapter *adapter)
{
  #line 1854 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  #line 1855 
  struct qlc_83xx_idc *idc = & (adapter->ahw)->idc;
  #line 1857 
  _dev_info(& (adapter->pdev)->dev,(char *)"Device is in quiescent state\n");
  #line 1858 
  if ((unsigned int)idc->prev_state == 3U) {
    #line 1859 
    cif_set_bit_1(2L,& adapter->state);
    #line 1860 
    adapter->tx_timeo_cnt = (unsigned char)0U;
    #line 1861 
    adapter->reset_ctx_cnt = (unsigned char)0U;
    #line 1862 
    cif_clear_bit_1(2L,& mbx->status);
    #line 1863 
    qlcnic_sriov_vf_detach(adapter);
  }
  #line 1866 
  return 0;
}

#line 1869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_init_reset_state(struct qlcnic_adapter *adapter)
{
  #line 1871 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  #line 1872 
  struct qlc_83xx_idc *idc = & (adapter->ahw)->idc;
  #line 1873 
  u8 func = (adapter->ahw)->pci_func;
  #line 1875 
  if ((unsigned int)idc->prev_state == 3U) {
    #line 1876 
    _dev_err(& (adapter->pdev)->dev,(char *)"Firmware hang detected by VF 0x%x\n",(int)func);
    #line 1878 
    cif_set_bit_1(2L,& adapter->state);
    #line 1879 
    adapter->tx_timeo_cnt = (unsigned char)0U;
    #line 1880 
    adapter->reset_ctx_cnt = (unsigned char)0U;
    #line 1881 
    cif_clear_bit_1(2L,& mbx->status);
    #line 1882 
    qlcnic_sriov_vf_detach(adapter);
  }
  #line 1884 
  return 0;
}

#line 1887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_unknown_state(struct qlcnic_adapter *adapter)
{
  #line 1889 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: Device in unknown state\n",(char *)"qlcnic_sriov_vf_idc_unknown_state");
  #line 1890 
  return 0;
}

#line 1893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_periodic_tasks(struct qlcnic_adapter *adapter)
{
  #line 1895 
  if ((unsigned int)adapter->fhash.fnum != 0U) 
                                               #line 1896 
                                               qlcnic_prune_lb_filters(adapter);
  #line 1897 
  return;
}

#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_poll_dev_state(struct work_struct *work)
{
  #line 1905 
  void *__mptr;
  #line 1901 
  struct qlcnic_adapter *adapter;
  #line 1902 
  struct qlc_83xx_idc *idc;
  #line 1903 
  int ret = 0;
  #line 1905 
  __mptr = (void *)work;
  #line 1905 
  adapter = ((struct qlcnic_adapter *)(__mptr + 18446744073709550704U));
  #line 1906 
  idc = & (adapter->ahw)->idc;
  #line 1907 
  idc->curr_state = (unsigned char)readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
  #line 1909 
  switch ((int)idc->curr_state) {
    #line 1910 
    case 3: 
            #line 1910 
    ;
    #line 1911 
    ret = qlcnic_sriov_vf_idc_ready_state(adapter);
    #line 1912 
    break;
    #line 1913 
    case 4: 
            #line 1913 
    ;
    #line 1914 
    case 2: 
            #line 1914 
    ;
    #line 1915 
    ret = qlcnic_sriov_vf_idc_init_reset_state(adapter);
    #line 1916 
    break;
    #line 1917 
    case 5: 
            #line 1917 
    ;
    #line 1918 
    ret = qlcnic_sriov_vf_idc_need_quiescent_state(adapter);
    #line 1919 
    break;
    #line 1920 
    case 6: 
            #line 1920 
    ;
    #line 1921 
    ret = qlcnic_sriov_vf_idc_failed_state(adapter);
    #line 1922 
    break;
    #line 1923 
    case 7: 
            #line 1923 
    ;
    #line 1924 
    break;
    #line 1925 
    default: 
             #line 1925 
    ;
    #line 1926 
    ret = qlcnic_sriov_vf_idc_unknown_state(adapter);
  }
  #line 1929 
  idc->prev_state = idc->curr_state;
  #line 1930 
  qlcnic_sriov_vf_periodic_tasks(adapter);
  #line 1932 
  if (ret == 0) {
    #line 1932 
    if ((int)test_bit(1L,& idc->status) != 0) 
                                              #line 1933 
                                              qlcnic_schedule_work(adapter,& qlcnic_sriov_vf_poll_dev_state,(int)idc->delay);
  }
  #line 1935 
  return;
}

#line 1937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_cancel_fw_work(struct qlcnic_adapter *adapter)
{
  #line 1939 
  while (1) {
    #line 1939 
    if (! ((int)test_and_set_bit(2L,& adapter->state) != 0)) 
                                                             #line 1939 
                                                             break;
    #line 1940 
    msleep(20U);
  }
  #line 1942 
  cif_clear_bit_1(1L,& (adapter->ahw)->idc.status);
  #line 1943 
  cif_clear_bit_1(2L,& adapter->state);
  #line 1944 
  cancel_delayed_work_sync(& adapter->fw_work);
  #line 1945 
  return;
}

#line 1947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_check_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id)
{
  #line 1950 
  int i;
  #line 1950 
  int err = -22;
  #line 1952 
  if (vf->sriov_vlans == (u16 *)0U) 
                                    #line 1953 
                                    return err;
  #line 1955 
  cif_spin_lock_bh_vlan_list_lock_of_qlcnic_vf_info_0(& vf->vlan_list_lock);
  #line 1957 
  i = 0;
  #line 1957 
  while ((int)sriov->num_allowed_vlans > i) {
    #line 1958 
    if ((int)*(vf->sriov_vlans + (unsigned long)i) == (int)vlan_id) {
      #line 1959 
      err = 0;
      #line 1960 
      break;
    }
    #line 1957 
    i ++;
  }
  #line 1964 
  cif_spin_unlock_bh_vlan_list_lock_of_qlcnic_vf_info_0(& vf->vlan_list_lock);
  #line 1965 
  return err;
}

#line 1968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_validate_num_vlans(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf)
{
  #line 1971 
  int err = 0;
  #line 1973 
  cif_spin_lock_bh_vlan_list_lock_of_qlcnic_vf_info_0(& vf->vlan_list_lock);
  #line 1975 
  if (vf->num_vlan >= (int)sriov->num_allowed_vlans) 
                                                     #line 1976 
                                                     err = -22;
  #line 1978 
  cif_spin_unlock_bh_vlan_list_lock_of_qlcnic_vf_info_0(& vf->vlan_list_lock);
  #line 1979 
  return err;
}

#line 1982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_validate_vlan_cfg(struct qlcnic_adapter *adapter, u16 vid, u8 enable)
{
  #line 1986 
  struct qlcnic_vf_info *vf;
  #line 1987 
  bool vlan_exist;
  #line 1989 
  int i;
  #line 1985 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 1988 
  u8 allowed = (unsigned char)0U;
  #line 1991 
  vf = ((adapter->ahw)->sriov)->vf_info;
  #line 1992 
  vlan_exist = qlcnic_sriov_check_any_vlan(vf);
  #line 1993 
  if ((unsigned int)sriov->vlan_mode != 2U) 
                                            #line 1994 
                                            return -22;
  #line 1996 
  if ((unsigned int)enable != 0U) {
    #line 1997 
    if ((int)qlcnic_83xx_vf_check(adapter) != 0) 
      #line 1997 
      if ((int)vlan_exist != 0) 
                                #line 1998 
                                return -22;
    #line 2000 
    if (qlcnic_sriov_validate_num_vlans(sriov,vf) != 0) 
                                                        #line 2001 
                                                        return -22;
    #line 2003 
    if ((unsigned int)sriov->any_vlan != 0U) {
      #line 2004 
      i = 0;
      #line 2004 
      while ((int)sriov->num_allowed_vlans > i) {
        #line 2005 
        if ((int)*(sriov->allowed_vlans + (unsigned long)i) == (int)vid) 
          #line 2006 
          allowed = (unsigned char)1U;
        #line 2004 
        i ++;
      }
      #line 2009 
      if ((unsigned int)allowed == 0U) 
                                       #line 2010 
                                       return -22;
    }
  }
  else 
    #line 2013 
    if (! vlan_exist) 
                      #line 2014 
                      return -22;
    else {
      #line 2013 
      if (qlcnic_sriov_check_vlan_id(sriov,vf,(unsigned short)((int)vid)) != 0) 
        #line 2014 
        return -22;
    }
  #line 2017 
  return 0;
}

#line 2020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vlan_operation(struct qlcnic_vf_info *vf, u16 vlan_id, enum qlcnic_vlan_operations opcode)
{
  #line 2024 
  struct qlcnic_sriov *sriov;
  #line 2023 
  struct qlcnic_adapter *adapter = vf->adapter;
  #line 2026 
  sriov = (adapter->ahw)->sriov;
  #line 2028 
  if (vf->sriov_vlans == (u16 *)0U) 
                                    #line 2029 
                                    return;
  #line 2031 
  cif_spin_lock_bh_vlan_list_lock_of_qlcnic_vf_info_0(& vf->vlan_list_lock);
  #line 2033 
  switch ((unsigned int)opcode) {
    #line 2034 
    case (unsigned int)0: 
                          #line 2034 
    ;
    #line 2035 
    qlcnic_sriov_add_vlan_id(sriov,vf,(unsigned short)((int)vlan_id));
    #line 2036 
    break;
    #line 2037 
    case (unsigned int)1: 
                          #line 2037 
    ;
    #line 2038 
    qlcnic_sriov_del_vlan_id(sriov,vf,(unsigned short)((int)vlan_id));
    #line 2039 
    break;
    #line 2040 
    default: 
             #line 2040 
    ;
    #line 2041 
    netdev_err(adapter->netdev,(char *)"Invalid VLAN operation\n");
  }
  #line 2044 
  cif_spin_unlock_bh_vlan_list_lock_of_qlcnic_vf_info_0(& vf->vlan_list_lock);
  #line 2045 
  return;
}

#line 2048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_cfg_vf_guest_vlan(struct qlcnic_adapter *adapter, u16 vid, u8 enable)
{
  #line 2053 
  struct qlcnic_vf_info *vf;
  #line 2054 
  struct qlcnic_cmd_args cmd;
  #line 2055 
  int ret;
  #line 2051 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 2052 
  struct net_device *netdev = adapter->netdev;
  #line 2057 
  memset((void *)(& cmd),0,200UL);
  #line 2058 
  if ((unsigned int)vid == 0U) 
                               #line 2059 
                               return 0;
  #line 2061 
  vf = ((adapter->ahw)->sriov)->vf_info;
  #line 2062 
  ret = qlcnic_sriov_validate_vlan_cfg(adapter,(unsigned short)((int)vid),(unsigned char)((int)enable));
  #line 2063 
  if (ret != 0) 
                #line 2064 
                return ret;
  #line 2066 
  ret = qlcnic_sriov_alloc_bc_mbx_args(& cmd,3U);
  #line 2068 
  if (ret != 0) 
                #line 2069 
                return ret;
  #line 2071 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)enable & 1) | ((int)vid << 16));
  #line 2073 
  qlcnic_sriov_cleanup_async_list(& sriov->bc);
  #line 2074 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  #line 2075 
  if (ret != 0) 
                #line 2076 
                _dev_err(& (adapter->pdev)->dev,(char *)"Failed to configure guest VLAN, err=%d\n",ret);
  else {
    #line 2079 
    netif_addr_lock_bh(netdev);
    #line 2080 
    qlcnic_free_mac_list(adapter);
    #line 2081 
    netif_addr_unlock_bh(netdev);
    #line 2083 
    if ((unsigned int)enable != 0U) 
                                    #line 2084 
                                    qlcnic_sriov_vlan_operation(vf,(unsigned short)((int)vid),(enum qlcnic_vlan_operations)QLC_VLAN_ADD); else 
                                                                    #line 2086 
                                                                    qlcnic_sriov_vlan_operation(vf,(unsigned short)((int)vid),(enum qlcnic_vlan_operations)QLC_VLAN_DELETE);
    #line 2088 
    netif_addr_lock_bh(netdev);
    #line 2089 
    qlcnic_set_multi(netdev);
    #line 2090 
    netif_addr_unlock_bh(netdev);
  }
  #line 2093 
  qlcnic_free_mbx_args(& cmd);
  #line 2094 
  return ret;
}

#line 2097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_free_mac_list(struct qlcnic_adapter *adapter)
{
  #line 2100 
  struct qlcnic_mac_vlan_list *cur;
  #line 2099 
  struct list_head *head = & adapter->mac_list;
  #line 2102 
  while (1) {
    #line 2102 
    if (! (list_empty_0(head) == 0)) 
                                     #line 2102 
                                     break;
    {
      #line 2103 
      void *__mptr;
      #line 2103 
      __mptr = (void *)head->next;
      #line 2103 
      cur = ((struct qlcnic_mac_vlan_list *)__mptr);
      #line 2104 
      qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)((int)cur->vlan_id),(unsigned char)2);
      #line 2106 
      list_del_0(& cur->list);
      #line 2107 
      kfree((void *)cur);
    }
  }
  #line 2109 
  return;
}

#line 2112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_shutdown(struct pci_dev *pdev)
{
  #line 2116 
  int retval;
  #line 2114 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 2115 
  struct net_device *netdev = adapter->netdev;
  #line 2118 
  netif_device_detach(netdev);
  #line 2119 
  qlcnic_cancel_idc_work(adapter);
  #line 2121 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2122 
                                       qlcnic_down(adapter,netdev);
  #line 2124 
  qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)1);
  #line 2125 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  #line 2126 
  qlcnic_83xx_disable_mbx_intr(adapter);
  #line 2127 
  cancel_delayed_work_sync(& adapter->idc_aen_work);
  #line 2129 
  retval = pci_save_state(pdev);
  #line 2130 
  if (retval != 0) 
                   #line 2131 
                   return retval;
  #line 2133 
  return 0;
}

#line 2136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_resume(struct qlcnic_adapter *adapter)
{
  #line 2140 
  int err;
  #line 2138 
  struct qlc_83xx_idc *idc = & (adapter->ahw)->idc;
  #line 2139 
  struct net_device *netdev = adapter->netdev;
  #line 2142 
  cif_set_bit_1(1L,& idc->status);
  #line 2143 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  #line 2144 
  err = qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)1);
  #line 2145 
  if (err != 0) 
                #line 2146 
                return err;
  #line 2148 
  err = qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)0);
  #line 2149 
  if (err == 0) {
    #line 2150 
    if ((int)netif_running(netdev) != 0) {
      #line 2151 
      err = qlcnic_up(adapter,netdev);
      #line 2152 
      if (err == 0) 
                    #line 2153 
                    qlcnic_restore_indev_addr(netdev,1UL);
    }
  }
  #line 2157 
  netif_device_attach(netdev);
  #line 2158 
  qlcnic_schedule_work(adapter,& qlcnic_sriov_vf_poll_dev_state,(int)idc->delay);
  #line 2160 
  return err;
}

#line 2163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_alloc_vlans(struct qlcnic_adapter *adapter)
{
  #line 2166 
  struct qlcnic_vf_info *vf;
  #line 2167 
  int i;
  #line 2165 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 2169 
  i = 0;
  #line 2169 
  while ((int)sriov->num_vfs > i) {
    #line 2170 
    vf = sriov->vf_info + (unsigned long)i;
    #line 2171 
    vf->sriov_vlans = (u16 *)kcalloc_0((unsigned long)sriov->num_allowed_vlans,2UL,3264U);
    #line 2169 
    i ++;
  }
  #line 2173 
  return;
}

#line 2176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_free_vlans(struct qlcnic_adapter *adapter)
{
  #line 2179 
  struct qlcnic_vf_info *vf;
  #line 2180 
  int i;
  #line 2178 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  #line 2182 
  i = 0;
  #line 2182 
  while ((int)sriov->num_vfs > i) {
    #line 2183 
    vf = sriov->vf_info + (unsigned long)i;
    #line 2184 
    kfree((void *)vf->sriov_vlans);
    #line 2185 
    vf->sriov_vlans = (u16 *)0U;
    #line 2182 
    i ++;
  }
  #line 2187 
  return;
}

#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_add_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id)
{
  #line 2192 
  int i;
  #line 2194 
  i = 0;
  #line 2194 
  while ((int)sriov->num_allowed_vlans > i) {
    #line 2195 
    if ((unsigned int)*(vf->sriov_vlans + (unsigned long)i) == 0U) {
      #line 2196 
      *(vf->sriov_vlans + (unsigned long)i) = vlan_id;
      #line 2197 
      (vf->num_vlan) ++;
      #line 2198 
      return;
    }
    #line 2194 
    i ++;
  }
  #line 2200 
  return;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_del_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id)
{
  #line 2206 
  int i;
  #line 2208 
  i = 0;
  #line 2208 
  while ((int)sriov->num_allowed_vlans > i) {
    #line 2209 
    if ((int)*(vf->sriov_vlans + (unsigned long)i) == (int)vlan_id) {
      #line 2210 
      *(vf->sriov_vlans + (unsigned long)i) = (unsigned short)0U;
      #line 2211 
      (vf->num_vlan) --;
      #line 2212 
      return;
    }
    #line 2208 
    i ++;
  }
  #line 2214 
  return;
}

#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
bool qlcnic_sriov_check_any_vlan(struct qlcnic_vf_info *vf)
{
  #line 2219 
  bool err = (_Bool)0;
  #line 2221 
  cif_spin_lock_bh_vlan_list_lock_of_qlcnic_vf_info_0(& vf->vlan_list_lock);
  #line 2223 
  if (vf->num_vlan != 0) 
                         #line 2224 
                         err = (_Bool)1;
  #line 2226 
  cif_spin_unlock_bh_vlan_list_lock_of_qlcnic_vf_info_0(& vf->vlan_list_lock);
  #line 2227 
  return err;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static bool cif_queue_work_1(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 309 
  return emg_queue_work(wq,work);
}

#line 473  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  #line 476 
  return ldv_kcalloc(n,size,flags);
}

#line 494  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 497 
  return ldv_kzalloc(size,flags);
}

#line 640  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 643 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 645 
  spin_lock_bh_1(lock);
  #line 646 
  return;
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 661 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 663 
  spin_unlock_bh_1(lock);
  #line 664 
  return;
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif___ldv_spin_lock_lock_of_qlcnic_trans_list_0(spinlock_t *lock)
{
  #line 811 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_trans_list");
  #line 813 
  __ldv_spin_lock(lock);
  #line 814 
  return;
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_qlcnic_trans_list_0(spinlock_t *lock, unsigned long flags)
{
  #line 820 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_trans_list");
  #line 822 
  spin_unlock_irqrestore_1(lock,flags);
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_mutex_lock_send_cmd_lock_of_qlcnic_vf_info(struct mutex *lock)
{
  #line 829 
  ldv_mutex_model_lock(lock,(char *)"send_cmd_lock_of_qlcnic_vf_info");
  #line 830 
  return;
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_mutex_unlock_send_cmd_lock_of_qlcnic_vf_info(struct mutex *lock)
{
  #line 836 
  ldv_mutex_model_unlock(lock,(char *)"send_cmd_lock_of_qlcnic_vf_info");
  #line 837 
  return;
}

#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_lock_of_qlcnic_trans_list(spinlock_t *lock)
{
  #line 843 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_trans_list");
  #line 845 
  spin_lock(lock);
  #line 846 
  return;
}

#line 849  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_lock_of_qlcnic_trans_list(spinlock_t *lock)
{
  #line 852 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_trans_list");
  #line 854 
  spin_unlock(lock);
  #line 855 
  return;
}

#line 858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_vlan_list_lock_of_qlcnic_vf_info(spinlock_t *lock)
{
  #line 861 
  ldv_spin_model_lock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  #line 863 
  spin_lock(lock);
  #line 864 
  return;
}

#line 867  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_vlan_list_lock_of_qlcnic_vf_info(spinlock_t *lock)
{
  #line 870 
  ldv_spin_model_unlock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  #line 872 
  spin_unlock(lock);
  #line 873 
  return;
}

#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_queue_lock_of_qlcnic_back_channel(spinlock_t *lock)
{
  #line 879 
  ldv_spin_model_lock((char *)"queue_lock_of_qlcnic_back_channel");
  #line 881 
  spin_lock(lock);
  #line 882 
  return;
}

#line 885  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_queue_lock_of_qlcnic_back_channel(spinlock_t *lock)
{
  #line 888 
  ldv_spin_model_unlock((char *)"queue_lock_of_qlcnic_back_channel");
  #line 890 
  spin_unlock(lock);
  #line 891 
  return;
}

#line 894  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_lock_bh_vlan_list_lock_of_qlcnic_vf_info_0(spinlock_t *lock)
{
  #line 897 
  ldv_spin_model_lock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  #line 899 
  spin_lock_bh_1(lock);
  #line 900 
  return;
}

#line 903  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sriov_common.i.aux"
static void cif_spin_unlock_bh_vlan_list_lock_of_qlcnic_vf_info_0(spinlock_t *lock)
{
  #line 906 
  ldv_spin_model_unlock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  #line 908 
  spin_unlock_bh_1(lock);
  #line 909 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr);
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 183 
int __printk_ratelimit(char *);
#line 204 
#line 204 
void dump_stack(void);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_1(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2925 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_1(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_1(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_1(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_2927 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_1(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_1(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_1(struct list_head *entry)
{
  #line 139 
  __list_del_entry_1(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_1(struct list_head *head)
{
  #line 269 
  union __anonunion___u_2929 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_2933 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  #line 769 
  __hlist_del(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwlock_api_smp.h"
#line 26 
unsigned long _raw_write_lock_irqsave(rwlock_t *);
#line 40 
#line 40 
void _raw_write_unlock_irqrestore(rwlock_t *, unsigned long);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_2(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 564  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_lock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_lock_bh_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_lock_bh_rx_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_2(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 604  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_unlock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_unlock_bh_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_unlock_bh_rx_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock);
#line 26 
#line 851 
static void cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_0(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_0(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeq(u64 val, void *addr)
{
  #line 99 
  ldv_inline_asm();
  #line 100 
  return;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags);
#line 3130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_2(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock_bh(struct netdev_queue *txq)
{
  #line 3954 
  int pscr_ret__;
  #line 3953 
  cif_spin_lock_bh__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3954 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 3954 
    void *__vpp_verify = (void *)0;
    #line 3954 
    void *tmp = __vpp_verify;
  }
  #line 3954 
  switch (4UL) {
    #line 3954 
    int pfo_ret___1;
    #line 3954 
    int pfo_ret___2;
    #line 3954 
    int pfo_ret__;
    #line 3954 
    int pfo_ret___0;
    #line 3954 
    case (unsigned long)1: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret__;
    #line 3954 
    break;
    #line 3954 
    case (unsigned long)2: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret___0;
    #line 3954 
    break;
    #line 3954 
    case (unsigned long)4: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret___1;
    #line 3954 
    break;
    #line 3954 
    case (unsigned long)8: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret___2;
    #line 3954 
    break;
    #line 3954 
    default: 
             #line 3954 
    ;
    #line 3954 
    __bad_size_call_parameter();
    #line 3954 
    break;
  }
  #line 3954 
  txq->xmit_lock_owner = pscr_ret__;
  #line 3957 
  return;
}

#line 3971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock_bh(struct netdev_queue *txq)
{
  #line 3973 
  txq->xmit_lock_owner = -1;
  #line 3974 
  cif_spin_unlock_bh__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3975 
  return;
}

#line 1085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1237 
#line 1237 
int pci_enable_wake(struct pci_dev *, pci_power_t, bool);
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_hw_read_wx_2M(struct qlcnic_adapter *adapter, ulong off, int *err);
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_hw_write_wx_2M(struct qlcnic_adapter *adapter, ulong off, u32 data);
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_hw_lro(struct qlcnic_adapter *adapter, int enable);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode);
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_get_beacon_state(struct qlcnic_adapter *adapter);
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_intr_coalesce(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal);
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_set_rx_coalesce(struct qlcnic_adapter *adapter);
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_rss(struct qlcnic_adapter *adapter, int enable);
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int cmd);
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_linkevent_request(struct qlcnic_adapter *adapter, int enable);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode);
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan_id, u8 op);
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_get_board_info(struct qlcnic_adapter *adapter);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_get_func_no(struct qlcnic_adapter *adapter);
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_api_lock(struct qlcnic_adapter *adapter);
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_api_unlock(struct qlcnic_adapter *adapter);
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_shutdown(struct pci_dev *pdev);
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 1677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_resume(struct qlcnic_adapter *adapter);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 218 
void qlcnic_clr_all_drv_state(struct qlcnic_adapter *adapter, u8 failed);
#line 219 
#line 219 
void qlcnic_fw_poll_work(struct work_struct *work);
#line 1544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_pci_mem_write_2M(struct qlcnic_adapter *adapter, u64 off, u64 data);
#line 1545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_pci_mem_read_2M(struct qlcnic_adapter *adapter, u64 off, u64 *data);
#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_pcie_sem_lock(struct qlcnic_adapter *adapter, int sem, u32 id_reg);
#line 1557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_pcie_sem_unlock(struct qlcnic_adapter *adapter, int sem);
#line 1582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_delete_lb_filters(struct qlcnic_adapter *adapter);
#line 1597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1597 
int qlcnic_rom_fast_read(struct qlcnic_adapter *adapter, u32 addr, u32 *valp);
#line 1603 
#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void *qlcnic_get_ioaddr(struct qlcnic_hardware_context *ahw, u32 offset);
#line 1624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_nic_del_mac(struct qlcnic_adapter *adapter, u8 *addr);
#line 1626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_read_phys_port_id(struct qlcnic_adapter *adapter);
#line 1628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1628 
int qlcnic_fw_cmd_set_mtu(struct qlcnic_adapter *adapter, int mtu);
#line 1630 
#line 1015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_change_mtu(struct net_device *netdev, int mtu);
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
unsigned long long qlcnic_fix_features(struct net_device *netdev, netdev_features_t features);
#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_set_features(struct net_device *netdev, netdev_features_t features);
#line 1635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1635 
void qlcnic_update_cmd_producer(struct qlcnic_host_tx_ring *tx_ring);
#line 1726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static u32 qlcnic_tx_avail(struct qlcnic_host_tx_ring *tx_ring)
{
  #line 1728 
  if ((long)(tx_ring->producer < tx_ring->sw_consumer) != 0L) 
                                                              #line 1729 
                                                              return tx_ring->sw_consumer - tx_ring->producer; else 
                                                                    #line 1731 
                                                                    return (tx_ring->sw_consumer + tx_ring->num_desc) - tx_ring->producer;
}

#line 1866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_start_firmware(struct qlcnic_adapter *adapter)
{
  #line 1868 
  return (*((adapter->nic_ops)->start_firmware))(adapter);
}

#line 1889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function)
{
  #line 1892 
  return (*(((adapter->ahw)->hw_ops)->get_mac_address))(adapter,mac,
                                                     (unsigned char)((int)function));
}

#line 2045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_config_hw_lro(struct qlcnic_adapter *adapter, int enable)
{
  #line 2048 
  return (*(((adapter->ahw)->hw_ops)->config_hw_lro))(adapter,enable);
}

#line 2323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_82xx_check(struct qlcnic_adapter *adapter)
{
  #line 2325 
  unsigned short device = (adapter->pdev)->device;
  #line 2326 
  return (_Bool)((unsigned int)device == 32800U);
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static struct crb_128M_2M_block_map crb_128M_2M_map[64U] = {[1] = {.sub_block = {{.valid = 1U, .start_128M = 1048576U, .end_128M = 1056768U, .start_2M = 1179648U}, {.valid = 1U, .start_128M = 1114112U, .end_128M = 1179648U, .start_2M = 1245184U}, {.valid = 1U, .start_128M = 1179648U, .end_128M = 1187840U, .start_2M = 1196032U}, {.valid = 1U, .start_128M = 1245184U, .end_128M = 1253376U, .start_2M = 1204224U}, {.valid = 1U, .start_128M = 1310720U, .end_128M = 1318912U, .start_2M = 1212416U}, {.valid = 1U, .start_128M = 1376256U, .end_128M = 1384448U, .start_2M = 1220608U}, {.valid = 1U, .start_128M = 1441792U, .end_128M = 1507328U, .start_2M = 1114112U}, {.valid = 1U, .start_128M = 1507328U, .end_128M = 1515520U, .start_2M = 1236992U}, [14] = {.valid = 1U, .start_128M = 1966080U, .end_128M = 1968128U, .start_2M = 1187840U}}}, {.sub_block = {{.valid = 1U, .start_128M = 2097152U, .end_128M = 2162688U, .start_2M = 1572864U}}}, [4] = {.sub_block = {{.valid = 1U, .start_128M = 4194304U, .end_128M = 4198400U, .start_2M = 1478656U}}}, {.sub_block = {{.valid = 1U, .start_128M = 5242880U, .end_128M = 5308416U, .start_2M = 1310720U}}}, {.sub_block = {{.valid = 1U, .start_128M = 6291456U, .end_128M = 6356992U, .start_2M = 1835008U}}}, {.sub_block = {{.valid = 1U, .start_128M = 7340032U, .end_128M = 7356416U, .start_2M = 1802240U}}}, {.sub_block = {{.valid = 1U, .start_128M = 8388608U, .end_128M = 8396800U, .start_2M = 1507328U}, [15] = {.valid = 1U, .start_128M = 9371648U, .end_128M = 9379840U, .start_2M = 1515520U}}}, {.sub_block = {{.valid = 1U, .start_128M = 9437184U, .end_128M = 9445376U, .start_2M = 1523712U}, [15] = {.valid = 1U, .start_128M = 10420224U, .end_128M = 10428416U, .start_2M = 1531904U}}}, {.sub_block = {{.start_128M = 10485760U, .end_128M = 10493952U, .start_2M = 1540096U}, [15] = {.valid = 1U, .start_128M = 11468800U, .end_128M = 11476992U, .start_2M = 1548288U}}}, {.sub_block = {{.start_128M = 11534336U, .end_128M = 11542528U, .start_2M = 1556480U}, [15] = {.valid = 1U, .start_128M = 12517376U, .end_128M = 12525568U, .start_2M = 1564672U}}}, {.sub_block = {{.valid = 1U, .start_128M = 12582912U, .end_128M = 12599296U, .start_2M = 1916928U}}}, {.sub_block = {{.valid = 1U, .start_128M = 13631488U, .end_128M = 13647872U, .start_2M = 1720320U}}}, {.sub_block = {{.valid = 1U, .start_128M = 14680064U, .end_128M = 14696448U, .start_2M = 1703936U}}}, {.sub_block = {{.valid = 1U, .start_128M = 15728640U, .end_128M = 15732736U, .start_2M = 1458176U}}}, {.sub_block = {{.start_128M = 16777216U, .end_128M = 16793600U, .start_2M = 1736704U}}}, {.sub_block = {{.valid = 1U, .start_128M = 17825792U, .end_128M = 17829888U, .start_2M = 1441792U}}}, {.sub_block = {{.valid = 1U, .start_128M = 18874368U, .end_128M = 18878464U, .start_2M = 1445888U}}}, {.sub_block = {{.valid = 1U, .start_128M = 19922944U, .end_128M = 19927040U, .start_2M = 1449984U}}}, {.sub_block = {{.valid = 1U, .start_128M = 20971520U, .end_128M = 20975616U, .start_2M = 1454080U}}}, {.sub_block = {{.valid = 1U, .start_128M = 22020096U, .end_128M = 22024192U, .start_2M = 1462272U}}}, {.sub_block = {{.valid = 1U, .start_128M = 23068672U, .end_128M = 23072768U, .start_2M = 1466368U}}}, [29] = {.sub_block = {{.valid = 1U, .start_128M = 30408704U, .end_128M = 30474240U, .start_2M = 1638400U}}}, {.sub_block = {{.valid = 1U, .start_128M = 31457280U, .end_128M = 31461376U, .start_2M = 1482752U}}}, {.sub_block = {{.valid = 1U, .start_128M = 32505856U, .end_128M = 32571392U, .start_2M = 1376256U}}}, [33] = {.sub_block = {{.valid = 1U, .start_128M = 34603008U, .end_128M = 34611200U, .start_2M = 1179648U}, {.valid = 1U, .start_128M = 34668544U, .end_128M = 34734080U, .start_2M = 1245184U}, {.valid = 1U, .start_128M = 34734080U, .end_128M = 34742272U, .start_2M = 1196032U}, {.valid = 1U, .start_128M = 34799616U, .end_128M = 34807808U, .start_2M = 1204224U}, {.valid = 1U, .start_128M = 34865152U, .end_128M = 34873344U, .start_2M = 1212416U}, {.valid = 1U, .start_128M = 34930688U, .end_128M = 34938880U, .start_2M = 1220608U}, {.valid = 1U, .start_128M = 34996224U, .end_128M = 35061760U, .start_2M = 1114112U}, {.valid = 1U, .start_128M = 35061760U, .end_128M = 35069952U, .start_2M = 1236992U}}}, {.sub_block = {{.valid = 1U, .start_128M = 35651584U, .end_128M = 35667968U, .start_2M = 1769472U}}}, [40] = {.sub_block = {{.valid = 1U, .start_128M = 41943040U, .end_128M = 41959424U, .start_2M = 1720320U}}}, {.sub_block = {{.valid = 1U, .start_128M = 42991616U, .end_128M = 42995712U, .start_2M = 1486848U}}}, {.sub_block = {{.valid = 1U, .start_128M = 44040192U, .end_128M = 44041216U, .start_2M = 1754112U}}}, {.sub_block = {{.valid = 1U, .start_128M = 45088768U, .end_128M = 45089792U, .start_2M = 1755136U}}}, {.sub_block = {{.valid = 1U, .start_128M = 46137344U, .end_128M = 46138368U, .start_2M = 1756160U}}}, {.sub_block = {{.valid = 1U, .start_128M = 47185920U, .end_128M = 47186944U, .start_2M = 1757184U}}}, {.sub_block = {{.valid = 1U, .start_128M = 48234496U, .end_128M = 48235520U, .start_2M = 1758208U}}}, {.sub_block = {{.valid = 1U, .start_128M = 49283072U, .end_128M = 49284096U, .start_2M = 1759232U}}}, {.sub_block = {{.valid = 1U, .start_128M = 50331648U, .end_128M = 50332672U, .start_2M = 1760256U}}}, {.sub_block = {{.start_128M = 51380224U, .end_128M = 51396608U, .start_2M = 1736704U}}}, {.sub_block = {{.valid = 1U, .start_128M = 52428800U, .end_128M = 52445184U, .start_2M = 1916928U}}}, {.sub_block = {{.valid = 1U, .start_128M = 53477376U, .end_128M = 53493760U, .start_2M = 1703936U}}}, [53] = {.sub_block = {{.valid = 1U, .start_128M = 55574528U, .end_128M = 55575552U, .start_2M = 1753088U}}}, {.sub_block = {{.valid = 1U, .start_128M = 56623104U, .end_128M = 56624128U, .start_2M = 1761280U}}}, {.sub_block = {{.valid = 1U, .start_128M = 57671680U, .end_128M = 57672704U, .start_2M = 1762304U}}}, {.sub_block = {{.valid = 1U, .start_128M = 58720256U, .end_128M = 58736640U, .start_2M = 1900544U}}}, {.sub_block = {{.valid = 1U, .start_128M = 59768832U, .end_128M = 59785216U, .start_2M = 1785856U}}}, {.sub_block = {{.valid = 1U, .start_128M = 60817408U, .end_128M = 60833792U, .start_2M = 1933312U}}}, [61] = {.sub_block = {{.valid = 1U, .start_128M = 63963136U, .end_128M = 63979520U, .start_2M = 1933312U}}}, {.sub_block = {{.valid = 1U, .start_128M = 65011712U, .end_128M = 65015808U, .start_2M = 1470464U}}}, {.sub_block = {{.valid = 1U, .start_128M = 66060288U, .end_128M = 66064384U, .start_2M = 1474560U}}}};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static unsigned int crb_hub_agt[64U] = {[1] = 1907U, 661U, 677U, [5] = 208U, 433U, 230U, 224U, 225U, 226U, 227U, 1056U, 1047U, 1057U, 843U, 1029U, 832U, 833U, 834U, 835U, 837U, 836U, 960U, 961U, 962U, 963U, [28] = 964U, 1040U, [31] = 209U, [33] = 1907U, 1046U, [40] = 1047U, [42] = 137U, 1802U, 1803U, 1804U, 141U, 142U, 1807U, 1029U, 1056U, 1057U, [53] = 136U, 145U, 1810U, 1030U, [58] = 1816U, 409U, 425U, [62] = 838U};
#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_read_window_reg(u32 addr, void *bar0, u32 *data)
{
  #line 285 
  u32 dest;
  #line 286 
  void *val;
  #line 288 
  dest = addr & 4294901760U;
  #line 289 
  val = bar0 + 1245280U;
  #line 290 
  writel(dest,val);
  #line 291 
  readl(val);
  #line 292 
  val = bar0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U);
  #line 293 
  *data = readl(val);
  #line 294 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_write_window_reg(u32 addr, void *bar0, u32 data)
{
  #line 298 
  u32 dest;
  #line 299 
  void *val;
  #line 301 
  dest = addr & 4294901760U;
  #line 302 
  val = bar0 + 1245280U;
  #line 303 
  writel(dest,val);
  #line 304 
  readl(val);
  #line 305 
  val = bar0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U);
  #line 306 
  writel(data,val);
  #line 307 
  readl(val);
  #line 308 
  return;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_pcie_sem_lock(struct qlcnic_adapter *adapter, int sem, u32 id_reg)
{
  #line 313 
  int timeout = 0;
  #line 313 
  int err = 0;
  #line 313 
  int done = 0;
  #line 315 
  while (done == 0) {
    #line 316 
    done = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)((sem + 14336) * 8) + 101711872UL,& err);
    #line 318 
    if (done == 1) 
                   #line 319 
                   break;
    #line 320 
    timeout ++;
    #line 320 
    if (timeout > 9999) {
      #line 321 
      if (id_reg != 0U) {
        #line 322 
        done = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)id_reg,& err);
        #line 323 
        if (done != -1) 
                        #line 324 
                        _dev_err(& (adapter->pdev)->dev,(char *)"Failed to acquire sem=%d lock held by=%d\n",sem,done); else 
                                                                    #line 328 
                                                                    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to acquire sem=%d lock",sem);
      }
      else 
           #line 332 
           _dev_err(& (adapter->pdev)->dev,(char *)"Failed to acquire sem=%d lock",sem);
      #line 335 
      return -5;
    }
    #line 337 
    __const_udelay(5154000UL);
  }
  #line 340 
  if (id_reg != 0U) 
                    #line 341 
                    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)id_reg,(unsigned int)adapter->portnum);
  #line 343 
  return 0;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_pcie_sem_unlock(struct qlcnic_adapter *adapter, int sem)
{
  #line 349 
  int err = 0;
  #line 351 
  (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)(sem * 8 + 114692) + 101711872UL,& err);
  #line 352 
  return;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_ind_rd(struct qlcnic_adapter *adapter, u32 addr)
{
  #line 357 
  u32 data;
  #line 356 
  int err = 0;
  #line 359 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 360 
                                            qlcnic_read_window_reg(addr,(adapter->ahw)->pci_base0,& data);
  else {
    #line 362 
    data = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)addr,
                                              & err);
    #line 363 
    if (err == -5) 
                   #line 364 
                   return err;
  }
  #line 366 
  return (int)data;
}

#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_ind_wr(struct qlcnic_adapter *adapter, u32 addr, u32 data)
{
  #line 371 
  int ret = 0;
  #line 373 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 374 
                                            qlcnic_write_window_reg(addr,(adapter->ahw)->pci_base0,data); else 
                                                                    #line 376 
                                                                    ret = qlcnic_83xx_wrt_reg_indirect(adapter,(unsigned long)addr,data);
  #line 378 
  return ret;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_send_cmd_descs(struct qlcnic_adapter *adapter, struct cmd_desc_type0 *cmd_desc_arr, int nr_desc)
{
  #line 385 
  u32 i;
  #line 385 
  u32 producer;
  #line 386 
  struct qlcnic_cmd_buffer *pbuf;
  #line 387 
  struct cmd_desc_type0 *cmd_desc;
  #line 388 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 390 
  i = 0U;
  #line 392 
  if (! test_bit(0L,& adapter->state)) 
                                       #line 393 
                                       return -5;
  #line 395 
  tx_ring = adapter->tx_ring;
  #line 396 
  __netif_tx_lock_bh(tx_ring->txq);
  #line 398 
  producer = tx_ring->producer;
  #line 400 
  ;
  #line 400 
  if (qlcnic_tx_avail(tx_ring) <= (unsigned int)nr_desc) {
    #line 401 
    netif_tx_stop_queue(tx_ring->txq);
    #line 402 
    ldv_inline_asm();
    #line 403 
    ;
    #line 403 
    if (qlcnic_tx_avail(tx_ring) > (unsigned int)nr_desc) {
      #line 404 
      if (qlcnic_tx_avail(tx_ring) > 10U) 
                                          #line 405 
                                          netif_tx_wake_queue(tx_ring->txq);
    }
    else {
      #line 407 
      (adapter->stats.xmit_off) ++;
      #line 408 
      __netif_tx_unlock_bh(tx_ring->txq);
      #line 409 
      return -16;
    }
  }
  #line 413 
  while (1) {
    #line 414 
    cmd_desc = cmd_desc_arr + (unsigned long)i;
    #line 416 
    pbuf = tx_ring->cmd_buf_arr + (unsigned long)producer;
    #line 417 
    pbuf->skb = (struct sk_buff *)0;
    #line 418 
    pbuf->frag_count = 0U;
    #line 420 
    memcpy((void *)(tx_ring->desc_head + (unsigned long)producer),(void *)cmd_desc,64UL);
    #line 423 
    producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
    #line 424 
    i ++;
    #line 425 
    if (! (i != (unsigned int)nr_desc)) 
                                        #line 413 
                                        break;
  }
  #line 428 
  tx_ring->producer = producer;
  #line 430 
  qlcnic_update_cmd_producer(tx_ring);
  #line 432 
  __netif_tx_unlock_bh(tx_ring->txq);
  #line 434 
  return 0;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan_id, u8 op)
{
  #line 440 
  struct qlcnic_nic_req req;
  #line 441 
  struct qlcnic_mac_req *mac_req;
  #line 442 
  struct qlcnic_vlan_req *vlan_req;
  #line 443 
  u64 word;
  #line 445 
  memset((void *)(& req),0,64UL);
  #line 446 
  req.qhdr = 167772160ULL;
  #line 448 
  word = ((unsigned long long)adapter->portnum << 16) | 1ULL;
  #line 449 
  req.req_hdr = word;
  #line 451 
  mac_req = (struct qlcnic_mac_req *)(& req.words[0]);
  #line 452 
  mac_req->op = op;
  #line 453 
  memcpy((void *)(& mac_req->mac_addr),(void *)addr,6UL);
  #line 455 
  vlan_req = (struct qlcnic_vlan_req *)(& req.words[1]);
  #line 456 
  vlan_req->vlan_id = vlan_id;
  #line 458 
  return qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
}

#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_nic_del_mac(struct qlcnic_adapter *adapter, u8 *addr)
{
  #line 463 
  struct qlcnic_mac_vlan_list *cur;
  #line 464 
  struct list_head *head;
  #line 465 
  int err = -22;
  #line 468 
  head = adapter->mac_list.next;
  #line 468 
  while (& adapter->mac_list != head) {
    {
      #line 469 
      void *__mptr;
      #line 469 
      __mptr = (void *)head;
      #line 469 
      cur = ((struct qlcnic_mac_vlan_list *)__mptr);
      #line 470 
      if ((int)ether_addr_equal(addr,(u8 *)(& cur->mac_addr)) != 0) {
        #line 471 
        err = qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)0,(unsigned char)2);
        #line 473 
        if (err != 0) 
                      #line 474 
                      return err;
        #line 475 
        list_del_1(& cur->list);
        #line 476 
        kfree((void *)cur);
        #line 477 
        return err;
      }
    }
    #line 468 
    head = head->next;
  }
  #line 480 
  return err;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_nic_add_mac(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan, enum qlcnic_mac_type mac_type)
{
  #line 486 
  struct qlcnic_mac_vlan_list *cur;
  #line 487 
  struct list_head *head;
  #line 490 
  head = adapter->mac_list.next;
  #line 490 
  while (& adapter->mac_list != head) {
    {
      #line 491 
      void *__mptr;
      #line 491 
      __mptr = (void *)head;
      #line 491 
      cur = ((struct qlcnic_mac_vlan_list *)__mptr);
      #line 492 
      if ((int)ether_addr_equal(addr,(u8 *)(& cur->mac_addr)) != 0) 
        #line 492 
        if ((int)cur->vlan_id == (int)vlan) 
                                            #line 494 
                                            return 0;
    }
    #line 490 
    head = head->next;
  }
  #line 497 
  cur = (struct qlcnic_mac_vlan_list *)kzalloc_2(32UL,2592U);
  #line 498 
  if (cur == (struct qlcnic_mac_vlan_list *)0) 
                                               #line 499 
                                               return -12;
  #line 501 
  memcpy((void *)(& cur->mac_addr),(void *)addr,6UL);
  #line 503 
  if (qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),
                                  (unsigned short)((int)vlan),
                                  (unsigned char)1) != 0) {
    #line 505 
    kfree((void *)cur);
    #line 506 
    return -5;
  }
  #line 509 
  cur->vlan_id = vlan;
  #line 510 
  cur->mac_type = mac_type;
  #line 512 
  list_add_tail_1(& cur->list,& adapter->mac_list);
  #line 513 
  return 0;
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_flush_mcast_mac(struct qlcnic_adapter *adapter)
{
  #line 518 
  struct qlcnic_mac_vlan_list *cur;
  #line 519 
  struct list_head *head;
  #line 519 
  struct list_head *tmp;
  #line 521 
  head = adapter->mac_list.next;
  #line 521 
  tmp = head->next;
  #line 521 
  while (& adapter->mac_list != head) {
    {
      #line 522 
      void *__mptr;
      #line 522 
      __mptr = (void *)head;
      #line 522 
      cur = ((struct qlcnic_mac_vlan_list *)__mptr);
      #line 523 
      if (cur->mac_type != (unsigned int)QLCNIC_MULTICAST_MAC) 
                                                               #line 524 
                                                               goto __Cont;
      #line 526 
      qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)((int)cur->vlan_id),(unsigned char)2);
      #line 528 
      list_del_1(& cur->list);
      #line 529 
      kfree((void *)cur);
    }
    #line 521 
    __Cont: 
            #line 521 
    head = tmp;
    #line 521 
    tmp = head->next;
  }
  #line 531 
  return;
}

#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void __qlcnic_set_multi(struct net_device *netdev, u16 vlan)
{
  #line 537 
  struct netdev_hw_addr *ha;
  #line 535 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 536 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 538 
  u8 bcast_addr[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 541 
  u32 mode = 0U;
  #line 543 
  if (! test_bit(0L,& adapter->state)) 
                                       #line 544 
                                       return;
  #line 546 
  qlcnic_nic_add_mac(adapter,(u8 *)(& adapter->mac_addr),(unsigned short)((int)vlan),(enum qlcnic_mac_type)QLCNIC_UNICAST_MAC);
  #line 548 
  qlcnic_nic_add_mac(adapter,(u8 *)(& bcast_addr),(unsigned short)((int)vlan),(enum qlcnic_mac_type)QLCNIC_BROADCAST_MAC);
  #line 550 
  if ((netdev->flags & 256U) != 0U) {
    #line 551 
    if ((adapter->flags & 2048U) == 0U) 
                                        #line 552 
                                        mode = 1U;
  }
  else 
    #line 553 
    if ((netdev->flags & 512U) != 0U || netdev->mc.count > (int)ahw->max_mc_count) 
      #line 555 
      mode = 2U;
    else 
      #line 556 
      if (netdev->mc.count != 0) {
        #line 558 
        void *__mptr;
        #line 557 
        qlcnic_flush_mcast_mac(adapter);
        #line 558 
        __mptr = (void *)netdev->mc.list.next;
        #line 558 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 558 
        while (& ha->list != & netdev->mc.list) {
          #line 558 
          void *__mptr_0;
          #line 559 
          qlcnic_nic_add_mac(adapter,(u8 *)(& ha->addr),(unsigned short)((int)vlan),(enum qlcnic_mac_type)QLCNIC_MULTICAST_MAC);
          #line 558 
          __mptr_0 = (void *)ha->list.next;
          #line 558 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
      }
  #line 566 
  if (netdev->uc.count > (int)ahw->max_uc_count) 
                                                 #line 567 
                                                 mode = 1U;
  else 
    #line 568 
    if (netdev->uc.count != 0) {
      #line 569 
      void *__mptr_1;
      #line 569 
      __mptr_1 = (void *)netdev->uc.list.next;
      #line 569 
      ha = ((struct netdev_hw_addr *)__mptr_1);
      #line 569 
      while (& ha->list != & netdev->uc.list) {
        #line 569 
        void *__mptr_2;
        #line 570 
        qlcnic_nic_add_mac(adapter,(u8 *)(& ha->addr),(unsigned short)((int)vlan),(enum qlcnic_mac_type)QLCNIC_UNICAST_MAC);
        #line 569 
        __mptr_2 = (void *)ha->list.next;
        #line 569 
        ha = ((struct netdev_hw_addr *)__mptr_2);
      }
    }
  #line 574 
  if (mode == 1U && ! adapter->fdb_mac_learn) {
    #line 576 
    qlcnic_alloc_lb_filters_mem(adapter);
    #line 577 
    adapter->drv_mac_learn = (_Bool)1;
    #line 578 
    if ((adapter->flags & 64U) != 0U) 
                                      #line 579 
                                      adapter->rx_mac_learn = (_Bool)1;
  }
  else {
    #line 581 
    adapter->drv_mac_learn = (_Bool)0;
    #line 582 
    adapter->rx_mac_learn = (_Bool)0;
  }
  #line 585 
  qlcnic_nic_set_promisc(adapter,mode);
  #line 586 
  return;
}

#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_set_multi(struct net_device *netdev)
{
  #line 590 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 592 
  if (! test_bit(0L,& adapter->state)) 
                                       #line 593 
                                       return;
  #line 595 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 596 
                                                qlcnic_sriov_vf_set_multi(netdev); else 
                                                                    #line 598 
                                                                    __qlcnic_set_multi(netdev,(unsigned short)0);
  #line 599 
  return;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode)
{
  #line 603 
  struct qlcnic_nic_req req;
  #line 604 
  u64 word;
  #line 606 
  memset((void *)(& req),0,64UL);
  #line 608 
  req.qhdr = 159383552ULL;
  #line 610 
  word = ((unsigned long long)adapter->portnum << 16) | 12ULL;
  #line 612 
  req.req_hdr = word;
  #line 614 
  req.words[0] = (unsigned long long)mode;
  #line 616 
  return qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
}

#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_free_mac_list(struct qlcnic_adapter *adapter)
{
  #line 623 
  struct qlcnic_mac_vlan_list *cur;
  #line 622 
  struct list_head *head = & adapter->mac_list;
  #line 625 
  while (1) {
    #line 625 
    if (! (list_empty_1(head) == 0)) 
                                     #line 625 
                                     break;
    {
      #line 626 
      void *__mptr;
      #line 626 
      __mptr = (void *)head->next;
      #line 626 
      cur = ((struct qlcnic_mac_vlan_list *)__mptr);
      #line 627 
      qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)0,(unsigned char)2);
      #line 629 
      list_del_1(& cur->list);
      #line 630 
      kfree((void *)cur);
    }
  }
  #line 632 
  return;
}

#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_prune_lb_filters(struct qlcnic_adapter *adapter)
{
  #line 636 
  struct qlcnic_filter *tmp_fil;
  #line 637 
  struct hlist_node *n;
  #line 638 
  struct hlist_head *head;
  #line 639 
  int i;
  #line 640 
  unsigned long expires;
  #line 641 
  u8 cmd;
  #line 643 
  i = 0;
  #line 643 
  while ((int)adapter->fhash.fbucket_size > i) {
    {
      #line 645 
      struct qlcnic_filter *tmp_0;
      #line 645 
      void *__mptr;
      #line 644 
      head = adapter->fhash.fhead + (unsigned long)i;
      {
        #line 645 
        struct hlist_node *____ptr = head->first;
        #line 645 
        if (____ptr != (struct hlist_node *)0) {
          #line 645 
          __mptr = (void *)____ptr;
          #line 645 
          tmp_0 = ((struct qlcnic_filter *)__mptr);
        }
        else 
             #line 645 
             tmp_0 = (struct qlcnic_filter *)0;
        }
      #line 645 
      tmp_fil = tmp_0;
      #line 645 
      while (1) {
        #line 645 
        void *__mptr_0;
        #line 645 
        struct qlcnic_filter *tmp_3;
        #line 645 
        if (tmp_fil != (struct qlcnic_filter *)0) {
          #line 645 
          n = tmp_fil->fnode.next;
          #line 645 
          if (! (1 != 0)) 
                          #line 645 
                          break;
        }
        else 
             #line 645 
             break;
        {
          #line 646 
          if ((unsigned int)tmp_fil->vlan_id != 0U) 
                                                    #line 646 
                                                    cmd = (unsigned char)4U; else 
                                                                    #line 646 
                                                                    cmd = (unsigned char)2U;
          #line 648 
          expires = tmp_fil->ftime + 20000UL;
          {
            #line 649 
            unsigned long __dummy;
            #line 649 
            unsigned long __dummy2;
            }
          #line 649 
          if (1 != 0) {
            {
              #line 649 
              unsigned long __dummy_0;
              #line 649 
              unsigned long __dummy2_0;
              }
            #line 649 
            if (1 != 0) 
              #line 649 
              if ((long)(expires - jiffies) < 0L) {
                #line 650 
                qlcnic_sre_macaddr_change(adapter,(u8 *)(& tmp_fil->faddr),(unsigned short)((int)tmp_fil->vlan_id),(unsigned char)((int)cmd));
                #line 654 
                cif_spin_lock_bh_mac_learn_lock_of_qlcnic_adapter(& adapter->mac_learn_lock);
                #line 655 
                adapter->fhash.fnum = (u8)((int)adapter->fhash.fnum - 1);
                #line 656 
                hlist_del(& tmp_fil->fnode);
                #line 657 
                cif_spin_unlock_bh_mac_learn_lock_of_qlcnic_adapter(& adapter->mac_learn_lock);
                #line 658 
                kfree((void *)tmp_fil);
              }
          }
        }
        {
          #line 645 
          struct hlist_node *____ptr_0 = n;
          #line 645 
          if (____ptr_0 != (struct hlist_node *)0) {
            #line 645 
            __mptr_0 = (void *)____ptr_0;
            #line 645 
            tmp_3 = ((struct qlcnic_filter *)__mptr_0);
          }
          else 
               #line 645 
               tmp_3 = (struct qlcnic_filter *)0;
          }
        #line 645 
        tmp_fil = tmp_3;
      }
    }
    #line 643 
    i ++;
  }
  #line 662 
  i = 0;
  #line 662 
  while ((int)adapter->rx_fhash.fbucket_size > i) {
    {
      #line 665 
      void *__mptr_1;
      #line 665 
      struct qlcnic_filter *tmp_8;
      #line 663 
      head = adapter->rx_fhash.fhead + (unsigned long)i;
      {
        #line 665 
        struct hlist_node *____ptr_1 = head->first;
        #line 665 
        if (____ptr_1 != (struct hlist_node *)0) {
          #line 665 
          __mptr_1 = (void *)____ptr_1;
          #line 665 
          tmp_8 = ((struct qlcnic_filter *)__mptr_1);
        }
        else 
             #line 665 
             tmp_8 = (struct qlcnic_filter *)0;
        }
      #line 665 
      tmp_fil = tmp_8;
      #line 665 
      while (1) {
        #line 665 
        void *__mptr_2;
        #line 665 
        struct qlcnic_filter *tmp_11;
        #line 665 
        if (tmp_fil != (struct qlcnic_filter *)0) {
          #line 665 
          n = tmp_fil->fnode.next;
          #line 665 
          if (! (1 != 0)) 
                          #line 665 
                          break;
        }
        else 
             #line 665 
             break;
        {
          #line 667 
          expires = tmp_fil->ftime + 20000UL;
          {
            #line 668 
            unsigned long __dummy_1;
            #line 668 
            unsigned long __dummy2_1;
            }
          #line 668 
          if (1 != 0) {
            {
              #line 668 
              unsigned long __dummy_2;
              #line 668 
              unsigned long __dummy2_2;
              }
            #line 668 
            if (1 != 0) 
              #line 668 
              if ((long)(expires - jiffies) < 0L) {
                #line 669 
                cif_spin_lock_bh_rx_mac_learn_lock_of_qlcnic_adapter(& adapter->rx_mac_learn_lock);
                #line 670 
                adapter->rx_fhash.fnum = (u8)((int)adapter->rx_fhash.fnum - 1);
                #line 671 
                hlist_del(& tmp_fil->fnode);
                #line 672 
                cif_spin_unlock_bh_rx_mac_learn_lock_of_qlcnic_adapter(& adapter->rx_mac_learn_lock);
                #line 673 
                kfree((void *)tmp_fil);
              }
          }
        }
        {
          #line 665 
          struct hlist_node *____ptr_2 = n;
          #line 665 
          if (____ptr_2 != (struct hlist_node *)0) {
            #line 665 
            __mptr_2 = (void *)____ptr_2;
            #line 665 
            tmp_11 = ((struct qlcnic_filter *)__mptr_2);
          }
          else 
               #line 665 
               tmp_11 = (struct qlcnic_filter *)0;
          }
        #line 665 
        tmp_fil = tmp_11;
      }
    }
    #line 662 
    i ++;
  }
  #line 677 
  return;
}

#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_delete_lb_filters(struct qlcnic_adapter *adapter)
{
  #line 681 
  struct qlcnic_filter *tmp_fil;
  #line 682 
  struct hlist_node *n;
  #line 683 
  struct hlist_head *head;
  #line 684 
  int i;
  #line 685 
  u8 cmd;
  #line 687 
  i = 0;
  #line 687 
  while ((int)adapter->fhash.fbucket_size > i) {
    {
      #line 689 
      struct qlcnic_filter *tmp_0;
      #line 689 
      void *__mptr;
      #line 688 
      head = adapter->fhash.fhead + (unsigned long)i;
      {
        #line 689 
        struct hlist_node *____ptr = head->first;
        #line 689 
        if (____ptr != (struct hlist_node *)0) {
          #line 689 
          __mptr = (void *)____ptr;
          #line 689 
          tmp_0 = ((struct qlcnic_filter *)__mptr);
        }
        else 
             #line 689 
             tmp_0 = (struct qlcnic_filter *)0;
        }
      #line 689 
      tmp_fil = tmp_0;
      #line 689 
      while (1) {
        #line 689 
        void *__mptr_0;
        #line 689 
        struct qlcnic_filter *tmp_3;
        #line 689 
        if (tmp_fil != (struct qlcnic_filter *)0) {
          #line 689 
          n = tmp_fil->fnode.next;
          #line 689 
          if (! (1 != 0)) 
                          #line 689 
                          break;
        }
        else 
             #line 689 
             break;
        #line 690 
        if ((unsigned int)tmp_fil->vlan_id != 0U) 
                                                  #line 690 
                                                  cmd = (unsigned char)4U; else 
                                                                    #line 690 
                                                                    cmd = (unsigned char)2U;
        #line 692 
        qlcnic_sre_macaddr_change(adapter,(u8 *)(& tmp_fil->faddr),(unsigned short)((int)tmp_fil->vlan_id),(unsigned char)((int)cmd));
        #line 696 
        cif_spin_lock_bh_mac_learn_lock_of_qlcnic_adapter(& adapter->mac_learn_lock);
        #line 697 
        adapter->fhash.fnum = (u8)((int)adapter->fhash.fnum - 1);
        #line 698 
        hlist_del(& tmp_fil->fnode);
        #line 699 
        cif_spin_unlock_bh_mac_learn_lock_of_qlcnic_adapter(& adapter->mac_learn_lock);
        #line 700 
        kfree((void *)tmp_fil);
        {
          #line 689 
          struct hlist_node *____ptr_0 = n;
          #line 689 
          if (____ptr_0 != (struct hlist_node *)0) {
            #line 689 
            __mptr_0 = (void *)____ptr_0;
            #line 689 
            tmp_3 = ((struct qlcnic_filter *)__mptr_0);
          }
          else 
               #line 689 
               tmp_3 = (struct qlcnic_filter *)0;
          }
        #line 689 
        tmp_fil = tmp_3;
      }
    }
    #line 687 
    i ++;
  }
  #line 703 
  return;
}

#line 705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_set_fw_loopback(struct qlcnic_adapter *adapter, u8 flag)
{
  #line 707 
  struct qlcnic_nic_req req;
  #line 708 
  int rv;
  #line 710 
  memset((void *)(& req),0,64UL);
  #line 712 
  req.qhdr = 159383552ULL;
  #line 713 
  req.req_hdr = ((unsigned long long)adapter->portnum << 16) | 4294967315ULL;
  #line 716 
  req.words[0] = (unsigned long long)flag;
  #line 718 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 719 
  if (rv != 0) {
    #line 720 
    char *tmp;
    #line 720 
    if ((unsigned int)flag != 0U) 
                                  #line 720 
                                  tmp = (char *)"Set"; else 
                                                            #line 720 
                                                            tmp = (char *)"Reset";
    #line 720 
    ;
    #line 720 
    _dev_err(& (adapter->pdev)->dev,(char *)"%sting loopback mode failed\n",tmp);
  }
  #line 722 
  return rv;
}

#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  #line 727 
  if (qlcnic_set_fw_loopback(adapter,(unsigned char)((int)mode)) != 0) 
    #line 728 
    return -5;
  #line 730 
  if (qlcnic_nic_set_promisc(adapter,1U) != 0) {
    #line 732 
    qlcnic_set_fw_loopback(adapter,(unsigned char)0);
    #line 733 
    return -5;
  }
  #line 736 
  msleep(1000U);
  #line 737 
  return 0;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  #line 742 
  struct net_device *netdev = adapter->netdev;
  #line 744 
  mode = (unsigned char)0U;
  #line 745 
  qlcnic_set_fw_loopback(adapter,(unsigned char)0);
  #line 747 
  if ((netdev->flags & 256U) != 0U) 
                                    #line 748 
                                    mode = (unsigned char)1U;
  else 
    #line 749 
    if ((netdev->flags & 512U) != 0U) 
                                      #line 750 
                                      mode = (unsigned char)2U;
  #line 752 
  qlcnic_nic_set_promisc(adapter,(unsigned int)mode);
  #line 753 
  msleep(1000U);
  #line 754 
  return 0;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_read_phys_port_id(struct qlcnic_adapter *adapter)
{
  #line 759 
  u8 mac[6U];
  #line 760 
  int ret;
  #line 762 
  ret = qlcnic_get_mac_address(adapter,(u8 *)(& mac),(unsigned char)((int)(adapter->ahw)->physical_port));
  #line 764 
  if (ret != 0) 
                #line 765 
                return ret;
  #line 767 
  memcpy((void *)(& (adapter->ahw)->phys_port_id),(void *)(& mac),6UL);
  #line 768 
  adapter->flags |= 262144U;
  #line 770 
  return 0;
}

#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_set_rx_coalesce(struct qlcnic_adapter *adapter)
{
  #line 775 
  struct qlcnic_nic_req req;
  #line 776 
  int rv;
  #line 778 
  memset((void *)(& req),0,64UL);
  #line 780 
  req.qhdr = 159383552ULL;
  #line 782 
  req.req_hdr = ((unsigned long long)adapter->portnum << 16) | 3ULL;
  #line 785 
  req.words[0] = (unsigned long long)(adapter->ahw)->coal.flag << 32;
  #line 786 
  req.words[2] = (unsigned long long)(adapter->ahw)->coal.rx_packets | ((unsigned long long)(adapter->ahw)->coal.rx_time_us << 16);
  #line 788 
  req.words[5] = ((unsigned long long)(adapter->ahw)->coal.timer_out | ((unsigned long long)(adapter->ahw)->coal.type << 32)) | ((unsigned long long)(adapter->ahw)->coal.sts_ring_mask << 40);
  #line 791 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 792 
  if (rv != 0) 
               #line 793 
               _dev_err(& (adapter->netdev)->dev,(char *)"Could not send interrupt coalescing parameters\n");
  #line 796 
  return rv;
}

#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_intr_coalesce(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal)
{
  #line 804 
  int rv;
  #line 803 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  #line 806 
  coal->flag = (unsigned short)4U;
  #line 807 
  coal->rx_time_us = (unsigned short)ethcoal->rx_coalesce_usecs;
  #line 808 
  coal->rx_packets = (unsigned short)ethcoal->rx_max_coalesced_frames;
  #line 810 
  rv = qlcnic_82xx_set_rx_coalesce(adapter);
  #line 812 
  if (rv != 0) 
               #line 813 
               netdev_err(adapter->netdev,(char *)"Failed to set Rx coalescing parameters\n");
  #line 816 
  return rv;
}

#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_hw_lro(struct qlcnic_adapter *adapter, int enable)
{
  #line 824 
  struct qlcnic_nic_req req;
  #line 825 
  u64 word;
  #line 826 
  int rv;
  #line 828 
  if (! test_bit(0L,& adapter->state)) 
                                       #line 829 
                                       return 0;
  #line 831 
  memset((void *)(& req),0,64UL);
  #line 833 
  req.qhdr = 159383552ULL;
  #line 835 
  word = ((unsigned long long)adapter->portnum << 16) | 24ULL;
  #line 836 
  req.req_hdr = word;
  #line 838 
  word = 0ULL;
  #line 839 
  if (enable != 0) {
    #line 840 
    word = 1ULL;
    #line 841 
    if (((adapter->ahw)->extra_capability[0] & 8U) != 0U) 
                                                          #line 843 
                                                          word |= 514ULL;
  }
  #line 846 
  req.words[0] = word;
  #line 848 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 849 
  if (rv != 0) 
               #line 850 
               _dev_err(& (adapter->netdev)->dev,(char *)"Could not send configure hw lro request\n");
  #line 853 
  return rv;
}

#line 856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_config_bridged_mode(struct qlcnic_adapter *adapter, u32 enable)
{
  #line 858 
  struct qlcnic_nic_req req;
  #line 859 
  u64 word;
  #line 860 
  int rv;
  #line 862 
  if ((u32)((adapter->flags & 16U) != 0U) == enable) 
                                                     #line 863 
                                                     return 0;
  #line 865 
  memset((void *)(& req),0,64UL);
  #line 867 
  req.qhdr = 159383552ULL;
  #line 869 
  word = ((unsigned long long)adapter->portnum << 16) | 23ULL;
  #line 871 
  req.req_hdr = word;
  #line 873 
  req.words[0] = (unsigned long long)enable;
  #line 875 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 876 
  if (rv != 0) 
               #line 877 
               _dev_err(& (adapter->netdev)->dev,(char *)"Could not send configure bridge mode request\n");
  #line 880 
  adapter->flags ^= 16U;
  #line 882 
  return rv;
}

#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_rss(struct qlcnic_adapter *adapter, int enable)
{
  #line 893 
  struct qlcnic_nic_req req;
  #line 894 
  u64 word;
  #line 895 
  int i;
  #line 895 
  int rv;
  #line 897 
  u64 key[5U] = {13739358738236749627ULL, 9237148971100220835ULL, 12572696337890028491ULL, 4873897208919303485ULL, 2691761430505084634ULL};
  #line 903 
  memset((void *)(& req),0,64UL);
  #line 904 
  req.qhdr = 159383552ULL;
  #line 906 
  word = ((unsigned long long)adapter->portnum << 16) | 1ULL;
  #line 907 
  req.req_hdr = word;
  #line 922 
  word = (((unsigned long long)enable << 8) & 256ULL) | 9225342361691751664ULL;
  #line 929 
  req.words[0] = word;
  #line 930 
  i = 0;
  #line 930 
  while (i <= 4) {
    #line 931 
    req.words[i + 1] = key[i];
    #line 930 
    i ++;
  }
  #line 933 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 934 
  if (rv != 0) 
               #line 935 
               _dev_err(& (adapter->netdev)->dev,(char *)"could not configure RSS\n");
  #line 937 
  return rv;
}

#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int cmd)
{
  #line 943 
  struct qlcnic_nic_req req;
  #line 944 
  struct qlcnic_ipaddr *ipa;
  #line 945 
  u64 word;
  #line 946 
  int rv;
  #line 948 
  memset((void *)(& req),0,64UL);
  #line 949 
  req.qhdr = 159383552ULL;
  #line 951 
  word = ((unsigned long long)adapter->portnum << 16) | 18ULL;
  #line 952 
  req.req_hdr = word;
  #line 954 
  req.words[0] = (unsigned long long)cmd;
  #line 955 
  ipa = (struct qlcnic_ipaddr *)(& req.words[1]);
  #line 956 
  ipa->ipv4 = ip;
  #line 958 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 959 
  if (rv != 0) {
    #line 960 
    char *tmp;
    #line 960 
    ;
    #line 960 
    if (cmd == 2) 
                  #line 960 
                  tmp = (char *)"Add"; else 
                                            #line 960 
                                            tmp = (char *)"Remove";
    #line 960 
    ;
    #line 960 
    _dev_err(& (adapter->netdev)->dev,(char *)"could not notify %s IP 0x%x request\n",tmp,ip);
  }
  #line 961 
  return;
}

#line 965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_linkevent_request(struct qlcnic_adapter *adapter, int enable)
{
  #line 967 
  struct qlcnic_nic_req req;
  #line 968 
  u64 word;
  #line 969 
  int rv;
  #line 970 
  memset((void *)(& req),0,64UL);
  #line 971 
  req.qhdr = 159383552ULL;
  #line 973 
  word = ((unsigned long long)adapter->portnum << 16) | 21ULL;
  #line 974 
  req.req_hdr = word;
  #line 975 
  req.words[0] = (unsigned long long)((enable << 8) | enable);
  #line 976 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 977 
  if (rv != 0) 
               #line 978 
               _dev_err(& (adapter->netdev)->dev,(char *)"could not configure link notification\n");
  #line 981 
  return rv;
}

#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_send_lro_cleanup(struct qlcnic_adapter *adapter)
{
  #line 986 
  struct qlcnic_nic_req req;
  #line 987 
  u64 word;
  #line 988 
  int rv;
  #line 990 
  if (! test_bit(0L,& adapter->state)) 
                                       #line 991 
                                       return 0;
  #line 993 
  memset((void *)(& req),0,64UL);
  #line 994 
  req.qhdr = 159383552ULL;
  #line 996 
  word = ((unsigned long long)adapter->portnum << 16) | 288230376151711751ULL;
  #line 1000 
  req.req_hdr = word;
  #line 1002 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 1003 
  if (rv != 0) 
               #line 1004 
               _dev_err(& (adapter->netdev)->dev,(char *)"could not cleanup lro flows\n");
  #line 1007 
  return rv;
}

#line 1015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_change_mtu(struct net_device *netdev, int mtu)
{
  #line 1017 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1018 
  int rc = 0;
  #line 1020 
  rc = qlcnic_fw_cmd_set_mtu(adapter,mtu);
  #line 1022 
  if (rc == 0) 
               #line 1023 
               netdev->mtu = (unsigned int)mtu;
  #line 1025 
  return rc;
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static netdev_features_t qlcnic_process_flags(struct qlcnic_adapter *adapter, netdev_features_t features)
{
  #line 1031 
  u32 offload_flags = adapter->offload_flags;
  #line 1033 
  if ((offload_flags & 1U) != 0U) {
    #line 1034 
    features |= 549755813906ULL;
    #line 1036 
    adapter->rx_csum = (unsigned char)1U;
    #line 1037 
    if (((adapter->ahw)->capabilities & 2U) != 0U) {
      #line 1038 
      if ((offload_flags & 2U) == 0U) 
                                      #line 1039 
                                      features &= 18446744073709486079ULL; else 
                                                                    #line 1041 
                                                                    features |= 65536ULL;
      #line 1043 
      if ((offload_flags & 4U) == 0U) 
                                      #line 1044 
                                      features &= 18446744073708503039ULL; else 
                                                                    #line 1046 
                                                                    features |= 1048576ULL;
    }
  }
  else {
    #line 1049 
    features &= 18446743523953737709ULL;
    #line 1053 
    if (((adapter->ahw)->capabilities & 2U) != 0U) 
                                                   #line 1054 
                                                   features &= 18446744073708437503ULL;
    #line 1055 
    adapter->rx_csum = (unsigned char)0U;
  }
  #line 1058 
  return features;
}

#line 1061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
unsigned long long qlcnic_fix_features(struct net_device *netdev, netdev_features_t features)
{
  #line 1065 
  netdev_features_t changed;
  #line 1064 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1067 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
    #line 1067 
    if ((adapter->flags & 64U) != 0U) 
      #line 1069 
      if ((adapter->flags & 131072U) != 0U) 
                                            #line 1070 
                                            features = qlcnic_process_flags(adapter,features);
      else {
        #line 1072 
        changed = netdev->features ^ features;
        #line 1073 
        features = (changed & 549756928018ULL) ^ features;
      }
  #line 1081 
  if ((features & 549755813888ULL) == 0ULL) 
                                            #line 1082 
                                            features &= 18446744073709518847ULL;
  #line 1084 
  return features;
}

#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 1090 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1091 
  netdev_features_t changed = netdev->features ^ features;
  #line 1092 
  int hw_lro = (int)(features >> 15) & 1;
  #line 1094 
  if ((changed & 32768ULL) == 0ULL) 
                                    #line 1095 
                                    return 0;
  #line 1097 
  netdev->features ^= 32768ULL;
  #line 1099 
  if (qlcnic_config_hw_lro(adapter,hw_lro) != 0) 
                                                 #line 1100 
                                                 return -5;
  #line 1102 
  if (hw_lro == 0) {
    #line 1102 
    if ((int)qlcnic_82xx_check(adapter) != 0) {
      #line 1103 
      if (qlcnic_send_lro_cleanup(adapter) != 0) 
                                                 #line 1104 
                                                 return -5;
    }
  }
  #line 1107 
  return 0;
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_pci_get_crb_addr_2M(struct qlcnic_hardware_context *ahw, ulong off, void **addr)
{
  #line 1122 
  struct crb_128M_2M_sub_block_map *m;
  #line 1124 
  if (off + 18446744073608888320UL > 67108863UL) 
                                                 #line 1125 
                                                 return -22;
  #line 1127 
  off += 18446744073608888320UL;
  #line 1132 
  m = & crb_128M_2M_map[(off >> 20) & 63UL].sub_block[(off >> 16) & 15UL];
  #line 1134 
  if ((m->valid != 0U && (unsigned long)m->start_128M <= off) && (unsigned long)m->end_128M > off) {
    #line 1135 
    *addr = ahw->pci_base0 + ((unsigned long)m->start_2M + (off - (unsigned long)m->start_128M));
    #line 1137 
    return 0;
  }
  #line 1143 
  *addr = ahw->pci_base0 + (((unsigned long long)off & 65535ULL) + (unsigned long long)1966080UL);
  #line 1144 
  return 1;
}

#line 1153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_pci_set_crbwindow_2M(struct qlcnic_adapter *adapter, ulong off)
{
  #line 1155 
  u32 window;
  #line 1156 
  void *addr = (adapter->ahw)->pci_base0 + 1245280U;
  #line 1158 
  off += 18446744073608888320UL;
  #line 1160 
  window = (crb_hub_agt[(off >> 20) & 63UL] << 20) | ((unsigned int)off & 983040U);
  #line 1161 
  if (window == 0U) {
    #line 1162 
    _dev_err(& (adapter->pdev)->dev,(char *)"Invalid offset 0x%lx\n",off);
    #line 1163 
    return -5;
  }
  #line 1166 
  writel(window,addr);
  #line 1167 
  ;
  #line 1167 
  if (readl(addr) != window) {
    #line 1168 
    if (__printk_ratelimit((char *)"qlcnic_pci_set_crbwindow_2M") != 0) 
      #line 1169 
      _dev_warn(& (adapter->pdev)->dev,(char *)"failed to set CRB window to %d off 0x%lx\n",window,off);
    #line 1172 
    return -5;
  }
  #line 1174 
  return 0;
}

#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_hw_write_wx_2M(struct qlcnic_adapter *adapter, ulong off, u32 data)
{
  #line 1180 
  unsigned long flags;
  #line 1181 
  int rv;
  #line 1182 
  void *addr = (void *)0;
  #line 1184 
  rv = qlcnic_pci_get_crb_addr_2M(adapter->ahw,off,& addr);
  #line 1186 
  if (rv == 0) {
    #line 1187 
    writel(data,addr);
    #line 1188 
    return 0;
  }
  #line 1191 
  if (rv > 0) {
    {
      #line 1193 
      unsigned long __dummy;
      #line 1193 
      unsigned long __dummy2;
      }
    #line 1193 
    flags = _raw_write_lock_irqsave(& (adapter->ahw)->crb_lock);
    #line 1194 
    qlcnic_pcie_sem_lock(adapter,7,136323364U);
    #line 1195 
    rv = qlcnic_pci_set_crbwindow_2M(adapter,off);
    #line 1196 
    if (rv == 0) 
                 #line 1197 
                 writel(data,addr);
    #line 1198 
    qlcnic_pcie_sem_unlock(adapter,7);
    {
      #line 1199 
      unsigned long __dummy_0;
      #line 1199 
      unsigned long __dummy2_0;
      }
    #line 1199 
    _raw_write_unlock_irqrestore(& (adapter->ahw)->crb_lock,flags);
    #line 1200 
    return rv;
  }
  #line 1203 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: invalid offset: 0x%016lx\n",(char *)"qlcnic_82xx_hw_write_wx_2M",off);
  #line 1205 
  dump_stack();
  #line 1206 
  return -5;
}

#line 1209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_hw_read_wx_2M(struct qlcnic_adapter *adapter, ulong off, int *err)
{
  #line 1212 
  unsigned long flags;
  #line 1213 
  int rv;
  #line 1214 
  u32 data = 4294967295U;
  #line 1215 
  void *addr = (void *)0;
  #line 1217 
  rv = qlcnic_pci_get_crb_addr_2M(adapter->ahw,off,& addr);
  #line 1219 
  if (rv == 0) {
    #line 1220 
    return (int)readl(addr);
  }
  #line 1222 
  if (rv > 0) {
    {
      #line 1224 
      unsigned long __dummy;
      #line 1224 
      unsigned long __dummy2;
      }
    #line 1224 
    flags = _raw_write_lock_irqsave(& (adapter->ahw)->crb_lock);
    #line 1225 
    qlcnic_pcie_sem_lock(adapter,7,136323364U);
    #line 1226 
    if (qlcnic_pci_set_crbwindow_2M(adapter,off) == 0) 
                                                       #line 1227 
                                                       data = readl(addr);
    #line 1228 
    qlcnic_pcie_sem_unlock(adapter,7);
    {
      #line 1229 
      unsigned long __dummy_0;
      #line 1229 
      unsigned long __dummy2_0;
      }
    #line 1229 
    _raw_write_unlock_irqrestore(& (adapter->ahw)->crb_lock,flags);
    #line 1230 
    return (int)data;
  }
  #line 1233 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: invalid offset: 0x%016lx\n",(char *)"qlcnic_82xx_hw_read_wx_2M",off);
  #line 1235 
  dump_stack();
  #line 1236 
  return -1;
}

#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void *qlcnic_get_ioaddr(struct qlcnic_hardware_context *ahw, u32 offset)
{
  #line 1242 
  void *addr = (void *)0;
  {
    #line 1244 
    int __ret_warn_on = qlcnic_pci_get_crb_addr_2M(ahw,(unsigned long)offset,& addr) != 0;
    #line 1244 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1245 
      ldv_inline_asm();
      #line 1246 
      ldv_inline_asm();
    }
    #line 1244 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1246 
  return addr;
}

#line 1249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_pci_mem_access_direct(struct qlcnic_adapter *adapter, u32 window, u64 off, u64 *data, int op)
{
  #line 1252 
  void *addr;
  #line 1253 
  u32 start;
  #line 1255 
  cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1257 
  writel(window,(adapter->ahw)->ocm_win_crb);
  #line 1259 
  readl((adapter->ahw)->ocm_win_crb);
  #line 1260 
  start = (unsigned int)off + 786432U;
  #line 1262 
  addr = (adapter->ahw)->pci_base0 + (unsigned long)start;
  #line 1264 
  if (op == 0) 
               #line 1265 
               *data = readq(addr); else 
                                         #line 1267 
                                         writeq(*data,addr);
  #line 1270 
  writel(0U,(adapter->ahw)->ocm_win_crb);
  #line 1271 
  readl((adapter->ahw)->ocm_win_crb);
  #line 1273 
  cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1274 
  return 0;
}

#line 1278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_pci_camqm_read_2M(struct qlcnic_adapter *adapter, u64 off, u64 *data)
{
  #line 1280 
  void *addr = (adapter->ahw)->pci_base0 + (off + (unsigned long long)18446744073635100672UL);
  #line 1283 
  cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1284 
  *data = readq(addr);
  #line 1285 
  cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1286 
  return;
}

#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_pci_camqm_write_2M(struct qlcnic_adapter *adapter, u64 off, u64 data)
{
  #line 1291 
  void *addr = (adapter->ahw)->pci_base0 + (off + (unsigned long long)18446744073635100672UL);
  #line 1294 
  cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1295 
  writeq(data,addr);
  #line 1296 
  cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1297 
  return;
}

#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_set_ms_controls(struct qlcnic_adapter *adapter, u64 off, struct qlcnic_ms_reg_ctrl *ms)
{
  #line 1305 
  ms->control = 1090519184U;
  #line 1306 
  ms->low = 1090519188U;
  #line 1307 
  ms->hi = 1090519192U;
  #line 1308 
  if ((off & 15ULL) != 0ULL) {
    #line 1309 
    ms->wd[0] = 1090519200U;
    #line 1310 
    ms->rd[0] = 1090519208U;
    #line 1311 
    ms->wd[1] = 1090519204U;
    #line 1312 
    ms->rd[1] = 1090519212U;
    #line 1313 
    ms->wd[2] = 1090519216U;
    #line 1314 
    ms->wd[3] = 1090519220U;
    #line 1315 
    ms->rd[2] = 1090519224U;
    #line 1316 
    ms->rd[3] = 1090519228U;
  }
  else {
    #line 1318 
    ms->wd[0] = 1090519216U;
    #line 1319 
    ms->rd[0] = 1090519224U;
    #line 1320 
    ms->wd[1] = 1090519220U;
    #line 1321 
    ms->rd[1] = 1090519228U;
    #line 1322 
    ms->wd[2] = 1090519200U;
    #line 1323 
    ms->wd[3] = 1090519204U;
    #line 1324 
    ms->rd[2] = 1090519208U;
    #line 1325 
    ms->rd[3] = 1090519212U;
  }
  #line 1328 
  ms->ocm_window = (unsigned int)off & 268173312U;
  #line 1329 
  ms->off = off & 262143ULL;
  #line 1330 
  return;
}

#line 1332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_pci_mem_write_2M(struct qlcnic_adapter *adapter, u64 off, u64 data)
{
  #line 1334 
  int j;
  #line 1335 
  u32 temp;
  #line 1335 
  u32 off8;
  #line 1336 
  struct qlcnic_ms_reg_ctrl ms;
  #line 1334 
  int ret = 0;
  #line 1339 
  if ((off & 7ULL) != 0ULL) 
                            #line 1340 
                            return -5;
  #line 1342 
  memset((void *)(& ms),0,56UL);
  #line 1343 
  if (off + 18446744060824649728ULL > 134217726ULL && off > 268435454ULL) 
    #line 1347 
    return -5;
  #line 1349 
  qlcnic_set_ms_controls(adapter,off,& ms);
  #line 1351 
  if (off + 18446744065119617024ULL <= 1048574ULL) {
    #line 1352 
    return qlcnic_pci_mem_access_direct(adapter,ms.ocm_window,ms.off,& data,1);
  }
  #line 1355 
  off8 = (unsigned int)off & 4294967280U;
  #line 1357 
  cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1359 
  qlcnic_ind_wr(adapter,ms.low,off8);
  #line 1360 
  qlcnic_ind_wr(adapter,ms.hi,0U);
  #line 1362 
  qlcnic_ind_wr(adapter,ms.control,2U);
  #line 1363 
  qlcnic_ind_wr(adapter,ms.control,3U);
  #line 1365 
  j = 0;
  #line 1365 
  while (j <= 999) {
    {
      #line 1366 
      temp = (unsigned int)qlcnic_ind_rd(adapter,ms.control);
      #line 1367 
      if ((temp & 8U) == 0U) 
                             #line 1368 
                             break;
    }
    #line 1365 
    j ++;
  }
  #line 1371 
  if (j > 999) {
    #line 1372 
    ret = -5;
    #line 1373 
    goto done;
  }
  #line 1377 
  ;
  #line 1377 
  ;
  #line 1377 
  qlcnic_ind_wr(adapter,ms.wd[0],(unsigned int)qlcnic_ind_rd(adapter,ms.rd[0]));
  #line 1378 
  ;
  #line 1378 
  ;
  #line 1378 
  qlcnic_ind_wr(adapter,ms.wd[1],(unsigned int)qlcnic_ind_rd(adapter,ms.rd[1]));
  #line 1380 
  qlcnic_ind_wr(adapter,ms.wd[2],(unsigned int)data);
  #line 1381 
  qlcnic_ind_wr(adapter,ms.wd[3],(unsigned int)(data >> 32));
  #line 1383 
  qlcnic_ind_wr(adapter,ms.control,6U);
  #line 1384 
  qlcnic_ind_wr(adapter,ms.control,7U);
  #line 1386 
  j = 0;
  #line 1386 
  while (j <= 999) {
    {
      #line 1387 
      temp = (unsigned int)qlcnic_ind_rd(adapter,ms.control);
      #line 1388 
      if ((temp & 8U) == 0U) 
                             #line 1389 
                             break;
    }
    #line 1386 
    j ++;
  }
  #line 1392 
  if (j > 999) {
    #line 1393 
    if (__printk_ratelimit((char *)"qlcnic_pci_mem_write_2M") != 0) 
                                                                    #line 1394 
                                                                    _dev_err(& (adapter->pdev)->dev,(char *)"failed to write through agent\n");
    #line 1396 
    ret = -5;
  }
  else 
       #line 1398 
       ret = 0;
  #line 1400 
  done: 
        #line 1400 
  ;
  #line 1401 
  cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1403 
  return ret;
}

#line 1406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_pci_mem_read_2M(struct qlcnic_adapter *adapter, u64 off, u64 *data)
{
  #line 1408 
  int j;
  #line 1408 
  int ret;
  #line 1409 
  u32 temp;
  #line 1409 
  u32 off8;
  #line 1410 
  u64 val;
  #line 1411 
  struct qlcnic_ms_reg_ctrl ms;
  #line 1414 
  if ((off & 7ULL) != 0ULL) 
                            #line 1415 
                            return -5;
  #line 1416 
  if (off + 18446744060824649728ULL > 134217726ULL && off > 268435454ULL) 
    #line 1420 
    return -5;
  #line 1422 
  memset((void *)(& ms),0,56UL);
  #line 1423 
  qlcnic_set_ms_controls(adapter,off,& ms);
  #line 1425 
  if (off + 18446744065119617024ULL <= 1048574ULL) {
    #line 1426 
    return qlcnic_pci_mem_access_direct(adapter,ms.ocm_window,ms.off,data,0);
  }
  #line 1429 
  cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1431 
  off8 = (unsigned int)off & 4294967280U;
  #line 1433 
  qlcnic_ind_wr(adapter,ms.low,off8);
  #line 1434 
  qlcnic_ind_wr(adapter,ms.hi,0U);
  #line 1436 
  qlcnic_ind_wr(adapter,ms.control,2U);
  #line 1437 
  qlcnic_ind_wr(adapter,ms.control,3U);
  #line 1439 
  j = 0;
  #line 1439 
  while (j <= 999) {
    {
      #line 1440 
      temp = (unsigned int)qlcnic_ind_rd(adapter,ms.control);
      #line 1441 
      if ((temp & 8U) == 0U) 
                             #line 1442 
                             break;
    }
    #line 1439 
    j ++;
  }
  #line 1445 
  if (j > 999) {
    #line 1446 
    if (__printk_ratelimit((char *)"qlcnic_pci_mem_read_2M") != 0) 
                                                                   #line 1447 
                                                                   _dev_err(& (adapter->pdev)->dev,(char *)"failed to read through agent\n");
    #line 1449 
    ret = -5;
  }
  else {
    #line 1452 
    temp = (unsigned int)qlcnic_ind_rd(adapter,ms.rd[3]);
    #line 1453 
    val = (unsigned long long)temp << 32;
    #line 1454 
    val = (unsigned long long)qlcnic_ind_rd(adapter,ms.rd[2]) | val;
    #line 1455 
    *data = val;
    #line 1456 
    ret = 0;
  }
  #line 1459 
  cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_0(& (adapter->ahw)->mem_lock);
  #line 1461 
  return ret;
}

#line 1464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_get_board_info(struct qlcnic_adapter *adapter)
{
  #line 1466 
  int offset;
  #line 1466 
  int board_type;
  #line 1466 
  int magic;
  #line 1466 
  int err = 0;
  #line 1467 
  struct pci_dev *pdev = adapter->pdev;
  #line 1469 
  offset = 16680;
  #line 1470 
  if (qlcnic_rom_fast_read(adapter,(unsigned int)offset,(u32 *)(& magic)) != 0) 
    #line 1471 
    return -5;
  #line 1473 
  if (magic != 305419896) {
    #line 1474 
    _dev_err(& pdev->dev,(char *)"invalid board config, magic=%08x\n",magic);
    #line 1476 
    return -5;
  }
  #line 1479 
  offset = 16392;
  #line 1480 
  if (qlcnic_rom_fast_read(adapter,(unsigned int)offset,
                             (u32 *)(& board_type)) != 0) 
    #line 1481 
    return -5;
  #line 1483 
  (adapter->ahw)->board_type = (unsigned short)board_type;
  #line 1485 
  if (board_type == 41) {
    #line 1486 
    u32 gpio = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,154140684UL,& err);
    #line 1487 
    if (err == -5) 
                   #line 1488 
                   return err;
    #line 1489 
    if ((gpio & 32768U) == 0U) 
                               #line 1490 
                               board_type = 128;
  }
  #line 1493 
  switch (board_type) {
    #line 1494 
    case 34: 
             #line 1494 
    ;
    #line 1495 
    case 40: 
             #line 1495 
    ;
    #line 1496 
    case 49: 
             #line 1496 
    ;
    #line 1497 
    case 35: 
             #line 1497 
    ;
    #line 1498 
    case 37: 
             #line 1498 
    ;
    #line 1499 
    case 38: 
             #line 1499 
    ;
    #line 1500 
    case 42: 
             #line 1500 
    ;
    #line 1501 
    case 43: 
             #line 1501 
    ;
    #line 1502 
    case 50: 
             #line 1502 
    ;
    #line 1503 
    case 39: 
             #line 1503 
    ;
    #line 1504 
    (adapter->ahw)->port_type = (unsigned short)2U;
    #line 1505 
    break;
    #line 1506 
    case 33: 
             #line 1506 
    ;
    #line 1507 
    case 36: 
             #line 1507 
    ;
    #line 1508 
    case 41: 
             #line 1508 
    ;
    #line 1509 
    (adapter->ahw)->port_type = (unsigned short)1U;
    #line 1510 
    break;
    #line 1511 
    case 128: 
              #line 1511 
    ;
    #line 1512 
    if ((unsigned int)adapter->portnum <= 1U) 
                                              #line 1512 
                                              (adapter->ahw)->port_type = (unsigned short)2U; else 
                                                                    #line 1512 
                                                                    (adapter->ahw)->port_type = (unsigned short)1U;
    #line 1514 
    break;
    #line 1515 
    default: 
             #line 1515 
    ;
    #line 1516 
    _dev_err(& pdev->dev,(char *)"unknown board type %x\n",board_type);
    #line 1517 
    (adapter->ahw)->port_type = (unsigned short)2U;
    #line 1518 
    break;
  }
  #line 1521 
  return 0;
}

#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_wol_supported(struct qlcnic_adapter *adapter)
{
  #line 1527 
  u32 wol_cfg;
  #line 1528 
  int err = 0;
  #line 1530 
  wol_cfg = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323460UL,& err);
  #line 1531 
  if ((((unsigned long)wol_cfg >> (int)adapter->portnum) & 1UL) != 0UL) {
    #line 1532 
    wol_cfg = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323464UL,& err);
    #line 1533 
    if (err == -5) 
                   #line 1534 
                   return err;
    #line 1535 
    if (((unsigned int)(1 << (int)adapter->portnum) & wol_cfg) != 0U) 
      #line 1536 
      return 1;
  }
  #line 1539 
  return 0;
}

#line 1542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate)
{
  #line 1544 
  struct qlcnic_nic_req req;
  #line 1545 
  int rv;
  #line 1546 
  u64 word;
  #line 1548 
  memset((void *)(& req),0,64UL);
  #line 1549 
  req.qhdr = 159383552ULL;
  #line 1551 
  word = ((unsigned long long)adapter->portnum << 16) | 4ULL;
  #line 1552 
  req.req_hdr = word;
  #line 1554 
  req.words[0] = ((unsigned long long)rate << 32) | (unsigned long long)adapter->portnum;
  #line 1555 
  req.words[1] = (unsigned long long)state;
  #line 1557 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 1558 
  if (rv != 0) 
               #line 1559 
               _dev_err(& (adapter->pdev)->dev,(char *)"LED configuration failed.\n");
  #line 1561 
  return rv;
}

#line 1564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_get_beacon_state(struct qlcnic_adapter *adapter)
{
  #line 1567 
  struct qlcnic_cmd_args cmd;
  #line 1568 
  u8 beacon_state;
  #line 1566 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1569 
  int err = 0;
  #line 1571 
  if ((ahw->extra_capability[0] & 128U) != 0U) {
    #line 1572 
    err = qlcnic_alloc_mbx_args(& cmd,adapter,60U);
    #line 1574 
    if (err == 0) {
      #line 1575 
      err = qlcnic_issue_cmd(adapter,& cmd);
      #line 1576 
      if (err != 0) 
                    #line 1577 
                    netdev_err(adapter->netdev,(char *)"Failed to get current beacon state, err=%d\n",err);
      else {
        #line 1581 
        beacon_state = (unsigned char)*(cmd.rsp.arg + 1U);
        #line 1582 
        if ((unsigned int)beacon_state == 13U) 
                                               #line 1583 
                                               ahw->beacon_state = (unsigned char)0U;
        else 
          #line 1584 
          if ((unsigned int)beacon_state == 12U) 
                                                 #line 1585 
                                                 ahw->beacon_state = (unsigned char)2U;
      }
    }
    #line 1588 
    qlcnic_free_mbx_args(& cmd);
  }
  #line 1591 
  return;
}

#line 1594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_get_func_no(struct qlcnic_adapter *adapter)
{
  #line 1596 
  void *msix_base_addr;
  #line 1597 
  u32 func;
  #line 1598 
  u32 msix_base;
  #line 1600 
  pci_read_config_dword(adapter->pdev,68,& func);
  #line 1601 
  msix_base_addr = (adapter->ahw)->pci_base0 + 1253648U;
  #line 1602 
  msix_base = readl(msix_base_addr);
  #line 1603 
  func = (func - msix_base) / 4096U;
  #line 1604 
  (adapter->ahw)->pci_func = (unsigned char)func;
  #line 1605 
  return;
}

#line 1607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  #line 1611 
  u32 data;
  #line 1612 
  u64 qmdata;
  #line 1610 
  int err = 0;
  #line 1614 
  if ((unsigned long long)offset + (unsigned long long)18446744073634054144U <= (unsigned long long)2047U) {
    #line 1615 
    qlcnic_pci_camqm_read_2M(adapter,(unsigned long long)offset,& qmdata);
    #line 1616 
    memcpy((void *)buf,(void *)(& qmdata),size);
  }
  else {
    #line 1618 
    data = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)offset,
                                              & err);
    #line 1619 
    memcpy((void *)buf,(void *)(& data),size);
  }
  #line 1621 
  return;
}

#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  #line 1626 
  u32 data;
  #line 1627 
  u64 qmdata;
  #line 1629 
  if ((unsigned long long)offset + (unsigned long long)18446744073634054144U <= (unsigned long long)2047U) {
    #line 1630 
    memcpy((void *)(& qmdata),(void *)buf,size);
    #line 1631 
    qlcnic_pci_camqm_write_2M(adapter,(unsigned long long)offset,qmdata);
  }
  else {
    #line 1633 
    memcpy((void *)(& data),(void *)buf,size);
    #line 1634 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)offset,data);
  }
  #line 1636 
  return;
}

#line 1638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_api_lock(struct qlcnic_adapter *adapter)
{
  #line 1640 
  return qlcnic_pcie_sem_lock(adapter,5,0U);
}

#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_api_unlock(struct qlcnic_adapter *adapter)
{
  #line 1645 
  qlcnic_pcie_sem_unlock(adapter,5);
  #line 1646 
  return;
}

#line 1648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_shutdown(struct pci_dev *pdev)
{
  #line 1652 
  int retval;
  #line 1650 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 1651 
  struct net_device *netdev = adapter->netdev;
  #line 1654 
  netif_device_detach(netdev);
  #line 1656 
  qlcnic_cancel_idc_work(adapter);
  #line 1658 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1659 
                                       qlcnic_down(adapter,netdev);
  #line 1661 
  qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
  #line 1663 
  cif_clear_bit_2(2L,& adapter->state);
  #line 1665 
  retval = pci_save_state(pdev);
  #line 1666 
  if (retval != 0) 
                   #line 1667 
                   return retval;
  #line 1669 
  if (qlcnic_wol_supported(adapter) != 0) {
    #line 1670 
    pci_enable_wake(pdev,4,(_Bool)1);
    #line 1671 
    pci_enable_wake(pdev,3,(_Bool)1);
  }
  #line 1674 
  return 0;
}

#line 1677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_resume(struct qlcnic_adapter *adapter)
{
  #line 1680 
  int err;
  #line 1679 
  struct net_device *netdev = adapter->netdev;
  #line 1682 
  err = qlcnic_start_firmware(adapter);
  #line 1683 
  if (err != 0) {
    #line 1684 
    _dev_err(& (adapter->pdev)->dev,(char *)"failed to start firmware\n");
    #line 1685 
    return err;
  }
  #line 1688 
  if ((int)netif_running(netdev) != 0) {
    #line 1689 
    err = qlcnic_up(adapter,netdev);
    #line 1690 
    if (err == 0) 
                  #line 1691 
                  qlcnic_restore_indev_addr(netdev,1UL);
  }
  #line 1694 
  netif_device_attach(netdev);
  #line 1695 
  qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250);
  #line 1696 
  return err;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  #line 377 
  return ldv_kzalloc(size,flags);
}

#line 564  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_lock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 567 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 569 
  spin_lock_bh_2(lock);
  #line 570 
  return;
}

#line 604  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_unlock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 607 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 609 
  spin_unlock_bh_2(lock);
  #line 610 
  return;
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_lock_bh_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock)
{
  #line 818 
  ldv_spin_model_lock((char *)"mac_learn_lock_of_qlcnic_adapter");
  #line 820 
  spin_lock_bh_2(lock);
  #line 821 
  return;
}

#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_unlock_bh_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock)
{
  #line 827 
  ldv_spin_model_unlock((char *)"mac_learn_lock_of_qlcnic_adapter");
  #line 829 
  spin_unlock_bh_2(lock);
  #line 830 
  return;
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_lock_bh_rx_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock)
{
  #line 836 
  ldv_spin_model_lock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  #line 838 
  spin_lock_bh_2(lock);
  #line 839 
  return;
}

#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_spin_unlock_bh_rx_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock)
{
  #line 845 
  ldv_spin_model_unlock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  #line 847 
  spin_unlock_bh_2(lock);
  #line 848 
  return;
}

#line 851  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_0(struct mutex *lock)
{
  #line 854 
  ldv_mutex_model_lock(lock,(char *)"mem_lock_of_qlcnic_hardware_context");
  #line 855 
  return;
}

#line 858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_hw.i.aux"
static void cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_0(struct mutex *lock)
{
  #line 861 
  ldv_mutex_model_unlock(lock,(char *)"mem_lock_of_qlcnic_hardware_context");
  #line 862 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static void cif_clear_bit_3(long nr, unsigned long *addr);
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 326 
int kstrtoull(char *, unsigned int, unsigned long long *);
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
__inline static int kstrtoul(char *s, unsigned int base, unsigned long *res)
{
  #line 352 
  return kstrtoull(s,base,(unsigned long long *)res);
}

#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static bool IS_ERR(void *ptr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 395  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
#line 257 
int sysfs_create_bin_file(struct kobject *, struct bin_attribute *);
#line 259 
#line 259 
void sysfs_remove_bin_file(struct kobject *, struct bin_attribute *);
#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 857  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry);
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static void cif_device_remove_file(struct device *dev, struct device_attribute *attr);
#line 876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 876 
int device_create_bin_file(struct device *, struct bin_attribute *);
#line 878 
#line 878 
void device_remove_bin_file(struct device *, struct bin_attribute *);
#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hwmon.h"
#line 398 
struct device *hwmon_device_register_with_groups(struct device *, char *, void *, struct attribute_group **);
#line 416 
#line 416 
void hwmon_device_unregister(struct device *);
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
char qlcnic_driver_name[7U];
#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1643 
void qlcnic_diag_free_res(struct net_device *netdev, int drv_sds_rings);
#line 1644 
#line 1644 
int qlcnic_diag_alloc_res(struct net_device *netdev, int test);
#line 1655 
#line 1655 
int qlcnic_config_switch_port(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);
#line 1658 
#line 1658 
int qlcnic_get_eswitch_port_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);
#line 1660 
#line 1660 
int qlcnic_config_port_mirroring(struct qlcnic_adapter *adapter, u8 id, u8 enable_mirroring, u8 pci_func);
#line 1661 
#line 1661 
int qlcnic_get_port_stats(struct qlcnic_adapter *adapter, u8 func, u8 rx_tx, struct __qlcnic_esw_statistics *esw_stats);
#line 1663 
#line 1663 
int qlcnic_get_eswitch_stats(struct qlcnic_adapter *adapter, u8 eswitch, u8 rx_tx, struct __qlcnic_esw_statistics *esw_stats);
#line 1665 
#line 1665 
int qlcnic_clear_esw_stats(struct qlcnic_adapter *adapter, u8 func_esw, u8 port, u8 rx_tx);
#line 1677 
#line 1322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_create_sysfs_entries(struct qlcnic_adapter *adapter);
#line 1678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_remove_sysfs_entries(struct qlcnic_adapter *adapter);
#line 1679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_82xx_add_sysfs(struct qlcnic_adapter *adapter);
#line 1680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_82xx_remove_sysfs(struct qlcnic_adapter *adapter);
#line 1682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
int qlcnicvf_config_bridged_mode(struct qlcnic_adapter *adapter, u32 enable);
#line 1683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
int qlcnicvf_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate);
#line 1684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1684 
void qlcnic_set_vlan_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);
#line 1686 
#line 1686 
void qlcnic_set_eswitch_port_features(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);
#line 1706 
#line 1706 
void qlcnic_set_netdev_features(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);
#line 1709 
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
int qlcnic_is_valid_nic_func(struct qlcnic_adapter *adapter, u8 pci_func);
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  #line 1874 
  (*(((adapter->ahw)->hw_ops)->read_crb))(adapter,buf,offset,size);
  #line 1875 
  return;
}

#line 1877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  #line 1880 
  (*(((adapter->ahw)->hw_ops)->write_crb))(adapter,buf,offset,size);
  #line 1881 
  return;
}

#line 1983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *info)
{
  #line 1986 
  return (*(((adapter->ahw)->hw_ops)->get_pci_info))(adapter,info);
}

#line 1989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *info)
{
  #line 1992 
  return (*(((adapter->ahw)->hw_ops)->set_nic_info))(adapter,info);
}

#line 2090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_get_beacon_state(struct qlcnic_adapter *adapter)
{
  #line 2092 
  (*(((adapter->ahw)->hw_ops)->get_beacon_state))(adapter);
  #line 2093 
  return;
}

#line 2337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_83xx_check(struct qlcnic_adapter *adapter)
{
  #line 2340 
  bool status;
  #line 2339 
  unsigned short device = (adapter->pdev)->device;
  #line 2342 
  status = (_Bool)(((((unsigned int)device == 32816U || (unsigned int)device == 34864U) || ((unsigned int)device == 32832U || (unsigned int)device == 33856U)) || ((unsigned int)device == 33840U || (unsigned int)device == 35888U)) != 0);
  #line 2349 
  return status;
}

#line 2416 
#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_register_hwmon_dev(struct qlcnic_adapter *adapter);
#line 2417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_unregister_hwmon_dev(struct qlcnic_adapter *adapter);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
int qlcnicvf_config_bridged_mode(struct qlcnic_adapter *adapter, u32 enable)
{
  #line 28 
  return -95;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
int qlcnicvf_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate)
{
  #line 33 
  return -95;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_store_bridged_mode(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
{
  #line 41 
  unsigned long new;
  #line 40 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 42 
  int ret = -22;
  #line 44 
  if (((adapter->ahw)->capabilities & 256U) == 0U) 
                                                   #line 45 
                                                   goto err_out;
  #line 47 
  if (! test_bit(1L,& adapter->state)) 
                                       #line 48 
                                       goto err_out;
  #line 50 
  if (kstrtoul(buf,2U,& new) != 0) 
                                   #line 51 
                                   goto err_out;
  #line 53 
  if (qlcnic_config_bridged_mode(adapter,(unsigned int)(new != 0UL)) == 0) 
    #line 54 
    ret = (int)len;
  #line 56 
  err_out: 
           #line 56 
  ;
  #line 57 
  return (long)ret;
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_show_bridged_mode(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 64 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 65 
  int bridged_mode = 0;
  #line 67 
  if (((adapter->ahw)->capabilities & 256U) != 0U) 
                                                   #line 68 
                                                   bridged_mode = (adapter->flags & 16U) != 0U;
  #line 70 
  return (long)sprintf(buf,(char *)"%d\n",bridged_mode);
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_store_diag_mode(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
{
  #line 78 
  unsigned long new;
  #line 77 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 80 
  if (kstrtoul(buf,2U,& new) != 0) 
                                   #line 81 
                                   return -22L;
  #line 83 
  if ((new != 0UL) ^ ((adapter->flags & 32U) != 0U)) 
                                                     #line 84 
                                                     adapter->flags ^= 32U;
  #line 86 
  return (long)len;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_show_diag_mode(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 92 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 93 
  return (long)sprintf(buf,(char *)"%d\n",(adapter->flags & 32U) != 0U);
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_validate_beacon(struct qlcnic_adapter *adapter, u16 beacon, u8 *state, u8 *rate)
{
  #line 99 
  *rate = (unsigned char)beacon;
  #line 100 
  *state = (unsigned char)((int)beacon >> 8);
  #line 102 
  if (((adapter->ahw)->msg_enable & 1U) != 0U) {
    #line 102 
    ;
    #line 102 
    ;
    #line 102 
    printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_validate_beacon",(int)*rate,(int)*state);
  }
  #line 104 
  if ((unsigned int)*state == 0U) {
    #line 105 
    *rate = (unsigned char)15U;
    #line 106 
    return 0;
  }
  else 
    #line 107 
    if ((unsigned int)*state > 2U) 
                                   #line 108 
                                   return -22;
  #line 111 
  if ((unsigned int)*rate + 255U > 14U) 
                                        #line 112 
                                        return -22;
  #line 114 
  return 0;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_83xx_store_beacon(struct qlcnic_adapter *adapter, char *buf, size_t len)
{
  #line 121 
  unsigned long h_beacon;
  #line 122 
  int err;
  #line 120 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 124 
  if ((int)test_bit(2L,& adapter->state) != 0) 
                                               #line 125 
                                               return -5;
  #line 127 
  if (kstrtoul(buf,2U,& h_beacon) != 0) 
                                        #line 128 
                                        return -22;
  #line 130 
  qlcnic_get_beacon_state(adapter);
  #line 132 
  if ((unsigned long)ahw->beacon_state == h_beacon) 
                                                    #line 133 
                                                    return (int)len;
  #line 135 
  rtnl_lock();
  #line 136 
  if ((unsigned int)ahw->beacon_state == 0U) {
    #line 137 
    if ((int)test_and_set_bit(7L,& adapter->state) != 0) {
      #line 138 
      rtnl_unlock();
      #line 139 
      return -16;
    }
  }
  #line 143 
  if (h_beacon != 0UL) 
                       #line 144 
                       err = qlcnic_83xx_config_led(adapter,1U,(unsigned int)h_beacon); else 
                                                                    #line 146 
                                                                    err = qlcnic_83xx_config_led(adapter,0U,(unsigned int)(h_beacon == 0UL));
  #line 147 
  if (err == 0) 
                #line 148 
                ahw->beacon_state = (unsigned char)h_beacon;
  #line 150 
  if ((unsigned int)ahw->beacon_state == 0U) 
                                             #line 151 
                                             cif_clear_bit_3(7L,& adapter->state);
  #line 153 
  rtnl_unlock();
  #line 154 
  return (int)len;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_82xx_store_beacon(struct qlcnic_adapter *adapter, char *buf, size_t len)
{
  #line 161 
  int err;
  #line 162 
  u16 beacon;
  #line 163 
  u8 b_state;
  #line 163 
  u8 b_rate;
  #line 160 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 161 
  int drv_sds_rings = (int)adapter->drv_sds_rings;
  #line 165 
  if (len != 2UL) 
                  #line 166 
                  return -22;
  #line 168 
  memcpy((void *)(& beacon),(void *)buf,2UL);
  #line 169 
  err = qlcnic_validate_beacon(adapter,(unsigned short)((int)beacon),& b_state,& b_rate);
  #line 170 
  if (err != 0) 
                #line 171 
                return err;
  #line 173 
  qlcnic_get_beacon_state(adapter);
  #line 175 
  if ((int)ahw->beacon_state == (int)b_state) 
                                              #line 176 
                                              return (int)len;
  #line 178 
  rtnl_lock();
  #line 179 
  if ((unsigned int)ahw->beacon_state == 0U) {
    #line 180 
    if ((int)test_and_set_bit(7L,& adapter->state) != 0) {
      #line 181 
      rtnl_unlock();
      #line 182 
      return -16;
    }
  }
  #line 186 
  if ((int)test_bit(2L,& adapter->state) != 0) {
    #line 187 
    err = -5;
    #line 188 
    goto out;
  }
  #line 191 
  if (! test_bit(1L,& adapter->state)) {
    #line 192 
    err = qlcnic_diag_alloc_res(adapter->netdev,3);
    #line 193 
    if (err != 0) 
                  #line 194 
                  goto out;
    #line 195 
    cif_set_bit_3(6L,& adapter->state);
  }
  #line 198 
  err = qlcnic_config_led(adapter,(unsigned int)b_state,(unsigned int)b_rate);
  #line 199 
  if (err == 0) {
    #line 200 
    err = (int)len;
    #line 201 
    ahw->beacon_state = b_state;
  }
  #line 204 
  if ((int)test_and_set_bit(6L,& adapter->state) != 0) 
                                                       #line 205 
                                                       qlcnic_diag_free_res(adapter->netdev,drv_sds_rings);
  #line 207 
  out: 
       #line 207 
  ;
  #line 208 
  if ((unsigned int)ahw->beacon_state == 0U) 
                                             #line 209 
                                             cif_clear_bit_3(7L,& adapter->state);
  #line 210 
  rtnl_unlock();
  #line 212 
  return err;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_store_beacon(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
{
  #line 219 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 220 
  int err = 0;
  #line 222 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) {
    #line 223 
    _dev_warn(dev,(char *)"LED test not supported in non privileged mode\n");
    #line 225 
    return -95L;
  }
  #line 228 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 229 
                                            err = qlcnic_82xx_store_beacon(adapter,buf,len);
  else {
    #line 230 
    if ((int)qlcnic_83xx_check(adapter) != 0) 
                                              #line 231 
                                              err = qlcnic_83xx_store_beacon(adapter,buf,len); else 
                                                                    #line 233 
                                                                    return -5L;
  }
  #line 235 
  return (long)err;
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_show_beacon(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 241 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 243 
  return (long)sprintf(buf,(char *)"%d\n",(int)(adapter->ahw)->beacon_state);
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_sysfs_validate_crb(struct qlcnic_adapter *adapter, loff_t offset, size_t size)
{
  #line 249 
  size_t crb_size = 4UL;
  #line 251 
  if ((adapter->flags & 32U) == 0U) 
                                    #line 252 
                                    return -5;
  #line 254 
  if ((unsigned long long)offset <= 100663295ULL) 
    #line 255 
    if ((unsigned long long)offset + (unsigned long long)18446744073634054144U <= (unsigned long long)2047U) 
      #line 257 
      crb_size = 8UL; else 
                           #line 259 
                           return -22;
  #line 262 
  if (size != crb_size || ((unsigned long long)(crb_size + 18446744073709551615UL) & (unsigned long long)offset) != 0ULL) 
    #line 263 
    return -22;
  #line 265 
  return 0;
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_crb(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 272 
  void *__mptr;
  #line 274 
  int ret;
  #line 272 
  __mptr = (void *)kobj;
  #line 272 
  struct device *dev = ((struct device *)__mptr);
  #line 273 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 276 
  ret = qlcnic_sysfs_validate_crb(adapter,offset,size);
  #line 277 
  if (ret != 0) 
                #line 278 
                return (long)ret;
  #line 279 
  qlcnic_read_crb(adapter,buf,offset,size);
  #line 280 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 282 
  return (long)size;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_crb(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 289 
  void *__mptr;
  #line 291 
  int ret;
  #line 289 
  __mptr = (void *)kobj;
  #line 289 
  struct device *dev = ((struct device *)__mptr);
  #line 290 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 293 
  ret = qlcnic_sysfs_validate_crb(adapter,offset,size);
  #line 294 
  if (ret != 0) 
                #line 295 
                return (long)ret;
  #line 297 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 298 
  qlcnic_write_crb(adapter,buf,offset,size);
  #line 299 
  return (long)size;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_sysfs_validate_mem(struct qlcnic_adapter *adapter, loff_t offset, size_t size)
{
  #line 305 
  if ((adapter->flags & 32U) == 0U) 
                                    #line 306 
                                    return -5;
  #line 308 
  if (size != 8UL || (offset & 7LL) != 0LL) 
                                            #line 309 
                                            return -5;
  #line 311 
  return 0;
}

#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_mem(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 318 
  void *__mptr;
  #line 320 
  u64 data;
  #line 321 
  int ret;
  #line 318 
  __mptr = (void *)kobj;
  #line 318 
  struct device *dev = ((struct device *)__mptr);
  #line 319 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 323 
  ret = qlcnic_sysfs_validate_mem(adapter,offset,size);
  #line 324 
  if (ret != 0) 
                #line 325 
                return (long)ret;
  #line 327 
  if (qlcnic_pci_mem_read_2M(adapter,(unsigned long long)offset,& data) != 0) 
    #line 328 
    return -5L;
  #line 330 
  memcpy((void *)buf,(void *)(& data),size);
  #line 331 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 333 
  return (long)size;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_mem(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 340 
  void *__mptr;
  #line 342 
  u64 data;
  #line 343 
  int ret;
  #line 340 
  __mptr = (void *)kobj;
  #line 340 
  struct device *dev = ((struct device *)__mptr);
  #line 341 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 345 
  ret = qlcnic_sysfs_validate_mem(adapter,offset,size);
  #line 346 
  if (ret != 0) 
                #line 347 
                return (long)ret;
  #line 349 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 350 
  memcpy((void *)(& data),(void *)buf,size);
  #line 352 
  if (qlcnic_pci_mem_write_2M(adapter,(unsigned long long)offset,data) != 0) 
    #line 353 
    return -5L;
  #line 355 
  return (long)size;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
int qlcnic_is_valid_nic_func(struct qlcnic_adapter *adapter, u8 pci_func)
{
  #line 360 
  int i;
  #line 362 
  i = 0;
  #line 362 
  while ((int)(adapter->ahw)->total_nic_func > i) {
    #line 363 
    if ((int)(adapter->npars + (unsigned long)i)->pci_func == (int)pci_func) 
      #line 364 
      return i;
    #line 362 
    i ++;
  }
  #line 367 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: Invalid nic function\n",(char *)"qlcnic_is_valid_nic_func");
  #line 368 
  return -22;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int validate_pm_config(struct qlcnic_adapter *adapter, struct qlcnic_pm_func_cfg *pm_cfg, int count)
{
  #line 374 
  u8 src_pci_func;
  #line 374 
  u8 s_esw_id;
  #line 374 
  u8 d_esw_id;
  #line 375 
  u8 dest_pci_func;
  #line 376 
  int i;
  #line 376 
  int src_index;
  #line 376 
  int dest_index;
  #line 378 
  i = 0;
  #line 378 
  while (i < count) {
    #line 379 
    src_pci_func = (pm_cfg + (unsigned long)i)->pci_func;
    #line 380 
    dest_pci_func = (pm_cfg + (unsigned long)i)->dest_npar;
    #line 381 
    src_index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)src_pci_func));
    #line 382 
    if (src_index < 0) 
                       #line 383 
                       return -22;
    #line 385 
    dest_index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)dest_pci_func));
    #line 386 
    if (dest_index < 0) 
                        #line 387 
                        return -22;
    #line 389 
    s_esw_id = (adapter->npars + (unsigned long)src_index)->phy_port;
    #line 390 
    d_esw_id = (adapter->npars + (unsigned long)dest_index)->phy_port;
    #line 392 
    if ((int)s_esw_id != (int)d_esw_id) 
                                        #line 393 
                                        return -22;
    #line 378 
    i ++;
  }
  #line 396 
  return 0;
}

#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_pm_config(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 405 
  void *__mptr;
  #line 407 
  struct qlcnic_pm_func_cfg *pm_cfg;
  #line 408 
  u32 id;
  #line 408 
  u32 action;
  #line 408 
  u32 pci_func;
  #line 409 
  int count;
  #line 409 
  int rem;
  #line 409 
  int i;
  #line 409 
  int ret;
  #line 409 
  int index;
  #line 405 
  __mptr = (void *)kobj;
  #line 405 
  struct device *dev = ((struct device *)__mptr);
  #line 406 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 411 
  count = (int)(size / 8UL);
  #line 412 
  rem = (int)size & 7;
  #line 413 
  if (rem != 0) 
                #line 414 
                return -22L;
  #line 416 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 417 
  pm_cfg = (struct qlcnic_pm_func_cfg *)buf;
  #line 418 
  ret = validate_pm_config(adapter,pm_cfg,count);
  #line 420 
  if (ret != 0) 
                #line 421 
                return (long)ret;
  #line 422 
  i = 0;
  #line 422 
  while (i < count) {
    #line 423 
    pci_func = (unsigned int)(pm_cfg + (unsigned long)i)->pci_func;
    #line 424 
    action = (unsigned int)((unsigned int)(pm_cfg + (unsigned long)i)->action != 0U);
    #line 425 
    index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)((unsigned char)pci_func)));
    #line 426 
    if (index < 0) 
                   #line 427 
                   return -22L;
    #line 429 
    id = (unsigned int)(adapter->npars + (unsigned long)index)->phy_port;
    #line 430 
    ret = qlcnic_config_port_mirroring(adapter,(unsigned char)((int)((unsigned char)id)),(unsigned char)((int)((unsigned char)action)),(unsigned char)((int)((unsigned char)pci_func)));
    #line 432 
    if (ret != 0) 
                  #line 433 
                  return (long)ret;
    #line 422 
    i ++;
  }
  #line 436 
  i = 0;
  #line 436 
  while (i < count) {
    #line 437 
    pci_func = (unsigned int)(pm_cfg + (unsigned long)i)->pci_func;
    #line 438 
    index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)((unsigned char)pci_func)));
    #line 439 
    if (index < 0) 
                   #line 440 
                   return -22L;
    #line 441 
    id = (unsigned int)(adapter->npars + (unsigned long)index)->phy_port;
    #line 442 
    (adapter->npars + (unsigned long)index)->enable_pm = (unsigned char)((unsigned int)(pm_cfg + (unsigned long)i)->action != 0U);
    #line 443 
    (adapter->npars + (unsigned long)index)->dest_npar = (unsigned char)id;
    #line 436 
    i ++;
  }
  #line 446 
  return (long)size;
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_pm_config(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 455 
  void *__mptr;
  #line 457 
  struct qlcnic_pm_func_cfg *pm_cfg;
  #line 458 
  u8 pci_func;
  #line 459 
  u32 count;
  #line 460 
  int i;
  #line 455 
  __mptr = (void *)kobj;
  #line 455 
  struct device *dev = ((struct device *)__mptr);
  #line 456 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 462 
  memset((void *)buf,0,size);
  #line 463 
  pm_cfg = (struct qlcnic_pm_func_cfg *)buf;
  #line 464 
  count = (unsigned int)(size / 8UL);
  #line 465 
  i = 0;
  #line 465 
  while ((int)(adapter->ahw)->total_nic_func > i) {
    #line 466 
    pci_func = (adapter->npars + (unsigned long)i)->pci_func;
    #line 467 
    if ((unsigned int)pci_func >= count) {
      {
        #line 468 
        bool branch;
        #line 468 
        struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"qlcnic", .function = (char *)"qlcnic_sysfs_read_pm_config", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c", .format = (char *)"%s: Total nic functions[%d], App sent function count[%d]\n", .lineno = (unsigned int)468U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 468 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
        #line 468 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 468 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug538,dev,(char *)"%s: Total nic functions[%d], App sent function count[%d]\n",(char *)"qlcnic_sysfs_read_pm_config",(int)(adapter->ahw)->total_nic_func,count);
      }
      #line 470 
      goto __Cont;
    }
    #line 472 
    if (! (adapter->npars + (unsigned long)i)->eswitch_status) 
                                                               #line 473 
                                                               goto __Cont;
    #line 475 
    (pm_cfg + (unsigned long)pci_func)->action = (adapter->npars + (unsigned long)i)->enable_pm;
    #line 476 
    (pm_cfg + (unsigned long)pci_func)->dest_npar = (unsigned char)0U;
    #line 477 
    (pm_cfg + (unsigned long)pci_func)->pci_func = (unsigned char)i;
    #line 465 
    __Cont: 
            #line 465 
    i ++;
  }
  #line 479 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 480 
  return (long)size;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int validate_esw_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg, int count)
{
  #line 487 
  int i;
  #line 487 
  int ret;
  #line 488 
  u32 op_mode;
  #line 489 
  u8 pci_func;
  #line 486 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 491 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 492 
                                            op_mode = readl(ahw->pci_base0 + 20U); else 
                                                                    #line 494 
                                                                    op_mode = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 37U));
  #line 496 
  i = 0;
  #line 496 
  while (i < count) {
    #line 497 
    pci_func = (esw_cfg + (unsigned long)i)->pci_func;
    #line 498 
    if ((unsigned int)pci_func >= ahw->max_vnic_func) 
                                                      #line 499 
                                                      return -22;
    #line 501 
    if ((unsigned int)(adapter->ahw)->op_mode == 0U) {
      #line 502 
      if (qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func)) < 0) 
        #line 503 
        return -22;
    }
    #line 505 
    switch ((int)(esw_cfg + (unsigned long)i)->op_mode) {
      #line 506 
      case 0: 
              #line 506 
      ;
      #line 507 
      if ((int)qlcnic_82xx_check(adapter) != 0) 
                                                #line 508 
                                                ret = (int)(op_mode >> (int)pci_func * 4) & 15;
      else {
        #line 510 
        ret = (int)(op_mode >> (int)pci_func * 2) & 3;
        #line 512 
        (esw_cfg + (unsigned long)i)->offload_flags = (unsigned char)0U;
      }
      #line 515 
      if (ret != 2) {
        #line 516 
        if ((unsigned int)(esw_cfg + (unsigned long)i)->mac_anti_spoof != 0U) 
          #line 517 
          return -22;
        #line 518 
        if ((unsigned int)(esw_cfg + (unsigned long)i)->mac_override != 1U) 
          #line 519 
          return -22;
        #line 520 
        if ((unsigned int)(esw_cfg + (unsigned long)i)->promisc_mode != 1U) 
          #line 521 
          return -22;
      }
      #line 523 
      break;
      #line 524 
      case 1: 
              #line 524 
      ;
      #line 525 
      if ((unsigned int)(esw_cfg + (unsigned long)i)->vlan_id + 65534U > 4092U) 
        #line 526 
        return -22;
      #line 527 
      if ((unsigned int)(esw_cfg + (unsigned long)i)->op_type == 0U) 
        #line 528 
        return -22;
      #line 529 
      break;
      #line 530 
      case 2: 
              #line 530 
      ;
      #line 531 
      if ((unsigned int)(esw_cfg + (unsigned long)i)->op_type == 0U) 
        #line 532 
        return -22;
      #line 533 
      break;
      #line 534 
      default: 
               #line 534 
      ;
      #line 535 
      return -22;
    }
    #line 496 
    i ++;
  }
  #line 539 
  return 0;
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_esw_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 548 
  void *__mptr;
  #line 550 
  struct qlcnic_esw_func_cfg *esw_cfg;
  #line 551 
  struct qlcnic_npar_info *npar;
  #line 552 
  int count;
  #line 552 
  int rem;
  #line 552 
  int i;
  #line 552 
  int ret;
  #line 553 
  int index;
  #line 554 
  u8 pci_func;
  #line 548 
  __mptr = (void *)kobj;
  #line 548 
  struct device *dev = ((struct device *)__mptr);
  #line 549 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 554 
  u8 op_mode = (unsigned char)0U;
  #line 556 
  count = (int)(size / 16UL);
  #line 557 
  rem = (int)size & 15;
  #line 558 
  if (rem != 0) 
                #line 559 
                return -22L;
  #line 561 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 562 
  esw_cfg = (struct qlcnic_esw_func_cfg *)buf;
  #line 563 
  ret = validate_esw_config(adapter,esw_cfg,count);
  #line 564 
  if (ret != 0) 
                #line 565 
                return (long)ret;
  #line 567 
  i = 0;
  #line 567 
  while (i < count) {
    #line 568 
    if ((unsigned int)(adapter->ahw)->op_mode == 0U) {
      #line 569 
      if (qlcnic_config_switch_port(adapter,esw_cfg + (unsigned long)i) != 0) 
        #line 570 
        return -22L;
    }
    #line 572 
    if ((int)(adapter->ahw)->pci_func != (int)(esw_cfg + (unsigned long)i)->pci_func) 
      #line 573 
      goto __Cont;
    #line 575 
    op_mode = (esw_cfg + (unsigned long)i)->op_mode;
    #line 576 
    qlcnic_get_eswitch_port_config(adapter,esw_cfg + (unsigned long)i);
    #line 577 
    (esw_cfg + (unsigned long)i)->op_mode = op_mode;
    #line 578 
    (esw_cfg + (unsigned long)i)->pci_func = (adapter->ahw)->pci_func;
    #line 580 
    switch ((int)(esw_cfg + (unsigned long)i)->op_mode) {
      #line 581 
      case 0: 
              #line 581 
      ;
      #line 582 
      qlcnic_set_eswitch_port_features(adapter,esw_cfg + (unsigned long)i);
      #line 583 
      rtnl_lock();
      #line 584 
      qlcnic_set_netdev_features(adapter,esw_cfg + (unsigned long)i);
      #line 585 
      rtnl_unlock();
      #line 586 
      break;
      #line 587 
      case 1: 
              #line 587 
      ;
      #line 588 
      qlcnic_set_vlan_config(adapter,esw_cfg + (unsigned long)i);
      #line 589 
      break;
      #line 590 
      case 2: 
              #line 590 
      ;
      #line 591 
      (esw_cfg + (unsigned long)i)->vlan_id = (unsigned short)0U;
      #line 592 
      qlcnic_set_vlan_config(adapter,esw_cfg + (unsigned long)i);
      #line 593 
      break;
    }
    #line 567 
    __Cont: 
            #line 567 
    i ++;
  }
  #line 597 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) 
                                                   #line 598 
                                                   goto out;
  #line 600 
  i = 0;
  #line 600 
  while (i < count) {
    #line 601 
    pci_func = (esw_cfg + (unsigned long)i)->pci_func;
    #line 602 
    index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func));
    #line 603 
    if (index < 0) 
                   #line 604 
                   return -22L;
    #line 605 
    npar = adapter->npars + (unsigned long)index;
    #line 606 
    switch ((int)(esw_cfg + (unsigned long)i)->op_mode) {
      #line 607 
      case 0: 
              #line 607 
      ;
      #line 608 
      npar->promisc_mode = (esw_cfg + (unsigned long)i)->promisc_mode;
      #line 609 
      npar->mac_override = (esw_cfg + (unsigned long)i)->mac_override;
      #line 610 
      npar->offload_flags = (esw_cfg + (unsigned long)i)->offload_flags;
      #line 611 
      npar->mac_anti_spoof = (esw_cfg + (unsigned long)i)->mac_anti_spoof;
      #line 612 
      npar->discard_tagged = (esw_cfg + (unsigned long)i)->discard_tagged;
      #line 613 
      break;
      #line 614 
      case 1: 
              #line 614 
      ;
      #line 615 
      npar->pvid = (esw_cfg + (unsigned long)i)->vlan_id;
      #line 616 
      break;
      #line 617 
      case 2: 
              #line 617 
      ;
      #line 618 
      npar->pvid = (unsigned short)0U;
      #line 619 
      break;
    }
    #line 600 
    i ++;
  }
  #line 622 
  out: 
       #line 622 
  ;
  #line 623 
  return (long)size;
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_esw_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 632 
  void *__mptr;
  #line 634 
  struct qlcnic_esw_func_cfg *esw_cfg;
  #line 635 
  u8 pci_func;
  #line 636 
  u32 count;
  #line 637 
  int i;
  #line 632 
  __mptr = (void *)kobj;
  #line 632 
  struct device *dev = ((struct device *)__mptr);
  #line 633 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 639 
  memset((void *)buf,0,size);
  #line 640 
  esw_cfg = (struct qlcnic_esw_func_cfg *)buf;
  #line 641 
  count = (unsigned int)(size / 16UL);
  #line 642 
  i = 0;
  #line 642 
  while ((int)(adapter->ahw)->total_nic_func > i) {
    {
      #line 643 
      pci_func = (adapter->npars + (unsigned long)i)->pci_func;
      #line 644 
      if ((unsigned int)pci_func >= count) {
        {
          #line 645 
          bool branch;
          #line 645 
          struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"qlcnic", .function = (char *)"qlcnic_sysfs_read_esw_config", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c", .format = (char *)"%s: Total nic functions[%d], App sent function count[%d]\n", .lineno = (unsigned int)645U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 645 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
          #line 645 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 645 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug539,dev,(char *)"%s: Total nic functions[%d], App sent function count[%d]\n",(char *)"qlcnic_sysfs_read_esw_config",(int)(adapter->ahw)->total_nic_func,count);
        }
        #line 647 
        goto __Cont;
      }
      #line 649 
      if (! (adapter->npars + (unsigned long)i)->eswitch_status) 
                                                                 #line 650 
                                                                 goto __Cont;
      #line 652 
      (esw_cfg + (unsigned long)pci_func)->pci_func = pci_func;
      #line 653 
      if (qlcnic_get_eswitch_port_config(adapter,
                                       esw_cfg + (unsigned long)pci_func) != 0) 
        #line 654 
        return -22L;
    }
    #line 642 
    __Cont: 
            #line 642 
    i ++;
  }
  #line 656 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 657 
  return (long)size;
}

#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int validate_npar_config(struct qlcnic_adapter *adapter, struct qlcnic_npar_func_cfg *np_cfg, int count)
{
  #line 664 
  u8 pci_func;
  #line 664 
  u8 i;
  #line 666 
  i = (unsigned char)0U;
  #line 666 
  while ((int)i < count) {
    {
      #line 667 
      pci_func = (np_cfg + (unsigned long)i)->pci_func;
      #line 668 
      if (qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func)) < 0) 
        #line 669 
        return -22;
      #line 671 
      if ((unsigned int)(np_cfg + (unsigned long)i)->min_bw > 100U || (unsigned int)(np_cfg + (unsigned long)i)->max_bw > 100U) 
        #line 673 
        return -22;
    }
    #line 666 
    i = (u8)((int)i + 1);
  }
  #line 675 
  return 0;
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_npar_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 684 
  void *__mptr;
  #line 686 
  struct qlcnic_info nic_info;
  #line 687 
  struct qlcnic_npar_func_cfg *np_cfg;
  #line 688 
  int i;
  #line 688 
  int count;
  #line 688 
  int rem;
  #line 688 
  int ret;
  #line 688 
  int index;
  #line 689 
  u8 pci_func;
  #line 684 
  __mptr = (void *)kobj;
  #line 684 
  struct device *dev = ((struct device *)__mptr);
  #line 685 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 691 
  count = (int)(size / 16UL);
  #line 692 
  rem = (int)size & 15;
  #line 693 
  if (rem != 0) 
                #line 694 
                return -22L;
  #line 696 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 697 
  np_cfg = (struct qlcnic_npar_func_cfg *)buf;
  #line 698 
  ret = validate_npar_config(adapter,np_cfg,count);
  #line 699 
  if (ret != 0) 
                #line 700 
                return (long)ret;
  #line 702 
  i = 0;
  #line 702 
  while (i < count) {
    #line 703 
    pci_func = (np_cfg + (unsigned long)i)->pci_func;
    #line 705 
    memset((void *)(& nic_info),0,72UL);
    #line 706 
    ret = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)pci_func));
    #line 707 
    if (ret != 0) 
                  #line 708 
                  return (long)ret;
    #line 709 
    nic_info.pci_func = (unsigned short)pci_func;
    #line 710 
    nic_info.min_tx_bw = (np_cfg + (unsigned long)i)->min_bw;
    #line 711 
    nic_info.max_tx_bw = (np_cfg + (unsigned long)i)->max_bw;
    #line 712 
    ret = qlcnic_set_nic_info(adapter,& nic_info);
    #line 713 
    if (ret != 0) 
                  #line 714 
                  return (long)ret;
    #line 715 
    index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func));
    #line 716 
    if (index < 0) 
                   #line 717 
                   return -22L;
    #line 718 
    (adapter->npars + (unsigned long)index)->min_bw = nic_info.min_tx_bw;
    #line 719 
    (adapter->npars + (unsigned long)index)->max_bw = nic_info.max_tx_bw;
    #line 702 
    i ++;
  }
  #line 722 
  return (long)size;
}

#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_npar_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 731 
  void *__mptr;
  #line 733 
  struct qlcnic_npar_func_cfg *np_cfg;
  #line 734 
  struct qlcnic_info nic_info;
  #line 735 
  u8 pci_func;
  #line 736 
  int i;
  #line 736 
  int ret;
  #line 737 
  u32 count;
  #line 731 
  __mptr = (void *)kobj;
  #line 731 
  struct device *dev = ((struct device *)__mptr);
  #line 732 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 739 
  memset((void *)(& nic_info),0,72UL);
  #line 740 
  memset((void *)buf,0,size);
  #line 741 
  np_cfg = (struct qlcnic_npar_func_cfg *)buf;
  #line 743 
  count = (unsigned int)(size / 16UL);
  #line 744 
  i = 0;
  #line 744 
  while ((int)(adapter->ahw)->total_nic_func > i) {
    {
      #line 745 
      if ((unsigned int)(adapter->npars + (unsigned long)i)->pci_func >= count) {
        {
          #line 746 
          bool branch;
          #line 746 
          struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"qlcnic", .function = (char *)"qlcnic_sysfs_read_npar_config", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c", .format = (char *)"%s: Total nic functions[%d], App sent function count[%d]\n", .lineno = (unsigned int)746U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 746 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
          #line 746 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 746 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug540,dev,(char *)"%s: Total nic functions[%d], App sent function count[%d]\n",(char *)"qlcnic_sysfs_read_npar_config",(int)(adapter->ahw)->total_nic_func,count);
        }
        #line 748 
        goto __Cont;
      }
      #line 750 
      if (! (adapter->npars + (unsigned long)i)->eswitch_status) 
                                                                 #line 751 
                                                                 goto __Cont;
      #line 752 
      pci_func = (adapter->npars + (unsigned long)i)->pci_func;
      #line 753 
      if (qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func)) < 0) 
        #line 754 
        goto __Cont;
      #line 755 
      ret = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)pci_func));
      #line 756 
      if (ret != 0) 
                    #line 757 
                    return (long)ret;
      #line 759 
      (np_cfg + (unsigned long)pci_func)->pci_func = pci_func;
      #line 760 
      (np_cfg + (unsigned long)pci_func)->op_mode = (unsigned char)nic_info.op_mode;
      #line 761 
      (np_cfg + (unsigned long)pci_func)->port_num = nic_info.phys_port;
      #line 762 
      (np_cfg + (unsigned long)pci_func)->fw_capab = nic_info.capabilities;
      #line 763 
      (np_cfg + (unsigned long)pci_func)->min_bw = nic_info.min_tx_bw;
      #line 764 
      (np_cfg + (unsigned long)pci_func)->max_bw = nic_info.max_tx_bw;
      #line 765 
      (np_cfg + (unsigned long)pci_func)->max_tx_queues = nic_info.max_tx_ques;
      #line 766 
      (np_cfg + (unsigned long)pci_func)->max_rx_queues = nic_info.max_rx_ques;
    }
    #line 744 
    __Cont: 
            #line 744 
    i ++;
  }
  #line 768 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 769 
  return (long)size;
}

#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_get_port_stats(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 778 
  void *__mptr;
  #line 780 
  struct qlcnic_esw_statistics port_stats;
  #line 781 
  int ret;
  #line 778 
  __mptr = (void *)kobj;
  #line 778 
  struct device *dev = ((struct device *)__mptr);
  #line 779 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 783 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 784 
                                            return -95L;
  #line 786 
  if (size != 176UL) 
                     #line 787 
                     return -22L;
  #line 789 
  if ((long long)(adapter->ahw)->max_vnic_func <= offset) 
                                                          #line 790 
                                                          return -22L;
  #line 792 
  memset((void *)(& port_stats),0,size);
  #line 793 
  ret = qlcnic_get_port_stats(adapter,(unsigned char)((int)((unsigned char)offset)),(unsigned char)0,& port_stats.rx);
  #line 795 
  if (ret != 0) 
                #line 796 
                return (long)ret;
  #line 798 
  ret = qlcnic_get_port_stats(adapter,(unsigned char)((int)((unsigned char)offset)),(unsigned char)1,& port_stats.tx);
  #line 800 
  if (ret != 0) 
                #line 801 
                return (long)ret;
  #line 803 
  memcpy((void *)buf,(void *)(& port_stats),size);
  #line 804 
  return (long)size;
}

#line 807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_get_esw_stats(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 813 
  void *__mptr;
  #line 815 
  struct qlcnic_esw_statistics esw_stats;
  #line 816 
  int ret;
  #line 813 
  __mptr = (void *)kobj;
  #line 813 
  struct device *dev = ((struct device *)__mptr);
  #line 814 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 818 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 819 
                                            return -95L;
  #line 821 
  if (size != 176UL) 
                     #line 822 
                     return -22L;
  #line 824 
  if (offset > 1LL) 
                    #line 825 
                    return -22L;
  #line 827 
  memset((void *)(& esw_stats),0,size);
  #line 828 
  ret = qlcnic_get_eswitch_stats(adapter,(unsigned char)((int)((unsigned char)offset)),(unsigned char)0,& esw_stats.rx);
  #line 830 
  if (ret != 0) 
                #line 831 
                return (long)ret;
  #line 833 
  ret = qlcnic_get_eswitch_stats(adapter,(unsigned char)((int)((unsigned char)offset)),(unsigned char)1,& esw_stats.tx);
  #line 835 
  if (ret != 0) 
                #line 836 
                return (long)ret;
  #line 838 
  memcpy((void *)buf,(void *)(& esw_stats),size);
  #line 839 
  return (long)size;
}

#line 842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_clear_esw_stats(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 848 
  void *__mptr;
  #line 850 
  int ret;
  #line 848 
  __mptr = (void *)kobj;
  #line 848 
  struct device *dev = ((struct device *)__mptr);
  #line 849 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 852 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 853 
                                            return -95L;
  #line 855 
  if (offset > 1LL) 
                    #line 856 
                    return -22L;
  #line 858 
  ret = qlcnic_clear_esw_stats(adapter,(unsigned char)2,(unsigned char)((int)((unsigned char)offset)),(unsigned char)0);
  #line 860 
  if (ret != 0) 
                #line 861 
                return (long)ret;
  #line 863 
  ret = qlcnic_clear_esw_stats(adapter,(unsigned char)2,(unsigned char)((int)((unsigned char)offset)),(unsigned char)1);
  #line 865 
  if (ret != 0) 
                #line 866 
                return (long)ret;
  #line 868 
  return (long)size;
}

#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_clear_port_stats(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 878 
  void *__mptr;
  #line 880 
  int ret;
  #line 878 
  __mptr = (void *)kobj;
  #line 878 
  struct device *dev = ((struct device *)__mptr);
  #line 879 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 882 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 883 
                                            return -95L;
  #line 885 
  if ((long long)(adapter->ahw)->max_vnic_func <= offset) 
                                                          #line 886 
                                                          return -22L;
  #line 888 
  ret = qlcnic_clear_esw_stats(adapter,(unsigned char)1,(unsigned char)((int)((unsigned char)offset)),(unsigned char)0);
  #line 890 
  if (ret != 0) 
                #line 891 
                return (long)ret;
  #line 893 
  ret = qlcnic_clear_esw_stats(adapter,(unsigned char)1,(unsigned char)((int)((unsigned char)offset)),(unsigned char)1);
  #line 895 
  if (ret != 0) 
                #line 896 
                return (long)ret;
  #line 898 
  return (long)size;
}

#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_pci_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 907 
  void *__mptr;
  #line 909 
  struct qlcnic_pci_func_cfg *pci_cfg;
  #line 910 
  struct qlcnic_pci_info *pci_info;
  #line 911 
  int i;
  #line 911 
  int ret;
  #line 912 
  u32 count;
  #line 907 
  __mptr = (void *)kobj;
  #line 907 
  struct device *dev = ((struct device *)__mptr);
  #line 908 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 914 
  pci_info = (struct qlcnic_pci_info *)kcalloc_1(size,20UL,3264U);
  #line 915 
  if (pci_info == (struct qlcnic_pci_info *)0) 
                                               #line 916 
                                               return -12L;
  #line 918 
  ret = qlcnic_get_pci_info(adapter,pci_info);
  #line 919 
  if (ret != 0) {
    #line 920 
    kfree((void *)pci_info);
    #line 921 
    return (long)ret;
  }
  #line 924 
  pci_cfg = (struct qlcnic_pci_func_cfg *)buf;
  #line 925 
  count = (unsigned int)(size / 16UL);
  #line 926 
  qlcnic_swap32_buffer((u32 *)pci_info,(int)(size / 4UL));
  #line 927 
  i = 0;
  #line 927 
  while ((unsigned int)i < count) {
    #line 928 
    (pci_cfg + (unsigned long)i)->pci_func = (unsigned char)(pci_info + (unsigned long)i)->id;
    #line 929 
    (pci_cfg + (unsigned long)i)->func_type = (pci_info + (unsigned long)i)->type;
    #line 930 
    (pci_cfg + (unsigned long)i)->func_state = (unsigned char)0U;
    #line 931 
    (pci_cfg + (unsigned long)i)->port_num = (pci_info + (unsigned long)i)->default_port;
    #line 932 
    (pci_cfg + (unsigned long)i)->min_bw = (pci_info + (unsigned long)i)->tx_min_bw;
    #line 933 
    (pci_cfg + (unsigned long)i)->max_bw = (pci_info + (unsigned long)i)->tx_max_bw;
    #line 934 
    memcpy((void *)(& (pci_cfg + (unsigned long)i)->def_mac_addr),(void *)(& (pci_info + (unsigned long)i)->mac),6UL);
    #line 927 
    i ++;
  }
  #line 937 
  kfree((void *)pci_info);
  #line 938 
  return (long)size;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_83xx_sysfs_flash_read_handler(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 949 
  void *__mptr;
  #line 947 
  unsigned char *p_read_buf;
  #line 948 
  int ret;
  #line 948 
  int count;
  #line 949 
  __mptr = (void *)kobj;
  #line 949 
  struct device *dev = ((struct device *)__mptr);
  #line 950 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 952 
  if (size == 0UL) 
                   #line 953 
                   return -22L;
  #line 955 
  count = (int)(size / 4UL);
  #line 957 
  if ((size & 3UL) != 0UL) 
                           #line 958 
                           count ++;
  #line 960 
  p_read_buf = (unsigned char *)kcalloc_1(size,1UL,3264U);
  #line 961 
  if (p_read_buf == (unsigned char *)0U) 
                                         #line 962 
                                         return -12L;
  #line 963 
  if (qlcnic_83xx_lock_flash(adapter) != 0) {
    #line 964 
    kfree((void *)p_read_buf);
    #line 965 
    return -5L;
  }
  #line 968 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,(unsigned int)offset,p_read_buf,count);
  #line 971 
  if (ret != 0) {
    #line 972 
    qlcnic_83xx_unlock_flash(adapter);
    #line 973 
    kfree((void *)p_read_buf);
    #line 974 
    return (long)ret;
  }
  #line 977 
  qlcnic_83xx_unlock_flash(adapter);
  #line 978 
  qlcnic_swap32_buffer((u32 *)p_read_buf,count);
  #line 979 
  memcpy((void *)buf,(void *)p_read_buf,size);
  #line 980 
  kfree((void *)p_read_buf);
  #line 982 
  return (long)size;
}

#line 985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_83xx_sysfs_flash_bulk_write(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  #line 989 
  int i;
  #line 989 
  int ret;
  #line 989 
  int count;
  #line 990 
  unsigned char *p_cache;
  #line 990 
  unsigned char *p_src;
  #line 992 
  p_cache = (unsigned char *)kcalloc_1(size,1UL,3264U);
  #line 993 
  if (p_cache == (unsigned char *)0U) 
                                      #line 994 
                                      return -12;
  #line 996 
  count = (int)(size / 4UL);
  #line 997 
  qlcnic_swap32_buffer((u32 *)buf,count);
  #line 998 
  memcpy((void *)p_cache,(void *)buf,size);
  #line 999 
  p_src = p_cache;
  #line 1001 
  if (qlcnic_83xx_lock_flash(adapter) != 0) {
    #line 1002 
    kfree((void *)p_cache);
    #line 1003 
    return -5;
  }
  #line 1006 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    #line 1007 
    ret = qlcnic_83xx_enable_flash_write(adapter);
    #line 1008 
    if (ret != 0) {
      #line 1009 
      kfree((void *)p_cache);
      #line 1010 
      qlcnic_83xx_unlock_flash(adapter);
      #line 1011 
      return -5;
    }
  }
  #line 1015 
  i = 0;
  #line 1015 
  while (count / 64 > i) {
    #line 1016 
    ret = qlcnic_83xx_flash_bulk_write(adapter,(unsigned int)offset,(u32 *)p_src,64);
    #line 1020 
    if (ret != 0) {
      #line 1021 
      if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
        #line 1022 
        ret = qlcnic_83xx_disable_flash_write(adapter);
        #line 1023 
        if (ret != 0) {
          #line 1024 
          kfree((void *)p_cache);
          #line 1025 
          qlcnic_83xx_unlock_flash(adapter);
          #line 1026 
          return -5;
        }
      }
      #line 1030 
      kfree((void *)p_cache);
      #line 1031 
      qlcnic_83xx_unlock_flash(adapter);
      #line 1032 
      return -5;
    }
    #line 1035 
    p_src += 256UL;
    #line 1036 
    offset = (long long)((unsigned long long)offset + 256ULL);
    #line 1015 
    i ++;
  }
  #line 1039 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    #line 1040 
    ret = qlcnic_83xx_disable_flash_write(adapter);
    #line 1041 
    if (ret != 0) {
      #line 1042 
      kfree((void *)p_cache);
      #line 1043 
      qlcnic_83xx_unlock_flash(adapter);
      #line 1044 
      return -5;
    }
  }
  #line 1048 
  kfree((void *)p_cache);
  #line 1049 
  qlcnic_83xx_unlock_flash(adapter);
  #line 1051 
  return 0;
}

#line 1054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_83xx_sysfs_flash_write(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  #line 1057 
  int i;
  #line 1057 
  int ret;
  #line 1057 
  int count;
  #line 1058 
  unsigned char *p_cache;
  #line 1058 
  unsigned char *p_src;
  #line 1060 
  p_cache = (unsigned char *)kcalloc_1(size,1UL,3264U);
  #line 1061 
  if (p_cache == (unsigned char *)0U) 
                                      #line 1062 
                                      return -12;
  #line 1064 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  #line 1065 
  memcpy((void *)p_cache,(void *)buf,size);
  #line 1066 
  p_src = p_cache;
  #line 1067 
  count = (int)(size / 4UL);
  #line 1069 
  if (qlcnic_83xx_lock_flash(adapter) != 0) {
    #line 1070 
    kfree((void *)p_cache);
    #line 1071 
    return -5;
  }
  #line 1074 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    #line 1075 
    ret = qlcnic_83xx_enable_flash_write(adapter);
    #line 1076 
    if (ret != 0) {
      #line 1077 
      kfree((void *)p_cache);
      #line 1078 
      qlcnic_83xx_unlock_flash(adapter);
      #line 1079 
      return -5;
    }
  }
  #line 1083 
  i = 0;
  #line 1083 
  while (i < count) {
    #line 1084 
    ret = qlcnic_83xx_flash_write32(adapter,(unsigned int)offset,(u32 *)p_src);
    #line 1085 
    if (ret != 0) {
      #line 1086 
      if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
        #line 1087 
        ret = qlcnic_83xx_disable_flash_write(adapter);
        #line 1088 
        if (ret != 0) {
          #line 1089 
          kfree((void *)p_cache);
          #line 1090 
          qlcnic_83xx_unlock_flash(adapter);
          #line 1091 
          return -5;
        }
      }
      #line 1094 
      kfree((void *)p_cache);
      #line 1095 
      qlcnic_83xx_unlock_flash(adapter);
      #line 1096 
      return -5;
    }
    #line 1099 
    p_src += 4UL;
    #line 1100 
    offset = (long long)((unsigned long long)offset + 4ULL);
    #line 1083 
    i ++;
  }
  #line 1103 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    #line 1104 
    ret = qlcnic_83xx_disable_flash_write(adapter);
    #line 1105 
    if (ret != 0) {
      #line 1106 
      kfree((void *)p_cache);
      #line 1107 
      qlcnic_83xx_unlock_flash(adapter);
      #line 1108 
      return -5;
    }
  }
  #line 1112 
  kfree((void *)p_cache);
  #line 1113 
  qlcnic_83xx_unlock_flash(adapter);
  #line 1115 
  return 0;
}

#line 1118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_83xx_sysfs_flash_write_handler(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 1127 
  void *__mptr;
  #line 1124 
  int ret;
  #line 1125 
  int flash_mode;
  #line 1126 
  unsigned long data;
  #line 1127 
  __mptr = (void *)kobj;
  #line 1127 
  struct device *dev = ((struct device *)__mptr);
  #line 1128 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 1130 
  ret = kstrtoul(buf,16U,& data);
  #line 1131 
  if (ret != 0) 
                #line 1132 
                return (long)ret;
  #line 1134 
  switch (data) {
    #line 1135 
    case (unsigned long)(-559038737): 
                                      #line 1135 
    ;
    #line 1136 
    flash_mode = 1;
    #line 1137 
    ret = qlcnic_83xx_erase_flash_sector(adapter,(unsigned int)offset);
    #line 1138 
    if (ret != 0) {
      #line 1139 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s failed at %d\n",(char *)"qlcnic_83xx_sysfs_flash_write_handler",1139);
      #line 1141 
      return -5L;
    }
    #line 1143 
    break;
    #line 1145 
    case (unsigned long)(-891507254): 
                                      #line 1145 
    ;
    #line 1146 
    flash_mode = 3;
    #line 1147 
    break;
    #line 1149 
    case (unsigned long)(-624055078): 
                                      #line 1149 
    ;
    #line 1150 
    flash_mode = 2;
    #line 1151 
    break;
    #line 1152 
    default: 
             #line 1152 
    ;
    #line 1153 
    if (flash_mode == 3) {
      #line 1154 
      ret = qlcnic_83xx_sysfs_flash_bulk_write(adapter,buf,offset,size);
      #line 1156 
      if (ret != 0) {
        #line 1157 
        _dev_err(& (adapter->pdev)->dev,(char *)"%s failed at %d\n",(char *)"qlcnic_83xx_sysfs_flash_write_handler",1157);
        #line 1160 
        return -5L;
      }
    }
    #line 1164 
    if (flash_mode == 2) {
      #line 1165 
      ret = qlcnic_83xx_sysfs_flash_write(adapter,buf,offset,size);
      #line 1167 
      if (ret != 0) {
        #line 1168 
        _dev_err(& (adapter->pdev)->dev,(char *)"%s failed at %d\n",(char *)"qlcnic_83xx_sysfs_flash_write_handler",1168);
        #line 1171 
        return -5L;
      }
    }
  }
  #line 1176 
  return (long)size;
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct device_attribute dev_attr_bridged_mode = {.attr = {.name = (char *)"bridged_mode", .mode = (unsigned short)420U}, .show = & qlcnic_show_bridged_mode, .store = & qlcnic_store_bridged_mode};
#line 1185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct device_attribute dev_attr_diag_mode = {.attr = {.name = (char *)"diag_mode", .mode = (unsigned short)420U}, .show = & qlcnic_show_diag_mode, .store = & qlcnic_store_diag_mode};
#line 1191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct device_attribute dev_attr_beacon = {.attr = {.name = (char *)"beacon", .mode = (unsigned short)420U}, .show = & qlcnic_show_beacon, .store = & qlcnic_store_beacon};
#line 1197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_crb = {.attr = {.name = (char *)"crb", .mode = (unsigned short)420U}, .read = & qlcnic_sysfs_read_crb, .write = & qlcnic_sysfs_write_crb};
#line 1204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_mem = {.attr = {.name = (char *)"mem", .mode = (unsigned short)420U}, .read = & qlcnic_sysfs_read_mem, .write = & qlcnic_sysfs_write_mem};
#line 1211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_npar_config = {.attr = {.name = (char *)"npar_config", .mode = (unsigned short)420U}, .read = & qlcnic_sysfs_read_npar_config, .write = & qlcnic_sysfs_write_npar_config};
#line 1218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_pci_config = {.attr = {.name = (char *)"pci_config", .mode = (unsigned short)420U}, .read = & qlcnic_sysfs_read_pci_config};
#line 1225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_port_stats = {.attr = {.name = (char *)"port_stats", .mode = (unsigned short)420U}, .read = & qlcnic_sysfs_get_port_stats, .write = & qlcnic_sysfs_clear_port_stats};
#line 1232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_esw_stats = {.attr = {.name = (char *)"esw_stats", .mode = (unsigned short)420U}, .read = & qlcnic_sysfs_get_esw_stats, .write = & qlcnic_sysfs_clear_esw_stats};
#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_esw_config = {.attr = {.name = (char *)"esw_config", .mode = (unsigned short)420U}, .read = & qlcnic_sysfs_read_esw_config, .write = & qlcnic_sysfs_write_esw_config};
#line 1246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_pm_config = {.attr = {.name = (char *)"pm_config", .mode = (unsigned short)420U}, .read = & qlcnic_sysfs_read_pm_config, .write = & qlcnic_sysfs_write_pm_config};
#line 1253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_flash = {.attr = {.name = (char *)"flash", .mode = (unsigned short)420U}, .read = & qlcnic_83xx_sysfs_flash_read_handler, .write = & qlcnic_83xx_sysfs_flash_write_handler};
#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_hwmon_show_temp(struct device *dev, struct device_attribute *dev_attr, char *buf)
{
  #line 1266 
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  #line 1267 
  unsigned int temperature = 0U;
  #line 1267 
  unsigned int value = 0U;
  #line 1269 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 1270 
                                            value = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 42U));
  else {
    #line 1271 
    if ((int)qlcnic_82xx_check(adapter) != 0) 
                                              #line 1272 
                                              value = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 18U));
  }
  #line 1274 
  temperature = value >> 16;
  #line 1276 
  temperature *= 1000U;
  #line 1277 
  return (long)sprintf(buf,(char *)"%u\n",temperature);
}

#line 1281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct sensor_device_attribute sensor_dev_attr_temp1_input = {.dev_attr = {.attr = {.name = (char *)"temp1_input", .mode = (unsigned short)292U}, .show = & qlcnic_hwmon_show_temp}, .index = 1};
#line 1284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct attribute *qlcnic_hwmon_attrs[2U] = {& sensor_dev_attr_temp1_input.dev_attr.attr};
#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct attribute_group qlcnic_hwmon_group = {.attrs = (struct attribute **)(& qlcnic_hwmon_attrs)};
#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct attribute_group *qlcnic_hwmon_groups[2U] = {& qlcnic_hwmon_group};
#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_register_hwmon_dev(struct qlcnic_adapter *adapter)
{
  #line 1294 
  struct device *hwmon_dev;
  #line 1293 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1297 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) {
    #line 1298 
    (adapter->ahw)->hwmon_dev = (struct device *)0;
    #line 1299 
    return;
  }
  #line 1301 
  hwmon_dev = hwmon_device_register_with_groups(dev,(char *)(& qlcnic_driver_name),(void *)adapter,(struct attribute_group **)(& qlcnic_hwmon_groups));
  #line 1304 
  if ((int)IS_ERR((void *)hwmon_dev) != 0) {
    #line 1305 
    ;
    #line 1305 
    _dev_err(dev,(char *)"Cannot register with hwmon, err=%ld\n",PTR_ERR((void *)hwmon_dev));
    #line 1307 
    hwmon_dev = (struct device *)0;
  }
  #line 1309 
  (adapter->ahw)->hwmon_dev = hwmon_dev;
  #line 1310 
  return;
}

#line 1312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_unregister_hwmon_dev(struct qlcnic_adapter *adapter)
{
  #line 1314 
  struct device *hwmon_dev = (adapter->ahw)->hwmon_dev;
  #line 1315 
  if (hwmon_dev != (struct device *)0) {
    #line 1316 
    hwmon_device_unregister(hwmon_dev);
    #line 1317 
    (adapter->ahw)->hwmon_dev = (struct device *)0;
  }
  #line 1319 
  return;
}

#line 1322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_create_sysfs_entries(struct qlcnic_adapter *adapter)
{
  #line 1324 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1326 
  if (((adapter->ahw)->capabilities & 256U) != 0U) {
    #line 1327 
    if (cif_device_create_file(dev,& dev_attr_bridged_mode) != 0) 
                                                                  #line 1328 
                                                                  _dev_warn(dev,(char *)"failed to create bridged_mode sysfs entry\n");
  }
  #line 1329 
  return;
}

#line 1332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_remove_sysfs_entries(struct qlcnic_adapter *adapter)
{
  #line 1334 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1336 
  if (((adapter->ahw)->capabilities & 256U) != 0U) 
                                                   #line 1337 
                                                   cif_device_remove_file(dev,& dev_attr_bridged_mode);
  #line 1338 
  return;
}

#line 1340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static void qlcnic_create_diag_entries(struct qlcnic_adapter *adapter)
{
  #line 1342 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1344 
  if (device_create_bin_file(dev,& bin_attr_port_stats) != 0) 
                                                              #line 1345 
                                                              _dev_info(dev,(char *)"failed to create port stats sysfs entry");
  #line 1347 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) 
                                                   #line 1348 
                                                   return;
  #line 1349 
  if (cif_device_create_file(dev,& dev_attr_diag_mode) != 0) 
                                                             #line 1350 
                                                             _dev_info(dev,(char *)"failed to create diag_mode sysfs entry\n");
  #line 1351 
  if (device_create_bin_file(dev,& bin_attr_crb) != 0) 
                                                       #line 1352 
                                                       _dev_info(dev,(char *)"failed to create crb sysfs entry\n");
  #line 1353 
  if (device_create_bin_file(dev,& bin_attr_mem) != 0) 
                                                       #line 1354 
                                                       _dev_info(dev,(char *)"failed to create mem sysfs entry\n");
  #line 1356 
  if ((int)test_bit(16L,& adapter->state) != 0) 
                                                #line 1357 
                                                return;
  #line 1359 
  if (device_create_bin_file(dev,& bin_attr_pci_config) != 0) 
                                                              #line 1360 
                                                              _dev_info(dev,(char *)"failed to create pci config sysfs entry");
  #line 1362 
  if (cif_device_create_file(dev,& dev_attr_beacon) != 0) 
                                                          #line 1363 
                                                          _dev_info(dev,(char *)"failed to create beacon sysfs entry");
  #line 1365 
  if ((adapter->flags & 64U) == 0U) 
                                    #line 1366 
                                    return;
  #line 1367 
  if (device_create_bin_file(dev,& bin_attr_esw_config) != 0) 
                                                              #line 1368 
                                                              _dev_info(dev,(char *)"failed to create esw config sysfs entry");
  #line 1369 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) 
                                                   #line 1370 
                                                   return;
  #line 1371 
  if (device_create_bin_file(dev,& bin_attr_npar_config) != 0) 
                                                               #line 1372 
                                                               _dev_info(dev,(char *)"failed to create npar config sysfs entry");
  #line 1373 
  if (device_create_bin_file(dev,& bin_attr_pm_config) != 0) 
                                                             #line 1374 
                                                             _dev_info(dev,(char *)"failed to create pm config sysfs entry");
  #line 1375 
  if (device_create_bin_file(dev,& bin_attr_esw_stats) != 0) 
                                                             #line 1376 
                                                             _dev_info(dev,(char *)"failed to create eswitch stats sysfs entry");
  #line 1377 
  return;
}

#line 1379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static void qlcnic_remove_diag_entries(struct qlcnic_adapter *adapter)
{
  #line 1381 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1383 
  device_remove_bin_file(dev,& bin_attr_port_stats);
  #line 1385 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) 
                                                   #line 1386 
                                                   return;
  #line 1387 
  cif_device_remove_file(dev,& dev_attr_diag_mode);
  #line 1388 
  device_remove_bin_file(dev,& bin_attr_crb);
  #line 1389 
  device_remove_bin_file(dev,& bin_attr_mem);
  #line 1391 
  if ((int)test_bit(16L,& adapter->state) != 0) 
                                                #line 1392 
                                                return;
  #line 1394 
  device_remove_bin_file(dev,& bin_attr_pci_config);
  #line 1395 
  cif_device_remove_file(dev,& dev_attr_beacon);
  #line 1396 
  if ((adapter->flags & 64U) == 0U) 
                                    #line 1397 
                                    return;
  #line 1398 
  device_remove_bin_file(dev,& bin_attr_esw_config);
  #line 1399 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) 
                                                   #line 1400 
                                                   return;
  #line 1401 
  device_remove_bin_file(dev,& bin_attr_npar_config);
  #line 1402 
  device_remove_bin_file(dev,& bin_attr_pm_config);
  #line 1403 
  device_remove_bin_file(dev,& bin_attr_esw_stats);
  #line 1404 
  return;
}

#line 1406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_82xx_add_sysfs(struct qlcnic_adapter *adapter)
{
  #line 1408 
  qlcnic_create_diag_entries(adapter);
  #line 1409 
  return;
}

#line 1411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_82xx_remove_sysfs(struct qlcnic_adapter *adapter)
{
  #line 1413 
  qlcnic_remove_diag_entries(adapter);
  #line 1414 
  return;
}

#line 1416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_83xx_add_sysfs(struct qlcnic_adapter *adapter)
{
  #line 1418 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1420 
  qlcnic_create_diag_entries(adapter);
  #line 1422 
  if (sysfs_create_bin_file(& dev->kobj,& bin_attr_flash) != 0) 
                                                                #line 1423 
                                                                _dev_info(dev,(char *)"failed to create flash sysfs entry\n");
  #line 1424 
  return;
}

#line 1426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_83xx_remove_sysfs(struct qlcnic_adapter *adapter)
{
  #line 1428 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1430 
  qlcnic_remove_diag_entries(adapter);
  #line 1431 
  sysfs_remove_bin_file(& dev->kobj,& bin_attr_flash);
  #line 1432 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
struct device_attribute *emg_alias_dev_attr_beacon = & dev_attr_beacon;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
struct device_attribute *emg_alias_dev_attr_bridged_mode = & dev_attr_bridged_mode;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
struct device_attribute *emg_alias_dev_attr_diag_mode = & dev_attr_diag_mode;
#line 100 
#line 100 
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1);
#line 101 
#line 101 
void emg_device_remove_file(struct device *arg0, struct device_attribute *arg1);
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
long emg_wrapper_qlcnic_hwmon_show_temp(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 114 
  return qlcnic_hwmon_show_temp(arg0,arg1,arg2);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
long emg_wrapper_qlcnic_show_beacon(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 119 
  return qlcnic_show_beacon(arg0,arg1,arg2);
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
long emg_wrapper_qlcnic_show_bridged_mode(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 124 
  return qlcnic_show_bridged_mode(arg0,arg1,arg2);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
long emg_wrapper_qlcnic_show_diag_mode(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 129 
  return qlcnic_show_diag_mode(arg0,arg1,arg2);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
long emg_wrapper_qlcnic_store_beacon(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 134 
  return qlcnic_store_beacon(arg0,arg1,arg2,arg3);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
long emg_wrapper_qlcnic_store_bridged_mode(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 139 
  return qlcnic_store_bridged_mode(arg0,arg1,arg2,arg3);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
long emg_wrapper_qlcnic_store_diag_mode(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 144 
  return qlcnic_store_diag_mode(arg0,arg1,arg2,arg3);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr)
{
  #line 166 
  ldv_set_bit(nr,addr);
  #line 167 
  return;
}

#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static void cif_clear_bit_3(long nr, unsigned long *addr)
{
  #line 173 
  ldv_clear_bit(nr,addr);
  #line 174 
  return;
}

#line 254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 257 
  return ldv_ptr_err(ptr);
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 264 
  return ldv_is_err(ptr);
}

#line 395  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags)
{
  #line 398 
  return ldv_kcalloc(n,size,flags);
}

#line 857  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry)
{
  #line 861 
  return emg_device_create_file(device,entry);
}

#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_sysfs.i.aux"
static void cif_device_remove_file(struct device *dev, struct device_attribute *attr)
{
  #line 869 
  emg_device_remove_file(dev,attr);
  #line 870 
  return;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 203 
void ___might_sleep(char *, int, int);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
#line 815 
static void cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_1(struct mutex *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23 
void ldv_vfree(void *addr);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
static void cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_1(struct mutex *lock);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
static void *cif_vzalloc_0(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
static void cif_vfree(void *addr);
#line 1778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 1778 
int _cond_resched(void);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 437  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
static void *kzalloc_3(size_t size, gfp_t flags);
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
#line 241 
int kobject_uevent_env(struct kobject *, enum kobject_action, char **);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_82xx_get_saved_state(void *t_hdr, u32 index);
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_set_saved_state(void *t_hdr, u32 index, u32 value);
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump);
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_82xx_get_cap_size(void *t_hdr, int index);
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_set_sys_info(void *t_hdr, int idx, u32 value);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_store_cap_mask(void *tmpl_hdr, u32 mask);
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 1415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_get_minidump_template(struct qlcnic_adapter *adapter);
#line 1542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
int qlcnic_fw_cmd_get_minidump_temp(struct qlcnic_adapter *adapter);
#line 1583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
int qlcnic_dump_fw(struct qlcnic_adapter *adapter);
#line 1584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1584 
int qlcnic_enable_fw_dump_state(struct qlcnic_adapter *adapter);
#line 1585 
#line 1585 
bool qlcnic_check_fw_dump_state(struct qlcnic_adapter *adapter);
#line 2101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static u32 qlcnic_get_saved_state(struct qlcnic_adapter *adapter, void *t_hdr, u32 index)
{
  #line 2104 
  return (*(((adapter->ahw)->hw_ops)->get_saved_state))(t_hdr,index);
}

#line 2107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_set_saved_state(struct qlcnic_adapter *adapter, void *t_hdr, u32 index, u32 value)
{
  #line 2110 
  (*(((adapter->ahw)->hw_ops)->set_saved_state))(t_hdr,index,value);
  #line 2111 
  return;
}

#line 2113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_cache_tmpl_hdr_values(struct qlcnic_adapter *adapter, struct qlcnic_fw_dump *fw_dump)
{
  #line 2116 
  (*(((adapter->ahw)->hw_ops)->cache_tmpl_hdr_values))(fw_dump);
  #line 2117 
  return;
}

#line 2119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static u32 qlcnic_get_cap_size(struct qlcnic_adapter *adapter, void *tmpl_hdr, int index)
{
  #line 2122 
  return (*(((adapter->ahw)->hw_ops)->get_cap_size))(tmpl_hdr,index);
}

#line 2125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_set_sys_info(struct qlcnic_adapter *adapter, void *tmpl_hdr, int idx, u32 value)
{
  #line 2128 
  (*(((adapter->ahw)->hw_ops)->set_sys_info))(tmpl_hdr,idx,value);
  #line 2129 
  return;
}

#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_ms_read_data[4U] = {1090519208U, 1090519212U, 1090519224U, 1090519228U};
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_82xx_get_saved_state(void *t_hdr, u32 index)
{
  #line 273 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)t_hdr;
  #line 275 
  return hdr->saved_state[index];
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_set_saved_state(void *t_hdr, u32 index, u32 value)
{
  #line 281 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)t_hdr;
  #line 283 
  hdr->saved_state[index] = value;
  #line 284 
  return;
}

#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump)
{
  #line 288 
  struct qlcnic_82xx_dump_template_hdr *hdr;
  #line 290 
  hdr = (struct qlcnic_82xx_dump_template_hdr *)fw_dump->tmpl_hdr;
  #line 291 
  fw_dump->tmpl_hdr_size = hdr->size;
  #line 292 
  fw_dump->version = hdr->version;
  #line 293 
  fw_dump->num_entries = hdr->num_entries;
  #line 294 
  fw_dump->offset = hdr->offset;
  #line 296 
  hdr->drv_cap_mask = hdr->cap_mask;
  #line 297 
  fw_dump->cap_mask = hdr->cap_mask;
  #line 299 
  fw_dump->use_pex_dma = (_Bool)(((int)hdr->capabilities & 1) != 0);
  #line 300 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_82xx_get_cap_size(void *t_hdr, int index)
{
  #line 304 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)t_hdr;
  #line 306 
  return hdr->cap_sizes[index];
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_set_sys_info(void *t_hdr, int idx, u32 value)
{
  #line 311 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)t_hdr;
  #line 313 
  hdr->sys_info[idx] = value;
  #line 314 
  return;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_store_cap_mask(void *tmpl_hdr, u32 mask)
{
  #line 318 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)tmpl_hdr;
  #line 320 
  hdr->drv_cap_mask = mask;
  #line 321 
  return;
}

#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_83xx_get_saved_state(void *t_hdr, u32 index)
{
  #line 325 
  struct qlcnic_83xx_dump_template_hdr *hdr = (struct qlcnic_83xx_dump_template_hdr *)t_hdr;
  #line 327 
  return hdr->saved_state[index];
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_set_saved_state(void *t_hdr, u32 index, u32 value)
{
  #line 333 
  struct qlcnic_83xx_dump_template_hdr *hdr = (struct qlcnic_83xx_dump_template_hdr *)t_hdr;
  #line 335 
  hdr->saved_state[index] = value;
  #line 336 
  return;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump)
{
  #line 342 
  struct qlcnic_83xx_dump_template_hdr *hdr;
  #line 344 
  hdr = (struct qlcnic_83xx_dump_template_hdr *)fw_dump->tmpl_hdr;
  #line 345 
  fw_dump->tmpl_hdr_size = hdr->size;
  #line 346 
  fw_dump->version = hdr->version;
  #line 347 
  fw_dump->num_entries = hdr->num_entries;
  #line 348 
  fw_dump->offset = hdr->offset;
  #line 350 
  hdr->drv_cap_mask = hdr->cap_mask;
  #line 351 
  fw_dump->cap_mask = hdr->cap_mask;
  #line 353 
  fw_dump->use_pex_dma = (_Bool)((fw_dump->version & 1048575U) > 131072U);
  #line 354 
  return;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_83xx_get_cap_size(void *t_hdr, int index)
{
  #line 359 
  struct qlcnic_83xx_dump_template_hdr *hdr = (struct qlcnic_83xx_dump_template_hdr *)t_hdr;
  #line 361 
  return hdr->cap_sizes[index];
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_set_sys_info(void *t_hdr, int idx, u32 value)
{
  #line 366 
  struct qlcnic_83xx_dump_template_hdr *hdr = (struct qlcnic_83xx_dump_template_hdr *)t_hdr;
  #line 368 
  hdr->sys_info[idx] = value;
  #line 369 
  return;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_store_cap_mask(void *tmpl_hdr, u32 mask)
{
  #line 373 
  struct qlcnic_83xx_dump_template_hdr *hdr;
  #line 375 
  hdr = (struct qlcnic_83xx_dump_template_hdr *)tmpl_hdr;
  #line 376 
  hdr->drv_cap_mask = mask;
  #line 377 
  return;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_crb(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 388 
  int i;
  #line 389 
  u32 addr;
  #line 389 
  u32 data;
  #line 390 
  struct __crb *crb = & entry->region.crb;
  #line 392 
  addr = crb->addr;
  #line 394 
  i = 0;
  #line 394 
  while (crb->no_ops > (unsigned int)i) {
    {
      #line 396 
      __le32 *tmp_0;
      #line 397 
      __le32 *tmp_1;
      #line 395 
      data = (unsigned int)qlcnic_ind_rd(adapter,addr);
      #line 396 
      tmp_0 = buffer;
      #line 396 
      buffer ++;
      #line 396 
      *tmp_0 = addr;
      #line 397 
      tmp_1 = buffer;
      #line 397 
      buffer ++;
      #line 397 
      *tmp_1 = data;
      #line 398 
      addr = (unsigned int)crb->stride + addr;
    }
    #line 394 
    i ++;
  }
  #line 400 
  return crb->no_ops * 8U;
}

#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_ctrl(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 408 
  int i;
  #line 408 
  int k;
  #line 409 
  u32 addr;
  #line 409 
  u32 data;
  #line 409 
  u32 temp;
  #line 410 
  u8 no_ops;
  #line 406 
  void *hdr = (adapter->ahw)->fw_dump.tmpl_hdr;
  #line 407 
  struct __ctrl *ctr = & entry->region.ctrl;
  #line 408 
  int timeout = 0;
  #line 412 
  addr = ctr->addr;
  #line 413 
  no_ops = (unsigned char)ctr->no_ops;
  #line 415 
  i = 0;
  #line 415 
  while ((int)no_ops > i) {
    #line 416 
    k = 0;
    #line 417 
    k = 0;
    #line 417 
    while (k <= 7) {
      #line 418 
      if ((((int)ctr->opcode >> k) & 1) == 0) 
                                              #line 419 
                                              goto __Cont;
      #line 420 
      switch (1 << k) {
        #line 421 
        case 1: 
                #line 421 
        ;
        #line 422 
        qlcnic_ind_wr(adapter,addr,ctr->val1);
        #line 423 
        break;
        #line 424 
        case 2: 
                #line 424 
        ;
        #line 425 
        data = (unsigned int)qlcnic_ind_rd(adapter,addr);
        #line 426 
        qlcnic_ind_wr(adapter,addr,data);
        #line 427 
        break;
        #line 428 
        case 4: 
                #line 428 
        ;
        #line 429 
        data = (unsigned int)qlcnic_ind_rd(adapter,addr);
        #line 430 
        qlcnic_ind_wr(adapter,addr,ctr->val2 & data);
        #line 432 
        break;
        #line 433 
        case 8: 
                #line 433 
        ;
        #line 434 
        data = (unsigned int)qlcnic_ind_rd(adapter,addr);
        #line 435 
        qlcnic_ind_wr(adapter,addr,ctr->val3 | data);
        #line 437 
        break;
        #line 438 
        case 16: 
                 #line 438 
        ;
        #line 439 
        while ((int)ctr->timeout >= timeout) {
          #line 440 
          data = (unsigned int)qlcnic_ind_rd(adapter,addr);
          #line 441 
          if ((ctr->val2 & data) == ctr->val1) 
                                               #line 442 
                                               break;
          #line 443 
          usleep_range(1000UL,2000UL);
          #line 444 
          timeout ++;
        }
        #line 446 
        if ((int)ctr->timeout < timeout) {
          #line 447 
          _dev_info(& (adapter->pdev)->dev,(char *)"Timed out, aborting poll CRB\n");
          #line 449 
          return 4294967274U;
        }
        #line 451 
        break;
        #line 452 
        case 32: 
                 #line 452 
        ;
        #line 453 
        temp = (unsigned int)ctr->index_a;
        #line 454 
        if (temp != 0U) 
                        #line 455 
                        addr = qlcnic_get_saved_state(adapter,hdr,temp);
        #line 458 
        data = (unsigned int)qlcnic_ind_rd(adapter,addr);
        #line 459 
        qlcnic_set_saved_state(adapter,hdr,(unsigned int)ctr->index_v,data);
        #line 461 
        break;
        #line 462 
        case 64: 
                 #line 462 
        ;
        #line 463 
        temp = (unsigned int)ctr->index_v;
        #line 464 
        if (temp != 0U) 
                        #line 465 
                        data = qlcnic_get_saved_state(adapter,hdr,temp); else 
                                                                    #line 469 
                                                                    data = ctr->val1;
        #line 471 
        temp = (unsigned int)ctr->index_a;
        #line 472 
        if (temp != 0U) 
                        #line 473 
                        addr = qlcnic_get_saved_state(adapter,hdr,temp);
        #line 476 
        qlcnic_ind_wr(adapter,addr,data);
        #line 477 
        break;
        #line 478 
        case 128: 
                  #line 478 
        ;
        #line 479 
        data = qlcnic_get_saved_state(adapter,hdr,(unsigned int)ctr->index_v);
        #line 481 
        data <<= (int)ctr->shl_val;
        #line 482 
        data >>= (int)ctr->shr_val;
        #line 483 
        if (ctr->val2 != 0U) 
                             #line 484 
                             data = ctr->val2 & data;
        #line 485 
        data = ctr->val3 | data;
        #line 486 
        data = ctr->val1 + data;
        #line 487 
        qlcnic_set_saved_state(adapter,hdr,(unsigned int)ctr->index_v,data);
        #line 489 
        break;
        #line 490 
        default: 
                 #line 490 
        ;
        #line 491 
        _dev_info(& (adapter->pdev)->dev,(char *)"Unknown opcode\n");
        #line 493 
        break;
      }
      #line 417 
      __Cont: 
              #line 417 
      k ++;
    }
    #line 496 
    addr = (unsigned int)ctr->stride + addr;
    #line 415 
    i ++;
  }
  #line 498 
  return 0U;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_mux(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 504 
  int loop;
  #line 505 
  u32 val;
  #line 505 
  u32 data = 0U;
  #line 506 
  struct __mux *mux = & entry->region.mux;
  #line 508 
  val = mux->val;
  #line 509 
  loop = 0;
  #line 509 
  while (mux->no_ops > (unsigned int)loop) {
    {
      #line 512 
      __le32 *tmp_0;
      #line 513 
      __le32 *tmp_1;
      #line 510 
      qlcnic_ind_wr(adapter,mux->addr,val);
      #line 511 
      data = (unsigned int)qlcnic_ind_rd(adapter,mux->read_addr);
      #line 512 
      tmp_0 = buffer;
      #line 512 
      buffer ++;
      #line 512 
      *tmp_0 = val;
      #line 513 
      tmp_1 = buffer;
      #line 513 
      buffer ++;
      #line 513 
      *tmp_1 = data;
      #line 514 
      val = mux->val_stride + val;
    }
    #line 509 
    loop ++;
  }
  #line 516 
  return mux->no_ops * 8U;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_que(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 522 
  int i;
  #line 522 
  int loop;
  #line 523 
  u32 cnt;
  #line 523 
  u32 addr;
  #line 523 
  u32 data;
  #line 523 
  u32 que_id = 0U;
  #line 524 
  struct __queue *que = & entry->region.que;
  #line 526 
  addr = que->read_addr;
  #line 527 
  cnt = (unsigned int)que->read_addr_cnt;
  #line 529 
  loop = 0;
  #line 529 
  while (que->no_ops > (unsigned int)loop) {
    #line 530 
    qlcnic_ind_wr(adapter,que->sel_addr,que_id);
    #line 531 
    addr = que->read_addr;
    #line 532 
    i = 0;
    #line 532 
    while ((unsigned int)i < cnt) {
      {
        #line 534 
        __le32 *tmp_0;
        #line 533 
        data = (unsigned int)qlcnic_ind_rd(adapter,addr);
        #line 534 
        tmp_0 = buffer;
        #line 534 
        buffer ++;
        #line 534 
        *tmp_0 = data;
        #line 535 
        addr = (unsigned int)que->read_addr_stride + addr;
      }
      #line 532 
      i ++;
    }
    #line 537 
    que_id = (unsigned int)que->stride + que_id;
    #line 529 
    loop ++;
  }
  #line 539 
  return (que->no_ops * cnt) * 4U;
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_ocm(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 545 
  int i;
  #line 546 
  u32 data;
  #line 547 
  void *addr;
  #line 548 
  struct __ocm *ocm = & entry->region.ocm;
  #line 550 
  addr = (adapter->ahw)->pci_base0 + (unsigned long)ocm->read_addr;
  #line 551 
  i = 0;
  #line 551 
  while (ocm->no_ops > (unsigned int)i) {
    {
      #line 553 
      __le32 *tmp;
      #line 552 
      data = readl(addr);
      #line 553 
      tmp = buffer;
      #line 553 
      buffer ++;
      #line 553 
      *tmp = data;
      #line 554 
      addr += (unsigned long)ocm->read_addr_stride;
    }
    #line 551 
    i ++;
  }
  #line 556 
  return ocm->no_ops * 4U;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_rom(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 562 
  int i;
  #line 563 
  u32 fl_addr;
  #line 563 
  u32 size;
  #line 563 
  u32 val;
  #line 563 
  u32 lck_val;
  #line 563 
  u32 addr;
  #line 562 
  int count = 0;
  #line 564 
  struct __mem *rom = & entry->region.mem;
  #line 566 
  fl_addr = rom->addr;
  #line 567 
  size = rom->size / 4U;
  #line 568 
  lock_try: 
            #line 568 
  ;
  #line 569 
  lck_val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 21U));
  #line 570 
  if (lck_val == 0U && count <= 999) {
    #line 571 
    usleep_range(10000UL,11000UL);
    #line 572 
    count ++;
    #line 573 
    goto lock_try;
  }
  #line 575 
  writel((unsigned int)(adapter->ahw)->pci_func,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 3U));
  #line 577 
  i = 0;
  #line 577 
  while ((unsigned int)i < size) {
    {
      #line 583 
      __le32 *tmp_0;
      #line 578 
      addr = fl_addr & 4294901760U;
      #line 579 
      qlcnic_ind_wr(adapter,1108410416U,addr);
      #line 580 
      addr = (unsigned int)((int)((unsigned short)fl_addr) + 1108672512);
      #line 581 
      val = (unsigned int)qlcnic_ind_rd(adapter,addr);
      #line 582 
      fl_addr += 4U;
      #line 583 
      tmp_0 = buffer;
      #line 583 
      buffer ++;
      #line 583 
      *tmp_0 = val;
    }
    #line 577 
    i ++;
  }
  #line 585 
  readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 22U));
  #line 586 
  return rom->size;
}

#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_l1_cache(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 592 
  int i;
  #line 593 
  u32 cnt;
  #line 593 
  u32 val;
  #line 593 
  u32 data;
  #line 593 
  u32 addr;
  #line 594 
  struct __cache *l1 = & entry->region.cache;
  #line 596 
  val = (unsigned int)l1->init_tag_val;
  #line 598 
  i = 0;
  #line 598 
  while (l1->no_ops > (unsigned int)i) {
    #line 599 
    qlcnic_ind_wr(adapter,l1->addr,val);
    #line 600 
    qlcnic_ind_wr(adapter,l1->ctrl_addr,(unsigned int)((unsigned short)l1->ctrl_val));
    #line 601 
    addr = l1->read_addr;
    #line 602 
    cnt = (unsigned int)l1->read_addr_num;
    #line 603 
    while (cnt != 0U) {
      #line 605 
      __le32 *tmp_0;
      #line 604 
      data = (unsigned int)qlcnic_ind_rd(adapter,addr);
      #line 605 
      tmp_0 = buffer;
      #line 605 
      buffer ++;
      #line 605 
      *tmp_0 = data;
      #line 606 
      addr = (unsigned int)l1->read_addr_stride + addr;
      #line 607 
      cnt --;
    }
    #line 609 
    val = (unsigned int)l1->stride + val;
    #line 598 
    i ++;
  }
  #line 611 
  return (l1->no_ops * (unsigned int)l1->read_addr_num) * 4U;
}

#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_l2_cache(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 617 
  int i;
  #line 618 
  u32 cnt;
  #line 618 
  u32 val;
  #line 618 
  u32 data;
  #line 618 
  u32 addr;
  #line 619 
  u8 poll_mask;
  #line 619 
  u8 poll_to;
  #line 619 
  u8 time_out = (unsigned char)0U;
  #line 620 
  struct __cache *l2 = & entry->region.cache;
  #line 622 
  val = (unsigned int)l2->init_tag_val;
  #line 623 
  poll_mask = (unsigned char)(l2->ctrl_val >> 16);
  #line 624 
  poll_to = (unsigned char)((int)((unsigned short)(l2->ctrl_val >> 16)) >> 8);
  #line 626 
  i = 0;
  #line 626 
  while (l2->no_ops > (unsigned int)i) {
    #line 627 
    qlcnic_ind_wr(adapter,l2->addr,val);
    #line 628 
    if ((unsigned int)((unsigned short)l2->ctrl_val) != 0U) 
                                                            #line 629 
                                                            qlcnic_ind_wr(adapter,l2->ctrl_addr,(unsigned int)((unsigned short)l2->ctrl_val));
    #line 631 
    if ((unsigned int)poll_mask == 0U) 
                                       #line 632 
                                       goto skip_poll;
    #line 633 
    while (1) {
      {
        #line 634 
        data = (unsigned int)qlcnic_ind_rd(adapter,l2->ctrl_addr);
        #line 635 
        if (((unsigned int)poll_mask & data) == 0U) 
                                                    #line 636 
                                                    break;
        #line 637 
        usleep_range(1000UL,2000UL);
        #line 638 
        time_out = (u8)((int)time_out + 1);
      }
      #line 639 
      if (! ((int)time_out <= (int)poll_to)) 
                                             #line 633 
                                             break;
    }
    #line 641 
    if ((int)time_out > (int)poll_to) {
      #line 642 
      _dev_err(& (adapter->pdev)->dev,(char *)"Timeout exceeded in %s, aborting dump\n",(char *)"qlcnic_dump_l2_cache");
      #line 645 
      return 4294967274U;
    }
    #line 647 
    skip_poll: 
               #line 647 
    ;
    #line 648 
    addr = l2->read_addr;
    #line 649 
    cnt = (unsigned int)l2->read_addr_num;
    #line 650 
    while (cnt != 0U) {
      #line 652 
      __le32 *tmp_1;
      #line 651 
      data = (unsigned int)qlcnic_ind_rd(adapter,addr);
      #line 652 
      tmp_1 = buffer;
      #line 652 
      buffer ++;
      #line 652 
      *tmp_1 = data;
      #line 653 
      addr = (unsigned int)l2->read_addr_stride + addr;
      #line 654 
      cnt --;
    }
    #line 656 
    val = (unsigned int)l2->stride + val;
    #line 626 
    i ++;
  }
  #line 658 
  return (l2->no_ops * (unsigned int)l2->read_addr_num) * 4U;
}

#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_memory_test_agent(struct qlcnic_adapter *adapter, struct __mem *mem, __le32 *buffer, int *ret)
{
  #line 665 
  u32 addr;
  #line 665 
  u32 data;
  #line 665 
  u32 test;
  #line 666 
  int i;
  #line 666 
  int reg_read;
  #line 668 
  reg_read = (int)mem->size;
  #line 669 
  addr = mem->addr;
  #line 671 
  if ((addr & 15U) != 0U || ((unsigned int)reg_read & 15U) != 0U) {
    #line 672 
    _dev_info(& (adapter->pdev)->dev,(char *)"Unaligned memory addr:0x%x size:0x%x\n",addr,reg_read);
    #line 675 
    *ret = -22;
    #line 676 
    return 0U;
  }
  #line 679 
  cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_1(& (adapter->ahw)->mem_lock);
  #line 681 
  while (reg_read != 0) {
    #line 682 
    qlcnic_ind_wr(adapter,1090519188U,addr);
    #line 683 
    qlcnic_ind_wr(adapter,1090519192U,0U);
    #line 684 
    qlcnic_ind_wr(adapter,1090519184U,3U);
    #line 686 
    i = 0;
    #line 686 
    while (i <= 999) {
      {
        #line 687 
        test = (unsigned int)qlcnic_ind_rd(adapter,1090519184U);
        #line 688 
        if ((test & 8U) == 0U) 
                               #line 689 
                               break;
      }
      #line 686 
      i ++;
    }
    #line 691 
    if (i == 1000) {
      #line 692 
      if (__printk_ratelimit((char *)"qlcnic_read_memory_test_agent") != 0) {
        #line 693 
        _dev_err(& (adapter->pdev)->dev,(char *)"failed to read through agent\n");
        #line 695 
        *ret = -5;
        #line 696 
        goto out;
      }
    }
    #line 699 
    i = 0;
    #line 699 
    while (i <= 3) {
      {
        #line 701 
        __le32 *tmp_2;
        #line 700 
        data = (unsigned int)qlcnic_ind_rd(adapter,qlcnic_ms_read_data[i]);
        #line 701 
        tmp_2 = buffer;
        #line 701 
        buffer ++;
        #line 701 
        *tmp_2 = data;
      }
      #line 699 
      i ++;
    }
    #line 703 
    addr += 16U;
    #line 704 
    reg_read += -16;
    #line 705 
    ret += 16U;
    #line 706 
    ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c",706,0);
    #line 706 
    _cond_resched();
  }
  #line 708 
  out: 
       #line 708 
  ;
  #line 709 
  cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_1(& (adapter->ahw)->mem_lock);
  #line 710 
  return mem->size;
}

#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_start_pex_dma(struct qlcnic_adapter *adapter, struct __mem *mem)
{
  #line 725 
  u32 dma_no;
  #line 725 
  u32 dma_base_addr;
  #line 725 
  u32 temp_addr;
  #line 726 
  int i;
  #line 726 
  int ret;
  #line 726 
  int dma_sts;
  #line 727 
  void *tmpl_hdr;
  #line 724 
  struct device *dev = & (adapter->pdev)->dev;
  #line 729 
  tmpl_hdr = (adapter->ahw)->fw_dump.tmpl_hdr;
  #line 730 
  dma_no = qlcnic_get_saved_state(adapter,tmpl_hdr,8U);
  #line 732 
  dma_base_addr = (dma_no + 30514U) * 65536U;
  #line 734 
  temp_addr = dma_base_addr;
  #line 735 
  ret = qlcnic_ind_wr(adapter,temp_addr,mem->desc_card_addr);
  #line 736 
  if (ret != 0) 
                #line 737 
                return ret;
  #line 739 
  temp_addr = dma_base_addr + 4U;
  #line 740 
  ret = qlcnic_ind_wr(adapter,temp_addr,0U);
  #line 741 
  if (ret != 0) 
                #line 742 
                return ret;
  #line 744 
  temp_addr = dma_base_addr + 8U;
  #line 745 
  ret = qlcnic_ind_wr(adapter,temp_addr,mem->start_dma_cmd);
  #line 746 
  if (ret != 0) 
                #line 747 
                return ret;
  #line 750 
  temp_addr = dma_base_addr + 8U;
  #line 751 
  i = 0;
  #line 751 
  while (i <= 399) {
    #line 752 
    dma_sts = qlcnic_ind_rd(adapter,temp_addr);
    #line 754 
    if ((dma_sts & 2) != 0) 
                            #line 755 
                            usleep_range(250UL,500UL); else 
                                                            #line 757 
                                                            break;
    #line 751 
    i ++;
  }
  #line 760 
  if (i > 399) {
    #line 761 
    _dev_info(dev,(char *)"PEX DMA operation timed out");
    #line 762 
    ret = -5;
  }
  #line 765 
  return ret;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_memory_pexdma(struct qlcnic_adapter *adapter, struct __mem *mem, __le32 *buffer, int *ret)
{
  #line 773 
  u32 temp;
  #line 773 
  u32 dma_base_addr;
  #line 774 
  struct qlcnic_pex_dma_descriptor *dma_descr;
  #line 776 
  dma_addr_t dma_phys_addr;
  #line 777 
  void *dma_buffer;
  #line 778 
  void *tmpl_hdr;
  #line 772 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 773 
  u32 size = 0U;
  #line 773 
  u32 read_size = 0U;
  #line 775 
  struct device *dev = & (adapter->pdev)->dev;
  #line 780 
  tmpl_hdr = fw_dump->tmpl_hdr;
  #line 783 
  temp = qlcnic_get_saved_state(adapter,tmpl_hdr,8U);
  #line 785 
  dma_base_addr = (temp + 30514U) * 65536U;
  #line 786 
  temp = (unsigned int)qlcnic_ind_rd(adapter,dma_base_addr + 8U);
  #line 789 
  if ((temp & 2147483648U) == 0U) {
    #line 790 
    _dev_info(dev,(char *)"%s: DMA engine is not available\n",(char *)"qlcnic_read_memory_pexdma");
    #line 791 
    *ret = -5;
    #line 792 
    return 0U;
  }
  #line 796 
  dma_descr = (struct qlcnic_pex_dma_descriptor *)kzalloc_3(48UL,3264U);
  #line 798 
  if (dma_descr == (struct qlcnic_pex_dma_descriptor *)0) {
    #line 799 
    *ret = -12;
    #line 800 
    return 0U;
  }
  #line 808 
  dma_phys_addr = fw_dump->phys_addr;
  #line 809 
  dma_buffer = fw_dump->dma_buffer;
  #line 810 
  temp = 0U;
  #line 811 
  temp = mem->dma_desc_cmd & 65295U;
  #line 812 
  temp = ((unsigned int)((int)(adapter->ahw)->pci_func << 4) & 255U) | temp;
  #line 813 
  dma_descr->dma_desc_cmd = temp << 16;
  #line 814 
  dma_descr->dma_bus_addr_low = (unsigned int)dma_phys_addr;
  #line 815 
  dma_descr->dma_bus_addr_high = (unsigned int)(dma_phys_addr >> 32);
  #line 816 
  dma_descr->src_addr_high = 0U;
  #line 819 
  while (mem->size > read_size) {
    #line 820 
    if (mem->size - read_size > 65535U) 
                                        #line 821 
                                        size = 65536U; else 
                                                            #line 823 
                                                            size = mem->size - read_size;
    #line 825 
    dma_descr->src_addr_low = mem->addr + read_size;
    #line 826 
    dma_descr->read_data_size = size;
    #line 829 
    temp = 3U;
    #line 830 
    *ret = qlcnic_ms_mem_write128(adapter,(unsigned long long)mem->desc_card_addr,(u32 *)dma_descr,temp);
    #line 832 
    if (*ret != 0) {
      #line 833 
      _dev_info(dev,(char *)"Failed to write DMA descriptor to MS memory at address 0x%x\n",mem->desc_card_addr);
      #line 835 
      goto free_dma_descr;
    }
    #line 838 
    *ret = qlcnic_start_pex_dma(adapter,mem);
    #line 839 
    if (*ret != 0) {
      #line 840 
      _dev_info(dev,(char *)"Failed to start PEX DMA operation\n");
      #line 841 
      goto free_dma_descr;
    }
    #line 844 
    memcpy((void *)buffer,dma_buffer,(unsigned long)size);
    #line 845 
    buffer += (unsigned long)(size / 4U);
    #line 846 
    read_size += size;
  }
  #line 849 
  free_dma_descr: 
                  #line 849 
  ;
  #line 850 
  kfree((void *)dma_descr);
  #line 852 
  return read_size;
}

#line 855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_memory(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 861 
  u32 data_size;
  #line 858 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 859 
  struct device *dev = & (adapter->pdev)->dev;
  #line 860 
  struct __mem *mem = & entry->region.mem;
  #line 862 
  int ret = 0;
  #line 864 
  if ((int)fw_dump->use_pex_dma != 0) {
    #line 865 
    data_size = qlcnic_read_memory_pexdma(adapter,mem,buffer,& ret);
    #line 867 
    if (ret != 0) 
                  #line 868 
                  _dev_info(dev,(char *)"Failed to read memory dump using PEX DMA: mask[0x%x]\n",(int)entry->hdr.mask); else 
                                                                    #line 872 
                                                                    return data_size;
  }
  #line 875 
  data_size = qlcnic_read_memory_test_agent(adapter,mem,buffer,& ret);
  #line 876 
  if (ret != 0) {
    #line 877 
    _dev_info(dev,(char *)"Failed to read memory dump using test agent method: mask[0x%x]\n",(int)entry->hdr.mask);
    #line 880 
    return 0U;
  }
  else 
       #line 882 
       return data_size;
}

#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_nop(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 889 
  entry->hdr.flags = (unsigned char)((unsigned int)entry->hdr.flags | 128U);
  #line 890 
  return 0U;
}

#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_valid_dump_entry(struct device *dev, struct qlcnic_dump_entry *entry, u32 size)
{
  #line 896 
  int ret = 1;
  #line 897 
  if (entry->hdr.cap_size != size) {
    #line 898 
    _dev_err(dev,(char *)"Invalid entry, Type:%d\tMask:%d\tSize:%dCap_size:%d\n",entry->hdr.type,(int)entry->hdr.mask,size,entry->hdr.cap_size);
    #line 902 
    ret = 0;
  }
  #line 904 
  return ret;
}

#line 907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_pollrdmwr(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 912 
  u32 data;
  #line 912 
  u32 wait_count;
  #line 912 
  u32 poll_wait;
  #line 912 
  u32 temp;
  #line 945 
  __le32 *tmp_2;
  #line 946 
  __le32 *tmp_3;
  #line 911 
  struct __pollrdmwr *poll = & entry->region.pollrdmwr;
  #line 914 
  poll_wait = poll->poll_wait;
  #line 916 
  qlcnic_ind_wr(adapter,poll->addr1,poll->val1);
  #line 917 
  wait_count = 0U;
  #line 919 
  while (wait_count < poll_wait) {
    #line 920 
    data = (unsigned int)qlcnic_ind_rd(adapter,poll->addr1);
    #line 921 
    if ((poll->poll_mask & data) != 0U) 
                                        #line 922 
                                        break;
    #line 923 
    wait_count ++;
  }
  #line 926 
  if (wait_count == poll_wait) {
    #line 927 
    _dev_err(& (adapter->pdev)->dev,(char *)"Timeout exceeded in %s, aborting dump\n",(char *)"qlcnic_read_pollrdmwr");
    #line 930 
    return 0U;
  }
  #line 933 
  data = (unsigned int)qlcnic_ind_rd(adapter,poll->addr2) & poll->mod_mask;
  #line 934 
  qlcnic_ind_wr(adapter,poll->addr2,data);
  #line 935 
  qlcnic_ind_wr(adapter,poll->addr1,poll->val2);
  #line 936 
  wait_count = 0U;
  #line 938 
  while (wait_count < poll_wait) {
    #line 939 
    temp = (unsigned int)qlcnic_ind_rd(adapter,poll->addr1);
    #line 940 
    if ((poll->poll_mask & temp) != 0U) 
                                        #line 941 
                                        break;
    #line 942 
    wait_count ++;
  }
  #line 945 
  tmp_2 = buffer;
  #line 945 
  buffer ++;
  #line 945 
  *tmp_2 = poll->addr2;
  #line 946 
  tmp_3 = buffer;
  #line 946 
  buffer ++;
  #line 946 
  *tmp_3 = data;
  #line 948 
  return 8U;
}

#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_pollrd(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 956 
  u32 data;
  #line 956 
  u32 wait_count;
  #line 956 
  u32 poll_wait;
  #line 956 
  u32 sel_val;
  #line 957 
  int i;
  #line 955 
  struct __pollrd *pollrd = & entry->region.pollrd;
  #line 959 
  poll_wait = pollrd->poll_wait;
  #line 960 
  sel_val = pollrd->sel_val;
  #line 962 
  i = 0;
  #line 962 
  while ((int)pollrd->no_ops > i) {
    {
      #line 980 
      __le32 *tmp_1;
      #line 981 
      __le32 *tmp_2;
      #line 963 
      qlcnic_ind_wr(adapter,pollrd->sel_addr,sel_val);
      #line 964 
      wait_count = 0U;
      #line 965 
      while (wait_count < poll_wait) {
        #line 966 
        data = (unsigned int)qlcnic_ind_rd(adapter,pollrd->sel_addr);
        #line 967 
        if ((pollrd->poll_mask & data) != 0U) 
                                              #line 968 
                                              break;
        #line 969 
        wait_count ++;
      }
      #line 972 
      if (wait_count == poll_wait) {
        #line 973 
        _dev_err(& (adapter->pdev)->dev,(char *)"Timeout exceeded in %s, aborting dump\n",(char *)"qlcnic_read_pollrd");
        #line 976 
        return 0U;
      }
      #line 979 
      data = (unsigned int)qlcnic_ind_rd(adapter,pollrd->read_addr);
      #line 980 
      tmp_1 = buffer;
      #line 980 
      buffer ++;
      #line 980 
      *tmp_1 = sel_val;
      #line 981 
      tmp_2 = buffer;
      #line 981 
      buffer ++;
      #line 981 
      *tmp_2 = data;
      #line 982 
      sel_val = (unsigned int)pollrd->sel_val_stride + sel_val;
    }
    #line 962 
    i ++;
  }
  #line 984 
  return (unsigned int)pollrd->no_ops * 8U;
}

#line 987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_mux2(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 991 
  u32 data;
  #line 992 
  u32 t_sel_val;
  #line 992 
  u32 sel_val1;
  #line 992 
  u32 sel_val2;
  #line 993 
  int i;
  #line 990 
  struct __mux2 *mux2 = & entry->region.mux2;
  #line 995 
  sel_val1 = mux2->sel_val1;
  #line 996 
  sel_val2 = mux2->sel_val2;
  #line 998 
  i = 0;
  #line 998 
  while (mux2->no_ops > (unsigned int)i) {
    {
      #line 1003 
      __le32 *tmp_0;
      #line 1004 
      __le32 *tmp_1;
      #line 1009 
      __le32 *tmp_3;
      #line 1010 
      __le32 *tmp_4;
      #line 999 
      qlcnic_ind_wr(adapter,mux2->sel_addr1,sel_val1);
      #line 1000 
      t_sel_val = mux2->sel_val_mask & sel_val1;
      #line 1001 
      qlcnic_ind_wr(adapter,mux2->sel_addr2,t_sel_val);
      #line 1002 
      data = (unsigned int)qlcnic_ind_rd(adapter,mux2->read_addr);
      #line 1003 
      tmp_0 = buffer;
      #line 1003 
      buffer ++;
      #line 1003 
      *tmp_0 = t_sel_val;
      #line 1004 
      tmp_1 = buffer;
      #line 1004 
      buffer ++;
      #line 1004 
      *tmp_1 = data;
      #line 1005 
      qlcnic_ind_wr(adapter,mux2->sel_addr1,sel_val2);
      #line 1006 
      t_sel_val = mux2->sel_val_mask & sel_val2;
      #line 1007 
      qlcnic_ind_wr(adapter,mux2->sel_addr2,t_sel_val);
      #line 1008 
      data = (unsigned int)qlcnic_ind_rd(adapter,mux2->read_addr);
      #line 1009 
      tmp_3 = buffer;
      #line 1009 
      buffer ++;
      #line 1009 
      *tmp_3 = t_sel_val;
      #line 1010 
      tmp_4 = buffer;
      #line 1010 
      buffer ++;
      #line 1010 
      *tmp_4 = data;
      #line 1011 
      sel_val1 = (unsigned int)mux2->sel_val_stride + sel_val1;
      #line 1012 
      sel_val2 = (unsigned int)mux2->sel_val_stride + sel_val2;
    }
    #line 998 
    i ++;
  }
  #line 1015 
  return mux2->no_ops * 16U;
}

#line 1018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_83xx_dump_rom(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  #line 1021 
  u32 fl_addr;
  #line 1021 
  u32 size;
  #line 1022 
  struct __mem *rom = & entry->region.mem;
  #line 1024 
  fl_addr = rom->addr;
  #line 1025 
  size = rom->size / 4U;
  #line 1027 
  if (qlcnic_83xx_lockless_flash_read32(adapter,fl_addr,(u8 *)buffer,
                                        (int)size) == 0) 
    #line 1029 
    return rom->size;
  #line 1031 
  return 0U;
}

#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static struct qlcnic_dump_operations qlcnic_fw_dump_ops[20U] = {{.handler = & qlcnic_dump_nop}, {.opcode = QLCNIC_DUMP_READ_CRB, .handler = & qlcnic_dump_crb}, {.opcode = QLCNIC_DUMP_READ_MUX, .handler = & qlcnic_dump_mux}, {.opcode = QLCNIC_DUMP_QUEUE, .handler = & qlcnic_dump_que}, {.opcode = QLCNIC_DUMP_BRD_CONFIG, .handler = & qlcnic_read_rom}, {.opcode = QLCNIC_DUMP_READ_OCM, .handler = & qlcnic_dump_ocm}, {.opcode = QLCNIC_DUMP_PEG_REG, .handler = & qlcnic_dump_ctrl}, {.opcode = QLCNIC_DUMP_L1_DTAG, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_ITAG, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_DATA, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_INST, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L2_DTAG, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_ITAG, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_DATA, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_INST, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_READ_ROM, .handler = & qlcnic_read_rom}, {.opcode = QLCNIC_DUMP_READ_MEM, .handler = & qlcnic_read_memory}, {.opcode = QLCNIC_DUMP_READ_CTRL, .handler = & qlcnic_dump_ctrl}, {.opcode = QLCNIC_DUMP_TLHDR, .handler = & qlcnic_dump_nop}, {.opcode = QLCNIC_DUMP_RDEND, .handler = & qlcnic_dump_nop}};
#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static struct qlcnic_dump_operations qlcnic_83xx_fw_dump_ops[23U] = {{.handler = & qlcnic_dump_nop}, {.opcode = QLCNIC_DUMP_READ_CRB, .handler = & qlcnic_dump_crb}, {.opcode = QLCNIC_DUMP_READ_MUX, .handler = & qlcnic_dump_mux}, {.opcode = QLCNIC_DUMP_QUEUE, .handler = & qlcnic_dump_que}, {.opcode = QLCNIC_DUMP_BRD_CONFIG, .handler = & qlcnic_83xx_dump_rom}, {.opcode = QLCNIC_DUMP_READ_OCM, .handler = & qlcnic_dump_ocm}, {.opcode = QLCNIC_DUMP_PEG_REG, .handler = & qlcnic_dump_ctrl}, {.opcode = QLCNIC_DUMP_L1_DTAG, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_ITAG, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_DATA, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_INST, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L2_DTAG, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_ITAG, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_DATA, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_INST, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_POLL_RD, .handler = & qlcnic_read_pollrd}, {.opcode = QLCNIC_READ_MUX2, .handler = & qlcnic_read_mux2}, {.opcode = QLCNIC_READ_POLLRDMWR, .handler = & qlcnic_read_pollrdmwr}, {.opcode = QLCNIC_DUMP_READ_ROM, .handler = & qlcnic_83xx_dump_rom}, {.opcode = QLCNIC_DUMP_READ_MEM, .handler = & qlcnic_read_memory}, {.opcode = QLCNIC_DUMP_READ_CTRL, .handler = & qlcnic_dump_ctrl}, {.opcode = QLCNIC_DUMP_TLHDR, .handler = & qlcnic_dump_nop}, {.opcode = QLCNIC_DUMP_RDEND, .handler = & qlcnic_dump_nop}};
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static uint32_t qlcnic_temp_checksum(uint32_t *temp_buffer, u32 temp_size)
{
  #line 1085 
  uint64_t sum = 0ULL;
  #line 1086 
  int count = (int)(temp_size / 4U);
  #line 1087 
  while (1) {
    #line 1087 
    int tmp_0;
    #line 1088 
    uint32_t *tmp;
    #line 1087 
    tmp_0 = count;
    #line 1087 
    count --;
    #line 1087 
    ;
    #line 1087 
    if (! (tmp_0 > 0)) 
                       #line 1087 
                       break;
    #line 1088 
    tmp = temp_buffer;
    #line 1088 
    temp_buffer ++;
    #line 1088 
    sum = (unsigned long long)*tmp + sum;
  }
  #line 1089 
  while (sum >> 32 != 0ULL) 
                            #line 1090 
                            sum = (sum & 4294967295ULL) + (sum >> 32);
  #line 1091 
  return ~ ((unsigned int)sum);
}

#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_fw_flash_get_minidump_temp(struct qlcnic_adapter *adapter, u8 *buffer, u32 size)
{
  #line 1097 
  int ret = 0;
  #line 1099 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 1100 
                                            return -5;
  #line 1102 
  if (qlcnic_83xx_lock_flash(adapter) != 0) 
                                            #line 1103 
                                            return -5;
  #line 1105 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,5373952U,buffer,(int)(size / 4U));
  #line 1109 
  qlcnic_83xx_unlock_flash(adapter);
  #line 1111 
  return ret;
}

#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_fw_flash_get_minidump_temp_size(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 1118 
  struct qlcnic_83xx_dump_template_hdr tmp_hdr;
  #line 1119 
  u32 size = 52U;
  #line 1120 
  int ret = 0;
  #line 1122 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 1123 
                                            return -5;
  #line 1125 
  if (qlcnic_83xx_lock_flash(adapter) != 0) 
                                            #line 1126 
                                            return -5;
  #line 1128 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,5373952U,(u8 *)(& tmp_hdr),(int)size);
  #line 1132 
  qlcnic_83xx_unlock_flash(adapter);
  #line 1134 
  *(cmd->rsp.arg + 2U) = tmp_hdr.size;
  #line 1135 
  *(cmd->rsp.arg + 3U) = tmp_hdr.version;
  #line 1137 
  return ret;
}

#line 1140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_fw_get_minidump_temp_size(struct qlcnic_adapter *adapter, u32 *version, u32 *temp_size, u8 *use_flash_temp)
{
  #line 1145 
  struct qlcnic_cmd_args cmd;
  #line 1144 
  int err = 0;
  #line 1147 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,47U) != 0) 
                                                     #line 1148 
                                                     return -12;
  #line 1150 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1151 
  if (err != 0) {
    #line 1152 
    if (qlcnic_fw_flash_get_minidump_temp_size(adapter,& cmd) != 0) {
      #line 1153 
      qlcnic_free_mbx_args(& cmd);
      #line 1154 
      return -5;
    }
    #line 1156 
    *use_flash_temp = (unsigned char)1U;
  }
  #line 1159 
  *temp_size = *(cmd.rsp.arg + 2U);
  #line 1160 
  *version = *(cmd.rsp.arg + 3U);
  #line 1161 
  qlcnic_free_mbx_args(& cmd);
  #line 1163 
  if (*temp_size == 0U) 
                        #line 1164 
                        return -5;
  #line 1166 
  return 0;
}

#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int __qlcnic_fw_cmd_get_minidump_temp(struct qlcnic_adapter *adapter, u32 *buffer, u32 temp_size)
{
  #line 1172 
  int i;
  #line 1173 
  void *tmp_addr;
  #line 1174 
  __le32 *tmp_buf;
  #line 1175 
  struct qlcnic_cmd_args cmd;
  #line 1172 
  int err = 0;
  #line 1176 
  dma_addr_t tmp_addr_t = 0ULL;
  #line 1178 
  tmp_addr = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)temp_size,& tmp_addr_t,3264U);
  #line 1180 
  if (tmp_addr == (void *)0) 
                             #line 1181 
                             return -12;
  #line 1183 
  if (qlcnic_alloc_mbx_args(& cmd,adapter,48U) != 0) {
    #line 1184 
    err = -12;
    #line 1185 
    goto free_mem;
  }
  #line 1188 
  *(cmd.req.arg + 1U) = (unsigned int)tmp_addr_t;
  #line 1189 
  *(cmd.req.arg + 2U) = (unsigned int)(tmp_addr_t >> 32);
  #line 1190 
  *(cmd.req.arg + 3U) = temp_size;
  #line 1191 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1193 
  tmp_buf = (__le32 *)tmp_addr;
  #line 1194 
  if (err == 0) {
    #line 1195 
    i = 0;
    #line 1195 
    while ((unsigned long)i < (unsigned long)(temp_size / 4U)) {
      #line 1196 
      u32 *tmp_0;
      #line 1196 
      __le32 *tmp_1;
      #line 1196 
      tmp_0 = buffer;
      #line 1196 
      buffer ++;
      #line 1196 
      tmp_1 = tmp_buf;
      #line 1196 
      tmp_buf ++;
      #line 1196 
      *tmp_0 = *tmp_1;
      #line 1195 
      i ++;
    }
  }
  #line 1199 
  qlcnic_free_mbx_args(& cmd);
  #line 1201 
  free_mem: 
            #line 1201 
  ;
  #line 1202 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)temp_size,tmp_addr,tmp_addr_t);
  #line 1204 
  return err;
}

#line 1207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
int qlcnic_fw_cmd_get_minidump_temp(struct qlcnic_adapter *adapter)
{
  #line 1209 
  struct qlcnic_hardware_context *ahw;
  #line 1210 
  struct qlcnic_fw_dump *fw_dump;
  #line 1211 
  u32 version;
  #line 1211 
  u32 csum;
  #line 1211 
  u32 *tmp_buf;
  #line 1214 
  void *temp_buffer;
  #line 1215 
  int err;
  #line 1212 
  u8 use_flash_temp = (unsigned char)0U;
  #line 1213 
  u32 temp_size = 0U;
  #line 1217 
  ahw = adapter->ahw;
  #line 1218 
  fw_dump = & ahw->fw_dump;
  #line 1219 
  err = qlcnic_fw_get_minidump_temp_size(adapter,& version,& temp_size,& use_flash_temp);
  #line 1221 
  if (err != 0) {
    #line 1222 
    _dev_err(& (adapter->pdev)->dev,(char *)"Can\'t get template size %d\n",err);
    #line 1224 
    return -5;
  }
  #line 1227 
  fw_dump->tmpl_hdr = cif_vzalloc_0((unsigned long)temp_size);
  #line 1228 
  if (fw_dump->tmpl_hdr == (void *)0) 
                                      #line 1229 
                                      return -12;
  #line 1231 
  tmp_buf = (u32 *)fw_dump->tmpl_hdr;
  #line 1232 
  if ((unsigned int)use_flash_temp != 0U) 
                                          #line 1233 
                                          goto flash_temp;
  #line 1235 
  err = __qlcnic_fw_cmd_get_minidump_temp(adapter,tmp_buf,temp_size);
  #line 1237 
  if (err != 0) {
    #line 1238 
    flash_temp: 
                #line 1238 
    ;
    #line 1239 
    err = qlcnic_fw_flash_get_minidump_temp(adapter,(u8 *)tmp_buf,temp_size);
    #line 1242 
    if (err != 0) {
      #line 1243 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to get minidump template header %d\n",err);
      #line 1246 
      cif_vfree(fw_dump->tmpl_hdr);
      #line 1247 
      fw_dump->tmpl_hdr = (void *)0;
      #line 1248 
      return -5;
    }
  }
  #line 1252 
  csum = qlcnic_temp_checksum(tmp_buf,temp_size);
  #line 1254 
  if (csum != 0U) {
    #line 1255 
    _dev_err(& (adapter->pdev)->dev,(char *)"Template header checksum validation failed\n");
    #line 1257 
    cif_vfree(fw_dump->tmpl_hdr);
    #line 1258 
    fw_dump->tmpl_hdr = (void *)0;
    #line 1259 
    return -5;
  }
  #line 1262 
  qlcnic_cache_tmpl_hdr_values(adapter,fw_dump);
  #line 1264 
  if ((int)fw_dump->use_pex_dma != 0) {
    #line 1265 
    fw_dump->dma_buffer = (void *)0;
    #line 1266 
    temp_buffer = dma_alloc_coherent(& (adapter->pdev)->dev,65536UL,& fw_dump->phys_addr,3264U);
    #line 1270 
    if (temp_buffer == (void *)0) 
                                  #line 1271 
                                  fw_dump->use_pex_dma = (_Bool)0; else 
                                                                    #line 1273 
                                                                    fw_dump->dma_buffer = temp_buffer;
  }
  #line 1277 
  _dev_info(& (adapter->pdev)->dev,(char *)"Default minidump capture mask 0x%x\n",fw_dump->cap_mask);
  #line 1281 
  qlcnic_enable_fw_dump_state(adapter);
  #line 1283 
  return 0;
}

#line 1286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
int qlcnic_dump_fw(struct qlcnic_adapter *adapter)
{
  #line 1289 
  struct qlcnic_dump_operations *fw_dump_ops;
  #line 1290 
  struct qlcnic_83xx_dump_template_hdr *hdr_83xx;
  #line 1291 
  u32 entry_offset;
  #line 1291 
  u32 dump;
  #line 1291 
  u32 no_entries;
  #line 1292 
  int i;
  #line 1292 
  int k;
  #line 1292 
  int ops_cnt;
  #line 1292 
  int ops_index;
  #line 1294 
  struct qlcnic_hardware_context *ahw;
  #line 1295 
  struct qlcnic_dump_entry *entry;
  #line 1296 
  void *tmpl_hdr;
  #line 1297 
  u32 ocm_window;
  #line 1298 
  __le32 *buffer;
  #line 1299 
  char mesg[64U];
  #line 1288 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 1291 
  u32 buf_offset = 0U;
  #line 1292 
  int dump_size = 0;
  #line 1293 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1300 
  char *msg[2U] = {(char *)(& mesg), (char *)0};
  #line 1302 
  ahw = adapter->ahw;
  #line 1303 
  tmpl_hdr = fw_dump->tmpl_hdr;
  #line 1306 
  if (tmpl_hdr == (void *)0) 
                             #line 1307 
                             return -5;
  #line 1309 
  if (! qlcnic_check_fw_dump_state(adapter)) {
    #line 1310 
    _dev_info(& (adapter->pdev)->dev,(char *)"Dump not enabled\n");
    #line 1311 
    return -5;
  }
  #line 1314 
  if ((unsigned int)fw_dump->clr != 0U) {
    #line 1315 
    _dev_info(& (adapter->pdev)->dev,(char *)"Previous dump not cleared, not capturing dump\n");
    #line 1317 
    return -5;
  }
  #line 1320 
  if (((adapter->ahw)->msg_enable & 1U) != 0U) 
                                               #line 1320 
                                               netdev_info(adapter->netdev,(char *)"Take FW dump\n");
  #line 1322 
  i = 2;
  #line 1322 
  k = 1;
  #line 1322 
  while ((i & 255) != 0) {
    #line 1323 
    if ((fw_dump->cap_mask & (unsigned int)i) != 0U) {
      #line 1324 
      dump_size = (int)(qlcnic_get_cap_size(adapter,tmpl_hdr,k) + (unsigned int)dump_size);
    }
    #line 1322 
    i <<= 1;
    #line 1322 
    k ++;
  }
  #line 1326 
  if (dump_size == 0) 
                      #line 1327 
                      return -5;
  #line 1329 
  fw_dump->data = cif_vzalloc_0((unsigned long)dump_size);
  #line 1330 
  if (fw_dump->data == (void *)0) 
                                  #line 1331 
                                  return -12;
  #line 1333 
  buffer = (__le32 *)fw_dump->data;
  #line 1334 
  fw_dump->size = (unsigned int)dump_size;
  #line 1335 
  no_entries = fw_dump->num_entries;
  #line 1336 
  entry_offset = fw_dump->offset;
  #line 1337 
  qlcnic_set_sys_info(adapter,tmpl_hdr,0,328514U);
  #line 1338 
  qlcnic_set_sys_info(adapter,tmpl_hdr,1,adapter->fw_version);
  #line 1340 
  if ((int)qlcnic_82xx_check(adapter) != 0) {
    #line 1341 
    ops_cnt = 20;
    #line 1342 
    fw_dump_ops = (struct qlcnic_dump_operations *)(& qlcnic_fw_dump_ops);
  }
  else {
    #line 1344 
    hdr_83xx = (struct qlcnic_83xx_dump_template_hdr *)tmpl_hdr;
    #line 1345 
    ops_cnt = 23;
    #line 1346 
    fw_dump_ops = (struct qlcnic_dump_operations *)(& qlcnic_83xx_fw_dump_ops);
    #line 1347 
    ocm_window = hdr_83xx->ocm_wnd_reg[(int)ahw->pci_func];
    #line 1348 
    hdr_83xx->saved_state[3] = ocm_window;
    #line 1349 
    hdr_83xx->saved_state[0] = (unsigned int)ahw->pci_func;
  }
  #line 1352 
  i = 0;
  #line 1352 
  while ((unsigned int)i < no_entries) {
    {
      #line 1353 
      entry = (struct qlcnic_dump_entry *)(tmpl_hdr + (unsigned long)entry_offset);
      #line 1354 
      if (((unsigned int)entry->hdr.mask & fw_dump->cap_mask) == 0U) {
        #line 1355 
        entry->hdr.flags = (unsigned char)((unsigned int)entry->hdr.flags | 128U);
        #line 1356 
        entry_offset = entry->hdr.offset + entry_offset;
        #line 1357 
        goto __Cont;
      }
      #line 1361 
      ops_index = 0;
      #line 1362 
      while (ops_index < ops_cnt) {
        #line 1363 
        if (entry->hdr.type == (unsigned int)(fw_dump_ops + (unsigned long)ops_index)->opcode) 
          #line 1364 
          break;
        #line 1365 
        ops_index ++;
      }
      #line 1368 
      if (ops_index == ops_cnt) {
        #line 1369 
        _dev_info(dev,(char *)"Skipping unknown entry opcode %d\n",entry->hdr.type);
        #line 1371 
        entry->hdr.flags = (unsigned char)((unsigned int)entry->hdr.flags | 128U);
        #line 1372 
        entry_offset = entry->hdr.offset + entry_offset;
        #line 1373 
        goto __Cont;
      }
      #line 1377 
      dump = (*((fw_dump_ops + (unsigned long)ops_index)->handler))(adapter,entry,buffer);
      #line 1378 
      if (qlcnic_valid_dump_entry(dev,entry,dump) == 0) {
        #line 1379 
        entry->hdr.flags = (unsigned char)((unsigned int)entry->hdr.flags | 128U);
        #line 1380 
        entry_offset = entry->hdr.offset + entry_offset;
        #line 1381 
        goto __Cont;
      }
      #line 1384 
      buf_offset = entry->hdr.cap_size + buf_offset;
      #line 1385 
      entry_offset = entry->hdr.offset + entry_offset;
      #line 1386 
      buffer = (__le32 *)(fw_dump->data + (unsigned long)buf_offset);
      #line 1387 
      ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c",1387,0);
      #line 1387 
      _cond_resched();
    }
    #line 1352 
    __Cont: 
            #line 1352 
    i ++;
  }
  #line 1390 
  fw_dump->clr = (unsigned char)1U;
  #line 1391 
  snprintf((char *)(& mesg),64UL,(char *)"FW_DUMP=%s",(char *)(& (adapter->netdev)->name));
  #line 1392 
  netdev_info(adapter->netdev,(char *)"Dump data %d bytes captured, dump data address = %p, template header size %d bytes, template address = %p\n",fw_dump->size,fw_dump->data,fw_dump->tmpl_hdr_size,fw_dump->tmpl_hdr);
  #line 1397 
  kobject_uevent_env(& dev->kobj,(enum kobject_action)KOBJ_CHANGE,(char **)(& msg));
  #line 1399 
  return 0;
}

#line 1403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
__inline static bool qlcnic_83xx_md_check_extended_dump_capability(struct qlcnic_adapter *adapter)
{
  #line 1410 
  return (_Bool)(((unsigned int)(adapter->pdev)->device == 34864U && ((adapter->ahw)->extra_capability[0] & 8192U) != 0U) != 0);
}

#line 1415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_get_minidump_template(struct qlcnic_adapter *adapter)
{
  #line 1417 
  u32 prev_version;
  #line 1417 
  u32 current_version;
  #line 1422 
  int ret;
  #line 1418 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1419 
  struct qlcnic_fw_dump *fw_dump = & ahw->fw_dump;
  #line 1420 
  struct pci_dev *pdev = adapter->pdev;
  #line 1421 
  bool extended = (_Bool)0;
  #line 1424 
  prev_version = adapter->fw_version;
  #line 1425 
  current_version = (unsigned int)qlcnic_83xx_get_fw_version(adapter);
  #line 1427 
  if (fw_dump->tmpl_hdr == (void *)0 || current_version > prev_version) {
    #line 1428 
    cif_vfree(fw_dump->tmpl_hdr);
    #line 1430 
    if ((int)qlcnic_83xx_md_check_extended_dump_capability(adapter) != 0) {
      #line 1431 
      extended = (_Bool)(qlcnic_83xx_extend_md_capab(adapter) == 0);
    }
    #line 1433 
    ret = qlcnic_fw_cmd_get_minidump_temp(adapter);
    #line 1434 
    if (ret != 0) 
                  #line 1435 
                  return;
    #line 1437 
    _dev_info(& pdev->dev,(char *)"Supports FW dump capability\n");
    #line 1443 
    if ((int)extended != 0) {
      #line 1444 
      struct qlcnic_83xx_dump_template_hdr *hdr;
      #line 1446 
      hdr = (struct qlcnic_83xx_dump_template_hdr *)fw_dump->tmpl_hdr;
      #line 1447 
      hdr->drv_cap_mask = 31U;
      #line 1448 
      fw_dump->cap_mask = 31U;
      #line 1449 
      _dev_info(& pdev->dev,(char *)"Extended iSCSI dump capability and updated capture mask to 0x1f\n");
    }
  }
  #line 1452 
  return;
}

#line 437  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
static void *kzalloc_3(size_t size, gfp_t flags)
{
  #line 440 
  return ldv_kzalloc(size,flags);
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
static void cif_mutex_lock_mem_lock_of_qlcnic_hardware_context_1(struct mutex *lock)
{
  #line 818 
  ldv_mutex_model_lock(lock,(char *)"mem_lock_of_qlcnic_hardware_context");
  #line 819 
  return;
}

#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
static void cif_mutex_unlock_mem_lock_of_qlcnic_hardware_context_1(struct mutex *lock)
{
  #line 825 
  ldv_mutex_model_unlock(lock,(char *)"mem_lock_of_qlcnic_hardware_context");
  #line 826 
  return;
}

#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
static void *cif_vzalloc_0(unsigned long size)
{
  #line 832 
  return ldv_vzalloc(size);
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_minidump.i.aux"
static void cif_vfree(void *addr)
{
  #line 839 
  ldv_vfree(addr);
  #line 840 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static void cif_set_bit_4(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static void cif_clear_bit_4(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static bool cif_queue_delayed_work_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 494  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static void *kzalloc_4(size_t size, gfp_t flags);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
#line 20 
int dcb_setapp(struct net_device *, struct dcb_app *);
#line 21 
#line 21 
u8 dcb_getapp(struct net_device *, struct dcb_app *);
#line 41 
#line 41 
int dcbnl_cee_notify(struct net_device *, int, int, u32, u32);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
int qlcnic_register_dcb(struct qlcnic_adapter *adapter);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_get_hw_capability(struct qlcnic_dcb *dcb)
{
  #line 52 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->get_hw_capability != (int (*)(struct qlcnic_dcb *))0) {
    #line 53 
    return (*((dcb->ops)->get_hw_capability))(dcb);
  }
  #line 55 
  return 0;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_query_hw_capability(struct qlcnic_dcb *dcb, char *buf)
{
  #line 75 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->query_hw_capability != (int (*)(struct qlcnic_dcb *, char *))0) {
    #line 76 
    return (*((dcb->ops)->query_hw_capability))(dcb,buf);
  }
  #line 78 
  return 0;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 type)
{
  #line 90 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->query_cee_param != (int (*)(struct qlcnic_dcb *, char *, u8 ))0) {
    #line 91 
    return (*((dcb->ops)->query_cee_param))(dcb,buf,(unsigned char)((int)type));
  }
  #line 93 
  return 0;
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_get_cee_cfg(struct qlcnic_dcb *dcb)
{
  #line 98 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->get_cee_cfg != (int (*)(struct qlcnic_dcb *))0) {
    #line 99 
    return (*((dcb->ops)->get_cee_cfg))(dcb);
  }
  #line 101 
  return 0;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
#line 1127 
static struct dcbnl_rtnl_ops qlcnic_dcbnl_ops;
#line 56 
#line 524 
static void qlcnic_dcb_aen_work(struct work_struct *work);
#line 57 
#line 770 
static void qlcnic_dcb_data_cee_param_map(struct qlcnic_adapter *adapter);
#line 59 
#line 242 
static void __qlcnic_init_dcbnl_ops(struct qlcnic_dcb *dcb);
#line 60 
#line 275 
static void __qlcnic_dcb_free(struct qlcnic_dcb *dcb);
#line 61 
#line 308 
static int __qlcnic_dcb_attach(struct qlcnic_dcb *dcb);
#line 62 
#line 345 
static int __qlcnic_dcb_query_hw_capability(struct qlcnic_dcb *dcb, char *buf);
#line 63 
#line 302 
static void __qlcnic_dcb_get_info(struct qlcnic_dcb *dcb);
#line 65 
#line 404 
static int qlcnic_82xx_dcb_get_hw_capability(struct qlcnic_dcb *dcb);
#line 66 
#line 424 
static int qlcnic_82xx_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 type);
#line 67 
#line 493 
static int qlcnic_82xx_dcb_get_cee_cfg(struct qlcnic_dcb *dcb);
#line 68 
#line 534 
static void qlcnic_82xx_dcb_aen_handler(struct qlcnic_dcb *dcb, void *data);
#line 70 
#line 542 
static int qlcnic_83xx_dcb_get_hw_capability(struct qlcnic_dcb *dcb);
#line 71 
#line 565 
static int qlcnic_83xx_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 idx);
#line 72 
#line 628 
static int qlcnic_83xx_dcb_get_cee_cfg(struct qlcnic_dcb *dcb);
#line 73 
#line 641 
static void qlcnic_83xx_dcb_aen_handler(struct qlcnic_dcb *dcb, void *data);
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static struct qlcnic_dcb_ops qlcnic_83xx_dcb_ops = {.query_hw_capability = & __qlcnic_dcb_query_hw_capability, .get_hw_capability = & qlcnic_83xx_dcb_get_hw_capability, .query_cee_param = & qlcnic_83xx_dcb_query_cee_param, .init_dcbnl_ops = & __qlcnic_init_dcbnl_ops, .aen_handler = & qlcnic_83xx_dcb_aen_handler, .get_cee_cfg = & qlcnic_83xx_dcb_get_cee_cfg, .get_info = & __qlcnic_dcb_get_info, .attach = & __qlcnic_dcb_attach, .free = & __qlcnic_dcb_free};
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static struct qlcnic_dcb_ops qlcnic_82xx_dcb_ops = {.query_hw_capability = & __qlcnic_dcb_query_hw_capability, .get_hw_capability = & qlcnic_82xx_dcb_get_hw_capability, .query_cee_param = & qlcnic_82xx_dcb_query_cee_param, .init_dcbnl_ops = & __qlcnic_init_dcbnl_ops, .aen_handler = & qlcnic_82xx_dcb_aen_handler, .get_cee_cfg = & qlcnic_82xx_dcb_get_cee_cfg, .get_info = & __qlcnic_dcb_get_info, .attach = & __qlcnic_dcb_attach, .free = & __qlcnic_dcb_free};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_num_app(struct qlcnic_adapter *adapter, u32 val)
{
  #line 198 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 199 
                                            return (unsigned char)((unsigned int)((unsigned char)(val >> 12)) & 15U); else 
                                                                    #line 201 
                                                                    return (unsigned char)((unsigned int)((unsigned char)(val >> 2)) & 15U);
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static u8 qlcnic_dcb_pfc_hdr_valid(struct qlcnic_adapter *adapter, u32 val)
{
  #line 207 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 208 
                                            return (unsigned char)((unsigned int)((unsigned char)(val >> 5)) & 1U); else 
                                                                    #line 210 
                                                                    return (unsigned char)((unsigned int)((unsigned char)(val >> 1)) & 1U);
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static u8 qlcnic_dcb_tsa_hdr_valid(struct qlcnic_adapter *adapter, u32 val)
{
  #line 216 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 217 
                                            return (unsigned char)((unsigned int)((unsigned char)(val >> 4)) & 1U); else 
                                                                    #line 219 
                                                                    return (unsigned char)((unsigned int)((unsigned char)val) & 1U);
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static u8 qlcnic_dcb_get_prio_map_app(struct qlcnic_adapter *adapter, u32 val)
{
  #line 225 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 226 
                                            return (unsigned char)(1 << val); else 
                                                                    #line 228 
                                                                    return (unsigned char)(val >> 24);
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_prio_count(u8 up_tc_map)
{
  #line 233 
  int j;
  #line 235 
  j = 0;
  #line 235 
  while (j <= 7) {
    #line 236 
    if ((((int)up_tc_map >> j) & 1) != 0) 
                                          #line 237 
                                          break;
    #line 235 
    j ++;
  }
  #line 239 
  return j;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void __qlcnic_init_dcbnl_ops(struct qlcnic_dcb *dcb)
{
  #line 244 
  if ((int)test_bit(0L,& dcb->state) != 0) 
                                           #line 245 
                                           ((dcb->adapter)->netdev)->dcbnl_ops = & qlcnic_dcbnl_ops;
  #line 246 
  return;
}

#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_set_dcb_ops(struct qlcnic_adapter *adapter)
{
  #line 250 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 251 
                                            (adapter->dcb)->ops = & qlcnic_82xx_dcb_ops;
  else {
    #line 252 
    if ((int)qlcnic_83xx_check(adapter) != 0) 
                                              #line 253 
                                              (adapter->dcb)->ops = & qlcnic_83xx_dcb_ops;
  }
  #line 254 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
int qlcnic_register_dcb(struct qlcnic_adapter *adapter)
{
  #line 258 
  struct qlcnic_dcb *dcb;
  #line 260 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 261 
                                                return 0;
  #line 263 
  dcb = (struct qlcnic_dcb *)kzalloc_4(232UL,2592U);
  #line 264 
  if (dcb == (struct qlcnic_dcb *)0) 
                                     #line 265 
                                     return -12;
  #line 267 
  adapter->dcb = dcb;
  #line 268 
  dcb->adapter = adapter;
  #line 269 
  qlcnic_set_dcb_ops(adapter);
  #line 270 
  dcb->state = 0UL;
  #line 272 
  return 0;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void __qlcnic_dcb_free(struct qlcnic_dcb *dcb)
{
  #line 277 
  struct qlcnic_adapter *adapter;
  #line 279 
  if (dcb == (struct qlcnic_dcb *)0) 
                                     #line 280 
                                     return;
  #line 282 
  adapter = dcb->adapter;
  #line 284 
  while (1) {
    #line 284 
    if (! ((int)test_bit(1L,& dcb->state) != 0)) 
                                                 #line 284 
                                                 break;
    #line 285 
    usleep_range(10000UL,11000UL);
  }
  #line 287 
  cancel_delayed_work_sync(& dcb->aen_work);
  #line 289 
  if (dcb->wq != (struct workqueue_struct *)0) {
    #line 290 
    destroy_workqueue(dcb->wq);
    #line 291 
    dcb->wq = (struct workqueue_struct *)0;
  }
  #line 294 
  kfree((void *)dcb->cfg);
  #line 295 
  dcb->cfg = (struct qlcnic_dcb_cfg *)0;
  #line 296 
  kfree((void *)dcb->param);
  #line 297 
  dcb->param = (struct qlcnic_dcb_mbx_params *)0;
  #line 298 
  kfree((void *)dcb);
  #line 299 
  adapter->dcb = (struct qlcnic_dcb *)0;
  #line 300 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void __qlcnic_dcb_get_info(struct qlcnic_dcb *dcb)
{
  #line 304 
  qlcnic_dcb_get_hw_capability(dcb);
  #line 305 
  qlcnic_dcb_get_cee_cfg(dcb);
  #line 306 
  return;
}

#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int __qlcnic_dcb_attach(struct qlcnic_dcb *dcb)
{
  #line 310 
  int err = 0;
  {
    #line 312 
    struct lock_class_key __key;
    #line 312 
    __init_work(& dcb->aen_work.work,0);
    #line 312 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 312 
    dcb->aen_work.work.data = __constr_expr_41;
    #line 312 
    lockdep_init_map(& dcb->aen_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 312 
    INIT_LIST_HEAD_2(& dcb->aen_work.work.entry);
    #line 312 
    dcb->aen_work.work.func = & qlcnic_dcb_aen_work;
  }
  {
    #line 312 
    struct lock_class_key __key_0;
    #line 312 
    init_timer_key(& dcb->aen_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&dcb->aen_work)->timer",& __key_0);
  }
  #line 314 
  dcb->wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"qlcnic-dcb");
  #line 315 
  if (dcb->wq == (struct workqueue_struct *)0) {
    #line 316 
    _dev_err(& ((dcb->adapter)->pdev)->dev,(char *)"DCB workqueue allocation failed. DCB will be disabled\n");
    #line 318 
    return -1;
  }
  #line 321 
  dcb->cfg = (struct qlcnic_dcb_cfg *)kzalloc_4(2232UL,2592U);
  #line 322 
  if (dcb->cfg == (struct qlcnic_dcb_cfg *)0) {
    #line 323 
    err = -12;
    #line 324 
    goto out_free_wq;
  }
  #line 327 
  dcb->param = (struct qlcnic_dcb_mbx_params *)kzalloc_4(196UL,2592U);
  #line 328 
  if (dcb->param == (struct qlcnic_dcb_mbx_params *)0) {
    #line 329 
    err = -12;
    #line 330 
    goto out_free_cfg;
  }
  #line 333 
  return 0;
  #line 334 
  out_free_cfg: 
                #line 334 
  ;
  #line 335 
  kfree((void *)dcb->cfg);
  #line 336 
  dcb->cfg = (struct qlcnic_dcb_cfg *)0;
  #line 338 
  out_free_wq: 
               #line 338 
  ;
  #line 339 
  destroy_workqueue(dcb->wq);
  #line 340 
  dcb->wq = (struct workqueue_struct *)0;
  #line 342 
  return err;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int __qlcnic_dcb_query_hw_capability(struct qlcnic_dcb *dcb, char *buf)
{
  #line 348 
  struct qlcnic_cmd_args cmd;
  #line 349 
  u32 mbx_out;
  #line 350 
  int err;
  #line 347 
  struct qlcnic_adapter *adapter = dcb->adapter;
  #line 352 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,52U);
  #line 353 
  if (err != 0) 
                #line 354 
                return err;
  #line 356 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 357 
  if (err != 0) 
                #line 358 
                _dev_err(& (adapter->pdev)->dev,(char *)"Failed to query DCBX capability, err %d\n",err);
  else {
    #line 361 
    mbx_out = *(cmd.rsp.arg + 1U);
    #line 362 
    if (buf != (char *)0) 
                          #line 363 
                          memcpy((void *)buf,(void *)(& mbx_out),4UL);
  }
  #line 366 
  qlcnic_free_mbx_args(& cmd);
  #line 368 
  return err;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int __qlcnic_dcb_get_capability(struct qlcnic_dcb *dcb, u32 *val)
{
  #line 374 
  u32 mbx_out;
  #line 375 
  int err;
  #line 373 
  struct qlcnic_dcb_capability *cap = & (dcb->cfg)->capability;
  #line 377 
  memset((void *)cap,0,6UL);
  #line 379 
  err = qlcnic_dcb_query_hw_capability(dcb,(char *)val);
  #line 380 
  if (err != 0) 
                #line 381 
                return err;
  #line 383 
  mbx_out = *val;
  #line 384 
  if ((mbx_out & 1U) != 0U) 
                            #line 385 
                            cap->tsa_capability = (_Bool)1;
  #line 387 
  if ((mbx_out & 2U) != 0U) 
                            #line 388 
                            cap->ets_capability = (_Bool)1;
  #line 390 
  cap->max_num_tc = (unsigned char)((unsigned int)((unsigned char)(mbx_out >> 20)) & 15U);
  #line 391 
  cap->max_ets_tc = (unsigned char)((unsigned int)((unsigned char)(mbx_out >> 24)) & 15U);
  #line 392 
  cap->max_pfc_tc = (unsigned char)(mbx_out >> 28);
  #line 394 
  if (((unsigned int)cap->max_num_tc > 8U || (int)cap->max_ets_tc > (int)cap->max_num_tc) || (int)cap->max_pfc_tc > (int)cap->max_num_tc) {
    #line 397 
    _dev_err(& ((dcb->adapter)->pdev)->dev,(char *)"Invalid DCB configuration\n");
    #line 398 
    return -22;
  }
  #line 401 
  return err;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_82xx_dcb_get_hw_capability(struct qlcnic_dcb *dcb)
{
  #line 407 
  struct qlcnic_dcb_capability *cap;
  #line 408 
  u32 mbx_out;
  #line 409 
  int err;
  #line 406 
  struct qlcnic_dcb_cfg *cfg = dcb->cfg;
  #line 411 
  err = __qlcnic_dcb_get_capability(dcb,& mbx_out);
  #line 412 
  if (err != 0) 
                #line 413 
                return err;
  #line 415 
  cap = & cfg->capability;
  #line 416 
  cap->dcb_capability = (unsigned char)6U;
  #line 418 
  if (((unsigned int)cap->dcb_capability != 0U && (int)cap->tsa_capability != 0) && (int)cap->ets_capability != 0) 
    #line 419 
    cif_set_bit_4(0L,& dcb->state);
  #line 421 
  return err;
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_82xx_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 type)
{
  #line 429 
  struct qlcnic_82xx_dcb_param_mbx_le *prsp_le;
  #line 431 
  dma_addr_t cardrsp_phys_addr;
  #line 432 
  struct qlcnic_dcb_param rsp;
  #line 433 
  struct qlcnic_cmd_args cmd;
  #line 434 
  u64 phys_addr;
  #line 435 
  void *addr;
  #line 436 
  int err;
  #line 436 
  int i;
  #line 427 
  u16 size = (unsigned short)64U;
  #line 428 
  struct qlcnic_adapter *adapter = dcb->adapter;
  #line 430 
  struct device *dev = & (adapter->pdev)->dev;
  #line 438 
  switch ((int)type) {
    #line 439 
    case 3: 
            #line 439 
    ;
    #line 440 
    case 1: 
            #line 440 
    ;
    #line 441 
    case 2: 
            #line 441 
    ;
    #line 442 
    break;
    #line 443 
    default: 
             #line 443 
    ;
    #line 444 
    _dev_err(dev,(char *)"Invalid parameter type %d\n",(int)type);
    #line 445 
    return -22;
  }
  #line 448 
  addr = dma_alloc_coherent(dev,(unsigned long)size,& cardrsp_phys_addr,3264U);
  #line 449 
  if (addr == (void *)0) 
                         #line 450 
                         return -12;
  #line 452 
  prsp_le = (struct qlcnic_82xx_dcb_param_mbx_le *)addr;
  #line 454 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,53U);
  #line 455 
  if (err != 0) 
                #line 456 
                goto out_free_rsp;
  #line 458 
  phys_addr = cardrsp_phys_addr;
  #line 459 
  *(cmd.req.arg + 1U) = (unsigned int)((int)size | ((int)type << 16));
  #line 460 
  *(cmd.req.arg + 2U) = (unsigned int)(phys_addr >> 32);
  #line 461 
  *(cmd.req.arg + 3U) = (unsigned int)phys_addr;
  #line 463 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 464 
  if (err != 0) {
    #line 465 
    _dev_err(dev,(char *)"Failed to query DCBX parameter, err %d\n",err);
    #line 466 
    goto out;
  }
  #line 469 
  memset((void *)(& rsp),0,64UL);
  #line 470 
  rsp.hdr_prio_pfc_map[0] = prsp_le->hdr_prio_pfc_map[0];
  #line 471 
  rsp.hdr_prio_pfc_map[1] = prsp_le->hdr_prio_pfc_map[1];
  #line 472 
  rsp.prio_pg_map[0] = prsp_le->prio_pg_map[0];
  #line 473 
  rsp.prio_pg_map[1] = prsp_le->prio_pg_map[1];
  #line 474 
  rsp.pg_bw_map[0] = prsp_le->pg_bw_map[0];
  #line 475 
  rsp.pg_bw_map[1] = prsp_le->pg_bw_map[1];
  #line 476 
  rsp.pg_tsa_map[0] = prsp_le->pg_tsa_map[0];
  #line 477 
  rsp.pg_tsa_map[1] = prsp_le->pg_tsa_map[1];
  #line 479 
  i = 0;
  #line 479 
  while (i <= 7) {
    #line 480 
    rsp.app[i] = prsp_le->app[i];
    #line 479 
    i ++;
  }
  #line 482 
  if (buf != (char *)0) 
                        #line 483 
                        memcpy((void *)buf,(void *)(& rsp),(unsigned long)size);
  #line 484 
  out: 
       #line 484 
  ;
  #line 485 
  qlcnic_free_mbx_args(& cmd);
  #line 487 
  out_free_rsp: 
                #line 487 
  ;
  #line 488 
  dma_free_coherent(dev,(unsigned long)size,addr,cardrsp_phys_addr);
  #line 490 
  return err;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_82xx_dcb_get_cee_cfg(struct qlcnic_dcb *dcb)
{
  #line 495 
  struct qlcnic_dcb_mbx_params *mbx;
  #line 496 
  int err;
  #line 498 
  mbx = dcb->param;
  #line 499 
  if (mbx == (struct qlcnic_dcb_mbx_params *)0) 
                                                #line 500 
                                                return 0;
  #line 502 
  err = qlcnic_dcb_query_cee_param(dcb,(char *)(& mbx->type[0]),(unsigned char)3);
  #line 504 
  if (err != 0) 
                #line 505 
                return err;
  #line 507 
  err = qlcnic_dcb_query_cee_param(dcb,(char *)(& mbx->type[1]),(unsigned char)1);
  #line 509 
  if (err != 0) 
                #line 510 
                return err;
  #line 512 
  err = qlcnic_dcb_query_cee_param(dcb,(char *)(& mbx->type[2]),(unsigned char)2);
  #line 514 
  if (err != 0) 
                #line 515 
                return err;
  #line 517 
  mbx->prio_tc_map = 1985229328U;
  #line 519 
  qlcnic_dcb_data_cee_param_map(dcb->adapter);
  #line 521 
  return err;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_aen_work(struct work_struct *work)
{
  #line 528 
  void *__mptr;
  #line 526 
  struct qlcnic_dcb *dcb;
  #line 528 
  __mptr = (void *)work;
  #line 528 
  dcb = ((struct qlcnic_dcb *)(__mptr + 18446744073709551600U));
  #line 530 
  qlcnic_dcb_get_cee_cfg(dcb);
  #line 531 
  cif_clear_bit_4(1L,& dcb->state);
  #line 532 
  return;
}

#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_82xx_dcb_aen_handler(struct qlcnic_dcb *dcb, void *data)
{
  #line 536 
  if ((int)test_and_set_bit(1L,& dcb->state) != 0) 
                                                   #line 537 
                                                   return;
  #line 539 
  cif_queue_delayed_work_0(dcb->wq,& dcb->aen_work,0UL);
  #line 540 
  return;
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_83xx_dcb_get_hw_capability(struct qlcnic_dcb *dcb)
{
  #line 545 
  u32 mbx_out;
  #line 546 
  int err;
  #line 544 
  struct qlcnic_dcb_capability *cap = & (dcb->cfg)->capability;
  #line 548 
  err = __qlcnic_dcb_get_capability(dcb,& mbx_out);
  #line 549 
  if (err != 0) 
                #line 550 
                return err;
  #line 552 
  if ((mbx_out & 4U) != 0U) 
                            #line 553 
                            cap->dcb_capability = (unsigned char)4U;
  #line 554 
  if ((mbx_out & 8U) != 0U) 
                            #line 555 
                            cap->dcb_capability = (unsigned char)((unsigned int)cap->dcb_capability | 8U);
  #line 556 
  if ((unsigned int)cap->dcb_capability != 0U) 
                                               #line 557 
                                               cap->dcb_capability = (unsigned char)((unsigned int)cap->dcb_capability | 2U);
  #line 559 
  if (((unsigned int)cap->dcb_capability != 0U && (int)cap->tsa_capability != 0) && (int)cap->ets_capability != 0) 
    #line 560 
    cif_set_bit_4(0L,& dcb->state);
  #line 562 
  return err;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_83xx_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 idx)
{
  #line 569 
  struct qlcnic_dcb_mbx_params mbx_out;
  #line 570 
  int err;
  #line 570 
  int i;
  #line 570 
  int j;
  #line 570 
  int k;
  #line 570 
  int max_app;
  #line 570 
  int size;
  #line 571 
  struct qlcnic_dcb_param *each;
  #line 572 
  struct qlcnic_cmd_args cmd;
  #line 573 
  u32 val;
  #line 574 
  char *p;
  #line 568 
  struct qlcnic_adapter *adapter = dcb->adapter;
  #line 576 
  size = 0;
  #line 577 
  memset((void *)(& mbx_out),0,196UL);
  #line 578 
  memset((void *)buf,0,196UL);
  #line 580 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,53U);
  #line 581 
  if (err != 0) 
                #line 582 
                return err;
  #line 584 
  *(cmd.req.arg) |= 1073741824U;
  #line 585 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 586 
  if (err != 0) {
    #line 587 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to query DCBX param, err %d\n",err);
    #line 589 
    goto out;
  }
  #line 592 
  mbx_out.prio_tc_map = *(cmd.rsp.arg + 1U);
  #line 593 
  p = (char *)memcpy((void *)buf,(void *)(& mbx_out),4UL);
  #line 594 
  k = 2;
  #line 595 
  p += 4UL;
  #line 597 
  j = 0;
  #line 597 
  while (j <= 2) {
    {
      #line 600 
      int tmp_0;
      #line 601 
      int tmp_1;
      #line 602 
      int tmp_2;
      #line 603 
      int tmp_3;
      #line 604 
      int tmp_4;
      #line 605 
      int tmp_5;
      #line 606 
      int tmp_6;
      #line 607 
      int tmp_7;
      #line 598 
      each = & mbx_out.type[j];
      #line 600 
      tmp_0 = k;
      #line 600 
      k ++;
      #line 600 
      each->hdr_prio_pfc_map[0] = *(cmd.rsp.arg + (unsigned long)tmp_0);
      #line 601 
      tmp_1 = k;
      #line 601 
      k ++;
      #line 601 
      each->hdr_prio_pfc_map[1] = *(cmd.rsp.arg + (unsigned long)tmp_1);
      #line 602 
      tmp_2 = k;
      #line 602 
      k ++;
      #line 602 
      each->prio_pg_map[0] = *(cmd.rsp.arg + (unsigned long)tmp_2);
      #line 603 
      tmp_3 = k;
      #line 603 
      k ++;
      #line 603 
      each->prio_pg_map[1] = *(cmd.rsp.arg + (unsigned long)tmp_3);
      #line 604 
      tmp_4 = k;
      #line 604 
      k ++;
      #line 604 
      each->pg_bw_map[0] = *(cmd.rsp.arg + (unsigned long)tmp_4);
      #line 605 
      tmp_5 = k;
      #line 605 
      k ++;
      #line 605 
      each->pg_bw_map[1] = *(cmd.rsp.arg + (unsigned long)tmp_5);
      #line 606 
      tmp_6 = k;
      #line 606 
      k ++;
      #line 606 
      each->pg_tsa_map[0] = *(cmd.rsp.arg + (unsigned long)tmp_6);
      #line 607 
      tmp_7 = k;
      #line 607 
      k ++;
      #line 607 
      each->pg_tsa_map[1] = *(cmd.rsp.arg + (unsigned long)tmp_7);
      #line 608 
      val = each->hdr_prio_pfc_map[0];
      #line 610 
      max_app = (int)qlcnic_dcb_get_num_app(adapter,val);
      #line 611 
      i = 0;
      #line 611 
      while (i < max_app) {
        #line 612 
        each->app[i] = *(cmd.rsp.arg + (unsigned long)(i + k));
        #line 611 
        i ++;
      }
      #line 614 
      size = 64;
      #line 615 
      memcpy((void *)p,(void *)(& each->hdr_prio_pfc_map[0]),(unsigned long)size);
      #line 616 
      p += (unsigned long)size;
      #line 617 
      if (j == 0) 
                  #line 618 
                  k = 18; else 
                               #line 620 
                               k = 34;
    }
    #line 597 
    j ++;
  }
  #line 622 
  out: 
       #line 622 
  ;
  #line 623 
  qlcnic_free_mbx_args(& cmd);
  #line 625 
  return err;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_83xx_dcb_get_cee_cfg(struct qlcnic_dcb *dcb)
{
  #line 630 
  int err;
  #line 632 
  err = qlcnic_dcb_query_cee_param(dcb,(char *)dcb->param,(unsigned char)0);
  #line 633 
  if (err != 0) 
                #line 634 
                return err;
  #line 636 
  qlcnic_dcb_data_cee_param_map(dcb->adapter);
  #line 638 
  return err;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_83xx_dcb_aen_handler(struct qlcnic_dcb *dcb, void *data)
{
  #line 643 
  u32 *val = (u32 *)data;
  #line 645 
  if ((int)test_and_set_bit(1L,& dcb->state) != 0) 
                                                   #line 646 
                                                   return;
  #line 648 
  if ((*val & 256U) != 0U) 
                           #line 649 
                           cif_set_bit_4(0L,& dcb->state); else 
                                                                #line 651 
                                                                cif_clear_bit_4(0L,& dcb->state);
  #line 653 
  cif_queue_delayed_work_0(dcb->wq,& dcb->aen_work,0UL);
  #line 654 
  return;
}

#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_fill_cee_tc_params(struct qlcnic_dcb_mbx_params *mbx, struct qlcnic_dcb_param *each, struct qlcnic_dcb_cee *type)
{
  #line 660 
  struct qlcnic_dcb_tc_cfg *tc_cfg;
  #line 661 
  u8 i;
  #line 661 
  u8 tc;
  #line 661 
  u8 pgid;
  #line 663 
  i = (unsigned char)0U;
  #line 663 
  while ((unsigned int)i <= 7U) {
    #line 664 
    tc = (unsigned char)((unsigned int)((unsigned char)(mbx->prio_tc_map >> (int)i * 3)) & 7U);
    #line 665 
    tc_cfg = & type->tc_cfg[(int)tc];
    #line 666 
    tc_cfg->valid = (_Bool)1;
    #line 667 
    tc_cfg->up_tc_map = (unsigned char)((int)tc_cfg->up_tc_map | (1 << (int)i));
    #line 669 
    if ((((each->hdr_prio_pfc_map[1] >> 24) >> (int)i) & 1U) != 0U && (int)type->pfc_mode_enable != 0) {
      #line 671 
      tc_cfg->prio_cfg[(int)i].valid = (_Bool)1;
      #line 672 
      tc_cfg->prio_cfg[(int)i].pfc_type = QLC_PFC_FULL;
    }
    #line 675 
    if ((unsigned int)i <= 3U) 
                               #line 676 
                               pgid = (unsigned char)(each->prio_pg_map[0] >> (int)i * 8); else 
                                                                    #line 678 
                                                                    pgid = (unsigned char)(each->prio_pg_map[1] >> (int)i * 8);
    #line 680 
    tc_cfg->pgid = pgid;
    #line 682 
    tc_cfg->prio_type = QLC_PRIO_LINK;
    #line 683 
    type->pg_cfg[(int)tc_cfg->pgid].prio_count = (u8)((int)type->pg_cfg[(int)tc_cfg->pgid].prio_count + 1);
    #line 663 
    i = (u8)((int)i + 1);
  }
  #line 685 
  return;
}

#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_fill_cee_pg_params(struct qlcnic_dcb_param *each, struct qlcnic_dcb_cee *type)
{
  #line 690 
  struct qlcnic_dcb_pg_cfg *pg_cfg;
  #line 691 
  u8 i;
  #line 691 
  u8 tsa;
  #line 691 
  u8 bw_per;
  #line 693 
  i = (unsigned char)0U;
  #line 693 
  while ((unsigned int)i <= 7U) {
    #line 694 
    pg_cfg = & type->pg_cfg[(int)i];
    #line 695 
    pg_cfg->valid = (_Bool)1;
    #line 697 
    if ((unsigned int)i <= 3U) {
      #line 698 
      bw_per = (unsigned char)(each->pg_bw_map[0] >> (int)i * 8);
      #line 699 
      tsa = (unsigned char)(each->pg_tsa_map[0] >> (int)i * 8);
    }
    else {
      #line 701 
      bw_per = (unsigned char)(each->pg_bw_map[1] >> (int)i * 8);
      #line 702 
      tsa = (unsigned char)(each->pg_tsa_map[1] >> (int)i * 8);
    }
    #line 705 
    pg_cfg->total_bw_percent = bw_per;
    #line 706 
    pg_cfg->tsa_type = tsa;
    #line 693 
    i = (u8)((int)i + 1);
  }
  #line 708 
  return;
}

#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_fill_cee_app_params(struct qlcnic_adapter *adapter, u8 idx, struct qlcnic_dcb_param *each, struct qlcnic_dcb_cee *type)
{
  #line 715 
  struct qlcnic_dcb_app *app;
  #line 716 
  u8 i;
  #line 716 
  u8 num_app;
  #line 716 
  u8 map;
  #line 716 
  u8 cnt;
  #line 717 
  struct dcb_app new_app;
  #line 719 
  num_app = qlcnic_dcb_get_num_app(adapter,each->hdr_prio_pfc_map[0]);
  #line 720 
  i = (unsigned char)0U;
  #line 720 
  while ((int)i < (int)num_app) {
    {
      #line 721 
      app = & type->app[(int)i];
      #line 722 
      app->valid = (_Bool)1;
      #line 725 
      app->selector = (enum qlcnic_dcb_selector)((each->app[(int)i] & 255U) + 4294967295U);
      #line 726 
      new_app.selector = (unsigned char)app->selector;
      #line 727 
      app->protocol = (unsigned short)(each->app[(int)i] >> 8);
      #line 728 
      new_app.protocol = app->protocol;
      #line 729 
      map = qlcnic_dcb_get_prio_map_app(adapter,each->app[(int)i]);
      #line 730 
      cnt = (unsigned char)qlcnic_dcb_prio_count((unsigned char)((int)map));
      #line 732 
      if ((unsigned int)cnt > 7U) 
                                  #line 733 
                                  cnt = (unsigned char)0U;
      #line 735 
      app->priority = cnt;
      #line 736 
      new_app.priority = cnt;
      #line 738 
      if ((unsigned int)idx == 1U && (adapter->netdev)->dcbnl_ops != (struct dcbnl_rtnl_ops *)0) 
        #line 739 
        dcb_setapp(adapter->netdev,& new_app);
    }
    #line 720 
    i = (u8)((int)i + 1);
  }
  #line 741 
  return;
}

#line 743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_map_cee_params(struct qlcnic_adapter *adapter, u8 idx)
{
  #line 745 
  struct qlcnic_dcb_mbx_params *mbx = (adapter->dcb)->param;
  #line 746 
  struct qlcnic_dcb_param *each = & mbx->type[(int)idx];
  #line 747 
  struct qlcnic_dcb_cfg *cfg = (adapter->dcb)->cfg;
  #line 748 
  struct qlcnic_dcb_cee *type = & cfg->type[(int)idx];
  #line 750 
  type->tc_param_valid = (_Bool)0;
  #line 751 
  type->pfc_mode_enable = (_Bool)0;
  #line 752 
  memset((void *)(& type->tc_cfg),0,608UL);
  #line 754 
  memset((void *)(& type->pg_cfg),0,32UL);
  #line 757 
  if ((unsigned int)qlcnic_dcb_pfc_hdr_valid(adapter,each->hdr_prio_pfc_map[0]) != 0U) 
    #line 757 
    if ((unsigned int)cfg->capability.max_pfc_tc != 0U) 
                                                        #line 759 
                                                        type->pfc_mode_enable = (_Bool)1;
  #line 761 
  if ((unsigned int)qlcnic_dcb_tsa_hdr_valid(adapter,each->hdr_prio_pfc_map[0]) != 0U) 
    #line 761 
    if ((unsigned int)cfg->capability.max_ets_tc != 0U) 
                                                        #line 763 
                                                        type->tc_param_valid = (_Bool)1;
  #line 765 
  qlcnic_dcb_fill_cee_tc_params(mbx,each,type);
  #line 766 
  qlcnic_dcb_fill_cee_pg_params(each,type);
  #line 767 
  qlcnic_dcb_fill_cee_app_params(adapter,(unsigned char)((int)idx),each,type);
  #line 768 
  return;
}

#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_data_cee_param_map(struct qlcnic_adapter *adapter)
{
  #line 772 
  int i;
  #line 774 
  i = 0;
  #line 774 
  while (i <= 2) {
    #line 775 
    qlcnic_dcb_map_cee_params(adapter,(unsigned char)((int)((unsigned char)i)));
    #line 774 
    i ++;
  }
  #line 777 
  dcbnl_cee_notify(adapter->netdev,78,26,0U,0U);
  #line 778 
  return;
}

#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_state(struct net_device *netdev)
{
  #line 782 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 784 
  return (u8)test_bit(0L,& (adapter->dcb)->state);
}

#line 787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_get_perm_hw_addr(struct net_device *netdev, u8 *addr)
{
  #line 789 
  memcpy((void *)addr,(void *)(& netdev->perm_addr),(unsigned long)netdev->addr_len);
  #line 790 
  return;
}

#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_get_pg_tc_cfg_tx(struct net_device *netdev, int tc, u8 *prio, u8 *pgid, u8 *bw_per, u8 *up_tc_map)
{
  #line 797 
  struct qlcnic_dcb_tc_cfg *tc_cfg;
  #line 797 
  struct qlcnic_dcb_tc_cfg *temp;
  #line 798 
  struct qlcnic_dcb_cee *type;
  #line 799 
  u8 i;
  #line 799 
  u8 cnt;
  #line 799 
  u8 pg;
  #line 796 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 801 
  type = & ((adapter->dcb)->cfg)->type[1];
  #line 802 
  *up_tc_map = ((unsigned char)0U);
  #line 802 
  *bw_per = ((unsigned char)0U);
  #line 802 
  *pgid = ((unsigned char)0U);
  #line 802 
  *prio = ((unsigned char)0U);
  #line 804 
  if (test_bit(0L,& (adapter->dcb)->state)) {
    #line 805 
    if (! type->tc_param_valid) 
                                #line 806 
                                return;
  }
  else 
       #line 806 
       return;
  #line 808 
  if ((unsigned int)tc > 7U) 
                             #line 809 
                             return;
  #line 811 
  tc_cfg = & type->tc_cfg[tc];
  #line 812 
  if (! tc_cfg->valid) 
                       #line 813 
                       return;
  #line 815 
  *pgid = tc_cfg->pgid;
  #line 816 
  *prio = (unsigned char)tc_cfg->prio_type;
  #line 817 
  *up_tc_map = tc_cfg->up_tc_map;
  #line 818 
  pg = *pgid;
  #line 820 
  i = (unsigned char)0U;
  #line 820 
  cnt = (unsigned char)0U;
  #line 820 
  while ((unsigned int)i <= 7U) {
    #line 821 
    temp = & type->tc_cfg[(int)i];
    #line 822 
    if ((int)temp->valid != 0 && (int)temp->pgid == (int)pg) 
                                                             #line 823 
                                                             cnt = (u8)((int)cnt + 1);
    #line 820 
    i = (u8)((int)i + 1);
  }
  #line 826 
  tc_cfg->bwg_percent = (unsigned char)(100 / (int)cnt);
  #line 827 
  *bw_per = tc_cfg->bwg_percent;
  #line 828 
  return;
}

#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_get_pg_bwg_cfg_tx(struct net_device *netdev, int pgid, u8 *bw_pct)
{
  #line 834 
  struct qlcnic_dcb_pg_cfg *pgcfg;
  #line 835 
  struct qlcnic_dcb_cee *type;
  #line 833 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 837 
  *bw_pct = (unsigned char)0U;
  #line 838 
  type = & ((adapter->dcb)->cfg)->type[1];
  #line 840 
  if (test_bit(0L,& (adapter->dcb)->state)) {
    #line 841 
    if (! type->tc_param_valid) 
                                #line 842 
                                return;
  }
  else 
       #line 842 
       return;
  #line 844 
  if ((unsigned int)pgid > 7U) 
                               #line 845 
                               return;
  #line 847 
  pgcfg = & type->pg_cfg[pgid];
  #line 848 
  if (! pgcfg->valid) 
                      #line 849 
                      return;
  #line 851 
  *bw_pct = pgcfg->total_bw_percent;
  #line 852 
  return;
}

#line 854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_get_pfc_cfg(struct net_device *netdev, int prio, u8 *setting)
{
  #line 858 
  struct qlcnic_dcb_tc_cfg *tc_cfg;
  #line 860 
  struct qlcnic_dcb_cee *type;
  #line 861 
  u8 i;
  #line 857 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 859 
  u8 val = (unsigned char)(1 << prio);
  #line 863 
  *setting = (unsigned char)0U;
  #line 864 
  type = & ((adapter->dcb)->cfg)->type[1];
  #line 866 
  if (test_bit(0L,& (adapter->dcb)->state)) {
    #line 867 
    if (! type->pfc_mode_enable) 
                                 #line 868 
                                 return;
  }
  else 
       #line 868 
       return;
  #line 870 
  i = (unsigned char)0U;
  #line 870 
  while ((unsigned int)i <= 7U) {
    #line 871 
    tc_cfg = & type->tc_cfg[(int)i];
    #line 872 
    if (! tc_cfg->valid) 
                         #line 873 
                         goto __Cont;
    #line 875 
    if ((unsigned int)((int)tc_cfg->up_tc_map & (int)val) != 0U && (int)tc_cfg->prio_cfg[prio].valid != 0) 
      #line 876 
      *setting = (unsigned char)tc_cfg->prio_cfg[prio].pfc_type;
    #line 870 
    __Cont: 
            #line 870 
    i = (u8)((int)i + 1);
  }
  #line 878 
  return;
}

#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_capability(struct net_device *netdev, int capid, u8 *cap)
{
  #line 883 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 885 
  if (! test_bit(0L,& (adapter->dcb)->state)) 
                                              #line 886 
                                              return (unsigned char)1U;
  #line 888 
  switch (capid) {
    #line 889 
    case 2: 
            #line 889 
    ;
    #line 890 
    case 4: 
            #line 890 
    ;
    #line 891 
    case 3: 
            #line 891 
    ;
    #line 892 
    case 7: 
            #line 892 
    ;
    #line 893 
    *cap = (unsigned char)1U;
    #line 894 
    break;
    #line 895 
    case 5: 
            #line 895 
    ;
    #line 896 
    case 6: 
            #line 896 
    ;
    #line 897 
    *cap = (unsigned char)128U;
    #line 898 
    break;
    #line 899 
    case 9: 
            #line 899 
    ;
    #line 900 
    *cap = ((adapter->dcb)->cfg)->capability.dcb_capability;
    #line 901 
    break;
    #line 902 
    default: 
             #line 902 
    ;
    #line 903 
    *cap = (unsigned char)0U;
  }
  #line 906 
  return (unsigned char)0U;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_get_num_tcs(struct net_device *netdev, int attr, u8 *num)
{
  #line 911 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 912 
  struct qlcnic_dcb_cfg *cfg = (adapter->dcb)->cfg;
  #line 914 
  if (! test_bit(0L,& (adapter->dcb)->state)) 
                                              #line 915 
                                              return -22;
  #line 917 
  switch (attr) {
    #line 918 
    case 2: 
            #line 918 
    ;
    #line 919 
    *num = cfg->capability.max_ets_tc;
    #line 920 
    return 0;
    #line 921 
    case 3: 
            #line 921 
    ;
    #line 922 
    *num = cfg->capability.max_pfc_tc;
    #line 923 
    return 0;
    #line 924 
    default: 
             #line 924 
    ;
    #line 925 
    return -22;
  }
}

#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_get_app(struct net_device *netdev, u8 idtype, u16 id)
{
  #line 931 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 932 
  struct dcb_app app = {.selector = idtype, .priority = (unsigned char)0, .protocol = id};
  #line 937 
  if (! test_bit(0L,& (adapter->dcb)->state)) 
                                              #line 938 
                                              return -22;
  #line 940 
  return (int)dcb_getapp(netdev,& app);
}

#line 943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_pfc_state(struct net_device *netdev)
{
  #line 945 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 946 
  struct qlcnic_dcb *dcb = adapter->dcb;
  #line 948 
  if (! test_bit(0L,& dcb->state)) 
                                   #line 949 
                                   return (unsigned char)0U;
  #line 951 
  return (unsigned char)(dcb->cfg)->type[1].pfc_mode_enable;
}

#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_dcbx(struct net_device *netdev)
{
  #line 956 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 957 
  struct qlcnic_dcb_cfg *cfg = (adapter->dcb)->cfg;
  #line 959 
  if (! test_bit(0L,& (adapter->dcb)->state)) 
                                              #line 960 
                                              return (unsigned char)0U;
  #line 962 
  return cfg->capability.dcb_capability;
}

#line 965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_feat_cfg(struct net_device *netdev, int fid, u8 *flag)
{
  #line 968 
  struct qlcnic_dcb_cee *type;
  #line 967 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 970 
  if (! test_bit(0L,& (adapter->dcb)->state)) 
                                              #line 971 
                                              return (unsigned char)1U;
  #line 973 
  type = & ((adapter->dcb)->cfg)->type[1];
  #line 974 
  *flag = (unsigned char)0U;
  #line 976 
  switch (fid) {
    #line 977 
    case 2: 
            #line 977 
    ;
    #line 978 
    if ((int)type->tc_param_valid != 0) 
                                        #line 979 
                                        *flag = (unsigned char)((unsigned int)*flag | 2U); else 
                                                                    #line 981 
                                                                    *flag = (unsigned char)((unsigned int)*flag | 1U);
    #line 982 
    break;
    #line 983 
    case 3: 
            #line 983 
    ;
    #line 984 
    if ((int)type->pfc_mode_enable != 0) {
      #line 985 
      if (type->tc_cfg[0].prio_cfg[0].pfc_type != (unsigned int)QLC_PFC_DISABLED) 
        #line 986 
        *flag = (unsigned char)((unsigned int)*flag | 2U);
    }
    else 
         #line 988 
         *flag = (unsigned char)((unsigned int)*flag | 1U);
    #line 990 
    break;
    #line 991 
    case 4: 
            #line 991 
    ;
    #line 992 
    *flag = (unsigned char)((unsigned int)*flag | 2U);
    #line 993 
    break;
    #line 994 
    default: 
             #line 994 
    ;
    #line 995 
    netdev_err(netdev,(char *)"Invalid Feature ID %d\n",fid);
    #line 996 
    return (unsigned char)1U;
  }
  #line 999 
  return (unsigned char)0U;
}

#line 1003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static void qlcnic_dcb_get_pg_tc_cfg_rx(struct net_device *netdev, int prio, u8 *prio_type, u8 *pgid, u8 *bw_pct, u8 *up_map)
{
  #line 1006 
  *up_map = ((unsigned char)0U);
  #line 1006 
  *bw_pct = ((unsigned char)0U);
  #line 1006 
  *pgid = ((unsigned char)0U);
  #line 1006 
  *prio_type = ((unsigned char)0U);
  #line 1007 
  return;
}

#line 1010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static void qlcnic_dcb_get_pg_bwg_cfg_rx(struct net_device *netdev, int pgid, u8 *bw_pct)
{
  #line 1012 
  *bw_pct = (unsigned char)0U;
  #line 1013 
  return;
}

#line 1015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_peer_app_info(struct net_device *netdev, struct dcb_peer_app_info *info, u16 *app_count)
{
  #line 1020 
  struct qlcnic_dcb_cee *peer;
  #line 1021 
  int i;
  #line 1019 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1023 
  memset((void *)info,0,2UL);
  #line 1024 
  *app_count = (unsigned short)0U;
  #line 1026 
  if (! test_bit(0L,& (adapter->dcb)->state)) 
                                              #line 1027 
                                              return 0;
  #line 1029 
  peer = & ((adapter->dcb)->cfg)->type[2];
  #line 1031 
  i = 0;
  #line 1031 
  while (i <= 7) {
    #line 1032 
    if ((int)peer->app[i].valid != 0) 
                                      #line 1033 
                                      *app_count = (u16)((int)*app_count + 1);
    #line 1031 
    i ++;
  }
  #line 1036 
  return 0;
}

#line 1039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_peer_app_table(struct net_device *netdev, struct dcb_app *table)
{
  #line 1043 
  struct qlcnic_dcb_cee *peer;
  #line 1044 
  struct qlcnic_dcb_app *app;
  #line 1045 
  int i;
  #line 1045 
  int j;
  #line 1042 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1047 
  if (! test_bit(0L,& (adapter->dcb)->state)) 
                                              #line 1048 
                                              return 0;
  #line 1050 
  peer = & ((adapter->dcb)->cfg)->type[2];
  #line 1052 
  i = 0;
  #line 1052 
  j = 0;
  #line 1052 
  while (i <= 7) {
    {
      #line 1059 
      int tmp_1;
      #line 1053 
      app = & peer->app[i];
      #line 1054 
      if (! app->valid) 
                        #line 1055 
                        goto __Cont;
      #line 1057 
      (table + (unsigned long)j)->selector = (unsigned char)app->selector;
      #line 1058 
      (table + (unsigned long)j)->priority = app->priority;
      #line 1059 
      tmp_1 = j;
      #line 1059 
      j ++;
      #line 1059 
      (table + (unsigned long)tmp_1)->protocol = app->protocol;
    }
    #line 1052 
    __Cont: 
            #line 1052 
    i ++;
  }
  #line 1062 
  return 0;
}

#line 1065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_cee_peer_get_pg(struct net_device *netdev, struct cee_pg *pg)
{
  #line 1069 
  struct qlcnic_dcb_cee *peer;
  #line 1070 
  u8 i;
  #line 1070 
  u8 j;
  #line 1070 
  u8 k;
  #line 1070 
  u8 map;
  #line 1068 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1072 
  if (! test_bit(0L,& (adapter->dcb)->state)) 
                                              #line 1073 
                                              return 0;
  #line 1075 
  peer = & ((adapter->dcb)->cfg)->type[2];
  #line 1077 
  i = (unsigned char)0U;
  #line 1077 
  j = (unsigned char)0U;
  #line 1077 
  while ((unsigned int)i <= 7U) {
    #line 1078 
    if (! peer->pg_cfg[(int)i].valid) 
                                      #line 1079 
                                      goto __Cont;
    #line 1081 
    pg->pg_bw[(int)j] = peer->pg_cfg[(int)i].total_bw_percent;
    #line 1083 
    k = (unsigned char)0U;
    #line 1083 
    while ((unsigned int)k <= 7U) {
      #line 1084 
      if ((int)peer->tc_cfg[(int)i].valid != 0 && (int)peer->tc_cfg[(int)i].pgid == (int)i) {
        #line 1087 
        u8 tmp_1;
        #line 1086 
        map = peer->tc_cfg[(int)i].up_tc_map;
        #line 1087 
        tmp_1 = j;
        #line 1087 
        j = (u8)((int)j + 1);
        #line 1087 
        pg->prio_pg[(int)tmp_1] = map;
        #line 1088 
        break;
      }
      #line 1083 
      k = (u8)((int)k + 1);
    }
    #line 1077 
    __Cont: 
            #line 1077 
    i = (u8)((int)i + 1);
  }
  #line 1093 
  return 0;
}

#line 1096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_cee_peer_get_pfc(struct net_device *netdev, struct cee_pfc *pfc)
{
  #line 1101 
  struct qlcnic_dcb_tc_cfg *tc;
  #line 1102 
  struct qlcnic_dcb_cee *peer;
  #line 1103 
  u8 i;
  #line 1103 
  u8 setting;
  #line 1103 
  u8 prio;
  #line 1099 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1100 
  struct qlcnic_dcb_cfg *cfg = (adapter->dcb)->cfg;
  #line 1105 
  pfc->pfc_en = (unsigned char)0U;
  #line 1107 
  if (! test_bit(0L,& (adapter->dcb)->state)) 
                                              #line 1108 
                                              return 0;
  #line 1110 
  peer = & cfg->type[2];
  #line 1112 
  i = (unsigned char)0U;
  #line 1112 
  while ((unsigned int)i <= 7U) {
    {
      #line 1113 
      tc = & peer->tc_cfg[(int)i];
      #line 1114 
      prio = (unsigned char)qlcnic_dcb_prio_count((unsigned char)((int)tc->up_tc_map));
      #line 1116 
      setting = (unsigned char)0U;
      #line 1117 
      qlcnic_dcb_get_pfc_cfg(netdev,(int)prio,& setting);
      #line 1118 
      if ((unsigned int)setting != 0U) 
                                       #line 1119 
                                       pfc->pfc_en = (unsigned char)((int)pfc->pfc_en | (1 << (int)i));
    }
    #line 1112 
    i = (u8)((int)i + 1);
  }
  #line 1122 
  pfc->tcs_supported = cfg->capability.max_pfc_tc;
  #line 1124 
  return 0;
}

#line 1127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static struct dcbnl_rtnl_ops qlcnic_dcbnl_ops = {.getstate = & qlcnic_dcb_get_state, .getpermhwaddr = & qlcnic_dcb_get_perm_hw_addr, .getpgtccfgtx = & qlcnic_dcb_get_pg_tc_cfg_tx, .getpgbwgcfgtx = & qlcnic_dcb_get_pg_bwg_cfg_tx, .getpgtccfgrx = & qlcnic_dcb_get_pg_tc_cfg_rx, .getpgbwgcfgrx = & qlcnic_dcb_get_pg_bwg_cfg_rx, .getpfccfg = & qlcnic_dcb_get_pfc_cfg, .getcap = & qlcnic_dcb_get_capability, .getnumtcs = & qlcnic_dcb_get_num_tcs, .getpfcstate = & qlcnic_dcb_get_pfc_state, .getapp = & qlcnic_dcb_get_app, .getfeatcfg = & qlcnic_dcb_get_feat_cfg, .getdcbx = & qlcnic_dcb_get_dcbx, .peer_getappinfo = & qlcnic_dcb_peer_app_info, .peer_getapptable = & qlcnic_dcb_peer_app_table, .cee_peer_getpg = & qlcnic_dcb_cee_peer_get_pg, .cee_peer_getpfc = & qlcnic_dcb_cee_peer_get_pfc};
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static void cif_set_bit_4(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static void cif_clear_bit_4(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static bool cif_queue_delayed_work_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 317 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 494  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_dcb.i.aux"
static void *kzalloc_4(size_t size, gfp_t flags)
{
  #line 497 
  return ldv_kzalloc(size,flags);
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 487 
int sscanf(char *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_2(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_6902 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_2(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_2(new,head->prev,head);
  #line 94 
  return;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void cif_spin_lock_tx_clean_lock_of_qlcnic_host_tx_ring(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void cif_spin_unlock_tx_clean_lock_of_qlcnic_host_tx_ring(spinlock_t *lock);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void *cif_vzalloc_1(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void cif_vfree_0(void *addr);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 473  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void *kcalloc_2(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  #line 61 
  dma_unmap_page_attrs(& hwdev->dev,dma_address,size,(enum dma_data_direction)direction,0UL);
  #line 62 
  return;
}

#line 3617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 847  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 1589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_load_firmware(struct qlcnic_adapter *adapter);
#line 1590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_need_fw_reset(struct qlcnic_adapter *adapter);
#line 1591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_request_firmware(struct qlcnic_adapter *adapter);
#line 1592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_release_firmware(struct qlcnic_adapter *adapter);
#line 1593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_pinit_from_rom(struct qlcnic_adapter *adapter);
#line 1594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_setup_idc_param(struct qlcnic_adapter *adapter);
#line 1595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_check_flash_fw_ver(struct qlcnic_adapter *adapter);
#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_rom_fast_read_words(struct qlcnic_adapter *adapter, int addr, u8 *bytes, size_t size);
#line 1600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_alloc_sw_resources(struct qlcnic_adapter *adapter);
#line 1601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_free_sw_resources(struct qlcnic_adapter *adapter);
#line 1611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_reset_rx_buffers_list(struct qlcnic_adapter *adapter);
#line 1612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_release_rx_buffers(struct qlcnic_adapter *adapter);
#line 1613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_release_tx_buffers(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring);
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_check_fw_status(struct qlcnic_adapter *adapter);
#line 2168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_check_multi_tx(struct qlcnic_adapter *adapter)
{
  #line 2170 
  return test_bit(9L,& adapter->state);
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static unsigned int crb_addr_xform[60U];
#line 26 
#line 1066 
static int qlcnic_check_fw_hearbeat(struct qlcnic_adapter *adapter);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static void crb_addr_transform_setup(void)
{
  #line 30 
  crb_addr_xform[49] = 1078984704U;
  #line 31 
  crb_addr_xform[40] = 1097859072U;
  #line 32 
  crb_addr_xform[5] = 218103808U;
  #line 33 
  crb_addr_xform[11] = 238026752U;
  #line 34 
  crb_addr_xform[10] = 236978176U;
  #line 35 
  crb_addr_xform[9] = 235929600U;
  #line 36 
  crb_addr_xform[8] = 234881024U;
  #line 37 
  crb_addr_xform[16] = 1883242496U;
  #line 38 
  crb_addr_xform[15] = 1882193920U;
  #line 39 
  crb_addr_xform[14] = 1881145344U;
  #line 40 
  crb_addr_xform[13] = 1880096768U;
  #line 41 
  crb_addr_xform[48] = 1894776832U;
  #line 42 
  crb_addr_xform[47] = 148897792U;
  #line 43 
  crb_addr_xform[46] = 147849216U;
  #line 44 
  crb_addr_xform[45] = 1891631104U;
  #line 45 
  crb_addr_xform[44] = 1890582528U;
  #line 46 
  crb_addr_xform[43] = 1889533952U;
  #line 47 
  crb_addr_xform[42] = 143654912U;
  #line 48 
  crb_addr_xform[53] = 142606336U;
  #line 49 
  crb_addr_xform[51] = 1108344832U;
  #line 50 
  crb_addr_xform[29] = 1090519040U;
  #line 51 
  crb_addr_xform[7] = 241172480U;
  #line 52 
  crb_addr_xform[12] = 1879048192U;
  #line 53 
  crb_addr_xform[22] = 876609536U;
  #line 54 
  crb_addr_xform[21] = 877658112U;
  #line 55 
  crb_addr_xform[20] = 875560960U;
  #line 56 
  crb_addr_xform[19] = 874512384U;
  #line 57 
  crb_addr_xform[18] = 873463808U;
  #line 58 
  crb_addr_xform[17] = 872415232U;
  #line 59 
  crb_addr_xform[28] = 1010827264U;
  #line 60 
  crb_addr_xform[27] = 1011875840U;
  #line 61 
  crb_addr_xform[26] = 1009778688U;
  #line 62 
  crb_addr_xform[25] = 1008730112U;
  #line 63 
  crb_addr_xform[24] = 1007681536U;
  #line 64 
  crb_addr_xform[23] = 1006632960U;
  #line 65 
  crb_addr_xform[1] = 1999634432U;
  #line 66 
  crb_addr_xform[0] = 698351616U;
  #line 67 
  crb_addr_xform[6] = 454033408U;
  #line 68 
  crb_addr_xform[50] = 1107296256U;
  #line 69 
  crb_addr_xform[31] = 219152384U;
  #line 70 
  crb_addr_xform[2] = 693108736U;
  #line 71 
  crb_addr_xform[3] = 709885952U;
  #line 72 
  crb_addr_xform[37] = 209715200U;
  #line 73 
  crb_addr_xform[36] = 208666624U;
  #line 74 
  crb_addr_xform[35] = 207618048U;
  #line 75 
  crb_addr_xform[34] = 1096810496U;
  #line 76 
  crb_addr_xform[39] = 1972371456U;
  #line 77 
  crb_addr_xform[38] = 1971322880U;
  #line 78 
  crb_addr_xform[58] = 1904214016U;
  #line 79 
  crb_addr_xform[56] = 1080033280U;
  #line 80 
  crb_addr_xform[59] = 428867584U;
  #line 81 
  return;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_release_rx_buffers(struct qlcnic_adapter *adapter)
{
  #line 85 
  struct qlcnic_recv_context *recv_ctx;
  #line 86 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 87 
  struct qlcnic_rx_buffer *rx_buf;
  #line 88 
  int i;
  #line 88 
  int ring;
  #line 90 
  recv_ctx = adapter->recv_ctx;
  #line 91 
  ring = 0;
  #line 91 
  while ((int)adapter->max_rds_rings > ring) {
    #line 92 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 93 
    i = 0;
    #line 93 
    while (rds_ring->num_desc > (unsigned int)i) {
      #line 94 
      rx_buf = rds_ring->rx_buf_arr + (unsigned long)i;
      #line 95 
      if (rx_buf->skb == (struct sk_buff *)0) 
                                              #line 96 
                                              goto __Cont;
      #line 98 
      pci_unmap_single(adapter->pdev,rx_buf->dma,(unsigned long)rds_ring->dma_size,2);
      #line 103 
      dev_kfree_skb_any(rx_buf->skb);
      #line 93 
      __Cont: 
              #line 93 
      i ++;
    }
    #line 91 
    ring ++;
  }
  #line 106 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_reset_rx_buffers_list(struct qlcnic_adapter *adapter)
{
  #line 110 
  struct qlcnic_recv_context *recv_ctx;
  #line 111 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 112 
  struct qlcnic_rx_buffer *rx_buf;
  #line 113 
  int i;
  #line 113 
  int ring;
  #line 115 
  recv_ctx = adapter->recv_ctx;
  #line 116 
  ring = 0;
  #line 116 
  while ((int)adapter->max_rds_rings > ring) {
    #line 117 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 119 
    INIT_LIST_HEAD_3(& rds_ring->free_list);
    #line 121 
    rx_buf = rds_ring->rx_buf_arr;
    #line 122 
    i = 0;
    #line 122 
    while (rds_ring->num_desc > (unsigned int)i) {
      #line 123 
      list_add_tail_2(& rx_buf->list,& rds_ring->free_list);
      #line 125 
      rx_buf ++;
      #line 122 
      i ++;
    }
    #line 116 
    ring ++;
  }
  #line 128 
  return;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_release_tx_buffers(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 133 
  struct qlcnic_cmd_buffer *cmd_buf;
  #line 134 
  struct qlcnic_skb_frag *buffrag;
  #line 135 
  int i;
  #line 135 
  int j;
  #line 137 
  cif_spin_lock_tx_clean_lock_of_qlcnic_host_tx_ring(& tx_ring->tx_clean_lock);
  #line 139 
  cmd_buf = tx_ring->cmd_buf_arr;
  #line 140 
  i = 0;
  #line 140 
  while (tx_ring->num_desc > (unsigned int)i) {
    #line 141 
    buffrag = (struct qlcnic_skb_frag *)(& cmd_buf->frag_array);
    #line 142 
    if (buffrag->dma != 0ULL) {
      #line 143 
      pci_unmap_single(adapter->pdev,buffrag->dma,(unsigned long)buffrag->length,1);
      #line 145 
      buffrag->dma = 0ULL;
    }
    #line 147 
    j = 1;
    #line 147 
    while (cmd_buf->frag_count > (unsigned int)j) {
      #line 148 
      buffrag ++;
      #line 149 
      if (buffrag->dma != 0ULL) {
        #line 150 
        pci_unmap_page(adapter->pdev,buffrag->dma,(unsigned long)buffrag->length,1);
        #line 153 
        buffrag->dma = 0ULL;
      }
      #line 147 
      j ++;
    }
    #line 156 
    if (cmd_buf->skb != (struct sk_buff *)0) {
      #line 157 
      dev_kfree_skb_any(cmd_buf->skb);
      #line 158 
      cmd_buf->skb = (struct sk_buff *)0;
    }
    #line 160 
    cmd_buf ++;
    #line 140 
    i ++;
  }
  #line 163 
  cif_spin_unlock_tx_clean_lock_of_qlcnic_host_tx_ring(& tx_ring->tx_clean_lock);
  #line 164 
  return;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_free_sw_resources(struct qlcnic_adapter *adapter)
{
  #line 168 
  struct qlcnic_recv_context *recv_ctx;
  #line 169 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 170 
  int ring;
  #line 172 
  recv_ctx = adapter->recv_ctx;
  #line 174 
  if (recv_ctx->rds_rings == (struct qlcnic_host_rds_ring *)0) 
                                                               #line 175 
                                                               return;
  #line 177 
  ring = 0;
  #line 177 
  while ((int)adapter->max_rds_rings > ring) {
    #line 178 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 179 
    cif_vfree_0((void *)rds_ring->rx_buf_arr);
    #line 180 
    rds_ring->rx_buf_arr = (struct qlcnic_rx_buffer *)0;
    #line 177 
    ring ++;
  }
  #line 182 
  kfree((void *)recv_ctx->rds_rings);
  #line 183 
  return;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_alloc_sw_resources(struct qlcnic_adapter *adapter)
{
  #line 187 
  struct qlcnic_recv_context *recv_ctx;
  #line 188 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 189 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 190 
  struct qlcnic_rx_buffer *rx_buf;
  #line 191 
  int ring;
  #line 191 
  int i;
  #line 193 
  recv_ctx = adapter->recv_ctx;
  #line 195 
  rds_ring = (struct qlcnic_host_rds_ring *)kcalloc_2((unsigned long)adapter->max_rds_rings,4096UL,3264U);
  #line 197 
  if (rds_ring == (struct qlcnic_host_rds_ring *)0) 
                                                    #line 198 
                                                    goto err_out;
  #line 200 
  recv_ctx->rds_rings = rds_ring;
  #line 202 
  ring = 0;
  #line 202 
  while ((int)adapter->max_rds_rings > ring) {
    #line 203 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 204 
    switch (ring) {
      #line 205 
      case 0: 
              #line 205 
      ;
      #line 206 
      rds_ring->num_desc = (unsigned int)adapter->num_rxd;
      #line 207 
      rds_ring->dma_size = 1532U;
      #line 208 
      rds_ring->skb_size = rds_ring->dma_size;
      #line 209 
      break;
      #line 211 
      case 1: 
              #line 211 
      ;
      #line 212 
      rds_ring->num_desc = (unsigned int)adapter->num_jumbo_rxd;
      #line 213 
      rds_ring->dma_size = 9632U;
      #line 216 
      if (((adapter->ahw)->capabilities & 1024U) != 0U) 
                                                        #line 218 
                                                        rds_ring->dma_size += 2048U;
      #line 220 
      rds_ring->skb_size = rds_ring->dma_size;
      #line 222 
      break;
    }
    #line 224 
    rds_ring->rx_buf_arr = (struct qlcnic_rx_buffer *)cif_vzalloc_1((unsigned long)rds_ring->num_desc * 40UL);
    #line 225 
    if (rds_ring->rx_buf_arr == (struct qlcnic_rx_buffer *)0) 
                                                              #line 226 
                                                              goto err_out;
    #line 228 
    INIT_LIST_HEAD_3(& rds_ring->free_list);
    #line 233 
    rx_buf = rds_ring->rx_buf_arr;
    #line 234 
    i = 0;
    #line 234 
    while (rds_ring->num_desc > (unsigned int)i) {
      #line 235 
      list_add_tail_2(& rx_buf->list,& rds_ring->free_list);
      #line 237 
      rx_buf->ref_handle = (unsigned short)i;
      #line 238 
      rx_buf ++;
      #line 234 
      i ++;
    }
    #line 240 
    spinlock_check(& rds_ring->lock);
    {
      #line 240 
      struct lock_class_key __key;
      #line 240 
      __raw_spin_lock_init(& rds_ring->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&rds_ring->lock)->rlock",& __key);
    }
    #line 202 
    ring ++;
  }
  #line 243 
  ring = 0;
  #line 243 
  while ((int)adapter->drv_sds_rings > ring) {
    {
      #line 244 
      sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
      #line 245 
      sds_ring->irq = (int)(adapter->msix_entries + (unsigned long)ring)->vector;
      #line 246 
      sds_ring->adapter = adapter;
      #line 247 
      sds_ring->num_desc = (unsigned int)adapter->num_rxd;
      #line 248 
      if ((int)qlcnic_82xx_check(adapter) != 0) {
        #line 249 
        if ((int)qlcnic_check_multi_tx(adapter) != 0) 
          #line 249 
          if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
                                                             #line 251 
                                                             sds_ring->tx_ring = adapter->tx_ring + (unsigned long)ring; else 
                                                                    #line 253 
                                                                    sds_ring->tx_ring = adapter->tx_ring;
        else 
             #line 253 
             sds_ring->tx_ring = adapter->tx_ring;
      }
      #line 255 
      i = 0;
      #line 255 
      while (i <= 2) {
        #line 256 
        INIT_LIST_HEAD_3(& sds_ring->free_list[i]);
        #line 255 
        i ++;
      }
    }
    #line 243 
    ring ++;
  }
  #line 259 
  return 0;
  #line 261 
  err_out: 
           #line 261 
  ;
  #line 262 
  qlcnic_free_sw_resources(adapter);
  #line 263 
  return -12;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u32 qlcnic_decode_crb_addr(u32 addr)
{
  #line 272 
  int i;
  #line 273 
  u32 base_addr;
  #line 273 
  u32 offset;
  #line 273 
  u32 pci_base;
  #line 275 
  crb_addr_transform_setup();
  #line 277 
  pci_base = 4294967295U;
  #line 278 
  base_addr = addr & 4293918720U;
  #line 279 
  offset = addr & 1048575U;
  #line 281 
  i = 0;
  #line 281 
  while (i <= 59) {
    #line 282 
    if (crb_addr_xform[i] == base_addr) {
      #line 283 
      pci_base = (unsigned int)(i << 20);
      #line 284 
      break;
    }
    #line 281 
    i ++;
  }
  #line 287 
  if (pci_base == 4294967295U) 
                               #line 288 
                               return pci_base; else 
                                                     #line 290 
                                                     return pci_base + offset;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_wait_rom_done(struct qlcnic_adapter *adapter)
{
  #line 297 
  long timeout = 0L;
  #line 298 
  long done = 0L;
  #line 299 
  int err = 0;
  #line 301 
  ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c",301,0);
  #line 301 
  _cond_resched();
  #line 302 
  while (done == 0L) {
    #line 303 
    done = (long)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,154140676UL,& err);
    #line 304 
    done &= 2L;
    #line 305 
    timeout ++;
    #line 305 
    if (timeout > 99L) {
      #line 306 
      _dev_err(& (adapter->pdev)->dev,(char *)"Timeout reached  waiting for rom done");
      #line 308 
      return -5;
    }
    #line 310 
    __const_udelay(4295UL);
  }
  #line 312 
  return 0;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int do_rom_fast_read(struct qlcnic_adapter *adapter, u32 addr, u32 *valp)
{
  #line 318 
  int err = 0;
  #line 320 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206216UL,addr);
  #line 321 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206228UL,0U);
  #line 322 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206224UL,3U);
  #line 323 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206212UL,11U);
  #line 324 
  if (qlcnic_wait_rom_done(adapter) != 0) {
    #line 325 
    _dev_err(& (adapter->pdev)->dev,(char *)"Error waiting for rom done\n");
    #line 326 
    return -5;
  }
  #line 329 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206224UL,0U);
  #line 330 
  __const_udelay(42950UL);
  #line 331 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206228UL,0U);
  #line 333 
  *valp = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,154206232UL,& err);
  #line 334 
  if (err == -5) 
                 #line 335 
                 return err;
  #line 336 
  return 0;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int do_rom_fast_read_words(struct qlcnic_adapter *adapter, int addr, u8 *bytes, size_t size)
{
  #line 342 
  int addridx;
  #line 343 
  int ret = 0;
  #line 345 
  addridx = addr;
  #line 345 
  while ((unsigned long)addridx < (unsigned long)addr + size) {
    {
      #line 346 
      int v;
      #line 347 
      ret = do_rom_fast_read(adapter,(unsigned int)addridx,(u32 *)(& v));
      #line 348 
      if (ret != 0) 
                    #line 349 
                    break;
      #line 350 
      *((__le32 *)bytes) = (unsigned int)v;
      #line 351 
      bytes += 4U;
    }
    #line 345 
    addridx += 4;
  }
  #line 354 
  return ret;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_rom_fast_read_words(struct qlcnic_adapter *adapter, int addr, u8 *bytes, size_t size)
{
  #line 361 
  int ret;
  #line 363 
  ret = qlcnic_pcie_sem_lock(adapter,2,136323328U);
  #line 364 
  if (ret < 0) 
               #line 365 
               return ret;
  #line 367 
  ret = do_rom_fast_read_words(adapter,addr,bytes,size);
  #line 369 
  qlcnic_pcie_sem_unlock(adapter,2);
  #line 370 
  return ret;
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_rom_fast_read(struct qlcnic_adapter *adapter, u32 addr, u32 *valp)
{
  #line 375 
  int ret;
  #line 377 
  if (qlcnic_pcie_sem_lock(adapter,2,136323328U) != 0) 
                                                       #line 378 
                                                       return -5;
  #line 380 
  ret = do_rom_fast_read(adapter,addr,valp);
  #line 381 
  qlcnic_pcie_sem_unlock(adapter,2);
  #line 382 
  return ret;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_pinit_from_rom(struct qlcnic_adapter *adapter)
{
  #line 387 
  int addr;
  #line 388 
  int i;
  #line 388 
  int n;
  #line 388 
  int init_delay;
  #line 389 
  struct crb_addr_pair *buf;
  #line 390 
  unsigned int offset;
  #line 391 
  u32 off;
  #line 391 
  u32 val;
  #line 387 
  int err = 0;
  #line 392 
  struct pci_dev *pdev = adapter->pdev;
  #line 394 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 16U));
  #line 395 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 17U));
  #line 399 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092112UL,0U);
  #line 400 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092116UL,0U);
  #line 401 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092120UL,0U);
  #line 402 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092124UL,0U);
  #line 403 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092128UL,0U);
  #line 404 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092132UL,0U);
  #line 407 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106954816UL,255U);
  #line 409 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107413504UL,0U);
  #line 411 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107479040UL,0U);
  #line 413 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107544576UL,0U);
  #line 415 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107610112UL,0U);
  #line 417 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107675648UL,0U);
  #line 420 
  val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,105910272UL,& err);
  #line 421 
  if (err == -5) 
                 #line 422 
                 return err;
  #line 423 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,105910272UL,val & 4294967294U);
  #line 426 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,133174016UL,1U);
  #line 429 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606336UL,0U);
  #line 430 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606344UL,0U);
  #line 431 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606352UL,0U);
  #line 432 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606360UL,0U);
  #line 433 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606592UL,0U);
  #line 434 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606848UL,0U);
  #line 436 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,118489148UL,1U);
  #line 437 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,119537724UL,1U);
  #line 438 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,120586300UL,1U);
  #line 439 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,121634876UL,1U);
  #line 440 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,116391996UL,1U);
  #line 441 
  msleep(20U);
  #line 443 
  qlcnic_pcie_sem_unlock(adapter,2);
  #line 445 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154140680UL,4278190079U);
  #line 448 
  if (qlcnic_rom_fast_read(adapter,0U,(u32 *)(& n)) != 0) 
                                                          #line 448 
                                                          goto _LOR;
  else 
    #line 448 
    if (n != -889271554) 
                         #line 448 
                         goto _LOR;
    else {
      #line 448 
      if (qlcnic_rom_fast_read(adapter,4U,(u32 *)(& n)) != 0) {
        #line 448 
        _LOR: {
                #line 450 
                _dev_err(& pdev->dev,(char *)"ERROR Reading crb_init area: val:%x\n",n);
                #line 451 
                return -5;
              }
      }
    }
  #line 453 
  offset = (unsigned int)n & 65535U;
  #line 454 
  n >>= 16;
  #line 456 
  if (n > 1023) {
    #line 457 
    _dev_err(& pdev->dev,(char *)"QLOGIC card flash not initialized.\n");
    #line 458 
    return -5;
  }
  #line 461 
  buf = (struct crb_addr_pair *)kcalloc_2((unsigned long)n,8UL,3264U);
  #line 462 
  if (buf == (struct crb_addr_pair *)0) 
                                        #line 463 
                                        return -12;
  #line 465 
  i = 0;
  #line 465 
  while (i < n) {
    {
      #line 466 
      if (qlcnic_rom_fast_read(adapter,(unsigned int)(i * 8) + offset * 4U,
                             & val) != 0) 
        #line 466 
        goto _LOR_0;
      else {
        #line 466 
        if (qlcnic_rom_fast_read(adapter,
                             ((unsigned int)(i * 8) + offset * 4U) + 4U,
                             (u32 *)(& addr)) != 0) {
          #line 466 
          _LOR_0: {
                    #line 468 
                    kfree((void *)buf);
                    #line 469 
                    return -5;
                  }
        }
      }
      #line 472 
      (buf + (unsigned long)i)->addr = (unsigned int)addr;
      #line 473 
      (buf + (unsigned long)i)->data = val;
    }
    #line 465 
    i ++;
  }
  #line 476 
  i = 0;
  #line 476 
  while (i < n) {
    #line 478 
    off = qlcnic_decode_crb_addr((buf + (unsigned long)i)->addr);
    #line 479 
    if (off == 4294967295U) {
      #line 480 
      _dev_err(& pdev->dev,(char *)"CRB init value out of range %x\n",(buf + (unsigned long)i)->addr);
      #line 482 
      goto __Cont;
    }
    #line 484 
    off += 100663296U;
    #line 486 
    if ((off & 1U) != 0U) 
                          #line 487 
                          goto __Cont;
    #line 490 
    if (off == 136323580U) 
                           #line 491 
                           goto __Cont;
    #line 492 
    if (off == 162529308U) 
                           #line 493 
                           goto __Cont;
    #line 494 
    if (off == 154140860U) 
                           #line 495 
                           goto __Cont;
    #line 496 
    if (off == 154140840U) 
                           #line 497 
                           goto __Cont;
    #line 498 
    if (off == 154140872U) 
                           #line 499 
                           goto __Cont;
    #line 500 
    if (off == 154140708U) 
                           #line 501 
                           goto __Cont;
    #line 502 
    if (off == 154140700U) 
                           #line 503 
                           goto __Cont;
    #line 504 
    if ((off & 267386880U) == 102760448U) 
                                          #line 505 
                                          goto __Cont;
    #line 507 
    if (off == 101785664U) 
                           #line 508 
                           goto __Cont;
    #line 509 
    if (off == 101785672U) 
                           #line 510 
                           goto __Cont;
    #line 511 
    if ((off & 267386880U) == 161480704U) 
                                          #line 512 
                                          goto __Cont;
    #line 514 
    init_delay = 1;
    #line 517 
    if (off == 154140680U) 
                           #line 518 
                           init_delay = 1000;
    #line 520 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)off,(buf + (unsigned long)i)->data);
    #line 522 
    msleep((unsigned int)init_delay);
    #line 476 
    __Cont: 
            #line 476 
    i ++;
  }
  #line 524 
  kfree((void *)buf);
  #line 527 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,122683628UL,30U);
  #line 528 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,122683468UL,8U);
  #line 529 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,123732044UL,8U);
  #line 530 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,118489096UL,0U);
  #line 531 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,118489100UL,0U);
  #line 532 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,119537672UL,0U);
  #line 533 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,119537676UL,0U);
  #line 534 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,120586248UL,0U);
  #line 535 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,120586252UL,0U);
  #line 536 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,121634824UL,0U);
  #line 537 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,121634828UL,0U);
  #line 538 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,116391944UL,0U);
  #line 539 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,116391948UL,0U);
  #line 540 
  usleep_range(1000UL,1500UL);
  #line 542 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl));
  #line 543 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 1U));
  #line 545 
  return 0;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_cmd_peg_ready(struct qlcnic_adapter *adapter)
{
  #line 550 
  u32 val;
  #line 551 
  int retries = 60;
  #line 553 
  while (1) {
    #line 554 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 16U));
    #line 556 
    switch (val) {
      #line 557 
      case (u32)65281: 
                       #line 557 
      ;
      #line 558 
      case (u32)61455: 
                       #line 558 
      ;
      #line 559 
      return 0;
      #line 560 
      case (u32)65535: 
                       #line 560 
      ;
      #line 561 
      goto out_err;
      #line 562 
      default: 
               #line 562 
      ;
      #line 563 
      break;
    }
    #line 566 
    msleep(500U);
    #line 568 
    retries --;
    #line 568 
    if (! (retries != 0)) 
                          #line 553 
                          break;
  }
  #line 570 
  writel(65535U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 16U));
  #line 573 
  out_err: 
           #line 573 
  ;
  #line 574 
  _dev_err(& (adapter->pdev)->dev,(char *)"Command Peg initialization not ",val);
  #line 576 
  return -5;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_receive_peg_ready(struct qlcnic_adapter *adapter)
{
  #line 582 
  u32 val;
  #line 583 
  int retries = 2000;
  #line 585 
  while (1) {
    #line 586 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 17U));
    #line 588 
    if (val == 65281U) 
                       #line 589 
                       return 0;
    #line 591 
    msleep(10U);
    #line 593 
    retries --;
    #line 593 
    if (! (retries != 0)) 
                          #line 585 
                          break;
  }
  #line 595 
  _dev_err(& (adapter->pdev)->dev,(char *)"Receive Peg initialization not complete, state: 0x%x.\n",val);
  #line 597 
  return -5;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_check_fw_status(struct qlcnic_adapter *adapter)
{
  #line 603 
  int err;
  #line 605 
  err = qlcnic_cmd_peg_ready(adapter);
  #line 606 
  if (err != 0) 
                #line 607 
                return err;
  #line 609 
  err = qlcnic_receive_peg_ready(adapter);
  #line 610 
  if (err != 0) 
                #line 611 
                return err;
  #line 613 
  writel(61455U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 16U));
  #line 615 
  return err;
}

#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_setup_idc_param(struct qlcnic_adapter *adapter)
{
  #line 621 
  int timeo;
  #line 622 
  u32 val;
  #line 624 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 9U));
  #line 625 
  val = (val >> (int)adapter->portnum * 4) & 15U;
  #line 626 
  if ((val & 3U) != 1U) {
    #line 627 
    _dev_err(& (adapter->pdev)->dev,(char *)"Not an Ethernet NIC func=%u\n",val);
    #line 629 
    return -5;
  }
  #line 631 
  (adapter->ahw)->physical_port = (unsigned char)(val >> 2);
  #line 632 
  if (qlcnic_rom_fast_read(adapter,4098140U,(u32 *)(& timeo)) != 0) 
                                                                    #line 633 
                                                                    timeo = 30;
  #line 635 
  adapter->dev_init_timeo = (unsigned char)timeo;
  #line 637 
  if (qlcnic_rom_fast_read(adapter,4098144U,(u32 *)(& timeo)) != 0) 
                                                                    #line 638 
                                                                    timeo = 10;
  #line 640 
  adapter->reset_ack_timeo = (unsigned char)timeo;
  #line 642 
  return 0;
}

#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_get_flt_entry(struct qlcnic_adapter *adapter, u8 region, struct qlcnic_flt_entry *region_entry)
{
  #line 648 
  struct qlcnic_flt_header flt_hdr;
  #line 649 
  struct qlcnic_flt_entry *flt_entry;
  #line 650 
  int ret;
  #line 651 
  u32 entry_size;
  #line 650 
  int i = 0;
  #line 653 
  memset((void *)region_entry,0,16UL);
  #line 654 
  ret = qlcnic_rom_fast_read_words(adapter,4132864,(u8 *)(& flt_hdr),8UL);
  #line 657 
  if (ret != 0) {
    #line 658 
    _dev_warn(& (adapter->pdev)->dev,(char *)"error reading flash layout header\n");
    #line 660 
    return -5;
  }
  #line 663 
  entry_size = (unsigned int)flt_hdr.len + 4294967288U;
  #line 664 
  flt_entry = (struct qlcnic_flt_entry *)cif_vzalloc_1((unsigned long)entry_size);
  #line 665 
  if (flt_entry == (struct qlcnic_flt_entry *)0) 
                                                 #line 666 
                                                 return -5;
  #line 668 
  ret = qlcnic_rom_fast_read_words(adapter,4132872,(u8 *)flt_entry,(unsigned long)entry_size);
  #line 671 
  if (ret != 0) {
    #line 672 
    _dev_warn(& (adapter->pdev)->dev,(char *)"error reading flash layout entries\n");
    #line 674 
    goto err_out;
  }
  #line 677 
  while ((unsigned long)i < (unsigned long)(entry_size / 16U)) {
    #line 678 
    if ((int)(flt_entry + (unsigned long)i)->region == (int)region) 
                                                                    #line 679 
                                                                    break;
    #line 680 
    i ++;
  }
  #line 682 
  if ((unsigned long)i >= (unsigned long)(entry_size / 16U)) {
    #line 683 
    _dev_warn(& (adapter->pdev)->dev,(char *)"region=%x not found in %d regions\n",(int)region,i);
    #line 685 
    ret = -5;
    #line 686 
    goto err_out;
  }
  #line 688 
  memcpy((void *)region_entry,(void *)(flt_entry + (unsigned long)i),16UL);
  #line 690 
  err_out: 
           #line 690 
  ;
  #line 691 
  cif_vfree_0((void *)flt_entry);
  #line 692 
  return ret;
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_check_flash_fw_ver(struct qlcnic_adapter *adapter)
{
  #line 698 
  struct qlcnic_flt_entry fw_entry;
  #line 699 
  u32 min_ver;
  #line 700 
  int ret;
  #line 699 
  u32 ver = 4294967295U;
  #line 702 
  if ((unsigned int)(adapter->ahw)->revision_id == 88U) 
                                                        #line 703 
                                                        ret = qlcnic_get_flt_entry(adapter,(unsigned char)151,& fw_entry); else 
                                                                    #line 706 
                                                                    ret = qlcnic_get_flt_entry(adapter,(unsigned char)116,& fw_entry);
  #line 709 
  if (ret == 0) 
                #line 711 
                qlcnic_rom_fast_read(adapter,fw_entry.start_addr + 4U,& ver); else 
                                                                    #line 714 
                                                                    qlcnic_rom_fast_read(adapter,4097032U,& ver);
  #line 717 
  ver = ((ver << 24) + (((ver >> 8) << 16) & 16711680U)) + (ver >> 16);
  #line 718 
  min_ver = 67371010U;
  #line 720 
  if (ver < min_ver) {
    #line 721 
    _dev_err(& (adapter->pdev)->dev,(char *)"firmware version %d.%d.%d unsupported.",ver >> 24,(ver >> 16) & 255U,ver & 65535U,min_ver >> 24,(min_ver >> 16) & 255U,min_ver & 65535U);
    #line 726 
    return -22;
  }
  #line 729 
  return 0;
}

#line 733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_has_mn(struct qlcnic_adapter *adapter)
{
  #line 735 
  u32 capability = 0U;
  #line 736 
  int err = 0;
  #line 738 
  capability = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323116UL,& err);
  #line 739 
  if (err == -5) 
                 #line 740 
                 return err;
  #line 741 
  if ((capability & 1U) != 0U) 
                               #line 742 
                               return 1;
  #line 744 
  return 0;
}

#line 748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static struct uni_table_desc *qlcnic_get_table_desc(u8 *unirom, int section)
{
  #line 750 
  u32 i;
  #line 750 
  u32 entries;
  #line 751 
  struct uni_table_desc *directory = (struct uni_table_desc *)unirom;
  #line 752 
  entries = directory->num_entries;
  #line 754 
  i = 0U;
  #line 754 
  while (i < entries) {
    {
      #line 756 
      u32 offs = directory->findex + directory->entry_size * i;
      #line 758 
      u32 tab_type = *((__le32 *)(unirom + (unsigned long)offs) + 8U);
      #line 760 
      if (tab_type == (unsigned int)section) 
                                             #line 761 
                                             return (struct uni_table_desc *)(unirom + (unsigned long)offs);
    }
    #line 754 
    i ++;
  }
  #line 764 
  return (struct uni_table_desc *)0;
}

#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_header(struct qlcnic_adapter *adapter)
{
  #line 774 
  u32 entries;
  #line 774 
  u32 entry_size;
  #line 774 
  u32 tab_size;
  #line 774 
  u32 fw_file_size;
  #line 772 
  u8 *unirom = (adapter->fw)->data;
  #line 773 
  struct uni_table_desc *directory = (struct uni_table_desc *)unirom;
  #line 776 
  fw_file_size = (unsigned int)(adapter->fw)->size;
  #line 778 
  if (fw_file_size <= 55U) 
                           #line 779 
                           return -22;
  #line 781 
  entries = directory->num_entries;
  #line 782 
  entry_size = directory->entry_size;
  #line 783 
  tab_size = directory->findex + entries * entry_size;
  #line 785 
  if (fw_file_size < tab_size) 
                               #line 786 
                               return -22;
  #line 788 
  return 0;
}

#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_bootld(struct qlcnic_adapter *adapter)
{
  #line 794 
  struct uni_table_desc *tab_desc;
  #line 795 
  struct uni_data_desc *descr;
  #line 796 
  u32 offs;
  #line 796 
  u32 tab_size;
  #line 796 
  u32 data_size;
  #line 796 
  u32 idx;
  #line 798 
  __le32 temp;
  #line 797 
  u8 *unirom = (adapter->fw)->data;
  #line 800 
  temp = *((__le32 *)(unirom + (unsigned long)adapter->file_prd_off) + 27U);
  #line 802 
  idx = temp;
  #line 803 
  tab_desc = qlcnic_get_table_desc(unirom,6);
  #line 805 
  if (tab_desc == (struct uni_table_desc *)0) 
                                              #line 806 
                                              return -22;
  #line 808 
  tab_size = tab_desc->findex + tab_desc->entry_size * (idx + 1U);
  #line 811 
  if ((adapter->fw)->size < (unsigned long)tab_size) 
                                                     #line 812 
                                                     return -22;
  #line 814 
  offs = tab_desc->findex + tab_desc->entry_size * idx;
  #line 816 
  descr = (struct uni_data_desc *)(unirom + (unsigned long)offs);
  #line 818 
  data_size = descr->findex + descr->size;
  #line 820 
  if ((adapter->fw)->size < (unsigned long)data_size) 
                                                      #line 821 
                                                      return -22;
  #line 823 
  return 0;
}

#line 827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_fw(struct qlcnic_adapter *adapter)
{
  #line 829 
  struct uni_table_desc *tab_desc;
  #line 830 
  struct uni_data_desc *descr;
  #line 832 
  u32 offs;
  #line 832 
  u32 tab_size;
  #line 832 
  u32 data_size;
  #line 832 
  u32 idx;
  #line 833 
  __le32 temp;
  #line 831 
  u8 *unirom = (adapter->fw)->data;
  #line 835 
  temp = *((__le32 *)(unirom + (unsigned long)adapter->file_prd_off) + 29U);
  #line 837 
  idx = temp;
  #line 838 
  tab_desc = qlcnic_get_table_desc(unirom,7);
  #line 840 
  if (tab_desc == (struct uni_table_desc *)0) 
                                              #line 841 
                                              return -22;
  #line 843 
  tab_size = tab_desc->findex + tab_desc->entry_size * (idx + 1U);
  #line 846 
  if ((adapter->fw)->size < (unsigned long)tab_size) 
                                                     #line 847 
                                                     return -22;
  #line 849 
  offs = tab_desc->findex + tab_desc->entry_size * idx;
  #line 851 
  descr = (struct uni_data_desc *)(unirom + (unsigned long)offs);
  #line 852 
  data_size = descr->findex + descr->size;
  #line 854 
  if ((adapter->fw)->size < (unsigned long)data_size) 
                                                      #line 855 
                                                      return -22;
  #line 857 
  return 0;
}

#line 861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_product_offs(struct qlcnic_adapter *adapter)
{
  #line 863 
  struct uni_table_desc *ptab_descr;
  #line 866 
  u32 entries;
  #line 866 
  u32 entry_size;
  #line 866 
  u32 tab_size;
  #line 866 
  u32 i;
  #line 867 
  __le32 temp;
  #line 864 
  u8 *unirom = (adapter->fw)->data;
  #line 865 
  int mn_present = qlcnic_has_mn(adapter);
  #line 869 
  ptab_descr = qlcnic_get_table_desc(unirom,0);
  #line 871 
  if (ptab_descr == (struct uni_table_desc *)0) 
                                                #line 872 
                                                return -22;
  #line 874 
  entries = ptab_descr->num_entries;
  #line 875 
  entry_size = ptab_descr->entry_size;
  #line 876 
  tab_size = ptab_descr->findex + entries * entry_size;
  #line 878 
  if ((adapter->fw)->size < (unsigned long)tab_size) 
                                                     #line 879 
                                                     return -22;
  #line 881 
  nomn: 
        #line 881 
  ;
  #line 882 
  i = 0U;
  #line 882 
  while (i < entries) {
    {
      #line 884 
      u32 flags;
      #line 884 
      u32 file_chiprev;
      #line 884 
      u32 offs;
      #line 886 
      u32 flagbit;
      #line 885 
      u8 chiprev = (adapter->ahw)->revision_id;
      #line 888 
      offs = ptab_descr->findex + ptab_descr->entry_size * i;
      #line 890 
      temp = *((__le32 *)(unirom + (unsigned long)offs) + 11U);
      #line 891 
      flags = temp;
      #line 892 
      temp = *((__le32 *)(unirom + (unsigned long)offs) + 10U);
      #line 893 
      file_chiprev = temp;
      #line 895 
      if (mn_present != 0) 
                           #line 895 
                           flagbit = 1U; else 
                                              #line 895 
                                              flagbit = 2U;
      #line 897 
      if ((unsigned int)chiprev == file_chiprev && (((unsigned long long)flags >> flagbit) & 1ULL) != 0ULL) {
        #line 899 
        adapter->file_prd_off = offs;
        #line 900 
        return 0;
      }
    }
    #line 882 
    i ++;
  }
  #line 903 
  if (mn_present != 0) {
    #line 904 
    mn_present = 0;
    #line 905 
    goto nomn;
  }
  #line 907 
  return -22;
}

#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_unified_romimage(struct qlcnic_adapter *adapter)
{
  #line 913 
  if (qlcnic_validate_header(adapter) != 0) {
    #line 914 
    _dev_err(& (adapter->pdev)->dev,(char *)"unified image: header validation failed\n");
    #line 916 
    return -22;
  }
  #line 919 
  if (qlcnic_validate_product_offs(adapter) != 0) {
    #line 920 
    _dev_err(& (adapter->pdev)->dev,(char *)"unified image: product validation failed\n");
    #line 922 
    return -22;
  }
  #line 925 
  if (qlcnic_validate_bootld(adapter) != 0) {
    #line 926 
    _dev_err(& (adapter->pdev)->dev,(char *)"unified image: bootld validation failed\n");
    #line 928 
    return -22;
  }
  #line 931 
  if (qlcnic_validate_fw(adapter) != 0) {
    #line 932 
    _dev_err(& (adapter->pdev)->dev,(char *)"unified image: firmware validation failed\n");
    #line 934 
    return -22;
  }
  #line 937 
  return 0;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static struct uni_data_desc *qlcnic_get_data_desc(struct qlcnic_adapter *adapter, u32 section, u32 idx_offset)
{
  #line 945 
  struct uni_table_desc *tab_desc;
  #line 946 
  u32 offs;
  #line 946 
  u32 idx;
  #line 947 
  __le32 temp;
  #line 944 
  u8 *unirom = (adapter->fw)->data;
  #line 949 
  temp = *((__le32 *)(unirom + (unsigned long)adapter->file_prd_off) + (unsigned long)idx_offset);
  #line 950 
  idx = temp;
  #line 952 
  tab_desc = qlcnic_get_table_desc(unirom,(int)section);
  #line 954 
  if (tab_desc == (struct uni_table_desc *)0) 
                                              #line 955 
                                              return (struct uni_data_desc *)0;
  #line 957 
  offs = tab_desc->findex + tab_desc->entry_size * idx;
  #line 960 
  return (struct uni_data_desc *)(unirom + (unsigned long)offs);
}

#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u8 *qlcnic_get_bootld_offs(struct qlcnic_adapter *adapter)
{
  #line 967 
  struct uni_data_desc *data_desc;
  #line 966 
  u32 offs = 65536U;
  #line 969 
  data_desc = qlcnic_get_data_desc(adapter,6U,27U);
  #line 972 
  if ((unsigned int)(adapter->ahw)->fw_type == 0U) 
                                                   #line 973 
                                                   offs = data_desc->findex;
  #line 975 
  return (adapter->fw)->data + (unsigned long)offs;
}

#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u8 *qlcnic_get_fw_offs(struct qlcnic_adapter *adapter)
{
  #line 982 
  struct uni_data_desc *data_desc;
  #line 981 
  u32 offs = 274432U;
  #line 984 
  data_desc = qlcnic_get_data_desc(adapter,7U,29U);
  #line 986 
  if ((unsigned int)(adapter->ahw)->fw_type == 0U) 
                                                   #line 987 
                                                   offs = data_desc->findex;
  #line 989 
  return (adapter->fw)->data + (unsigned long)offs;
}

#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u32 qlcnic_get_fw_size(struct qlcnic_adapter *adapter)
{
  #line 994 
  struct uni_data_desc *data_desc;
  #line 995 
  u8 *unirom = (adapter->fw)->data;
  #line 997 
  data_desc = qlcnic_get_data_desc(adapter,7U,29U);
  #line 1000 
  if ((unsigned int)(adapter->ahw)->fw_type == 0U) 
                                                   #line 1001 
                                                   return data_desc->size; else 
                                                                    #line 1003 
                                                                    return *((__le32 *)(unirom + 4097036U));
}

#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u32 qlcnic_get_fw_version(struct qlcnic_adapter *adapter)
{
  #line 1008 
  struct uni_data_desc *fw_data_desc;
  #line 1010 
  u32 major;
  #line 1010 
  u32 minor;
  #line 1010 
  u32 sub;
  #line 1011 
  __le32 version_offset;
  #line 1012 
  u8 *ver_str;
  #line 1013 
  int i;
  #line 1013 
  int ret;
  #line 1009 
  struct firmware *fw = adapter->fw;
  #line 1015 
  if ((unsigned int)(adapter->ahw)->fw_type != 0U) {
    #line 1016 
    version_offset = *((__le32 *)(fw->data + 4097032U));
    #line 1017 
    return version_offset;
  }
  #line 1020 
  fw_data_desc = qlcnic_get_data_desc(adapter,7U,29U);
  #line 1022 
  ver_str = fw->data + (((unsigned long)fw_data_desc->findex + (unsigned long)fw_data_desc->size) + 18446744073709551599U);
  #line 1025 
  i = 0;
  #line 1025 
  while (i <= 11) {
    #line 1026 
    if (cif_strncmp((char *)(ver_str + (unsigned long)i),(char *)"REV=",4UL) == 0) {
      #line 1027 
      ret = sscanf((char *)(ver_str + ((unsigned long)i + (unsigned long)4U)),(char *)"%u.%u.%u ",& major,& minor,& sub);
      #line 1029 
      if (ret != 3) 
                    #line 1030 
                    return 0U; else 
                                    #line 1032 
                                    return ((minor << 8) + major) + (sub << 16);
    }
    #line 1025 
    i ++;
  }
  #line 1036 
  return 0U;
}

#line 1039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u32 qlcnic_get_bios_version(struct qlcnic_adapter *adapter)
{
  #line 1042 
  u32 bios_ver;
  #line 1043 
  u8 *version_offset;
  #line 1044 
  __le32 temp;
  #line 1041 
  struct firmware *fw = adapter->fw;
  #line 1042 
  u32 prd_off = adapter->file_prd_off;
  #line 1046 
  if ((unsigned int)(adapter->ahw)->fw_type != 0U) {
    #line 1047 
    version_offset = fw->data + 4098108U;
    #line 1048 
    return *((__le32 *)version_offset);
  }
  #line 1051 
  temp = *((__le32 *)(fw->data + (unsigned long)prd_off) + 12U);
  #line 1052 
  bios_ver = temp;
  #line 1054 
  return ((bios_ver << 16) + ((bios_ver >> 8) & 65280U)) + (bios_ver >> 24);
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static void qlcnic_rom_lock_recovery(struct qlcnic_adapter *adapter)
{
  #line 1059 
  if (qlcnic_pcie_sem_lock(adapter,2,136323328U) != 0) 
                                                       #line 1060 
                                                       _dev_info(& (adapter->pdev)->dev,(char *)"Resetting rom_lock\n");
  #line 1062 
  qlcnic_pcie_sem_unlock(adapter,2);
  #line 1063 
  return;
}

#line 1066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_check_fw_hearbeat(struct qlcnic_adapter *adapter)
{
  #line 1068 
  u32 heartbeat;
  #line 1068 
  u32 ret = 4294967291U;
  #line 1069 
  int retries = 10;
  #line 1071 
  adapter->heartbeat = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 2U));
  #line 1074 
  while (1) {
    #line 1075 
    msleep(200U);
    #line 1076 
    heartbeat = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 2U));
    #line 1078 
    if (adapter->heartbeat != heartbeat) {
      #line 1079 
      ret = 0U;
      #line 1080 
      break;
    }
    #line 1082 
    retries --;
    #line 1082 
    if (! (retries != 0)) 
                          #line 1074 
                          break;
  }
  #line 1084 
  return (int)ret;
}

#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_need_fw_reset(struct qlcnic_adapter *adapter)
{
  #line 1090 
  if ((adapter->flags & 16384U) != 0U) 
                                       #line 1090 
                                       goto _LOR;
  else {
    #line 1090 
    if (qlcnic_check_fw_hearbeat(adapter) != 0) {
      #line 1090 
      _LOR: {
              #line 1092 
              qlcnic_rom_lock_recovery(adapter);
              #line 1093 
              return 1;
            }
    }
  }
  #line 1096 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
                                                  #line 1097 
                                                  return 1;
  #line 1099 
  if (adapter->fw != (struct firmware *)0) 
                                           #line 1100 
                                           return 1;
  #line 1102 
  return 0;
}

#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static char *fw_name[2U] = {(char *)"phanfw.bin", (char *)"flash"};
#line 1111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_load_firmware(struct qlcnic_adapter *adapter)
{
  #line 1113 
  __le64 *ptr64;
  #line 1114 
  u32 i;
  #line 1114 
  u32 flashaddr;
  #line 1114 
  u32 size;
  #line 1115 
  struct firmware *fw = adapter->fw;
  #line 1116 
  struct pci_dev *pdev = adapter->pdev;
  #line 1118 
  _dev_info(& pdev->dev,(char *)"loading firmware from %s\n",fw_name[(int)(adapter->ahw)->fw_type]);
  #line 1121 
  if (fw != (struct firmware *)0) {
    #line 1122 
    u64 data;
    #line 1124 
    size = 26112U;
    #line 1126 
    ptr64 = (__le64 *)qlcnic_get_bootld_offs(adapter);
    #line 1127 
    flashaddr = 65536U;
    #line 1129 
    i = 0U;
    #line 1129 
    while (i < size) {
      {
        #line 1130 
        data = *(ptr64 + (unsigned long)i);
        #line 1132 
        if (qlcnic_pci_mem_write_2M(adapter,(unsigned long long)flashaddr,data) != 0) 
          #line 1133 
          return -5;
        #line 1135 
        flashaddr += 8U;
      }
      #line 1129 
      i ++;
    }
    #line 1138 
    size = qlcnic_get_fw_size(adapter) / 8U;
    #line 1140 
    ptr64 = (__le64 *)qlcnic_get_fw_offs(adapter);
    #line 1141 
    flashaddr = 274432U;
    #line 1143 
    i = 0U;
    #line 1143 
    while (i < size) {
      {
        #line 1144 
        data = *(ptr64 + (unsigned long)i);
        #line 1146 
        if (qlcnic_pci_mem_write_2M(adapter,(unsigned long long)flashaddr,data) != 0) 
          #line 1148 
          return -5;
        #line 1150 
        flashaddr += 8U;
      }
      #line 1143 
      i ++;
    }
    #line 1153 
    size = qlcnic_get_fw_size(adapter) & 7U;
    #line 1154 
    if (size != 0U) {
      #line 1155 
      data = *(ptr64 + (unsigned long)i);
      #line 1157 
      if (qlcnic_pci_mem_write_2M(adapter,(unsigned long long)flashaddr,data) != 0) 
        #line 1159 
        return -5;
    }
  }
  else {
    #line 1163 
    u64 data_0;
    #line 1164 
    u32 hi;
    #line 1164 
    u32 lo;
    #line 1165 
    int ret;
    #line 1166 
    struct qlcnic_flt_entry bootld_entry;
    #line 1168 
    ret = qlcnic_get_flt_entry(adapter,(unsigned char)114,& bootld_entry);
    #line 1170 
    if (ret == 0) {
      #line 1171 
      size = bootld_entry.size / 8U;
      #line 1172 
      flashaddr = bootld_entry.start_addr;
    }
    else {
      #line 1174 
      size = 26112U;
      #line 1175 
      flashaddr = 65536U;
      #line 1176 
      _dev_info(& pdev->dev,(char *)"using legacy method to get flash fw region");
    }
    #line 1180 
    i = 0U;
    #line 1180 
    while (i < size) {
      {
        #line 1181 
        if (qlcnic_rom_fast_read(adapter,flashaddr,& lo) != 0) 
                                                               #line 1183 
                                                               return -5;
        #line 1184 
        if (qlcnic_rom_fast_read(adapter,flashaddr + 4U,& hi) != 0) 
                                                                    #line 1186 
                                                                    return -5;
        #line 1188 
        data_0 = ((unsigned long long)hi << 32) | (unsigned long long)lo;
        #line 1190 
        if (qlcnic_pci_mem_write_2M(adapter,(unsigned long long)flashaddr,data_0) != 0) 
          #line 1192 
          return -5;
        #line 1194 
        flashaddr += 8U;
      }
      #line 1180 
      i ++;
    }
  }
  #line 1197 
  usleep_range(1000UL,1500UL);
  #line 1199 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,118489112UL,4128U);
  #line 1200 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154140680UL,8388638U);
  #line 1201 
  return 0;
}

#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_firmware(struct qlcnic_adapter *adapter)
{
  #line 1207 
  u32 val;
  #line 1208 
  u32 ver;
  #line 1208 
  u32 bios;
  #line 1208 
  u32 min_size;
  #line 1209 
  struct pci_dev *pdev = adapter->pdev;
  #line 1210 
  struct firmware *fw = adapter->fw;
  #line 1211 
  u8 fw_type = (adapter->ahw)->fw_type;
  #line 1213 
  if ((unsigned int)fw_type == 0U) {
    #line 1214 
    if (qlcnic_validate_unified_romimage(adapter) != 0) 
                                                        #line 1215 
                                                        return -22;
    #line 1217 
    min_size = 819200U;
  }
  else {
    #line 1219 
    val = *((__le32 *)(fw->data + 16680U));
    #line 1220 
    if (val != 305419896U) 
                           #line 1221 
                           return -22;
    #line 1223 
    min_size = 4194303U;
  }
  #line 1226 
  if (fw->size < (unsigned long)min_size) 
                                          #line 1227 
                                          return -22;
  #line 1229 
  val = qlcnic_get_fw_version(adapter);
  #line 1230 
  ver = ((val << 24) + (((val >> 8) << 16) & 16711680U)) + (val >> 16);
  #line 1232 
  if (ver <= 67371009U) {
    #line 1233 
    _dev_err(& pdev->dev,(char *)"%s: firmware version %d.%d.%d unsupported\n",fw_name[(int)fw_type],ver >> 24,(ver >> 16) & 255U,ver & 65535U);
    #line 1236 
    return -22;
  }
  #line 1239 
  val = qlcnic_get_bios_version(adapter);
  #line 1240 
  qlcnic_rom_fast_read(adapter,4098108U,& bios);
  #line 1241 
  if (val != bios) {
    #line 1242 
    _dev_err(& pdev->dev,(char *)"%s: firmware bios is incompatible\n",fw_name[(int)fw_type]);
    #line 1244 
    return -22;
  }
  #line 1247 
  writel(305419896U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 15U));
  #line 1248 
  return 0;
}

#line 1252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static void qlcnic_get_next_fwtype(struct qlcnic_adapter *adapter)
{
  #line 1254 
  u8 fw_type;
  #line 1256 
  switch ((int)(adapter->ahw)->fw_type) {
    #line 1257 
    case 255: 
              #line 1257 
    ;
    #line 1258 
    fw_type = (unsigned char)0U;
    #line 1259 
    break;
    #line 1261 
    case 0: 
            #line 1261 
    ;
    #line 1262 
    default: 
             #line 1262 
    ;
    #line 1263 
    fw_type = (unsigned char)1U;
    #line 1264 
    break;
  }
  #line 1267 
  (adapter->ahw)->fw_type = fw_type;
  #line 1268 
  return;
}

#line 1272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_request_firmware(struct qlcnic_adapter *adapter)
{
  #line 1275 
  int rc;
  #line 1274 
  struct pci_dev *pdev = adapter->pdev;
  #line 1277 
  (adapter->ahw)->fw_type = (unsigned char)255U;
  #line 1279 
  next: 
        #line 1279 
  ;
  #line 1280 
  qlcnic_get_next_fwtype(adapter);
  #line 1282 
  if ((unsigned int)(adapter->ahw)->fw_type == 1U) 
                                                   #line 1283 
                                                   adapter->fw = (struct firmware *)0;
  else {
    #line 1285 
    rc = cif_request_firmware(& adapter->fw,fw_name[(int)(adapter->ahw)->fw_type],& pdev->dev);
    #line 1288 
    if (rc != 0) 
                 #line 1289 
                 goto next;
    #line 1291 
    rc = qlcnic_validate_firmware(adapter);
    #line 1292 
    if (rc != 0) {
      #line 1293 
      cif_release_firmware(adapter->fw);
      #line 1294 
      usleep_range(1000UL,1500UL);
      #line 1295 
      goto next;
    }
  }
  #line 1298 
  return;
}

#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_release_firmware(struct qlcnic_adapter *adapter)
{
  #line 1304 
  cif_release_firmware(adapter->fw);
  #line 1305 
  adapter->fw = (struct firmware *)0;
  #line 1306 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 145 
  return ldv_strncmp(cs,ct,count);
}

#line 473  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void *kcalloc_2(size_t n, size_t size, gfp_t flags)
{
  #line 476 
  return ldv_kcalloc(n,size,flags);
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void cif_spin_lock_tx_clean_lock_of_qlcnic_host_tx_ring(spinlock_t *lock)
{
  #line 811 
  ldv_spin_model_lock((char *)"tx_clean_lock_of_qlcnic_host_tx_ring");
  #line 813 
  spin_lock_0(lock);
  #line 814 
  return;
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void cif_spin_unlock_tx_clean_lock_of_qlcnic_host_tx_ring(spinlock_t *lock)
{
  #line 820 
  ldv_spin_model_unlock((char *)"tx_clean_lock_of_qlcnic_host_tx_ring");
  #line 822 
  spin_unlock_0(lock);
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void cif_vfree_0(void *addr)
{
  #line 829 
  ldv_vfree(addr);
  #line 830 
  return;
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void *cif_vzalloc_1(unsigned long size)
{
  #line 836 
  return ldv_vzalloc(size);
}

#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 843 
  return ldv_request_firmware(fw);
}

#line 847  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_init.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 850 
  ldv_release_firmware(fw);
  #line 851 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void cif_set_bit_5(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void cif_clear_bit_5(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void INIT_LIST_HEAD_4(struct list_head *list);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void *cif_vzalloc_2(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void cif_vfree_1(void *addr);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 494  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void *kzalloc_5(size_t size, gfp_t flags);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static int cif_request_firmware_0(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void cif_release_firmware_0(struct firmware *fw);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 2454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_init(struct qlcnic_adapter *adapter, int pci_using_dac);
#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_ready_state_entry(struct qlcnic_adapter *adapter);
#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_vnic_pf_entry(struct qlcnic_adapter *adapter);
#line 622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 622 
int qlcnic_83xx_disable_vnic_mode(struct qlcnic_adapter *adapter, int lock);
#line 623 
#line 623 
int qlcnic_83xx_config_vnic_opmode(struct qlcnic_adapter *adapter);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_clear_dcb_ops(struct qlcnic_dcb *dcb)
{
  #line 47 
  kfree((void *)dcb);
  #line 48 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_attach(struct qlcnic_dcb *dcb)
{
  #line 66 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->attach != (int (*)(struct qlcnic_dcb *))0) {
    #line 67 
    return (*((dcb->ops)->attach))(dcb);
  }
  #line 69 
  return 0;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_get_info(struct qlcnic_dcb *dcb)
{
  #line 83 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->get_info != (void (*)(struct qlcnic_dcb *))0) 
    #line 84 
    (*((dcb->ops)->get_info))(dcb);
  #line 85 
  return;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_enable(struct qlcnic_dcb *dcb)
{
  #line 118 
  if (dcb != (struct qlcnic_dcb *)0) {
    #line 118 
    if (qlcnic_dcb_attach(dcb) != 0) 
                                     #line 119 
                                     qlcnic_clear_dcb_ops(dcb);
  }
  #line 120 
  return;
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_auto_fw_reset;
#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_load_fw_file;
#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1652 
void qlcnic_set_drv_version(struct qlcnic_adapter *adapter);
#line 1698 
#line 1698 
int qlcnic_check_temp(struct qlcnic_adapter *adapter);
#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_check_diag_status(struct qlcnic_adapter *adapter)
{
  #line 2301 
  return (int)test_bit(13L,& adapter->state);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
#line 2360 
static int qlcnic_83xx_init_default_driver(struct qlcnic_adapter *adapter);
#line 40 
#line 1572 
static int qlcnic_83xx_check_heartbeat(struct qlcnic_adapter *p_dev);
#line 41 
#line 2210 
static int qlcnic_83xx_restart_hw(struct qlcnic_adapter *adapter);
#line 42 
#line 1633 
static int qlcnic_83xx_check_hw_status(struct qlcnic_adapter *p_dev);
#line 43 
#line 1706 
static int qlcnic_83xx_get_reset_instruction_template(struct qlcnic_adapter *p_dev);
#line 44 
#line 2051 
static void qlcnic_83xx_stop_hw(struct qlcnic_adapter *p_dev);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static char *qlc_83xx_idc_states[8U] = {(char *)"Unknown", (char *)"Cold", (char *)"Init", (char *)"Ready", (char *)"Need Reset", (char *)"Need Quiesce", (char *)"Failed", (char *)"Quiesce"};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_driver_presence_reg(struct qlcnic_adapter *adapter)
{
  #line 135 
  u32 val;
  #line 137 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 13U));
  #line 138 
  if ((val & 65535U) != 0U) 
                            #line 139 
                            return 1; else 
                                           #line 141 
                                           return 0;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_log_state_history(struct qlcnic_adapter *adapter)
{
  #line 146 
  u32 cur;
  #line 146 
  u32 prev;
  #line 147 
  cur = (unsigned int)(adapter->ahw)->idc.curr_state;
  #line 148 
  prev = (unsigned int)(adapter->ahw)->idc.prev_state;
  #line 150 
  _dev_info(& (adapter->pdev)->dev,(char *)"current state  = %s,  prev state = %s\n",*((adapter->ahw)->idc.name + (unsigned long)cur),*((adapter->ahw)->idc.name + (unsigned long)prev));
  #line 151 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_update_audit_reg(struct qlcnic_adapter *adapter, u8 mode, int lock)
{
  #line 159 
  u32 val;
  #line 160 
  int seconds;
  #line 162 
  if (lock != 0) {
    #line 163 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 164 
                                               return -16;
  }
  #line 167 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 16U));
  #line 168 
  val = ((unsigned int)adapter->portnum & 15U) | val;
  #line 169 
  val = (unsigned int)((int)mode << 7) | val;
  #line 170 
  if ((unsigned int)mode != 0U) 
                                #line 171 
                                seconds = (int)((u64)(jiffies / 250UL) - (adapter->ahw)->idc.sec_counter); else 
                                                                    #line 173 
                                                                    seconds = (int)(jiffies / 250UL);
  #line 175 
  val = (unsigned int)(seconds << 8) | val;
  #line 176 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 16U));
  #line 177 
  (adapter->ahw)->idc.sec_counter = (unsigned long long)(jiffies / 250UL);
  #line 179 
  if (lock != 0) 
                 #line 180 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 182 
  return 0;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_update_minor_version(struct qlcnic_adapter *adapter)
{
  #line 187 
  u32 val;
  #line 189 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 17U));
  #line 190 
  val = (unsigned int)(~ (3 << (int)adapter->portnum * 2)) & val;
  #line 191 
  val = val;
  #line 192 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 17U));
  #line 193 
  return;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_update_major_version(struct qlcnic_adapter *adapter, int lock)
{
  #line 198 
  u32 val;
  #line 200 
  if (lock != 0) {
    #line 201 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 202 
                                               return -16;
  }
  #line 205 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 11U));
  #line 206 
  val &= 4294967040U;
  #line 207 
  val |= 1U;
  #line 208 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 11U));
  #line 210 
  if (lock != 0) 
                 #line 211 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 213 
  return 0;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_update_drv_presence_reg(struct qlcnic_adapter *adapter, int status, int lock)
{
  #line 220 
  u32 val;
  #line 222 
  if (lock != 0) {
    #line 223 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 224 
                                               return -16;
  }
  #line 227 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 13U));
  #line 229 
  if (status != 0) 
                   #line 230 
                   val = (unsigned int)(1 << (int)adapter->portnum) | val; else 
                                                                    #line 232 
                                                                    val = (unsigned int)(~ (1 << (int)adapter->portnum)) & val;
  #line 234 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 13U));
  #line 235 
  qlcnic_83xx_idc_update_minor_version(adapter);
  #line 237 
  if (lock != 0) 
                 #line 238 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 240 
  return 0;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_major_version(struct qlcnic_adapter *adapter)
{
  #line 245 
  u32 val;
  #line 246 
  u8 version;
  #line 248 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 11U));
  #line 249 
  version = (unsigned char)val;
  #line 251 
  if ((unsigned int)version != 1U) {
    #line 252 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s:mismatch. version 0x%x, expected version 0x%x\n",(char *)"qlcnic_83xx_idc_check_major_version",(int)version,1);
    #line 255 
    return -5;
  }
  #line 258 
  return 0;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_clear_registers(struct qlcnic_adapter *adapter, int lock)
{
  #line 264 
  u32 val;
  #line 266 
  if (lock != 0) {
    #line 267 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 268 
                                               return -16;
  }
  #line 271 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 14U));
  #line 273 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
  #line 274 
  val &= 4294967293U;
  #line 275 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
  #line 277 
  if (lock != 0) 
                 #line 278 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 280 
  return 0;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_update_drv_ack_reg(struct qlcnic_adapter *adapter, int flag, int lock)
{
  #line 286 
  u32 val;
  #line 288 
  if (lock != 0) {
    #line 289 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 290 
                                               return -16;
  }
  #line 293 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 14U));
  #line 294 
  if (flag != 0) 
                 #line 295 
                 val = (unsigned int)(1 << (int)adapter->portnum) | val; else 
                                                                    #line 297 
                                                                    val = (unsigned int)(~ (1 << (int)adapter->portnum)) & val;
  #line 298 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 14U));
  #line 300 
  if (lock != 0) 
                 #line 301 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 303 
  return 0;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_timeout(struct qlcnic_adapter *adapter, int time_limit)
{
  #line 309 
  u64 seconds;
  #line 311 
  seconds = (unsigned long long)(jiffies / 250UL) - (adapter->ahw)->idc.sec_counter;
  #line 312 
  if ((unsigned long long)time_limit >= seconds) 
                                                 #line 313 
                                                 return 0; else 
                                                                #line 315 
                                                                return -16;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_reset_ack_reg(struct qlcnic_adapter *adapter)
{
  #line 329 
  int timeout;
  #line 330 
  u32 ack;
  #line 330 
  u32 presence;
  #line 330 
  u32 val;
  #line 332 
  timeout = 10;
  #line 333 
  ack = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 14U));
  #line 334 
  presence = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 13U));
  #line 335 
  _dev_info(& (adapter->pdev)->dev,(char *)"%s: ack = 0x%x, presence = 0x%x\n",(char *)"qlcnic_83xx_idc_check_reset_ack_reg",ack,presence);
  #line 337 
  if ((ack & presence) != presence) {
    #line 338 
    if (qlcnic_83xx_idc_check_timeout(adapter,timeout) != 0) {
      #line 340 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s: ACK wait exceeds time limit\n",(char *)"qlcnic_83xx_idc_check_reset_ack_reg");
      #line 342 
      val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 13U));
      #line 343 
      val = ~ (ack ^ presence) & val;
      #line 344 
      if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                                 #line 345 
                                                 return -16;
      #line 346 
      writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 13U));
      #line 347 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s: updated drv presence reg = 0x%x\n",(char *)"qlcnic_83xx_idc_check_reset_ack_reg",val);
      #line 350 
      qlcnic_83xx_unlock_driver(adapter);
      #line 351 
      return 0;
    }
    else 
         #line 354 
         return 1;
  }
  else {
    #line 357 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s: Reset ACK received from all functions\n",(char *)"qlcnic_83xx_idc_check_reset_ack_reg");
    #line 360 
    return 0;
  }
}

#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_tx_soft_reset(struct qlcnic_adapter *adapter)
{
  #line 376 
  struct net_device *netdev = adapter->netdev;
  #line 378 
  if ((int)test_and_set_bit(2L,& adapter->state) != 0) 
                                                       #line 379 
                                                       return -16;
  #line 381 
  netif_device_detach(netdev);
  #line 382 
  qlcnic_down(adapter,netdev);
  #line 383 
  qlcnic_up(adapter,netdev);
  #line 384 
  netif_device_attach(netdev);
  #line 385 
  cif_clear_bit_5(2L,& adapter->state);
  #line 386 
  netdev_info(adapter->netdev,(char *)"%s: soft reset complete.\n",(char *)"qlcnic_83xx_idc_tx_soft_reset");
  #line 388 
  return 0;
}

#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_detach_driver(struct qlcnic_adapter *adapter)
{
  #line 401 
  int i;
  #line 402 
  struct net_device *netdev = adapter->netdev;
  #line 404 
  netif_device_detach(netdev);
  #line 405 
  qlcnic_83xx_detach_mailbox_work(adapter);
  #line 408 
  qlcnic_83xx_disable_mbx_intr(adapter);
  #line 409 
  qlcnic_down(adapter,netdev);
  #line 410 
  i = 0;
  #line 410 
  while ((int)(adapter->ahw)->num_msix > i) {
    #line 411 
    ((adapter->ahw)->intr_tbl + (unsigned long)i)->id = (unsigned short)i;
    #line 412 
    ((adapter->ahw)->intr_tbl + (unsigned long)i)->enabled = (unsigned char)0U;
    #line 413 
    ((adapter->ahw)->intr_tbl + (unsigned long)i)->src = 0U;
    #line 410 
    i ++;
  }
  #line 416 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 417 
                                                qlcnic_sriov_pf_reset(adapter);
  #line 418 
  return;
}

#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_attach_driver(struct qlcnic_adapter *adapter)
{
  #line 431 
  struct net_device *netdev = adapter->netdev;
  #line 433 
  if ((int)netif_running(netdev) != 0) {
    #line 434 
    if (qlcnic_up(adapter,netdev) != 0) 
                                        #line 435 
                                        goto done;
    #line 436 
    qlcnic_restore_indev_addr(netdev,1UL);
  }
  #line 438 
  done: 
        #line 438 
  ;
  #line 439 
  netif_device_attach(netdev);
  #line 440 
  return;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_failed_state(struct qlcnic_adapter *adapter, int lock)
{
  #line 445 
  if (lock != 0) {
    #line 446 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 447 
                                               return -16;
  }
  #line 450 
  qlcnic_83xx_idc_clear_registers(adapter,0);
  #line 451 
  writel(6U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
  #line 452 
  if (lock != 0) 
                 #line 453 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 455 
  qlcnic_83xx_idc_log_state_history(adapter);
  #line 456 
  _dev_info(& (adapter->pdev)->dev,(char *)"Device will enter failed state\n");
  #line 458 
  return 0;
}

#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_init_state(struct qlcnic_adapter *adapter, int lock)
{
  #line 464 
  if (lock != 0) {
    #line 465 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 466 
                                               return -16;
  }
  #line 469 
  writel(2U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
  #line 471 
  if (lock != 0) 
                 #line 472 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 474 
  return 0;
}

#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_need_quiesce(struct qlcnic_adapter *adapter, int lock)
{
  #line 480 
  if (lock != 0) {
    #line 481 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 482 
                                               return -16;
  }
  #line 485 
  writel(5U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
  #line 488 
  if (lock != 0) 
                 #line 489 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 491 
  return 0;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_need_reset_state(struct qlcnic_adapter *adapter, int lock)
{
  #line 497 
  if (lock != 0) {
    #line 498 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 499 
                                               return -16;
  }
  #line 502 
  writel(4U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
  #line 505 
  if (lock != 0) 
                 #line 506 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 508 
  return 0;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_ready_state(struct qlcnic_adapter *adapter, int lock)
{
  #line 514 
  if (lock != 0) {
    #line 515 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 516 
                                               return -16;
  }
  #line 519 
  writel(3U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
  #line 520 
  if (lock != 0) 
                 #line 521 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 523 
  return 0;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_find_reset_owner_id(struct qlcnic_adapter *adapter)
{
  #line 539 
  u32 reg;
  #line 539 
  u32 reg1;
  #line 539 
  u32 reg2;
  #line 539 
  u32 i;
  #line 539 
  u32 j;
  #line 539 
  u32 owner;
  #line 539 
  u32 class;
  #line 541 
  reg1 = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 35U));
  #line 542 
  reg2 = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 36U));
  #line 543 
  owner = 1U;
  #line 544 
  i = 0U;
  #line 545 
  j = 0U;
  #line 546 
  reg = reg1;
  #line 548 
  while (1) {
    #line 570 
    u32 tmp;
    #line 549 
    class = (((unsigned int)(15 << j * 4U) & reg) >> j * 4U) & 3U;
    #line 550 
    if (class == owner) 
                        #line 551 
                        break;
    #line 552 
    if (i == 7U) {
      #line 553 
      reg = reg2;
      #line 554 
      j = 0U;
    }
    else 
         #line 556 
         j ++;
    #line 559 
    if (i == 15U) {
      #line 560 
      if (owner == 1U) 
                       #line 561 
                       owner = 3U;
      else 
        #line 562 
        if (owner == 3U) 
                         #line 563 
                         owner = 2U;
        else 
          #line 564 
          if (owner == 2U) 
                           #line 565 
                           return -5;
      #line 566 
      reg = reg1;
      #line 567 
      j = 0U;
      #line 568 
      i = 0U;
    }
    #line 570 
    tmp = i;
    #line 570 
    i ++;
    #line 570 
    ;
    #line 570 
    if (! (tmp <= 15U)) 
                        #line 548 
                        break;
  }
  #line 572 
  return (int)i;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_restart_hw(struct qlcnic_adapter *adapter, int lock)
{
  #line 577 
  int ret = 0;
  #line 579 
  ret = qlcnic_83xx_restart_hw(adapter);
  #line 581 
  if (ret != 0) 
                #line 582 
                qlcnic_83xx_idc_enter_failed_state(adapter,lock);
  else {
    #line 584 
    qlcnic_83xx_idc_clear_registers(adapter,lock);
    #line 585 
    ret = qlcnic_83xx_idc_enter_ready_state(adapter,lock);
  }
  #line 588 
  return ret;
}

#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_fan_failure(struct qlcnic_adapter *adapter)
{
  #line 593 
  u32 status;
  #line 595 
  status = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl));
  #line 597 
  if ((status & 2147483648U) != 0U) {
    #line 598 
    _dev_err(& (adapter->pdev)->dev,(char *)"peg halt status1=0x%x\n",status);
    #line 600 
    if (((status >> 8) & 2097151U) == 22U) {
      #line 601 
      _dev_err(& (adapter->pdev)->dev,(char *)"On board active cooling fan failed. ");
      #line 604 
      _dev_err(& (adapter->pdev)->dev,(char *)"Replace the adapter.\n");
      #line 606 
      return -5;
    }
  }
  #line 610 
  return 0;
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_reattach_driver(struct qlcnic_adapter *adapter)
{
  #line 615 
  int err;
  #line 617 
  qlcnic_83xx_reinit_mbx_work((adapter->ahw)->mailbox);
  #line 618 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  #line 620 
  qlcnic_83xx_initialize_nic(adapter,1);
  #line 622 
  err = qlcnic_sriov_pf_reinit(adapter);
  #line 623 
  if (err != 0) 
                #line 624 
                return err;
  #line 626 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  #line 628 
  if (qlcnic_83xx_configure_opmode(adapter) != 0) {
    #line 629 
    qlcnic_83xx_idc_enter_failed_state(adapter,1);
    #line 630 
    return -5;
  }
  #line 633 
  if ((*((adapter->nic_ops)->init_driver))(adapter) != 0) {
    #line 634 
    qlcnic_83xx_idc_enter_failed_state(adapter,1);
    #line 635 
    return -5;
  }
  #line 638 
  if ((unsigned int)adapter->portnum == 0U) 
                                            #line 639 
                                            qlcnic_set_drv_version(adapter);
  #line 641 
  qlcnic_dcb_get_info(adapter->dcb);
  #line 642 
  qlcnic_83xx_idc_attach_driver(adapter);
  #line 644 
  return 0;
}

#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_update_idc_params(struct qlcnic_adapter *adapter)
{
  #line 649 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 651 
  qlcnic_83xx_idc_update_drv_presence_reg(adapter,1,1);
  #line 652 
  qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)0,1);
  #line 653 
  cif_set_bit_5(1L,& (adapter->ahw)->idc.status);
  #line 655 
  ahw->idc.quiesce_req = (unsigned char)0U;
  #line 656 
  ahw->idc.delay = 250ULL;
  #line 657 
  ahw->idc.err_code = 0;
  #line 658 
  ahw->idc.collect_dump = 0;
  #line 659 
  ahw->reset_context = (unsigned char)0U;
  #line 660 
  adapter->tx_timeo_cnt = (unsigned char)0U;
  #line 661 
  ahw->idc.delay_reset = (unsigned char)0U;
  #line 663 
  cif_clear_bit_5(2L,& adapter->state);
  #line 664 
  return;
}

#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_ready_state_entry(struct qlcnic_adapter *adapter)
{
  #line 679 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 681 
  if ((unsigned int)ahw->idc.prev_state != 3U) {
    #line 682 
    qlcnic_83xx_idc_update_idc_params(adapter);
    #line 684 
    if ((unsigned int)ahw->idc.prev_state == 4U || (unsigned int)ahw->idc.prev_state == 2U) {
      #line 686 
      if (qlcnic_83xx_idc_reattach_driver(adapter) != 0) 
                                                         #line 687 
                                                         return -5;
    }
  }
  #line 691 
  return 0;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_vnic_pf_entry(struct qlcnic_adapter *adapter)
{
  #line 708 
  u32 state;
  #line 709 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 712 
  state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 38U));
  #line 713 
  if (state != 1U) {
    #line 714 
    u8 tmp;
    #line 714 
    tmp = ahw->idc.vnic_wait_limit;
    #line 714 
    ahw->idc.vnic_wait_limit = (u8)((int)ahw->idc.vnic_wait_limit - 1);
    #line 714 
    ;
    #line 714 
    if ((unsigned int)tmp == 0U) {
      #line 715 
      qlcnic_83xx_idc_enter_failed_state(adapter,1);
      #line 716 
      return -5;
    }
    #line 718 
    _dev_info(& (adapter->pdev)->dev,(char *)"vNIC mode disabled\n");
    #line 719 
    return -5;
  }
  else 
    #line 723 
    if ((unsigned int)ahw->idc.vnic_state != 1U) {
      #line 724 
      qlcnic_83xx_idc_update_idc_params(adapter);
      #line 728 
      if ((unsigned int)ahw->idc.prev_state != 0U) {
        #line 729 
        if (qlcnic_83xx_idc_reattach_driver(adapter) != 0) 
                                                           #line 730 
                                                           return -5;
      }
      #line 732 
      (adapter->ahw)->idc.vnic_state = (unsigned char)1U;
      #line 733 
      _dev_info(& (adapter->pdev)->dev,(char *)"vNIC mode enabled\n");
    }
  #line 737 
  return 0;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_unknown_state(struct qlcnic_adapter *adapter)
{
  #line 742 
  (adapter->ahw)->idc.err_code = -5;
  #line 743 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: Device in unknown state\n",(char *)"qlcnic_83xx_idc_unknown_state");
  #line 745 
  cif_clear_bit_5(2L,& adapter->state);
  #line 746 
  return 0;
}

#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_cold_state_handler(struct qlcnic_adapter *adapter)
{
  #line 763 
  qlcnic_83xx_idc_update_drv_presence_reg(adapter,1,0);
  #line 764 
  qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)1,0);
  #line 766 
  if (qlcnic_load_fw_file != 0) 
                                #line 767 
                                qlcnic_83xx_idc_restart_hw(adapter,0);
  else {
    #line 769 
    if (qlcnic_83xx_check_hw_status(adapter) != 0) {
      #line 770 
      qlcnic_83xx_idc_enter_failed_state(adapter,0);
      #line 771 
      return -5;
    }
    else 
         #line 773 
         qlcnic_83xx_idc_enter_ready_state(adapter,0);
  }
  #line 776 
  return 0;
}

#line 791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_init_state(struct qlcnic_adapter *adapter)
{
  #line 793 
  int timeout;
  #line 794 
  u32 owner;
  #line 793 
  int ret = 0;
  #line 796 
  timeout = 30;
  #line 797 
  if ((unsigned int)(adapter->ahw)->idc.prev_state == 4U) {
    #line 798 
    owner = (unsigned int)qlcnic_83xx_idc_find_reset_owner_id(adapter);
    #line 799 
    if ((unsigned int)(adapter->ahw)->pci_func == owner) 
                                                         #line 800 
                                                         ret = qlcnic_83xx_idc_restart_hw(adapter,1);
  }
  else 
       #line 802 
       ret = qlcnic_83xx_idc_check_timeout(adapter,timeout);
  #line 805 
  return ret;
}

#line 819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_ready_state(struct qlcnic_adapter *adapter)
{
  #line 824 
  u32 val;
  #line 821 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 822 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  #line 823 
  int ret = 0;
  #line 827 
  if ((*(ahw->idc.state_entry))(adapter) != 0) 
                                               #line 828 
                                               return -5;
  #line 830 
  if (qlcnic_check_temp(adapter) != 0) 
    #line 831 
    if (ahw->temp == 3U) {
      #line 832 
      qlcnic_83xx_idc_check_fan_failure(adapter);
      #line 833 
      _dev_err(& (adapter->pdev)->dev,(char *)"Error: device temperature %d above limits\n",(adapter->ahw)->temp);
      #line 836 
      cif_clear_bit_5(2L,& mbx->status);
      #line 837 
      cif_set_bit_5(2L,& adapter->state);
      #line 838 
      qlcnic_83xx_idc_detach_driver(adapter);
      #line 839 
      qlcnic_83xx_idc_enter_failed_state(adapter,1);
      #line 840 
      return -5;
    }
  #line 844 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
  #line 845 
  ret = qlcnic_83xx_check_heartbeat(adapter);
  #line 846 
  if (ret != 0) {
    #line 847 
    adapter->flags |= 16384U;
    #line 848 
    if ((val & 1U) == 0U) {
      #line 849 
      cif_clear_bit_5(2L,& mbx->status);
      #line 850 
      cif_set_bit_5(2L,& adapter->state);
      #line 851 
      qlcnic_83xx_idc_enter_need_reset_state(adapter,1);
    }
    else {
      #line 853 
      netdev_info(adapter->netdev,(char *)"%s: Auto firmware recovery is disabled\n",(char *)"qlcnic_83xx_idc_ready_state");
      #line 855 
      qlcnic_83xx_idc_enter_failed_state(adapter,1);
    }
    #line 857 
    return -5;
  }
  #line 860 
  if ((val & 2U) != 0U || ahw->idc.collect_dump != 0) {
    #line 861 
    cif_clear_bit_5(2L,& mbx->status);
    #line 864 
    qlcnic_83xx_idc_enter_need_reset_state(adapter,1);
    #line 865 
    return ret;
  }
  #line 869 
  if ((unsigned int)ahw->reset_context != 0U && (val & 1U) == 0U) {
    #line 871 
    (adapter->ahw)->reset_context = (unsigned char)0U;
    #line 872 
    qlcnic_83xx_idc_tx_soft_reset(adapter);
    #line 873 
    return ret;
  }
  #line 877 
  if ((unsigned int)(adapter->ahw)->idc.quiesce_req != 0U) {
    #line 878 
    qlcnic_83xx_idc_enter_need_quiesce(adapter,1);
    #line 879 
    qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)0,1);
    #line 880 
    return ret;
  }
  #line 883 
  return ret;
}

#line 898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_need_reset_state(struct qlcnic_adapter *adapter)
{
  #line 900 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  #line 901 
  int ret = 0;
  #line 903 
  if ((unsigned int)(adapter->ahw)->idc.prev_state != 4U) {
    #line 904 
    qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)0,1);
    #line 905 
    cif_set_bit_5(2L,& adapter->state);
    #line 906 
    cif_clear_bit_5(2L,& mbx->status);
    #line 907 
    if ((unsigned int)(adapter->ahw)->nic_mode == 255U) 
                                                        #line 908 
                                                        qlcnic_83xx_disable_vnic_mode(adapter,1);
    #line 910 
    if (qlcnic_check_diag_status(adapter) != 0) {
      #line 911 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s: Wait for diag completion\n",(char *)"qlcnic_83xx_idc_need_reset_state");
      #line 913 
      (adapter->ahw)->idc.delay_reset = (unsigned char)1U;
      #line 914 
      return 0;
    }
    else {
      #line 916 
      qlcnic_83xx_idc_update_drv_ack_reg(adapter,1,1);
      #line 917 
      qlcnic_83xx_idc_detach_driver(adapter);
    }
  }
  #line 921 
  if (qlcnic_check_diag_status(adapter) != 0) {
    #line 922 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s: Wait for diag completion\n",(char *)"qlcnic_83xx_idc_need_reset_state");
    #line 924 
    return -1;
  }
  else {
    #line 926 
    if ((unsigned int)(adapter->ahw)->idc.delay_reset != 0U) {
      #line 927 
      qlcnic_83xx_idc_update_drv_ack_reg(adapter,1,1);
      #line 928 
      qlcnic_83xx_idc_detach_driver(adapter);
      #line 929 
      (adapter->ahw)->idc.delay_reset = (unsigned char)0U;
    }
    #line 933 
    ret = qlcnic_83xx_idc_check_reset_ack_reg(adapter);
    #line 934 
    if (ret != 0) {
      #line 935 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s: Waiting for reset ACK\n",(char *)"qlcnic_83xx_idc_need_reset_state");
      #line 937 
      return -1;
    }
  }
  #line 942 
  qlcnic_83xx_idc_enter_init_state(adapter,1);
  #line 944 
  return ret;
}

#line 947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_need_quiesce_state(struct qlcnic_adapter *adapter)
{
  #line 949 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: TBD\n",(char *)"qlcnic_83xx_idc_need_quiesce_state");
  #line 950 
  return 0;
}

#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_failed_state(struct qlcnic_adapter *adapter)
{
  #line 956 
  u32 val;
  #line 956 
  u32 owner;
  #line 955 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 958 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
  #line 959 
  if ((val & 1U) != 0U) {
    #line 960 
    owner = (unsigned int)qlcnic_83xx_idc_find_reset_owner_id(adapter);
    #line 961 
    if ((unsigned int)ahw->pci_func == owner) {
      #line 962 
      qlcnic_83xx_stop_hw(adapter);
      #line 963 
      qlcnic_dump_fw(adapter);
    }
  }
  #line 967 
  netdev_warn(adapter->netdev,(char *)"%s: Reboot will be required to recover the adapter!!\n",(char *)"qlcnic_83xx_idc_failed_state");
  #line 969 
  cif_clear_bit_5(2L,& adapter->state);
  #line 970 
  ahw->idc.err_code = -5;
  #line 972 
  return;
}

#line 975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_quiesce_state(struct qlcnic_adapter *adapter)
{
  #line 977 
  _dev_info(& (adapter->pdev)->dev,(char *)"%s: TBD\n",(char *)"qlcnic_83xx_idc_quiesce_state");
  #line 978 
  return 0;
}

#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_state_validity(struct qlcnic_adapter *adapter, u32 state)
{
  #line 984 
  u32 cur;
  #line 984 
  u32 prev;
  #line 984 
  u32 next;
  #line 986 
  cur = (unsigned int)(adapter->ahw)->idc.curr_state;
  #line 987 
  prev = (unsigned int)(adapter->ahw)->idc.prev_state;
  #line 988 
  next = state;
  #line 990 
  if (next + 4294967295U > 6U) {
    #line 992 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: curr %d, prev %d, next state %d is  invalid\n",(char *)"qlcnic_83xx_idc_check_state_validity",cur,prev,state);
    #line 995 
    return 1;
  }
  #line 998 
  if (cur == 0U && prev == 0U) 
    #line 1000 
    if (next != 1U && next != 3U) {
      #line 1002 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed, cur %d prev %d next %d\n",(char *)"qlcnic_83xx_idc_check_state_validity",cur,prev,next);
      #line 1005 
      return 1;
    }
  #line 1009 
  if (next == 2U) 
    #line 1010 
    if (prev + 4294967295U > 1U && prev != 4U) {
      #line 1013 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s: failed, cur %d prev %d next %d\n",(char *)"qlcnic_83xx_idc_check_state_validity",cur,prev,next);
      #line 1016 
      return 1;
    }
  #line 1020 
  return 0;
}

#line 1031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_set_vxlan_port(struct qlcnic_adapter *adapter)
{
  #line 1034 
  struct qlcnic_cmd_args cmd;
  #line 1033 
  u16 port = (adapter->ahw)->vxlan_port;
  #line 1035 
  int ret = 0;
  #line 1037 
  memset((void *)(& cmd),0,200UL);
  #line 1039 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,96U);
  #line 1041 
  if (ret != 0) 
                #line 1042 
                return ret;
  #line 1044 
  *(cmd.req.arg + 1U) = 536870912U;
  #line 1045 
  *(cmd.req.arg + 2U) = (unsigned int)(((int)port << 16) | 10);
  #line 1049 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  #line 1050 
  if (ret != 0) 
                #line 1051 
                netdev_err(adapter->netdev,(char *)"Failed to set VXLAN port %d in adapter\n",(int)port);
  #line 1055 
  qlcnic_free_mbx_args(& cmd);
  #line 1057 
  return ret;
}

#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_set_vxlan_parsing(struct qlcnic_adapter *adapter, bool state)
{
  #line 1064 
  struct qlcnic_cmd_args cmd;
  #line 1063 
  u16 vxlan_port = (adapter->ahw)->vxlan_port;
  #line 1065 
  int ret = 0;
  #line 1067 
  memset((void *)(& cmd),0,200UL);
  #line 1069 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,78U);
  #line 1071 
  if (ret != 0) 
                #line 1072 
                return ret;
  #line 1074 
  *(cmd.req.arg + 1U) = (unsigned int)((int)state != 0);
  #line 1077 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  #line 1078 
  if (ret != 0) {
    #line 1080 
    char *tmp;
    #line 1079 
    ;
    #line 1080 
    if ((int)state != 0) 
                         #line 1080 
                         tmp = (char *)"enable"; else 
                                                      #line 1080 
                                                      tmp = (char *)"disable";
    #line 1079 
    ;
    #line 1079 
    netdev_err(adapter->netdev,(char *)"Failed to %s VXLAN parsing for port %d\n",tmp,(int)vxlan_port);
  }
  else {
    #line 1084 
    char *tmp_0;
    #line 1083 
    ;
    #line 1084 
    if ((int)state != 0) 
                         #line 1084 
                         tmp_0 = (char *)"Enabled"; else 
                                                         #line 1084 
                                                         tmp_0 = (char *)"Disabled";
    #line 1083 
    ;
    #line 1083 
    netdev_info(adapter->netdev,(char *)"%s VXLAN parsing for port %d\n",tmp_0,(int)vxlan_port);
  }
  #line 1087 
  qlcnic_free_mbx_args(& cmd);
  #line 1089 
  return ret;
}

#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_periodic_tasks(struct qlcnic_adapter *adapter)
{
  #line 1094 
  if ((unsigned int)adapter->fhash.fnum != 0U) 
                                               #line 1095 
                                               qlcnic_prune_lb_filters(adapter);
  #line 1097 
  if ((adapter->flags & 1048576U) != 0U) {
    #line 1098 
    if (qlcnic_set_vxlan_port(adapter) != 0) 
                                             #line 1099 
                                             return;
    #line 1101 
    if (qlcnic_set_vxlan_parsing(adapter,(_Bool)1) != 0) 
                                                         #line 1102 
                                                         return;
    #line 1104 
    adapter->flags &= 4293918719U;
  }
  else 
    #line 1105 
    if ((adapter->flags & 2097152U) != 0U) {
      #line 1106 
      if (qlcnic_set_vxlan_parsing(adapter,(_Bool)0) != 0) 
                                                           #line 1107 
                                                           return;
      #line 1109 
      (adapter->ahw)->vxlan_port = (unsigned short)0U;
      #line 1110 
      adapter->flags &= 4292870143U;
    }
  #line 1112 
  return;
}

#line 1125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_idc_poll_dev_state(struct work_struct *work)
{
  #line 1130 
  void *__mptr;
  #line 1127 
  struct qlcnic_adapter *adapter;
  #line 1128 
  u32 state;
  #line 1130 
  __mptr = (void *)work;
  #line 1130 
  adapter = ((struct qlcnic_adapter *)(__mptr + 18446744073709550704U));
  #line 1131 
  state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
  #line 1133 
  if (qlcnic_83xx_idc_check_state_validity(adapter,state) != 0) {
    #line 1134 
    qlcnic_83xx_idc_log_state_history(adapter);
    #line 1135 
    (adapter->ahw)->idc.curr_state = (unsigned char)0U;
  }
  else 
       #line 1137 
       (adapter->ahw)->idc.curr_state = (unsigned char)state;
  #line 1140 
  switch ((int)(adapter->ahw)->idc.curr_state) {
    #line 1141 
    case 3: 
            #line 1141 
    ;
    #line 1142 
    qlcnic_83xx_idc_ready_state(adapter);
    #line 1143 
    break;
    #line 1144 
    case 4: 
            #line 1144 
    ;
    #line 1145 
    qlcnic_83xx_idc_need_reset_state(adapter);
    #line 1146 
    break;
    #line 1147 
    case 5: 
            #line 1147 
    ;
    #line 1148 
    qlcnic_83xx_idc_need_quiesce_state(adapter);
    #line 1149 
    break;
    #line 1150 
    case 6: 
            #line 1150 
    ;
    #line 1151 
    qlcnic_83xx_idc_failed_state(adapter);
    #line 1152 
    return;
    #line 1153 
    case 2: 
            #line 1153 
    ;
    #line 1154 
    qlcnic_83xx_idc_init_state(adapter);
    #line 1155 
    break;
    #line 1156 
    case 7: 
            #line 1156 
    ;
    #line 1157 
    qlcnic_83xx_idc_quiesce_state(adapter);
    #line 1158 
    break;
    #line 1159 
    default: 
             #line 1159 
    ;
    #line 1160 
    qlcnic_83xx_idc_unknown_state(adapter);
    #line 1161 
    return;
  }
  #line 1163 
  (adapter->ahw)->idc.prev_state = (adapter->ahw)->idc.curr_state;
  #line 1164 
  qlcnic_83xx_periodic_tasks(adapter);
  #line 1167 
  if ((int)test_bit(1L,& (adapter->ahw)->idc.status) != 0) 
                                                           #line 1168 
                                                           qlcnic_schedule_work(adapter,& qlcnic_83xx_idc_poll_dev_state,(int)(adapter->ahw)->idc.delay);
  #line 1170 
  return;
}

#line 1172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_setup_idc_parameters(struct qlcnic_adapter *adapter)
{
  #line 1174 
  u32 idc_params;
  #line 1174 
  u32 val;
  #line 1176 
  if (qlcnic_83xx_flash_read32(adapter,4096032U,(u8 *)(& idc_params),1) != 0) {
    #line 1178 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s:failed to get IDC params from flash\n",(char *)"qlcnic_83xx_setup_idc_parameters");
    #line 1180 
    adapter->dev_init_timeo = (unsigned char)30U;
    #line 1181 
    adapter->reset_ack_timeo = (unsigned char)10U;
  }
  else {
    #line 1183 
    adapter->dev_init_timeo = (unsigned char)idc_params;
    #line 1184 
    adapter->reset_ack_timeo = (unsigned char)(idc_params >> 16);
  }
  #line 1187 
  (adapter->ahw)->idc.curr_state = (unsigned char)0U;
  #line 1188 
  (adapter->ahw)->idc.prev_state = (unsigned char)0U;
  #line 1189 
  (adapter->ahw)->idc.delay = 250ULL;
  #line 1190 
  (adapter->ahw)->idc.err_code = 0;
  #line 1191 
  (adapter->ahw)->idc.collect_dump = 0;
  #line 1192 
  (adapter->ahw)->idc.name = (char **)(& qlc_83xx_idc_states);
  #line 1194 
  cif_clear_bit_5(2L,& adapter->state);
  #line 1195 
  cif_set_bit_5(1L,& (adapter->ahw)->idc.status);
  #line 1198 
  if (qlcnic_auto_fw_reset == 0) {
    #line 1200 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
    #line 1201 
    val |= 1U;
    #line 1202 
    writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
  }
  #line 1204 
  return;
}

#line 1207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_first_to_load_function_handler(struct qlcnic_adapter *adapter)
{
  #line 1209 
  u32 state;
  #line 1209 
  u32 val;
  #line 1211 
  if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                             #line 1212 
                                             return -5;
  #line 1215 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 18U));
  #line 1216 
  if (qlcnic_83xx_idc_update_major_version(adapter,0) != 0) {
    #line 1217 
    qlcnic_83xx_unlock_driver(adapter);
    #line 1218 
    return -5;
  }
  #line 1221 
  state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
  #line 1222 
  if (qlcnic_83xx_idc_check_state_validity(adapter,state) != 0) {
    #line 1223 
    qlcnic_83xx_unlock_driver(adapter);
    #line 1224 
    return -5;
  }
  #line 1227 
  if (state != 1U && qlcnic_load_fw_file != 0) {
    #line 1228 
    writel(1U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 12U));
    #line 1230 
    state = 1U;
  }
  #line 1233 
  (adapter->ahw)->idc.curr_state = (unsigned char)state;
  #line 1235 
  if (state == 1U) 
                   #line 1236 
                   qlcnic_83xx_idc_cold_state_handler(adapter);
  #line 1239 
  if (qlcnic_auto_fw_reset != 0) {
    #line 1240 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
    #line 1241 
    val &= 4294967294U;
    #line 1242 
    writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
  }
  #line 1245 
  qlcnic_83xx_unlock_driver(adapter);
  #line 1247 
  return 0;
}

#line 1250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_init(struct qlcnic_adapter *adapter)
{
  #line 1252 
  int ret = -5;
  #line 1254 
  qlcnic_83xx_setup_idc_parameters(adapter);
  #line 1256 
  if (qlcnic_83xx_get_reset_instruction_template(adapter) != 0) 
                                                                #line 1257 
                                                                return ret;
  #line 1259 
  if (qlcnic_83xx_idc_check_driver_presence_reg(adapter) == 0) {
    #line 1260 
    if (qlcnic_83xx_idc_first_to_load_function_handler(adapter) != 0) 
      #line 1261 
      return -5;
  }
  else {
    #line 1263 
    if (qlcnic_83xx_idc_check_major_version(adapter) != 0) 
                                                           #line 1264 
                                                           return -5;
  }
  #line 1267 
  qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)0,1);
  #line 1269 
  return 0;
}

#line 1272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_idc_exit(struct qlcnic_adapter *adapter)
{
  #line 1274 
  int id;
  #line 1275 
  u32 val;
  #line 1277 
  while (1) {
    #line 1277 
    if (! ((int)test_and_set_bit(2L,& adapter->state) != 0)) 
                                                             #line 1277 
                                                             break;
    #line 1278 
    usleep_range(10000UL,11000UL);
  }
  #line 1280 
  id = (int)readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 41U));
  #line 1281 
  id &= 255;
  #line 1283 
  if ((int)adapter->portnum == id) {
    #line 1284 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: wait for lock recovery.. %d\n",(char *)"qlcnic_83xx_idc_exit",id);
    #line 1286 
    msleep(20U);
    #line 1287 
    id = (int)readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 41U));
    #line 1288 
    id &= 255;
  }
  #line 1292 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 13U));
  #line 1293 
  val = (unsigned int)(~ (1 << (int)adapter->portnum)) & val;
  #line 1294 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 13U));
  #line 1295 
  cif_clear_bit_5(1L,& (adapter->ahw)->idc.status);
  #line 1296 
  cif_clear_bit_5(2L,& adapter->state);
  #line 1298 
  cancel_delayed_work_sync(& adapter->fw_work);
  #line 1299 
  return;
}

#line 1301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_idc_request_reset(struct qlcnic_adapter *adapter, u32 key)
{
  #line 1303 
  u32 val;
  #line 1305 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 1306 
                                                return;
  #line 1308 
  if (qlcnic_83xx_lock_driver(adapter) != 0) {
    #line 1309 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s:failed, please retry\n",(char *)"qlcnic_83xx_idc_request_reset");
    #line 1311 
    return;
  }
  #line 1314 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
  #line 1315 
  if ((val & 1U) != 0U) {
    #line 1316 
    netdev_info(adapter->netdev,(char *)"%s: Auto firmware recovery is disabled\n",(char *)"qlcnic_83xx_idc_request_reset");
    #line 1318 
    qlcnic_83xx_idc_enter_failed_state(adapter,0);
    #line 1319 
    qlcnic_83xx_unlock_driver(adapter);
    #line 1320 
    return;
  }
  #line 1323 
  if (key == 3735936685U) {
    #line 1324 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
    #line 1325 
    val |= 2U;
    #line 1326 
    writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
  }
  else 
    #line 1327 
    if (key == 3735944941U) 
                            #line 1328 
                            (adapter->ahw)->idc.collect_dump = 1;
  #line 1331 
  qlcnic_83xx_unlock_driver(adapter);
  #line 1332 
  return;
}

#line 1335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_copy_bootloader(struct qlcnic_adapter *adapter)
{
  #line 1337 
  u8 *p_cache;
  #line 1338 
  u32 src;
  #line 1338 
  u32 size;
  #line 1339 
  u64 dest;
  #line 1340 
  int ret = -5;
  #line 1342 
  src = 65536U;
  #line 1343 
  dest = (unsigned long long)readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 5U));
  #line 1344 
  size = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 6U));
  #line 1347 
  if ((size & 15U) != 0U) 
                          #line 1348 
                          size = (size + 16U) & 4294967280U;
  #line 1350 
  p_cache = (u8 *)cif_vzalloc_2((unsigned long)size);
  #line 1351 
  if (p_cache == (u8 *)0U) 
                           #line 1352 
                           return -12;
  #line 1354 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,src,p_cache,(int)(size / 4U));
  #line 1356 
  if (ret != 0) {
    #line 1357 
    cif_vfree_1((void *)p_cache);
    #line 1358 
    return ret;
  }
  #line 1361 
  ret = qlcnic_ms_mem_write128(adapter,dest,(u32 *)p_cache,size / 16U);
  #line 1363 
  if (ret != 0) {
    #line 1364 
    cif_vfree_1((void *)p_cache);
    #line 1365 
    return ret;
  }
  #line 1367 
  cif_vfree_1((void *)p_cache);
  #line 1369 
  return ret;
}

#line 1372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_copy_fw_file(struct qlcnic_adapter *adapter)
{
  #line 1376 
  u32 dest;
  #line 1376 
  u32 *p_cache;
  #line 1376 
  u32 *temp;
  #line 1377 
  int i;
  #line 1378 
  __le32 *temp_le;
  #line 1379 
  u8 data[16U];
  #line 1380 
  size_t size;
  #line 1381 
  u64 addr;
  #line 1374 
  struct qlc_83xx_fw_info *fw_info = (adapter->ahw)->fw_info;
  #line 1375 
  struct firmware *fw = fw_info->fw;
  #line 1377 
  int ret = -5;
  #line 1383 
  temp = (u32 *)cif_vzalloc_2(fw->size);
  #line 1384 
  if (temp == (u32 *)0U) {
    #line 1385 
    cif_release_firmware_0(fw);
    #line 1386 
    fw_info->fw = (struct firmware *)0;
    #line 1387 
    return -12;
  }
  #line 1390 
  temp_le = (__le32 *)fw->data;
  #line 1395 
  i = 0;
  #line 1395 
  while ((unsigned long)i < fw->size / 4UL) {
    #line 1396 
    *(temp + (unsigned long)i) = *(temp_le + (unsigned long)i);
    #line 1395 
    i ++;
  }
  #line 1398 
  dest = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 7U));
  #line 1399 
  size = fw->size & 18446744073709551600UL;
  #line 1400 
  p_cache = temp;
  #line 1401 
  addr = (unsigned long long)dest;
  #line 1403 
  ret = qlcnic_ms_mem_write128(adapter,addr,p_cache,(unsigned int)(size / 16UL));
  #line 1405 
  if (ret != 0) {
    #line 1406 
    _dev_err(& (adapter->pdev)->dev,(char *)"MS memory write failed\n");
    #line 1407 
    goto exit;
  }
  #line 1411 
  if ((fw->size & 15UL) != 0UL) {
    #line 1412 
    addr = (unsigned long long)((unsigned long)dest + size);
    #line 1413 
    i = 0;
    #line 1413 
    while ((unsigned long)i < (fw->size & 15UL)) {
      #line 1414 
      data[i] = *((u8 *)temp + ((unsigned long)i + size));
      #line 1413 
      i ++;
    }
    #line 1415 
    while (i <= 15) {
      #line 1416 
      data[i] = (unsigned char)0U;
      #line 1415 
      i ++;
    }
    #line 1417 
    ret = qlcnic_ms_mem_write128(adapter,addr,(u32 *)(& data),1U);
    #line 1419 
    if (ret != 0) {
      #line 1420 
      _dev_err(& (adapter->pdev)->dev,(char *)"MS memory write failed\n");
      #line 1422 
      goto exit;
    }
  }
  #line 1426 
  exit: 
        #line 1426 
  ;
  #line 1427 
  cif_release_firmware_0(fw);
  #line 1428 
  fw_info->fw = (struct firmware *)0;
  #line 1429 
  cif_vfree_1((void *)temp);
  #line 1431 
  return ret;
}

#line 1434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_dump_pause_control_regs(struct qlcnic_adapter *adapter)
{
  #line 1436 
  int i;
  #line 1436 
  int j;
  #line 1437 
  u32 val = 0U;
  #line 1437 
  u32 val1 = 0U;
  #line 1437 
  u32 reg = 0U;
  #line 1438 
  int err = 0;
  #line 1440 
  val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,220201604UL,& err);
  #line 1441 
  if (err == -5) 
                 #line 1442 
                 return;
  #line 1443 
  _dev_info(& (adapter->pdev)->dev,(char *)"SRE-Shim Ctrl:0x%x\n",val);
  #line 1445 
  j = 0;
  #line 1445 
  while (j <= 1) {
    #line 1446 
    if (j == 0) {
      #line 1447 
      _dev_info(& (adapter->pdev)->dev,(char *)"Port 0 RxB Pause Threshold Regs[TC7..TC0]:");
      #line 1449 
      reg = 186647460U;
    }
    else 
      #line 1450 
      if (j == 1) {
        #line 1451 
        _dev_info(& (adapter->pdev)->dev,(char *)"Port 1 RxB Pause Threshold Regs[TC7..TC0]:");
        #line 1453 
        reg = 186651556U;
      }
    #line 1455 
    i = 0;
    #line 1455 
    while (i <= 7) {
      {
        #line 1456 
        val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,
                                                (unsigned long)((unsigned int)(
                                                                i * 4) + reg),
                                                & err);
        #line 1457 
        if (err == -5) 
                       #line 1458 
                       return;
        #line 1459 
        _dev_info(& (adapter->pdev)->dev,(char *)"0x%x  ",val);
      }
      #line 1455 
      i ++;
    }
    #line 1461 
    _dev_info(& (adapter->pdev)->dev,(char *)"\n");
    #line 1445 
    j ++;
  }
  #line 1464 
  j = 0;
  #line 1464 
  while (j <= 1) {
    #line 1465 
    if (j == 0) {
      #line 1466 
      _dev_info(& (adapter->pdev)->dev,(char *)"Port 0 RxB TC Max Cell Registers[4..1]:");
      #line 1468 
      reg = 186647432U;
    }
    else 
      #line 1469 
      if (j == 1) {
        #line 1470 
        _dev_info(& (adapter->pdev)->dev,(char *)"Port 1 RxB TC Max Cell Registers[4..1]:");
        #line 1472 
        reg = 186651528U;
      }
    #line 1474 
    i = 0;
    #line 1474 
    while (i <= 3) {
      {
        #line 1475 
        val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,
                                                (unsigned long)((unsigned int)(
                                                                i * 4) + reg),
                                                & err);
        #line 1476 
        if (err == -5) 
                       #line 1477 
                       return;
        #line 1478 
        _dev_info(& (adapter->pdev)->dev,(char *)"0x%x  ",val);
      }
      #line 1474 
      i ++;
    }
    #line 1480 
    _dev_info(& (adapter->pdev)->dev,(char *)"\n");
    #line 1464 
    j ++;
  }
  #line 1483 
  j = 0;
  #line 1483 
  while (j <= 1) {
    #line 1484 
    if (j == 0) {
      #line 1485 
      _dev_info(& (adapter->pdev)->dev,(char *)"Port 0 RxB Rx TC Stats[TC7..TC0]:");
      #line 1487 
      reg = 186647452U;
    }
    else 
      #line 1488 
      if (j == 1) {
        #line 1489 
        _dev_info(& (adapter->pdev)->dev,(char *)"Port 1 RxB Rx TC Stats[TC7..TC0]:");
        #line 1491 
        reg = 186651548U;
      }
    #line 1493 
    i = 7;
    #line 1493 
    while (i >= 0) {
      {
        #line 1494 
        val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)reg,
                                                & err);
        #line 1495 
        if (err == -5) 
                       #line 1496 
                       return;
        #line 1497 
        val &= 536870911U;
        #line 1498 
        (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)reg,(unsigned int)(i << 29) | val);
        #line 1499 
        val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)reg,
                                                & err);
        #line 1500 
        if (err == -5) 
                       #line 1501 
                       return;
        #line 1502 
        _dev_info(& (adapter->pdev)->dev,(char *)"0x%x  ",val);
      }
      #line 1493 
      i --;
    }
    #line 1504 
    _dev_info(& (adapter->pdev)->dev,(char *)"\n");
    #line 1483 
    j ++;
  }
  #line 1507 
  val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,186648324UL,& err);
  #line 1508 
  if (err == -5) 
                 #line 1509 
                 return;
  #line 1510 
  val1 = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,186652420UL,& err);
  #line 1511 
  if (err == -5) 
                 #line 1512 
                 return;
  #line 1513 
  _dev_info(& (adapter->pdev)->dev,(char *)"IFB-Pause Thresholds: Port 2:0x%x, Port 3:0x%x\n",val,val1);
  #line 1514 
  return;
}

#line 1519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_disable_pause_frames(struct qlcnic_adapter *adapter)
{
  #line 1521 
  u32 i;
  #line 1521 
  u32 j;
  #line 1521 
  u32 reg = 0U;
  #line 1523 
  if (qlcnic_83xx_lock_driver(adapter) != 0) {
    #line 1524 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s:failed to acquire driver lock\n",(char *)"qlcnic_83xx_disable_pause_frames");
    #line 1526 
    return;
  }
  #line 1529 
  qlcnic_83xx_dump_pause_control_regs(adapter);
  #line 1530 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,220201604UL,0U);
  #line 1532 
  j = 0U;
  #line 1532 
  while (j <= 1U) {
    #line 1533 
    if (j == 0U) 
                 #line 1534 
                 reg = 186647460U;
    else 
      #line 1535 
      if (j == 1U) 
                   #line 1536 
                   reg = 186651556U;
    #line 1538 
    i = 0U;
    #line 1538 
    while (i <= 7U) {
      #line 1539 
      (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)(i * 4U + reg),0U);
      #line 1538 
      i ++;
    }
    #line 1532 
    j ++;
  }
  #line 1542 
  j = 0U;
  #line 1542 
  while (j <= 1U) {
    #line 1543 
    if (j == 0U) 
                 #line 1544 
                 reg = 186647432U;
    else 
      #line 1545 
      if (j == 1U) 
                   #line 1546 
                   reg = 186651528U;
    #line 1548 
    i = 0U;
    #line 1548 
    while (i <= 3U) {
      #line 1549 
      (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)(i * 4U + reg),67044351U);
      #line 1548 
      i ++;
    }
    #line 1542 
    j ++;
  }
  #line 1552 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,186648324UL,0U);
  #line 1553 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,186652420UL,0U);
  #line 1554 
  _dev_info(& (adapter->pdev)->dev,(char *)"Disabled pause frames successfully on all ports\n");
  #line 1556 
  qlcnic_83xx_unlock_driver(adapter);
  #line 1557 
  return;
}

#line 1559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_take_eport_out_of_reset(struct qlcnic_adapter *adapter)
{
  #line 1561 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671632992UL,0U);
  #line 1562 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633008UL,0U);
  #line 1563 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633024UL,0U);
  #line 1564 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633040UL,0U);
  #line 1565 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633056UL,0U);
  #line 1566 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633072UL,0U);
  #line 1567 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633088UL,0U);
  #line 1568 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633104UL,0U);
  #line 1569 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671632976UL,1U);
  #line 1570 
  return;
}

#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_check_heartbeat(struct qlcnic_adapter *p_dev)
{
  #line 1574 
  u32 heartbeat;
  #line 1574 
  u32 peg_status;
  #line 1575 
  int retries;
  #line 1575 
  int ret = -5;
  #line 1575 
  int err = 0;
  #line 1577 
  retries = 10;
  #line 1578 
  p_dev->heartbeat = readl((p_dev->ahw)->pci_base0 + (unsigned long)*((p_dev->ahw)->reg_tbl + 2U));
  #line 1581 
  while (1) {
    #line 1582 
    msleep(200U);
    #line 1583 
    heartbeat = readl((p_dev->ahw)->pci_base0 + (unsigned long)*((p_dev->ahw)->reg_tbl + 2U));
    #line 1585 
    if (p_dev->heartbeat != heartbeat) {
      #line 1586 
      ret = 0;
      #line 1587 
      break;
    }
    #line 1589 
    retries --;
    #line 1589 
    if (! (retries != 0)) 
                          #line 1581 
                          break;
  }
  #line 1591 
  if (ret != 0) {
    #line 1592 
    _dev_err(& (p_dev->pdev)->dev,(char *)"firmware hang detected\n");
    #line 1593 
    qlcnic_83xx_take_eport_out_of_reset(p_dev);
    #line 1594 
    qlcnic_83xx_disable_pause_frames(p_dev);
    #line 1595 
    peg_status = readl((p_dev->ahw)->pci_base0 + (unsigned long)*((p_dev->ahw)->reg_tbl));
    #line 1597 
    ;
    #line 1597 
    ;
    #line 1597 
    _dev_info(& (p_dev->pdev)->dev,(char *)"Dumping HW/FW registers\n",peg_status,readl((p_dev->ahw)->pci_base0 + (unsigned long)*((p_dev->ahw)->reg_tbl + 1U)),(*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,872415292UL,& err),(*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,873463868UL,& err),(*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,874512444UL,& err),(*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,875561020UL,& err),(*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,883949628UL,& err));
    #line 1609 
    if (((peg_status >> 8) & 2097151U) == 103U) 
                                                #line 1610 
                                                _dev_err(& (p_dev->pdev)->dev,(char *)"Device is being reset err code 0x00006700.\n");
  }
  #line 1614 
  return ret;
}

#line 1617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_check_cmd_peg_status(struct qlcnic_adapter *p_dev)
{
  #line 1620 
  u32 val;
  #line 1619 
  int retries = 60;
  #line 1622 
  while (1) {
    #line 1623 
    val = readl((p_dev->ahw)->pci_base0 + (unsigned long)*((p_dev->ahw)->reg_tbl + 16U));
    #line 1624 
    if (val == 65281U) 
                       #line 1625 
                       return 0;
    #line 1626 
    msleep(500U);
    #line 1627 
    retries --;
    #line 1627 
    if (! (retries != 0)) 
                          #line 1622 
                          break;
  }
  #line 1629 
  _dev_err(& (p_dev->pdev)->dev,(char *)"%s: failed, state = 0x%x\n",(char *)"qlcnic_83xx_check_cmd_peg_status",val);
  #line 1630 
  return -5;
}

#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_check_hw_status(struct qlcnic_adapter *p_dev)
{
  #line 1635 
  int err;
  #line 1637 
  err = qlcnic_83xx_check_cmd_peg_status(p_dev);
  #line 1638 
  if (err != 0) 
                #line 1639 
                return err;
  #line 1641 
  err = qlcnic_83xx_check_heartbeat(p_dev);
  #line 1642 
  if (err != 0) 
                #line 1643 
                return err;
  #line 1645 
  return err;
}

#line 1648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_poll_reg(struct qlcnic_adapter *p_dev, u32 addr, int duration, u32 mask, u32 status)
{
  #line 1651 
  int timeout_error;
  #line 1652 
  u32 value;
  #line 1653 
  u8 retries;
  #line 1651 
  int err = 0;
  #line 1655 
  value = (unsigned int)(*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,(unsigned long)addr,& err);
  #line 1656 
  if (err == -5) 
                 #line 1657 
                 return err;
  #line 1658 
  retries = (unsigned char)(duration / 10);
  #line 1660 
  while (1) {
    #line 1670 
    u8 tmp_1;
    #line 1661 
    if ((value & mask) != status) {
      #line 1662 
      timeout_error = 1;
      #line 1663 
      msleep((unsigned int)(duration / 10));
      #line 1664 
      value = (unsigned int)(*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,(unsigned long)addr,
                                              & err);
      #line 1665 
      if (err == -5) 
                     #line 1666 
                     return err;
    }
    else {
      #line 1668 
      timeout_error = 0;
      #line 1669 
      break;
    }
    #line 1670 
    tmp_1 = retries;
    #line 1670 
    retries = (u8)((int)retries - 1);
    #line 1670 
    ;
    #line 1670 
    if (! ((unsigned int)tmp_1 != 0U)) 
                                       #line 1660 
                                       break;
  }
  #line 1673 
  if (timeout_error != 0) {
    #line 1674 
    ((p_dev->ahw)->reset.seq_error) ++;
    #line 1675 
    _dev_err(& (p_dev->pdev)->dev,(char *)"%s: Timeout Err, entry_num = %d\n",(char *)"qlcnic_83xx_poll_reg",(p_dev->ahw)->reset.seq_index);
    #line 1678 
    _dev_err(& (p_dev->pdev)->dev,(char *)"0x%08x 0x%08x 0x%08x\n",value,mask,status);
  }
  #line 1683 
  return timeout_error;
}

#line 1686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_reset_template_checksum(struct qlcnic_adapter *p_dev)
{
  #line 1688 
  u32 sum = 0U;
  #line 1689 
  u16 *buff = (u16 *)(p_dev->ahw)->reset.buff;
  #line 1690 
  int count = (int)((unsigned int)((p_dev->ahw)->reset.hdr)->size / 2U);
  #line 1692 
  while (1) {
    #line 1692 
    int tmp_0;
    #line 1693 
    u16 *tmp;
    #line 1692 
    tmp_0 = count;
    #line 1692 
    count --;
    #line 1692 
    ;
    #line 1692 
    if (! (tmp_0 > 0)) 
                       #line 1692 
                       break;
    #line 1693 
    tmp = buff;
    #line 1693 
    buff ++;
    #line 1693 
    sum = (unsigned int)*tmp + sum;
  }
  #line 1695 
  while (sum >> 16 != 0U) 
                          #line 1696 
                          sum = (sum & 65535U) + (sum >> 16);
  #line 1698 
  if (sum != 4294967295U) 
                          #line 1699 
                          return 0;
  else {
    #line 1701 
    _dev_err(& (p_dev->pdev)->dev,(char *)"%s: failed\n",(char *)"qlcnic_83xx_reset_template_checksum");
    #line 1702 
    return -1;
  }
}

#line 1706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_get_reset_instruction_template(struct qlcnic_adapter *p_dev)
{
  #line 1709 
  u32 addr;
  #line 1709 
  u32 count;
  #line 1709 
  u32 prev_ver;
  #line 1709 
  u32 curr_ver;
  #line 1710 
  u8 *p_buff;
  #line 1708 
  struct qlcnic_hardware_context *ahw = p_dev->ahw;
  #line 1712 
  if (ahw->reset.buff != (u8 *)0U) {
    #line 1713 
    prev_ver = p_dev->fw_version;
    #line 1714 
    curr_ver = (unsigned int)qlcnic_83xx_get_fw_version(p_dev);
    #line 1715 
    if (curr_ver > prev_ver) 
                             #line 1716 
                             kfree((void *)ahw->reset.buff); else 
                                                                  #line 1718 
                                                                  return 0;
  }
  #line 1721 
  ahw->reset.seq_error = 0;
  #line 1722 
  ahw->reset.buff = (u8 *)kzalloc_5(8192UL,3264U);
  #line 1723 
  if ((p_dev->ahw)->reset.buff == (u8 *)0U) 
                                            #line 1724 
                                            return -12;
  #line 1726 
  p_buff = (p_dev->ahw)->reset.buff;
  #line 1727 
  addr = 5177344U;
  #line 1728 
  count = 4U;
  #line 1731 
  if (qlcnic_83xx_flash_read32(p_dev,addr,p_buff,(int)count) != 0) {
    #line 1732 
    _dev_err(& (p_dev->pdev)->dev,(char *)"%s: flash read failed\n",(char *)"qlcnic_83xx_get_reset_instruction_template");
    #line 1733 
    return -5;
  }
  #line 1735 
  ahw->reset.hdr = (struct qlc_83xx_reset_hdr *)ahw->reset.buff;
  #line 1736 
  addr = (unsigned int)((int)(ahw->reset.hdr)->hdr_size + 5177344);
  #line 1737 
  p_buff = ahw->reset.buff + (unsigned long)(ahw->reset.hdr)->hdr_size;
  #line 1738 
  count = (unsigned int)((unsigned long)((int)(ahw->reset.hdr)->size - (int)(ahw->reset.hdr)->hdr_size) / 4UL);
  #line 1741 
  if (qlcnic_83xx_flash_read32(p_dev,addr,p_buff,(int)count) != 0) {
    #line 1742 
    _dev_err(& (p_dev->pdev)->dev,(char *)"%s: flash read failed\n",(char *)"qlcnic_83xx_get_reset_instruction_template");
    #line 1743 
    return -5;
  }
  #line 1746 
  if (qlcnic_83xx_reset_template_checksum(p_dev) != 0) 
                                                       #line 1747 
                                                       return -5;
  #line 1749 
  ahw->reset.init_offset = ahw->reset.buff + (unsigned long)(ahw->reset.hdr)->init_offset;
  #line 1750 
  ahw->reset.start_offset = ahw->reset.buff + (unsigned long)(ahw->reset.hdr)->start_offset;
  #line 1752 
  ahw->reset.stop_offset = ahw->reset.buff + (unsigned long)(ahw->reset.hdr)->hdr_size;
  #line 1753 
  return 0;
}

#line 1757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_read_write_crb_reg(struct qlcnic_adapter *p_dev, u32 raddr, u32 waddr)
{
  #line 1761 
  u32 value;
  #line 1760 
  int err = 0;
  #line 1763 
  value = (unsigned int)(*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,(unsigned long)raddr,& err);
  #line 1764 
  if (err == -5) 
                 #line 1765 
                 return;
  #line 1766 
  qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)waddr,value);
  #line 1767 
  return;
}

#line 1770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_rmw_crb_reg(struct qlcnic_adapter *p_dev, u32 raddr, u32 waddr, struct qlc_83xx_rmw *p_rmw_hdr)
{
  #line 1775 
  u32 value;
  #line 1774 
  int err = 0;
  #line 1777 
  if ((unsigned int)p_rmw_hdr->index_a != 0U) 
                                              #line 1778 
                                              value = (p_dev->ahw)->reset.array[(int)p_rmw_hdr->index_a];
  else {
    #line 1780 
    value = (unsigned int)(*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,(unsigned long)raddr,& err);
    #line 1781 
    if (err == -5) 
                   #line 1782 
                   return;
  }
  #line 1785 
  value = p_rmw_hdr->mask & value;
  #line 1786 
  value <<= (int)p_rmw_hdr->shl;
  #line 1787 
  value >>= (int)p_rmw_hdr->shr;
  #line 1788 
  value = p_rmw_hdr->or_value | value;
  #line 1789 
  value = p_rmw_hdr->xor_value ^ value;
  #line 1790 
  qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)waddr,value);
  #line 1791 
  return;
}

#line 1794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_write_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  #line 1797 
  int i;
  #line 1798 
  struct qlc_83xx_entry *entry;
  #line 1800 
  entry = (struct qlc_83xx_entry *)((char *)p_hdr + 8UL);
  #line 1803 
  i = 0;
  #line 1803 
  while ((int)p_hdr->count > i) {
    #line 1804 
    qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)entry->arg1,entry->arg2);
    #line 1806 
    if ((unsigned int)p_hdr->delay != 0U) 
      #line 1807 
      if (0 != 0) 
        #line 1807 
        if ((unsigned int)p_hdr->delay > 19999U) 
                                                 #line 1807 
                                                 __bad_udelay(); else 
                                                                   #line 1807 
                                                                   __const_udelay((unsigned long)p_hdr->delay * 4295UL);
      else 
           #line 1807 
           __udelay((unsigned long)p_hdr->delay);
    #line 1803 
    i ++;
    #line 1803 
    entry ++;
  }
  #line 1810 
  return;
}

#line 1812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_read_write_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  #line 1815 
  int i;
  #line 1816 
  struct qlc_83xx_entry *entry;
  #line 1818 
  entry = (struct qlc_83xx_entry *)((char *)p_hdr + 8UL);
  #line 1821 
  i = 0;
  #line 1821 
  while ((int)p_hdr->count > i) {
    #line 1822 
    qlcnic_83xx_read_write_crb_reg(p_dev,entry->arg1,entry->arg2);
    #line 1824 
    if ((unsigned int)p_hdr->delay != 0U) 
      #line 1825 
      if (0 != 0) 
        #line 1825 
        if ((unsigned int)p_hdr->delay > 19999U) 
                                                 #line 1825 
                                                 __bad_udelay(); else 
                                                                   #line 1825 
                                                                   __const_udelay((unsigned long)p_hdr->delay * 4295UL);
      else 
           #line 1825 
           __udelay((unsigned long)p_hdr->delay);
    #line 1821 
    i ++;
    #line 1821 
    entry ++;
  }
  #line 1828 
  return;
}

#line 1830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_poll_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  #line 1833 
  long delay;
  #line 1834 
  struct qlc_83xx_entry *entry;
  #line 1835 
  struct qlc_83xx_poll *poll;
  #line 1836 
  int i;
  #line 1837 
  unsigned long arg1;
  #line 1837 
  unsigned long arg2;
  #line 1836 
  int err = 0;
  #line 1839 
  poll = (struct qlc_83xx_poll *)((char *)p_hdr + 8UL);
  #line 1842 
  entry = (struct qlc_83xx_entry *)((char *)poll + 8UL);
  #line 1844 
  delay = (long)p_hdr->delay;
  #line 1846 
  if (delay == 0L) {
    #line 1847 
    i = 0;
    #line 1847 
    while ((int)p_hdr->count > i) {
      #line 1848 
      qlcnic_83xx_poll_reg(p_dev,entry->arg1,(int)delay,poll->mask,poll->status);
      #line 1847 
      i ++;
      #line 1847 
      entry ++;
    }
  }
  else {
    #line 1852 
    i = 0;
    #line 1852 
    while ((int)p_hdr->count > i) {
      #line 1853 
      arg1 = (unsigned long)entry->arg1;
      #line 1854 
      arg2 = (unsigned long)entry->arg2;
      #line 1855 
      if (delay != 0L) {
        #line 1856 
        if (qlcnic_83xx_poll_reg(p_dev,(unsigned int)arg1,(int)delay,poll->mask,
                           poll->status) != 0) {
          #line 1860 
          (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,arg1,& err);
          #line 1861 
          if (err == -5) 
                         #line 1862 
                         return;
          #line 1863 
          (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,arg2,& err);
          #line 1864 
          if (err == -5) 
                         #line 1865 
                         return;
        }
      }
      #line 1852 
      i ++;
      #line 1852 
      entry ++;
    }
  }
  #line 1869 
  return;
}

#line 1873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_poll_write_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  #line 1876 
  int i;
  #line 1877 
  long delay;
  #line 1878 
  struct qlc_83xx_quad_entry *entry;
  #line 1879 
  struct qlc_83xx_poll *poll;
  #line 1881 
  poll = (struct qlc_83xx_poll *)((char *)p_hdr + 8UL);
  #line 1883 
  entry = (struct qlc_83xx_quad_entry *)((char *)poll + 8UL);
  #line 1885 
  delay = (long)p_hdr->delay;
  #line 1887 
  i = 0;
  #line 1887 
  while ((int)p_hdr->count > i) {
    #line 1888 
    qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)entry->dr_addr,entry->dr_value);
    #line 1890 
    qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)entry->ar_addr,entry->ar_value);
    #line 1892 
    if (delay != 0L) 
                     #line 1893 
                     qlcnic_83xx_poll_reg(p_dev,entry->ar_addr,(int)delay,poll->mask,poll->status);
    #line 1887 
    i ++;
    #line 1887 
    entry ++;
  }
  #line 1896 
  return;
}

#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_read_modify_write(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  #line 1902 
  int i;
  #line 1903 
  struct qlc_83xx_entry *entry;
  #line 1904 
  struct qlc_83xx_rmw *rmw_hdr;
  #line 1906 
  rmw_hdr = (struct qlc_83xx_rmw *)((char *)p_hdr + 8UL);
  #line 1909 
  entry = (struct qlc_83xx_entry *)((char *)rmw_hdr + 16UL);
  #line 1912 
  i = 0;
  #line 1912 
  while ((int)p_hdr->count > i) {
    #line 1913 
    qlcnic_83xx_rmw_crb_reg(p_dev,entry->arg1,entry->arg2,rmw_hdr);
    #line 1915 
    if ((unsigned int)p_hdr->delay != 0U) 
      #line 1916 
      if (0 != 0) 
        #line 1916 
        if ((unsigned int)p_hdr->delay > 19999U) 
                                                 #line 1916 
                                                 __bad_udelay(); else 
                                                                   #line 1916 
                                                                   __const_udelay((unsigned long)p_hdr->delay * 4295UL);
      else 
           #line 1916 
           __udelay((unsigned long)p_hdr->delay);
    #line 1912 
    i ++;
    #line 1912 
    entry ++;
  }
  #line 1919 
  return;
}

#line 1920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_pause(struct qlc_83xx_entry_hdr *p_hdr)
{
  #line 1922 
  if ((unsigned int)p_hdr->delay != 0U) 
    #line 1923 
    if (0 != 0 && (unsigned int)p_hdr->delay <= 5U) 
      #line 1923 
      if (0 != 0) 
        #line 1923 
        if ((unsigned int)p_hdr->delay * 1000U > 19999U) 
                                                         #line 1923 
                                                         __bad_udelay(); else 
                                                                    #line 1923 
                                                                    __const_udelay((unsigned long)((unsigned int)p_hdr->delay * 1000U) * 4295UL);
      else 
           #line 1923 
           __udelay((unsigned long)((unsigned int)p_hdr->delay * 1000U));
    else {
      #line 1923 
      unsigned long __ms = (unsigned long)p_hdr->delay;
      #line 1923 
      while (1) {
        #line 1923 
        unsigned long tmp;
        #line 1923 
        tmp = __ms;
        #line 1923 
        __ms --;
        #line 1923 
        ;
        #line 1923 
        if (! (tmp != 0UL)) 
                            #line 1923 
                            break;
        #line 1923 
        __const_udelay(4295000UL);
      }
    }
  #line 1927 
  return;
}

#line 1927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_poll_read_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  #line 1930 
  long delay;
  #line 1931 
  int index;
  #line 1931 
  int i;
  #line 1931 
  int j;
  #line 1931 
  int err;
  #line 1932 
  struct qlc_83xx_quad_entry *entry;
  #line 1933 
  struct qlc_83xx_poll *poll;
  #line 1934 
  unsigned long addr;
  #line 1936 
  poll = (struct qlc_83xx_poll *)((char *)p_hdr + 8UL);
  #line 1939 
  entry = (struct qlc_83xx_quad_entry *)((char *)poll + 8UL);
  #line 1941 
  delay = (long)p_hdr->delay;
  #line 1943 
  i = 0;
  #line 1943 
  while ((int)p_hdr->count > i) {
    #line 1944 
    qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)entry->ar_addr,entry->ar_value);
    #line 1946 
    if (delay != 0L) {
      #line 1947 
      if (qlcnic_83xx_poll_reg(p_dev,entry->ar_addr,(int)delay,poll->mask,
                             poll->status) == 0) {
        #line 1955 
        int tmp;
        #line 1949 
        index = (p_dev->ahw)->reset.array_index;
        #line 1950 
        addr = (unsigned long)entry->dr_addr;
        #line 1951 
        j = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,addr,& err);
        #line 1952 
        if (err == -5) 
                       #line 1953 
                       return;
        #line 1955 
        tmp = index;
        #line 1955 
        index ++;
        #line 1955 
        (p_dev->ahw)->reset.array[tmp] = (unsigned int)j;
        #line 1957 
        if (index == 16) 
                         #line 1958 
                         (p_dev->ahw)->reset.array_index = 1;
      }
    }
    #line 1943 
    i ++;
    #line 1943 
    entry ++;
  }
  #line 1961 
  return;
}

#line 1964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
__inline static void qlcnic_83xx_seq_end(struct qlcnic_adapter *p_dev)
{
  #line 1966 
  (p_dev->ahw)->reset.seq_end = (unsigned char)1U;
  #line 1967 
  return;
}

#line 1969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_template_end(struct qlcnic_adapter *p_dev)
{
  #line 1971 
  (p_dev->ahw)->reset.template_end = (unsigned char)1U;
  #line 1972 
  if ((p_dev->ahw)->reset.seq_error == 0) 
                                          #line 1973 
                                          _dev_err(& (p_dev->pdev)->dev,(char *)"HW restart process completed successfully.\n"); else 
                                                                    #line 1976 
                                                                    _dev_err(& (p_dev->pdev)->dev,(char *)"HW restart completed with timeout errors.\n");
  #line 1977 
  return;
}

#line 1994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_exec_template_cmd(struct qlcnic_adapter *p_dev, char *p_buff)
{
  #line 1997 
  int index;
  #line 1997 
  int entries;
  #line 1998 
  struct qlc_83xx_entry_hdr *p_hdr;
  #line 1999 
  char *entry = p_buff;
  #line 2001 
  (p_dev->ahw)->reset.seq_end = (unsigned char)0U;
  #line 2002 
  (p_dev->ahw)->reset.template_end = (unsigned char)0U;
  #line 2003 
  entries = (int)((p_dev->ahw)->reset.hdr)->entries;
  #line 2004 
  index = (p_dev->ahw)->reset.seq_index;
  #line 2006 
  while ((unsigned int)(p_dev->ahw)->reset.seq_end == 0U && index < entries) {
    #line 2007 
    p_hdr = (struct qlc_83xx_entry_hdr *)entry;
    #line 2009 
    switch ((int)p_hdr->cmd) {
      #line 2010 
      case 0: 
              #line 2010 
      ;
      #line 2011 
      break;
      #line 2012 
      case 1: 
              #line 2012 
      ;
      #line 2013 
      qlcnic_83xx_write_list(p_dev,p_hdr);
      #line 2014 
      break;
      #line 2015 
      case 2: 
              #line 2015 
      ;
      #line 2016 
      qlcnic_83xx_read_write_list(p_dev,p_hdr);
      #line 2017 
      break;
      #line 2018 
      case 4: 
              #line 2018 
      ;
      #line 2019 
      qlcnic_83xx_poll_list(p_dev,p_hdr);
      #line 2020 
      break;
      #line 2021 
      case 8: 
              #line 2021 
      ;
      #line 2022 
      qlcnic_83xx_poll_write_list(p_dev,p_hdr);
      #line 2023 
      break;
      #line 2024 
      case 16: 
               #line 2024 
      ;
      #line 2025 
      qlcnic_83xx_read_modify_write(p_dev,p_hdr);
      #line 2026 
      break;
      #line 2027 
      case 32: 
               #line 2027 
      ;
      #line 2028 
      qlcnic_83xx_pause(p_hdr);
      #line 2029 
      break;
      #line 2030 
      case 64: 
               #line 2030 
      ;
      #line 2031 
      qlcnic_83xx_seq_end(p_dev);
      #line 2032 
      break;
      #line 2033 
      case 128: 
                #line 2033 
      ;
      #line 2034 
      qlcnic_83xx_template_end(p_dev);
      #line 2035 
      break;
      #line 2036 
      case 256: 
                #line 2036 
      ;
      #line 2037 
      qlcnic_83xx_poll_read_list(p_dev,p_hdr);
      #line 2038 
      break;
      #line 2039 
      default: 
               #line 2039 
      ;
      #line 2040 
      _dev_err(& (p_dev->pdev)->dev,(char *)"%s: Unknown opcode 0x%04x in template %d\n",(char *)"qlcnic_83xx_exec_template_cmd",(int)p_hdr->cmd,index);
      #line 2043 
      break;
    }
    #line 2045 
    entry += (unsigned long)p_hdr->size;
    #line 2046 
    ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c",2046,0);
    #line 2046 
    _cond_resched();
    #line 2006 
    index ++;
  }
  #line 2048 
  (p_dev->ahw)->reset.seq_index = index;
  #line 2049 
  return;
}

#line 2051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_stop_hw(struct qlcnic_adapter *p_dev)
{
  #line 2053 
  (p_dev->ahw)->reset.seq_index = 0;
  #line 2055 
  qlcnic_83xx_exec_template_cmd(p_dev,(char *)(p_dev->ahw)->reset.stop_offset);
  #line 2056 
  if ((unsigned int)(p_dev->ahw)->reset.seq_end != 1U) 
                                                       #line 2057 
                                                       _dev_err(& (p_dev->pdev)->dev,(char *)"%s: failed\n",(char *)"qlcnic_83xx_stop_hw");
  #line 2058 
  return;
}

#line 2060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_start_hw(struct qlcnic_adapter *p_dev)
{
  #line 2062 
  qlcnic_83xx_exec_template_cmd(p_dev,(char *)(p_dev->ahw)->reset.start_offset);
  #line 2063 
  if ((unsigned int)(p_dev->ahw)->reset.template_end != 1U) 
                                                            #line 2064 
                                                            _dev_err(& (p_dev->pdev)->dev,(char *)"%s: failed\n",(char *)"qlcnic_83xx_start_hw");
  #line 2065 
  return;
}

#line 2067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_init_hw(struct qlcnic_adapter *p_dev)
{
  #line 2069 
  qlcnic_83xx_exec_template_cmd(p_dev,(char *)(p_dev->ahw)->reset.init_offset);
  #line 2070 
  if ((unsigned int)(p_dev->ahw)->reset.seq_end != 1U) 
                                                       #line 2071 
                                                       _dev_err(& (p_dev->pdev)->dev,(char *)"%s: failed\n",(char *)"qlcnic_83xx_init_hw");
  #line 2072 
  return;
}

#line 2093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_run_post(struct qlcnic_adapter *adapter)
{
  #line 2097 
  int timeout;
  #line 2097 
  int count;
  #line 2098 
  u32 signature;
  #line 2095 
  struct qlc_83xx_fw_info *fw_info = (adapter->ahw)->fw_info;
  #line 2096 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2097 
  int ret = 0;
  #line 2101 
  switch ((adapter->ahw)->post_mode) {
    #line 2102 
    case (u32)0: 
                 #line 2102 
    ;
    #line 2103 
    timeout = 2690;
    #line 2104 
    break;
    #line 2105 
    case (u32)1: 
                 #line 2105 
    ;
    #line 2106 
    timeout = 4930;
    #line 2107 
    break;
    #line 2108 
    case (u32)2: 
                 #line 2108 
    ;
    #line 2109 
    timeout = 9500;
    #line 2110 
    break;
    #line 2111 
    default: 
             #line 2111 
    ;
    #line 2112 
    return -22;
  }
  #line 2115 
  strncpy((char *)(& fw_info->fw_file_name),(char *)"83xx_post_fw.bin",20UL);
  #line 2118 
  ret = cif_request_firmware_0(& fw_info->fw,(char *)(& fw_info->fw_file_name),dev);
  #line 2119 
  if (ret != 0) {
    #line 2120 
    _dev_err(dev,(char *)"POST firmware can not be loaded, skipping POST\n");
    #line 2121 
    return 0;
  }
  #line 2124 
  ret = qlcnic_83xx_copy_fw_file(adapter);
  #line 2125 
  if (ret != 0) 
                #line 2126 
                return ret;
  #line 2129 
  qlcnic_ind_wr(adapter,1096818708U,0U);
  #line 2132 
  qlcnic_ind_wr(adapter,1096818712U,(adapter->ahw)->post_mode);
  #line 2135 
  writel(305419896U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 15U));
  #line 2138 
  qlcnic_83xx_start_hw(adapter);
  #line 2140 
  count = 0;
  #line 2141 
  while (1) {
    {
      #line 2142 
      msleep(100U);
      #line 2143 
      count += 100;
      #line 2145 
      signature = (unsigned int)qlcnic_ind_rd(adapter,1096818708U);
      #line 2146 
      if (signature == 4294967280U) 
                                    #line 2147 
                                    break;
    }
    #line 2148 
    if (! (timeout > count)) 
                             #line 2141 
                             break;
  }
  #line 2150 
  if (timeout <= count) {
    #line 2151 
    _dev_err(dev,(char *)"POST timed out, signature = 0x%08x\n",signature);
    #line 2152 
    return -5;
  }
  #line 2155 
  switch (signature) {
    #line 2156 
    case (u32)(-16): 
                     #line 2156 
    ;
    #line 2157 
    _dev_info(dev,(char *)"POST passed, Signature = 0x%08x\n",signature);
    #line 2158 
    break;
    #line 2159 
    case (u32)(-1): 
                    #line 2159 
    ;
    #line 2160 
    _dev_err(dev,(char *)"POST failed, Test case : ASIC STRESS TEST, Signature = 0x%08x\n",signature);
    #line 2162 
    ret = -5;
    #line 2163 
    break;
    #line 2164 
    case (u32)(-2): 
                    #line 2164 
    ;
    #line 2165 
    _dev_err(dev,(char *)"POST failed, Test case : DDT TEST, Signature = 0x%08x\n",signature);
    #line 2167 
    ret = -5;
    #line 2168 
    break;
    #line 2169 
    case (u32)(-4): 
                    #line 2169 
    ;
    #line 2170 
    _dev_err(dev,(char *)"POST failed, Test case : ASIC MEMORY TEST, Signature = 0x%08x\n",signature);
    #line 2172 
    ret = -5;
    #line 2173 
    break;
    #line 2174 
    case (u32)(-8): 
                    #line 2174 
    ;
    #line 2175 
    _dev_err(dev,(char *)"POST failed, Test case : FLASH TEST, Signature = 0x%08x\n",signature);
    #line 2177 
    ret = -5;
    #line 2178 
    break;
    #line 2179 
    default: 
             #line 2179 
    ;
    #line 2180 
    _dev_err(dev,(char *)"POST failed, Test case : INVALID, Signature = 0x%08x\n",signature);
    #line 2182 
    ret = -5;
    #line 2183 
    break;
  }
  #line 2186 
  return ret;
}

#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_load_fw_image_from_host(struct qlcnic_adapter *adapter)
{
  #line 2191 
  struct qlc_83xx_fw_info *fw_info = (adapter->ahw)->fw_info;
  #line 2192 
  int err = -5;
  #line 2194 
  if (cif_request_firmware_0(& fw_info->fw,
                               (char *)(& fw_info->fw_file_name),
                               & (adapter->pdev)->dev) != 0) {
    #line 2196 
    _dev_err(& (adapter->pdev)->dev,(char *)"No file FW image, loading flash FW image.\n");
    #line 2198 
    writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 15U));
  }
  else {
    #line 2201 
    if (qlcnic_83xx_copy_fw_file(adapter) != 0) 
                                                #line 2202 
                                                return err;
    #line 2203 
    writel(305419896U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 15U));
  }
  #line 2207 
  return 0;
}

#line 2210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_restart_hw(struct qlcnic_adapter *adapter)
{
  #line 2212 
  u32 val;
  #line 2213 
  int err = -5;
  #line 2215 
  qlcnic_83xx_stop_hw(adapter);
  #line 2218 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
  #line 2219 
  if ((val & 2U) == 0U) 
                        #line 2220 
                        qlcnic_dump_fw(adapter);
  #line 2222 
  if ((val & 1U) != 0U) {
    #line 2223 
    netdev_info(adapter->netdev,(char *)"%s: Auto firmware recovery is disabled\n",(char *)"qlcnic_83xx_restart_hw");
    #line 2225 
    qlcnic_83xx_idc_enter_failed_state(adapter,1);
    #line 2226 
    return err;
  }
  #line 2229 
  qlcnic_83xx_init_hw(adapter);
  #line 2231 
  if (qlcnic_83xx_copy_bootloader(adapter) != 0) 
                                                 #line 2232 
                                                 return err;
  #line 2235 
  if ((int)(adapter->ahw)->run_post != 0) {
    #line 2236 
    err = qlcnic_83xx_run_post(adapter);
    #line 2237 
    if (err != 0) 
                  #line 2238 
                  return err;
    #line 2241 
    (adapter->ahw)->run_post = (_Bool)0;
    #line 2244 
    qlcnic_83xx_stop_hw(adapter);
    #line 2245 
    qlcnic_83xx_init_hw(adapter);
    #line 2247 
    err = qlcnic_83xx_copy_bootloader(adapter);
    #line 2248 
    if (err != 0) 
                  #line 2249 
                  return err;
  }
  #line 2253 
  if (qlcnic_load_fw_file == 1) {
    #line 2254 
    if (qlcnic_83xx_load_fw_image_from_host(adapter) != 0) 
                                                           #line 2255 
                                                           return err;
  }
  else 
       #line 2257 
       writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 15U));
  #line 2261 
  qlcnic_83xx_start_hw(adapter);
  #line 2262 
  if (qlcnic_83xx_check_hw_status(adapter) != 0) 
                                                 #line 2263 
                                                 return -5;
  #line 2265 
  return 0;
}

#line 2268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_get_nic_configuration(struct qlcnic_adapter *adapter)
{
  #line 2270 
  int err;
  #line 2271 
  struct qlcnic_info nic_info;
  #line 2272 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2274 
  memset((void *)(& nic_info),0,72UL);
  #line 2275 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)ahw->pci_func));
  #line 2276 
  if (err != 0) 
                #line 2277 
                return -5;
  #line 2279 
  ahw->physical_port = (unsigned char)nic_info.phys_port;
  #line 2280 
  ahw->switch_mode = nic_info.switch_mode;
  #line 2281 
  ahw->max_tx_ques = nic_info.max_tx_ques;
  #line 2282 
  ahw->max_rx_ques = nic_info.max_rx_ques;
  #line 2283 
  ahw->capabilities = nic_info.capabilities;
  #line 2284 
  ahw->max_mac_filters = nic_info.max_mac_filters;
  #line 2285 
  ahw->max_mtu = nic_info.max_mtu;
  #line 2295 
  if ((int)test_bit(11L,& adapter->state) != 0) 
                                                #line 2296 
                                                return 1431655765;
  #line 2298 
  if ((ahw->capabilities & 8388608U) != 0U) 
                                            #line 2299 
                                            return 255;
  #line 2301 
  return 1431655765;
}

#line 2304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_configure_opmode(struct qlcnic_adapter *adapter)
{
  #line 2334 
  int tmp_0;
  #line 2335 
  u16 __UNIQUE_ID___x536;
  #line 2335 
  int tmp_2;
  #line 2334 
  u16 __UNIQUE_ID___x534;
  #line 2307 
  u16 max_sds_rings;
  #line 2307 
  u16 max_tx_rings;
  #line 2308 
  int ret;
  #line 2306 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2310 
  ret = qlcnic_83xx_get_nic_configuration(adapter);
  #line 2311 
  if (ret == -5) 
                 #line 2312 
                 return -5;
  #line 2314 
  if (ret == 255) {
    #line 2315 
    ahw->nic_mode = (unsigned char)255U;
    #line 2317 
    if (qlcnic_83xx_config_vnic_opmode(adapter) != 0) 
                                                      #line 2318 
                                                      return -5;
    #line 2320 
    max_sds_rings = (unsigned short)4U;
    #line 2321 
    max_tx_rings = (unsigned short)4U;
  }
  else 
    #line 2322 
    if (ret == 1431655765) {
      #line 2323 
      ahw->nic_mode = (unsigned char)0U;
      #line 2324 
      (adapter->nic_ops)->init_driver = & qlcnic_83xx_init_default_driver;
      #line 2325 
      ahw->idc.state_entry = & qlcnic_83xx_idc_ready_state_entry;
      #line 2326 
      max_sds_rings = (unsigned short)8U;
      #line 2327 
      max_tx_rings = (unsigned short)8U;
    }
    else {
      #line 2329 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s: Invalid opmode %d\n",(char *)"qlcnic_83xx_configure_opmode",ret);
      #line 2331 
      return -5;
    }
  {
    #line 2334 
    __UNIQUE_ID___x534 = ahw->max_rx_ques;
    #line 2334 
    u16 __UNIQUE_ID___y535 = max_sds_rings;
    #line 2334 
    if ((int)__UNIQUE_ID___x534 < (int)__UNIQUE_ID___y535) 
                                                           #line 2334 
                                                           tmp_0 = (int)__UNIQUE_ID___x534; else 
                                                                    #line 2334 
                                                                    tmp_0 = (int)__UNIQUE_ID___y535;
    }
  #line 2334 
  adapter->max_sds_rings = (unsigned char)tmp_0;
  {
    #line 2335 
    __UNIQUE_ID___x536 = ahw->max_tx_ques;
    #line 2335 
    u16 __UNIQUE_ID___y537 = max_tx_rings;
    #line 2335 
    if ((int)__UNIQUE_ID___x536 < (int)__UNIQUE_ID___y537) 
                                                           #line 2335 
                                                           tmp_2 = (int)__UNIQUE_ID___x536; else 
                                                                    #line 2335 
                                                                    tmp_2 = (int)__UNIQUE_ID___y537;
    }
  #line 2335 
  adapter->max_tx_rings = (unsigned char)tmp_2;
  #line 2337 
  return 0;
}

#line 2340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_config_buff_descriptors(struct qlcnic_adapter *adapter)
{
  #line 2342 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2344 
  if ((unsigned int)ahw->port_type == 2U) {
    #line 2345 
    adapter->num_rxd = (unsigned short)4096U;
    #line 2346 
    adapter->max_rxd = (unsigned short)8192U;
    #line 2347 
    adapter->num_jumbo_rxd = (unsigned short)1024U;
    #line 2348 
    adapter->max_jumbo_rxd = (unsigned short)1024U;
  }
  else 
    #line 2350 
    if ((unsigned int)ahw->port_type == 1U) {
      #line 2351 
      adapter->num_rxd = (unsigned short)2048U;
      #line 2352 
      adapter->num_jumbo_rxd = (unsigned short)512U;
      #line 2353 
      adapter->max_jumbo_rxd = (unsigned short)512U;
      #line 2354 
      adapter->max_rxd = (unsigned short)4096U;
    }
  #line 2356 
  adapter->num_txd = (unsigned short)1024U;
  #line 2357 
  adapter->max_rds_rings = (unsigned char)2U;
  #line 2358 
  return;
}

#line 2360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_init_default_driver(struct qlcnic_adapter *adapter)
{
  #line 2362 
  int err = -5;
  #line 2364 
  qlcnic_83xx_get_minidump_template(adapter);
  #line 2365 
  if (qlcnic_83xx_get_port_info(adapter) != 0) 
                                               #line 2366 
                                               return err;
  #line 2368 
  qlcnic_83xx_config_buff_descriptors(adapter);
  #line 2369 
  (adapter->ahw)->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  #line 2370 
  adapter->flags |= 128U;
  #line 2372 
  _dev_info(& (adapter->pdev)->dev,(char *)"HAL Version: %d\n",(adapter->ahw)->fw_hal_version);
  #line 2375 
  return 0;
}

#line 2379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_clear_function_resources(struct qlcnic_adapter *adapter)
{
  #line 2381 
  struct qlcnic_cmd_args cmd;
  #line 2382 
  u32 presence_mask;
  #line 2382 
  u32 audit_mask;
  #line 2383 
  int status;
  #line 2385 
  presence_mask = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 13U));
  #line 2386 
  audit_mask = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 16U));
  #line 2388 
  if (((unsigned int)(1 << (int)adapter->portnum) & presence_mask) != 0U || (audit_mask & 64U) != 0U) {
    #line 2389 
    status = qlcnic_alloc_mbx_args(& cmd,adapter,97U);
    #line 2391 
    if (status != 0) 
                     #line 2392 
                     return;
    #line 2394 
    *(cmd.req.arg + 1U) = 2147483648U;
    #line 2395 
    status = qlcnic_issue_cmd(adapter,& cmd);
    #line 2396 
    if (status != 0) 
                     #line 2397 
                     _dev_err(& (adapter->pdev)->dev,(char *)"Failed to clean up the function resources\n");
    #line 2399 
    qlcnic_free_mbx_args(& cmd);
  }
  #line 2401 
  return;
}

#line 2403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_get_fw_info(struct qlcnic_adapter *adapter)
{
  #line 2407 
  struct qlc_83xx_fw_info *fw_info;
  #line 2405 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2406 
  struct pci_dev *pdev = adapter->pdev;
  #line 2408 
  int err = 0;
  #line 2410 
  ahw->fw_info = (struct qlc_83xx_fw_info *)kzalloc_5(32UL,3264U);
  #line 2411 
  if (ahw->fw_info == (struct qlc_83xx_fw_info *)0) 
                                                    #line 2412 
                                                    err = -12;
  else {
    #line 2414 
    fw_info = ahw->fw_info;
    #line 2415 
    switch ((int)pdev->device) {
      #line 2416 
      case 32816: 
                  #line 2416 
      ;
      #line 2417 
      case 34864: 
                  #line 2417 
      ;
      #line 2418 
      strncpy((char *)(& fw_info->fw_file_name),(char *)"83xx_fw.bin",20UL);
      #line 2420 
      break;
      #line 2421 
      case 32832: 
                  #line 2421 
      ;
      #line 2422 
      strncpy((char *)(& fw_info->fw_file_name),(char *)"84xx_fw.bin",20UL);
      #line 2424 
      break;
      #line 2425 
      default: 
               #line 2425 
      ;
      #line 2426 
      _dev_err(& pdev->dev,(char *)"%s: Invalid device id\n",(char *)"qlcnic_83xx_get_fw_info");
      #line 2428 
      err = -22;
      #line 2429 
      break;
    }
  }
  #line 2433 
  return err;
}

#line 2436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_init_rings(struct qlcnic_adapter *adapter)
{
  #line 2438 
  u8 rx_cnt = (unsigned char)4U;
  #line 2439 
  u8 tx_cnt = (unsigned char)4U;
  #line 2441 
  adapter->max_tx_rings = (unsigned char)8U;
  #line 2442 
  adapter->max_sds_rings = (unsigned char)8U;
  #line 2444 
  if ((unsigned int)(adapter->ahw)->msix_supported == 0U) {
    #line 2445 
    rx_cnt = (unsigned char)1U;
    #line 2446 
    tx_cnt = (unsigned char)1U;
  }
  #line 2450 
  qlcnic_set_tx_ring_count(adapter,(unsigned char)((int)tx_cnt));
  #line 2451 
  qlcnic_set_sds_ring_count(adapter,(unsigned char)((int)rx_cnt));
  #line 2452 
  return;
}

#line 2454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_init(struct qlcnic_adapter *adapter, int pci_using_dac)
{
  #line 2456 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2457 
  int err = 0;
  #line 2459 
  adapter->rx_mac_learn = (_Bool)0;
  #line 2460 
  ahw->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  #line 2463 
  switch (qlcnic_load_fw_file) {
    #line 2464 
    case 2: 
            #line 2464 
    ;
    #line 2465 
    ahw->post_mode = 0U;
    #line 2466 
    ahw->run_post = (_Bool)1;
    #line 2467 
    break;
    #line 2468 
    case 3: 
            #line 2468 
    ;
    #line 2469 
    ahw->post_mode = 1U;
    #line 2470 
    ahw->run_post = (_Bool)1;
    #line 2471 
    break;
    #line 2472 
    case 4: 
            #line 2472 
    ;
    #line 2473 
    ahw->post_mode = 2U;
    #line 2474 
    ahw->run_post = (_Bool)1;
    #line 2475 
    break;
    #line 2476 
    default: 
             #line 2476 
    ;
    #line 2477 
    ahw->run_post = (_Bool)0;
    #line 2478 
    break;
  }
  #line 2481 
  qlcnic_83xx_init_rings(adapter);
  #line 2483 
  err = qlcnic_83xx_init_mailbox_work(adapter);
  #line 2484 
  if (err != 0) 
                #line 2485 
                goto exit;
  #line 2487 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) {
    #line 2488 
    err = qlcnic_sriov_vf_init(adapter,pci_using_dac);
    #line 2489 
    if (err != 0) 
                  #line 2490 
                  goto detach_mbx; else 
                                        #line 2492 
                                        return err;
  }
  #line 2495 
  if (qlcnic_83xx_read_flash_descriptor_table(adapter) != 0) 
                                                             #line 2495 
                                                             goto _LOR;
  else {
    #line 2495 
    if (qlcnic_83xx_read_flash_mfg_id(adapter) != 0) {
      #line 2495 
      _LOR: {
              #line 2497 
              _dev_err(& (adapter->pdev)->dev,(char *)"Failed reading flash mfg id\n");
              #line 2498 
              err = -131;
              #line 2499 
              goto detach_mbx;
            }
    }
  }
  #line 2502 
  err = qlcnic_83xx_check_hw_status(adapter);
  #line 2503 
  if (err != 0) 
                #line 2504 
                goto detach_mbx;
  #line 2506 
  err = qlcnic_83xx_get_fw_info(adapter);
  #line 2507 
  if (err != 0) 
                #line 2508 
                goto detach_mbx;
  #line 2510 
  err = qlcnic_83xx_idc_init(adapter);
  #line 2511 
  if (err != 0) 
                #line 2512 
                goto detach_mbx;
  #line 2514 
  err = qlcnic_setup_intr(adapter);
  #line 2515 
  if (err != 0) {
    #line 2516 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to setup interrupt\n");
    #line 2517 
    goto disable_intr;
  }
  {
    #line 2520 
    struct lock_class_key __key;
    #line 2520 
    __init_work(& adapter->idc_aen_work.work,0);
    #line 2520 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 2520 
    adapter->idc_aen_work.work.data = __constr_expr_41;
    #line 2520 
    lockdep_init_map(& adapter->idc_aen_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 2520 
    INIT_LIST_HEAD_4(& adapter->idc_aen_work.work.entry);
    #line 2520 
    adapter->idc_aen_work.work.func = & qlcnic_83xx_idc_aen_work;
  }
  {
    #line 2520 
    struct lock_class_key __key_0;
    #line 2520 
    init_timer_key(& adapter->idc_aen_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->idc_aen_work)->timer",& __key_0);
  }
  #line 2522 
  err = qlcnic_83xx_setup_mbx_intr(adapter);
  #line 2523 
  if (err != 0) 
                #line 2524 
                goto disable_mbx_intr;
  #line 2526 
  qlcnic_83xx_clear_function_resources(adapter);
  #line 2527 
  qlcnic_dcb_enable(adapter->dcb);
  #line 2528 
  qlcnic_83xx_initialize_nic(adapter,1);
  #line 2529 
  qlcnic_dcb_get_info(adapter->dcb);
  #line 2532 
  err = qlcnic_83xx_configure_opmode(adapter);
  #line 2533 
  if (err != 0) 
                #line 2534 
                goto disable_mbx_intr;
  #line 2538 
  err = (*((adapter->nic_ops)->init_driver))(adapter);
  #line 2539 
  if (err != 0) 
                #line 2540 
                goto disable_mbx_intr;
  #line 2543 
  qlcnic_83xx_idc_poll_dev_state(& adapter->fw_work.work);
  #line 2544 
  return 0;
  #line 2546 
  disable_mbx_intr: 
                    #line 2546 
  ;
  #line 2547 
  qlcnic_83xx_free_mbx_intr(adapter);
  #line 2549 
  disable_intr: 
                #line 2549 
  ;
  #line 2550 
  qlcnic_teardown_intr(adapter);
  #line 2552 
  detach_mbx: 
              #line 2552 
  ;
  #line 2553 
  qlcnic_83xx_detach_mailbox_work(adapter);
  #line 2554 
  qlcnic_83xx_free_mailbox(ahw->mailbox);
  #line 2555 
  ahw->mailbox = (struct qlcnic_mailbox *)0;
  #line 2556 
  exit: 
        #line 2556 
  ;
  #line 2557 
  return err;
}

#line 2560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_aer_stop_poll_work(struct qlcnic_adapter *adapter)
{
  #line 2562 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2563 
  struct qlc_83xx_idc *idc = & ahw->idc;
  #line 2565 
  cif_clear_bit_5(2L,& idc->status);
  #line 2566 
  cancel_delayed_work_sync(& adapter->fw_work);
  #line 2568 
  if ((unsigned int)ahw->nic_mode == 255U) 
                                           #line 2569 
                                           qlcnic_83xx_disable_vnic_mode(adapter,1);
  #line 2571 
  qlcnic_83xx_idc_detach_driver(adapter);
  #line 2572 
  qlcnic_83xx_initialize_nic(adapter,0);
  #line 2574 
  cancel_delayed_work_sync(& adapter->idc_aen_work);
  #line 2575 
  return;
}

#line 2577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_aer_reset(struct qlcnic_adapter *adapter)
{
  #line 2582 
  u32 owner;
  #line 2579 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2580 
  struct qlc_83xx_idc *idc = & ahw->idc;
  #line 2581 
  int ret = 0;
  #line 2588 
  idc->prev_state = (unsigned char)4U;
  #line 2589 
  owner = (unsigned int)qlcnic_83xx_idc_find_reset_owner_id(adapter);
  #line 2590 
  if ((unsigned int)ahw->pci_func == owner) {
    #line 2591 
    ret = qlcnic_83xx_restart_hw(adapter);
    #line 2592 
    if (ret < 0) 
                 #line 2593 
                 return ret;
    #line 2594 
    qlcnic_83xx_idc_clear_registers(adapter,0);
  }
  #line 2597 
  ret = (*(idc->state_entry))(adapter);
  #line 2598 
  return ret;
}

#line 2601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_aer_start_poll_work(struct qlcnic_adapter *adapter)
{
  #line 2605 
  u32 owner;
  #line 2603 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2604 
  struct qlc_83xx_idc *idc = & ahw->idc;
  #line 2607 
  idc->prev_state = (unsigned char)3U;
  #line 2608 
  owner = (unsigned int)qlcnic_83xx_idc_find_reset_owner_id(adapter);
  #line 2609 
  if ((unsigned int)ahw->pci_func == owner) 
                                            #line 2610 
                                            qlcnic_83xx_idc_enter_ready_state(adapter,0);
  #line 2612 
  qlcnic_schedule_work(adapter,& qlcnic_83xx_idc_poll_dev_state,0);
  #line 2613 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void cif_set_bit_5(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void cif_clear_bit_5(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void INIT_LIST_HEAD_4(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 494  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void *kzalloc_5(size_t size, gfp_t flags)
{
  #line 497 
  return ldv_kzalloc(size,flags);
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void *cif_vzalloc_2(unsigned long size)
{
  #line 811 
  return ldv_vzalloc(size);
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void cif_vfree_1(void *addr)
{
  #line 818 
  ldv_vfree(addr);
  #line 819 
  return;
}

#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static void cif_release_firmware_0(struct firmware *fw)
{
  #line 825 
  ldv_release_firmware(fw);
  #line 826 
  return;
}

#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_83xx_init.i.aux"
static int cif_request_firmware_0(struct firmware **fw, char *name, struct device *device)
{
  #line 832 
  return ldv_request_firmware(fw);
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_set_bit_6(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_clear_bit_6(long nr, unsigned long *addr);
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static bool is_power_of_2(unsigned long n)
{
  #line 47 
  return (_Bool)((n != 0UL && ((n + 18446744073709551615UL) & n) == 0UL) != 0);
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __rounddown_pow_of_two(unsigned long n)
{
  #line 67 
  return 1UL << (fls_long(n) + 4294967295U);
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void INIT_LIST_HEAD_5(struct list_head *list);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_2(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_8838 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_2(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_2(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_2(struct list_head *entry)
{
  #line 139 
  __list_del_entry_2(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_8890 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_sub(int i, atomic_t *v)
{
  #line 189 
  int __ret;
  #line 189 
  __ret = - i;
  #line 189 
  switch (4UL) {
    #line 189 
    case (unsigned long)1: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    case (unsigned long)2: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    case (unsigned long)4: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    case (unsigned long)8: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    default: 
             #line 189 
    ;
    #line 189 
    __xadd_wrong_size();
  }
  #line 189 
  return __ret;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_read((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_sub(int i, atomic_t *v)
{
  #line 199 
  kasan_check_read((void *)v,4U);
  #line 200 
  return arch_atomic_fetch_sub(i,v);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read_0(& __num_online_cpus);
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwlock.h"
#line 18 
void __rwlock_init(rwlock_t *, char *, struct lock_class_key *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 665  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 221 
#line 221 
int rcu_read_lock_held(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size_0(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void *cif_vzalloc_3(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 932  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_vfree_2(void *addr);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 209 
void iounmap(void *);
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 211 
unsigned long round_jiffies_relative(unsigned long);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 423  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static bool cif_queue_delayed_work_1(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static bool refcount_sub_and_test(int i, refcount_t *r)
{
  #line 253 
  int old = atomic_fetch_sub(i,& r->refs);
  #line 255 
  if (old == i) {
    #line 257 
    ldv_inline_asm();
    #line 257 
    return (_Bool)1;
  }
  #line 260 
  if ((long)(old < 0) != 0L || (long)(old - i < 0) != 0L) 
                                                          #line 261 
                                                          refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_SUB_UAF);
  #line 263 
  return (_Bool)0;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static bool refcount_dec_and_test(refcount_t *r)
{
  #line 281 
  return refcount_sub_and_test(1,r);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 947  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 592  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void *kcalloc_3(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 613  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void *kzalloc_6(size_t size, gfp_t flags);
#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_mac_header(struct sk_buff *skb)
{
  #line 2439 
  return skb->head + (unsigned long)skb->inner_mac_header;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_ether.h"
__inline static struct ethhdr *inner_eth_hdr(struct sk_buff *skb)
{
  #line 37 
  return (struct ethhdr *)skb_inner_mac_header(skb);
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2519 
#line 2519 
int register_netdevice_notifier(struct notifier_block *);
#line 2520 
#line 2520 
int unregister_netdevice_notifier(struct notifier_block *);
#line 2568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info *info)
{
  #line 2570 
  return info->dev;
}

#line 2579 
#line 2579 
int call_netdevice_notifiers(unsigned long, struct net_device *);
#line 2679 
#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_6(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_0(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_6(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue_0(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4168 
int dev_uc_add_excl(struct net_device *, unsigned char *);
#line 4169 
#line 4169 
int dev_uc_del(struct net_device *, unsigned char *);
#line 4212 
#line 4212 
int dev_mc_add_excl(struct net_device *, unsigned char *);
#line 4213 
#line 4213 
int dev_mc_del(struct net_device *, unsigned char *);
#line 4403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool can_checksum_protocol(netdev_features_t features, __be16 protocol)
{
  #line 4406 
  if ((unsigned int)protocol == 1673U) 
                                       #line 4407 
                                       return (_Bool)((features & 17179869184ULL) != 0ULL);
  #line 4411 
  if ((features & 8ULL) != 0ULL) 
                                 #line 4413 
                                 return (_Bool)1;
  #line 4416 
  switch ((int)protocol) {
    #line 4417 
    case 8: 
            #line 4417 
    ;
    #line 4418 
    return (_Bool)((features & 2ULL) != 0ULL);
    #line 4419 
    case 56710: 
                #line 4419 
    ;
    #line 4420 
    return (_Bool)((features & 16ULL) != 0ULL);
    #line 4421 
    default: 
             #line 4421 
    ;
    #line 4422 
    return (_Bool)0;
  }
}

#line 4523 
#line 4523 
void netdev_update_features(struct net_device *);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 963  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_unicast_ether_addr(u8 *addr)
{
  #line 177 
  int tmp_0;
  #line 177 
  if ((int)is_multicast_ether_addr(addr) != 0) 
                                               #line 177 
                                               tmp_0 = 0; else 
                                                               #line 177 
                                                               tmp_0 = 1;
  #line 177 
  return (_Bool)(tmp_0 != 0);
}

#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal_unaligned(u8 *addr1, u8 *addr2)
{
  #line 372 
  return ether_addr_equal(addr1,addr2);
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 36 
int rtnl_is_locked(void);
#line 45 
#line 45 
bool lockdep_rtnl_is_held(void);
#line 113 
#line 113 
int ndo_dflt_fdb_dump(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *);
#line 118 
#line 118 
int ndo_dflt_fdb_add(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16, u16);
#line 124 
#line 124 
int ndo_dflt_fdb_del(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool is_vlan_dev(struct net_device *dev)
{
  #line 72 
  return (_Bool)((dev->priv_flags & 1U) != 0U);
}

#line 129 
#line 129 
struct net_device *__vlan_find_dev_deep_rcu(struct net_device *, __be16, u16);
#line 134 
#line 134 
struct net_device *vlan_dev_real_dev(struct net_device *);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool skb_vlan_tagged_multi(struct sk_buff *skb)
{
  #line 687 
  __be16 protocol = skb->protocol;
  #line 689 
  if ((unsigned int)skb->vlan_present == 0U) {
    #line 690 
    struct vlan_ethhdr *veh;
    #line 692 
    int tmp_0;
    #line 695 
    int tmp_2;
    #line 692 
    if (eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 692 
                                                        tmp_0 = 0; else 
                                                                    #line 692 
                                                                    tmp_0 = 1;
    #line 692 
    if ((long)tmp_0 != 0L) 
                           #line 693 
                           return (_Bool)0;
    #line 695 
    if (pskb_may_pull(skb,18U)) 
                                #line 695 
                                tmp_2 = 0; else 
                                                #line 695 
                                                tmp_2 = 1;
    #line 695 
    if ((long)tmp_2 != 0L) 
                           #line 696 
                           return (_Bool)0;
    #line 698 
    veh = (struct vlan_ethhdr *)skb->data;
    #line 699 
    protocol = veh->h_vlan_encapsulated_proto;
  }
  #line 702 
  if (! eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 703 
                                                        return (_Bool)0;
  #line 705 
  return (_Bool)1;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static netdev_features_t vlan_features_check(struct sk_buff *skb, netdev_features_t features)
{
  #line 718 
  if ((int)skb_vlan_tagged_multi(skb) != 0) 
                                            #line 724 
                                            features &= 17592186044649ULL;
  #line 729 
  return features;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
#line 165 
int register_inetaddr_notifier(struct notifier_block *);
#line 166 
#line 166 
int unregister_inetaddr_notifier(struct notifier_block *);
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
__inline static struct in_device *__in_dev_get_rcu(struct net_device *dev)
{
  #line 219 
  struct in_device *________p1;
  {
    #line 220 
    union __anonunion___u_9815 __u;
    #line 219 
    __read_once_size((void *)(& dev->ip_ptr),(void *)(& __u.__c),8);
    #line 219 
    ________p1 = (__u.__val);
    {
      #line 219 
      bool __warned;
      #line 219 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 219 
        if (! __warned) {
          #line 219 
          if (rcu_read_lock_held() == 0) {
            #line 219 
            __warned = (_Bool)1;
            #line 219 
            lockdep_rcu_suspicious((char *)"./include/linux/inetdevice.h",219,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 219 
  return ________p1;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
__inline static struct in_device *in_dev_get(struct net_device *dev)
{
  #line 224 
  struct in_device *in_dev;
  #line 226 
  rcu_read_lock();
  #line 227 
  in_dev = __in_dev_get_rcu(dev);
  #line 228 
  if (in_dev != (struct in_device *)0) 
                                       #line 229 
                                       refcount_inc(& in_dev->refcnt);
  #line 230 
  rcu_read_unlock();
  #line 231 
  return in_dev;
}

#line 260 
#line 260 
void in_dev_finish_destroy(struct in_device *);
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
__inline static void in_dev_put(struct in_device *idev)
{
  #line 264 
  if ((int)refcount_dec_and_test(& idev->refcnt) != 0) 
                                                       #line 265 
                                                       in_dev_finish_destroy(idev);
  #line 266 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1019 
void pci_dev_put(struct pci_dev *);
#line 1054 
#line 1054 
struct pci_dev *pci_get_domain_bus_and_slot(int, unsigned int, unsigned int);
#line 1234 
#line 1234 
pci_power_t pci_choose_state(struct pci_dev *, pm_message_t);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_enable_msix_exact(struct pci_dev *dev, struct msix_entry *entries, int nvec)
{
  #line 1442 
  int rc = pci_enable_msix_range(dev,entries,nvec,nvec);
  #line 1443 
  if (rc < 0) 
              #line 1444 
              return rc;
  #line 1445 
  return 0;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pci.h"
__inline static int pci_domain_nr(struct pci_bus *bus)
{
  #line 41 
  struct pci_sysdata *sd = (struct pci_sysdata *)bus->sysdata;
  #line 43 
  return sd->domain;
}

#line 2022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
__inline static void udp_tunnel_get_rx_info(struct net_device *dev)
{
  {
    #line 130 
    bool __warned;
    #line 130 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 130 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 130 
      __warned = (_Bool)1;
      {
        #line 130 
        int __ret_warn_on = 1;
        #line 130 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 130 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"./include/net/udp_tunnel.h",130);
          #line 131 
          ldv_inline_asm();
          #line 132 
          ldv_inline_asm();
        }
        #line 130 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 130 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 131 
  call_netdevice_notifiers(28UL,dev);
  #line 132 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/vxlan.h"
__inline static netdev_features_t vxlan_features_check(struct sk_buff *skb, netdev_features_t features)
{
  #line 298 
  u8 l4_hdr = (unsigned char)0U;
  #line 300 
  if ((unsigned int)skb->encapsulation == 0U) 
                                              #line 301 
                                              return features;
  #line 303 
  switch ((int)vlan_get_protocol(skb)) {
    #line 304 
    case 8: 
            #line 304 
    ;
    #line 305 
    l4_hdr = ip_hdr(skb)->protocol;
    #line 306 
    break;
    #line 307 
    case 56710: 
                #line 307 
    ;
    #line 308 
    l4_hdr = ipv6_hdr(skb)->nexthdr;
    #line 309 
    break;
    #line 310 
    default: 
             #line 310 
    ;
    #line 311 
    return features;
  }
  #line 314 
  if ((unsigned int)l4_hdr == 17U) 
    #line 314 
    if ((unsigned int)skb->inner_protocol_type != 0U || (unsigned int)skb->__anonCompField_sk_buff_101.inner_protocol != 22629U) 
      #line 321 
      return features & 18446744056529747941ULL;
    else {
      #line 316 
      if (skb_inner_mac_header(skb) - skb_transport_header(skb) != 16L) 
        #line 321 
        return features & 18446744056529747941ULL;
      else 
        #line 318 
        if ((unsigned int)skb->ip_summed != 0U) {
          #line 320 
          ;
          #line 320 
          if (! can_checksum_protocol(features,
                              (unsigned short)((int)inner_eth_hdr(skb)->h_proto))) 
            #line 321 
            return features & 18446744056529747941ULL;
        }
    }
  #line 323 
  return features;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 172 
int qlcnic_82xx_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev);
#line 175 
#line 175 
void qlcnic_82xx_change_filter(struct qlcnic_adapter *adapter, u64 *uaddr, u16 vlan_id, struct qlcnic_host_tx_ring *tx_ring);
#line 185 
#line 185 
void qlcnic_82xx_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring);
#line 190 
#line 190 
int qlcnic_82xx_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);
#line 192 
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_82xx_mq_intrpt(struct qlcnic_adapter *adapter, int op_type);
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
#line 193 
int qlcnic_82xx_config_intrpt(struct qlcnic_adapter *adapter, u8 op_type);
#line 194 
#line 194 
int qlcnic_82xx_fw_cmd_create_rx_ctx(struct qlcnic_adapter *adapter);
#line 195 
#line 195 
int qlcnic_82xx_fw_cmd_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring, int ring);
#line 197 
#line 197 
void qlcnic_82xx_fw_cmd_del_rx_ctx(struct qlcnic_adapter *adapter);
#line 198 
#line 198 
void qlcnic_82xx_fw_cmd_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring);
#line 201 
#line 201 
int qlcnic_82xx_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function);
#line 202 
#line 202 
int qlcnic_82xx_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u8 func_id);
#line 203 
#line 203 
int qlcnic_82xx_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *nic);
#line 204 
#line 204 
int qlcnic_82xx_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *pci_info);
#line 205 
#line 205 
int qlcnic_82xx_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 type);
#line 213 
#line 213 
void qlcnic_82xx_napi_enable(struct qlcnic_adapter *adapter);
#line 214 
#line 214 
void qlcnic_82xx_napi_disable(struct qlcnic_adapter *adapter);
#line 215 
#line 215 
void qlcnic_82xx_napi_del(struct qlcnic_adapter *adapter);
#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
#line 627 
int qlcnic_83xx_set_port_eswitch_status(struct qlcnic_adapter *adapter, int func, int *port_id);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_free(struct qlcnic_dcb *dcb)
{
  #line 60 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->free != (void (*)(struct qlcnic_dcb *))0) 
    #line 61 
    (*((dcb->ops)->free))(dcb);
  #line 62 
  return;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_init_dcbnl_ops(struct qlcnic_dcb *dcb)
{
  #line 112 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->init_dcbnl_ops != (void (*)(struct qlcnic_dcb *))0) 
    #line 113 
    (*((dcb->ops)->init_dcbnl_ops))(dcb);
  #line 114 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_load_fw_file;
#line 1605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1605 
int qlcnic_alloc_hw_resources(struct qlcnic_adapter *adapter);
#line 1606 
#line 1606 
void qlcnic_free_hw_resources(struct qlcnic_adapter *adapter);
#line 1629 
#line 1629 
int qlcnic_fw_cmd_set_drv_version(struct qlcnic_adapter *adapter, u32 fw_cmd);
#line 1642 
#line 2211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_reset_context(struct qlcnic_adapter *adapter);
#line 1645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1645 
netdev_tx_t qlcnic_xmit_frame(struct sk_buff *skb, struct net_device *netdev);
#line 1648 
#line 4039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_setup_rings(struct qlcnic_adapter *adapter);
#line 1649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 4006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_validate_rings(struct qlcnic_adapter *adapter, __u32 ring_cnt, int queue_type);
#line 1670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_alloc_sds_rings(struct qlcnic_recv_context *recv_ctx, int count);
#line 1671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_free_sds_rings(struct qlcnic_recv_context *recv_ctx);
#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 2381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_free_tx_rings(struct qlcnic_adapter *adapter);
#line 1674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 2396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_alloc_tx_rings(struct qlcnic_adapter *adapter, struct net_device *netdev);
#line 1699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_init_pci_info(struct qlcnic_adapter *adapter);
#line 1700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_set_default_offload_settings(struct qlcnic_adapter *adapter);
#line 1701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_reset_npar_config(struct qlcnic_adapter *adapter);
#line 1702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_set_eswitch_port_config(struct qlcnic_adapter *adapter);
#line 1763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1763 
void qlcnic_update_stats(struct qlcnic_adapter *adapter);
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_82xx_encap_tx_offload(struct qlcnic_adapter *adapter)
{
  #line 1848 
  return (_Bool)0;
}

#line 1856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_encap_rx_offload(struct qlcnic_adapter *adapter)
{
  #line 1858 
  return (*(((adapter->ahw)->hw_ops)->encap_rx_offload))(adapter);
}

#line 1861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_encap_tx_offload(struct qlcnic_adapter *adapter)
{
  #line 1863 
  return (*(((adapter->ahw)->hw_ops)->encap_tx_offload))(adapter);
}

#line 1866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
static int qlcnic_start_firmware_0(struct qlcnic_adapter *adapter)
{
  #line 1868 
  return (*((adapter->nic_ops)->start_firmware))(adapter);
}

#line 1930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_add_sysfs(struct qlcnic_adapter *adapter)
{
  #line 1932 
  if (((adapter->ahw)->hw_ops)->add_sysfs != (void (*)(struct qlcnic_adapter *))0) 
    #line 1933 
    (*(((adapter->ahw)->hw_ops)->add_sysfs))(adapter);
  #line 1934 
  return;
}

#line 1936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_remove_sysfs(struct qlcnic_adapter *adapter)
{
  #line 1938 
  if (((adapter->ahw)->hw_ops)->remove_sysfs != (void (*)(struct qlcnic_adapter *))0) 
    #line 1939 
    (*(((adapter->ahw)->hw_ops)->remove_sysfs))(adapter);
  #line 1940 
  return;
}

#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_linkevent_request(struct qlcnic_adapter *adapter, int enable)
{
  #line 1974 
  return (*(((adapter->ahw)->hw_ops)->setup_link_event))(adapter,enable);
}

#line 2001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  #line 2004 
  return (*((adapter->nic_ops)->napi_add))(adapter,netdev);
}

#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_napi_del(struct qlcnic_adapter *adapter)
{
  #line 2009 
  (*((adapter->nic_ops)->napi_del))(adapter);
  #line 2010 
  return;
}

#line 2012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_napi_enable(struct qlcnic_adapter *adapter)
{
  #line 2014 
  (*(((adapter->ahw)->hw_ops)->napi_enable))(adapter);
  #line 2015 
  return;
}

#line 2017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int __qlcnic_shutdown(struct pci_dev *pdev)
{
  #line 2019 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 2021 
  return (*((adapter->nic_ops)->shutdown))(pdev);
}

#line 2024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int __qlcnic_resume(struct qlcnic_adapter *adapter)
{
  #line 2026 
  return (*((adapter->nic_ops)->resume))(adapter);
}

#line 2029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_napi_disable(struct qlcnic_adapter *adapter)
{
  #line 2031 
  (*(((adapter->ahw)->hw_ops)->napi_disable))(adapter);
  #line 2032 
  return;
}

#line 2040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_config_rss(struct qlcnic_adapter *adapter, int enable)
{
  #line 2042 
  return (*(((adapter->ahw)->hw_ops)->config_rss))(adapter,enable);
}

#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_board_info(struct qlcnic_adapter *adapter)
{
  #line 2076 
  return (*(((adapter->ahw)->hw_ops)->get_board_info))(adapter);
}

#line 2084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_set_mac_filter_count(struct qlcnic_adapter *adapter)
{
  #line 2086 
  if (((adapter->ahw)->hw_ops)->set_mac_filter_count != (void (*)(struct qlcnic_adapter *))0) 
    #line 2087 
    (*(((adapter->ahw)->hw_ops)->set_mac_filter_count))(adapter);
  #line 2088 
  return;
}

#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_read_phys_port_id(struct qlcnic_adapter *adapter)
{
  #line 2097 
  if (((adapter->ahw)->hw_ops)->read_phys_port_id != (int (*)(struct qlcnic_adapter *))0) 
    #line 2098 
    (*(((adapter->ahw)->hw_ops)->read_phys_port_id))(adapter);
  #line 2099 
  return;
}

#line 2137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_dev_request_reset(struct qlcnic_adapter *adapter, u32 key)
{
  #line 2140 
  if ((adapter->nic_ops)->request_reset != (void (*)(struct qlcnic_adapter *, u32 ))0) 
    #line 2141 
    (*((adapter->nic_ops)->request_reset))(adapter,key);
  #line 2142 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static irqreturn_t qlcnic_clear_legacy_intr(struct qlcnic_adapter *adapter)
{
  #line 2153 
  return (*((adapter->nic_ops)->clear_legacy_intr))(adapter);
}

#line 2162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int cmd)
{
  #line 2165 
  (*((adapter->nic_ops)->config_ipaddr))(adapter,ip,cmd);
  #line 2166 
  return;
}

#line 2174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_82xx_enable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 2177 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
    #line 2177 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
                                                       #line 2179 
                                                       writel(0U,tx_ring->crb_intr_mask);
  #line 2180 
  return;
}

#line 2183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_82xx_disable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 2186 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
    #line 2186 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
                                                       #line 2188 
                                                       writel(1U,tx_ring->crb_intr_mask);
  #line 2189 
  return;
}

#line 2221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_disable_multi_tx(struct qlcnic_adapter *adapter)
{
  #line 2223 
  test_and_set_bit(9L,& adapter->state);
  #line 2224 
  adapter->drv_tx_rings = (unsigned char)1U;
  #line 2225 
  return;
}

#line 2231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_82xx_disable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  #line 2234 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
    #line 2234 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
      #line 2235 
      if ((adapter->flags & 4U) != 0U) 
                                       #line 2237 
                                       writel(1U,sds_ring->crb_intr_mask); else 
                                                                    #line 2239 
                                                                    writel(0U,sds_ring->crb_intr_mask);
    else 
         #line 2239 
         writel(0U,sds_ring->crb_intr_mask);
  else 
       #line 2239 
       writel(0U,sds_ring->crb_intr_mask);
  #line 2240 
  return;
}

#line 2275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_82xx_enable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  #line 2278 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
    #line 2278 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
      #line 2279 
      if ((adapter->flags & 4U) != 0U) 
                                       #line 2281 
                                       writel(0U,sds_ring->crb_intr_mask); else 
                                                                    #line 2283 
                                                                    writel(1U,sds_ring->crb_intr_mask);
    else 
         #line 2283 
         writel(1U,sds_ring->crb_intr_mask);
  else 
       #line 2283 
       writel(1U,sds_ring->crb_intr_mask);
  #line 2285 
  if ((adapter->flags & 6U) == 0U) 
                                   #line 2286 
                                   writel(64511U,adapter->tgt_mask_reg);
  #line 2287 
  return;
}

#line 2304 
#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct ethtool_ops qlcnic_sriov_vf_ethtool_ops;
#line 2305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct ethtool_ops qlcnic_ethtool_ops;
#line 2306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct ethtool_ops qlcnic_ethtool_failed_ops;
#line 2384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_sriov_check(struct qlcnic_adapter *adapter)
{
  #line 2386 
  bool status;
  #line 2389 
  int tmp_1;
  #line 2389 
  if ((int)qlcnic_sriov_pf_check(adapter) != 0) 
                                                #line 2389 
                                                tmp_1 = 1;
  else {
    #line 2389 
    if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                  #line 2389 
                                                  tmp_1 = 1; else 
                                                                  #line 2389 
                                                                  tmp_1 = 0;
  }
  #line 2388 
  status = (_Bool)(tmp_1 != 0);
  #line 2391 
  return status;
}

#line 2394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static u32 qlcnic_get_vnic_func_count(struct qlcnic_adapter *adapter)
{
  #line 2396 
  if ((int)qlcnic_84xx_check(adapter) != 0) 
                                            #line 2397 
                                            return 16U; else 
                                                             #line 2399 
                                                             return 8U;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
char qlcnic_driver_name[7U] = {(char)'q', (char)'l', (char)'c', (char)'n', (char)'i', (char)'c'};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static char qlcnic_driver_string[62U] = {(char)'Q', (char)'L', (char)'o', (char)'g', (char)'i', (char)'c', (char)' ', (char)'1', (char)'/', (char)'1', (char)'0', (char)' ', (char)'G', (char)'b', (char)'E', (char)' '};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_mac_learn;
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_use_msi = 1;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_use_msi_x = 1;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_auto_fw_reset = 1;
#line 55 
#line 2462 
static int qlcnic_probe(struct pci_dev *pdev, struct pci_device_id *ent);
#line 56 
#line 2742 
static void qlcnic_remove(struct pci_dev *pdev);
#line 57 
#line 2844 
static int qlcnic_open(struct net_device *netdev);
#line 58 
#line 2872 
static int qlcnic_close(struct net_device *netdev);
#line 59 
#line 3071 
static void qlcnic_tx_timeout(struct net_device *netdev);
#line 60 
#line 3657 
static void qlcnic_attach_work(struct work_struct *work);
#line 61 
#line 3407 
static void qlcnic_fwinit_work(struct work_struct *work);
#line 63 
#line 3197 
static void qlcnic_idc_debug_info(struct qlcnic_adapter *adapter, u8 encoding);
#line 64 
#line 3318 
static int qlcnic_can_start_firmware(struct qlcnic_adapter *adapter);
#line 66 
#line 3134 
static irqreturn_t qlcnic_tmp_intr(int irq, void *data);
#line 67 
#line 3155 
static irqreturn_t qlcnic_intr(int irq, void *data);
#line 68 
#line 3168 
static irqreturn_t qlcnic_msi_intr(int irq, void *data);
#line 69 
#line 3180 
static irqreturn_t qlcnic_msix_intr(int irq, void *data);
#line 70 
#line 3188 
static irqreturn_t qlcnic_msix_tx_intr(int irq, void *data);
#line 72 
#line 3094 
static struct net_device_stats *qlcnic_get_stats(struct net_device *netdev);
#line 75 
#line 2939 
static void qlcnic_free_lb_filters_mem(struct qlcnic_adapter *adapter);
#line 76 
#line 3633 
static void qlcnic_dev_set_npar_ready(struct qlcnic_adapter *adapter);
#line 77 
#line 3979 
static int qlcnicvf_start_firmware(struct qlcnic_adapter *adapter);
#line 78 
#line 1371 
static int qlcnic_vlan_rx_add(struct net_device *netdev, __be16 proto, u16 vid);
#line 79 
#line 1391 
static int qlcnic_vlan_rx_del(struct net_device *netdev, __be16 proto, u16 vid);
#line 81 
#line 877 
static int qlcnic_82xx_setup_intr(struct qlcnic_adapter *adapter);
#line 82 
#line 3588 
static void qlcnic_82xx_dev_request_reset(struct qlcnic_adapter *adapter, u32 key);
#line 83 
#line 3112 
static irqreturn_t qlcnic_82xx_clear_legacy_intr(struct qlcnic_adapter *adapter);
#line 84 
#line 3915 
static pci_ers_result_t qlcnic_82xx_io_slot_reset(struct pci_dev *pdev);
#line 85 
#line 1652 
static int qlcnic_82xx_start_firmware(struct qlcnic_adapter *adapter);
#line 86 
#line 3927 
static void qlcnic_82xx_io_resume(struct pci_dev *pdev);
#line 87 
#line 2243 
static void qlcnic_82xx_set_mac_filter_count(struct qlcnic_adapter *adapter);
#line 88 
#line 3884 
static pci_ers_result_t qlcnic_82xx_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static u32 qlcnic_vlan_tx_check(struct qlcnic_adapter *adapter)
{
  #line 92 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 94 
  if ((unsigned int)(adapter->pdev)->device == 32800U) 
                                                       #line 95 
                                                       return ahw->capabilities & 512U; else 
                                                                    #line 97 
                                                                    return 1U;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct pci_device_id qlcnic_pci_tbl[8U] = {{.vendor = 4215U, .device = 32800U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 4215U, .device = 32816U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 4215U, .device = 33840U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 4215U, .device = 34864U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 4215U, .device = 35888U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 4215U, .device = 32832U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 4215U, .device = 33856U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
struct pci_device_id __mod_pci__qlcnic_pci_tbl_device_table[8U];
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_update_cmd_producer(struct qlcnic_host_tx_ring *tx_ring)
{
  #line 121 
  writel(tx_ring->producer,tx_ring->crb_cmd_producer);
  #line 122 
  return;
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static u32 msi_tgt_status[8U] = {101777688U, 101777760U, 101777764U, 101777768U, 101778272U, 101778276U, 101778280U, 101778284U};
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static u32 qlcnic_reg_tbl[23U] = {1777832U, 1777836U, 1777840U, 1777920U, 1777960U, 1777976U, 1777984U, 1777988U, 1777992U, 1777996U, 1778036U, 1778000U, 1778004U, 1778008U, 1778076U, 1778172U, 1778256U, 1778492U, 1778612U, 1778028U, 1778032U, 1294352U, 1294356U};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct qlcnic_board_info qlcnic_boards[22U] = {{.vendor = (unsigned short)4215U, .device = (unsigned short)32832U, .short_name = {(char)'8', (char)'4', (char)'0', (char)'0', (char)' ', (char)'s', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'(', (char)'T', (char)'C', (char)'P', (char)'/', (char)'I', (char)'P', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)'i', (char)'n', (char)'g', (char)')'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)590U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)579U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)586U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)582U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)594U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)622U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)608U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)614U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)617U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)625U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' '}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'1', (char)'/', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'l', (char)'e', (char)'r'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)34864U, .short_name = {(char)'8', (char)'8', (char)'3', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'1', (char)'/', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'l', (char)'e', (char)'r'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)515U, .short_name = {(char)'8', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)519U, .short_name = {(char)'8', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)523U, .short_name = {(char)'3', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'l', (char)'i', (char)'g', (char)'e', (char)'n', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)524U, .short_name = {(char)'3', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'Q', (char)'u', (char)'a', (char)'d', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'G', (char)'b', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'l', (char)'i', (char)'g', (char)'e', (char)'n', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)527U, .short_name = {(char)'3', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'l', (char)'i', (char)'g', (char)'e', (char)'n', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4156U, .sub_device = (unsigned short)14131U, .short_name = {(char)'N', (char)'C', (char)'5', (char)'2', (char)'3', (char)'S', (char)'F', (char)'P', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)' ', (char)'2', (char)'-', (char)'p', (char)'o', (char)'r', (char)'t', (char)' ', (char)'S', (char)'e', (char)'r', (char)'v', (char)'e', (char)'r', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4156U, .sub_device = (unsigned short)13126U, .short_name = {(char)'C', (char)'N', (char)'1', (char)'0', (char)'0', (char)'0', (char)'Q', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)528U, .short_name = {(char)'Q', (char)'M', (char)'E', (char)'8', (char)'2', (char)'4', (char)'2', (char)'-', (char)'k', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'M', (char)'e', (char)'z', (char)'z', (char)'a', (char)'n', (char)'i', (char)'n', (char)'e', (char)' ', (char)'C', (char)'a', (char)'r', (char)'d'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .short_name = {(char)'c', (char)'L', (char)'O', (char)'M', (char)'8', (char)'2', (char)'1', (char)'4', (char)' ', (char)'1', (char)'/', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'l', (char)'e', (char)'r'}}};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct qlcnic_legacy_intr_set legacy_intr[8U] = {{.int_vec_bit = 128U, .tgt_status_reg = 101777688U, .tgt_mask_reg = 101777704U}, {.int_vec_bit = 256U, .tgt_status_reg = 101777760U, .tgt_mask_reg = 101777776U}, {.int_vec_bit = 512U, .tgt_status_reg = 101777764U, .tgt_mask_reg = 101777780U}, {.int_vec_bit = 1024U, .tgt_status_reg = 101777768U, .tgt_mask_reg = 101777784U}, {.int_vec_bit = 2048U, .tgt_status_reg = 101778272U, .tgt_mask_reg = 101778288U}, {.int_vec_bit = 4096U, .tgt_status_reg = 101778276U, .tgt_mask_reg = 101778292U}, {.int_vec_bit = 8192U, .tgt_status_reg = 101778280U, .tgt_mask_reg = 101778296U}, {.int_vec_bit = 16384U, .tgt_status_reg = 101778284U, .tgt_mask_reg = 101778300U}};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_alloc_sds_rings(struct qlcnic_recv_context *recv_ctx, int count)
{
  #line 283 
  int size = (int)((unsigned long)count * (unsigned long)4096U);
  #line 285 
  recv_ctx->sds_rings = (struct qlcnic_host_sds_ring *)kzalloc_6((unsigned long)size,3264U);
  #line 287 
  return recv_ctx->sds_rings == (struct qlcnic_host_sds_ring *)0;
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_free_sds_rings(struct qlcnic_recv_context *recv_ctx)
{
  #line 292 
  kfree((void *)recv_ctx->sds_rings);
  #line 293 
  recv_ctx->sds_rings = (struct qlcnic_host_sds_ring *)0;
  #line 294 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_read_mac_addr(struct qlcnic_adapter *adapter)
{
  #line 300 
  u8 mac_addr[6U];
  #line 301 
  int ret;
  #line 298 
  struct net_device *netdev = adapter->netdev;
  #line 299 
  struct pci_dev *pdev = adapter->pdev;
  #line 303 
  ret = qlcnic_get_mac_address(adapter,(u8 *)(& mac_addr),(unsigned char)((int)(adapter->ahw)->pci_func));
  #line 305 
  if (ret != 0) 
                #line 306 
                return ret;
  #line 308 
  memcpy((void *)netdev->dev_addr,(void *)(& mac_addr),6UL);
  #line 309 
  memcpy((void *)(& adapter->mac_addr),(void *)netdev->dev_addr,(unsigned long)netdev->addr_len);
  #line 313 
  if (! is_valid_ether_addr(netdev->dev_addr)) 
                                               #line 314 
                                               _dev_warn(& pdev->dev,(char *)"Bad MAC address %pM.\n",netdev->dev_addr);
  #line 317 
  return 0;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_delete_adapter_mac(struct qlcnic_adapter *adapter)
{
  #line 322 
  struct qlcnic_mac_vlan_list *cur;
  #line 323 
  struct list_head *head;
  #line 325 
  head = adapter->mac_list.next;
  #line 325 
  while (& adapter->mac_list != head) {
    {
      #line 326 
      void *__mptr;
      #line 326 
      __mptr = (void *)head;
      #line 326 
      cur = ((struct qlcnic_mac_vlan_list *)__mptr);
      #line 327 
      if ((int)ether_addr_equal_unaligned((u8 *)(& adapter->mac_addr),
                                   (u8 *)(& cur->mac_addr)) != 0) {
        #line 328 
        qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)0,(unsigned char)2);
        #line 330 
        list_del_2(& cur->list);
        #line 331 
        kfree((void *)cur);
        #line 332 
        return;
      }
    }
    #line 325 
    head = head->next;
  }
  #line 335 
  return;
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_mac(struct net_device *netdev, void *p)
{
  #line 339 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 340 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 342 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 343 
                                                return -22;
  #line 345 
  if ((adapter->flags & 1024U) != 0U) 
                                      #line 346 
                                      return -95;
  #line 348 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 349 
                                                      return -22;
  #line 351 
  if ((int)ether_addr_equal_unaligned((u8 *)(& adapter->mac_addr),
                                   (u8 *)(& addr->sa_data)) != 0) {
    #line 351 
    if ((int)ether_addr_equal_unaligned(netdev->dev_addr,(u8 *)(& addr->sa_data)) != 0) 
      #line 353 
      return 0;
  }
  #line 355 
  if ((int)test_bit(1L,& adapter->state) != 0) {
    #line 356 
    netif_device_detach(netdev);
    #line 357 
    qlcnic_napi_disable(adapter);
  }
  #line 360 
  qlcnic_delete_adapter_mac(adapter);
  #line 361 
  memcpy((void *)(& adapter->mac_addr),(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 362 
  memcpy((void *)netdev->dev_addr,(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 363 
  qlcnic_set_multi(adapter->netdev);
  #line 365 
  if ((int)test_bit(1L,& adapter->state) != 0) {
    #line 366 
    netif_device_attach(netdev);
    #line 367 
    qlcnic_napi_enable(adapter);
  }
  #line 369 
  return 0;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_fdb_del(struct ndmsg *ndm, struct nlattr **tb, struct net_device *netdev, unsigned char *addr, u16 vid)
{
  #line 376 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 377 
  int err = -95;
  #line 379 
  if (! adapter->fdb_mac_learn) {
    #line 380 
    return ndo_dflt_fdb_del(ndm,tb,netdev,addr,(unsigned short)((int)vid));
  }
  #line 382 
  if ((adapter->flags & 64U) != 0U) 
                                    #line 382 
                                    goto _LOR;
  else {
    #line 382 
    if ((int)qlcnic_sriov_check(adapter) != 0) {
      #line 382 
      _LOR: 
      #line 384 
      if ((int)is_unicast_ether_addr(addr) != 0) {
        #line 385 
        err = dev_uc_del(netdev,addr);
        #line 386 
        if (err == 0) 
                      #line 387 
                      err = qlcnic_nic_del_mac(adapter,addr);
      }
      else {
        #line 388 
        if ((int)is_multicast_ether_addr(addr) != 0) 
                                                     #line 389 
                                                     err = dev_mc_del(netdev,addr); else 
                                                                    #line 391 
                                                                    err = -22;
      }
    }
  }
  #line 394 
  return err;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_fdb_add(struct ndmsg *ndm, struct nlattr **tb, struct net_device *netdev, unsigned char *addr, u16 vid, u16 flags, struct netlink_ext_ack *extack)
{
  #line 402 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 403 
  int err = 0;
  #line 405 
  if (! adapter->fdb_mac_learn) {
    #line 406 
    return ndo_dflt_fdb_add(ndm,tb,netdev,addr,(unsigned short)((int)vid),
                         (unsigned short)((int)flags));
  }
  #line 408 
  if ((adapter->flags & 64U) == 0U) {
    #line 409 
    if (! qlcnic_sriov_check(adapter)) {
      #line 410 
      printk((char *)"\001",(char *)"qlcnic_fdb_add");
      #line 411 
      return -95;
    }
  }
  #line 414 
  if ((int)ether_addr_equal(addr,(u8 *)(& adapter->mac_addr)) != 0) 
                                                                    #line 415 
                                                                    return err;
  #line 417 
  if ((int)is_unicast_ether_addr(addr) != 0) 
    #line 418 
    if (netdev->uc.count < (int)(adapter->ahw)->max_uc_count) 
                                                              #line 419 
                                                              err = dev_uc_add_excl(netdev,addr); else 
                                                                    #line 421 
                                                                    err = -12;
  else {
    #line 422 
    if ((int)is_multicast_ether_addr(addr) != 0) 
                                                 #line 423 
                                                 err = dev_mc_add_excl(netdev,addr); else 
                                                                    #line 425 
                                                                    err = -22;
  }
  #line 428 
  return err;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_fdb_dump(struct sk_buff *skb, struct netlink_callback *ncb, struct net_device *netdev, struct net_device *filter_dev, int *idx)
{
  #line 435 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 436 
  int err = 0;
  #line 438 
  if (! adapter->fdb_mac_learn) {
    #line 439 
    return ndo_dflt_fdb_dump(skb,ncb,netdev,filter_dev,idx);
  }
  #line 441 
  if ((adapter->flags & 64U) != 0U) 
                                    #line 443 
                                    err = ndo_dflt_fdb_dump(skb,ncb,netdev,filter_dev,idx);
  else {
    #line 441 
    if ((int)qlcnic_sriov_check(adapter) != 0) 
                                               #line 443 
                                               err = ndo_dflt_fdb_dump(skb,ncb,netdev,filter_dev,idx);
  }
  #line 445 
  return err;
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_82xx_cancel_idc_work(struct qlcnic_adapter *adapter)
{
  #line 450 
  while (1) {
    #line 450 
    if (! ((int)test_and_set_bit(2L,& adapter->state) != 0)) 
                                                             #line 450 
                                                             break;
    #line 451 
    usleep_range(10000UL,11000UL);
  }
  #line 453 
  if (adapter->fw_work.work.func == (void (*)(struct work_struct *))0) 
    #line 454 
    return;
  #line 456 
  cancel_delayed_work_sync(& adapter->fw_work);
  #line 457 
  return;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_get_phys_port_id(struct net_device *netdev, struct netdev_phys_item_id *ppid)
{
  #line 462 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 463 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 465 
  if ((adapter->flags & 262144U) == 0U) 
                                        #line 466 
                                        return -95;
  #line 468 
  ppid->id_len = (unsigned char)6U;
  #line 469 
  memcpy((void *)(& ppid->id),(void *)(& ahw->phys_port_id),(unsigned long)ppid->id_len);
  #line 471 
  return 0;
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_add_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 477 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 478 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 480 
  if ((unsigned int)ti->type != 0U) 
                                    #line 481 
                                    return;
  #line 486 
  if (! qlcnic_encap_rx_offload(adapter)) 
                                          #line 487 
                                          return;
  #line 488 
  if ((unsigned int)ahw->vxlan_port_count == 0U) {
    #line 489 
    ahw->vxlan_port_count = (unsigned char)1U;
    #line 490 
    ahw->vxlan_port = __builtin_bswap16((unsigned short)((int)ti->port));
    #line 491 
    adapter->flags |= 1048576U;
    #line 492 
    return;
  }
  #line 494 
  ;
  #line 494 
  if ((int)ahw->vxlan_port == (int)__builtin_bswap16((unsigned short)((int)ti->port))) 
    #line 495 
    ahw->vxlan_port_count = (u8)((int)ahw->vxlan_port_count + 1);
  #line 496 
  return;
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_del_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 502 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 503 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 505 
  if ((unsigned int)ti->type != 0U) 
                                    #line 506 
                                    return;
  #line 508 
  if (qlcnic_encap_rx_offload(adapter)) 
    #line 508 
    if ((unsigned int)ahw->vxlan_port_count == 0U) 
                                                   #line 510 
                                                   return;
    else {
      #line 509 
      ;
      #line 509 
      if ((int)ahw->vxlan_port != (int)__builtin_bswap16((unsigned short)((int)ti->port))) 
        #line 510 
        return;
    }
  else 
       #line 510 
       return;
  #line 512 
  ahw->vxlan_port_count = (u8)((int)ahw->vxlan_port_count - 1);
  #line 513 
  if ((unsigned int)ahw->vxlan_port_count == 0U) 
                                                 #line 514 
                                                 adapter->flags |= 2097152U;
  #line 515 
  return;
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static netdev_features_t qlcnic_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 521 
  features = vlan_features_check(skb,features);
  #line 522 
  return vxlan_features_check(skb,features);
}

#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct net_device_ops qlcnic_netdev_ops = {.ndo_open = & qlcnic_open, .ndo_stop = & qlcnic_close, .ndo_start_xmit = & qlcnic_xmit_frame, .ndo_features_check = & qlcnic_features_check, .ndo_set_rx_mode = & qlcnic_set_multi, .ndo_set_mac_address = & qlcnic_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & qlcnic_change_mtu, .ndo_tx_timeout = & qlcnic_tx_timeout, .ndo_get_stats = & qlcnic_get_stats, .ndo_vlan_rx_add_vid = & qlcnic_vlan_rx_add, .ndo_vlan_rx_kill_vid = & qlcnic_vlan_rx_del, .ndo_set_vf_mac = & qlcnic_sriov_set_vf_mac, .ndo_set_vf_vlan = & qlcnic_sriov_set_vf_vlan, .ndo_set_vf_rate = & qlcnic_sriov_set_vf_tx_rate, .ndo_set_vf_spoofchk = & qlcnic_sriov_set_vf_spoofchk, .ndo_get_vf_config = & qlcnic_sriov_get_vf_config, .ndo_fix_features = & qlcnic_fix_features, .ndo_set_features = & qlcnic_set_features, .ndo_fdb_add = & qlcnic_fdb_add, .ndo_fdb_del = & qlcnic_fdb_del, .ndo_fdb_dump = & qlcnic_fdb_dump, .ndo_get_phys_port_id = & qlcnic_get_phys_port_id, .ndo_udp_tunnel_add = & qlcnic_add_vxlan_port, .ndo_udp_tunnel_del = & qlcnic_del_vxlan_port};
#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct net_device_ops qlcnic_netdev_failed_ops = {.ndo_open = & qlcnic_open};
#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct qlcnic_nic_template qlcnic_ops = {.config_bridged_mode = & qlcnic_config_bridged_mode, .config_led = & qlcnic_82xx_config_led, .start_firmware = & qlcnic_82xx_start_firmware, .request_reset = & qlcnic_82xx_dev_request_reset, .cancel_idc_work = & qlcnic_82xx_cancel_idc_work, .napi_add = & qlcnic_82xx_napi_add, .napi_del = & qlcnic_82xx_napi_del, .config_ipaddr = & qlcnic_82xx_config_ipaddr, .clear_legacy_intr = & qlcnic_82xx_clear_legacy_intr, .shutdown = & qlcnic_82xx_shutdown, .resume = & qlcnic_82xx_resume};
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
struct qlcnic_nic_template qlcnic_vf_ops = {.config_bridged_mode = & qlcnicvf_config_bridged_mode, .config_led = & qlcnicvf_config_led, .start_firmware = & qlcnicvf_start_firmware};
#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct qlcnic_hardware_ops qlcnic_hw_ops = {.read_crb = & qlcnic_82xx_read_crb, .write_crb = & qlcnic_82xx_write_crb, .read_reg = & qlcnic_82xx_hw_read_wx_2M, .write_reg = & qlcnic_82xx_hw_write_wx_2M, .get_mac_address = & qlcnic_82xx_get_mac_address, .setup_intr = & qlcnic_82xx_setup_intr, .alloc_mbx_args = & qlcnic_82xx_alloc_mbx_args, .mbx_cmd = & qlcnic_82xx_issue_cmd, .get_func_no = & qlcnic_82xx_get_func_no, .api_lock = & qlcnic_82xx_api_lock, .api_unlock = & qlcnic_82xx_api_unlock, .add_sysfs = & qlcnic_82xx_add_sysfs, .remove_sysfs = & qlcnic_82xx_remove_sysfs, .process_lb_rcv_ring_diag = & qlcnic_82xx_process_rcv_ring_diag, .create_rx_ctx = & qlcnic_82xx_fw_cmd_create_rx_ctx, .create_tx_ctx = & qlcnic_82xx_fw_cmd_create_tx_ctx, .del_rx_ctx = & qlcnic_82xx_fw_cmd_del_rx_ctx, .del_tx_ctx = & qlcnic_82xx_fw_cmd_del_tx_ctx, .setup_link_event = & qlcnic_82xx_linkevent_request, .get_nic_info = & qlcnic_82xx_get_nic_info, .get_pci_info = & qlcnic_82xx_get_pci_info, .set_nic_info = & qlcnic_82xx_set_nic_info, .change_macvlan = & qlcnic_82xx_sre_macaddr_change, .napi_enable = & qlcnic_82xx_napi_enable, .napi_disable = & qlcnic_82xx_napi_disable, .config_intr_coal = & qlcnic_82xx_config_intr_coalesce, .config_rss = & qlcnic_82xx_config_rss, .config_hw_lro = & qlcnic_82xx_config_hw_lro, .config_loopback = & qlcnic_82xx_set_lb_mode, .clear_loopback = & qlcnic_82xx_clear_lb_mode, .config_promisc_mode = & qlcnic_82xx_nic_set_promisc, .change_l2_filter = & qlcnic_82xx_change_filter, .get_board_info = & qlcnic_82xx_get_board_info, .set_mac_filter_count = & qlcnic_82xx_set_mac_filter_count, .free_mac_list = & qlcnic_82xx_free_mac_list, .read_phys_port_id = & qlcnic_82xx_read_phys_port_id, .io_error_detected = & qlcnic_82xx_io_error_detected, .io_slot_reset = & qlcnic_82xx_io_slot_reset, .io_resume = & qlcnic_82xx_io_resume, .get_beacon_state = & qlcnic_82xx_get_beacon_state, .enable_sds_intr = & qlcnic_82xx_enable_sds_intr, .disable_sds_intr = & qlcnic_82xx_disable_sds_intr, .enable_tx_intr = & qlcnic_82xx_enable_tx_intr, .disable_tx_intr = & qlcnic_82xx_disable_tx_intr, .get_saved_state = & qlcnic_82xx_get_saved_state, .set_saved_state = & qlcnic_82xx_set_saved_state, .cache_tmpl_hdr_values = & qlcnic_82xx_cache_tmpl_hdr_values, .get_cap_size = & qlcnic_82xx_get_cap_size, .set_sys_info = & qlcnic_82xx_set_sys_info, .store_cap_mask = & qlcnic_82xx_store_cap_mask, .encap_rx_offload = & qlcnic_82xx_encap_tx_offload, .encap_tx_offload = & qlcnic_82xx_encap_tx_offload};
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_multi_tx_capability(struct qlcnic_adapter *adapter)
{
  #line 636 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 638 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
    #line 638 
    if ((ahw->extra_capability[0] & 16U) != 0U) {
      #line 640 
      test_and_set_bit(9L,& adapter->state);
      #line 641 
      return 0;
    }
    else 
         #line 643 
         return 1;
  else 
       #line 643 
       return 1;
}

#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_max_rings(struct qlcnic_adapter *adapter, u8 ring_cnt, int queue_type)
{
  #line 657 
  int __UNIQUE_ID___x556;
  #line 657 
  int tmp_0;
  #line 650 
  int num_rings;
  #line 650 
  int max_rings = 8;
  #line 652 
  if (queue_type == 2) 
                       #line 653 
                       max_rings = (int)adapter->max_sds_rings;
  else 
    #line 654 
    if (queue_type == 1) 
                         #line 655 
                         max_rings = (int)adapter->max_tx_rings;
  {
    #line 657 
    __UNIQUE_ID___x556 = (int)num_online_cpus();
    #line 657 
    int __UNIQUE_ID___y557 = max_rings;
    #line 657 
    if (__UNIQUE_ID___x556 < __UNIQUE_ID___y557) 
                                                 #line 657 
                                                 tmp_0 = __UNIQUE_ID___x556; else 
                                                                    #line 657 
                                                                    tmp_0 = __UNIQUE_ID___y557;
    }
  #line 657 
  num_rings = (int)__rounddown_pow_of_two((unsigned long)tmp_0);
  #line 660 
  if ((int)ring_cnt > num_rings) 
                                 #line 661 
                                 return num_rings; else 
                                                        #line 663 
                                                        return (int)ring_cnt;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_tx_ring_count(struct qlcnic_adapter *adapter, u8 tx_cnt)
{
  #line 669 
  if ((unsigned int)adapter->max_tx_rings != 0U) {
    #line 670 
    adapter->drv_tx_rings = (unsigned char)qlcnic_max_rings(adapter,(unsigned char)((int)tx_cnt),1);
  }
  else 
       #line 673 
       adapter->drv_tx_rings = tx_cnt;
  #line 674 
  return;
}

#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_sds_ring_count(struct qlcnic_adapter *adapter, u8 rx_cnt)
{
  #line 679 
  if ((unsigned int)adapter->max_sds_rings != 0U) {
    #line 680 
    adapter->drv_sds_rings = (unsigned char)qlcnic_max_rings(adapter,(unsigned char)((int)rx_cnt),2);
  }
  else 
       #line 683 
       adapter->drv_sds_rings = rx_cnt;
  #line 684 
  return;
}

#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_setup_tss_rss_intr(struct qlcnic_adapter *adapter)
{
  #line 689 
  int vector;
  #line 688 
  struct pci_dev *pdev = adapter->pdev;
  #line 689 
  int num_msix = 0;
  #line 689 
  int err = 0;
  #line 691 
  adapter->flags &= 4294443007U;
  #line 693 
  if ((unsigned int)adapter->drv_tss_rings != 0U) 
                                                  #line 694 
                                                  num_msix = (int)adapter->drv_tss_rings + num_msix; else 
                                                                    #line 696 
                                                                    num_msix = (int)adapter->drv_tx_rings + num_msix;
  #line 698 
  if ((unsigned int)adapter->drv_rss_rings != 0U) 
                                                  #line 699 
                                                  num_msix = (int)adapter->drv_rss_rings + num_msix; else 
                                                                    #line 701 
                                                                    num_msix = (int)adapter->drv_sds_rings + num_msix;
  #line 703 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 704 
                                            num_msix ++;
  #line 706 
  if (adapter->msix_entries == (struct msix_entry *)0) {
    #line 707 
    adapter->msix_entries = (struct msix_entry *)kcalloc_3((unsigned long)num_msix,8UL,3264U);
    #line 710 
    if (adapter->msix_entries == (struct msix_entry *)0) 
                                                         #line 711 
                                                         return -12;
  }
  #line 714 
  vector = 0;
  #line 714 
  while (vector < num_msix) {
    #line 715 
    (adapter->msix_entries + (unsigned long)vector)->entry = (unsigned short)vector;
    #line 714 
    vector ++;
  }
  #line 717 
  restore: 
           #line 717 
  ;
  #line 718 
  err = pci_enable_msix_exact(pdev,adapter->msix_entries,num_msix);
  #line 719 
  if (err == -28) {
    #line 720 
    if ((unsigned int)adapter->drv_tss_rings == 0U && (unsigned int)adapter->drv_rss_rings == 0U) 
      #line 721 
      return err;
    #line 723 
    netdev_info(adapter->netdev,(char *)"Unable to allocate %d MSI-X vectors, Available vectors %d\n",num_msix,err);
    #line 727 
    num_msix = (int)adapter->drv_tx_rings + (int)adapter->drv_sds_rings;
    #line 730 
    adapter->drv_tss_rings = (unsigned char)0U;
    #line 731 
    adapter->drv_rss_rings = (unsigned char)0U;
    #line 733 
    if ((int)qlcnic_83xx_check(adapter) != 0) 
                                              #line 734 
                                              num_msix ++;
    #line 736 
    netdev_info(adapter->netdev,(char *)"Restoring %d Tx, %d SDS rings for total %d vectors.\n",(int)adapter->drv_tx_rings,(int)adapter->drv_sds_rings,num_msix);
    #line 741 
    goto restore;
  }
  else 
    #line 742 
    if (err < 0) 
                 #line 743 
                 return err;
  #line 746 
  (adapter->ahw)->num_msix = (unsigned char)num_msix;
  #line 747 
  if ((unsigned int)adapter->drv_tss_rings != 0U) 
                                                  #line 748 
                                                  adapter->drv_tx_rings = adapter->drv_tss_rings;
  #line 750 
  if ((unsigned int)adapter->drv_rss_rings != 0U) 
                                                  #line 751 
                                                  adapter->drv_sds_rings = adapter->drv_rss_rings;
  #line 753 
  return 0;
}

#line 756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_enable_msix(struct qlcnic_adapter *adapter, u32 num_msix)
{
  #line 759 
  int err;
  #line 759 
  int vector;
  #line 758 
  struct pci_dev *pdev = adapter->pdev;
  #line 761 
  if (adapter->msix_entries == (struct msix_entry *)0) {
    #line 762 
    adapter->msix_entries = (struct msix_entry *)kcalloc_3((unsigned long)num_msix,8UL,3264U);
    #line 765 
    if (adapter->msix_entries == (struct msix_entry *)0) 
                                                         #line 766 
                                                         return -12;
  }
  #line 769 
  adapter->flags &= 4294967289U;
  #line 771 
  if ((unsigned int)(adapter->ahw)->msix_supported != 0U) {
    #line 772 
    enable_msix: 
                 #line 772 
    ;
    #line 773 
    vector = 0;
    #line 773 
    while ((unsigned int)vector < num_msix) {
      #line 774 
      (adapter->msix_entries + (unsigned long)vector)->entry = (unsigned short)vector;
      #line 773 
      vector ++;
    }
    #line 776 
    err = pci_enable_msix_range(pdev,adapter->msix_entries,1,(int)num_msix);
    #line 779 
    if ((unsigned int)err == num_msix) {
      #line 780 
      adapter->flags |= 4U;
      #line 781 
      (adapter->ahw)->num_msix = (unsigned char)num_msix;
      #line 782 
      _dev_info(& pdev->dev,(char *)"using msi-x interrupts\n");
      #line 783 
      return 0;
    }
    else 
      #line 784 
      if (err > 0) {
        #line 785 
        pci_disable_msix(pdev);
        #line 787 
        _dev_info(& pdev->dev,(char *)"Unable to allocate %d MSI-X vectors, Available vectors %d\n",num_msix,err);
        #line 791 
        if ((int)qlcnic_82xx_check(adapter) != 0) {
          #line 792 
          if (0 != 0) {
            #line 792 
            unsigned int tmp_33;
            #line 792 
            unsigned int tmp_1;
            #line 792 
            unsigned int tmp_2;
            #line 792 
            unsigned int tmp_34;
            #line 792 
            unsigned int tmp_35;
            #line 792 
            unsigned int tmp_3;
            #line 792 
            unsigned int tmp_4;
            #line 792 
            unsigned int tmp_36;
            #line 792 
            unsigned int tmp_37;
            #line 792 
            unsigned int tmp_5;
            #line 792 
            unsigned int tmp_6;
            #line 792 
            unsigned int tmp_38;
            #line 792 
            unsigned int tmp_39;
            #line 792 
            unsigned int tmp_7;
            #line 792 
            unsigned int tmp_8;
            #line 792 
            unsigned int tmp_40;
            #line 792 
            unsigned int tmp_41;
            #line 792 
            unsigned int tmp_9;
            #line 792 
            unsigned int tmp_10;
            #line 792 
            unsigned int tmp_42;
            #line 792 
            unsigned int tmp_43;
            #line 792 
            unsigned int tmp_11;
            #line 792 
            unsigned int tmp_12;
            #line 792 
            unsigned int tmp_44;
            #line 792 
            unsigned int tmp_45;
            #line 792 
            unsigned int tmp_13;
            #line 792 
            unsigned int tmp_14;
            #line 792 
            unsigned int tmp_46;
            #line 792 
            unsigned int tmp_47;
            #line 792 
            unsigned int tmp_15;
            #line 792 
            unsigned int tmp_16;
            #line 792 
            unsigned int tmp_48;
            #line 792 
            unsigned int tmp_49;
            #line 792 
            unsigned int tmp_17;
            #line 792 
            unsigned int tmp_18;
            #line 792 
            unsigned int tmp_50;
            #line 792 
            unsigned int tmp_51;
            #line 792 
            unsigned int tmp_19;
            #line 792 
            unsigned int tmp_20;
            #line 792 
            unsigned int tmp_52;
            #line 792 
            unsigned int tmp_53;
            #line 792 
            unsigned int tmp_21;
            #line 792 
            unsigned int tmp_22;
            #line 792 
            unsigned int tmp_54;
            #line 792 
            unsigned int tmp_55;
            #line 792 
            unsigned int tmp_23;
            #line 792 
            unsigned int tmp_24;
            #line 792 
            unsigned int tmp_56;
            #line 792 
            unsigned int tmp_57;
            #line 792 
            unsigned int tmp_25;
            #line 792 
            unsigned int tmp_26;
            #line 792 
            unsigned int tmp_58;
            #line 792 
            unsigned int tmp_59;
            #line 792 
            unsigned int tmp_27;
            #line 792 
            unsigned int tmp_28;
            #line 792 
            unsigned int tmp_60;
            #line 792 
            unsigned int tmp_61;
            #line 792 
            unsigned int tmp_29;
            #line 792 
            unsigned int tmp_30;
            #line 792 
            unsigned int tmp_31;
            #line 792 
            unsigned int tmp_0;
            #line 792 
            unsigned int tmp_32;
            #line 792 
            unsigned int tmp_62;
            #line 792 
            if (err > 1) {
              #line 792 
              if (((unsigned long long)err & 9223372036854775808ULL) == 0ULL) {
                #line 792 
                if (((unsigned long long)err & 4611686018427387904ULL) == 0ULL) {
                  #line 792 
                  if (((unsigned long long)err & 2305843009213693952ULL) == 0ULL) {
                    #line 792 
                    if (((unsigned long long)err & 1152921504606846976ULL) == 0ULL) {
                      #line 792 
                      if (((unsigned long long)err & 576460752303423488ULL) == 0ULL) {
                        #line 792 
                        if (((unsigned long long)err & 288230376151711744ULL) == 0ULL) {
                          #line 792 
                          if (((unsigned long long)err & 144115188075855872ULL) == 0ULL) {
                            #line 792 
                            if (((unsigned long long)err & 72057594037927936ULL) == 0ULL) {
                              #line 792 
                              if (((unsigned long long)err & 36028797018963968ULL) == 0ULL) {
                                #line 792 
                                if (((unsigned long long)err & 18014398509481984ULL) == 0ULL) {
                                  #line 792 
                                  if (((unsigned long long)err & 9007199254740992ULL) == 0ULL) {
                                    #line 792 
                                    if (((unsigned long long)err & 4503599627370496ULL) == 0ULL) {
                                      #line 792 
                                      if (((unsigned long long)err & 2251799813685248ULL) == 0ULL) {
                                        #line 792 
                                        if (((unsigned long long)err & 1125899906842624ULL) == 0ULL) {
                                          #line 792 
                                          if (((unsigned long long)err & 562949953421312ULL) == 0ULL) {
                                            #line 792 
                                            if (((unsigned long long)err & 281474976710656ULL) == 0ULL) {
                                              #line 792 
                                              if (((unsigned long long)err & 140737488355328ULL) == 0ULL) {
                                                #line 792 
                                                if (((unsigned long long)err & 70368744177664ULL) == 0ULL) {
                                                  #line 792 
                                                  if (((unsigned long long)err & 35184372088832ULL) == 0ULL) {
                                                    #line 792 
                                                    if (((unsigned long long)err & 17592186044416ULL) == 0ULL) {
                                                      #line 792 
                                                      if (((unsigned long long)err & 8796093022208ULL) == 0ULL) {
                                                        #line 792 
                                                        if (((unsigned long long)err & 4398046511104ULL) == 0ULL) {
                                                          #line 792 
                                                          if (((unsigned long long)err & 2199023255552ULL) == 0ULL) {
                                                            #line 792 
                                                            if (((unsigned long long)err & 1099511627776ULL) == 0ULL) {
                                                              #line 792 
                                                              if (((unsigned long long)err & 549755813888ULL) == 0ULL) {
                                                                #line 792 
                                                                if (((unsigned long long)err & 274877906944ULL) == 0ULL) {
                                                                  #line 792 
                                                                  if (
                                                                    ((unsigned long long)err & 137438953472ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 68719476736ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 34359738368ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 17179869184ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 8589934592ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 4294967296ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 2147483648ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 1073741824ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 536870912ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 268435456ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 134217728ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 67108864ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 33554432ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 16777216ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 8388608ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 4194304ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 2097152ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 1048576ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 524288ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 262144ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 131072ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 65536ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 32768ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 16384ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 8192ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 4096ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 2048ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 1024ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 512ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 256ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 128ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 64ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 32ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 16ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 8ULL) == 0ULL) {
                                                                    #line 792 
                                                                    if (
                                                                    ((unsigned long long)err & 4ULL) != 0ULL) 
                                                                    #line 792 
                                                                    tmp_0 = 4U; else 
                                                                    #line 792 
                                                                    tmp_0 = 2U;
                                                                    #line 792 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_1 = 8U;
                                                                    #line 792 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_2 = 16U;
                                                                    #line 792 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_3 = 32U;
                                                                    #line 792 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_4 = 64U;
                                                                    #line 792 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_5 = 128U;
                                                                    #line 792 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_6 = 256U;
                                                                    #line 792 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_7 = 512U;
                                                                    #line 792 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_8 = 1024U;
                                                                    #line 792 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_9 = 2048U;
                                                                    #line 792 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_10 = 4096U;
                                                                    #line 792 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_11 = 8192U;
                                                                    #line 792 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_12 = 16384U;
                                                                    #line 792 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_13 = 32768U;
                                                                    #line 792 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_14 = 65536U;
                                                                    #line 792 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_15 = 131072U;
                                                                    #line 792 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_16 = 262144U;
                                                                    #line 792 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_17 = 524288U;
                                                                    #line 792 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_18 = 1048576U;
                                                                    #line 792 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_19 = 2097152U;
                                                                    #line 792 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_20 = 4194304U;
                                                                    #line 792 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_21 = 8388608U;
                                                                    #line 792 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_22 = 16777216U;
                                                                    #line 792 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_23 = 33554432U;
                                                                    #line 792 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_24 = 67108864U;
                                                                    #line 792 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_25 = 134217728U;
                                                                    #line 792 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_26 = 268435456U;
                                                                    #line 792 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_27 = 536870912U;
                                                                    #line 792 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_28 = 1073741824U;
                                                                    #line 792 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_29 = 2147483648U;
                                                                    #line 792 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_30 = 0U;
                                                                    #line 792 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_31 = 0U;
                                                                    #line 792 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_32 = 0U;
                                                                    #line 792 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_33 = 0U;
                                                                    #line 792 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 792 
                                                                    tmp_34 = 0U;
                                                                    #line 792 
                                                                    tmp_35 = tmp_34;
                                                                  }
                                                                  else 
                                                                    #line 792 
                                                                    tmp_35 = 0U;
                                                                  #line 792 
                                                                  tmp_36 = tmp_35;
                                                                }
                                                                else 
                                                                  #line 792 
                                                                  tmp_36 = 0U;
                                                                #line 792 
                                                                tmp_37 = tmp_36;
                                                              }
                                                              else 
                                                                   #line 792 
                                                                   tmp_37 = 0U;
                                                              #line 792 
                                                              tmp_38 = tmp_37;
                                                            }
                                                            else 
                                                                 #line 792 
                                                                 tmp_38 = 0U;
                                                            #line 792 
                                                            tmp_39 = tmp_38;
                                                          }
                                                          else 
                                                               #line 792 
                                                               tmp_39 = 0U;
                                                          #line 792 
                                                          tmp_40 = tmp_39;
                                                        }
                                                        else 
                                                             #line 792 
                                                             tmp_40 = 0U;
                                                        #line 792 
                                                        tmp_41 = tmp_40;
                                                      }
                                                      else 
                                                           #line 792 
                                                           tmp_41 = 0U;
                                                      #line 792 
                                                      tmp_42 = tmp_41;
                                                    }
                                                    else 
                                                         #line 792 
                                                         tmp_42 = 0U;
                                                    #line 792 
                                                    tmp_43 = tmp_42;
                                                  }
                                                  else 
                                                       #line 792 
                                                       tmp_43 = 0U;
                                                  #line 792 
                                                  tmp_44 = tmp_43;
                                                }
                                                else 
                                                     #line 792 
                                                     tmp_44 = 0U;
                                                #line 792 
                                                tmp_45 = tmp_44;
                                              }
                                              else 
                                                   #line 792 
                                                   tmp_45 = 0U;
                                              #line 792 
                                              tmp_46 = tmp_45;
                                            }
                                            else 
                                                 #line 792 
                                                 tmp_46 = 0U;
                                            #line 792 
                                            tmp_47 = tmp_46;
                                          }
                                          else 
                                               #line 792 
                                               tmp_47 = 0U;
                                          #line 792 
                                          tmp_48 = tmp_47;
                                        }
                                        else 
                                             #line 792 
                                             tmp_48 = 0U;
                                        #line 792 
                                        tmp_49 = tmp_48;
                                      }
                                      else 
                                           #line 792 
                                           tmp_49 = 0U;
                                      #line 792 
                                      tmp_50 = tmp_49;
                                    }
                                    else 
                                         #line 792 
                                         tmp_50 = 0U;
                                    #line 792 
                                    tmp_51 = tmp_50;
                                  }
                                  else 
                                       #line 792 
                                       tmp_51 = 0U;
                                  #line 792 
                                  tmp_52 = tmp_51;
                                }
                                else 
                                     #line 792 
                                     tmp_52 = 0U;
                                #line 792 
                                tmp_53 = tmp_52;
                              }
                              else 
                                   #line 792 
                                   tmp_53 = 0U;
                              #line 792 
                              tmp_54 = tmp_53;
                            }
                            else 
                                 #line 792 
                                 tmp_54 = 0U;
                            #line 792 
                            tmp_55 = tmp_54;
                          }
                          else 
                               #line 792 
                               tmp_55 = 0U;
                          #line 792 
                          tmp_56 = tmp_55;
                        }
                        else 
                             #line 792 
                             tmp_56 = 0U;
                        #line 792 
                        tmp_57 = tmp_56;
                      }
                      else 
                           #line 792 
                           tmp_57 = 0U;
                      #line 792 
                      tmp_58 = tmp_57;
                    }
                    else 
                         #line 792 
                         tmp_58 = 0U;
                    #line 792 
                    tmp_59 = tmp_58;
                  }
                  else 
                       #line 792 
                       tmp_59 = 0U;
                  #line 792 
                  tmp_60 = tmp_59;
                }
                else 
                     #line 792 
                     tmp_60 = 0U;
                #line 792 
                tmp_61 = tmp_60;
              }
              else 
                   #line 792 
                   tmp_61 = 0U;
              #line 792 
              tmp_62 = tmp_61;
            }
            else 
                 #line 792 
                 tmp_62 = 1U;
            #line 792 
            num_msix = tmp_62;
          }
          else {
            #line 792 
            num_msix = (unsigned int)__rounddown_pow_of_two((unsigned long)err);
          }
          #line 793 
          if (err <= 1) 
                        #line 794 
                        return -28;
        }
        else {
          #line 796 
          if (0 != 0) {
            #line 796 
            unsigned int tmp_97;
            #line 796 
            unsigned int tmp_65;
            #line 796 
            unsigned int tmp_66;
            #line 796 
            unsigned int tmp_98;
            #line 796 
            unsigned int tmp_99;
            #line 796 
            unsigned int tmp_67;
            #line 796 
            unsigned int tmp_68;
            #line 796 
            unsigned int tmp_100;
            #line 796 
            unsigned int tmp_101;
            #line 796 
            unsigned int tmp_69;
            #line 796 
            unsigned int tmp_70;
            #line 796 
            unsigned int tmp_102;
            #line 796 
            unsigned int tmp_103;
            #line 796 
            unsigned int tmp_71;
            #line 796 
            unsigned int tmp_72;
            #line 796 
            unsigned int tmp_104;
            #line 796 
            unsigned int tmp_105;
            #line 796 
            unsigned int tmp_73;
            #line 796 
            unsigned int tmp_74;
            #line 796 
            unsigned int tmp_106;
            #line 796 
            unsigned int tmp_107;
            #line 796 
            unsigned int tmp_75;
            #line 796 
            unsigned int tmp_76;
            #line 796 
            unsigned int tmp_108;
            #line 796 
            unsigned int tmp_109;
            #line 796 
            unsigned int tmp_77;
            #line 796 
            unsigned int tmp_78;
            #line 796 
            unsigned int tmp_110;
            #line 796 
            unsigned int tmp_111;
            #line 796 
            unsigned int tmp_79;
            #line 796 
            unsigned int tmp_80;
            #line 796 
            unsigned int tmp_112;
            #line 796 
            unsigned int tmp_113;
            #line 796 
            unsigned int tmp_81;
            #line 796 
            unsigned int tmp_82;
            #line 796 
            unsigned int tmp_114;
            #line 796 
            unsigned int tmp_115;
            #line 796 
            unsigned int tmp_83;
            #line 796 
            unsigned int tmp_84;
            #line 796 
            unsigned int tmp_116;
            #line 796 
            unsigned int tmp_117;
            #line 796 
            unsigned int tmp_85;
            #line 796 
            unsigned int tmp_86;
            #line 796 
            unsigned int tmp_118;
            #line 796 
            unsigned int tmp_119;
            #line 796 
            unsigned int tmp_87;
            #line 796 
            unsigned int tmp_88;
            #line 796 
            unsigned int tmp_120;
            #line 796 
            unsigned int tmp_121;
            #line 796 
            unsigned int tmp_89;
            #line 796 
            unsigned int tmp_90;
            #line 796 
            unsigned int tmp_122;
            #line 796 
            unsigned int tmp_123;
            #line 796 
            unsigned int tmp_91;
            #line 796 
            unsigned int tmp_92;
            #line 796 
            unsigned int tmp_124;
            #line 796 
            unsigned int tmp_125;
            #line 796 
            unsigned int tmp_93;
            #line 796 
            unsigned int tmp_94;
            #line 796 
            unsigned int tmp_95;
            #line 796 
            unsigned int tmp_64;
            #line 796 
            unsigned int tmp_96;
            #line 796 
            unsigned int tmp_126;
            #line 796 
            if (err > 2) {
              #line 796 
              if (((unsigned long long)(err + -1) & 9223372036854775808ULL) == 0ULL) {
                #line 796 
                if (((unsigned long long)(err + -1) & 4611686018427387904ULL) == 0ULL) {
                  #line 796 
                  if (((unsigned long long)(err + -1) & 2305843009213693952ULL) == 0ULL) {
                    #line 796 
                    if (((unsigned long long)(err + -1) & 1152921504606846976ULL) == 0ULL) {
                      #line 796 
                      if (((unsigned long long)(err + -1) & 576460752303423488ULL) == 0ULL) {
                        #line 796 
                        if (((unsigned long long)(err + -1) & 288230376151711744ULL) == 0ULL) {
                          #line 796 
                          if (((unsigned long long)(err + -1) & 144115188075855872ULL) == 0ULL) {
                            #line 796 
                            if (((unsigned long long)(err + -1) & 72057594037927936ULL) == 0ULL) {
                              #line 796 
                              if (((unsigned long long)(err + -1) & 36028797018963968ULL) == 0ULL) {
                                #line 796 
                                if (((unsigned long long)(err + -1) & 18014398509481984ULL) == 0ULL) {
                                  #line 796 
                                  if (((unsigned long long)(err + -1) & 9007199254740992ULL) == 0ULL) {
                                    #line 796 
                                    if (((unsigned long long)(err + -1) & 4503599627370496ULL) == 0ULL) {
                                      #line 796 
                                      if (((unsigned long long)(err + -1) & 2251799813685248ULL) == 0ULL) {
                                        #line 796 
                                        if (((unsigned long long)(err + -1) & 1125899906842624ULL) == 0ULL) {
                                          #line 796 
                                          if (((unsigned long long)(err + -1) & 562949953421312ULL) == 0ULL) {
                                            #line 796 
                                            if (((unsigned long long)(err + -1) & 281474976710656ULL) == 0ULL) {
                                              #line 796 
                                              if (((unsigned long long)(err + -1) & 140737488355328ULL) == 0ULL) {
                                                #line 796 
                                                if (((unsigned long long)(err + -1) & 70368744177664ULL) == 0ULL) {
                                                  #line 796 
                                                  if (((unsigned long long)(err + -1) & 35184372088832ULL) == 0ULL) {
                                                    #line 796 
                                                    if (((unsigned long long)(err + -1) & 17592186044416ULL) == 0ULL) {
                                                      #line 796 
                                                      if (((unsigned long long)(err + -1) & 8796093022208ULL) == 0ULL) {
                                                        #line 796 
                                                        if (((unsigned long long)(err + -1) & 4398046511104ULL) == 0ULL) {
                                                          #line 796 
                                                          if (((unsigned long long)(err + -1) & 2199023255552ULL) == 0ULL) {
                                                            #line 796 
                                                            if (((unsigned long long)(err + -1) & 1099511627776ULL) == 0ULL) {
                                                              #line 796 
                                                              if (((unsigned long long)(err + -1) & 549755813888ULL) == 0ULL) {
                                                                #line 796 
                                                                if (((unsigned long long)(err + -1) & 274877906944ULL) == 0ULL) {
                                                                  #line 796 
                                                                  if (
                                                                    ((unsigned long long)(err + -1) & 137438953472ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 68719476736ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 34359738368ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 17179869184ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 8589934592ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 4294967296ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 2147483648ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 1073741824ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 536870912ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 268435456ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 134217728ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 67108864ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 33554432ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 16777216ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 8388608ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 4194304ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 2097152ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 1048576ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 524288ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 262144ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 131072ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 65536ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 32768ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 16384ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 8192ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 4096ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 2048ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 1024ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 512ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 256ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 128ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 64ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 32ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 16ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 8ULL) == 0ULL) {
                                                                    #line 796 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 4ULL) != 0ULL) 
                                                                    #line 796 
                                                                    tmp_64 = 4U; else 
                                                                    #line 796 
                                                                    tmp_64 = 2U;
                                                                    #line 796 
                                                                    tmp_65 = tmp_64;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_65 = 8U;
                                                                    #line 796 
                                                                    tmp_66 = tmp_65;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_66 = 16U;
                                                                    #line 796 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_67 = 32U;
                                                                    #line 796 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_68 = 64U;
                                                                    #line 796 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_69 = 128U;
                                                                    #line 796 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_70 = 256U;
                                                                    #line 796 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_71 = 512U;
                                                                    #line 796 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_72 = 1024U;
                                                                    #line 796 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_73 = 2048U;
                                                                    #line 796 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_74 = 4096U;
                                                                    #line 796 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_75 = 8192U;
                                                                    #line 796 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_76 = 16384U;
                                                                    #line 796 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_77 = 32768U;
                                                                    #line 796 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_78 = 65536U;
                                                                    #line 796 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_79 = 131072U;
                                                                    #line 796 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_80 = 262144U;
                                                                    #line 796 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_81 = 524288U;
                                                                    #line 796 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_82 = 1048576U;
                                                                    #line 796 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_83 = 2097152U;
                                                                    #line 796 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_84 = 4194304U;
                                                                    #line 796 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_85 = 8388608U;
                                                                    #line 796 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_86 = 16777216U;
                                                                    #line 796 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_87 = 33554432U;
                                                                    #line 796 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_88 = 67108864U;
                                                                    #line 796 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_89 = 134217728U;
                                                                    #line 796 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_90 = 268435456U;
                                                                    #line 796 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_91 = 536870912U;
                                                                    #line 796 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_92 = 1073741824U;
                                                                    #line 796 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_93 = 2147483648U;
                                                                    #line 796 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_94 = 0U;
                                                                    #line 796 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_95 = 0U;
                                                                    #line 796 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_96 = 0U;
                                                                    #line 796 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_97 = 0U;
                                                                    #line 796 
                                                                    tmp_98 = tmp_97;
                                                                    }
                                                                    else 
                                                                    #line 796 
                                                                    tmp_98 = 0U;
                                                                    #line 796 
                                                                    tmp_99 = tmp_98;
                                                                  }
                                                                  else 
                                                                    #line 796 
                                                                    tmp_99 = 0U;
                                                                  #line 796 
                                                                  tmp_100 = tmp_99;
                                                                }
                                                                else 
                                                                  #line 796 
                                                                  tmp_100 = 0U;
                                                                #line 796 
                                                                tmp_101 = tmp_100;
                                                              }
                                                              else 
                                                                   #line 796 
                                                                   tmp_101 = 0U;
                                                              #line 796 
                                                              tmp_102 = tmp_101;
                                                            }
                                                            else 
                                                                 #line 796 
                                                                 tmp_102 = 0U;
                                                            #line 796 
                                                            tmp_103 = tmp_102;
                                                          }
                                                          else 
                                                               #line 796 
                                                               tmp_103 = 0U;
                                                          #line 796 
                                                          tmp_104 = tmp_103;
                                                        }
                                                        else 
                                                             #line 796 
                                                             tmp_104 = 0U;
                                                        #line 796 
                                                        tmp_105 = tmp_104;
                                                      }
                                                      else 
                                                           #line 796 
                                                           tmp_105 = 0U;
                                                      #line 796 
                                                      tmp_106 = tmp_105;
                                                    }
                                                    else 
                                                         #line 796 
                                                         tmp_106 = 0U;
                                                    #line 796 
                                                    tmp_107 = tmp_106;
                                                  }
                                                  else 
                                                       #line 796 
                                                       tmp_107 = 0U;
                                                  #line 796 
                                                  tmp_108 = tmp_107;
                                                }
                                                else 
                                                     #line 796 
                                                     tmp_108 = 0U;
                                                #line 796 
                                                tmp_109 = tmp_108;
                                              }
                                              else 
                                                   #line 796 
                                                   tmp_109 = 0U;
                                              #line 796 
                                              tmp_110 = tmp_109;
                                            }
                                            else 
                                                 #line 796 
                                                 tmp_110 = 0U;
                                            #line 796 
                                            tmp_111 = tmp_110;
                                          }
                                          else 
                                               #line 796 
                                               tmp_111 = 0U;
                                          #line 796 
                                          tmp_112 = tmp_111;
                                        }
                                        else 
                                             #line 796 
                                             tmp_112 = 0U;
                                        #line 796 
                                        tmp_113 = tmp_112;
                                      }
                                      else 
                                           #line 796 
                                           tmp_113 = 0U;
                                      #line 796 
                                      tmp_114 = tmp_113;
                                    }
                                    else 
                                         #line 796 
                                         tmp_114 = 0U;
                                    #line 796 
                                    tmp_115 = tmp_114;
                                  }
                                  else 
                                       #line 796 
                                       tmp_115 = 0U;
                                  #line 796 
                                  tmp_116 = tmp_115;
                                }
                                else 
                                     #line 796 
                                     tmp_116 = 0U;
                                #line 796 
                                tmp_117 = tmp_116;
                              }
                              else 
                                   #line 796 
                                   tmp_117 = 0U;
                              #line 796 
                              tmp_118 = tmp_117;
                            }
                            else 
                                 #line 796 
                                 tmp_118 = 0U;
                            #line 796 
                            tmp_119 = tmp_118;
                          }
                          else 
                               #line 796 
                               tmp_119 = 0U;
                          #line 796 
                          tmp_120 = tmp_119;
                        }
                        else 
                             #line 796 
                             tmp_120 = 0U;
                        #line 796 
                        tmp_121 = tmp_120;
                      }
                      else 
                           #line 796 
                           tmp_121 = 0U;
                      #line 796 
                      tmp_122 = tmp_121;
                    }
                    else 
                         #line 796 
                         tmp_122 = 0U;
                    #line 796 
                    tmp_123 = tmp_122;
                  }
                  else 
                       #line 796 
                       tmp_123 = 0U;
                  #line 796 
                  tmp_124 = tmp_123;
                }
                else 
                     #line 796 
                     tmp_124 = 0U;
                #line 796 
                tmp_125 = tmp_124;
              }
              else 
                   #line 796 
                   tmp_125 = 0U;
              #line 796 
              tmp_126 = tmp_125;
            }
            else 
                 #line 796 
                 tmp_126 = 1U;
            #line 796 
            num_msix = tmp_126;
          }
          else {
            #line 796 
            num_msix = (unsigned int)__rounddown_pow_of_two((unsigned long)(err + -1));
          }
          #line 797 
          num_msix ++;
          #line 798 
          if (err <= 2) 
                        #line 799 
                        return -28;
        }
        #line 802 
        if ((int)qlcnic_82xx_check(adapter) != 0) {
          #line 803 
          if (qlcnic_check_multi_tx(adapter)) 
                                              #line 802 
                                              goto _LAND;
          else {
            #line 804 
            adapter->drv_sds_rings = (unsigned char)num_msix;
            #line 805 
            adapter->drv_tx_rings = (unsigned char)1U;
          }
        }
        else {
          #line 802 
          _LAND: {
                   #line 808 
                   adapter->drv_tx_rings = (unsigned char)(num_msix / 2U);
                   #line 809 
                   adapter->drv_sds_rings = adapter->drv_tx_rings;
                 }
        }
        #line 812 
        if (num_msix != 0U) {
          #line 813 
          _dev_info(& pdev->dev,(char *)"Trying to allocate %d MSI-X interrupt vectors\n",num_msix);
          #line 816 
          goto enable_msix;
        }
      }
      else {
        #line 819 
        _dev_info(& pdev->dev,(char *)"Unable to allocate %d MSI-X vectors, err=%d\n",num_msix,err);
        #line 822 
        return err;
      }
  }
  #line 826 
  return -5;
}

#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_82xx_calculate_msix_vector(struct qlcnic_adapter *adapter)
{
  #line 831 
  int num_msix;
  #line 833 
  num_msix = (int)adapter->drv_sds_rings;
  #line 835 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
                                                #line 836 
                                                num_msix = (int)adapter->drv_tx_rings + num_msix; else 
                                                                    #line 838 
                                                                    num_msix ++;
  #line 840 
  return num_msix;
}

#line 843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_enable_msi_legacy(struct qlcnic_adapter *adapter)
{
  #line 846 
  u32 offset;
  #line 846 
  u32 mask_reg;
  #line 847 
  struct qlcnic_legacy_intr_set *legacy_intrp;
  #line 845 
  int err = 0;
  #line 848 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 849 
  struct pci_dev *pdev = adapter->pdev;
  #line 851 
  if (qlcnic_use_msi != 0) {
    #line 851 
    if (pci_enable_msi(pdev) == 0) {
      #line 852 
      adapter->flags |= 2U;
      #line 853 
      offset = msi_tgt_status[(int)(adapter->ahw)->pci_func];
      #line 854 
      adapter->tgt_status_reg = qlcnic_get_ioaddr(adapter->ahw,offset);
      #line 856 
      _dev_info(& pdev->dev,(char *)"using msi interrupts\n");
      #line 857 
      (adapter->msix_entries)->vector = pdev->irq;
      #line 858 
      return err;
    }
  }
  #line 861 
  if (qlcnic_use_msi != 0 || qlcnic_use_msi_x != 0) 
                                                    #line 862 
                                                    return -95;
  #line 864 
  legacy_intrp = & legacy_intr[(int)(adapter->ahw)->pci_func];
  #line 865 
  (adapter->ahw)->int_vec_bit = legacy_intrp->int_vec_bit;
  #line 866 
  offset = legacy_intrp->tgt_status_reg;
  #line 867 
  adapter->tgt_status_reg = qlcnic_get_ioaddr(ahw,offset);
  #line 868 
  mask_reg = legacy_intrp->tgt_mask_reg;
  #line 869 
  adapter->tgt_mask_reg = qlcnic_get_ioaddr(ahw,mask_reg);
  #line 870 
  adapter->isr_int_vec = qlcnic_get_ioaddr(ahw,101777664U);
  #line 871 
  adapter->crb_int_state_reg = qlcnic_get_ioaddr(ahw,101785708U);
  #line 872 
  _dev_info(& pdev->dev,(char *)"using legacy interrupts\n");
  #line 873 
  (adapter->msix_entries)->vector = pdev->irq;
  #line 874 
  return err;
}

#line 877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_82xx_setup_intr(struct qlcnic_adapter *adapter)
{
  #line 879 
  int num_msix;
  #line 879 
  int err = 0;
  #line 881 
  if ((adapter->flags & 524288U) != 0U) {
    #line 882 
    err = qlcnic_setup_tss_rss_intr(adapter);
    #line 883 
    if (err < 0) 
                 #line 884 
                 return err;
    #line 885 
    num_msix = (int)(adapter->ahw)->num_msix;
  }
  else {
    #line 887 
    num_msix = qlcnic_82xx_calculate_msix_vector(adapter);
    #line 889 
    err = qlcnic_enable_msix(adapter,(unsigned int)num_msix);
    #line 890 
    if (err == -12) 
                    #line 891 
                    return err;
    #line 893 
    if ((adapter->flags & 4U) == 0U) {
      #line 894 
      qlcnic_disable_multi_tx(adapter);
      #line 895 
      adapter->drv_sds_rings = (unsigned char)1U;
      #line 897 
      err = qlcnic_enable_msi_legacy(adapter);
      #line 898 
      if (err != 0) 
                    #line 899 
                    return err;
    }
  }
  #line 903 
  return 0;
}

#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_82xx_mq_intrpt(struct qlcnic_adapter *adapter, int op_type)
{
  #line 909 
  int err;
  #line 909 
  int i;
  #line 908 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 911 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
    #line 911 
    if ((unsigned int)ahw->diag_test == 0U) 
      #line 912 
      if ((adapter->flags & 4U) != 0U) {
        #line 914 
        ahw->intr_tbl = (struct qlcnic_intrpt_config *)cif_vzalloc_3(array_size_0(8UL,(unsigned long)ahw->num_msix));
        #line 917 
        if (ahw->intr_tbl == (struct qlcnic_intrpt_config *)0) 
                                                               #line 918 
                                                               return -12;
        #line 920 
        i = 0;
        #line 920 
        while ((int)ahw->num_msix > i) {
          #line 921 
          (ahw->intr_tbl + (unsigned long)i)->type = (unsigned char)3U;
          #line 922 
          (ahw->intr_tbl + (unsigned long)i)->id = (unsigned short)i;
          #line 923 
          (ahw->intr_tbl + (unsigned long)i)->src = 0U;
          #line 920 
          i ++;
        }
        #line 926 
        err = qlcnic_82xx_config_intrpt(adapter,(unsigned char)1);
        #line 927 
        if (err != 0) 
                      #line 928 
                      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to configure Interrupt for %d vector\n",(int)ahw->num_msix);
        #line 931 
        return err;
      }
  #line 934 
  return 0;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_teardown_intr(struct qlcnic_adapter *adapter)
{
  #line 939 
  if ((adapter->flags & 4U) != 0U) 
                                   #line 940 
                                   pci_disable_msix(adapter->pdev);
  #line 941 
  if ((adapter->flags & 2U) != 0U) 
                                   #line 942 
                                   pci_disable_msi(adapter->pdev);
  #line 944 
  kfree((void *)adapter->msix_entries);
  #line 945 
  adapter->msix_entries = (struct msix_entry *)0;
  #line 947 
  if ((adapter->ahw)->intr_tbl != (struct qlcnic_intrpt_config *)0) {
    #line 948 
    cif_vfree_2((void *)(adapter->ahw)->intr_tbl);
    #line 949 
    (adapter->ahw)->intr_tbl = (struct qlcnic_intrpt_config *)0;
  }
  #line 951 
  return;
}

#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_cleanup_pci_map(struct qlcnic_hardware_context *ahw)
{
  #line 955 
  if (ahw->pci_base0 != (void *)0) 
                                   #line 956 
                                   iounmap(ahw->pci_base0);
  #line 957 
  return;
}

#line 959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_get_act_pci_func(struct qlcnic_adapter *adapter)
{
  #line 962 
  struct qlcnic_pci_info *pci_info;
  #line 963 
  int ret;
  #line 961 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 965 
  if ((adapter->flags & 64U) == 0U) {
    #line 966 
    switch ((int)ahw->port_type) {
      #line 967 
      case 1: 
              #line 967 
      ;
      #line 968 
      ahw->total_nic_func = (unsigned short)4U;
      #line 969 
      break;
      #line 970 
      case 2: 
              #line 970 
      ;
      #line 971 
      ahw->total_nic_func = (unsigned short)2U;
      #line 972 
      break;
    }
    #line 974 
    return 0;
  }
  #line 977 
  if ((unsigned int)ahw->op_mode == 0U) 
                                        #line 978 
                                        return 0;
  #line 980 
  pci_info = (struct qlcnic_pci_info *)kcalloc_3((unsigned long)ahw->max_vnic_func,20UL,3264U);
  #line 981 
  if (pci_info == (struct qlcnic_pci_info *)0) 
                                               #line 982 
                                               return -12;
  #line 984 
  ret = qlcnic_get_pci_info(adapter,pci_info);
  #line 985 
  kfree((void *)pci_info);
  #line 986 
  return ret;
}

#line 989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static bool qlcnic_port_eswitch_cfg_capability(struct qlcnic_adapter *adapter)
{
  #line 991 
  bool ret = (_Bool)0;
  #line 993 
  if ((int)qlcnic_84xx_check(adapter) != 0) 
                                            #line 994 
                                            ret = (_Bool)1;
  else {
    #line 995 
    if ((int)qlcnic_83xx_check(adapter) != 0) 
      #line 996 
      if (((adapter->ahw)->extra_capability[0] & 512U) != 0U) 
                                                              #line 998 
                                                              ret = (_Bool)1; else 
                                                                    #line 1000 
                                                                    ret = (_Bool)0;
  }
  #line 1003 
  return ret;
}

#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_init_pci_info(struct qlcnic_adapter *adapter)
{
  #line 1009 
  struct qlcnic_pci_info *pci_info;
  #line 1010 
  int i;
  #line 1011 
  u16 act_pci_func;
  #line 1012 
  u8 pfn;
  #line 1008 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1010 
  int id = 0;
  #line 1010 
  int ret = 0;
  #line 1010 
  int j = 0;
  #line 1014 
  pci_info = (struct qlcnic_pci_info *)kcalloc_3((unsigned long)ahw->max_vnic_func,20UL,3264U);
  #line 1015 
  if (pci_info == (struct qlcnic_pci_info *)0) 
                                               #line 1016 
                                               return -12;
  #line 1018 
  ret = qlcnic_get_pci_info(adapter,pci_info);
  #line 1019 
  if (ret != 0) 
                #line 1020 
                goto err_pci_info;
  #line 1022 
  act_pci_func = ahw->total_nic_func;
  #line 1024 
  adapter->npars = (struct qlcnic_npar_info *)kcalloc_3((unsigned long)act_pci_func,26UL,3264U);
  #line 1027 
  if (adapter->npars == (struct qlcnic_npar_info *)0) {
    #line 1028 
    ret = -12;
    #line 1029 
    goto err_pci_info;
  }
  #line 1032 
  adapter->eswitch = (struct qlcnic_eswitch *)kcalloc_3(2UL,12UL,3264U);
  #line 1035 
  if (adapter->eswitch == (struct qlcnic_eswitch *)0) {
    #line 1036 
    ret = -12;
    #line 1037 
    goto err_npars;
  }
  #line 1040 
  i = 0;
  #line 1040 
  while (ahw->max_vnic_func > (unsigned int)i) {
    {
      #line 1041 
      pfn = (unsigned char)(pci_info + (unsigned long)i)->id;
      #line 1043 
      if ((unsigned int)pfn >= ahw->max_vnic_func) {
        #line 1044 
        ret = -22;
        #line 1045 
        _dev_err(& (adapter->pdev)->dev,(char *)"%s: Invalid function 0x%x, max 0x%x\n",(char *)"qlcnic_init_pci_info",(int)pfn,ahw->max_vnic_func);
        #line 1047 
        goto err_eswitch;
      }
      #line 1050 
      if ((unsigned int)(pci_info + (unsigned long)i)->active == 0U || (unsigned int)(pci_info + (unsigned long)i)->type != 1U) 
        #line 1052 
        goto __Cont;
      #line 1054 
      if ((int)qlcnic_port_eswitch_cfg_capability(adapter) != 0) {
        #line 1055 
        if (qlcnic_83xx_set_port_eswitch_status(adapter,(int)pfn,& id) == 0) 
          #line 1057 
          (adapter->npars + (unsigned long)j)->eswitch_status = (_Bool)1; else 
                                                                    #line 1059 
                                                                    goto __Cont;
      }
      else 
           #line 1061 
           (adapter->npars + (unsigned long)j)->eswitch_status = (_Bool)1;
      #line 1064 
      (adapter->npars + (unsigned long)j)->pci_func = pfn;
      #line 1065 
      (adapter->npars + (unsigned long)j)->active = (unsigned char)(pci_info + (unsigned long)i)->active;
      #line 1066 
      (adapter->npars + (unsigned long)j)->type = (unsigned char)(pci_info + (unsigned long)i)->type;
      #line 1067 
      (adapter->npars + (unsigned long)j)->phy_port = (unsigned char)(pci_info + (unsigned long)i)->default_port;
      #line 1068 
      (adapter->npars + (unsigned long)j)->min_bw = (pci_info + (unsigned long)i)->tx_min_bw;
      #line 1069 
      (adapter->npars + (unsigned long)j)->max_bw = (pci_info + (unsigned long)i)->tx_max_bw;
      #line 1071 
      memcpy((void *)(& (adapter->npars + (unsigned long)j)->mac),(void *)(& (pci_info + (unsigned long)i)->mac),6UL);
      #line 1072 
      j ++;
    }
    #line 1040 
    __Cont: 
            #line 1040 
    i ++;
  }
  #line 1078 
  if (! qlcnic_port_eswitch_cfg_capability(adapter)) {
    #line 1079 
    i = 0;
    #line 1079 
    while (i <= 1) {
      #line 1080 
      (adapter->eswitch + (unsigned long)i)->flags |= 2U;
      #line 1079 
      i ++;
    }
  }
  #line 1083 
  kfree((void *)pci_info);
  #line 1084 
  return 0;
  #line 1086 
  err_eswitch: 
               #line 1086 
  ;
  #line 1087 
  kfree((void *)adapter->eswitch);
  #line 1088 
  adapter->eswitch = (struct qlcnic_eswitch *)0;
  #line 1089 
  err_npars: 
             #line 1089 
  ;
  #line 1090 
  kfree((void *)adapter->npars);
  #line 1091 
  adapter->npars = (struct qlcnic_npar_info *)0;
  #line 1092 
  err_pci_info: 
                #line 1092 
  ;
  #line 1093 
  kfree((void *)pci_info);
  #line 1095 
  return ret;
}

#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_function_modes(struct qlcnic_adapter *adapter)
{
  #line 1101 
  u8 id;
  #line 1102 
  int ret;
  #line 1103 
  u32 data = 0U;
  #line 1104 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1106 
  ret = qlcnic_api_lock(adapter);
  #line 1107 
  if (ret != 0) 
                #line 1108 
                goto err_lock;
  #line 1110 
  id = ahw->pci_func;
  #line 1111 
  data = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 20U));
  #line 1112 
  data = (unsigned int)(~ (15 << (int)id * 4)) & data;
  #line 1114 
  writel(data,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 20U));
  #line 1115 
  qlcnic_api_unlock(adapter);
  #line 1116 
  err_lock: 
            #line 1116 
  ;
  #line 1117 
  return ret;
}

#line 1120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_check_vf(struct qlcnic_adapter *adapter, struct pci_device_id *ent)
{
  #line 1123 
  u32 op_mode;
  #line 1123 
  u32 priv_level;
  #line 1126 
  (adapter->ahw)->fw_hal_version = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 19U));
  #line 1130 
  qlcnic_get_func_no(adapter);
  #line 1133 
  op_mode = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 20U));
  #line 1134 
  if (op_mode == 286331153U) 
                             #line 1135 
                             priv_level = 0U; else 
                                                   #line 1137 
                                                   priv_level = (op_mode >> (int)(adapter->ahw)->pci_func * 4) & 15U;
  #line 1139 
  if (priv_level == 2U) {
    #line 1140 
    (adapter->ahw)->op_mode = (unsigned short)2U;
    #line 1141 
    _dev_info(& (adapter->pdev)->dev,(char *)"HAL Version: %d Non Privileged function\n",(adapter->ahw)->fw_hal_version);
    #line 1144 
    adapter->nic_ops = & qlcnic_vf_ops;
  }
  else 
       #line 1146 
       adapter->nic_ops = & qlcnic_ops;
  #line 1147 
  return;
}

#line 1151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_get_bar_length(u32 dev_id, ulong *bar)
{
  #line 1153 
  switch (dev_id) {
    #line 1154 
    case (u32)32800: 
                     #line 1154 
    ;
    #line 1155 
    *bar = 2097152UL;
    #line 1156 
    break;
    #line 1157 
    case (u32)32816: 
                     #line 1157 
    ;
    #line 1158 
    case (u32)34864: 
                     #line 1158 
    ;
    #line 1159 
    case (u32)32832: 
                     #line 1159 
    ;
    #line 1160 
    case (u32)33840: 
                     #line 1160 
    ;
    #line 1161 
    case (u32)33856: 
                     #line 1161 
    ;
    #line 1162 
    case (u32)35888: 
                     #line 1162 
    ;
    #line 1163 
    *bar = 16384UL;
    #line 1164 
    break;
    #line 1165 
    default: 
             #line 1165 
    ;
    #line 1166 
    *bar = 0UL;
  }
  #line 1168 
  return;
}

#line 1170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_setup_pci_map(struct pci_dev *pdev, struct qlcnic_hardware_context *ahw)
{
  #line 1173 
  u32 offset;
  #line 1175 
  unsigned long mem_len;
  #line 1175 
  unsigned long bar0_len;
  #line 1174 
  void *mem_ptr0 = (void *)0;
  #line 1175 
  unsigned long pci_len0 = 0UL;
  #line 1178 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    #line 1178 
    mem_len = (unsigned long)((pdev->resource[0].end - pdev->resource[0].start) + 1ULL); else 
                                                                    #line 1178 
                                                                    mem_len = 0UL;
  #line 1180 
  qlcnic_get_bar_length((unsigned int)pdev->device,& bar0_len);
  #line 1181 
  if (mem_len >= bar0_len) {
    #line 1183 
    mem_ptr0 = pci_ioremap_bar(pdev,0);
    #line 1184 
    if (mem_ptr0 == (void *)0) {
      #line 1185 
      _dev_err(& pdev->dev,(char *)"failed to map PCI bar 0\n");
      #line 1186 
      return -5;
    }
    #line 1188 
    pci_len0 = mem_len;
  }
  else 
       #line 1190 
       return -5;
  #line 1193 
  _dev_info(& pdev->dev,(char *)"%dKB memory map\n",(int)(mem_len >> 10));
  #line 1195 
  ahw->pci_base0 = mem_ptr0;
  #line 1196 
  ahw->pci_len0 = pci_len0;
  #line 1197 
  offset = (unsigned int)(((int)ahw->pci_func + 16896) * 4) + 101711872U;
  #line 1198 
  qlcnic_get_ioaddr(ahw,offset);
  #line 1200 
  return 0;
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static bool qlcnic_validate_subsystem_id(struct qlcnic_adapter *adapter, int index)
{
  #line 1207 
  unsigned short subsystem_vendor;
  #line 1206 
  struct pci_dev *pdev = adapter->pdev;
  #line 1208 
  bool ret = (_Bool)1;
  #line 1210 
  subsystem_vendor = pdev->subsystem_vendor;
  #line 1212 
  if ((unsigned int)pdev->device == 32800U || (unsigned int)pdev->device == 32816U) 
    #line 1214 
    if ((int)qlcnic_boards[index].sub_vendor == (int)subsystem_vendor && (int)qlcnic_boards[index].sub_device == (int)pdev->subsystem_device) 
      #line 1216 
      ret = (_Bool)1; else 
                           #line 1218 
                           ret = (_Bool)0;
  #line 1221 
  return ret;
}

#line 1224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_get_board_name(struct qlcnic_adapter *adapter, char *name)
{
  #line 1227 
  int i;
  #line 1226 
  struct pci_dev *pdev = adapter->pdev;
  #line 1227 
  int found = 0;
  #line 1229 
  i = 0;
  #line 1229 
  while ((unsigned int)i <= 21U) {
    #line 1230 
    if ((int)qlcnic_boards[i].vendor == (int)pdev->vendor && (int)qlcnic_boards[i].device == (int)pdev->device) {
      #line 1231 
      if ((int)qlcnic_validate_subsystem_id(adapter,i) != 0) {
        #line 1233 
        found = 1;
        #line 1234 
        break;
      }
    }
    #line 1229 
    i ++;
  }
  #line 1238 
  if (found == 0) 
                  #line 1239 
                  sprintf(name,(char *)"%pM Gigabit Ethernet",(u8 *)(& adapter->mac_addr)); else 
                                                                    #line 1241 
                                                                    sprintf(name,(char *)"%pM: %s",(u8 *)(& adapter->mac_addr),(char *)(& qlcnic_boards[i].short_name));
  #line 1243 
  return;
}

#line 1246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_check_options(struct qlcnic_adapter *adapter)
{
  #line 1248 
  int err;
  #line 1249 
  u32 fw_major;
  #line 1249 
  u32 fw_minor;
  #line 1249 
  u32 fw_build;
  #line 1249 
  u32 prev_fw_version;
  #line 1250 
  struct pci_dev *pdev = adapter->pdev;
  #line 1251 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1252 
  struct qlcnic_fw_dump *fw_dump = & ahw->fw_dump;
  #line 1254 
  prev_fw_version = adapter->fw_version;
  #line 1256 
  fw_major = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 11U));
  #line 1257 
  fw_minor = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 12U));
  #line 1258 
  fw_build = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 13U));
  #line 1260 
  adapter->fw_version = ((fw_major << 24) + (fw_minor << 16)) + fw_build;
  #line 1262 
  err = qlcnic_get_board_info(adapter);
  #line 1263 
  if (err != 0) {
    #line 1264 
    _dev_err(& pdev->dev,(char *)"Error getting board config info.\n");
    #line 1265 
    return;
  }
  #line 1267 
  if ((unsigned int)ahw->op_mode != 2U) 
    #line 1268 
    if (fw_dump->tmpl_hdr == (void *)0 || adapter->fw_version > prev_fw_version) {
      #line 1270 
      cif_vfree_2(fw_dump->tmpl_hdr);
      #line 1271 
      if (qlcnic_fw_cmd_get_minidump_temp(adapter) == 0) 
                                                         #line 1272 
                                                         _dev_info(& pdev->dev,(char *)"Supports FW dump capability\n");
    }
  #line 1277 
  _dev_info(& pdev->dev,(char *)"Driver v%s, firmware v%d.%d.%d\n",(char *)"5.3.66",fw_major,fw_minor,fw_build);
  #line 1280 
  if ((unsigned int)(adapter->ahw)->port_type == 2U) {
    #line 1281 
    if ((adapter->flags & 64U) != 0U) {
      #line 1282 
      adapter->num_rxd = (unsigned short)1024U;
      #line 1283 
      adapter->max_rxd = (unsigned short)2048U;
    }
    else {
      #line 1285 
      adapter->num_rxd = (unsigned short)4096U;
      #line 1286 
      adapter->max_rxd = (unsigned short)8192U;
    }
    #line 1289 
    adapter->num_jumbo_rxd = (unsigned short)1024U;
    #line 1290 
    adapter->max_jumbo_rxd = (unsigned short)1024U;
  }
  else 
    #line 1292 
    if ((unsigned int)(adapter->ahw)->port_type == 1U) {
      #line 1293 
      adapter->num_rxd = (unsigned short)2048U;
      #line 1294 
      adapter->num_jumbo_rxd = (unsigned short)512U;
      #line 1295 
      adapter->max_jumbo_rxd = (unsigned short)512U;
      #line 1296 
      adapter->max_rxd = (unsigned short)4096U;
    }
  #line 1299 
  (adapter->ahw)->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  #line 1301 
  adapter->num_txd = (unsigned short)1024U;
  #line 1303 
  adapter->max_rds_rings = (unsigned char)2U;
  #line 1304 
  return;
}

#line 1307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_initialize_nic(struct qlcnic_adapter *adapter)
{
  #line 1309 
  struct qlcnic_info nic_info;
  #line 1310 
  int err = 0;
  #line 1312 
  memset((void *)(& nic_info),0,72UL);
  #line 1313 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)(adapter->ahw)->pci_func));
  #line 1314 
  if (err != 0) 
                #line 1315 
                return err;
  #line 1317 
  (adapter->ahw)->physical_port = (unsigned char)nic_info.phys_port;
  #line 1318 
  (adapter->ahw)->switch_mode = nic_info.switch_mode;
  #line 1319 
  (adapter->ahw)->max_tx_ques = nic_info.max_tx_ques;
  #line 1320 
  (adapter->ahw)->max_rx_ques = nic_info.max_rx_ques;
  #line 1321 
  (adapter->ahw)->capabilities = nic_info.capabilities;
  #line 1323 
  if (((adapter->ahw)->capabilities & 2147483648U) != 0U) {
    #line 1324 
    u32 temp;
    #line 1325 
    temp = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323372UL,& err);
    #line 1326 
    if (err == -5) 
                   #line 1327 
                   return err;
    #line 1328 
    (adapter->ahw)->extra_capability[0] = temp;
  }
  else 
       #line 1330 
       (adapter->ahw)->extra_capability[0] = 0U;
  #line 1333 
  (adapter->ahw)->max_mac_filters = nic_info.max_mac_filters;
  #line 1334 
  (adapter->ahw)->max_mtu = nic_info.max_mtu;
  #line 1336 
  if (((adapter->ahw)->capabilities & 64U) != 0U) {
    #line 1337 
    adapter->flags |= 64U;
    #line 1338 
    (adapter->ahw)->nic_mode = (unsigned char)255U;
    #line 1339 
    adapter->max_tx_rings = (unsigned char)4U;
    #line 1340 
    adapter->max_sds_rings = (unsigned char)4U;
    #line 1342 
    _dev_info(& (adapter->pdev)->dev,(char *)"vNIC mode enabled.\n");
  }
  else {
    #line 1344 
    (adapter->ahw)->nic_mode = (unsigned char)0U;
    #line 1345 
    adapter->max_tx_rings = (unsigned char)8U;
    #line 1346 
    adapter->max_sds_rings = (unsigned char)8U;
    #line 1347 
    adapter->flags &= 4294967231U;
  }
  #line 1350 
  return err;
}

#line 1353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_vlan_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  #line 1356 
  if ((unsigned int)esw_cfg->discard_tagged != 0U) 
                                                   #line 1357 
                                                   adapter->flags &= 4294967039U; else 
                                                                    #line 1359 
                                                                    adapter->flags |= 256U;
  #line 1361 
  if ((unsigned int)esw_cfg->vlan_id != 0U) {
    #line 1362 
    adapter->rx_pvid = esw_cfg->vlan_id;
    #line 1363 
    adapter->tx_pvid = esw_cfg->vlan_id;
  }
  else {
    #line 1365 
    adapter->rx_pvid = (unsigned short)0U;
    #line 1366 
    adapter->tx_pvid = (unsigned short)0U;
  }
  #line 1368 
  return;
}

#line 1371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_vlan_rx_add(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1374 
  int err;
  #line 1373 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1376 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) {
    #line 1377 
    err = qlcnic_sriov_cfg_vf_guest_vlan(adapter,(unsigned short)((int)vid),(unsigned char)1);
    #line 1378 
    if (err != 0) {
      #line 1379 
      netdev_err(netdev,(char *)"Cannot add VLAN filter for VLAN id %d, err=%d",(int)vid,err);
      #line 1382 
      return err;
    }
  }
  #line 1386 
  cif_set_bit_6((long)vid,(unsigned long *)(& adapter->vlans));
  #line 1387 
  return 0;
}

#line 1391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_vlan_rx_del(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1394 
  int err;
  #line 1393 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1396 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) {
    #line 1397 
    err = qlcnic_sriov_cfg_vf_guest_vlan(adapter,(unsigned short)((int)vid),(unsigned char)0);
    #line 1398 
    if (err != 0) {
      #line 1399 
      netdev_err(netdev,(char *)"Cannot delete VLAN filter for VLAN id %d, err=%d",(int)vid,err);
      #line 1402 
      return err;
    }
  }
  #line 1406 
  qlcnic_restore_indev_addr(netdev,2UL);
  #line 1407 
  cif_clear_bit_6((long)vid,(unsigned long *)(& adapter->vlans));
  #line 1408 
  return 0;
}

#line 1411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_eswitch_port_features(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  #line 1414 
  adapter->flags &= 4294963711U;
  #line 1417 
  if ((unsigned int)esw_cfg->mac_anti_spoof != 0U) 
                                                   #line 1418 
                                                   adapter->flags |= 512U;
  #line 1420 
  if ((unsigned int)esw_cfg->mac_override == 0U) 
                                                 #line 1421 
                                                 adapter->flags |= 1024U;
  #line 1423 
  if ((unsigned int)esw_cfg->promisc_mode == 0U) 
                                                 #line 1424 
                                                 adapter->flags |= 2048U;
  #line 1425 
  return;
}

#line 1427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_set_eswitch_port_config(struct qlcnic_adapter *adapter)
{
  #line 1429 
  struct qlcnic_esw_func_cfg esw_cfg;
  #line 1431 
  if ((adapter->flags & 64U) == 0U) 
                                    #line 1432 
                                    return 0;
  #line 1434 
  esw_cfg.pci_func = (adapter->ahw)->pci_func;
  #line 1435 
  if (qlcnic_get_eswitch_port_config(adapter,& esw_cfg) != 0) 
                                                              #line 1436 
                                                              return -5;
  #line 1437 
  qlcnic_set_vlan_config(adapter,& esw_cfg);
  #line 1438 
  qlcnic_set_eswitch_port_features(adapter,& esw_cfg);
  #line 1439 
  qlcnic_set_netdev_features(adapter,& esw_cfg);
  #line 1441 
  return 0;
}

#line 1444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_netdev_features(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  #line 1447 
  struct net_device *netdev = adapter->netdev;
  #line 1449 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 1450 
                                            return;
  #line 1452 
  adapter->offload_flags = (unsigned int)esw_cfg->offload_flags;
  #line 1453 
  adapter->flags |= 131072U;
  #line 1454 
  netdev_update_features(netdev);
  #line 1455 
  adapter->flags &= 4294836223U;
  #line 1456 
  return;
}

#line 1459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_eswitch_mode(struct qlcnic_adapter *adapter)
{
  #line 1461 
  u32 op_mode;
  #line 1461 
  u32 priv_level;
  #line 1462 
  int err = 0;
  #line 1464 
  err = qlcnic_initialize_nic(adapter);
  #line 1465 
  if (err != 0) 
                #line 1466 
                return err;
  #line 1468 
  if ((adapter->flags & 128U) != 0U) 
                                     #line 1469 
                                     return 0;
  #line 1471 
  op_mode = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 20U));
  #line 1472 
  priv_level = (op_mode >> (int)(adapter->ahw)->pci_func * 4) & 15U;
  #line 1474 
  if (op_mode == 286331153U) 
                             #line 1475 
                             priv_level = 0U; else 
                                                   #line 1477 
                                                   priv_level = (op_mode >> (int)(adapter->ahw)->pci_func * 4) & 15U;
  #line 1479 
  if ((adapter->flags & 64U) != 0U) {
    #line 1480 
    if (priv_level == 0U) {
      #line 1481 
      (adapter->ahw)->op_mode = (unsigned short)0U;
      #line 1482 
      err = qlcnic_init_pci_info(adapter);
      #line 1483 
      if (err != 0) 
                    #line 1484 
                    return err;
      #line 1486 
      qlcnic_set_function_modes(adapter);
      #line 1487 
      _dev_info(& (adapter->pdev)->dev,(char *)"HAL Version: %d, Management function\n",(adapter->ahw)->fw_hal_version);
    }
    else 
      #line 1490 
      if (priv_level == 1U) {
        #line 1491 
        (adapter->ahw)->op_mode = (unsigned short)1U;
        #line 1492 
        _dev_info(& (adapter->pdev)->dev,(char *)"HAL Version: %d, Privileged function\n",(adapter->ahw)->fw_hal_version);
      }
  }
  else 
       #line 1497 
       (adapter->ahw)->nic_mode = (unsigned char)0U;
  #line 1500 
  adapter->flags |= 128U;
  #line 1502 
  return err;
}

#line 1505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_set_default_offload_settings(struct qlcnic_adapter *adapter)
{
  #line 1507 
  struct qlcnic_esw_func_cfg esw_cfg;
  #line 1508 
  struct qlcnic_npar_info *npar;
  #line 1509 
  u8 i;
  #line 1511 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
                                                  #line 1512 
                                                  return 0;
  #line 1514 
  i = (unsigned char)0U;
  #line 1514 
  while ((int)((unsigned short)i) < (int)(adapter->ahw)->total_nic_func) {
    {
      #line 1515 
      if (! (adapter->npars + (unsigned long)i)->eswitch_status) 
                                                                 #line 1516 
                                                                 goto __Cont;
      #line 1518 
      memset((void *)(& esw_cfg),0,16UL);
      #line 1519 
      esw_cfg.pci_func = (adapter->npars + (unsigned long)i)->pci_func;
      #line 1520 
      esw_cfg.mac_override = (unsigned char)1U;
      #line 1521 
      esw_cfg.promisc_mode = (unsigned char)1U;
      #line 1522 
      if ((int)qlcnic_82xx_check(adapter) != 0) {
        #line 1523 
        esw_cfg.offload_flags = (unsigned char)1U;
        #line 1524 
        if (((adapter->ahw)->capabilities & 2U) != 0U) 
                                                       #line 1525 
                                                       esw_cfg.offload_flags = (unsigned char)((unsigned int)esw_cfg.offload_flags | 6U);
      }
      #line 1527 
      if (qlcnic_config_switch_port(adapter,& esw_cfg) != 0) 
                                                             #line 1528 
                                                             return -5;
      #line 1529 
      npar = adapter->npars + (unsigned long)i;
      #line 1530 
      npar->pvid = esw_cfg.vlan_id;
      #line 1531 
      npar->mac_override = esw_cfg.mac_override;
      #line 1532 
      npar->mac_anti_spoof = esw_cfg.mac_anti_spoof;
      #line 1533 
      npar->discard_tagged = esw_cfg.discard_tagged;
      #line 1534 
      npar->promisc_mode = esw_cfg.promisc_mode;
      #line 1535 
      npar->offload_flags = esw_cfg.offload_flags;
    }
    #line 1514 
    __Cont: 
            #line 1514 
    i = (u8)((int)i + 1);
  }
  #line 1538 
  return 0;
}

#line 1543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_reset_eswitch_config(struct qlcnic_adapter *adapter, struct qlcnic_npar_info *npar, int pci_func)
{
  #line 1546 
  struct qlcnic_esw_func_cfg esw_cfg;
  #line 1547 
  esw_cfg.op_mode = (unsigned char)0U;
  #line 1548 
  esw_cfg.pci_func = (unsigned char)pci_func;
  #line 1549 
  esw_cfg.vlan_id = npar->pvid;
  #line 1550 
  esw_cfg.mac_override = npar->mac_override;
  #line 1551 
  esw_cfg.discard_tagged = npar->discard_tagged;
  #line 1552 
  esw_cfg.mac_anti_spoof = npar->mac_anti_spoof;
  #line 1553 
  esw_cfg.offload_flags = npar->offload_flags;
  #line 1554 
  esw_cfg.promisc_mode = npar->promisc_mode;
  #line 1555 
  if (qlcnic_config_switch_port(adapter,& esw_cfg) != 0) 
                                                         #line 1556 
                                                         return -5;
  #line 1558 
  esw_cfg.op_mode = (unsigned char)1U;
  #line 1559 
  if (qlcnic_config_switch_port(adapter,& esw_cfg) != 0) 
                                                         #line 1560 
                                                         return -5;
  #line 1562 
  return 0;
}

#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_reset_npar_config(struct qlcnic_adapter *adapter)
{
  #line 1567 
  int i;
  #line 1567 
  int err;
  #line 1568 
  struct qlcnic_npar_info *npar;
  #line 1569 
  struct qlcnic_info nic_info;
  #line 1570 
  u8 pci_func;
  #line 1572 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
    #line 1573 
    if ((unsigned int)adapter->need_fw_reset == 0U) 
                                                    #line 1574 
                                                    return 0;
  #line 1577 
  i = 0;
  #line 1577 
  while ((int)(adapter->ahw)->total_nic_func > i) {
    #line 1578 
    npar = adapter->npars + (unsigned long)i;
    #line 1579 
    pci_func = npar->pci_func;
    #line 1580 
    if (! (adapter->npars + (unsigned long)i)->eswitch_status) 
                                                               #line 1581 
                                                               goto __Cont;
    #line 1583 
    memset((void *)(& nic_info),0,72UL);
    #line 1584 
    err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)pci_func));
    #line 1585 
    if (err != 0) 
                  #line 1586 
                  return err;
    #line 1587 
    nic_info.min_tx_bw = npar->min_bw;
    #line 1588 
    nic_info.max_tx_bw = npar->max_bw;
    #line 1589 
    err = qlcnic_set_nic_info(adapter,& nic_info);
    #line 1590 
    if (err != 0) 
                  #line 1591 
                  return err;
    #line 1593 
    if ((unsigned int)npar->enable_pm != 0U) {
      #line 1594 
      err = qlcnic_config_port_mirroring(adapter,(unsigned char)((int)npar->dest_npar),(unsigned char)1,(unsigned char)((int)pci_func));
      #line 1597 
      if (err != 0) 
                    #line 1598 
                    return err;
    }
    #line 1600 
    err = qlcnic_reset_eswitch_config(adapter,npar,(int)pci_func);
    #line 1601 
    if (err != 0) 
                  #line 1602 
                  return err;
    #line 1577 
    __Cont: 
            #line 1577 
    i ++;
  }
  #line 1604 
  return 0;
}

#line 1607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_npar_opertional(struct qlcnic_adapter *adapter)
{
  #line 1610 
  u32 npar_state;
  #line 1609 
  u8 npar_opt_timeo = (unsigned char)30U;
  #line 1612 
  if ((unsigned int)(adapter->ahw)->op_mode == 0U) 
                                                   #line 1613 
                                                   return 0;
  #line 1615 
  npar_state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 14U));
  #line 1617 
  while (1) {
    #line 1617 
    if (npar_state != 1U) {
      #line 1617 
      npar_opt_timeo = (u8)((int)npar_opt_timeo - 1);
      #line 1617 
      if (! ((unsigned int)npar_opt_timeo != 0U)) 
                                                  #line 1617 
                                                  break;
    }
    else 
         #line 1617 
         break;
    #line 1618 
    msleep(1000U);
    #line 1619 
    npar_state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 14U));
  }
  #line 1622 
  if ((unsigned int)npar_opt_timeo == 0U) {
    #line 1623 
    _dev_err(& (adapter->pdev)->dev,(char *)"Waiting for NPAR state to operational timeout\n");
    #line 1625 
    return -5;
  }
  #line 1627 
  return 0;
}

#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_mgmt_operations(struct qlcnic_adapter *adapter)
{
  #line 1633 
  int err;
  #line 1635 
  if ((adapter->flags & 64U) == 0U || (unsigned int)(adapter->ahw)->op_mode != 0U) 
    #line 1637 
    return 0;
  #line 1639 
  err = qlcnic_set_default_offload_settings(adapter);
  #line 1640 
  if (err != 0) 
                #line 1641 
                return err;
  #line 1643 
  err = qlcnic_reset_npar_config(adapter);
  #line 1644 
  if (err != 0) 
                #line 1645 
                return err;
  #line 1647 
  qlcnic_dev_set_npar_ready(adapter);
  #line 1649 
  return err;
}

#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_82xx_start_firmware(struct qlcnic_adapter *adapter)
{
  #line 1654 
  int err;
  #line 1656 
  err = qlcnic_can_start_firmware(adapter);
  #line 1657 
  if (err < 0) 
               #line 1658 
               return err;
  else 
    #line 1659 
    if (err == 0) 
                  #line 1660 
                  goto check_fw_status;
  #line 1662 
  if (qlcnic_load_fw_file != 0) 
                                #line 1663 
                                qlcnic_request_firmware(adapter);
  else {
    #line 1665 
    err = qlcnic_check_flash_fw_ver(adapter);
    #line 1666 
    if (err != 0) 
                  #line 1667 
                  goto err_out;
    #line 1669 
    (adapter->ahw)->fw_type = (unsigned char)1U;
  }
  #line 1672 
  err = qlcnic_need_fw_reset(adapter);
  #line 1673 
  if (err == 0) 
                #line 1674 
                goto check_fw_status;
  #line 1676 
  err = qlcnic_pinit_from_rom(adapter);
  #line 1677 
  if (err != 0) 
                #line 1678 
                goto err_out;
  #line 1680 
  err = qlcnic_load_firmware(adapter);
  #line 1681 
  if (err != 0) 
                #line 1682 
                goto err_out;
  #line 1684 
  qlcnic_release_firmware(adapter);
  #line 1685 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,136324256UL,328514U);
  #line 1687 
  check_fw_status: 
                   #line 1687 
  ;
  #line 1688 
  err = qlcnic_check_fw_status(adapter);
  #line 1689 
  if (err != 0) 
                #line 1690 
                goto err_out;
  #line 1692 
  writel(3U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
  #line 1693 
  qlcnic_idc_debug_info(adapter,(unsigned char)1);
  #line 1694 
  err = qlcnic_check_eswitch_mode(adapter);
  #line 1695 
  if (err != 0) {
    #line 1696 
    _dev_err(& (adapter->pdev)->dev,(char *)"Memory allocation failed for eswitch\n");
    #line 1698 
    goto err_out;
  }
  #line 1700 
  err = qlcnic_set_mgmt_operations(adapter);
  #line 1701 
  if (err != 0) 
                #line 1702 
                goto err_out;
  #line 1704 
  qlcnic_check_options(adapter);
  #line 1705 
  adapter->need_fw_reset = (unsigned char)0U;
  #line 1707 
  qlcnic_release_firmware(adapter);
  #line 1708 
  return 0;
  #line 1710 
  err_out: 
           #line 1710 
  ;
  #line 1711 
  writel(6U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
  #line 1712 
  _dev_err(& (adapter->pdev)->dev,(char *)"Device state set to failed\n");
  #line 1714 
  qlcnic_release_firmware(adapter);
  #line 1715 
  return err;
}

#line 1719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_request_irq(struct qlcnic_adapter *adapter)
{
  #line 1721 
  irqreturn_t (*handler)(int , void *);
  #line 1722 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1723 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1724 
  int err;
  #line 1724 
  int ring;
  #line 1724 
  int num_sds_rings;
  #line 1726 
  unsigned long flags = 0UL;
  #line 1727 
  struct net_device *netdev = adapter->netdev;
  #line 1728 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1730 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    #line 1731 
    if ((int)qlcnic_82xx_check(adapter) != 0) 
                                              #line 1732 
                                              handler = & qlcnic_tmp_intr; else 
                                                                    #line 1734 
                                                                    handler = & qlcnic_83xx_tmp_intr;
    #line 1735 
    if ((adapter->flags & 6U) == 0U) 
                                     #line 1736 
                                     flags |= 128UL;
  }
  else 
    #line 1739 
    if ((adapter->flags & 4U) != 0U) 
                                     #line 1740 
                                     handler = & qlcnic_msix_intr;
    else 
      #line 1741 
      if ((adapter->flags & 2U) != 0U) 
                                       #line 1742 
                                       handler = & qlcnic_msi_intr;
      else {
        #line 1744 
        flags |= 128UL;
        #line 1745 
        if ((int)qlcnic_82xx_check(adapter) != 0) 
                                                  #line 1746 
                                                  handler = & qlcnic_intr; else 
                                                                    #line 1748 
                                                                    handler = & qlcnic_83xx_intr;
      }
  #line 1751 
  adapter->irq = (unsigned int)netdev->irq;
  #line 1753 
  if ((unsigned int)(adapter->ahw)->diag_test != 2U) {
    #line 1754 
    if ((int)qlcnic_82xx_check(adapter) != 0) 
                                              #line 1754 
                                              goto _LOR;
    else {
      #line 1754 
      if ((int)qlcnic_83xx_check(adapter) != 0) 
        #line 1755 
        if ((adapter->flags & 4U) != 0U) {
          #line 1754 
          _LOR: {
                  #line 1757 
                  num_sds_rings = (int)adapter->drv_sds_rings;
                  #line 1758 
                  ring = 0;
                  #line 1758 
                  while (ring < num_sds_rings) {
                    {
                      #line 1759 
                      sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
                      #line 1760 
                      if ((int)qlcnic_82xx_check(adapter) != 0) {
                        #line 1761 
                        if (qlcnic_check_multi_tx(adapter)) 
                                                            #line 1774 
                                                            snprintf((char *)(& sds_ring->name),28UL,(char *)"%s-rx-%d",(char *)(& netdev->name),ring);
                        else 
                          #line 1761 
                          if (num_sds_rings + -1 == ring) 
                            #line 1763 
                            if ((adapter->flags & 4U) == 0U) 
                                                             #line 1765 
                                                             snprintf((char *)(& sds_ring->name),28UL,(char *)"qlcnic"); else 
                                                                    #line 1769 
                                                                    snprintf((char *)(& sds_ring->name),28UL,(char *)"%s-tx-0-rx-%d",(char *)(& netdev->name),ring);
                          else 
                               #line 1774 
                               snprintf((char *)(& sds_ring->name),28UL,(char *)"%s-rx-%d",(char *)(& netdev->name),ring);
                      }
                      else 
                           #line 1774 
                           snprintf((char *)(& sds_ring->name),28UL,(char *)"%s-rx-%d",(char *)(& netdev->name),ring);
                      #line 1779 
                      err = cif_request_irq_0((unsigned int)sds_ring->irq,handler,flags,(char *)(& sds_ring->name),(void *)sds_ring);
                      #line 1781 
                      if (err != 0) 
                                    #line 1782 
                                    return err;
                    }
                    #line 1758 
                    ring ++;
                  }
                }
        }
    }
    #line 1785 
    if ((int)qlcnic_82xx_check(adapter) != 0) {
      #line 1785 
      if ((int)qlcnic_check_multi_tx(adapter) != 0) 
                                                    #line 1785 
                                                    goto _LOR_0; else 
                                                                   #line 1785 
                                                                   goto _LAND;
    }
    else {
      #line 1785 
      _LAND: 
      #line 1786 
      if ((int)qlcnic_83xx_check(adapter) != 0) 
        #line 1787 
        if ((adapter->flags & 4U) != 0U) 
          #line 1788 
          if ((adapter->flags & 65536U) == 0U) {
            #line 1785 
            _LOR_0: {
                      #line 1790 
                      handler = & qlcnic_msix_tx_intr;
                      #line 1791 
                      ring = 0;
                      #line 1791 
                      while ((int)adapter->drv_tx_rings > ring) {
                        #line 1793 
                        tx_ring = adapter->tx_ring + (unsigned long)ring;
                        #line 1794 
                        snprintf((char *)(& tx_ring->name),28UL,(char *)"%s-tx-%d",(char *)(& netdev->name),ring);
                        #line 1796 
                        err = cif_request_irq_0((unsigned int)tx_ring->irq,handler,flags,(char *)(& tx_ring->name),(void *)tx_ring);
                        #line 1798 
                        if (err != 0) 
                                      #line 1799 
                                      return err;
                        #line 1791 
                        ring ++;
                      }
                    }
          }
    }
  }
  #line 1803 
  return 0;
}

#line 1807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_free_irq(struct qlcnic_adapter *adapter)
{
  #line 1809 
  int ring;
  #line 1810 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1811 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1813 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1815 
  if ((unsigned int)(adapter->ahw)->diag_test != 2U) {
    #line 1816 
    if ((int)qlcnic_82xx_check(adapter) != 0) 
                                              #line 1816 
                                              goto _LOR;
    else {
      #line 1816 
      if ((int)qlcnic_83xx_check(adapter) != 0) 
        #line 1817 
        if ((adapter->flags & 4U) != 0U) {
          #line 1816 
          _LOR: {
                  #line 1819 
                  ring = 0;
                  #line 1819 
                  while ((int)adapter->drv_sds_rings > ring) {
                    #line 1820 
                    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
                    #line 1821 
                    cif_free_irq_0((unsigned int)sds_ring->irq,(void *)sds_ring);
                    #line 1819 
                    ring ++;
                  }
                }
        }
    }
    #line 1824 
    if ((int)qlcnic_83xx_check(adapter) != 0) {
      #line 1824 
      if ((adapter->flags & 65536U) == 0U) 
                                           #line 1824 
                                           goto _LOR_0; else 
                                                             #line 1824 
                                                             goto _LAND;
    }
    else {
      #line 1824 
      _LAND: 
      #line 1825 
      if ((int)qlcnic_82xx_check(adapter) != 0) {
        #line 1826 
        if ((int)qlcnic_check_multi_tx(adapter) != 0) {
          #line 1824 
          _LOR_0: {
                    #line 1828 
                    ring = 0;
                    #line 1828 
                    while ((int)adapter->drv_tx_rings > ring) {
                      #line 1830 
                      tx_ring = adapter->tx_ring + (unsigned long)ring;
                      #line 1831 
                      if (tx_ring->irq != 0) 
                                             #line 1832 
                                             cif_free_irq_0((unsigned int)tx_ring->irq,(void *)tx_ring);
                      #line 1828 
                      ring ++;
                    }
                  }
        }
      }
    }
  }
  #line 1836 
  return;
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_get_lro_mss_capability(struct qlcnic_adapter *adapter)
{
  #line 1840 
  u32 capab = 0U;
  #line 1842 
  if ((int)qlcnic_82xx_check(adapter) != 0) {
    #line 1843 
    if (((adapter->ahw)->extra_capability[0] & 4U) != 0U) 
                                                          #line 1845 
                                                          adapter->flags |= 32768U;
  }
  else {
    #line 1847 
    capab = (adapter->ahw)->capabilities;
    #line 1848 
    if ((capab & 131072U) != 0U) 
                                 #line 1849 
                                 adapter->flags |= 32768U;
  }
  #line 1851 
  return;
}

#line 1853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_config_def_intr_coalesce(struct qlcnic_adapter *adapter)
{
  #line 1856 
  int err;
  #line 1855 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1859 
  ahw->coal.flag = (unsigned short)4U;
  #line 1861 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 1862 
    ahw->coal.type = (unsigned char)3U;
    #line 1863 
    ahw->coal.tx_time_us = (unsigned short)64U;
    #line 1864 
    ahw->coal.tx_packets = (unsigned short)64U;
    #line 1865 
    ahw->coal.rx_time_us = (unsigned short)3U;
    #line 1866 
    ahw->coal.rx_packets = (unsigned short)256U;
    #line 1868 
    err = qlcnic_83xx_set_rx_tx_intr_coal(adapter);
  }
  else {
    #line 1870 
    ahw->coal.type = (unsigned char)1U;
    #line 1871 
    ahw->coal.rx_time_us = (unsigned short)3U;
    #line 1872 
    ahw->coal.rx_packets = (unsigned short)256U;
    #line 1874 
    err = qlcnic_82xx_set_rx_coalesce(adapter);
  }
  #line 1877 
  return err;
}

#line 1880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int __qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  #line 1882 
  int ring;
  #line 1883 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 1885 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 1886 
                                            return -5;
  #line 1888 
  if ((int)test_bit(1L,& adapter->state) != 0) 
                                               #line 1889 
                                               return 0;
  #line 1891 
  if (qlcnic_set_eswitch_port_config(adapter) != 0) 
                                                    #line 1892 
                                                    return -5;
  #line 1894 
  qlcnic_get_lro_mss_capability(adapter);
  #line 1896 
  if (qlcnic_fw_create_ctx(adapter) != 0) 
                                          #line 1897 
                                          return -5;
  #line 1899 
  ring = 0;
  #line 1899 
  while ((int)adapter->max_rds_rings > ring) {
    #line 1900 
    rds_ring = (adapter->recv_ctx)->rds_rings + (unsigned long)ring;
    #line 1901 
    qlcnic_post_rx_buffers(adapter,rds_ring,(unsigned char)((int)((unsigned char)ring)));
    #line 1899 
    ring ++;
  }
  #line 1904 
  qlcnic_set_multi(netdev);
  #line 1905 
  qlcnic_fw_cmd_set_mtu(adapter,(int)netdev->mtu);
  #line 1907 
  (adapter->ahw)->linkup = (unsigned char)0U;
  #line 1909 
  if ((unsigned int)adapter->drv_sds_rings > 1U) 
                                                 #line 1910 
                                                 qlcnic_config_rss(adapter,1);
  #line 1912 
  qlcnic_config_def_intr_coalesce(adapter);
  #line 1914 
  if ((netdev->features & 32768ULL) != 0ULL) 
                                             #line 1915 
                                             qlcnic_config_hw_lro(adapter,1);
  #line 1917 
  cif_set_bit_6(1L,& adapter->state);
  #line 1918 
  qlcnic_napi_enable(adapter);
  #line 1920 
  qlcnic_linkevent_request(adapter,1);
  #line 1922 
  (adapter->ahw)->reset_context = (unsigned char)0U;
  #line 1923 
  netif_tx_start_all_queues(netdev);
  #line 1924 
  return 0;
}

#line 1927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  #line 1929 
  int err = 0;
  #line 1931 
  rtnl_lock();
  #line 1932 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1933 
                                       err = __qlcnic_up(adapter,netdev);
  #line 1934 
  rtnl_unlock();
  #line 1936 
  return err;
}

#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void __qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  #line 1941 
  int ring;
  #line 1943 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 1944 
                                            return;
  #line 1946 
  if (! test_and_set_bit(1L,& adapter->state)) 
                                               #line 1947 
                                               return;
  #line 1948 
  ldv_inline_asm();
  #line 1950 
  netif_carrier_off(netdev);
  #line 1951 
  (adapter->ahw)->linkup = (unsigned char)0U;
  #line 1952 
  netif_tx_disable(netdev);
  #line 1954 
  qlcnic_free_mac_list(adapter);
  #line 1956 
  if ((unsigned int)adapter->fhash.fnum != 0U) 
                                               #line 1957 
                                               qlcnic_delete_lb_filters(adapter);
  #line 1959 
  qlcnic_nic_set_promisc(adapter,0U);
  #line 1960 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 1961 
                                                qlcnic_sriov_cleanup_async_list(& ((adapter->ahw)->sriov)->bc);
  #line 1963 
  qlcnic_napi_disable(adapter);
  #line 1965 
  qlcnic_fw_destroy_ctx(adapter);
  #line 1966 
  adapter->flags &= 4294934527U;
  #line 1968 
  qlcnic_reset_rx_buffers_list(adapter);
  #line 1970 
  ring = 0;
  #line 1970 
  while ((int)adapter->drv_tx_rings > ring) {
    #line 1971 
    qlcnic_release_tx_buffers(adapter,adapter->tx_ring + (unsigned long)ring);
    #line 1970 
    ring ++;
  }
  #line 1972 
  return;
}

#line 1976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  #line 1978 
  rtnl_lock();
  #line 1979 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1980 
                                       __qlcnic_down(adapter,netdev);
  #line 1981 
  rtnl_unlock();
  #line 1982 
  return;
}

#line 1986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_attach(struct qlcnic_adapter *adapter)
{
  #line 1990 
  int err;
  #line 1988 
  struct net_device *netdev = adapter->netdev;
  #line 1989 
  struct pci_dev *pdev = adapter->pdev;
  #line 1992 
  if ((unsigned int)adapter->is_up == 777U) 
                                            #line 1993 
                                            return 0;
  #line 1995 
  err = qlcnic_napi_add(adapter,netdev);
  #line 1996 
  if (err != 0) 
                #line 1997 
                return err;
  #line 1999 
  err = qlcnic_alloc_sw_resources(adapter);
  #line 2000 
  if (err != 0) {
    #line 2001 
    _dev_err(& pdev->dev,(char *)"Error in setting sw resources\n");
    #line 2002 
    goto err_out_napi_del;
  }
  #line 2005 
  err = qlcnic_alloc_hw_resources(adapter);
  #line 2006 
  if (err != 0) {
    #line 2007 
    _dev_err(& pdev->dev,(char *)"Error in setting hw resources\n");
    #line 2008 
    goto err_out_free_sw;
  }
  #line 2011 
  err = qlcnic_request_irq(adapter);
  #line 2012 
  if (err != 0) {
    #line 2013 
    _dev_err(& pdev->dev,(char *)"failed to setup interrupt\n");
    #line 2014 
    goto err_out_free_hw;
  }
  #line 2017 
  qlcnic_create_sysfs_entries(adapter);
  #line 2019 
  if ((int)qlcnic_encap_rx_offload(adapter) != 0) 
                                                  #line 2020 
                                                  udp_tunnel_get_rx_info(netdev);
  #line 2022 
  adapter->is_up = (unsigned short)777U;
  #line 2023 
  return 0;
  #line 2025 
  err_out_free_hw: 
                   #line 2025 
  ;
  #line 2026 
  qlcnic_free_hw_resources(adapter);
  #line 2027 
  err_out_free_sw: 
                   #line 2027 
  ;
  #line 2028 
  qlcnic_free_sw_resources(adapter);
  #line 2029 
  err_out_napi_del: 
                    #line 2029 
  ;
  #line 2030 
  qlcnic_napi_del(adapter);
  #line 2031 
  return err;
}

#line 2034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_detach(struct qlcnic_adapter *adapter)
{
  #line 2036 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 2037 
                                            return;
  #line 2039 
  qlcnic_remove_sysfs_entries(adapter);
  #line 2041 
  qlcnic_free_hw_resources(adapter);
  #line 2042 
  qlcnic_release_rx_buffers(adapter);
  #line 2043 
  qlcnic_free_irq(adapter);
  #line 2044 
  qlcnic_napi_del(adapter);
  #line 2045 
  qlcnic_free_sw_resources(adapter);
  #line 2047 
  adapter->is_up = (unsigned short)0U;
  #line 2048 
  return;
}

#line 2050  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_diag_free_res(struct net_device *netdev, int drv_sds_rings)
{
  #line 2053 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 2055 
  int ring;
  #line 2052 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 2054 
  int drv_tx_rings = (int)adapter->drv_tx_rings;
  #line 2057 
  cif_clear_bit_6(1L,& adapter->state);
  #line 2058 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    #line 2059 
    ring = 0;
    #line 2059 
    while ((int)adapter->drv_sds_rings > ring) {
      #line 2060 
      sds_ring = (adapter->recv_ctx)->sds_rings + (unsigned long)ring;
      #line 2061 
      qlcnic_disable_sds_intr(adapter,sds_ring);
      #line 2059 
      ring ++;
    }
  }
  #line 2065 
  qlcnic_fw_destroy_ctx(adapter);
  #line 2067 
  qlcnic_detach(adapter);
  #line 2069 
  (adapter->ahw)->diag_test = (unsigned char)0U;
  #line 2070 
  adapter->drv_sds_rings = (unsigned char)drv_sds_rings;
  #line 2071 
  adapter->drv_tx_rings = (unsigned char)drv_tx_rings;
  #line 2073 
  if (qlcnic_attach(adapter) != 0) 
                                   #line 2074 
                                   goto out;
  #line 2076 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2077 
                                       __qlcnic_up(adapter,netdev);
  #line 2078 
  out: 
       #line 2078 
  ;
  #line 2079 
  netif_device_attach(netdev);
  #line 2080 
  return;
}

#line 2082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_alloc_adapter_resources(struct qlcnic_adapter *adapter)
{
  #line 2084 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2085 
  int err = 0;
  #line 2087 
  adapter->recv_ctx = (struct qlcnic_recv_context *)kzalloc_6(24UL,3264U);
  #line 2089 
  if (adapter->recv_ctx == (struct qlcnic_recv_context *)0) {
    #line 2090 
    err = -12;
    #line 2091 
    goto err_out;
  }
  #line 2094 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 2095 
    ahw->coal.type = (unsigned char)3U;
    #line 2096 
    ahw->coal.tx_time_us = (unsigned short)64U;
    #line 2097 
    ahw->coal.tx_packets = (unsigned short)64U;
    #line 2098 
    ahw->coal.rx_time_us = (unsigned short)3U;
    #line 2099 
    ahw->coal.rx_packets = (unsigned short)256U;
  }
  else {
    #line 2101 
    ahw->coal.type = (unsigned char)1U;
    #line 2102 
    ahw->coal.rx_time_us = (unsigned short)3U;
    #line 2103 
    ahw->coal.rx_packets = (unsigned short)256U;
  }
  #line 2107 
  memset((void *)(& adapter->stats),0,184UL);
  #line 2108 
  err_out: 
           #line 2108 
  ;
  #line 2109 
  return err;
}

#line 2112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_free_adapter_resources(struct qlcnic_adapter *adapter)
{
  #line 2114 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 2116 
  kfree((void *)adapter->recv_ctx);
  #line 2117 
  adapter->recv_ctx = (struct qlcnic_recv_context *)0;
  #line 2119 
  if (fw_dump->tmpl_hdr != (void *)0) {
    #line 2120 
    cif_vfree_2(fw_dump->tmpl_hdr);
    #line 2121 
    fw_dump->tmpl_hdr = (void *)0;
  }
  #line 2124 
  if (fw_dump->dma_buffer != (void *)0) {
    #line 2125 
    dma_free_coherent(& (adapter->pdev)->dev,65536UL,fw_dump->dma_buffer,fw_dump->phys_addr);
    #line 2127 
    fw_dump->dma_buffer = (void *)0;
  }
  #line 2130 
  kfree((void *)(adapter->ahw)->reset.buff);
  #line 2131 
  (adapter->ahw)->fw_dump.tmpl_hdr = (void *)0;
  #line 2132 
  return;
}

#line 2134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_diag_alloc_res(struct net_device *netdev, int test)
{
  #line 2137 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 2138 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 2139 
  int ring;
  #line 2140 
  int ret;
  #line 2136 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 2142 
  netif_device_detach(netdev);
  #line 2144 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2145 
                                       __qlcnic_down(adapter,netdev);
  #line 2147 
  qlcnic_detach(adapter);
  #line 2149 
  adapter->drv_sds_rings = (unsigned char)1U;
  #line 2150 
  (adapter->ahw)->diag_test = (unsigned char)test;
  #line 2151 
  (adapter->ahw)->linkup = (unsigned char)0U;
  #line 2153 
  ret = qlcnic_attach(adapter);
  #line 2154 
  if (ret != 0) {
    #line 2155 
    netif_device_attach(netdev);
    #line 2156 
    return ret;
  }
  #line 2159 
  ret = qlcnic_fw_create_ctx(adapter);
  #line 2160 
  if (ret != 0) {
    #line 2161 
    qlcnic_detach(adapter);
    #line 2162 
    netif_device_attach(netdev);
    #line 2163 
    return ret;
  }
  #line 2166 
  ring = 0;
  #line 2166 
  while ((int)adapter->max_rds_rings > ring) {
    #line 2167 
    rds_ring = (adapter->recv_ctx)->rds_rings + (unsigned long)ring;
    #line 2168 
    qlcnic_post_rx_buffers(adapter,rds_ring,(unsigned char)((int)((unsigned char)ring)));
    #line 2166 
    ring ++;
  }
  #line 2171 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    #line 2172 
    ring = 0;
    #line 2172 
    while ((int)adapter->drv_sds_rings > ring) {
      #line 2173 
      sds_ring = (adapter->recv_ctx)->sds_rings + (unsigned long)ring;
      #line 2174 
      qlcnic_enable_sds_intr(adapter,sds_ring);
      #line 2172 
      ring ++;
    }
  }
  #line 2178 
  if ((unsigned int)(adapter->ahw)->diag_test == 2U) {
    #line 2179 
    (adapter->ahw)->loopback_state = (unsigned char)0U;
    #line 2180 
    qlcnic_linkevent_request(adapter,1);
  }
  #line 2183 
  cif_set_bit_6(1L,& adapter->state);
  #line 2185 
  return 0;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_reset_hw_context(struct qlcnic_adapter *adapter)
{
  #line 2192 
  struct net_device *netdev = adapter->netdev;
  #line 2194 
  if ((int)test_and_set_bit(2L,& adapter->state) != 0) 
                                                       #line 2195 
                                                       return -16;
  #line 2197 
  netif_device_detach(netdev);
  #line 2199 
  qlcnic_down(adapter,netdev);
  #line 2201 
  qlcnic_up(adapter,netdev);
  #line 2203 
  netif_device_attach(netdev);
  #line 2205 
  cif_clear_bit_6(2L,& adapter->state);
  #line 2206 
  netdev_info(adapter->netdev,(char *)"%s: soft reset complete\n",(char *)"qlcnic_reset_hw_context");
  #line 2207 
  return 0;
}

#line 2211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_reset_context(struct qlcnic_adapter *adapter)
{
  #line 2213 
  int err = 0;
  #line 2214 
  struct net_device *netdev = adapter->netdev;
  #line 2216 
  if ((int)test_and_set_bit(2L,& adapter->state) != 0) 
                                                       #line 2217 
                                                       return -16;
  #line 2219 
  if ((unsigned int)adapter->is_up == 777U) {
    #line 2221 
    netif_device_detach(netdev);
    #line 2223 
    if ((int)netif_running(netdev) != 0) 
                                         #line 2224 
                                         __qlcnic_down(adapter,netdev);
    #line 2226 
    qlcnic_detach(adapter);
    #line 2228 
    if ((int)netif_running(netdev) != 0) {
      #line 2229 
      err = qlcnic_attach(adapter);
      #line 2230 
      if (err == 0) {
        #line 2231 
        __qlcnic_up(adapter,netdev);
        #line 2232 
        qlcnic_restore_indev_addr(netdev,1UL);
      }
    }
    #line 2236 
    netif_device_attach(netdev);
  }
  #line 2239 
  cif_clear_bit_6(2L,& adapter->state);
  #line 2240 
  return err;
}

#line 2243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_82xx_set_mac_filter_count(struct qlcnic_adapter *adapter)
{
  #line 2247 
  u16 count;
  #line 2245 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2246 
  u16 act_pci_fn = ahw->total_nic_func;
  #line 2249 
  ahw->max_mc_count = (unsigned char)38U;
  #line 2250 
  if ((unsigned int)act_pci_fn <= 2U) 
                                      #line 2251 
                                      count = (unsigned short)(474 / (int)act_pci_fn); else 
                                                                    #line 2254 
                                                                    count = (unsigned short)(26 / (int)act_pci_fn);
  #line 2256 
  ahw->max_uc_count = count;
  #line 2257 
  return;
}

#line 2259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_real_num_queues(struct qlcnic_adapter *adapter, u8 tx_queues, u8 rx_queues)
{
  #line 2262 
  struct net_device *netdev = adapter->netdev;
  #line 2263 
  int err = 0;
  #line 2265 
  if ((unsigned int)tx_queues != 0U) {
    #line 2266 
    err = netif_set_real_num_tx_queues(netdev,(unsigned int)tx_queues);
    #line 2267 
    if (err != 0) {
      #line 2268 
      netdev_err(netdev,(char *)"failed to set %d Tx queues\n",(int)tx_queues);
      #line 2270 
      return err;
    }
  }
  #line 2274 
  if ((unsigned int)rx_queues != 0U) {
    #line 2275 
    err = netif_set_real_num_rx_queues(netdev,(unsigned int)rx_queues);
    #line 2276 
    if (err != 0) 
                  #line 2277 
                  netdev_err(netdev,(char *)"failed to set %d Rx queues\n",(int)rx_queues);
  }
  #line 2281 
  return err;
}

#line 2285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_setup_netdev(struct qlcnic_adapter *adapter, struct net_device *netdev, int pci_using_dac)
{
  #line 2288 
  int err;
  #line 2289 
  struct pci_dev *pdev = adapter->pdev;
  #line 2291 
  adapter->rx_csum = (unsigned char)1U;
  #line 2292 
  (adapter->ahw)->mc_enabled = (unsigned char)0U;
  #line 2293 
  qlcnic_set_mac_filter_count(adapter);
  #line 2295 
  netdev->netdev_ops = & qlcnic_netdev_ops;
  #line 2296 
  netdev->watchdog_timeo = 1250;
  #line 2298 
  qlcnic_change_mtu(netdev,(int)netdev->mtu);
  #line 2300 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 2300 
                                                netdev->ethtool_ops = & qlcnic_sriov_vf_ethtool_ops; else 
                                                                    #line 2300 
                                                                    netdev->ethtool_ops = & qlcnic_ethtool_ops;
  #line 2303 
  netdev->features |= 549755830547ULL;
  #line 2306 
  netdev->vlan_features |= 19ULL;
  #line 2309 
  if (((adapter->ahw)->capabilities & 2U) != 0U) {
    #line 2310 
    netdev->features |= 1114112ULL;
    #line 2311 
    netdev->vlan_features |= 1114112ULL;
  }
  #line 2314 
  if (pci_using_dac != 0) {
    #line 2315 
    netdev->features |= 32ULL;
    #line 2316 
    netdev->vlan_features |= 32ULL;
  }
  #line 2319 
  if (qlcnic_vlan_tx_check(adapter) != 0U) 
                                           #line 2320 
                                           netdev->features |= 128ULL;
  #line 2322 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                #line 2323 
                                                netdev->features |= 512ULL;
  #line 2325 
  if (((adapter->ahw)->capabilities & 1024U) != 0U) 
                                                    #line 2326 
                                                    netdev->features |= 32768ULL;
  #line 2328 
  if ((int)qlcnic_encap_tx_offload(adapter) != 0) {
    #line 2329 
    netdev->features |= 67108864ULL;
    #line 2332 
    netdev->hw_enc_features = 68222978ULL;
  }
  #line 2338 
  if ((int)qlcnic_encap_rx_offload(adapter) != 0) 
                                                  #line 2339 
                                                  netdev->hw_enc_features |= 549755813888ULL;
  #line 2341 
  netdev->hw_features = netdev->features;
  #line 2342 
  netdev->priv_flags |= 4096U;
  #line 2343 
  netdev->irq = (int)(adapter->msix_entries)->vector;
  #line 2346 
  netdev->min_mtu = 68U;
  #line 2347 
  netdev->max_mtu = 9600U;
  #line 2349 
  err = qlcnic_set_real_num_queues(adapter,(unsigned char)((int)adapter->drv_tx_rings),(unsigned char)((int)adapter->drv_sds_rings));
  #line 2351 
  if (err != 0) 
                #line 2352 
                return err;
  #line 2354 
  qlcnic_dcb_init_dcbnl_ops(adapter->dcb);
  #line 2356 
  err = cif_register_netdev(netdev);
  #line 2357 
  if (err != 0) {
    #line 2358 
    _dev_err(& pdev->dev,(char *)"failed to register net device\n");
    #line 2359 
    return err;
  }
  #line 2362 
  return 0;
}

#line 2365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_dma_mask(struct pci_dev *pdev, int *pci_using_dac)
{
  #line 2367 
  if (pci_set_dma_mask(pdev,18446744073709551615ULL) == 0) {
    #line 2367 
    if (pci_set_consistent_dma_mask(pdev,18446744073709551615ULL) == 0) 
      #line 2369 
      *pci_using_dac = 1; else 
                               #line 2367 
                               goto _LAND_0;
  }
  else {
    #line 2367 
    _LAND_0: 
    #line 2370 
    if (pci_set_dma_mask(pdev,4294967295ULL) == 0) {
      #line 2370 
      if (pci_set_consistent_dma_mask(pdev,4294967295ULL) == 0) 
                                                                #line 2372 
                                                                *pci_using_dac = 0; else 
                                                                    #line 2370 
                                                                    goto _LAND;
    }
    else {
      #line 2370 
      _LAND: {
               #line 2374 
               _dev_err(& pdev->dev,(char *)"Unable to set DMA mask, aborting\n");
               #line 2375 
               return -5;
             }
    }
  }
  #line 2378 
  return 0;
}

#line 2381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_free_tx_rings(struct qlcnic_adapter *adapter)
{
  #line 2383 
  int ring;
  #line 2384 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 2386 
  ring = 0;
  #line 2386 
  while ((int)adapter->drv_tx_rings > ring) {
    #line 2387 
    tx_ring = adapter->tx_ring + (unsigned long)ring;
    #line 2388 
    if (tx_ring != (struct qlcnic_host_tx_ring *)0) {
      #line 2389 
      cif_vfree_2((void *)tx_ring->cmd_buf_arr);
      #line 2390 
      tx_ring->cmd_buf_arr = (struct qlcnic_cmd_buffer *)0;
    }
    #line 2386 
    ring ++;
  }
  #line 2393 
  kfree((void *)adapter->tx_ring);
  #line 2394 
  return;
}

#line 2396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_alloc_tx_rings(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  #line 2399 
  int ring;
  #line 2399 
  int vector;
  #line 2399 
  int index;
  #line 2400 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 2401 
  struct qlcnic_cmd_buffer *cmd_buf_arr;
  #line 2403 
  tx_ring = (struct qlcnic_host_tx_ring *)kcalloc_3((unsigned long)adapter->drv_tx_rings,4096UL,3264U);
  #line 2405 
  if (tx_ring == (struct qlcnic_host_tx_ring *)0) 
                                                  #line 2406 
                                                  return -12;
  #line 2408 
  adapter->tx_ring = tx_ring;
  #line 2410 
  ring = 0;
  #line 2410 
  while ((int)adapter->drv_tx_rings > ring) {
    #line 2411 
    tx_ring = adapter->tx_ring + (unsigned long)ring;
    #line 2412 
    tx_ring->num_desc = (unsigned int)adapter->num_txd;
    #line 2413 
    tx_ring->txq = netdev_get_tx_queue(netdev,(unsigned int)ring);
    #line 2414 
    cmd_buf_arr = (struct qlcnic_cmd_buffer *)cif_vzalloc_3((unsigned long)tx_ring->num_desc * 304UL);
    #line 2415 
    if (cmd_buf_arr == (struct qlcnic_cmd_buffer *)0) {
      #line 2416 
      qlcnic_free_tx_rings(adapter);
      #line 2417 
      return -12;
    }
    #line 2419 
    tx_ring->cmd_buf_arr = cmd_buf_arr;
    #line 2420 
    spinlock_check(& tx_ring->tx_clean_lock);
    {
      #line 2420 
      struct lock_class_key __key;
      #line 2420 
      __raw_spin_lock_init(& tx_ring->tx_clean_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&tx_ring->tx_clean_lock)->rlock",& __key);
    }
    #line 2410 
    ring ++;
  }
  #line 2423 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 2423 
                                            goto _LOR;
  else {
    #line 2423 
    if ((int)qlcnic_82xx_check(adapter) != 0) {
      #line 2424 
      if ((int)qlcnic_check_multi_tx(adapter) != 0) {
        #line 2423 
        _LOR: {
                #line 2425 
                ring = 0;
                #line 2425 
                while ((int)adapter->drv_tx_rings > ring) {
                  #line 2426 
                  tx_ring = adapter->tx_ring + (unsigned long)ring;
                  #line 2427 
                  tx_ring->adapter = adapter;
                  #line 2428 
                  if ((adapter->flags & 4U) != 0U) {
                    #line 2429 
                    index = (int)adapter->drv_sds_rings + ring;
                    #line 2430 
                    vector = (int)(adapter->msix_entries + (unsigned long)index)->vector;
                    #line 2431 
                    tx_ring->irq = vector;
                  }
                  #line 2425 
                  ring ++;
                }
              }
      }
    }
  }
  #line 2436 
  return 0;
}

#line 2439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_drv_version(struct qlcnic_adapter *adapter)
{
  #line 2441 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 2442 
  u32 fw_cmd = 0U;
  #line 2444 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 2445 
                                            fw_cmd = 56U;
  else {
    #line 2446 
    if ((int)qlcnic_83xx_check(adapter) != 0) 
                                              #line 2447 
                                              fw_cmd = 111U;
  }
  #line 2449 
  if ((ahw->extra_capability[0] & 32U) != 0U) 
                                              #line 2450 
                                              qlcnic_fw_cmd_set_drv_version(adapter,fw_cmd);
  #line 2451 
  return;
}

#line 2454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_reset_api_lock(struct qlcnic_adapter *adapter)
{
  #line 2456 
  qlcnic_api_lock(adapter);
  #line 2457 
  qlcnic_api_unlock(adapter);
  #line 2458 
  return;
}

#line 2462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 2466 
  struct qlcnic_hardware_context *ahw;
  #line 2467 
  int err;
  #line 2468 
  char board_name[119U];
  #line 2464 
  struct net_device *netdev = (struct net_device *)0;
  #line 2465 
  struct qlcnic_adapter *adapter = (struct qlcnic_adapter *)0;
  #line 2467 
  int pci_using_dac = -1;
  #line 2470 
  err = pci_enable_device(pdev);
  #line 2471 
  if (err != 0) 
                #line 2472 
                return err;
  #line 2474 
  if ((pdev->resource[0].flags & 512UL) == 0UL) {
    #line 2475 
    err = -19;
    #line 2476 
    goto err_out_disable_pdev;
  }
  #line 2479 
  err = qlcnic_set_dma_mask(pdev,& pci_using_dac);
  #line 2480 
  if (err != 0) 
                #line 2481 
                goto err_out_disable_pdev;
  #line 2483 
  err = pci_request_regions(pdev,(char *)(& qlcnic_driver_name));
  #line 2484 
  if (err != 0) 
                #line 2485 
                goto err_out_disable_pdev;
  #line 2487 
  pci_set_master(pdev);
  #line 2488 
  pci_enable_pcie_error_reporting(pdev);
  #line 2490 
  ahw = (struct qlcnic_hardware_context *)kzalloc_6(880UL,3264U);
  #line 2491 
  if (ahw == (struct qlcnic_hardware_context *)0) {
    #line 2492 
    err = -12;
    #line 2493 
    goto err_out_free_res;
  }
  #line 2496 
  switch (ent->device) {
    #line 2497 
    case (__u32)32800: 
                       #line 2497 
    ;
    #line 2498 
    ahw->hw_ops = & qlcnic_hw_ops;
    #line 2499 
    ahw->reg_tbl = (u32 *)(& qlcnic_reg_tbl);
    #line 2500 
    break;
    #line 2501 
    case (__u32)32816: 
                       #line 2501 
    ;
    #line 2502 
    case (__u32)34864: 
                       #line 2502 
    ;
    #line 2503 
    case (__u32)32832: 
                       #line 2503 
    ;
    #line 2504 
    qlcnic_83xx_register_map(ahw);
    #line 2505 
    break;
    #line 2506 
    case (__u32)33840: 
                       #line 2506 
    ;
    #line 2507 
    case (__u32)35888: 
                       #line 2507 
    ;
    #line 2508 
    case (__u32)33856: 
                       #line 2508 
    ;
    #line 2509 
    qlcnic_sriov_vf_register_map(ahw);
    #line 2510 
    break;
    #line 2511 
    default: 
             #line 2511 
    ;
    #line 2512 
    goto err_out_free_hw_res;
  }
  #line 2515 
  err = qlcnic_setup_pci_map(pdev,ahw);
  #line 2516 
  if (err != 0) 
                #line 2517 
                goto err_out_free_hw_res;
  #line 2519 
  netdev = cif_alloc_etherdev_mqs(1688,8U,8U);
  #line 2521 
  if (netdev == (struct net_device *)0) {
    #line 2522 
    err = -12;
    #line 2523 
    goto err_out_iounmap;
  }
  #line 2526 
  netdev->dev.parent = & pdev->dev;
  #line 2528 
  adapter = (struct qlcnic_adapter *)netdev_priv(netdev);
  #line 2529 
  adapter->netdev = netdev;
  #line 2530 
  adapter->pdev = pdev;
  #line 2531 
  adapter->ahw = ahw;
  #line 2533 
  adapter->qlcnic_wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"qlcnic");
  #line 2534 
  if (adapter->qlcnic_wq == (struct workqueue_struct *)0) {
    #line 2535 
    err = -12;
    #line 2536 
    _dev_err(& pdev->dev,(char *)"Failed to create workqueue\n");
    #line 2537 
    goto err_out_free_netdev;
  }
  #line 2540 
  err = qlcnic_alloc_adapter_resources(adapter);
  #line 2541 
  if (err != 0) 
                #line 2542 
                goto err_out_free_wq;
  #line 2544 
  adapter->dev_rst_time = (unsigned long long)jiffies;
  #line 2545 
  ahw->revision_id = pdev->revision;
  #line 2546 
  ahw->max_vnic_func = qlcnic_get_vnic_func_count(adapter);
  #line 2547 
  if (qlcnic_mac_learn == 2) 
                             #line 2548 
                             adapter->fdb_mac_learn = (_Bool)1;
  else 
    #line 2549 
    if (qlcnic_mac_learn == 1) 
                               #line 2550 
                               adapter->drv_mac_learn = (_Bool)1;
  {
    #line 2552 
    struct lock_class_key __key;
    #line 2552 
    __rwlock_init(& (adapter->ahw)->crb_lock,(char *)"&adapter->ahw->crb_lock",& __key);
  }
  {
    #line 2553 
    struct lock_class_key __key_0;
    #line 2553 
    __mutex_init(& (adapter->ahw)->mem_lock,(char *)"&adapter->ahw->mem_lock",& __key_0);
  }
  #line 2555 
  INIT_LIST_HEAD_5(& adapter->mac_list);
  #line 2557 
  qlcnic_register_dcb(adapter);
  #line 2559 
  if ((int)qlcnic_82xx_check(adapter) != 0) {
    #line 2560 
    qlcnic_check_vf(adapter,ent);
    #line 2561 
    adapter->portnum = (adapter->ahw)->pci_func;
    #line 2562 
    qlcnic_reset_api_lock(adapter);
    #line 2563 
    err = qlcnic_start_firmware_0(adapter);
    #line 2564 
    if (err != 0) {
      #line 2565 
      _dev_err(& pdev->dev,(char *)"Loading fw failed.Please Reboot\n");
      #line 2567 
      goto err_out_maintenance_mode;
    }
    #line 2571 
    if ((unsigned int)(adapter->ahw)->msix_supported != 0U) {
      #line 2572 
      if (qlcnic_check_multi_tx_capability(adapter) == 1) 
                                                          #line 2573 
                                                          qlcnic_set_tx_ring_count(adapter,(unsigned char)1); else 
                                                                    #line 2576 
                                                                    qlcnic_set_tx_ring_count(adapter,(unsigned char)4);
      #line 2578 
      qlcnic_set_sds_ring_count(adapter,(unsigned char)4);
    }
    else {
      #line 2581 
      qlcnic_set_tx_ring_count(adapter,(unsigned char)1);
      #line 2582 
      qlcnic_set_sds_ring_count(adapter,(unsigned char)1);
    }
    #line 2585 
    err = qlcnic_setup_idc_param(adapter);
    #line 2586 
    if (err != 0) 
                  #line 2587 
                  goto err_out_free_hw;
    #line 2589 
    adapter->flags |= 4096U;
  }
  else {
    #line 2591 
    if ((int)qlcnic_83xx_check(adapter) != 0) {
      #line 2592 
      qlcnic_83xx_check_vf(adapter,ent);
      #line 2593 
      adapter->portnum = (adapter->ahw)->pci_func;
      #line 2594 
      err = qlcnic_83xx_init(adapter,pci_using_dac);
      #line 2595 
      if (err != 0) 
        #line 2596 
        switch (err) {
          #line 2597 
          case -131: 
                     #line 2597 
          ;
          #line 2598 
          _dev_err(& pdev->dev,(char *)"Adapter initialization failed due to a faulty hardware\n");
          #line 2599 
          _dev_err(& pdev->dev,(char *)"Please replace the adapter with new one and return the faulty adapter for repair\n");
          #line 2600 
          goto err_out_free_hw;
          #line 2601 
          case -12: 
                    #line 2601 
          ;
          #line 2602 
          _dev_err(& pdev->dev,(char *)"Adapter initialization failed. Please reboot\n");
          #line 2603 
          goto err_out_free_hw;
          #line 2604 
          case -95: 
                    #line 2604 
          ;
          #line 2605 
          _dev_err(& pdev->dev,(char *)"Adapter initialization failed\n");
          #line 2606 
          goto err_out_free_hw;
          #line 2607 
          default: 
                   #line 2607 
          ;
          #line 2608 
          _dev_err(& pdev->dev,(char *)"Adapter initialization failed. Driver will load in maintenance mode to recover the adapter using the application\n");
          #line 2609 
          goto err_out_maintenance_mode;
        }
      #line 2613 
      if ((int)qlcnic_sriov_vf_check(adapter) != 0) 
                                                    #line 2614 
                                                    return 0;
    }
    else {
      #line 2616 
      _dev_err(& pdev->dev,(char *)"%s: failed. Please Reboot\n",(char *)"qlcnic_probe");
      #line 2618 
      err = -19;
      #line 2619 
      goto err_out_free_hw;
    }
  }
  #line 2622 
  if (qlcnic_read_mac_addr(adapter) != 0) 
                                          #line 2623 
                                          _dev_warn(& pdev->dev,(char *)"failed to read mac addr\n");
  #line 2625 
  qlcnic_read_phys_port_id(adapter);
  #line 2627 
  if ((unsigned int)adapter->portnum == 0U) {
    #line 2630 
    char *tmp_6;
    #line 2630 
    struct module *__mod;
    #line 2628 
    qlcnic_get_board_name(adapter,(char *)(& board_name));
    #line 2630 
    ;
    #line 2630 
    __mod = & __this_module;
    #line 2630 
    if (__mod != (struct module *)0) 
                                     #line 2630 
                                     tmp_6 = (char *)(& __mod->name); else 
                                                                    #line 2630 
                                                                    tmp_6 = (char *)"kernel";
    #line 2630 
    printk((char *)"\001",tmp_6,(char *)(& board_name),(int)(adapter->ahw)->revision_id);
  }
  #line 2635 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
    #line 2635 
    if (qlcnic_use_msi_x == 0) 
      #line 2635 
      if (qlcnic_use_msi != 0) 
                               #line 2637 
                               _dev_warn(& pdev->dev,(char *)"Device does not support MSI interrupts\n");
  #line 2640 
  if ((int)qlcnic_82xx_check(adapter) != 0) {
    #line 2641 
    qlcnic_dcb_enable(adapter->dcb);
    #line 2642 
    qlcnic_dcb_get_info(adapter->dcb);
    #line 2643 
    err = qlcnic_setup_intr(adapter);
    #line 2645 
    if (err != 0) {
      #line 2646 
      _dev_err(& pdev->dev,(char *)"Failed to setup interrupt\n");
      #line 2647 
      goto err_out_disable_msi;
    }
  }
  #line 2651 
  err = qlcnic_get_act_pci_func(adapter);
  #line 2652 
  if (err != 0) 
                #line 2653 
                goto err_out_disable_mbx_intr;
  #line 2655 
  if ((unsigned int)adapter->portnum == 0U) 
                                            #line 2656 
                                            qlcnic_set_drv_version(adapter);
  #line 2658 
  err = qlcnic_setup_netdev(adapter,netdev,pci_using_dac);
  #line 2659 
  if (err != 0) 
                #line 2660 
                goto err_out_disable_mbx_intr;
  #line 2662 
  pci_set_drvdata(pdev,(void *)adapter);
  #line 2664 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 2665 
                                            qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250);
  #line 2668 
  switch ((int)(adapter->ahw)->port_type) {
    #line 2669 
    case 1: 
            #line 2669 
    ;
    #line 2670 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s: GbE port initialized\n",(char *)(& (adapter->netdev)->name));
    #line 2672 
    break;
    #line 2673 
    case 2: 
            #line 2673 
    ;
    #line 2674 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s: XGbE port initialized\n",(char *)(& (adapter->netdev)->name));
    #line 2676 
    break;
  }
  #line 2679 
  if ((int)adapter->drv_mac_learn != 0) 
                                        #line 2680 
                                        qlcnic_alloc_lb_filters_mem(adapter);
  #line 2682 
  qlcnic_add_sysfs(adapter);
  #line 2683 
  qlcnic_register_hwmon_dev(adapter);
  #line 2684 
  return 0;
  #line 2686 
  err_out_disable_mbx_intr: 
                            #line 2686 
  ;
  #line 2687 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 2688 
                                            qlcnic_83xx_free_mbx_intr(adapter);
  #line 2690 
  err_out_disable_msi: 
                       #line 2690 
  ;
  #line 2691 
  qlcnic_teardown_intr(adapter);
  #line 2692 
  qlcnic_cancel_idc_work(adapter);
  #line 2693 
  qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
  #line 2695 
  err_out_free_hw: 
                   #line 2695 
  ;
  #line 2696 
  qlcnic_free_adapter_resources(adapter);
  #line 2698 
  err_out_free_wq: 
                   #line 2698 
  ;
  #line 2699 
  destroy_workqueue(adapter->qlcnic_wq);
  #line 2701 
  err_out_free_netdev: 
                       #line 2701 
  ;
  #line 2702 
  cif_free_netdev(netdev);
  #line 2704 
  err_out_iounmap: 
                   #line 2704 
  ;
  #line 2705 
  qlcnic_cleanup_pci_map(ahw);
  #line 2707 
  err_out_free_hw_res: 
                       #line 2707 
  ;
  #line 2708 
  kfree((void *)ahw);
  #line 2710 
  err_out_free_res: 
                    #line 2710 
  ;
  #line 2711 
  pci_release_regions(pdev);
  #line 2713 
  err_out_disable_pdev: 
                        #line 2713 
  ;
  #line 2714 
  pci_disable_device(pdev);
  #line 2715 
  return err;
  #line 2717 
  err_out_maintenance_mode: 
                            #line 2717 
  ;
  #line 2718 
  cif_set_bit_6(16L,& adapter->state);
  #line 2719 
  netdev->netdev_ops = & qlcnic_netdev_failed_ops;
  #line 2720 
  netdev->ethtool_ops = & qlcnic_ethtool_failed_ops;
  #line 2721 
  ahw->port_type = (unsigned short)2U;
  #line 2723 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 2724 
                                            adapter->tgt_status_reg = (void *)0; else 
                                                                    #line 2726 
                                                                    ahw->board_type = (unsigned short)38U;
  #line 2728 
  err = cif_register_netdev(netdev);
  #line 2730 
  if (err != 0) {
    #line 2731 
    _dev_err(& pdev->dev,(char *)"Failed to register net device\n");
    #line 2732 
    qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
    #line 2733 
    goto err_out_free_hw;
  }
  #line 2736 
  pci_set_drvdata(pdev,(void *)adapter);
  #line 2737 
  qlcnic_add_sysfs(adapter);
  #line 2739 
  return 0;
}

#line 2742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_remove(struct pci_dev *pdev)
{
  #line 2744 
  struct qlcnic_adapter *adapter;
  #line 2745 
  struct net_device *netdev;
  #line 2746 
  struct qlcnic_hardware_context *ahw;
  #line 2748 
  adapter = (struct qlcnic_adapter *)pci_get_drvdata(pdev);
  #line 2749 
  if (adapter == (struct qlcnic_adapter *)0) 
                                             #line 2750 
                                             return;
  #line 2752 
  netdev = adapter->netdev;
  #line 2754 
  qlcnic_cancel_idc_work(adapter);
  #line 2755 
  qlcnic_sriov_pf_disable(adapter);
  #line 2756 
  ahw = adapter->ahw;
  #line 2758 
  cif_unregister_netdev(netdev);
  #line 2759 
  qlcnic_sriov_cleanup(adapter);
  #line 2761 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 2762 
    qlcnic_83xx_initialize_nic(adapter,0);
    #line 2763 
    cancel_delayed_work_sync(& adapter->idc_aen_work);
    #line 2764 
    qlcnic_83xx_free_mbx_intr(adapter);
    #line 2765 
    qlcnic_83xx_detach_mailbox_work(adapter);
    #line 2766 
    qlcnic_83xx_free_mailbox(ahw->mailbox);
    #line 2767 
    kfree((void *)ahw->fw_info);
  }
  #line 2770 
  qlcnic_dcb_free(adapter->dcb);
  #line 2771 
  qlcnic_detach(adapter);
  #line 2772 
  kfree((void *)adapter->npars);
  #line 2773 
  kfree((void *)adapter->eswitch);
  #line 2775 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 2776 
                                            qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
  #line 2778 
  cif_clear_bit_6(2L,& adapter->state);
  #line 2780 
  qlcnic_free_lb_filters_mem(adapter);
  #line 2782 
  qlcnic_teardown_intr(adapter);
  #line 2784 
  qlcnic_remove_sysfs(adapter);
  #line 2786 
  qlcnic_unregister_hwmon_dev(adapter);
  #line 2788 
  qlcnic_cleanup_pci_map(adapter->ahw);
  #line 2790 
  qlcnic_release_firmware(adapter);
  #line 2792 
  pci_disable_pcie_error_reporting(pdev);
  #line 2793 
  pci_release_regions(pdev);
  #line 2794 
  pci_disable_device(pdev);
  #line 2796 
  if (adapter->qlcnic_wq != (struct workqueue_struct *)0) {
    #line 2797 
    destroy_workqueue(adapter->qlcnic_wq);
    #line 2798 
    adapter->qlcnic_wq = (struct workqueue_struct *)0;
  }
  #line 2801 
  qlcnic_free_adapter_resources(adapter);
  #line 2802 
  kfree((void *)ahw);
  #line 2803 
  cif_free_netdev(netdev);
  #line 2804 
  return;
}

#line 2806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_shutdown(struct pci_dev *pdev)
{
  #line 2808 
  if (__qlcnic_shutdown(pdev) != 0) 
                                    #line 2809 
                                    return;
  #line 2811 
  pci_disable_device(pdev);
  #line 2812 
  return;
}

#line 2815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 2817 
  int retval;
  #line 2819 
  retval = __qlcnic_shutdown(pdev);
  #line 2820 
  if (retval != 0) 
                   #line 2821 
                   return retval;
  #line 2823 
  ;
  #line 2823 
  pci_set_power_state(pdev,pci_choose_state(pdev,state));
  #line 2824 
  return 0;
}

#line 2827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_resume(struct pci_dev *pdev)
{
  #line 2830 
  int err;
  #line 2829 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 2832 
  err = pci_enable_device(pdev);
  #line 2833 
  if (err != 0) 
                #line 2834 
                return err;
  #line 2836 
  pci_set_power_state(pdev,0);
  #line 2837 
  pci_set_master(pdev);
  #line 2838 
  pci_restore_state(pdev);
  #line 2840 
  return __qlcnic_resume(adapter);
}

#line 2844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_open(struct net_device *netdev)
{
  #line 2847 
  int err;
  #line 2846 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 2849 
  if ((int)test_bit(16L,& adapter->state) != 0) {
    #line 2850 
    netdev_err(netdev,(char *)"%s: Device is in non-operational state\n",(char *)"qlcnic_open");
    #line 2853 
    return -5;
  }
  #line 2856 
  netif_carrier_off(netdev);
  #line 2858 
  err = qlcnic_attach(adapter);
  #line 2859 
  if (err != 0) 
                #line 2860 
                return err;
  #line 2862 
  err = __qlcnic_up(adapter,netdev);
  #line 2863 
  if (err != 0) 
                #line 2864 
                qlcnic_detach(adapter);
  #line 2866 
  return err;
}

#line 2872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_close(struct net_device *netdev)
{
  #line 2874 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 2876 
  __qlcnic_down(adapter,netdev);
  #line 2878 
  return 0;
}

#line 2883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_alloc_lb_filters_mem(struct qlcnic_adapter *adapter)
{
  #line 2885 
  void *head;
  #line 2886 
  int i;
  #line 2887 
  struct net_device *netdev = adapter->netdev;
  #line 2888 
  u32 filter_size = 0U;
  #line 2889 
  u16 act_pci_func = (unsigned short)0U;
  #line 2891 
  if ((unsigned int)adapter->fhash.fmax != 0U && adapter->fhash.fhead != (struct hlist_head *)0) 
    #line 2892 
    return;
  #line 2894 
  act_pci_func = (adapter->ahw)->total_nic_func;
  #line 2895 
  spinlock_check(& adapter->mac_learn_lock);
  {
    #line 2895 
    struct lock_class_key __key;
    #line 2895 
    __raw_spin_lock_init(& adapter->mac_learn_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->mac_learn_lock)->rlock",& __key);
  }
  #line 2896 
  spinlock_check(& adapter->rx_mac_learn_lock);
  {
    #line 2896 
    struct lock_class_key __key_0;
    #line 2896 
    __raw_spin_lock_init(& adapter->rx_mac_learn_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->rx_mac_learn_lock)->rlock",& __key_0);
  }
  #line 2898 
  if ((int)qlcnic_sriov_vf_check(adapter) != 0) {
    #line 2899 
    filter_size = 1U;
    #line 2900 
    adapter->fhash.fbucket_size = (unsigned short)1U;
  }
  else {
    #line 2901 
    if ((int)qlcnic_82xx_check(adapter) != 0) {
      #line 2902 
      filter_size = 64U;
      #line 2903 
      adapter->fhash.fbucket_size = (unsigned short)32U;
    }
    else {
      #line 2905 
      filter_size = 2048U;
      #line 2906 
      adapter->fhash.fbucket_size = (unsigned short)256U;
    }
  }
  #line 2909 
  head = kcalloc_3((unsigned long)adapter->fhash.fbucket_size,8UL,2592U);
  #line 2912 
  if (head == (void *)0) 
                         #line 2913 
                         return;
  #line 2915 
  adapter->fhash.fmax = (unsigned short)(filter_size / (unsigned int)act_pci_func);
  #line 2916 
  adapter->fhash.fhead = (struct hlist_head *)head;
  #line 2918 
  netdev_info(netdev,(char *)"active nic func = %d, mac filter size=%d\n",(int)act_pci_func,(int)adapter->fhash.fmax);
  #line 2921 
  i = 0;
  #line 2921 
  while ((int)adapter->fhash.fbucket_size > i) {
    #line 2922 
    (adapter->fhash.fhead + (unsigned long)i)->first = (struct hlist_node *)0;
    #line 2921 
    i ++;
  }
  #line 2924 
  adapter->rx_fhash.fbucket_size = adapter->fhash.fbucket_size;
  #line 2926 
  head = kcalloc_3((unsigned long)adapter->rx_fhash.fbucket_size,8UL,2592U);
  #line 2929 
  if (head == (void *)0) 
                         #line 2930 
                         return;
  #line 2932 
  adapter->rx_fhash.fmax = (unsigned short)(filter_size / (unsigned int)act_pci_func);
  #line 2933 
  adapter->rx_fhash.fhead = (struct hlist_head *)head;
  #line 2935 
  i = 0;
  #line 2935 
  while ((int)adapter->rx_fhash.fbucket_size > i) {
    #line 2936 
    (adapter->rx_fhash.fhead + (unsigned long)i)->first = (struct hlist_node *)0;
    #line 2935 
    i ++;
  }
  #line 2937 
  return;
}

#line 2939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_free_lb_filters_mem(struct qlcnic_adapter *adapter)
{
  #line 2941 
  if ((unsigned int)adapter->fhash.fmax != 0U) 
                                               #line 2942 
                                               kfree((void *)adapter->fhash.fhead);
  #line 2944 
  adapter->fhash.fhead = (struct hlist_head *)0;
  #line 2945 
  adapter->fhash.fmax = (unsigned short)0U;
  #line 2947 
  if ((unsigned int)adapter->rx_fhash.fmax != 0U) 
                                                  #line 2948 
                                                  kfree((void *)adapter->rx_fhash.fhead);
  #line 2950 
  adapter->rx_fhash.fmax = (unsigned short)0U;
  #line 2951 
  adapter->rx_fhash.fhead = (struct hlist_head *)0;
  #line 2952 
  return;
}

#line 2954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_check_temp(struct qlcnic_adapter *adapter)
{
  #line 2957 
  u32 temp_state;
  #line 2957 
  u32 temp_val;
  #line 2956 
  struct net_device *netdev = adapter->netdev;
  #line 2957 
  u32 temp = 0U;
  #line 2958 
  int rv = 0;
  #line 2960 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 2961 
                                            temp = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 42U));
  #line 2963 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 2964 
                                            temp = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 18U));
  #line 2966 
  temp_state = temp & 65535U;
  #line 2967 
  temp_val = temp >> 16;
  #line 2969 
  if (temp_state == 3U) {
    #line 2970 
    _dev_err(& netdev->dev,(char *)"Device temperature %d degrees C exceeds",temp_val);
    #line 2974 
    rv = 1;
  }
  else 
    #line 2975 
    if (temp_state == 2U) {
      #line 2976 
      if ((adapter->ahw)->temp == 1U) 
                                      #line 2977 
                                      _dev_err(& netdev->dev,(char *)"Device temperature %d degrees C ",temp_val);
    }
    else 
      #line 2984 
      if ((adapter->ahw)->temp == 2U) 
                                      #line 2985 
                                      _dev_info(& netdev->dev,(char *)"Device temperature is now %d degrees C",temp_val);
  #line 2990 
  (adapter->ahw)->temp = temp_state;
  #line 2991 
  return rv;
}

#line 2994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
__inline static void dump_tx_ring_desc(struct qlcnic_host_tx_ring *tx_ring)
{
  #line 2996 
  int i;
  #line 2998 
  i = 0;
  #line 2998 
  while (tx_ring->num_desc > (unsigned int)i) {
    #line 2999 
    printk((char *)"\001",i);
    #line 3000 
    print_hex_dump((char *)"\001",(char *)"TX: ",2,16,1,(void *)(tx_ring->desc_head + (unsigned long)i),64UL,(_Bool)1);
    #line 2998 
    i ++;
  }
  #line 3003 
  return;
}

#line 3006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_dump_rings(struct qlcnic_adapter *adapter)
{
  #line 3010 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 3011 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 3012 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 3013 
  int ring;
  #line 3008 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 3009 
  struct net_device *netdev = adapter->netdev;
  #line 3015 
  if (netdev == (struct net_device *)0) 
                                        #line 3016 
                                        return;
  else {
    #line 3015 
    if (! netif_running(netdev)) 
                                 #line 3016 
                                 return;
  }
  #line 3018 
  ring = 0;
  #line 3018 
  while ((int)adapter->max_rds_rings > ring) {
    {
      #line 3019 
      rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
      #line 3020 
      if (rds_ring == (struct qlcnic_host_rds_ring *)0) 
                                                        #line 3021 
                                                        goto __Cont;
      #line 3022 
      ;
      #line 3022 
      ;
      #line 3022 
      ;
      #line 3022 
      ;
      #line 3022 
      netdev_info(netdev,(char *)"rds_ring=%d crb_rcv_producer=%d producer=%u num_desc=%u\n",ring,readl(rds_ring->crb_rcv_producer),rds_ring->producer,rds_ring->num_desc);
    }
    #line 3018 
    __Cont: 
            #line 3018 
    ring ++;
  }
  #line 3028 
  ring = 0;
  #line 3028 
  while ((int)adapter->drv_sds_rings > ring) {
    {
      #line 3029 
      sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
      #line 3030 
      if (sds_ring == (struct qlcnic_host_sds_ring *)0) 
                                                        #line 3031 
                                                        goto __Cont_0;
      #line 3032 
      ;
      #line 3032 
      ;
      #line 3032 
      ;
      #line 3032 
      ;
      #line 3032 
      netdev_info(netdev,(char *)"sds_ring=%d crb_sts_consumer=%d consumer=%u crb_intr_mask=%d num_desc=%u\n",ring,readl(sds_ring->crb_sts_consumer),sds_ring->consumer,readl(sds_ring->crb_intr_mask),sds_ring->num_desc);
    }
    #line 3028 
    __Cont_0: 
              #line 3028 
    ring ++;
  }
  #line 3039 
  ring = 0;
  #line 3039 
  while ((int)adapter->drv_tx_rings > ring) {
    {
      #line 3040 
      tx_ring = adapter->tx_ring + (unsigned long)ring;
      #line 3041 
      if (tx_ring == (struct qlcnic_host_tx_ring *)0) 
                                                      #line 3042 
                                                      goto __Cont_1;
      #line 3043 
      netdev_info(netdev,(char *)"Tx ring=%d Context Id=0x%x\n",ring,(int)tx_ring->ctx_id);
      #line 3045 
      netdev_info(netdev,(char *)"xmit_finished=%llu, xmit_called=%llu, xmit_on=%llu, xmit_off=%llu\n",tx_ring->tx_stats.xmit_finished,tx_ring->tx_stats.xmit_called,tx_ring->tx_stats.xmit_on,tx_ring->tx_stats.xmit_off);
      #line 3052 
      if (tx_ring->crb_intr_mask != (void *)0) {
        #line 3053 
        ;
        #line 3053 
        netdev_info(netdev,(char *)"crb_intr_mask=%d\n",readl(tx_ring->crb_intr_mask));
      }
      #line 3056 
      ;
      #line 3056 
      ;
      #line 3056 
      ;
      #line 3056 
      ;
      #line 3056 
      netdev_info(netdev,(char *)"hw_producer=%d, sw_producer=%d sw_consumer=%d, hw_consumer=%d\n",readl(tx_ring->crb_cmd_producer),tx_ring->producer,tx_ring->sw_consumer,*(tx_ring->hw_consumer));
      #line 3062 
      ;
      #line 3062 
      ;
      #line 3062 
      netdev_info(netdev,(char *)"Total desc=%d, Available desc=%d\n",tx_ring->num_desc,qlcnic_tx_avail(tx_ring));
      #line 3065 
      if (((adapter->ahw)->msg_enable & 128U) != 0U) 
                                                     #line 3066 
                                                     dump_tx_ring_desc(tx_ring);
    }
    #line 3039 
    __Cont_1: 
              #line 3039 
    ring ++;
  }
  #line 3068 
  return;
}

#line 3071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_tx_timeout(struct net_device *netdev)
{
  #line 3073 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 3075 
  if ((int)test_bit(2L,& adapter->state) != 0) 
                                               #line 3076 
                                               return;
  #line 3078 
  qlcnic_dump_rings(adapter);
  #line 3080 
  adapter->tx_timeo_cnt = (u8)((int)adapter->tx_timeo_cnt + 1);
  #line 3080 
  if ((unsigned int)adapter->tx_timeo_cnt > 1U) 
                                                #line 3080 
                                                goto _LOR;
  else 
    #line 3080 
    if (((adapter->ahw)->msg_enable & 128U) != 0U) {
      #line 3080 
      _LOR: {
              #line 3082 
              netdev_err(netdev,(char *)"Tx timeout, reset the adapter.\n");
              #line 3083 
              if ((int)qlcnic_82xx_check(adapter) != 0) 
                                                        #line 3084 
                                                        adapter->need_fw_reset = (unsigned char)1U;
              else {
                #line 3085 
                if ((int)qlcnic_83xx_check(adapter) != 0) 
                                                          #line 3086 
                                                          qlcnic_83xx_idc_request_reset(adapter,3735944941U);
              }
            }
    }
    else {
      #line 3089 
      netdev_err(netdev,(char *)"Tx timeout, reset adapter context.\n");
      #line 3090 
      (adapter->ahw)->reset_context = (unsigned char)1U;
    }
  #line 3092 
  return;
}

#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct net_device_stats *qlcnic_get_stats(struct net_device *netdev)
{
  #line 3096 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 3097 
  struct net_device_stats *stats = & netdev->stats;
  #line 3099 
  if ((int)test_bit(1L,& adapter->state) != 0) 
                                               #line 3100 
                                               qlcnic_update_stats(adapter);
  #line 3102 
  stats->rx_packets = (unsigned long)(adapter->stats.rx_pkts + adapter->stats.lro_pkts);
  #line 3103 
  stats->tx_packets = (unsigned long)adapter->stats.xmitfinished;
  #line 3104 
  stats->rx_bytes = (unsigned long)(adapter->stats.rxbytes + adapter->stats.lrobytes);
  #line 3105 
  stats->tx_bytes = (unsigned long)adapter->stats.txbytes;
  #line 3106 
  stats->rx_dropped = (unsigned long)adapter->stats.rxdropped;
  #line 3107 
  stats->tx_dropped = (unsigned long)adapter->stats.txdropped;
  #line 3109 
  return stats;
}

#line 3112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_82xx_clear_legacy_intr(struct qlcnic_adapter *adapter)
{
  #line 3114 
  u32 status;
  #line 3116 
  status = readl(adapter->isr_int_vec);
  #line 3118 
  if (((adapter->ahw)->int_vec_bit & status) == 0U) 
                                                    #line 3119 
                                                    return IRQ_NONE;
  #line 3122 
  status = readl(adapter->crb_int_state_reg);
  #line 3123 
  if ((status & 768U) != 512U) 
                               #line 3124 
                               return IRQ_NONE;
  #line 3126 
  writel(4294967295U,adapter->tgt_status_reg);
  #line 3128 
  readl(adapter->isr_int_vec);
  #line 3129 
  readl(adapter->isr_int_vec);
  #line 3131 
  return IRQ_HANDLED;
}

#line 3134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_tmp_intr(int irq, void *data)
{
  #line 3136 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  #line 3137 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  #line 3139 
  if ((adapter->flags & 4U) != 0U) 
                                   #line 3140 
                                   goto done;
  else 
    #line 3141 
    if ((adapter->flags & 2U) != 0U) {
      #line 3142 
      writel(4294967295U,adapter->tgt_status_reg);
      #line 3143 
      goto done;
    }
  #line 3146 
  if (qlcnic_clear_legacy_intr(adapter) == (unsigned int)IRQ_NONE) 
                                                                   #line 3147 
                                                                   return IRQ_NONE;
  #line 3149 
  done: 
        #line 3149 
  ;
  #line 3150 
  ((adapter->ahw)->diag_cnt) ++;
  #line 3151 
  qlcnic_enable_sds_intr(adapter,sds_ring);
  #line 3152 
  return IRQ_HANDLED;
}

#line 3155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_intr(int irq, void *data)
{
  #line 3157 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  #line 3158 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  #line 3160 
  if (qlcnic_clear_legacy_intr(adapter) == (unsigned int)IRQ_NONE) 
                                                                   #line 3161 
                                                                   return IRQ_NONE;
  #line 3163 
  napi_schedule(& sds_ring->napi);
  #line 3165 
  return IRQ_HANDLED;
}

#line 3168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_msi_intr(int irq, void *data)
{
  #line 3170 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  #line 3171 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  #line 3174 
  writel(4294967295U,adapter->tgt_status_reg);
  #line 3176 
  napi_schedule(& sds_ring->napi);
  #line 3177 
  return IRQ_HANDLED;
}

#line 3180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_msix_intr(int irq, void *data)
{
  #line 3182 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  #line 3184 
  napi_schedule(& sds_ring->napi);
  #line 3185 
  return IRQ_HANDLED;
}

#line 3188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_msix_tx_intr(int irq, void *data)
{
  #line 3190 
  struct qlcnic_host_tx_ring *tx_ring = (struct qlcnic_host_tx_ring *)data;
  #line 3192 
  napi_schedule(& tx_ring->napi);
  #line 3193 
  return IRQ_HANDLED;
}

#line 3197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_idc_debug_info(struct qlcnic_adapter *adapter, u8 encoding)
{
  #line 3199 
  u32 val;
  #line 3201 
  val = (unsigned int)adapter->portnum & 15U;
  #line 3202 
  val = (unsigned int)((int)encoding << 7) | val;
  #line 3203 
  val = (unsigned int)(((unsigned long long)jiffies - adapter->dev_rst_time) << 8) | val;
  #line 3205 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 8U));
  #line 3206 
  adapter->dev_rst_time = (unsigned long long)jiffies;
  #line 3207 
  return;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_drv_state(struct qlcnic_adapter *adapter, u8 state)
{
  #line 3212 
  u32 val;
  {
    #line 3214 
    int __ret_warn_on = (unsigned int)state + 252U > 1U;
    #line 3214 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 3215 
      ldv_inline_asm();
      #line 3216 
      ldv_inline_asm();
    }
    #line 3214 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 3217 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3218 
                                     return -5;
  #line 3220 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
  #line 3222 
  if ((unsigned int)state == 4U) 
                                 #line 3223 
                                 val = (unsigned int)(1 << (int)adapter->portnum * 4) | val;
  else 
    #line 3224 
    if ((unsigned int)state == 5U) 
                                   #line 3225 
                                   val = (unsigned int)(2 << (int)adapter->portnum * 4) | val;
  #line 3227 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
  #line 3229 
  qlcnic_api_unlock(adapter);
  #line 3231 
  return 0;
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_clr_drv_state(struct qlcnic_adapter *adapter)
{
  #line 3237 
  u32 val;
  #line 3239 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3240 
                                     return -16;
  #line 3242 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
  #line 3243 
  val = (unsigned int)(~ (3 << (int)adapter->portnum * 4)) & val;
  #line 3244 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
  #line 3246 
  qlcnic_api_unlock(adapter);
  #line 3248 
  return 0;
}

#line 3251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_clr_all_drv_state(struct qlcnic_adapter *adapter, u8 failed)
{
  #line 3253 
  u32 val;
  #line 3255 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3256 
                                     goto err;
  #line 3258 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 5U));
  #line 3259 
  val = (unsigned int)(~ (1 << (int)adapter->portnum * 4)) & val;
  #line 3260 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 5U));
  #line 3262 
  if ((unsigned int)failed != 0U) {
    #line 3263 
    writel(6U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
    #line 3265 
    _dev_info(& (adapter->pdev)->dev,(char *)"Device state set to Failed. Please Reboot\n");
  }
  else 
    #line 3267 
    if ((val & 286331153U) == 0U) 
                                  #line 3268 
                                  writel(1U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
  #line 3271 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
  #line 3272 
  val = (unsigned int)(~ (3 << (int)adapter->portnum * 4)) & val;
  #line 3273 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
  #line 3275 
  qlcnic_api_unlock(adapter);
  #line 3276 
  err: 
       #line 3276 
  ;
  #line 3277 
  adapter->fw_fail_cnt = (unsigned char)0U;
  #line 3278 
  adapter->flags &= 4294950911U;
  #line 3279 
  cif_clear_bit_6(4L,& adapter->state);
  #line 3280 
  cif_clear_bit_6(2L,& adapter->state);
  #line 3281 
  return;
}

#line 3285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_drv_state(struct qlcnic_adapter *adapter)
{
  #line 3287 
  int act;
  #line 3287 
  int state;
  #line 3287 
  int active_mask;
  #line 3288 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3290 
  state = (int)readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
  #line 3291 
  act = (int)readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 5U));
  #line 3293 
  if ((adapter->flags & 8192U) != 0U) {
    #line 3294 
    active_mask = ~ (1 << (int)ahw->pci_func * 4);
    #line 3295 
    act &= active_mask;
  }
  #line 3298 
  if (((state ^ act) & 286331153) == 0 || (((state >> 1) ^ act) & 286331153) == 0) 
    #line 3300 
    return 0; else 
                   #line 3302 
                   return 1;
}

#line 3305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_idc_ver(struct qlcnic_adapter *adapter)
{
  #line 3307 
  u32 val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 10U));
  #line 3309 
  if (val != 1U) 
                 #line 3310 
                 _dev_warn(& (adapter->pdev)->dev,(char *)"IDC Version mismatch, driver\'s",1,val);
  #line 3314 
  return 0;
}

#line 3318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_can_start_firmware(struct qlcnic_adapter *adapter)
{
  #line 3320 
  u32 val;
  #line 3320 
  u32 prev_state;
  #line 3323 
  u8 ret;
  #line 3321 
  u8 dev_init_timeo = adapter->dev_init_timeo;
  #line 3322 
  u8 portnum = adapter->portnum;
  #line 3325 
  if ((int)test_and_set_bit(4L,& adapter->state) != 0) 
                                                       #line 3326 
                                                       return 1;
  #line 3328 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3329 
                                     return -1;
  #line 3331 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 5U));
  #line 3332 
  if (((unsigned int)(1 << (int)portnum * 4) & val) == 0U) {
    #line 3333 
    val = (unsigned int)(1 << (int)portnum * 4) | val;
    #line 3334 
    writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 5U));
  }
  #line 3337 
  prev_state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
  #line 3338 
  if (((adapter->ahw)->msg_enable & 8192U) != 0U) {
    #line 3338 
    ;
    #line 3338 
    printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_can_start_firmware",prev_state);
  }
  #line 3340 
  switch (prev_state) {
    #line 3341 
    case (u32)1: 
                 #line 3341 
    ;
    #line 3342 
    writel(2U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
    #line 3344 
    writel(1U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 10U));
    #line 3346 
    qlcnic_idc_debug_info(adapter,(unsigned char)0);
    #line 3347 
    qlcnic_api_unlock(adapter);
    #line 3348 
    return 1;
    #line 3350 
    case (u32)3: 
                 #line 3350 
    ;
    #line 3351 
    ret = (unsigned char)qlcnic_check_idc_ver(adapter);
    #line 3352 
    qlcnic_api_unlock(adapter);
    #line 3353 
    return (int)ret;
    #line 3355 
    case (u32)4: 
                 #line 3355 
    ;
    #line 3356 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
    #line 3357 
    val = (unsigned int)(1 << (int)portnum * 4) | val;
    #line 3358 
    writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
    #line 3359 
    break;
    #line 3361 
    case (u32)5: 
                 #line 3361 
    ;
    #line 3362 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
    #line 3363 
    val = (unsigned int)(2 << (int)portnum * 4) | val;
    #line 3364 
    writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
    #line 3365 
    break;
    #line 3367 
    case (u32)6: 
                 #line 3367 
    ;
    #line 3368 
    _dev_err(& (adapter->pdev)->dev,(char *)"Device in failed state.\n");
    #line 3369 
    qlcnic_api_unlock(adapter);
    #line 3370 
    return -1;
    #line 3372 
    case (u32)2: 
                 #line 3372 
    ;
    #line 3373 
    case (u32)7: 
                 #line 3373 
    ;
    #line 3374 
    break;
  }
  #line 3377 
  qlcnic_api_unlock(adapter);
  #line 3379 
  while (1) {
    #line 3380 
    msleep(1000U);
    #line 3381 
    prev_state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
    #line 3383 
    if (prev_state == 7U) 
                          #line 3384 
                          goto __Cont;
    #line 3379 
    __Cont: 
            #line 3385 
    ;
    #line 3385 
    if (prev_state != 3U) {
      #line 3385 
      dev_init_timeo = (u8)((int)dev_init_timeo - 1);
      #line 3385 
      if (! ((unsigned int)dev_init_timeo != 0U)) 
                                                  #line 3379 
                                                  break;
    }
    else 
         #line 3379 
         break;
  }
  #line 3387 
  if ((unsigned int)dev_init_timeo == 0U) {
    #line 3388 
    _dev_err(& (adapter->pdev)->dev,(char *)"Waiting for device to initialize timeout\n");
    #line 3390 
    return -1;
  }
  #line 3393 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3394 
                                     return -1;
  #line 3396 
  val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
  #line 3397 
  val = (unsigned int)(~ (3 << (int)portnum * 4)) & val;
  #line 3398 
  writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
  #line 3400 
  ret = (unsigned char)qlcnic_check_idc_ver(adapter);
  #line 3401 
  qlcnic_api_unlock(adapter);
  #line 3403 
  return (int)ret;
}

#line 3407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_fwinit_work(struct work_struct *work)
{
  #line 3409 
  void *__mptr;
  #line 3412 
  u32 val;
  #line 3438 
  u8 tmp_1;
  #line 3409 
  __mptr = (void *)work;
  #line 3409 
  struct qlcnic_adapter *adapter = ((struct qlcnic_adapter *)(__mptr + 18446744073709550704U));
  #line 3411 
  u32 dev_state = 15U;
  #line 3414 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3415 
                                     goto err_ret;
  #line 3417 
  dev_state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
  #line 3418 
  if (dev_state == 7U || dev_state == 5U) {
    #line 3420 
    qlcnic_api_unlock(adapter);
    #line 3421 
    qlcnic_schedule_work(adapter,& qlcnic_fwinit_work,500);
    #line 3423 
    return;
  }
  #line 3426 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) {
    #line 3427 
    qlcnic_api_unlock(adapter);
    #line 3428 
    goto wait_npar;
  }
  #line 3431 
  if (dev_state + 4294967294U <= 1U) {
    #line 3433 
    _dev_info(& (adapter->pdev)->dev,(char *)"Detected state change from ");
    #line 3435 
    goto skip_ack_check;
  }
  #line 3438 
  tmp_1 = adapter->fw_wait_cnt;
  #line 3438 
  adapter->fw_wait_cnt = (u8)((int)adapter->fw_wait_cnt + 1);
  #line 3438 
  ;
  #line 3438 
  if ((int)tmp_1 > (int)adapter->reset_ack_timeo) {
    #line 3439 
    _dev_info(& (adapter->pdev)->dev,(char *)"Reset:Failed to get ack %d sec\n",(int)adapter->reset_ack_timeo);
    #line 3441 
    goto skip_ack_check;
  }
  #line 3444 
  if (qlcnic_check_drv_state(adapter) == 0) {
    #line 3445 
    skip_ack_check: 
                    #line 3445 
    ;
    #line 3446 
    dev_state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
    #line 3448 
    if (dev_state == 4U) {
      #line 3449 
      writel(2U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
      #line 3451 
      cif_set_bit_6(4L,& adapter->state);
      #line 3452 
      if (((adapter->ahw)->msg_enable & 1U) != 0U) {
        #line 3452 
        printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_fwinit_work");
      }
      #line 3453 
      qlcnic_idc_debug_info(adapter,(unsigned char)0);
      #line 3454 
      val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
      #line 3456 
      val = (unsigned int)(1 << (int)adapter->portnum * 4) | val;
      #line 3457 
      writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 7U));
    }
    #line 3461 
    qlcnic_api_unlock(adapter);
    #line 3463 
    rtnl_lock();
    #line 3464 
    if ((int)qlcnic_check_fw_dump_state(adapter) != 0) 
      #line 3464 
      if ((adapter->flags & 8192U) != 0U) {
        #line 3466 
        if (((adapter->ahw)->msg_enable & 1U) != 0U) {
          #line 3466 
          printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_fwinit_work");
        }
        #line 3467 
        qlcnic_dump_fw(adapter);
        #line 3468 
        adapter->flags |= 16384U;
      }
    #line 3470 
    rtnl_unlock();
    #line 3472 
    adapter->flags &= 4294959103U;
    #line 3473 
    if ((*((adapter->nic_ops)->start_firmware))(adapter) == 0) {
      #line 3474 
      qlcnic_schedule_work(adapter,& qlcnic_attach_work,0);
      #line 3475 
      adapter->fw_wait_cnt = (unsigned char)0U;
      #line 3476 
      return;
    }
    #line 3478 
    goto err_ret;
  }
  #line 3481 
  qlcnic_api_unlock(adapter);
  #line 3483 
  wait_npar: 
             #line 3483 
  ;
  #line 3484 
  dev_state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
  #line 3485 
  if (((adapter->ahw)->msg_enable & 8192U) != 0U) {
    #line 3485 
    ;
    #line 3485 
    printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_fwinit_work",dev_state);
  }
  #line 3487 
  switch (dev_state) {
    #line 3488 
    case (u32)3: 
                 #line 3488 
    ;
    #line 3489 
    if (qlcnic_start_firmware_0(adapter) == 0) {
      #line 3490 
      qlcnic_schedule_work(adapter,& qlcnic_attach_work,0);
      #line 3491 
      adapter->fw_wait_cnt = (unsigned char)0U;
      #line 3492 
      return;
    }
    #line 3494 
    case (u32)6: 
                 #line 3494 
    ;
    #line 3495 
    break;
    #line 3496 
    default: 
             #line 3496 
    ;
    #line 3497 
    qlcnic_schedule_work(adapter,& qlcnic_fwinit_work,250);
    #line 3499 
    return;
  }
  #line 3502 
  err_ret: 
           #line 3502 
  ;
  #line 3503 
  _dev_err(& (adapter->pdev)->dev,(char *)"Fwinit work failed state=%u ",dev_state,(int)adapter->fw_wait_cnt);
  #line 3505 
  netif_device_attach(adapter->netdev);
  #line 3506 
  qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
  #line 3507 
  return;
}

#line 3510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_detach_work(struct work_struct *work)
{
  #line 3512 
  void *__mptr;
  #line 3515 
  u32 status;
  #line 3512 
  __mptr = (void *)work;
  #line 3512 
  struct qlcnic_adapter *adapter = ((struct qlcnic_adapter *)(__mptr + 18446744073709550704U));
  #line 3514 
  struct net_device *netdev = adapter->netdev;
  #line 3517 
  netif_device_detach(netdev);
  #line 3520 
  if ((unsigned int)adapter->dev_state == 5U) {
    #line 3521 
    if ((int)netif_running(netdev) != 0) 
                                         #line 3522 
                                         __qlcnic_down(adapter,netdev);
  }
  else 
       #line 3524 
       qlcnic_down(adapter,netdev);
  #line 3526 
  status = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl));
  #line 3528 
  if ((status & 2147483648U) != 0U) {
    #line 3529 
    _dev_err(& (adapter->pdev)->dev,(char *)"Detaching the device: peg halt status1=0x%x\n",status);
    #line 3533 
    if (((status >> 8) & 2097151U) == 22U) {
      #line 3534 
      _dev_err(& (adapter->pdev)->dev,(char *)"On board active cooling fan failed. ");
      #line 3537 
      _dev_err(& (adapter->pdev)->dev,(char *)"Replace the adapter.\n");
    }
    #line 3541 
    goto err_ret;
  }
  #line 3544 
  if ((adapter->ahw)->temp == 3U) {
    #line 3545 
    _dev_err(& (adapter->pdev)->dev,(char *)"Detaching the device: temp=%d\n",(adapter->ahw)->temp);
    #line 3547 
    goto err_ret;
  }
  #line 3551 
  if ((adapter->flags & 8192U) == 0U) {
    #line 3552 
    if (qlcnic_set_drv_state(adapter,
                             (unsigned char)((int)adapter->dev_state)) != 0) {
      #line 3553 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to set driver state,");
      #line 3556 
      goto err_ret;
    }
  }
  #line 3560 
  adapter->fw_wait_cnt = (unsigned char)0U;
  #line 3562 
  qlcnic_schedule_work(adapter,& qlcnic_fwinit_work,250);
  #line 3564 
  return;
  #line 3566 
  err_ret: 
           #line 3566 
  ;
  #line 3567 
  netif_device_attach(netdev);
  #line 3568 
  qlcnic_clr_all_drv_state(adapter,(unsigned char)1);
  #line 3569 
  return;
}

#line 3573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_set_npar_non_operational(struct qlcnic_adapter *adapter)
{
  #line 3575 
  u32 state;
  #line 3577 
  state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 14U));
  #line 3578 
  if (state == 0U) 
                   #line 3579 
                   return;
  #line 3581 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3582 
                                     return;
  #line 3583 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 14U));
  #line 3585 
  qlcnic_api_unlock(adapter);
  #line 3586 
  return;
}

#line 3588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_82xx_dev_request_reset(struct qlcnic_adapter *adapter, u32 key)
{
  #line 3591 
  u32 state;
  #line 3591 
  u32 xg_val = 0U;
  #line 3591 
  u32 gb_val = 0U;
  #line 3593 
  xg_val |= 1U;
  #line 3594 
  xg_val |= 8U;
  #line 3595 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106954904UL,xg_val);
  #line 3596 
  gb_val |= 1U;
  #line 3597 
  gb_val |= 4U;
  #line 3598 
  gb_val |= 16U;
  #line 3599 
  gb_val |= 64U;
  #line 3600 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106955532UL,gb_val);
  #line 3601 
  _dev_info(& (adapter->pdev)->dev,(char *)"Pause control frames disabled");
  #line 3603 
  adapter->need_fw_reset = (unsigned char)1U;
  #line 3605 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3606 
                                     return;
  #line 3608 
  state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
  #line 3610 
  if ((int)test_bit(16L,& adapter->state) != 0) {
    #line 3611 
    netdev_err(adapter->netdev,(char *)"%s: Device is in non-operational state\n",(char *)"qlcnic_82xx_dev_request_reset");
    #line 3613 
    qlcnic_api_unlock(adapter);
    #line 3615 
    return;
  }
  #line 3618 
  if (state == 3U) {
    #line 3619 
    writel(4U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
    #line 3621 
    adapter->flags |= 8192U;
    #line 3622 
    if (((adapter->ahw)->msg_enable & 1U) != 0U) {
      #line 3622 
      printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_82xx_dev_request_reset");
    }
    #line 3623 
    qlcnic_idc_debug_info(adapter,(unsigned char)0);
  }
  #line 3626 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 14U));
  #line 3628 
  qlcnic_api_unlock(adapter);
  #line 3629 
  return;
}

#line 3633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_dev_set_npar_ready(struct qlcnic_adapter *adapter)
{
  #line 3635 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3636 
                                     return;
  #line 3638 
  writel(1U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 14U));
  #line 3640 
  if (((adapter->ahw)->msg_enable & 1U) != 0U) {
    #line 3640 
    printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_dev_set_npar_ready");
  }
  #line 3642 
  qlcnic_api_unlock(adapter);
  #line 3643 
  return;
}

#line 3645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_schedule_work(struct qlcnic_adapter *adapter, void (*func)(struct work_struct *), int delay)
{
  #line 3648 
  if ((int)test_bit(5L,& adapter->state) != 0) 
                                               #line 3649 
                                               return;
  {
    #line 3651 
    struct lock_class_key __key;
    #line 3651 
    __init_work(& adapter->fw_work.work,0);
    #line 3651 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 3651 
    adapter->fw_work.work.data = __constr_expr_44;
    #line 3651 
    lockdep_init_map(& adapter->fw_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 3651 
    INIT_LIST_HEAD_5(& adapter->fw_work.work.entry);
    #line 3651 
    adapter->fw_work.work.func = func;
  }
  {
    #line 3651 
    struct lock_class_key __key_0;
    #line 3651 
    init_timer_key(& adapter->fw_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->fw_work)->timer",& __key_0);
  }
  #line 3652 
  ;
  #line 3652 
  ;
  #line 3652 
  cif_queue_delayed_work_1(adapter->qlcnic_wq,& adapter->fw_work,round_jiffies_relative((unsigned long)delay));
  #line 3654 
  return;
}

#line 3657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_attach_work(struct work_struct *work)
{
  #line 3659 
  void *__mptr;
  #line 3662 
  u32 npar_state;
  #line 3659 
  __mptr = (void *)work;
  #line 3659 
  struct qlcnic_adapter *adapter = ((struct qlcnic_adapter *)(__mptr + 18446744073709550704U));
  #line 3661 
  struct net_device *netdev = adapter->netdev;
  #line 3664 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) {
    #line 3667 
    u8 tmp_0;
    #line 3665 
    npar_state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 14U));
    #line 3667 
    tmp_0 = adapter->fw_wait_cnt;
    #line 3667 
    adapter->fw_wait_cnt = (u8)((int)adapter->fw_wait_cnt + 1);
    #line 3667 
    ;
    #line 3667 
    if ((unsigned int)tmp_0 > 30U) 
                                   #line 3668 
                                   qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
    else 
      #line 3669 
      if (npar_state != 1U) 
                            #line 3670 
                            qlcnic_schedule_work(adapter,& qlcnic_attach_work,250); else 
                                                                    #line 3673 
                                                                    goto attach;
    #line 3674 
    if (((adapter->ahw)->msg_enable & 1U) != 0U) {
      #line 3674 
      printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_attach_work");
    }
    #line 3675 
    return;
  }
  #line 3677 
  attach: 
          #line 3677 
  ;
  #line 3678 
  qlcnic_dcb_get_info(adapter->dcb);
  #line 3680 
  if ((int)netif_running(netdev) != 0) {
    #line 3681 
    if (qlcnic_up(adapter,netdev) != 0) 
                                        #line 3682 
                                        goto done;
    #line 3684 
    qlcnic_restore_indev_addr(netdev,1UL);
  }
  #line 3687 
  done: 
        #line 3687 
  ;
  #line 3688 
  netif_device_attach(netdev);
  #line 3689 
  adapter->fw_fail_cnt = (unsigned char)0U;
  #line 3690 
  adapter->flags &= 4294950911U;
  #line 3691 
  cif_clear_bit_6(2L,& adapter->state);
  #line 3692 
  if ((unsigned int)adapter->portnum == 0U) 
                                            #line 3693 
                                            qlcnic_set_drv_version(adapter);
  #line 3695 
  if (qlcnic_clr_drv_state(adapter) == 0) 
                                          #line 3696 
                                          qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250);
  #line 3697 
  return;
}

#line 3701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_health(struct qlcnic_adapter *adapter)
{
  #line 3705 
  u32 heartbeat;
  #line 3706 
  u32 peg_status;
  #line 3703 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 3704 
  struct qlcnic_fw_dump *fw_dump = & ahw->fw_dump;
  #line 3705 
  u32 state = 0U;
  #line 3707 
  int err = 0;
  #line 3709 
  if (qlcnic_check_temp(adapter) != 0) 
                                       #line 3710 
                                       goto detach;
  #line 3712 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
                                                  #line 3713 
                                                  qlcnic_dev_request_reset(adapter,0U);
  #line 3715 
  state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
  #line 3716 
  if (state == 4U) {
    #line 3717 
    qlcnic_set_npar_non_operational(adapter);
    #line 3718 
    adapter->need_fw_reset = (unsigned char)1U;
  }
  else 
    #line 3719 
    if (state == 5U) 
                     #line 3720 
                     goto detach;
  #line 3722 
  heartbeat = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 2U));
  #line 3723 
  if (adapter->heartbeat != heartbeat) {
    #line 3724 
    adapter->heartbeat = heartbeat;
    #line 3725 
    adapter->fw_fail_cnt = (unsigned char)0U;
    #line 3726 
    if ((unsigned int)adapter->need_fw_reset != 0U) 
                                                    #line 3727 
                                                    goto detach;
    #line 3729 
    if ((unsigned int)ahw->reset_context != 0U && qlcnic_auto_fw_reset != 0) 
      #line 3730 
      qlcnic_reset_hw_context(adapter);
    #line 3732 
    return 0;
  }
  #line 3735 
  adapter->fw_fail_cnt = (u8)((int)adapter->fw_fail_cnt + 1);
  #line 3735 
  if ((unsigned int)adapter->fw_fail_cnt <= 1U) 
                                                #line 3736 
                                                return 0;
  #line 3738 
  adapter->flags |= 16384U;
  #line 3740 
  qlcnic_dev_request_reset(adapter,0U);
  #line 3742 
  if (qlcnic_auto_fw_reset != 0) 
                                 #line 3743 
                                 cif_clear_bit_6(0L,& adapter->state);
  #line 3745 
  _dev_err(& (adapter->pdev)->dev,(char *)"firmware hang detected\n");
  #line 3746 
  peg_status = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl));
  #line 3747 
  ;
  #line 3747 
  ;
  #line 3747 
  _dev_err(& (adapter->pdev)->dev,(char *)"Dumping hw/fw registers\n",peg_status,readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 1U)),(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,118489148UL,& err),(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,119537724UL,& err),(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,120586300UL,& err),(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,121634876UL,& err),(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,116391996UL,& err));
  #line 3759 
  if (((peg_status >> 8) & 2097151U) == 103U) 
                                              #line 3760 
                                              _dev_err(& (adapter->pdev)->dev,(char *)"Firmware aborted with error code 0x00006700. ");
  #line 3763 
  detach: 
          #line 3763 
  ;
  #line 3764 
  if (state == 5U) 
                   #line 3764 
                   adapter->dev_state = (unsigned char)5U; else 
                                                                #line 3764 
                                                                adapter->dev_state = (unsigned char)4U;
  #line 3767 
  if (qlcnic_auto_fw_reset != 0) {
    #line 3767 
    if (test_and_set_bit(2L,& adapter->state)) 
                                               #line 3767 
                                               goto _LAND;
    else {
      #line 3770 
      qlcnic_schedule_work(adapter,& qlcnic_detach_work,0);
      #line 3771 
      if (((adapter->ahw)->msg_enable & 1U) != 0U) {
        #line 3771 
        printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_check_health");
      }
    }
  }
  else 
    #line 3767 
    _LAND: 
           #line 3772 
           if ((qlcnic_auto_fw_reset == 0 && (int)fw_dump->enable != 0) && (adapter->flags & 8192U) != 0U) 
             #line 3774 
             qlcnic_dump_fw(adapter);
  #line 3777 
  return 1;
}

#line 3780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_fw_poll_work(struct work_struct *work)
{
  #line 3782 
  void *__mptr;
  #line 3782 
  __mptr = (void *)work;
  #line 3782 
  struct qlcnic_adapter *adapter = ((struct qlcnic_adapter *)(__mptr + 18446744073709550704U));
  #line 3785 
  if ((int)test_bit(2L,& adapter->state) != 0) 
                                               #line 3786 
                                               goto reschedule;
  #line 3789 
  if (qlcnic_check_health(adapter) != 0) 
                                         #line 3790 
                                         return;
  #line 3792 
  if ((unsigned int)adapter->fhash.fnum != 0U) 
                                               #line 3793 
                                               qlcnic_prune_lb_filters(adapter);
  #line 3795 
  reschedule: 
              #line 3795 
  ;
  #line 3796 
  qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250);
  #line 3797 
  return;
}

#line 3799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_is_first_func(struct pci_dev *pdev)
{
  #line 3801 
  struct pci_dev *oth_pdev;
  #line 3802 
  int val = (int)pdev->devfn;
  #line 3804 
  while (1) {
    #line 3804 
    int tmp_0;
    #line 3804 
    tmp_0 = val;
    #line 3804 
    val --;
    #line 3804 
    ;
    #line 3804 
    if (! (tmp_0 > 0)) 
                       #line 3804 
                       break;
    {
      #line 3805 
      ;
      #line 3805 
      ;
      #line 3805 
      oth_pdev = pci_get_domain_bus_and_slot(pci_domain_nr(pdev->bus),(unsigned int)(pdev->bus)->number,(pdev->devfn & 248U) | ((unsigned int)val & 7U));
      #line 3808 
      if (oth_pdev == (struct pci_dev *)0) 
                                           #line 3809 
                                           continue;
      #line 3811 
      if (oth_pdev->current_state != 4) {
        #line 3812 
        pci_dev_put(oth_pdev);
        #line 3813 
        return 0;
      }
      #line 3815 
      pci_dev_put(oth_pdev);
    }
  }
  #line 3817 
  return 1;
}

#line 3820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_attach_func(struct pci_dev *pdev)
{
  #line 3822 
  int err;
  #line 3822 
  int first_func;
  #line 3823 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 3824 
  struct net_device *netdev = adapter->netdev;
  #line 3826 
  pdev->error_state = 1U;
  #line 3828 
  err = pci_enable_device(pdev);
  #line 3829 
  if (err != 0) 
                #line 3830 
                return err;
  #line 3832 
  pci_set_master(pdev);
  #line 3833 
  pci_restore_state(pdev);
  #line 3835 
  first_func = qlcnic_is_first_func(pdev);
  #line 3837 
  if (qlcnic_api_lock(adapter) != 0) 
                                     #line 3838 
                                     return -22;
  #line 3840 
  if ((unsigned int)(adapter->ahw)->op_mode != 2U && first_func != 0) {
    #line 3841 
    adapter->need_fw_reset = (unsigned char)1U;
    #line 3842 
    cif_set_bit_6(4L,& adapter->state);
    #line 3843 
    writel(2U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
    #line 3845 
    if (((adapter->ahw)->msg_enable & 1U) != 0U) {
      #line 3845 
      printk((char *)"\001",dev_name(& (adapter->pdev)->dev),(char *)"qlcnic_attach_func");
    }
  }
  #line 3847 
  qlcnic_api_unlock(adapter);
  #line 3849 
  err = qlcnic_start_firmware_0(adapter);
  #line 3850 
  if (err != 0) 
                #line 3851 
                return err;
  #line 3853 
  qlcnic_clr_drv_state(adapter);
  #line 3854 
  kfree((void *)adapter->msix_entries);
  #line 3855 
  adapter->msix_entries = (struct msix_entry *)0;
  #line 3856 
  err = qlcnic_setup_intr(adapter);
  #line 3858 
  if (err != 0) {
    #line 3859 
    kfree((void *)adapter->msix_entries);
    #line 3860 
    netdev_err(netdev,(char *)"failed to setup interrupt\n");
    #line 3861 
    return err;
  }
  #line 3864 
  if ((int)netif_running(netdev) != 0) {
    #line 3865 
    err = qlcnic_attach(adapter);
    #line 3866 
    if (err != 0) {
      #line 3867 
      qlcnic_clr_all_drv_state(adapter,(unsigned char)1);
      #line 3868 
      cif_clear_bit_6(5L,& adapter->state);
      #line 3869 
      netif_device_attach(netdev);
      #line 3870 
      return err;
    }
    #line 3873 
    err = qlcnic_up(adapter,netdev);
    #line 3874 
    if (err != 0) 
                  #line 3875 
                  goto done;
    #line 3877 
    qlcnic_restore_indev_addr(netdev,1UL);
  }
  #line 3879 
  done: 
        #line 3879 
  ;
  #line 3880 
  netif_device_attach(netdev);
  #line 3881 
  return err;
}

#line 3884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static pci_ers_result_t qlcnic_82xx_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 3887 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 3888 
  struct net_device *netdev = adapter->netdev;
  #line 3890 
  if (state == 3U) 
                   #line 3891 
                   return 4U;
  #line 3893 
  if (state == 1U) 
                   #line 3894 
                   return 5U;
  #line 3896 
  cif_set_bit_6(5L,& adapter->state);
  #line 3897 
  netif_device_detach(netdev);
  #line 3899 
  cancel_delayed_work_sync(& adapter->fw_work);
  #line 3901 
  if ((int)netif_running(netdev) != 0) 
                                       #line 3902 
                                       qlcnic_down(adapter,netdev);
  #line 3904 
  qlcnic_detach(adapter);
  #line 3905 
  qlcnic_teardown_intr(adapter);
  #line 3907 
  cif_clear_bit_6(2L,& adapter->state);
  #line 3909 
  pci_save_state(pdev);
  #line 3910 
  pci_disable_device(pdev);
  #line 3912 
  return 3U;
}

#line 3915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static pci_ers_result_t qlcnic_82xx_io_slot_reset(struct pci_dev *pdev)
{
  #line 3917 
  pci_ers_result_t res;
  #line 3919 
  rtnl_lock();
  #line 3920 
  if (qlcnic_attach_func(pdev) != 0) 
                                     #line 3920 
                                     res = 4U; else 
                                                    #line 3920 
                                                    res = 5U;
  #line 3922 
  rtnl_unlock();
  #line 3924 
  return res;
}

#line 3927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_82xx_io_resume(struct pci_dev *pdev)
{
  #line 3929 
  u32 state;
  #line 3930 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 3932 
  state = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 6U));
  #line 3933 
  if (state == 3U) {
    #line 3933 
    if ((int)test_and_set_bit(5L,& adapter->state) != 0) 
                                                         #line 3935 
                                                         qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250);
  }
  #line 3936 
  return;
}

#line 3939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static pci_ers_result_t qlcnic_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 3942 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 3943 
  struct qlcnic_hardware_ops *hw_ops = (adapter->ahw)->hw_ops;
  #line 3945 
  if (hw_ops->io_error_detected != (pci_ers_result_t (*)(struct pci_dev *, pci_channel_state_t ))0) {
    #line 3946 
    return (*(hw_ops->io_error_detected))(pdev,state);
  }
  else {
    #line 3948 
    _dev_err(& pdev->dev,(char *)"AER error_detected handler not registered.\n");
    #line 3949 
    return 4U;
  }
}

#line 3953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static pci_ers_result_t qlcnic_io_slot_reset(struct pci_dev *pdev)
{
  #line 3955 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 3956 
  struct qlcnic_hardware_ops *hw_ops = (adapter->ahw)->hw_ops;
  #line 3958 
  if (hw_ops->io_slot_reset != (pci_ers_result_t (*)(struct pci_dev *))0) {
    #line 3959 
    return (*(hw_ops->io_slot_reset))(pdev);
  }
  else {
    #line 3961 
    _dev_err(& pdev->dev,(char *)"AER slot_reset handler not registered.\n");
    #line 3962 
    return 4U;
  }
}

#line 3966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_io_resume(struct pci_dev *pdev)
{
  #line 3968 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  #line 3969 
  struct qlcnic_hardware_ops *hw_ops = (adapter->ahw)->hw_ops;
  #line 3971 
  if (hw_ops->io_resume != (void (*)(struct pci_dev *))0) 
                                                          #line 3972 
                                                          (*(hw_ops->io_resume))(pdev); else 
                                                                    #line 3974 
                                                                    _dev_err(& pdev->dev,(char *)"AER resume handler not registered.\n");
  #line 3975 
  return;
}

#line 3979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnicvf_start_firmware(struct qlcnic_adapter *adapter)
{
  #line 3981 
  int err;
  #line 3983 
  err = qlcnic_can_start_firmware(adapter);
  #line 3984 
  if (err != 0) 
                #line 3985 
                return err;
  #line 3987 
  err = qlcnic_check_npar_opertional(adapter);
  #line 3988 
  if (err != 0) 
                #line 3989 
                return err;
  #line 3991 
  err = qlcnic_initialize_nic(adapter);
  #line 3992 
  if (err != 0) 
                #line 3993 
                return err;
  #line 3995 
  qlcnic_check_options(adapter);
  #line 3997 
  err = qlcnic_set_eswitch_port_config(adapter);
  #line 3998 
  if (err != 0) 
                #line 3999 
                return err;
  #line 4001 
  adapter->need_fw_reset = (unsigned char)0U;
  #line 4003 
  return err;
}

#line 4006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_validate_rings(struct qlcnic_adapter *adapter, __u32 ring_cnt, int queue_type)
{
  #line 4010 
  char buf[8U];
  #line 4009 
  struct net_device *netdev = adapter->netdev;
  #line 4012 
  if (queue_type == 2) 
                       #line 4013 
                       strcpy((char *)(& buf),(char *)"SDS"); else 
                                                                   #line 4015 
                                                                   strcpy((char *)(& buf),(char *)"Tx");
  #line 4017 
  if (! is_power_of_2((unsigned long)ring_cnt)) {
    #line 4018 
    netdev_err(netdev,(char *)"%s rings value should be a power of 2\n",(char *)(& buf));
    #line 4020 
    return -22;
  }
  #line 4023 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
    #line 4023 
    if (queue_type == 1) {
      #line 4024 
      if (! qlcnic_check_multi_tx(adapter)) {
        #line 4025 
        netdev_err(netdev,(char *)"No Multi Tx queue support\n");
        #line 4026 
        return -22;
      }
    }
  #line 4029 
  ;
  #line 4029 
  if (num_online_cpus() < ring_cnt) {
    #line 4030 
    ;
    #line 4030 
    netdev_err(netdev,(char *)"%s value[%u] should not be higher than, number of online CPUs\n",(char *)(& buf),num_online_cpus());
    #line 4033 
    return -22;
  }
  #line 4036 
  return 0;
}

#line 4039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_setup_rings(struct qlcnic_adapter *adapter)
{
  #line 4042 
  u8 tx_rings;
  #line 4042 
  u8 rx_rings;
  #line 4043 
  int err;
  #line 4041 
  struct net_device *netdev = adapter->netdev;
  #line 4045 
  if ((int)test_bit(2L,& adapter->state) != 0) 
                                               #line 4046 
                                               return -16;
  #line 4048 
  tx_rings = adapter->drv_tss_rings;
  #line 4049 
  rx_rings = adapter->drv_rss_rings;
  #line 4051 
  netif_device_detach(netdev);
  #line 4053 
  err = qlcnic_set_real_num_queues(adapter,(unsigned char)((int)tx_rings),(unsigned char)((int)rx_rings));
  #line 4054 
  if (err != 0) 
                #line 4055 
                goto done;
  #line 4057 
  if ((int)netif_running(netdev) != 0) 
                                       #line 4058 
                                       __qlcnic_down(adapter,netdev);
  #line 4060 
  qlcnic_detach(adapter);
  #line 4062 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 4063 
    qlcnic_83xx_free_mbx_intr(adapter);
    #line 4064 
    qlcnic_83xx_enable_mbx_poll(adapter);
  }
  #line 4067 
  qlcnic_teardown_intr(adapter);
  #line 4069 
  err = qlcnic_setup_intr(adapter);
  #line 4070 
  if (err != 0) {
    #line 4071 
    kfree((void *)adapter->msix_entries);
    #line 4072 
    netdev_err(netdev,(char *)"failed to setup interrupt\n");
    #line 4073 
    return err;
  }
  #line 4079 
  if ((int)adapter->drv_tx_rings != (int)tx_rings || (int)adapter->drv_sds_rings != (int)rx_rings) {
    #line 4081 
    err = qlcnic_set_real_num_queues(adapter,(unsigned char)((int)adapter->drv_tx_rings),(unsigned char)((int)adapter->drv_sds_rings));
    #line 4084 
    if (err != 0) 
                  #line 4085 
                  goto done;
  }
  #line 4088 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 4089 
    qlcnic_83xx_initialize_nic(adapter,1);
    #line 4090 
    err = qlcnic_83xx_setup_mbx_intr(adapter);
    #line 4091 
    qlcnic_83xx_disable_mbx_poll(adapter);
    #line 4092 
    if (err != 0) {
      #line 4093 
      _dev_err(& (adapter->pdev)->dev,(char *)"failed to setup mbx interrupt\n");
      #line 4095 
      goto done;
    }
  }
  #line 4099 
  if ((int)netif_running(netdev) != 0) {
    #line 4100 
    err = qlcnic_attach(adapter);
    #line 4101 
    if (err != 0) 
                  #line 4102 
                  goto done;
    #line 4103 
    err = __qlcnic_up(adapter,netdev);
    #line 4104 
    if (err != 0) 
                  #line 4105 
                  goto done;
    #line 4106 
    qlcnic_restore_indev_addr(netdev,1UL);
  }
  #line 4108 
  done: 
        #line 4108 
  ;
  #line 4109 
  netif_device_attach(netdev);
  #line 4110 
  cif_clear_bit_6(2L,& adapter->state);
  #line 4111 
  return err;
}

#line 4119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_config_indev_addr(struct qlcnic_adapter *adapter, struct net_device *dev, unsigned long event)
{
  #line 4122 
  struct in_ifaddr *ifa;
  #line 4123 
  struct in_device *indev;
  #line 4125 
  indev = in_dev_get(dev);
  #line 4126 
  if (indev == (struct in_device *)0) 
                                      #line 4127 
                                      return;
  {
    #line 4129 
    bool __warned;
    #line 4129 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 4129 
      if (! __warned) {
        #line 4129 
        if (! lockdep_rtnl_is_held()) {
          #line 4129 
          __warned = (_Bool)1;
          #line 4129 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c",4129,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 4129 
  ifa = indev->ifa_list;
  #line 4129 
  while (ifa != (struct in_ifaddr *)0) {
    #line 4130 
    switch (event) {
      #line 4131 
      case (unsigned long)1: 
                             #line 4131 
      ;
      #line 4132 
      qlcnic_config_ipaddr(adapter,ifa->ifa_address,2);
      #line 4134 
      break;
      #line 4135 
      case (unsigned long)2: 
                             #line 4135 
      ;
      #line 4136 
      qlcnic_config_ipaddr(adapter,ifa->ifa_address,3);
      #line 4138 
      break;
      #line 4139 
      default: 
               #line 4139 
      ;
      #line 4140 
      break;
    }
    {
      #line 4129 
      bool __warned_0;
      #line 4129 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 4129 
        if (! __warned_0) {
          #line 4129 
          if (! lockdep_rtnl_is_held()) {
            #line 4129 
            __warned_0 = (_Bool)1;
            #line 4129 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c",4129,(char *)"suspicious rcu_dereference_protected() usage");
          }
        }
    }
    #line 4129 
    ifa = ifa->ifa_next;
  }
  #line 4144 
  in_dev_put(indev);
  #line 4145 
  return;
}

#line 4147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_restore_indev_addr(struct net_device *netdev, unsigned long event)
{
  #line 4150 
  struct net_device *dev;
  #line 4151 
  u16 vid;
  #line 4149 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 4153 
  qlcnic_config_indev_addr(adapter,netdev,event);
  #line 4155 
  rcu_read_lock();
  #line 4156 
  vid = (unsigned short)cif_find_first_bit((unsigned long *)(& adapter->vlans),4096UL);
  #line 4156 
  while ((unsigned int)vid <= 4095U) {
    #line 4157 
    dev = __vlan_find_dev_deep_rcu(netdev,(unsigned short)129,(unsigned short)((int)vid));
    #line 4158 
    if (dev == (struct net_device *)0) 
                                       #line 4159 
                                       goto __Cont;
    #line 4160 
    qlcnic_config_indev_addr(adapter,dev,event);
    #line 4156 
    __Cont: { /* sequence */
              #line 4156 
              vid = (unsigned short)cif_find_next_bit((unsigned long *)(& adapter->vlans),4096UL,
                          (unsigned long)((int)vid + 1));
            }
  }
  #line 4162 
  rcu_read_unlock();
  #line 4163 
  return;
}

#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
{
  #line 4168 
  struct qlcnic_adapter *adapter;
  #line 4169 
  struct net_device *dev = netdev_notifier_info_to_dev((struct netdev_notifier_info *)ptr);
  #line 4171 
  recheck: 
           #line 4171 
  ;
  #line 4172 
  if (dev == (struct net_device *)0) 
                                     #line 4173 
                                     goto done;
  #line 4175 
  if ((int)is_vlan_dev(dev) != 0) {
    #line 4176 
    dev = vlan_dev_real_dev(dev);
    #line 4177 
    goto recheck;
  }
  #line 4180 
  if (dev->netdev_ops != & qlcnic_netdev_ops) 
                                              #line 4181 
                                              goto done;
  #line 4183 
  adapter = (struct qlcnic_adapter *)netdev_priv(dev);
  #line 4185 
  if (adapter == (struct qlcnic_adapter *)0) 
                                             #line 4186 
                                             goto done;
  #line 4188 
  if (! test_bit(1L,& adapter->state)) 
                                       #line 4189 
                                       goto done;
  #line 4191 
  qlcnic_config_indev_addr(adapter,dev,event);
  #line 4192 
  done: 
        #line 4192 
  ;
  #line 4193 
  return 0;
}

#line 4197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_inetaddr_event(struct notifier_block *this, unsigned long event, void *ptr)
{
  #line 4200 
  struct qlcnic_adapter *adapter;
  #line 4201 
  struct net_device *dev;
  #line 4203 
  struct in_ifaddr *ifa = (struct in_ifaddr *)ptr;
  #line 4205 
  if (ifa->ifa_dev != (struct in_device *)0) 
                                             #line 4205 
                                             dev = (ifa->ifa_dev)->dev; else 
                                                                    #line 4205 
                                                                    dev = (struct net_device *)0;
  #line 4207 
  recheck: 
           #line 4207 
  ;
  #line 4208 
  if (dev == (struct net_device *)0) 
                                     #line 4209 
                                     goto done;
  #line 4211 
  if ((int)is_vlan_dev(dev) != 0) {
    #line 4212 
    dev = vlan_dev_real_dev(dev);
    #line 4213 
    goto recheck;
  }
  #line 4216 
  if (dev->netdev_ops != & qlcnic_netdev_ops) 
                                              #line 4217 
                                              goto done;
  #line 4219 
  adapter = (struct qlcnic_adapter *)netdev_priv(dev);
  #line 4221 
  if (adapter == (struct qlcnic_adapter *)0) 
                                             #line 4222 
                                             goto done;
  #line 4224 
  if (! test_bit(1L,& adapter->state)) 
                                       #line 4225 
                                       goto done;
  #line 4227 
  switch (event) {
    #line 4228 
    case (unsigned long)1: 
                           #line 4228 
    ;
    #line 4229 
    qlcnic_config_ipaddr(adapter,ifa->ifa_address,2);
    #line 4231 
    break;
    #line 4232 
    case (unsigned long)2: 
                           #line 4232 
    ;
    #line 4233 
    qlcnic_config_ipaddr(adapter,ifa->ifa_address,3);
    #line 4235 
    break;
    #line 4236 
    default: 
             #line 4236 
    ;
    #line 4237 
    break;
  }
  #line 4240 
  done: 
        #line 4240 
  ;
  #line 4241 
  return 0;
}

#line 4244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct notifier_block qlcnic_netdev_cb = {.notifier_call = & qlcnic_netdev_event};
#line 4248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct notifier_block qlcnic_inetaddr_cb = {.notifier_call = & qlcnic_inetaddr_event};
#line 4255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct pci_error_handlers qlcnic_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& qlcnic_io_error_detected), .slot_reset = & qlcnic_io_slot_reset, .resume = & qlcnic_io_resume};
#line 4261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct pci_driver qlcnic_driver = {.name = (char *)(& qlcnic_driver_name), .id_table = (struct pci_device_id *)(& qlcnic_pci_tbl), .probe = & qlcnic_probe, .remove = & qlcnic_remove, .suspend = & qlcnic_suspend, .resume = & qlcnic_resume, .shutdown = & qlcnic_shutdown, .sriov_configure = & qlcnic_pci_sriov_configure, .err_handler = & qlcnic_err_handler};
#line 4278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_init_module(void)
{
  #line 4280 
  int ret;
  #line 4282 
  printk((char *)"\001",(char *)(& qlcnic_driver_string));
  #line 4285 
  register_netdevice_notifier(& qlcnic_netdev_cb);
  #line 4286 
  register_inetaddr_notifier(& qlcnic_inetaddr_cb);
  #line 4289 
  ret = cif___pci_register_driver(& qlcnic_driver,& __this_module,(char *)"qlcnic");
  #line 4290 
  if (ret != 0) {
    #line 4292 
    unregister_inetaddr_notifier(& qlcnic_inetaddr_cb);
    #line 4293 
    unregister_netdevice_notifier(& qlcnic_netdev_cb);
  }
  #line 4297 
  return ret;
}

#line 4302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_exit_module(void)
{
  #line 4304 
  cif_pci_unregister_driver(& qlcnic_driver);
  #line 4307 
  unregister_inetaddr_notifier(& qlcnic_inetaddr_cb);
  #line 4308 
  unregister_netdevice_notifier(& qlcnic_netdev_cb);
  #line 4309 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
struct pci_driver *emg_alias_qlcnic_driver = & qlcnic_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
struct pci_device_id (*emg_alias_qlcnic_pci_tbl)[8U] = & qlcnic_pci_tbl;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 103 
#line 103 
void emg_free_netdev(struct net_device *arg0);
#line 104 
#line 104 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 107 
#line 107 
int emg_register_netdev(struct net_device *arg0);
#line 109 
#line 109 
void emg_unregister_netdev(struct net_device *arg0);
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
void emg_wrapper_qlcnic_add_vxlan_port(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 114 
  qlcnic_add_vxlan_port(arg0,arg1);
  #line 115 
  return;
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_close(struct net_device *arg0)
{
  #line 119 
  return qlcnic_close(arg0);
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
void emg_wrapper_qlcnic_del_vxlan_port(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 124 
  qlcnic_del_vxlan_port(arg0,arg1);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_fdb_add(struct ndmsg *arg0, struct nlattr **arg1, struct net_device *arg2, unsigned char *arg3, unsigned short arg4, unsigned short arg5, struct netlink_ext_ack *arg6)
{
  #line 129 
  return qlcnic_fdb_add(arg0,arg1,arg2,arg3,(unsigned short)((int)arg4),
                     (unsigned short)((int)arg5),arg6);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_fdb_del(struct ndmsg *arg0, struct nlattr **arg1, struct net_device *arg2, unsigned char *arg3, unsigned short arg4)
{
  #line 134 
  return qlcnic_fdb_del(arg0,arg1,arg2,arg3,(unsigned short)((int)arg4));
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_fdb_dump(struct sk_buff *arg0, struct netlink_callback *arg1, struct net_device *arg2, struct net_device *arg3, int *arg4)
{
  #line 139 
  return qlcnic_fdb_dump(arg0,arg1,arg2,arg3,arg4);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
unsigned long long emg_wrapper_qlcnic_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 144 
  return qlcnic_features_check(arg0,arg1,arg2);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_get_phys_port_id(struct net_device *arg0, struct netdev_phys_item_id *arg1)
{
  #line 149 
  return qlcnic_get_phys_port_id(arg0,arg1);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
struct net_device_stats *emg_wrapper_qlcnic_get_stats(struct net_device *arg0)
{
  #line 154 
  return qlcnic_get_stats(arg0);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_open(struct net_device *arg0)
{
  #line 159 
  return qlcnic_open(arg0);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 164 
  return qlcnic_probe(arg0,arg1);
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
void emg_wrapper_qlcnic_remove(struct pci_dev *arg0)
{
  #line 169 
  qlcnic_remove(arg0);
  #line 170 
  return;
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_resume(struct pci_dev *arg0)
{
  #line 174 
  return qlcnic_resume(arg0);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_set_mac(struct net_device *arg0, void *arg1)
{
  #line 179 
  return qlcnic_set_mac(arg0,arg1);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
void emg_wrapper_qlcnic_shutdown(struct pci_dev *arg0)
{
  #line 184 
  qlcnic_shutdown(arg0);
  #line 185 
  return;
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 189 
  return qlcnic_suspend(arg0,arg1);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
void emg_wrapper_qlcnic_tx_timeout(struct net_device *arg0)
{
  #line 194 
  qlcnic_tx_timeout(arg0);
  #line 195 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_vlan_rx_add(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 199 
  return qlcnic_vlan_rx_add(arg0,(unsigned short)((int)arg1),
                         (unsigned short)((int)arg2));
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_wrapper_qlcnic_vlan_rx_del(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 204 
  return qlcnic_vlan_rx_del(arg0,(unsigned short)((int)arg1),
                         (unsigned short)((int)arg2));
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
void emg_qlcnic_exit_module(void)
{
  #line 209 
  qlcnic_exit_module();
  #line 210 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
int emg_qlcnic_init_module(void)
{
  #line 213 
  return qlcnic_init_module();
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 227 
  return ldv_find_next_bit(addr,size,offset);
}

#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_set_bit_6(long nr, unsigned long *addr)
{
  #line 234 
  ldv_set_bit(nr,addr);
  #line 235 
  return;
}

#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_clear_bit_6(long nr, unsigned long *addr)
{
  #line 241 
  ldv_clear_bit(nr,addr);
  #line 242 
  return;
}

#line 245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void INIT_LIST_HEAD_5(struct list_head *list)
{
  #line 248 
  ldv_init_list_head(list);
  #line 249 
  return;
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 269 
  return ldv_find_first_bit(addr,size);
}

#line 423  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static bool cif_queue_delayed_work_1(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 427 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 592  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void *kcalloc_3(size_t n, size_t size, gfp_t flags)
{
  #line 595 
  return ldv_kcalloc(n,size,flags);
}

#line 613  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void *kzalloc_6(size_t size, gfp_t flags)
{
  #line 616 
  return ldv_kzalloc(size,flags);
}

#line 665  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 668 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 670 
  spin_lock_1(lock);
  #line 671 
  return;
}

#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 708 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 710 
  spin_unlock_1(lock);
  #line 711 
  return;
}

#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void *cif_vzalloc_3(unsigned long size)
{
  #line 928 
  return ldv_vzalloc(size);
}

#line 932  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_vfree_2(void *addr)
{
  #line 935 
  ldv_vfree(addr);
  #line 936 
  return;
}

#line 939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 943 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 947  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 951 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 959 
  return emg_register_netdev(dev);
}

#line 963  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 967 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 975 
  emg_free_netdev(dev);
  #line 976 
  return;
}

#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 983 
  emg_unregister_netdev(dev);
  #line 984 
  return;
}

#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 991 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 999 
  emg_pci_unregister_driver(dev);
  #line 1000 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ctx.i.aux"
static void cif_set_bit_7(long nr, unsigned long *addr);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 473  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ctx.i.aux"
static void *kcalloc_4(size_t n, size_t size, gfp_t flags);
#line 1189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1189 
int pci_reset_function(struct pci_dev *);
#line 1543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_fw_cmd_set_port(struct qlcnic_adapter *adapter, u32 config);
#line 1666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_get_mac_stats(struct qlcnic_adapter *adapter, struct qlcnic_mac_statistics *mac_stats);
#line 1948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_fw_cmd_create_rx_ctx(struct qlcnic_adapter *adapter)
{
  #line 1950 
  return (*(((adapter->ahw)->hw_ops)->create_rx_ctx))(adapter);
}

#line 1953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_fw_cmd_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *ptr, int ring)
{
  #line 1957 
  return (*(((adapter->ahw)->hw_ops)->create_tx_ctx))(adapter,ptr,ring);
}

#line 1960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_fw_cmd_del_rx_ctx(struct qlcnic_adapter *adapter)
{
  #line 1962 
  (*(((adapter->ahw)->hw_ops)->del_rx_ctx))(adapter);
  #line 1963 
  return;
}

#line 1965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_fw_cmd_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *ptr)
{
  #line 1968 
  (*(((adapter->ahw)->hw_ops)->del_tx_ctx))(adapter,ptr);
  #line 1969 
  return;
}

#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
static struct qlcnic_mailbox_metadata qlcnic_mbx_tbl[33U] = {{.cmd = 7U, .in_args = 4U, .out_args = 1U}, {.cmd = 8U, .in_args = 2U, .out_args = 1U}, {.cmd = 9U, .in_args = 4U, .out_args = 1U}, {.cmd = 10U, .in_args = 3U, .out_args = 1U}, {.cmd = 17U, .in_args = 4U, .out_args = 1U}, {.cmd = 18U, .in_args = 4U, .out_args = 1U}, {.cmd = 19U, .in_args = 4U, .out_args = 2U}, {.cmd = 20U, .in_args = 5U, .out_args = 1U}, {.cmd = 21U, .in_args = 4U, .out_args = 1U}, {.cmd = 22U, .in_args = 4U, .out_args = 2U}, {.cmd = 23U, .in_args = 4U, .out_args = 1U}, {.cmd = 24U, .in_args = 4U, .out_args = 2U}, {.cmd = 25U, .in_args = 4U, .out_args = 2U}, {.cmd = 31U, .in_args = 4U, .out_args = 3U}, {.cmd = 32U, .in_args = 4U, .out_args = 1U}, {.cmd = 33U, .in_args = 4U, .out_args = 1U}, {.cmd = 34U, .in_args = 4U, .out_args = 1U}, {.cmd = 36U, .in_args = 4U, .out_args = 3U}, {.cmd = 37U, .in_args = 4U, .out_args = 1U}, {.cmd = 38U, .in_args = 4U, .out_args = 3U}, {.cmd = 39U, .in_args = 4U, .out_args = 1U}, {.cmd = 40U, .in_args = 4U, .out_args = 1U}, {.cmd = 55U, .in_args = 4U, .out_args = 1U}, {.cmd = 41U, .in_args = 4U, .out_args = 3U}, {.cmd = 42U, .in_args = 4U, .out_args = 1U}, {.cmd = 46U, .in_args = 4U, .out_args = 1U}, {.cmd = 47U, .in_args = 4U, .out_args = 4U}, {.cmd = 48U, .in_args = 4U, .out_args = 1U}, {.cmd = 56U, .in_args = 4U, .out_args = 1U}, {.cmd = 60U, .in_args = 4U, .out_args = 2U}, {.cmd = 57U, .in_args = 2U, .out_args = 3U}, {.cmd = 52U, .in_args = 1U, .out_args = 2U}, {.cmd = 53U, .in_args = 4U, .out_args = 1U}};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
__inline static u32 qlcnic_get_cmd_signature(struct qlcnic_hardware_context *ahw)
{
  #line 48 
  return ((unsigned int)ahw->pci_func | ((ahw->fw_hal_version << 8) & 65535U)) | 3405643776U;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 type)
{
  #line 56 
  int i;
  #line 56 
  int size;
  #line 57 
  struct qlcnic_mailbox_metadata *mbx_tbl;
  #line 59 
  mbx_tbl = (struct qlcnic_mailbox_metadata *)(& qlcnic_mbx_tbl);
  #line 60 
  size = 33;
  #line 61 
  i = 0;
  #line 61 
  while (i < size) {
    #line 62 
    if ((mbx_tbl + (unsigned long)i)->cmd == type) {
      #line 63 
      mbx->req.num = (mbx_tbl + (unsigned long)i)->in_args;
      #line 64 
      mbx->rsp.num = (mbx_tbl + (unsigned long)i)->out_args;
      #line 65 
      mbx->req.arg = (u32 *)kcalloc_4((unsigned long)mbx->req.num,4UL,2592U);
      #line 67 
      if (mbx->req.arg == (u32 *)0U) 
                                     #line 68 
                                     return -12;
      #line 69 
      mbx->rsp.arg = (u32 *)kcalloc_4((unsigned long)mbx->rsp.num,4UL,2592U);
      #line 71 
      if (mbx->rsp.arg == (u32 *)0U) {
        #line 72 
        kfree((void *)mbx->req.arg);
        #line 73 
        mbx->req.arg = (u32 *)0U;
        #line 74 
        return -12;
      }
      #line 76 
      *(mbx->req.arg) = type;
      #line 77 
      break;
    }
    #line 61 
    i ++;
  }
  #line 80 
  return 0;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_free_mbx_args(struct qlcnic_cmd_args *cmd)
{
  #line 86 
  kfree((void *)cmd->req.arg);
  #line 87 
  cmd->req.arg = (u32 *)0U;
  #line 88 
  kfree((void *)cmd->rsp.arg);
  #line 89 
  cmd->rsp.arg = (u32 *)0U;
  #line 90 
  return;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
static u32 qlcnic_poll_rsp(struct qlcnic_adapter *adapter)
{
  #line 95 
  u32 rsp;
  #line 96 
  int timeout = 0;
  #line 96 
  int err = 0;
  #line 98 
  while (1) {
    {
      #line 100 
      __const_udelay(4295000UL);
      #line 102 
      timeout ++;
      #line 102 
      if (timeout > 4000) 
                          #line 103 
                          return 3U;
      #line 105 
      rsp = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323608UL,& err);
    }
    #line 106 
    if (! ((rsp & 2147483648U) != 0U)) 
                                       #line 98 
                                       break;
  }
  #line 108 
  return rsp;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  #line 114 
  int i;
  #line 115 
  u32 rsp;
  #line 116 
  u32 signature;
  #line 119 
  char *fmt;
  #line 114 
  int err = 0;
  #line 117 
  struct pci_dev *pdev = adapter->pdev;
  #line 118 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 121 
  signature = qlcnic_get_cmd_signature(ahw);
  #line 124 
  if (qlcnic_api_lock(adapter) != 0) {
    #line 125 
    *(cmd->rsp.arg) = 17U;
    #line 126 
    return (int)*(cmd->rsp.arg);
  }
  #line 129 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,136323624UL,signature);
  #line 130 
  i = 1;
  #line 130 
  while (cmd->req.num > (unsigned int)i) {
    #line 131 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)((i + 6) * 4) + 136323584UL,*(cmd->req.arg + (unsigned long)i));
    #line 130 
    i ++;
  }
  #line 132 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,136323608UL,*(cmd->req.arg) | 2147483648U);
  #line 134 
  rsp = qlcnic_poll_rsp(adapter);
  #line 136 
  if (rsp == 3U) {
    #line 137 
    _dev_err(& pdev->dev,(char *)"command timeout, response = 0x%x\n",rsp);
    #line 138 
    *(cmd->rsp.arg) = 17U;
  }
  else 
    #line 139 
    if (rsp == 2U) {
      #line 140 
      *(cmd->rsp.arg) = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323612UL,& err);
      #line 141 
      switch (*(cmd->rsp.arg)) {
        #line 142 
        case (u32)6: 
                     #line 142 
        ;
        #line 143 
        fmt = (char *)"CDRP invalid args: [%d]\n";
        #line 144 
        break;
        #line 145 
        case (u32)9: 
                     #line 145 
        ;
        #line 146 
        case (u32)15: 
                      #line 146 
        ;
        #line 147 
        fmt = (char *)"CDRP command not supported: [%d]\n";
        #line 148 
        break;
        #line 149 
        case (u32)10: 
                      #line 149 
        ;
        #line 150 
        fmt = (char *)"CDRP requested action not permitted: [%d]\n";
        #line 151 
        break;
        #line 152 
        case (u32)16: 
                      #line 152 
        ;
        #line 153 
        fmt = (char *)"CDRP invalid or unknown cmd received: [%d]\n";
        #line 154 
        break;
        #line 155 
        case (u32)17: 
                      #line 155 
        ;
        #line 156 
        fmt = (char *)"CDRP command timeout: [%d]\n";
        #line 157 
        break;
        #line 158 
        default: 
                 #line 158 
        ;
        #line 159 
        fmt = (char *)"CDRP command failed: [%d]\n";
        #line 160 
        break;
      }
      #line 162 
      _dev_err(& pdev->dev,fmt,*(cmd->rsp.arg));
      #line 163 
      qlcnic_dump_mbx(adapter,cmd);
    }
    else 
      #line 164 
      if (rsp == 1U) 
                     #line 165 
                     *(cmd->rsp.arg) = 0U;
  #line 167 
  i = 1;
  #line 167 
  while (cmd->rsp.num > (unsigned int)i) {
    #line 168 
    *(cmd->rsp.arg + (unsigned long)i) = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,
                                                (unsigned long)((i + 6) * 4) + 136323584UL,
                                                & err);
    #line 167 
    i ++;
  }
  #line 171 
  qlcnic_api_unlock(adapter);
  #line 172 
  return (int)*(cmd->rsp.arg);
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_fw_cmd_set_drv_version(struct qlcnic_adapter *adapter, u32 fw_cmd)
{
  #line 177 
  struct qlcnic_cmd_args cmd;
  #line 178 
  u32 arg1;
  #line 178 
  u32 arg2;
  #line 178 
  u32 arg3;
  #line 179 
  char drv_string[12U];
  #line 180 
  int err = 0;
  #line 182 
  memset((void *)(& drv_string),0,12UL);
  #line 183 
  snprintf((char *)(& drv_string),12UL,(char *)"%d",5,3,66);
  #line 187 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,fw_cmd);
  #line 188 
  if (err != 0) 
                #line 189 
                return err;
  #line 191 
  memcpy((void *)(& arg1),(void *)(& drv_string),4UL);
  #line 192 
  memcpy((void *)(& arg2),(void *)((char *)(& drv_string) + 4U),4UL);
  #line 193 
  memcpy((void *)(& arg3),(void *)((char *)(& drv_string) + 8U),4UL);
  #line 195 
  *(cmd.req.arg + 1U) = arg1;
  #line 196 
  *(cmd.req.arg + 2U) = arg2;
  #line 197 
  *(cmd.req.arg + 3U) = arg3;
  #line 199 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 200 
  if (err != 0) {
    #line 201 
    _dev_info(& (adapter->pdev)->dev,(char *)"Failed to set driver version in firmware\n");
    #line 203 
    err = -5;
  }
  #line 205 
  qlcnic_free_mbx_args(& cmd);
  #line 206 
  return err;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_fw_cmd_set_mtu(struct qlcnic_adapter *adapter, int mtu)
{
  #line 213 
  struct qlcnic_cmd_args cmd;
  #line 212 
  int err = 0;
  #line 214 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 216 
  if (recv_ctx->state != 2U) 
                             #line 217 
                             return err;
  #line 218 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,18U);
  #line 219 
  if (err != 0) 
                #line 220 
                return err;
  #line 222 
  *(cmd.req.arg + 1U) = (unsigned int)recv_ctx->context_id;
  #line 223 
  *(cmd.req.arg + 2U) = (unsigned int)mtu;
  #line 225 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 226 
  if (err != 0) {
    #line 227 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to set mtu\n");
    #line 228 
    err = -5;
  }
  #line 230 
  qlcnic_free_mbx_args(& cmd);
  #line 231 
  return err;
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_fw_cmd_create_rx_ctx(struct qlcnic_adapter *adapter)
{
  #line 238 
  dma_addr_t hostrq_phys_addr;
  #line 238 
  dma_addr_t cardrsp_phys_addr;
  #line 240 
  u32 temp_intr_crb_mode;
  #line 240 
  u32 temp_rds_crb_mode;
  #line 241 
  struct qlcnic_cardrsp_rds_ring *prsp_rds;
  #line 242 
  struct qlcnic_cardrsp_sds_ring *prsp_sds;
  #line 243 
  struct qlcnic_hostrq_rds_ring *prq_rds;
  #line 244 
  struct qlcnic_hostrq_sds_ring *prq_sds;
  #line 245 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 246 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 247 
  struct qlcnic_cardrsp_rx_ctx *prsp;
  #line 248 
  struct qlcnic_hostrq_rx_ctx *prq;
  #line 249 
  u8 i;
  #line 249 
  u8 nrds_rings;
  #line 249 
  u8 nsds_rings;
  #line 250 
  struct qlcnic_cmd_args cmd;
  #line 251 
  size_t rq_size;
  #line 251 
  size_t rsp_size;
  #line 252 
  u32 cap;
  #line 252 
  u32 reg;
  #line 252 
  u32 val;
  #line 252 
  u32 reg2;
  #line 253 
  u64 phys_addr;
  #line 254 
  u16 temp_u16;
  #line 255 
  void *addr;
  #line 256 
  int err;
  #line 236 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 237 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 239 
  struct net_device *netdev = adapter->netdev;
  #line 258 
  nrds_rings = adapter->max_rds_rings;
  #line 259 
  nsds_rings = adapter->drv_sds_rings;
  #line 261 
  rq_size = ((unsigned long)nrds_rings * 24UL + (unsigned long)nsds_rings * 16UL) + 176UL;
  #line 263 
  rsp_size = (((unsigned long)nrds_rings + (unsigned long)nsds_rings) + 19UL) * 8UL;
  #line 266 
  addr = dma_alloc_coherent(& (adapter->pdev)->dev,rq_size,& hostrq_phys_addr,3264U);
  #line 268 
  if (addr == (void *)0) 
                         #line 269 
                         return -12;
  #line 270 
  prq = (struct qlcnic_hostrq_rx_ctx *)addr;
  #line 272 
  addr = dma_alloc_coherent(& (adapter->pdev)->dev,rsp_size,& cardrsp_phys_addr,3264U);
  #line 274 
  if (addr == (void *)0) {
    #line 275 
    err = -12;
    #line 276 
    goto out_free_rq;
  }
  #line 278 
  prsp = (struct qlcnic_cardrsp_rx_ctx *)addr;
  #line 280 
  prq->host_rsp_dma_addr = cardrsp_phys_addr;
  #line 282 
  cap = 2053U;
  #line 284 
  cap |= 384U;
  #line 286 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) {
    #line 286 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
                                                       #line 288 
                                                       cap |= 4194304U; else 
                                                                    #line 286 
                                                                    goto _LAND;
  }
  else {
    #line 286 
    _LAND: {
             #line 290 
             temp_u16 = (unsigned short)47U;
             #line 291 
             prq->valid_field_offset = temp_u16;
             #line 292 
             prq->txrx_sds_binding = (unsigned char)((unsigned int)nsds_rings + 255U);
             #line 293 
             temp_intr_crb_mode = 1U;
             #line 294 
             prq->host_int_crb_mode = temp_intr_crb_mode;
             #line 295 
             temp_rds_crb_mode = 0U;
             #line 296 
             prq->host_rds_crb_mode = temp_rds_crb_mode;
           }
  }
  #line 299 
  prq->capabilities[0] = cap;
  #line 301 
  prq->num_rds_rings = (unsigned short)nrds_rings;
  #line 302 
  prq->num_sds_rings = (unsigned short)nsds_rings;
  #line 303 
  prq->rds_ring_offset = 0U;
  #line 305 
  val = prq->rds_ring_offset + (unsigned int)nrds_rings * 24U;
  #line 307 
  prq->sds_ring_offset = val;
  #line 309 
  prq_rds = (struct qlcnic_hostrq_rds_ring *)((char *)(& prq->data) + (unsigned long)prq->rds_ring_offset);
  #line 312 
  i = (unsigned char)0U;
  #line 312 
  while ((int)i < (int)nrds_rings) {
    #line 313 
    rds_ring = recv_ctx->rds_rings + (unsigned long)i;
    #line 314 
    rds_ring->producer = 0U;
    #line 315 
    (prq_rds + (unsigned long)i)->host_phys_addr = rds_ring->phys_addr;
    #line 316 
    (prq_rds + (unsigned long)i)->ring_size = rds_ring->num_desc;
    #line 317 
    (prq_rds + (unsigned long)i)->ring_kind = (unsigned int)i;
    #line 318 
    (prq_rds + (unsigned long)i)->buff_size = (unsigned long long)rds_ring->dma_size;
    #line 312 
    i = (u8)((int)i + 1);
  }
  #line 321 
  prq_sds = (struct qlcnic_hostrq_sds_ring *)((char *)(& prq->data) + (unsigned long)prq->sds_ring_offset);
  #line 324 
  i = (unsigned char)0U;
  #line 324 
  while ((int)i < (int)nsds_rings) {
    {
      #line 325 
      sds_ring = recv_ctx->sds_rings + (unsigned long)i;
      #line 326 
      sds_ring->consumer = 0U;
      #line 327 
      memset((void *)sds_ring->desc_head,0,(unsigned long)sds_ring->num_desc * 16UL);
      #line 328 
      (prq_sds + (unsigned long)i)->host_phys_addr = sds_ring->phys_addr;
      #line 329 
      (prq_sds + (unsigned long)i)->ring_size = sds_ring->num_desc;
      #line 330 
      if ((int)qlcnic_check_multi_tx(adapter) != 0) 
        #line 330 
        if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
                                                           #line 332 
                                                           (prq_sds + (unsigned long)i)->msi_index = (ahw->intr_tbl + (unsigned long)i)->id; else 
                                                                    #line 334 
                                                                    (prq_sds + (unsigned long)i)->msi_index = (unsigned short)i;
      else 
           #line 334 
           (prq_sds + (unsigned long)i)->msi_index = (unsigned short)i;
    }
    #line 324 
    i = (u8)((int)i + 1);
  }
  #line 337 
  phys_addr = hostrq_phys_addr;
  #line 338 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,7U);
  #line 339 
  if (err != 0) 
                #line 340 
                goto out_free_rsp;
  #line 342 
  *(cmd.req.arg + 1U) = (unsigned int)(phys_addr >> 32);
  #line 343 
  *(cmd.req.arg + 2U) = (unsigned int)phys_addr;
  #line 344 
  *(cmd.req.arg + 3U) = (unsigned int)rq_size;
  #line 345 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 346 
  if (err != 0) {
    #line 347 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to create rx ctx in firmware%d\n",err);
    #line 349 
    goto out_free_rsp;
  }
  #line 352 
  prsp_rds = (struct qlcnic_cardrsp_rds_ring *)(& prsp->data[prsp->rds_ring_offset]);
  #line 355 
  i = (unsigned char)0U;
  #line 355 
  while ((int)((unsigned short)i) < (int)prsp->num_rds_rings) {
    #line 356 
    rds_ring = recv_ctx->rds_rings + (unsigned long)i;
    #line 357 
    reg = (prsp_rds + (unsigned long)i)->host_producer_crb;
    #line 358 
    rds_ring->crb_rcv_producer = ahw->pci_base0 + (unsigned long)reg;
    #line 355 
    i = (u8)((int)i + 1);
  }
  #line 361 
  prsp_sds = (struct qlcnic_cardrsp_sds_ring *)(& prsp->data[prsp->sds_ring_offset]);
  #line 364 
  i = (unsigned char)0U;
  #line 364 
  while ((int)((unsigned short)i) < (int)prsp->num_sds_rings) {
    {
      #line 365 
      sds_ring = recv_ctx->sds_rings + (unsigned long)i;
      #line 366 
      reg = (prsp_sds + (unsigned long)i)->host_consumer_crb;
      #line 367 
      if ((int)qlcnic_check_multi_tx(adapter) != 0) 
        #line 367 
        if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
                                                           #line 368 
                                                           reg2 = (ahw->intr_tbl + (unsigned long)i)->src; else 
                                                                    #line 370 
                                                                    reg2 = (prsp_sds + (unsigned long)i)->interrupt_crb;
      else 
           #line 370 
           reg2 = (prsp_sds + (unsigned long)i)->interrupt_crb;
      #line 372 
      sds_ring->crb_intr_mask = ahw->pci_base0 + (unsigned long)reg2;
      #line 373 
      sds_ring->crb_sts_consumer = ahw->pci_base0 + (unsigned long)reg;
    }
    #line 364 
    i = (u8)((int)i + 1);
  }
  #line 376 
  recv_ctx->state = prsp->host_ctx_state;
  #line 377 
  recv_ctx->context_id = prsp->context_id;
  #line 378 
  recv_ctx->virt_port = (unsigned short)prsp->virt_port;
  #line 380 
  netdev_info(netdev,(char *)"Rx Context[%d] Created, state 0x%x\n",(int)recv_ctx->context_id,recv_ctx->state);
  #line 382 
  qlcnic_free_mbx_args(& cmd);
  #line 384 
  out_free_rsp: 
                #line 384 
  ;
  #line 385 
  dma_free_coherent(& (adapter->pdev)->dev,rsp_size,(void *)prsp,cardrsp_phys_addr);
  #line 387 
  out_free_rq: 
               #line 387 
  ;
  #line 388 
  dma_free_coherent(& (adapter->pdev)->dev,rq_size,(void *)prq,hostrq_phys_addr);
  #line 390 
  return err;
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_82xx_fw_cmd_del_rx_ctx(struct qlcnic_adapter *adapter)
{
  #line 395 
  int err;
  #line 396 
  struct qlcnic_cmd_args cmd;
  #line 397 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 399 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,8U);
  #line 400 
  if (err != 0) 
                #line 401 
                return;
  #line 403 
  *(cmd.req.arg + 1U) = (unsigned int)recv_ctx->context_id;
  #line 404 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 405 
  if (err != 0) 
                #line 406 
                _dev_err(& (adapter->pdev)->dev,(char *)"Failed to destroy rx ctx in firmware\n");
  #line 409 
  recv_ctx->state = 0U;
  #line 410 
  qlcnic_free_mbx_args(& cmd);
  #line 411 
  return;
}

#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_fw_cmd_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring, int ring)
{
  #line 419 
  struct qlcnic_hostrq_tx_ctx *prq;
  #line 420 
  struct qlcnic_hostrq_cds_ring *prq_cds;
  #line 421 
  struct qlcnic_cardrsp_tx_ctx *prsp;
  #line 422 
  struct qlcnic_cmd_args cmd;
  #line 423 
  u32 temp;
  #line 423 
  u32 intr_mask;
  #line 423 
  u32 temp_int_crb_mode;
  #line 424 
  dma_addr_t rq_phys_addr;
  #line 424 
  dma_addr_t rsp_phys_addr;
  #line 425 
  int temp_nsds_rings;
  #line 425 
  int index;
  #line 425 
  int err;
  #line 426 
  void *rq_addr;
  #line 426 
  void *rsp_addr;
  #line 427 
  size_t rq_size;
  #line 427 
  size_t rsp_size;
  #line 428 
  u64 phys_addr;
  #line 429 
  u16 msix_id;
  #line 417 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 418 
  struct net_device *netdev = adapter->netdev;
  #line 432 
  tx_ring->producer = 0U;
  #line 433 
  tx_ring->sw_consumer = 0U;
  #line 434 
  *(tx_ring->hw_consumer) = 0U;
  #line 436 
  rq_size = 200UL;
  #line 437 
  rq_addr = dma_alloc_coherent(& (adapter->pdev)->dev,rq_size,& rq_phys_addr,3264U);
  #line 439 
  if (rq_addr == (void *)0) 
                            #line 440 
                            return -12;
  #line 442 
  rsp_size = 144UL;
  #line 443 
  rsp_addr = dma_alloc_coherent(& (adapter->pdev)->dev,rsp_size,& rsp_phys_addr,3264U);
  #line 445 
  if (rsp_addr == (void *)0) {
    #line 446 
    err = -12;
    #line 447 
    goto out_free_rq;
  }
  #line 450 
  prq = (struct qlcnic_hostrq_tx_ctx *)rq_addr;
  #line 451 
  prsp = (struct qlcnic_cardrsp_tx_ctx *)rsp_addr;
  #line 453 
  prq->host_rsp_dma_addr = rsp_phys_addr;
  #line 455 
  temp = 69U;
  #line 457 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
    #line 457 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
                                                       #line 458 
                                                       temp |= 4194304U;
  #line 460 
  prq->capabilities[0] = temp;
  #line 462 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) {
    #line 462 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) {
      #line 464 
      temp_nsds_rings = (int)adapter->drv_sds_rings;
      #line 465 
      index = temp_nsds_rings + ring;
      #line 466 
      msix_id = (ahw->intr_tbl + (unsigned long)index)->id;
      #line 467 
      prq->msi_index = msix_id;
    }
    else 
         #line 462 
         goto _LAND;
  }
  else {
    #line 462 
    _LAND: {
             #line 469 
             temp_int_crb_mode = 1U;
             #line 470 
             prq->host_int_crb_mode = temp_int_crb_mode;
             #line 471 
             prq->msi_index = (unsigned short)0U;
           }
  }
  #line 474 
  prq->interrupt_ctl = (unsigned short)0U;
  #line 475 
  prq->cmd_cons_dma_addr = tx_ring->hw_cons_phys_addr;
  #line 477 
  prq_cds = & prq->cds_ring;
  #line 479 
  prq_cds->host_phys_addr = tx_ring->phys_addr;
  #line 480 
  prq_cds->ring_size = tx_ring->num_desc;
  #line 482 
  phys_addr = rq_phys_addr;
  #line 484 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,9U);
  #line 485 
  if (err != 0) 
                #line 486 
                goto out_free_rsp;
  #line 488 
  *(cmd.req.arg + 1U) = (unsigned int)(phys_addr >> 32);
  #line 489 
  *(cmd.req.arg + 2U) = (unsigned int)phys_addr;
  #line 490 
  *(cmd.req.arg + 3U) = (unsigned int)rq_size;
  #line 491 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 493 
  if (err == 0) {
    #line 494 
    tx_ring->state = prsp->host_ctx_state;
    #line 495 
    temp = prsp->cds_ring.host_producer_crb;
    #line 496 
    tx_ring->crb_cmd_producer = (adapter->ahw)->pci_base0 + (unsigned long)temp;
    #line 497 
    tx_ring->ctx_id = prsp->context_id;
    #line 498 
    if ((int)qlcnic_check_multi_tx(adapter) != 0) 
      #line 498 
      if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
        #line 499 
        if ((adapter->flags & 4U) != 0U) {
          #line 501 
          index = (int)adapter->drv_sds_rings + ring;
          #line 502 
          intr_mask = (ahw->intr_tbl + (unsigned long)index)->src;
          #line 503 
          tx_ring->crb_intr_mask = ahw->pci_base0 + (unsigned long)intr_mask;
        }
    #line 506 
    netdev_info(netdev,(char *)"Tx Context[0x%x] Created, state 0x%x\n",(int)tx_ring->ctx_id,tx_ring->state);
  }
  else {
    #line 509 
    netdev_err(netdev,(char *)"Failed to create tx ctx in firmware%d\n",err);
    #line 511 
    err = -5;
  }
  #line 513 
  qlcnic_free_mbx_args(& cmd);
  #line 515 
  out_free_rsp: 
                #line 515 
  ;
  #line 516 
  dma_free_coherent(& (adapter->pdev)->dev,rsp_size,rsp_addr,rsp_phys_addr);
  #line 518 
  out_free_rq: 
               #line 518 
  ;
  #line 519 
  dma_free_coherent(& (adapter->pdev)->dev,rq_size,rq_addr,rq_phys_addr);
  #line 521 
  return err;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_82xx_fw_cmd_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 527 
  struct qlcnic_cmd_args cmd;
  #line 528 
  int ret;
  #line 530 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,10U);
  #line 531 
  if (ret != 0) 
                #line 532 
                return;
  #line 534 
  *(cmd.req.arg + 1U) = (unsigned int)tx_ring->ctx_id;
  #line 535 
  if (qlcnic_issue_cmd(adapter,& cmd) != 0) 
                                            #line 536 
                                            _dev_err(& (adapter->pdev)->dev,(char *)"Failed to destroy tx ctx in firmware\n");
  #line 538 
  qlcnic_free_mbx_args(& cmd);
  #line 539 
  return;
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_fw_cmd_set_port(struct qlcnic_adapter *adapter, u32 config)
{
  #line 544 
  int err;
  #line 545 
  struct qlcnic_cmd_args cmd;
  #line 547 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,46U);
  #line 548 
  if (err != 0) 
                #line 549 
                return err;
  #line 551 
  *(cmd.req.arg + 1U) = config;
  #line 552 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 553 
  qlcnic_free_mbx_args(& cmd);
  #line 554 
  return err;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_alloc_hw_resources(struct qlcnic_adapter *adapter)
{
  #line 559 
  void *addr;
  #line 560 
  int err;
  #line 560 
  int ring;
  #line 561 
  struct qlcnic_recv_context *recv_ctx;
  #line 562 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 563 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 564 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 565 
  __le32 *ptr;
  #line 567 
  struct pci_dev *pdev = adapter->pdev;
  #line 569 
  recv_ctx = adapter->recv_ctx;
  #line 571 
  ring = 0;
  #line 571 
  while ((int)adapter->drv_tx_rings > ring) {
    #line 572 
    tx_ring = adapter->tx_ring + (unsigned long)ring;
    #line 573 
    ptr = (__le32 *)dma_alloc_coherent(& pdev->dev,4UL,& tx_ring->hw_cons_phys_addr,3264U);
    #line 576 
    if (ptr == (__le32 *)0U) {
      #line 577 
      err = -12;
      #line 578 
      goto err_out_free;
    }
    #line 581 
    tx_ring->hw_consumer = ptr;
    #line 583 
    addr = dma_alloc_coherent(& pdev->dev,(unsigned long)tx_ring->num_desc * 64UL,& tx_ring->phys_addr,3264U);
    #line 586 
    if (addr == (void *)0) {
      #line 587 
      err = -12;
      #line 588 
      goto err_out_free;
    }
    #line 591 
    tx_ring->desc_head = (struct cmd_desc_type0 *)addr;
    #line 571 
    ring ++;
  }
  #line 594 
  ring = 0;
  #line 594 
  while ((int)adapter->max_rds_rings > ring) {
    #line 595 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 596 
    addr = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)rds_ring->num_desc * 16UL,& rds_ring->phys_addr,3264U);
    #line 599 
    if (addr == (void *)0) {
      #line 600 
      err = -12;
      #line 601 
      goto err_out_free;
    }
    #line 603 
    rds_ring->desc_head = (struct rcv_desc *)addr;
    #line 594 
    ring ++;
  }
  #line 607 
  ring = 0;
  #line 607 
  while ((int)adapter->drv_sds_rings > ring) {
    #line 608 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 610 
    addr = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)sds_ring->num_desc * 16UL,& sds_ring->phys_addr,3264U);
    #line 613 
    if (addr == (void *)0) {
      #line 614 
      err = -12;
      #line 615 
      goto err_out_free;
    }
    #line 617 
    sds_ring->desc_head = (struct status_desc *)addr;
    #line 607 
    ring ++;
  }
  #line 620 
  return 0;
  #line 622 
  err_out_free: 
                #line 622 
  ;
  #line 623 
  qlcnic_free_hw_resources(adapter);
  #line 624 
  return err;
}

#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_fw_create_ctx(struct qlcnic_adapter *dev)
{
  #line 629 
  int i;
  #line 629 
  int err;
  #line 629 
  int ring;
  #line 631 
  if ((dev->flags & 4096U) != 0U) {
    #line 632 
    pci_reset_function(dev->pdev);
    #line 633 
    dev->flags &= 4294963199U;
  }
  #line 636 
  if ((int)qlcnic_83xx_check(dev) != 0) 
    #line 636 
    if ((dev->flags & 4U) != 0U) 
      #line 637 
      if ((unsigned int)(dev->ahw)->diag_test != 2U) {
        #line 638 
        err = qlcnic_83xx_config_intrpt(dev,(_Bool)1);
        #line 639 
        if (err != 0) 
                      #line 640 
                      return err;
      }
  #line 644 
  if ((int)qlcnic_82xx_check(dev) != 0) 
    #line 644 
    if ((dev->flags & 4U) != 0U) {
      #line 644 
      if ((int)qlcnic_check_multi_tx(dev) != 0) 
        #line 645 
        if ((unsigned int)(dev->ahw)->diag_test == 0U) {
          #line 646 
          err = qlcnic_82xx_mq_intrpt(dev,1);
          #line 647 
          if (err != 0) 
                        #line 648 
                        return err;
        }
    }
  #line 651 
  err = qlcnic_fw_cmd_create_rx_ctx(dev);
  #line 652 
  if (err != 0) 
                #line 653 
                goto err_out;
  #line 655 
  ring = 0;
  #line 655 
  while ((int)dev->drv_tx_rings > ring) {
    #line 656 
    err = qlcnic_fw_cmd_create_tx_ctx(dev,dev->tx_ring + (unsigned long)ring,ring);
    #line 659 
    if (err != 0) {
      #line 660 
      qlcnic_fw_cmd_del_rx_ctx(dev);
      #line 661 
      if (ring == 0) 
                     #line 662 
                     goto err_out;
      #line 664 
      i = 0;
      #line 664 
      while (i < ring) {
        #line 665 
        qlcnic_fw_cmd_del_tx_ctx(dev,dev->tx_ring + (unsigned long)i);
        #line 664 
        i ++;
      }
      #line 667 
      goto err_out;
    }
    #line 655 
    ring ++;
  }
  #line 671 
  cif_set_bit_7(0L,& dev->state);
  #line 673 
  return 0;
  #line 675 
  err_out: 
           #line 675 
  ;
  #line 676 
  if ((int)qlcnic_82xx_check(dev) != 0) 
    #line 676 
    if ((dev->flags & 4U) != 0U) {
      #line 676 
      if ((int)qlcnic_check_multi_tx(dev) != 0) 
        #line 677 
        if ((unsigned int)(dev->ahw)->diag_test == 0U) 
                                                       #line 678 
                                                       qlcnic_82xx_config_intrpt(dev,(unsigned char)0);
    }
  #line 680 
  if ((int)qlcnic_83xx_check(dev) != 0) 
    #line 680 
    if ((dev->flags & 4U) != 0U) 
      #line 681 
      if ((unsigned int)(dev->ahw)->diag_test != 2U) 
                                                     #line 682 
                                                     qlcnic_83xx_config_intrpt(dev,(_Bool)0);
  #line 685 
  return err;
}

#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_fw_destroy_ctx(struct qlcnic_adapter *adapter)
{
  #line 690 
  int ring;
  #line 692 
  if ((int)test_and_set_bit(0L,& adapter->state) != 0) {
    #line 693 
    qlcnic_fw_cmd_del_rx_ctx(adapter);
    #line 694 
    ring = 0;
    #line 694 
    while ((int)adapter->drv_tx_rings > ring) {
      #line 695 
      qlcnic_fw_cmd_del_tx_ctx(adapter,adapter->tx_ring + (unsigned long)ring);
      #line 694 
      ring ++;
    }
    #line 698 
    if ((int)qlcnic_82xx_check(adapter) != 0) 
      #line 698 
      if ((adapter->flags & 4U) != 0U) {
        #line 699 
        if ((int)qlcnic_check_multi_tx(adapter) != 0) 
          #line 700 
          if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
                                                             #line 702 
                                                             qlcnic_82xx_config_intrpt(adapter,(unsigned char)0);
      }
    #line 704 
    if ((int)qlcnic_83xx_check(adapter) != 0) 
      #line 704 
      if ((adapter->flags & 4U) != 0U) 
        #line 706 
        if ((unsigned int)(adapter->ahw)->diag_test != 2U) 
                                                           #line 707 
                                                           qlcnic_83xx_config_intrpt(adapter,(_Bool)0);
    {
      #line 710 
      unsigned long __ms = 20UL;
      #line 710 
      while (1) {
        #line 710 
        unsigned long tmp_2;
        #line 710 
        tmp_2 = __ms;
        #line 710 
        __ms --;
        #line 710 
        ;
        #line 710 
        if (! (tmp_2 != 0UL)) 
                              #line 710 
                              break;
        #line 710 
        __const_udelay(4295000UL);
      }
    }
  }
  #line 715 
  return;
}

#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_free_hw_resources(struct qlcnic_adapter *adapter)
{
  #line 716 
  struct qlcnic_recv_context *recv_ctx;
  #line 717 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 718 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 719 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 720 
  int ring;
  #line 722 
  recv_ctx = adapter->recv_ctx;
  #line 724 
  ring = 0;
  #line 724 
  while ((int)adapter->drv_tx_rings > ring) {
    #line 725 
    tx_ring = adapter->tx_ring + (unsigned long)ring;
    #line 726 
    if (tx_ring->hw_consumer != (__le32 *)0U) {
      #line 727 
      dma_free_coherent(& (adapter->pdev)->dev,4UL,(void *)tx_ring->hw_consumer,tx_ring->hw_cons_phys_addr);
      #line 731 
      tx_ring->hw_consumer = (__le32 *)0U;
    }
    #line 734 
    if (tx_ring->desc_head != (struct cmd_desc_type0 *)0) {
      #line 735 
      dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)tx_ring->num_desc * 64UL,(void *)tx_ring->desc_head,tx_ring->phys_addr);
      #line 739 
      tx_ring->desc_head = (struct cmd_desc_type0 *)0;
    }
    #line 724 
    ring ++;
  }
  #line 743 
  ring = 0;
  #line 743 
  while ((int)adapter->max_rds_rings > ring) {
    #line 744 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 746 
    if (rds_ring->desc_head != (struct rcv_desc *)0) {
      #line 747 
      dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)rds_ring->num_desc * 16UL,(void *)rds_ring->desc_head,rds_ring->phys_addr);
      #line 751 
      rds_ring->desc_head = (struct rcv_desc *)0;
    }
    #line 743 
    ring ++;
  }
  #line 755 
  ring = 0;
  #line 755 
  while ((int)adapter->drv_sds_rings > ring) {
    #line 756 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 758 
    if (sds_ring->desc_head != (struct status_desc *)0) {
      #line 759 
      dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)sds_ring->num_desc * 16UL,(void *)sds_ring->desc_head,sds_ring->phys_addr);
      #line 763 
      sds_ring->desc_head = (struct status_desc *)0;
    }
    #line 755 
    ring ++;
  }
  #line 766 
  return;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_config_intrpt(struct qlcnic_adapter *adapter, u8 op_type)
{
  #line 772 
  struct qlcnic_cmd_args cmd;
  #line 773 
  u32 type;
  #line 773 
  u32 val;
  #line 774 
  int i;
  #line 770 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 771 
  struct net_device *netdev = adapter->netdev;
  #line 774 
  int err = 0;
  #line 776 
  i = 0;
  #line 776 
  while ((int)ahw->num_msix > i) {
    #line 777 
    err = qlcnic_alloc_mbx_args(& cmd,adapter,57U);
    #line 779 
    if (err != 0) 
                  #line 780 
                  return err;
    #line 781 
    if ((unsigned int)op_type != 0U) 
                                     #line 781 
                                     type = 1U; else 
                                                     #line 781 
                                                     type = 2U;
    #line 782 
    val = (unsigned int)((int)(ahw->intr_tbl + (unsigned long)i)->type << 4) | type;
    #line 783 
    if ((unsigned int)(ahw->intr_tbl + (unsigned long)i)->type == 3U) 
      #line 784 
      val = (unsigned int)((int)(ahw->intr_tbl + (unsigned long)i)->id << 16) | val;
    #line 785 
    *(cmd.req.arg + 1U) = val;
    #line 786 
    err = qlcnic_issue_cmd(adapter,& cmd);
    #line 787 
    if (err != 0) {
      #line 788 
      char *tmp;
      #line 788 
      ;
      #line 788 
      if ((unsigned int)op_type == 1U) 
                                       #line 788 
                                       tmp = (char *)"Add"; else 
                                                                 #line 788 
                                                                 tmp = (char *)"Delete";
      #line 788 
      ;
      #line 788 
      netdev_err(netdev,(char *)"Failed to %s interrupts %d\n",tmp,err);
      #line 791 
      qlcnic_free_mbx_args(& cmd);
      #line 792 
      return err;
    }
    #line 794 
    val = *(cmd.rsp.arg + 1U);
    #line 795 
    if ((unsigned int)((unsigned char)val) != 0U) {
      #line 796 
      netdev_info(netdev,(char *)"failed to configure interrupt for %d\n",(int)(ahw->intr_tbl + (unsigned long)i)->id);
      #line 799 
      goto __Cont;
    }
    #line 801 
    if ((unsigned int)op_type != 0U) {
      #line 802 
      (ahw->intr_tbl + (unsigned long)i)->id = (unsigned short)(val >> 16);
      #line 803 
      (ahw->intr_tbl + (unsigned long)i)->enabled = (unsigned char)1U;
      #line 804 
      (ahw->intr_tbl + (unsigned long)i)->src = *(cmd.rsp.arg + 2U);
    }
    else {
      #line 806 
      (ahw->intr_tbl + (unsigned long)i)->id = (unsigned short)i;
      #line 807 
      (ahw->intr_tbl + (unsigned long)i)->enabled = (unsigned char)0U;
      #line 808 
      (ahw->intr_tbl + (unsigned long)i)->src = 0U;
    }
    #line 810 
    qlcnic_free_mbx_args(& cmd);
    #line 776 
    __Cont: 
            #line 776 
    i ++;
  }
  #line 813 
  return err;
}

#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function)
{
  #line 819 
  int err;
  #line 819 
  int i;
  #line 820 
  struct qlcnic_cmd_args cmd;
  #line 821 
  u32 mac_low;
  #line 821 
  u32 mac_high;
  #line 823 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,31U);
  #line 824 
  if (err != 0) 
                #line 825 
                return err;
  #line 827 
  *(cmd.req.arg + 1U) = (unsigned int)((int)function | 256);
  #line 828 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 830 
  if (err == 0) {
    #line 831 
    mac_low = *(cmd.rsp.arg + 1U);
    #line 832 
    mac_high = *(cmd.rsp.arg + 2U);
    #line 834 
    i = 0;
    #line 834 
    while (i <= 1) {
      #line 835 
      *(mac + (unsigned long)i) = (unsigned char)(mac_high >> (1 - i) * 8);
      #line 834 
      i ++;
    }
    #line 836 
    i = 2;
    #line 836 
    while (i <= 5) {
      #line 837 
      *(mac + (unsigned long)i) = (unsigned char)(mac_low >> (5 - i) * 8);
      #line 836 
      i ++;
    }
  }
  else {
    #line 839 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to get mac address%d\n",err);
    #line 841 
    err = -5;
  }
  #line 843 
  qlcnic_free_mbx_args(& cmd);
  #line 844 
  return err;
}

#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u8 func_id)
{
  #line 851 
  int err;
  #line 852 
  dma_addr_t nic_dma_t;
  #line 853 
  struct qlcnic_info_le *nic_info;
  #line 854 
  void *nic_info_addr;
  #line 855 
  struct qlcnic_cmd_args cmd;
  #line 856 
  size_t nic_size = 128UL;
  #line 858 
  nic_info_addr = dma_alloc_coherent(& (adapter->pdev)->dev,nic_size,& nic_dma_t,3264U);
  #line 860 
  if (nic_info_addr == (void *)0) 
                                  #line 861 
                                  return -12;
  #line 863 
  nic_info = (struct qlcnic_info_le *)nic_info_addr;
  #line 865 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,33U);
  #line 866 
  if (err != 0) 
                #line 867 
                goto out_free_dma;
  #line 869 
  *(cmd.req.arg + 1U) = (unsigned int)(nic_dma_t >> 32);
  #line 870 
  *(cmd.req.arg + 2U) = (unsigned int)nic_dma_t;
  #line 871 
  *(cmd.req.arg + 3U) = (unsigned int)((int)func_id << 16) | (unsigned int)nic_size;
  #line 872 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 873 
  if (err != 0) {
    #line 874 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to get nic info%d\n",err);
    #line 876 
    err = -5;
  }
  else {
    #line 878 
    npar_info->pci_func = nic_info->pci_func;
    #line 879 
    npar_info->op_mode = nic_info->op_mode;
    #line 880 
    npar_info->min_tx_bw = nic_info->min_tx_bw;
    #line 881 
    npar_info->max_tx_bw = nic_info->max_tx_bw;
    #line 882 
    npar_info->phys_port = nic_info->phys_port;
    #line 883 
    npar_info->switch_mode = nic_info->switch_mode;
    #line 884 
    npar_info->max_tx_ques = nic_info->max_tx_ques;
    #line 885 
    npar_info->max_rx_ques = nic_info->max_rx_ques;
    #line 886 
    npar_info->capabilities = nic_info->capabilities;
    #line 887 
    npar_info->max_mtu = nic_info->max_mtu;
  }
  #line 890 
  qlcnic_free_mbx_args(& cmd);
  #line 891 
  out_free_dma: 
                #line 891 
  ;
  #line 892 
  dma_free_coherent(& (adapter->pdev)->dev,nic_size,nic_info_addr,nic_dma_t);
  #line 895 
  return err;
}

#line 899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *nic)
{
  #line 903 
  dma_addr_t nic_dma_t;
  #line 904 
  void *nic_info_addr;
  #line 905 
  struct qlcnic_cmd_args cmd;
  #line 906 
  struct qlcnic_info_le *nic_info;
  #line 902 
  int err = -5;
  #line 907 
  size_t nic_size = 128UL;
  #line 909 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) 
                                                   #line 910 
                                                   return err;
  #line 912 
  nic_info_addr = dma_alloc_coherent(& (adapter->pdev)->dev,nic_size,& nic_dma_t,3264U);
  #line 914 
  if (nic_info_addr == (void *)0) 
                                  #line 915 
                                  return -12;
  #line 917 
  nic_info = (struct qlcnic_info_le *)nic_info_addr;
  #line 919 
  nic_info->pci_func = nic->pci_func;
  #line 920 
  nic_info->op_mode = nic->op_mode;
  #line 921 
  nic_info->phys_port = nic->phys_port;
  #line 922 
  nic_info->switch_mode = nic->switch_mode;
  #line 923 
  nic_info->capabilities = nic->capabilities;
  #line 924 
  nic_info->max_mac_filters = nic->max_mac_filters;
  #line 925 
  nic_info->max_tx_ques = nic->max_tx_ques;
  #line 926 
  nic_info->max_rx_ques = nic->max_rx_ques;
  #line 927 
  nic_info->min_tx_bw = nic->min_tx_bw;
  #line 928 
  nic_info->max_tx_bw = nic->max_tx_bw;
  #line 930 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  #line 931 
  if (err != 0) 
                #line 932 
                goto out_free_dma;
  #line 934 
  *(cmd.req.arg + 1U) = (unsigned int)(nic_dma_t >> 32);
  #line 935 
  *(cmd.req.arg + 2U) = (unsigned int)nic_dma_t;
  #line 936 
  *(cmd.req.arg + 3U) = (unsigned int)((int)nic->pci_func << 16) | (unsigned int)nic_size;
  #line 937 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 939 
  if (err != 0) {
    #line 940 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to set nic info%d\n",err);
    #line 942 
    err = -5;
  }
  #line 945 
  qlcnic_free_mbx_args(& cmd);
  #line 946 
  out_free_dma: 
                #line 946 
  ;
  #line 947 
  dma_free_coherent(& (adapter->pdev)->dev,nic_size,nic_info_addr,nic_dma_t);
  #line 950 
  return err;
}

#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *pci_info)
{
  #line 961 
  struct qlcnic_pci_info_le *npar;
  #line 962 
  struct qlcnic_cmd_args cmd;
  #line 963 
  dma_addr_t pci_info_dma_t;
  #line 964 
  void *pci_info_addr;
  #line 965 
  int i;
  #line 957 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 958 
  size_t npar_size = 128UL;
  #line 959 
  size_t pci_size = (unsigned long)ahw->max_vnic_func * npar_size;
  #line 960 
  u16 nic = (unsigned short)0U;
  #line 960 
  u16 fcoe = (unsigned short)0U;
  #line 960 
  u16 iscsi = (unsigned short)0U;
  #line 965 
  int err = 0;
  #line 967 
  pci_info_addr = dma_alloc_coherent(& (adapter->pdev)->dev,pci_size,& pci_info_dma_t,3264U);
  #line 969 
  if (pci_info_addr == (void *)0) 
                                  #line 970 
                                  return -12;
  #line 972 
  npar = (struct qlcnic_pci_info_le *)pci_info_addr;
  #line 973 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,32U);
  #line 974 
  if (err != 0) 
                #line 975 
                goto out_free_dma;
  #line 977 
  *(cmd.req.arg + 1U) = (unsigned int)(pci_info_dma_t >> 32);
  #line 978 
  *(cmd.req.arg + 2U) = (unsigned int)pci_info_dma_t;
  #line 979 
  *(cmd.req.arg + 3U) = (unsigned int)pci_size;
  #line 980 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 982 
  ahw->total_nic_func = (unsigned short)0U;
  #line 983 
  if (err == 0) {
    #line 984 
    i = 0;
    #line 984 
    while (ahw->max_vnic_func > (unsigned int)i) {
      #line 985 
      pci_info->id = npar->id;
      #line 986 
      pci_info->active = npar->active;
      #line 987 
      if ((unsigned int)pci_info->active == 0U) 
                                                #line 988 
                                                goto __Cont;
      #line 989 
      pci_info->type = npar->type;
      #line 990 
      err = qlcnic_get_pci_func_type(adapter,(unsigned short)((int)pci_info->type),& nic,& fcoe,& iscsi);
      #line 992 
      pci_info->default_port = npar->default_port;
      #line 994 
      pci_info->tx_min_bw = npar->tx_min_bw;
      #line 996 
      pci_info->tx_max_bw = npar->tx_max_bw;
      #line 998 
      memcpy((void *)(& pci_info->mac),(void *)(& npar->mac),6UL);
      #line 984 
      __Cont: 
              #line 984 
      i ++;
      #line 984 
      npar ++;
      #line 984 
      pci_info ++;
    }
  }
  else {
    #line 1001 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to get PCI Info%d\n",err);
    #line 1003 
    err = -5;
  }
  #line 1006 
  ahw->total_nic_func = nic;
  #line 1007 
  ahw->total_pci_func = (unsigned int)(((int)nic + (int)fcoe) + (int)iscsi);
  #line 1008 
  if ((unsigned int)ahw->total_nic_func == 0U || ahw->total_pci_func == 0U) {
    #line 1009 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Invalid function count: total nic func[%x], total pci func[%x]\n",(char *)"qlcnic_82xx_get_pci_info",(int)ahw->total_nic_func,ahw->total_pci_func);
    #line 1012 
    err = -5;
  }
  #line 1014 
  qlcnic_free_mbx_args(& cmd);
  #line 1015 
  out_free_dma: 
                #line 1015 
  ;
  #line 1016 
  dma_free_coherent(& (adapter->pdev)->dev,pci_size,pci_info_addr,pci_info_dma_t);
  #line 1019 
  return err;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_config_port_mirroring(struct qlcnic_adapter *adapter, u8 id, u8 enable_mirroring, u8 pci_func)
{
  #line 1027 
  struct qlcnic_cmd_args cmd;
  #line 1029 
  u32 arg1;
  #line 1038 
  int tmp;
  #line 1026 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1028 
  int err = -5;
  #line 1031 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U || ((adapter->eswitch + (unsigned long)id)->flags & 2U) == 0U) {
    #line 1033 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Not a management function\n",(char *)"qlcnic_config_port_mirroring");
    #line 1035 
    return err;
  }
  #line 1038 
  if ((unsigned int)enable_mirroring != 0U) 
                                            #line 1038 
                                            tmp = 16; else 
                                                           #line 1038 
                                                           tmp = 0;
  #line 1038 
  arg1 = (unsigned int)((int)id | tmp);
  #line 1039 
  arg1 = (unsigned int)((int)pci_func << 8) | arg1;
  #line 1041 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,39U);
  #line 1043 
  if (err != 0) 
                #line 1044 
                return err;
  #line 1046 
  *(cmd.req.arg + 1U) = arg1;
  #line 1047 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1049 
  if (err != 0) 
                #line 1050 
                _dev_err(dev,(char *)"Failed to configure port mirroring for vNIC function %d on eSwitch %d\n",(int)pci_func,(int)id); else 
                                                                    #line 1053 
                                                                    _dev_info(dev,(char *)"Configured port mirroring for vNIC function %d on eSwitch %d\n",(int)pci_func,(int)id);
  #line 1055 
  qlcnic_free_mbx_args(& cmd);
  #line 1057 
  return err;
}

#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_get_port_stats(struct qlcnic_adapter *adapter, u8 func, u8 rx_tx, struct __qlcnic_esw_statistics *esw_stats)
{
  #line 1064 
  struct qlcnic_esw_stats_le *stats;
  #line 1065 
  dma_addr_t stats_dma_t;
  #line 1066 
  void *stats_addr;
  #line 1067 
  u32 arg1;
  #line 1068 
  struct qlcnic_cmd_args cmd;
  #line 1069 
  int err;
  #line 1063 
  size_t stats_size = 88UL;
  #line 1071 
  if (esw_stats == (struct __qlcnic_esw_statistics *)0) 
                                                        #line 1072 
                                                        return -12;
  #line 1074 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U && (int)(adapter->ahw)->pci_func != (int)func) {
    #line 1076 
    _dev_err(& (adapter->pdev)->dev,(char *)"Not privilege to query stats for func=%d",(int)func);
    #line 1078 
    return -5;
  }
  #line 1081 
  stats_addr = dma_alloc_coherent(& (adapter->pdev)->dev,stats_size,& stats_dma_t,3264U);
  #line 1083 
  if (stats_addr == (void *)0) 
                               #line 1084 
                               return -12;
  #line 1086 
  arg1 = (unsigned int)((int)func | 4352);
  #line 1087 
  arg1 = ((unsigned int)((int)rx_tx << 15) | ((unsigned int)stats_size << 16U)) | arg1;
  #line 1089 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,42U);
  #line 1091 
  if (err != 0) 
                #line 1092 
                goto out_free_dma;
  #line 1094 
  *(cmd.req.arg + 1U) = arg1;
  #line 1095 
  *(cmd.req.arg + 2U) = (unsigned int)(stats_dma_t >> 32);
  #line 1096 
  *(cmd.req.arg + 3U) = (unsigned int)stats_dma_t;
  #line 1097 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1099 
  if (err == 0) {
    #line 1100 
    stats = (struct qlcnic_esw_stats_le *)stats_addr;
    #line 1101 
    esw_stats->context_id = stats->context_id;
    #line 1102 
    esw_stats->version = stats->version;
    #line 1103 
    esw_stats->size = stats->size;
    #line 1104 
    esw_stats->multicast_frames = stats->multicast_frames;
    #line 1106 
    esw_stats->broadcast_frames = stats->broadcast_frames;
    #line 1108 
    esw_stats->unicast_frames = stats->unicast_frames;
    #line 1109 
    esw_stats->dropped_frames = stats->dropped_frames;
    #line 1110 
    esw_stats->local_frames = stats->local_frames;
    #line 1111 
    esw_stats->errors = stats->errors;
    #line 1112 
    esw_stats->numbytes = stats->numbytes;
  }
  #line 1115 
  qlcnic_free_mbx_args(& cmd);
  #line 1116 
  out_free_dma: 
                #line 1116 
  ;
  #line 1117 
  dma_free_coherent(& (adapter->pdev)->dev,stats_size,stats_addr,stats_dma_t);
  #line 1120 
  return err;
}

#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_get_mac_stats(struct qlcnic_adapter *adapter, struct qlcnic_mac_statistics *mac_stats)
{
  #line 1127 
  struct qlcnic_mac_statistics_le *stats;
  #line 1128 
  struct qlcnic_cmd_args cmd;
  #line 1130 
  dma_addr_t stats_dma_t;
  #line 1131 
  void *stats_addr;
  #line 1132 
  int err;
  #line 1129 
  size_t stats_size = 312UL;
  #line 1134 
  if (mac_stats == (struct qlcnic_mac_statistics *)0) 
                                                      #line 1135 
                                                      return -12;
  #line 1137 
  stats_addr = dma_alloc_coherent(& (adapter->pdev)->dev,stats_size,& stats_dma_t,3264U);
  #line 1139 
  if (stats_addr == (void *)0) 
                               #line 1140 
                               return -12;
  #line 1142 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,55U);
  #line 1143 
  if (err != 0) 
                #line 1144 
                goto out_free_dma;
  #line 1146 
  *(cmd.req.arg + 1U) = (unsigned int)stats_size << 16U;
  #line 1147 
  *(cmd.req.arg + 2U) = (unsigned int)(stats_dma_t >> 32);
  #line 1148 
  *(cmd.req.arg + 3U) = (unsigned int)stats_dma_t;
  #line 1149 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1150 
  if (err == 0) {
    #line 1151 
    stats = (struct qlcnic_mac_statistics_le *)stats_addr;
    #line 1152 
    mac_stats->mac_tx_frames = stats->mac_tx_frames;
    #line 1153 
    mac_stats->mac_tx_bytes = stats->mac_tx_bytes;
    #line 1154 
    mac_stats->mac_tx_mcast_pkts = stats->mac_tx_mcast_pkts;
    #line 1156 
    mac_stats->mac_tx_bcast_pkts = stats->mac_tx_bcast_pkts;
    #line 1158 
    mac_stats->mac_rx_frames = stats->mac_rx_frames;
    #line 1159 
    mac_stats->mac_rx_bytes = stats->mac_rx_bytes;
    #line 1160 
    mac_stats->mac_rx_mcast_pkts = stats->mac_rx_mcast_pkts;
    #line 1162 
    mac_stats->mac_rx_length_error = stats->mac_rx_length_error;
    #line 1164 
    mac_stats->mac_rx_length_small = stats->mac_rx_length_small;
    #line 1166 
    mac_stats->mac_rx_length_large = stats->mac_rx_length_large;
    #line 1168 
    mac_stats->mac_rx_jabber = stats->mac_rx_jabber;
    #line 1169 
    mac_stats->mac_rx_dropped = stats->mac_rx_dropped;
    #line 1170 
    mac_stats->mac_rx_crc_error = stats->mac_rx_crc_error;
  }
  else 
       #line 1172 
       _dev_err(& (adapter->pdev)->dev,(char *)"%s: Get mac stats failed, err=%d.\n",(char *)"qlcnic_get_mac_stats",err);
  #line 1176 
  qlcnic_free_mbx_args(& cmd);
  #line 1178 
  out_free_dma: 
                #line 1178 
  ;
  #line 1179 
  dma_free_coherent(& (adapter->pdev)->dev,stats_size,stats_addr,stats_dma_t);
  #line 1182 
  return err;
}

#line 1185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_get_eswitch_stats(struct qlcnic_adapter *adapter, u8 eswitch, u8 rx_tx, struct __qlcnic_esw_statistics *esw_stats)
{
  #line 1188 
  struct __qlcnic_esw_statistics port_stats;
  #line 1189 
  u8 i;
  #line 1190 
  int ret = -5;
  #line 1192 
  if (esw_stats == (struct __qlcnic_esw_statistics *)0) 
                                                        #line 1193 
                                                        return -12;
  #line 1194 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) 
                                                   #line 1195 
                                                   return -5;
  #line 1196 
  if (adapter->npars == (struct qlcnic_npar_info *)0) 
                                                      #line 1197 
                                                      return -5;
  #line 1199 
  memset((void *)esw_stats,0,8UL);
  #line 1200 
  esw_stats->unicast_frames = 18446744073709551615ULL;
  #line 1201 
  esw_stats->multicast_frames = 18446744073709551615ULL;
  #line 1202 
  esw_stats->broadcast_frames = 18446744073709551615ULL;
  #line 1203 
  esw_stats->dropped_frames = 18446744073709551615ULL;
  #line 1204 
  esw_stats->errors = 18446744073709551615ULL;
  #line 1205 
  esw_stats->local_frames = 18446744073709551615ULL;
  #line 1206 
  esw_stats->numbytes = 18446744073709551615ULL;
  #line 1207 
  esw_stats->context_id = (unsigned short)eswitch;
  #line 1209 
  i = (unsigned char)0U;
  #line 1209 
  while ((int)((unsigned short)i) < (int)(adapter->ahw)->total_nic_func) {
    {
      #line 1210 
      if ((int)(adapter->npars + (unsigned long)i)->phy_port != (int)eswitch) 
        #line 1211 
        goto __Cont;
      #line 1213 
      memset((void *)(& port_stats),0,88UL);
      #line 1214 
      if (qlcnic_get_port_stats(adapter,
                            (unsigned char)((int)(adapter->npars + (unsigned long)i)->pci_func),
                            (unsigned char)((int)rx_tx),& port_stats) != 0) 
        #line 1216 
        goto __Cont;
      #line 1218 
      esw_stats->size = port_stats.size;
      #line 1219 
      esw_stats->version = port_stats.version;
      #line 1220 
      if (esw_stats->unicast_frames == 18446744073709551615ULL && port_stats.unicast_frames != 18446744073709551615ULL) 
        #line 1220 
        esw_stats->unicast_frames = port_stats.unicast_frames;
      else 
        #line 1220 
        if (esw_stats->unicast_frames != 18446744073709551615ULL && port_stats.unicast_frames != 18446744073709551615ULL) 
          #line 1220 
          esw_stats->unicast_frames += port_stats.unicast_frames;
      #line 1222 
      if (esw_stats->multicast_frames == 18446744073709551615ULL && port_stats.multicast_frames != 18446744073709551615ULL) 
        #line 1222 
        esw_stats->multicast_frames = port_stats.multicast_frames;
      else 
        #line 1222 
        if (esw_stats->multicast_frames != 18446744073709551615ULL && port_stats.multicast_frames != 18446744073709551615ULL) 
          #line 1222 
          esw_stats->multicast_frames += port_stats.multicast_frames;
      #line 1224 
      if (esw_stats->broadcast_frames == 18446744073709551615ULL && port_stats.broadcast_frames != 18446744073709551615ULL) 
        #line 1224 
        esw_stats->broadcast_frames = port_stats.broadcast_frames;
      else 
        #line 1224 
        if (esw_stats->broadcast_frames != 18446744073709551615ULL && port_stats.broadcast_frames != 18446744073709551615ULL) 
          #line 1224 
          esw_stats->broadcast_frames += port_stats.broadcast_frames;
      #line 1226 
      if (esw_stats->dropped_frames == 18446744073709551615ULL && port_stats.dropped_frames != 18446744073709551615ULL) 
        #line 1226 
        esw_stats->dropped_frames = port_stats.dropped_frames;
      else 
        #line 1226 
        if (esw_stats->dropped_frames != 18446744073709551615ULL && port_stats.dropped_frames != 18446744073709551615ULL) 
          #line 1226 
          esw_stats->dropped_frames += port_stats.dropped_frames;
      #line 1228 
      if (esw_stats->errors == 18446744073709551615ULL && port_stats.errors != 18446744073709551615ULL) 
        #line 1228 
        esw_stats->errors = port_stats.errors;
      else 
        #line 1228 
        if (esw_stats->errors != 18446744073709551615ULL && port_stats.errors != 18446744073709551615ULL) 
          #line 1228 
          esw_stats->errors += port_stats.errors;
      #line 1230 
      if (esw_stats->local_frames == 18446744073709551615ULL && port_stats.local_frames != 18446744073709551615ULL) 
        #line 1230 
        esw_stats->local_frames = port_stats.local_frames;
      else 
        #line 1230 
        if (esw_stats->local_frames != 18446744073709551615ULL && port_stats.local_frames != 18446744073709551615ULL) 
          #line 1230 
          esw_stats->local_frames += port_stats.local_frames;
      #line 1232 
      if (esw_stats->numbytes == 18446744073709551615ULL && port_stats.numbytes != 18446744073709551615ULL) 
        #line 1232 
        esw_stats->numbytes = port_stats.numbytes;
      else 
        #line 1232 
        if (esw_stats->numbytes != 18446744073709551615ULL && port_stats.numbytes != 18446744073709551615ULL) 
          #line 1232 
          esw_stats->numbytes += port_stats.numbytes;
      #line 1234 
      ret = 0;
    }
    #line 1209 
    __Cont: 
            #line 1209 
    i = (u8)((int)i + 1);
  }
  #line 1236 
  return ret;
}

#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_clear_esw_stats(struct qlcnic_adapter *adapter, u8 func_esw, u8 port, u8 rx_tx)
{
  #line 1243 
  struct qlcnic_cmd_args cmd;
  #line 1244 
  int err;
  #line 1245 
  u32 arg1;
  #line 1242 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1247 
  if ((unsigned int)ahw->op_mode != 0U) 
                                        #line 1248 
                                        return -5;
  #line 1250 
  if ((unsigned int)func_esw == 1U) {
    #line 1251 
    if ((unsigned int)port >= ahw->max_vnic_func) 
                                                  #line 1252 
                                                  goto err_ret;
  }
  else 
    #line 1253 
    if ((unsigned int)func_esw == 2U) {
      #line 1254 
      if ((unsigned int)port > 1U) 
                                   #line 1255 
                                   goto err_ret;
    }
    else 
         #line 1257 
         goto err_ret;
  #line 1260 
  if ((unsigned int)rx_tx > 1U) 
                                #line 1261 
                                goto err_ret;
  #line 1263 
  arg1 = (unsigned int)(((int)port | 256) | ((int)func_esw << 12));
  #line 1264 
  arg1 = ((unsigned int)((int)rx_tx << 15) | arg1) | 16384U;
  #line 1266 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,42U);
  #line 1268 
  if (err != 0) 
                #line 1269 
                return err;
  #line 1271 
  *(cmd.req.arg + 1U) = arg1;
  #line 1272 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1273 
  qlcnic_free_mbx_args(& cmd);
  #line 1274 
  return err;
  #line 1276 
  err_ret: 
           #line 1276 
  ;
  #line 1277 
  _dev_err(& (adapter->pdev)->dev,(char *)"Invalid args func_esw %d port %d rx_ctx %d\n",(int)func_esw,(int)port,(int)rx_tx);
  #line 1280 
  return -5;
}

#line 1283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
static int __qlcnic_get_eswitch_port_config(struct qlcnic_adapter *adapter, u32 *arg1, u32 *arg2)
{
  #line 1287 
  struct qlcnic_cmd_args cmd;
  #line 1289 
  int err;
  #line 1286 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1288 
  u8 pci_func = (unsigned char)(*arg1 >> 8);
  #line 1291 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,41U);
  #line 1293 
  if (err != 0) 
                #line 1294 
                return err;
  #line 1296 
  *(cmd.req.arg + 1U) = *arg1;
  #line 1297 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1298 
  *arg1 = *(cmd.rsp.arg + 1U);
  #line 1299 
  *arg2 = *(cmd.rsp.arg + 2U);
  #line 1300 
  qlcnic_free_mbx_args(& cmd);
  #line 1302 
  if (err == 0) 
                #line 1303 
                _dev_info(dev,(char *)"Get eSwitch port config for vNIC function %d\n",(int)pci_func); else 
                                                                    #line 1306 
                                                                    _dev_err(dev,(char *)"Failed to get eswitch port config for vNIC function %d\n",(int)pci_func);
  #line 1308 
  return err;
}

#line 1317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_config_switch_port(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  #line 1321 
  struct qlcnic_cmd_args cmd;
  #line 1322 
  int index;
  #line 1323 
  u32 arg1;
  #line 1324 
  u8 pci_func;
  #line 1320 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1322 
  int err = -5;
  #line 1323 
  u32 arg2 = 0U;
  #line 1326 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) {
    #line 1327 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Not a management function\n",(char *)"qlcnic_config_switch_port");
    #line 1329 
    return err;
  }
  #line 1332 
  pci_func = esw_cfg->pci_func;
  #line 1333 
  index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func));
  #line 1334 
  if (index < 0) 
                 #line 1335 
                 return err;
  #line 1336 
  arg1 = (unsigned int)(adapter->npars + (unsigned long)index)->phy_port & 1U;
  #line 1337 
  arg1 = (unsigned int)((int)pci_func << 8) | arg1;
  #line 1339 
  if (__qlcnic_get_eswitch_port_config(adapter,& arg1,& arg2) != 0) 
                                                                    #line 1340 
                                                                    return err;
  #line 1341 
  arg1 &= 4294902015U;
  #line 1342 
  arg1 = (unsigned int)((int)pci_func << 8) | arg1;
  #line 1343 
  arg1 &= 4294967283U;
  #line 1344 
  switch ((int)esw_cfg->op_mode) {
    #line 1345 
    case 0: 
            #line 1345 
    ;
    #line 1346 
    arg1 |= 208U;
    #line 1347 
    arg2 |= 3U;
    #line 1348 
    if (((adapter->ahw)->capabilities & 2U) != 0U) 
                                                   #line 1349 
                                                   arg2 |= 12U;
    #line 1350 
    if ((unsigned int)esw_cfg->discard_tagged == 0U) 
                                                     #line 1351 
                                                     arg1 &= 4294967279U;
    #line 1352 
    if ((unsigned int)esw_cfg->promisc_mode == 0U) 
                                                   #line 1353 
                                                   arg1 &= 4294967231U;
    #line 1354 
    if ((unsigned int)esw_cfg->mac_override == 0U) 
                                                   #line 1355 
                                                   arg1 &= 4294967167U;
    #line 1356 
    if ((unsigned int)esw_cfg->mac_anti_spoof == 0U) 
                                                     #line 1357 
                                                     arg2 &= 4294967294U;
    #line 1358 
    if (((int)esw_cfg->offload_flags & 1) == 0) 
                                                #line 1359 
                                                arg2 &= 4294967281U;
    #line 1360 
    if (((int)esw_cfg->offload_flags & 2) == 0) 
                                                #line 1361 
                                                arg2 &= 4294967291U;
    #line 1362 
    if (((int)esw_cfg->offload_flags & 4) == 0) 
                                                #line 1363 
                                                arg2 &= 4294967287U;
    #line 1364 
    break;
    #line 1365 
    case 1: 
            #line 1365 
    ;
    #line 1366 
    arg1 &= 65535U;
    #line 1367 
    arg1 |= 36U;
    #line 1368 
    arg1 = (unsigned int)((int)esw_cfg->vlan_id << 16) | arg1;
    #line 1369 
    break;
    #line 1370 
    case 2: 
            #line 1370 
    ;
    #line 1371 
    arg1 |= 40U;
    #line 1372 
    arg1 &= 65535U;
    #line 1373 
    break;
    #line 1374 
    default: 
             #line 1374 
    ;
    #line 1375 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Invalid opmode 0x%x\n",(char *)"qlcnic_config_switch_port",(int)esw_cfg->op_mode);
    #line 1377 
    return err;
  }
  #line 1380 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,40U);
  #line 1382 
  if (err != 0) 
                #line 1383 
                return err;
  #line 1385 
  *(cmd.req.arg + 1U) = arg1;
  #line 1386 
  *(cmd.req.arg + 2U) = arg2;
  #line 1387 
  err = qlcnic_issue_cmd(adapter,& cmd);
  #line 1388 
  qlcnic_free_mbx_args(& cmd);
  #line 1390 
  if (err != 0) 
                #line 1391 
                _dev_err(dev,(char *)"Failed to configure eswitch for vNIC function %d\n",(int)pci_func); else 
                                                                    #line 1394 
                                                                    _dev_info(dev,(char *)"Configured eSwitch for vNIC function %d\n",(int)pci_func);
  #line 1397 
  return err;
}

#line 1401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_get_eswitch_port_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  #line 1404 
  u32 arg1;
  #line 1404 
  u32 arg2;
  #line 1405 
  int index;
  #line 1406 
  u8 phy_port;
  #line 1408 
  if ((unsigned int)(adapter->ahw)->op_mode == 0U) {
    #line 1409 
    index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)esw_cfg->pci_func));
    #line 1410 
    if (index < 0) 
                   #line 1411 
                   return -5;
    #line 1412 
    phy_port = (adapter->npars + (unsigned long)index)->phy_port;
  }
  else 
       #line 1414 
       phy_port = (adapter->ahw)->physical_port;
  #line 1416 
  arg1 = (unsigned int)phy_port;
  #line 1417 
  arg1 = (unsigned int)((int)esw_cfg->pci_func << 8) | arg1;
  #line 1418 
  if (__qlcnic_get_eswitch_port_config(adapter,& arg1,& arg2) != 0) 
                                                                    #line 1419 
                                                                    return -5;
  #line 1421 
  esw_cfg->discard_tagged = (unsigned char)((arg1 & 16U) != 0U);
  #line 1422 
  esw_cfg->host_vlan_tag = (unsigned char)((arg1 & 32U) != 0U);
  #line 1423 
  esw_cfg->promisc_mode = (unsigned char)((arg1 & 64U) != 0U);
  #line 1424 
  esw_cfg->mac_override = (unsigned char)((arg1 & 128U) != 0U);
  #line 1425 
  esw_cfg->vlan_id = (unsigned short)(arg1 >> 16);
  #line 1426 
  esw_cfg->mac_anti_spoof = (unsigned char)((unsigned int)((unsigned char)arg2) & 1U);
  #line 1427 
  esw_cfg->offload_flags = (unsigned char)((unsigned int)((unsigned char)(arg2 >> 1)) & 7U);
  #line 1429 
  return 0;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ctx.i.aux"
static void cif_set_bit_7(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 473  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ctx.i.aux"
static void *kcalloc_4(size_t n, size_t size, gfp_t flags)
{
  #line 476 
  return ldv_kcalloc(n,size,flags);
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
static void cif_set_bit_8(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
static void cif_clear_bit_7(long nr, unsigned long *addr);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 945  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
static void cif_vfree_3(void *addr);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 1638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
#line 1035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
int qlcnic_check_loopback_buff(unsigned char *data, u8 *mac);
#line 1943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring)
{
  #line 1945 
  (*((((sds_ring->adapter)->ahw)->hw_ops)->process_lb_rcv_ring_diag))(sds_ring);
  #line 1946 
  return;
}

#line 2034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_config_intr_coalesce(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal)
{
  #line 2037 
  return (*(((adapter->ahw)->hw_ops)->config_intr_coal))(adapter,ethcoal);
}

#line 2051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  #line 2053 
  return (*(((adapter->ahw)->hw_ops)->config_loopback))(adapter,
                                                     (unsigned char)((int)mode));
}

#line 2056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  #line 2058 
  return (*(((adapter->ahw)->hw_ops)->clear_loopback))(adapter,
                                                    (unsigned char)((int)mode));
}

#line 2131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_store_cap_mask(struct qlcnic_adapter *adapter, void *tmpl_hdr, u32 mask)
{
  #line 2134 
  (*(((adapter->ahw)->hw_ops)->store_cap_mask))(tmpl_hdr,mask);
  #line 2135 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 qlcnic_fw_dump_level[7U] = {3U, 7U, 15U, 31U, 63U, 127U, 255U};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static struct qlcnic_stats qlcnic_gstrings_stats[23U] = {{.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'n'}, .sizeof_stat = 8, .stat_offset = 776}, {.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'f', (char)'f'}, .sizeof_stat = 8, .stat_offset = 784}, {.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'c', (char)'a', (char)'l', (char)'l', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 664}, {.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'f', (char)'i', (char)'n', (char)'i', (char)'s', (char)'h', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 672}, {.stat_string = {(char)'t', (char)'x', (char)' ', (char)'d', (char)'m', (char)'a', (char)' ', (char)'m', (char)'a', (char)'p', (char)' ', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 8, .stat_offset = 816}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 728}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 688}, {.stat_string = {(char)'r', (char)'x', (char)' ', (char)'d', (char)'m', (char)'a', (char)' ', (char)'m', (char)'a', (char)'p', (char)' ', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .sizeof_stat = 8, .stat_offset = 808}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 704}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 720}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 680}, {.stat_string = {(char)'n', (char)'u', (char)'l', (char)'l', (char)' ', (char)'r', (char)'x', (char)'b', (char)'u', (char)'f'}, .sizeof_stat = 8, .stat_offset = 800}, {.stat_string = {(char)'c', (char)'s', (char)'u', (char)'m', (char)'m', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 696}, {.stat_string = {(char)'l', (char)'r', (char)'o', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 712}, {.stat_string = {(char)'l', (char)'r', (char)'o', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 736}, {.stat_string = {(char)'l', (char)'s', (char)'o', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 744}, {.stat_string = {(char)'e', (char)'n', (char)'c', (char)'a', (char)'p', (char)'_', (char)'l', (char)'s', (char)'o', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 752}, {.stat_string = {(char)'e', (char)'n', (char)'c', (char)'a', (char)'p', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'m', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 760}, {.stat_string = {(char)'e', (char)'n', (char)'c', (char)'a', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'m', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 768}, {.stat_string = {(char)'s', (char)'k', (char)'b', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'u', (char)'r', (char)'e'}, .sizeof_stat = 8, .stat_offset = 792}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'l', (char)'i', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, .sizeof_stat = 8, .stat_offset = 832}, {.stat_string = {(char)'s', (char)'p', (char)'u', (char)'r', (char)'i', (char)'o', (char)'u', (char)'s', (char)' ', (char)'i', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 8, .stat_offset = 824}, {.stat_string = {(char)'m', (char)'b', (char)'x', (char)' ', (char)'s', (char)'p', (char)'u', (char)'r', (char)'i', (char)'o', (char)'u', (char)'s', (char)' ', (char)'i', (char)'n', (char)'t', (char)'r'}, .sizeof_stat = 8, .stat_offset = 840}};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char qlcnic_device_gstrings_stats[14U][32U] = {{(char)'t', (char)'x', (char)' ', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'t', (char)'x', (char)' ', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'t', (char)'x', (char)' ', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'t', (char)'x', (char)' ', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'t', (char)'x', (char)' ', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'t', (char)'x', (char)' ', (char)'l', (char)'o', (char)'c', (char)'a', (char)'l', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'t', (char)'x', (char)' ', (char)'n', (char)'u', (char)'m', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)' ', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)' ', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)' ', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)' ', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)' ', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'r', (char)'x', (char)' ', (char)'l', (char)'o', (char)'c', (char)'a', (char)'l', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)' ', (char)'n', (char)'u', (char)'m', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char qlcnic_83xx_tx_stats_strings[5U][32U] = {{(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'n', (char)'u', (char)'m', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'s'}};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char qlcnic_83xx_mac_stats_strings[40U][32U] = {{(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'6', (char)'4', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'2', (char)'7', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'2', (char)'5', (char)'5', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'5', (char)'1', (char)'1', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'6', (char)'4', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'2', (char)'7', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'2', (char)'5', (char)'5', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'5', (char)'1', (char)'1', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'s', (char)'m', (char)'a', (char)'l', (char)'l'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'l', (char)'a', (char)'r', (char)'g', (char)'e'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char qlcnic_tx_queue_stats_strings[5U][32U] = {{(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'n'}, {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'f', (char)'f'}, {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'c', (char)'a', (char)'l', (char)'l', (char)'e', (char)'d'}, {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'f', (char)'i', (char)'n', (char)'i', (char)'s', (char)'h', (char)'e', (char)'d'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char qlcnic_83xx_rx_stats_strings[17U][32U] = {{(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'i', (char)'p', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'w', (char)'o', (char)'_', (char)'c', (char)'t', (char)'x'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'w', (char)'o', (char)'_', (char)'s', (char)'d', (char)'s', (char)'_', (char)'o', (char)'n', (char)'_', (char)'c', (char)'a', (char)'r', (char)'d'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'w', (char)'o', (char)'_', (char)'s', (char)'d', (char)'s', (char)'_', (char)'o', (char)'n', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'s', (char)'i', (char)'z', (char)'e', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'w', (char)'o', (char)'_', (char)'r', (char)'d', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'e', (char)'x', (char)'p', (char)'e', (char)'c', (char)'t', (char)'e', (char)'d', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'i', (char)'n', (char)'v', (char)'a', (char)'l', (char)'i', (char)'d', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'a', (char)'d', (char)'d', (char)'r', (char)'e', (char)'s', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'r', (char)'d', (char)'s', (char)'_', (char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'p', (char)'r', (char)'i', (char)'m', (char)'_', (char)'a', (char)'t', (char)'t', (char)'e', (char)'m', (char)'p', (char)'t', (char)'e', (char)'d'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'r', (char)'d', (char)'s', (char)'_', (char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'p', (char)'r', (char)'i', (char)'m', (char)'_', (char)'s', (char)'u', (char)'c', (char)'c', (char)'e', (char)'s', (char)'s'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'n', (char)'u', (char)'m', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s', (char)'_', (char)'a', (char)'d', (char)'d', (char)'e', (char)'d'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'n', (char)'u', (char)'m', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s', (char)'_', (char)'r', (char)'e', (char)'m', (char)'o', (char)'v', (char)'e', (char)'d'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'n', (char)'u', (char)'m', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s', (char)'_', (char)'a', (char)'c', (char)'t', (char)'i', (char)'v', (char)'e'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'u', (char)'n', (char)'k', (char)'n', (char)'o', (char)'w', (char)'n'}};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char qlcnic_gstrings_test[6U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'n', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'n', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'n', (char)'a', (char)'l', (char)'_', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e'}, {(char)'E', (char)'x', (char)'t', (char)'e', (char)'r', (char)'n', (char)'a', (char)'l', (char)'_', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e'}, {(char)'E', (char)'E', (char)'P', (char)'R', (char)'O', (char)'M', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e'}};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
__inline static int qlcnic_82xx_statistics(struct qlcnic_adapter *adapter)
{
  #line 180 
  return (int)((unsigned int)adapter->drv_tx_rings * 5U + 63U);
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
__inline static int qlcnic_83xx_statistics(struct qlcnic_adapter *adapter)
{
  #line 189 
  return (int)((unsigned int)adapter->drv_tx_rings * 5U + 85U);
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_dev_statistics_len(struct qlcnic_adapter *adapter)
{
  #line 195 
  int len = -1;
  #line 197 
  if ((int)qlcnic_82xx_check(adapter) != 0) {
    #line 198 
    len = qlcnic_82xx_statistics(adapter);
    #line 199 
    if ((adapter->flags & 64U) != 0U) 
                                      #line 200 
                                      len = (int)((unsigned int)len + 14U);
  }
  else {
    #line 201 
    if ((int)qlcnic_83xx_check(adapter) != 0) 
                                              #line 202 
                                              len = qlcnic_83xx_statistics(adapter);
  }
  #line 205 
  return len;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 diag_registers[13U] = {16U, 17U, 4U, 5U, 6U, 7U, 8U, 9U, 10U, 2U, [11] = 1U, 4294967295U};
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 ext_diag_registers[7U] = {136323736U, 101785708U, 118489148U, 119537724U, 120586300U, 116391996U, 4294967295U};
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
__inline static int qlcnic_get_ring_regs_len(struct qlcnic_adapter *adapter)
{
  #line 244 
  int ring_regs_cnt = (((int)adapter->drv_tx_rings * 5 + (int)adapter->max_rds_rings * 2) + (int)adapter->drv_sds_rings * 3) + 5;
  #line 247 
  return (int)((unsigned long)ring_regs_cnt * (unsigned long)4U);
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_regs_len(struct net_device *dev)
{
  #line 253 
  u32 len;
  #line 252 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 255 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 256 
    len = (unsigned int)qlcnic_83xx_get_regs_len(adapter);
  }
  else 
       #line 258 
       len = 80U;
  #line 260 
  len += 16U;
  #line 261 
  len = (unsigned int)qlcnic_get_ring_regs_len(adapter) + len;
  #line 262 
  return (int)len;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_eeprom_len(struct net_device *dev)
{
  #line 267 
  return 4194304;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *drvinfo)
{
  #line 274 
  u32 fw_major;
  #line 274 
  u32 fw_minor;
  #line 274 
  u32 fw_build;
  #line 273 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 275 
  fw_major = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 11U));
  #line 276 
  fw_minor = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 12U));
  #line 277 
  fw_build = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + 13U));
  #line 278 
  snprintf((char *)(& drvinfo->fw_version),32UL,(char *)"%d.%d.%d",fw_major,fw_minor,fw_build);
  #line 281 
  ;
  #line 281 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(adapter->pdev),32UL);
  #line 283 
  strlcpy((char *)(& drvinfo->driver),(char *)(& qlcnic_driver_name),32UL);
  #line 284 
  strlcpy((char *)(& drvinfo->version),(char *)"5.3.66",32UL);
  #line 285 
  return;
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_82xx_get_link_ksettings(struct qlcnic_adapter *adapter, struct ethtool_link_ksettings *ecmd)
{
  #line 292 
  u32 speed;
  #line 292 
  u32 reg;
  #line 295 
  u32 supported;
  #line 295 
  u32 advertising;
  #line 291 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 293 
  int check_sfp_module = 0;
  #line 293 
  int err = 0;
  #line 294 
  u16 pcifn = (unsigned short)ahw->pci_func;
  #line 298 
  if ((unsigned int)(adapter->ahw)->port_type == 1U) {
    #line 299 
    supported = 63U;
    #line 306 
    advertising = 60U;
    #line 311 
    ecmd->base.speed = (adapter->ahw)->link_speed;
    #line 312 
    ecmd->base.duplex = (unsigned char)(adapter->ahw)->link_duplex;
    #line 313 
    ecmd->base.autoneg = (unsigned char)(adapter->ahw)->link_autoneg;
  }
  else 
    #line 315 
    if ((unsigned int)(adapter->ahw)->port_type == 2U) {
      #line 316 
      u32 val = 0U;
      #line 317 
      val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323108UL,& err);
      #line 319 
      if (val == 3U) {
        #line 320 
        supported = 32U;
        #line 321 
        advertising = 32U;
      }
      else {
        #line 323 
        supported = 4096U;
        #line 324 
        advertising = 4096U;
      }
      #line 327 
      if ((int)netif_running(adapter->netdev) != 0) 
        #line 327 
        if ((unsigned int)ahw->has_link_events != 0U) {
          #line 328 
          if ((unsigned int)ahw->linkup != 0U) {
            #line 329 
            reg = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,
                                                (unsigned long)((int)(
                                                                (unsigned int)pcifn / 4U) * 4) + 136323816UL,
                                                & err);
            #line 331 
            speed = (reg >> ((int)pcifn & 3) * 8) & 255U;
            #line 332 
            ahw->link_speed = speed * 100U;
          }
          #line 335 
          ecmd->base.speed = ahw->link_speed;
          #line 336 
          ecmd->base.autoneg = (unsigned char)ahw->link_autoneg;
          #line 337 
          ecmd->base.duplex = (unsigned char)ahw->link_duplex;
          #line 338 
          goto skip;
        }
      #line 341 
      ecmd->base.speed = 4294967295U;
      #line 342 
      ecmd->base.duplex = (unsigned char)255U;
      #line 343 
      ecmd->base.autoneg = (unsigned char)0U;
    }
    else 
         #line 345 
         return -5;
  #line 347 
  skip: 
        #line 347 
  ;
  #line 348 
  ecmd->base.phy_address = (adapter->ahw)->physical_port;
  #line 350 
  switch ((int)(adapter->ahw)->board_type) {
    #line 378 
    int tmp_3;
    #line 351 
    case 33: 
             #line 351 
    ;
    #line 352 
    case 36: 
             #line 352 
    ;
    #line 353 
    case 41: 
             #line 353 
    ;
    #line 354 
    supported |= 64U;
    #line 355 
    advertising |= 64U;
    #line 357 
    case 49: 
             #line 357 
    ;
    #line 358 
    case 35: 
             #line 358 
    ;
    #line 359 
    case 39: 
             #line 359 
    ;
    #line 360 
    supported |= 128U;
    #line 361 
    advertising |= 128U;
    #line 362 
    ecmd->base.port = (unsigned char)0U;
    #line 363 
    ecmd->base.autoneg = (unsigned char)(adapter->ahw)->link_autoneg;
    #line 364 
    break;
    #line 365 
    case 37: 
             #line 365 
    ;
    #line 366 
    case 40: 
             #line 366 
    ;
    #line 367 
    case 34: 
             #line 367 
    ;
    #line 368 
    supported |= 512U;
    #line 369 
    advertising |= 512U;
    #line 370 
    ecmd->base.port = (unsigned char)2U;
    #line 371 
    ecmd->base.autoneg = (unsigned char)0U;
    #line 372 
    break;
    #line 373 
    case 38: 
             #line 373 
    ;
    #line 374 
    case 42: 
             #line 374 
    ;
    #line 375 
    case 43: 
             #line 375 
    ;
    #line 376 
    advertising |= 128U;
    #line 377 
    supported |= 128U;
    #line 378 
    if ((int)netif_running(adapter->netdev) != 0) 
      #line 378 
      if ((unsigned int)ahw->has_link_events != 0U) 
                                                    #line 378 
                                                    tmp_3 = 1; else 
                                                                    #line 378 
                                                                    tmp_3 = 0;
    else 
         #line 378 
         tmp_3 = 0;
    #line 378 
    check_sfp_module = tmp_3;
    #line 381 
    case 50: 
             #line 381 
    ;
    #line 382 
    supported |= 1024U;
    #line 383 
    advertising |= 1024U;
    #line 384 
    ecmd->base.port = (unsigned char)3U;
    #line 385 
    ecmd->base.autoneg = (unsigned char)0U;
    #line 386 
    break;
    #line 387 
    case 128: 
              #line 387 
    ;
    #line 388 
    if ((unsigned int)(adapter->ahw)->port_type == 2U) {
      #line 394 
      int tmp_5;
      #line 389 
      ecmd->base.autoneg = (unsigned char)0U;
      #line 390 
      supported |= 1152U;
      #line 391 
      advertising |= 1152U;
      #line 393 
      ecmd->base.port = (unsigned char)3U;
      #line 394 
      if ((int)netif_running(adapter->netdev) != 0) 
        #line 394 
        if ((unsigned int)ahw->has_link_events != 0U) 
                                                      #line 394 
                                                      tmp_5 = 1; else 
                                                                   #line 394 
                                                                   tmp_5 = 0;
      else 
           #line 394 
           tmp_5 = 0;
      #line 394 
      check_sfp_module = tmp_5;
    }
    else {
      #line 397 
      ecmd->base.autoneg = (unsigned char)1U;
      #line 398 
      supported |= 192U;
      #line 399 
      advertising |= 192U;
      #line 401 
      ecmd->base.port = (unsigned char)0U;
    }
    #line 403 
    break;
    #line 404 
    default: 
             #line 404 
    ;
    #line 405 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unsupported board model %d\n",(int)(adapter->ahw)->board_type);
    #line 407 
    return -5;
  }
  #line 410 
  if (check_sfp_module != 0) 
    #line 411 
    switch ((int)(adapter->ahw)->module_type) {
      #line 412 
      case 2: 
              #line 412 
      ;
      #line 413 
      case 3: 
              #line 413 
      ;
      #line 414 
      case 4: 
              #line 414 
      ;
      #line 415 
      case 5: 
              #line 415 
      ;
      #line 416 
      ecmd->base.port = (unsigned char)3U;
      #line 417 
      break;
      #line 418 
      case 6: 
              #line 418 
      ;
      #line 419 
      case 7: 
              #line 419 
      ;
      #line 420 
      case 8: 
              #line 420 
      ;
      #line 421 
      ecmd->base.port = (unsigned char)0U;
      #line 422 
      break;
      #line 423 
      default: 
               #line 423 
      ;
      #line 424 
      ecmd->base.port = (unsigned char)255U;
    }
  #line 428 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& ecmd->link_modes.supported),supported);
  #line 430 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& ecmd->link_modes.advertising),advertising);
  #line 433 
  return 0;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *ecmd)
{
  #line 439 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 441 
  if ((int)qlcnic_82xx_check(adapter) != 0) {
    #line 442 
    return qlcnic_82xx_get_link_ksettings(adapter,ecmd);
  }
  else {
    #line 443 
    if ((int)qlcnic_83xx_check(adapter) != 0) {
      #line 444 
      return qlcnic_83xx_get_link_ksettings(adapter,ecmd);
    }
  }
  #line 446 
  return -5;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_port_config(struct qlcnic_adapter *adapter, struct ethtool_link_ksettings *ecmd)
{
  #line 453 
  u32 ret = 0U;
  #line 453 
  u32 config = 0U;
  #line 455 
  if ((unsigned int)ecmd->base.duplex != 0U) 
                                             #line 456 
                                             config |= 1U;
  #line 458 
  if ((unsigned int)ecmd->base.autoneg != 0U) 
                                              #line 459 
                                              config |= 2U;
  #line 461 
  switch (ecmd->base.speed) {
    #line 462 
    case (__u32)10: 
                    #line 462 
    ;
    #line 463 
    config = config;
    #line 464 
    break;
    #line 465 
    case (__u32)100: 
                     #line 465 
    ;
    #line 466 
    config |= 256U;
    #line 467 
    break;
    #line 468 
    case (__u32)1000: 
                      #line 468 
    ;
    #line 469 
    config |= 2560U;
    #line 470 
    break;
    #line 471 
    default: 
             #line 471 
    ;
    #line 472 
    return -5;
  }
  #line 475 
  ret = (unsigned int)qlcnic_fw_cmd_set_port(adapter,config);
  #line 477 
  if (ret == 9U) 
                 #line 478 
                 return -95;
  else 
    #line 479 
    if (ret != 0U) 
                   #line 480 
                   return -5;
  #line 481 
  return (int)ret;
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *ecmd)
{
  #line 487 
  u32 ret = 0U;
  #line 488 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 490 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 491 
                                            qlcnic_83xx_get_port_type(adapter);
  #line 493 
  if ((unsigned int)(adapter->ahw)->port_type != 1U) 
                                                     #line 494 
                                                     return -95;
  #line 496 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 497 
    ret = (unsigned int)qlcnic_83xx_set_link_ksettings(adapter,ecmd);
  }
  else {
    #line 499 
    ret = (unsigned int)qlcnic_set_port_config(adapter,ecmd);
  }
  #line 501 
  if (ret == 0U) 
                 #line 502 
                 return (int)ret;
  #line 504 
  (adapter->ahw)->link_speed = ecmd->base.speed;
  #line 505 
  (adapter->ahw)->link_duplex = (unsigned short)ecmd->base.duplex;
  #line 506 
  (adapter->ahw)->link_autoneg = (unsigned short)ecmd->base.autoneg;
  #line 508 
  if (! netif_running(dev)) 
                            #line 509 
                            return 0;
  #line 511 
  (*((dev->netdev_ops)->ndo_stop))(dev);
  #line 512 
  return (*((dev->netdev_ops)->ndo_open))(dev);
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_82xx_get_registers(struct qlcnic_adapter *adapter, u32 *regs_buff)
{
  #line 518 
  int i;
  #line 518 
  int j = 0;
  #line 518 
  int err = 0;
  #line 520 
  i = 3;
  #line 520 
  while (diag_registers[j] != 4294967295U) {
    #line 521 
    *(regs_buff + (unsigned long)i) = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->reg_tbl + (unsigned long)diag_registers[j]));
    #line 520 
    j ++;
    #line 520 
    i ++;
  }
  #line 522 
  j = 0;
  #line 523 
  while (ext_diag_registers[j] != 4294967295U) {
    #line 524 
    int tmp;
    #line 524 
    int tmp_0;
    #line 524 
    tmp = i;
    #line 524 
    i ++;
    #line 524 
    tmp_0 = j;
    #line 524 
    j ++;
    #line 524 
    ;
    #line 524 
    ;
    #line 524 
    *(regs_buff + (unsigned long)tmp) = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,
                                                (unsigned long)ext_diag_registers[tmp_0],
                                                & err);
  }
  #line 526 
  return i;
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *p)
{
  #line 534 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 535 
  struct qlcnic_host_rds_ring *rds_rings;
  #line 536 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 538 
  int ring;
  #line 560 
  int tmp_3;
  #line 562 
  int tmp_4;
  #line 575 
  int tmp_11;
  #line 582 
  int tmp_14;
  #line 532 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 533 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 537 
  u32 *regs_buff = (u32 *)p;
  #line 538 
  int i = 0;
  #line 540 
  ;
  #line 540 
  memset(p,0,(unsigned long)qlcnic_get_regs_len(dev));
  #line 542 
  regs->version = (unsigned int)((((int)(adapter->ahw)->revision_id << 16) | 67108864) | (int)(adapter->pdev)->device);
  #line 545 
  *regs_buff = 3405643778U;
  #line 546 
  *(regs_buff + 1U) = 3U;
  #line 548 
  if (((adapter->ahw)->capabilities & 8388608U) != 0U) 
                                                       #line 549 
                                                       *(regs_buff + 2U) = (adapter->ahw)->max_vnic_func;
  #line 551 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 552 
                                            i = qlcnic_82xx_get_registers(adapter,regs_buff); else 
                                                                    #line 554 
                                                                    i = qlcnic_83xx_get_registers(adapter,regs_buff);
  #line 556 
  if (! test_bit(1L,& adapter->state)) 
                                       #line 557 
                                       return;
  #line 560 
  tmp_3 = i;
  #line 560 
  i ++;
  #line 560 
  *(regs_buff + (unsigned long)tmp_3) = 4293905835U;
  #line 562 
  tmp_4 = i;
  #line 562 
  i ++;
  #line 562 
  *(regs_buff + (unsigned long)tmp_4) = (unsigned int)adapter->drv_tx_rings;
  #line 563 
  ring = 0;
  #line 563 
  while ((int)adapter->drv_tx_rings > ring) {
    {
      #line 565 
      int tmp_5;
      #line 566 
      int tmp_6;
      #line 567 
      int tmp_7;
      #line 568 
      int tmp_8;
      #line 564 
      tx_ring = adapter->tx_ring + (unsigned long)ring;
      #line 565 
      tmp_5 = i;
      #line 565 
      i ++;
      #line 565 
      *(regs_buff + (unsigned long)tmp_5) = *(tx_ring->hw_consumer);
      #line 566 
      tmp_6 = i;
      #line 566 
      i ++;
      #line 566 
      *(regs_buff + (unsigned long)tmp_6) = tx_ring->sw_consumer;
      #line 567 
      tmp_7 = i;
      #line 567 
      i ++;
      #line 567 
      *(regs_buff + (unsigned long)tmp_7) = readl(tx_ring->crb_cmd_producer);
      #line 568 
      tmp_8 = i;
      #line 568 
      i ++;
      #line 568 
      *(regs_buff + (unsigned long)tmp_8) = tx_ring->producer;
      #line 569 
      if (tx_ring->crb_intr_mask != (void *)0) {
        #line 570 
        int tmp_9;
        #line 570 
        tmp_9 = i;
        #line 570 
        i ++;
        #line 570 
        *(regs_buff + (unsigned long)tmp_9) = readl(tx_ring->crb_intr_mask);
      }
      else {
        #line 572 
        int tmp_10;
        #line 572 
        tmp_10 = i;
        #line 572 
        i ++;
        #line 572 
        *(regs_buff + (unsigned long)tmp_10) = 2018915346U;
      }
    }
    #line 563 
    ring ++;
  }
  #line 575 
  tmp_11 = i;
  #line 575 
  i ++;
  #line 575 
  *(regs_buff + (unsigned long)tmp_11) = (unsigned int)adapter->max_rds_rings;
  #line 576 
  ring = 0;
  #line 576 
  while ((int)adapter->max_rds_rings > ring) {
    {
      #line 578 
      int tmp_12;
      #line 579 
      int tmp_13;
      #line 577 
      rds_rings = recv_ctx->rds_rings + (unsigned long)ring;
      #line 578 
      tmp_12 = i;
      #line 578 
      i ++;
      #line 578 
      *(regs_buff + (unsigned long)tmp_12) = readl(rds_rings->crb_rcv_producer);
      #line 579 
      tmp_13 = i;
      #line 579 
      i ++;
      #line 579 
      *(regs_buff + (unsigned long)tmp_13) = rds_rings->producer;
    }
    #line 576 
    ring ++;
  }
  #line 582 
  tmp_14 = i;
  #line 582 
  i ++;
  #line 582 
  *(regs_buff + (unsigned long)tmp_14) = (unsigned int)adapter->drv_sds_rings;
  #line 583 
  ring = 0;
  #line 583 
  while ((int)adapter->drv_sds_rings > ring) {
    {
      #line 585 
      int tmp_15;
      #line 586 
      int tmp_16;
      #line 587 
      int tmp_17;
      #line 584 
      sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
      #line 585 
      tmp_15 = i;
      #line 585 
      i ++;
      #line 585 
      *(regs_buff + (unsigned long)tmp_15) = readl(sds_ring->crb_sts_consumer);
      #line 586 
      tmp_16 = i;
      #line 586 
      i ++;
      #line 586 
      *(regs_buff + (unsigned long)tmp_16) = sds_ring->consumer;
      #line 587 
      tmp_17 = i;
      #line 587 
      i ++;
      #line 587 
      *(regs_buff + (unsigned long)tmp_17) = readl(sds_ring->crb_intr_mask);
    }
    #line 583 
    ring ++;
  }
  #line 589 
  return;
}

#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 qlcnic_test_link(struct net_device *dev)
{
  #line 595 
  u32 val;
  #line 593 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 594 
  int err = 0;
  #line 597 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 598 
    val = (unsigned int)qlcnic_83xx_test_link(adapter);
    #line 599 
    return (unsigned int)((val & 1U) == 0U);
  }
  #line 601 
  val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323736UL,& err);
  #line 602 
  if (err == -5) 
                 #line 603 
                 return (unsigned int)err;
  #line 604 
  val = (val >> (int)(adapter->ahw)->pci_func * 4) & 15U;
  #line 605 
  return (unsigned int)(val != 1U);
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 613 
  int offset;
  #line 612 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 614 
  int ret = -1;
  #line 616 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 617 
                                            return 0;
  #line 618 
  if (eeprom->len == 0U) 
                         #line 619 
                         return -22;
  #line 621 
  eeprom->magic = (unsigned int)((int)(adapter->pdev)->vendor | ((int)(adapter->pdev)->device << 16));
  #line 623 
  offset = (int)eeprom->offset;
  #line 625 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 626 
                                            ret = qlcnic_rom_fast_read_words(adapter,offset,bytes,(unsigned long)eeprom->len);
  #line 628 
  if (ret < 0) 
               #line 629 
               return ret;
  #line 631 
  return 0;
}

#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  #line 638 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 640 
  ring->rx_pending = (unsigned int)adapter->num_rxd;
  #line 641 
  ring->rx_jumbo_pending = (unsigned int)adapter->num_jumbo_rxd;
  #line 642 
  ring->tx_pending = (unsigned int)adapter->num_txd;
  #line 644 
  ring->rx_max_pending = (unsigned int)adapter->max_rxd;
  #line 645 
  ring->rx_jumbo_max_pending = (unsigned int)adapter->max_jumbo_rxd;
  #line 646 
  ring->tx_max_pending = 1024U;
  #line 647 
  return;
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 qlcnic_validate_ringparam(u32 val, u32 min, u32 max, char *r_name)
{
  #line 653 
  u32 __UNIQUE_ID___x534;
  #line 653 
  u32 tmp;
  #line 654 
  u32 __UNIQUE_ID___x536;
  #line 654 
  u32 tmp_1;
  #line 652 
  u32 num_desc;
  {
    #line 653 
    __UNIQUE_ID___x534 = val;
    #line 653 
    u32 __UNIQUE_ID___y535 = min;
    #line 653 
    if (__UNIQUE_ID___x534 > __UNIQUE_ID___y535) 
                                                 #line 653 
                                                 tmp = __UNIQUE_ID___x534; else 
                                                                    #line 653 
                                                                    tmp = __UNIQUE_ID___y535;
    }
  #line 653 
  num_desc = tmp;
  {
    #line 654 
    __UNIQUE_ID___x536 = num_desc;
    #line 654 
    u32 __UNIQUE_ID___y537 = max;
    #line 654 
    if (__UNIQUE_ID___x536 < __UNIQUE_ID___y537) 
                                                 #line 654 
                                                 tmp_1 = __UNIQUE_ID___x536; else 
                                                                    #line 654 
                                                                    tmp_1 = __UNIQUE_ID___y537;
    }
  #line 654 
  num_desc = tmp_1;
  #line 655 
  if (0 != 0) {
    #line 655 
    unsigned int tmp_19;
    #line 655 
    unsigned int tmp_51;
    #line 655 
    unsigned int tmp_52;
    #line 655 
    unsigned int tmp_20;
    #line 655 
    unsigned int tmp_21;
    #line 655 
    unsigned int tmp_53;
    #line 655 
    unsigned int tmp_54;
    #line 655 
    unsigned int tmp_22;
    #line 655 
    unsigned int tmp_23;
    #line 655 
    unsigned int tmp_55;
    #line 655 
    unsigned int tmp_56;
    #line 655 
    unsigned int tmp_24;
    #line 655 
    unsigned int tmp_25;
    #line 655 
    unsigned int tmp_57;
    #line 655 
    unsigned int tmp_58;
    #line 655 
    unsigned int tmp_26;
    #line 655 
    unsigned int tmp_27;
    #line 655 
    unsigned int tmp_59;
    #line 655 
    unsigned int tmp_60;
    #line 655 
    unsigned int tmp_28;
    #line 655 
    unsigned int tmp_29;
    #line 655 
    unsigned int tmp_61;
    #line 655 
    unsigned int tmp_62;
    #line 655 
    unsigned int tmp_30;
    #line 655 
    unsigned int tmp_31;
    #line 655 
    unsigned int tmp_63;
    #line 655 
    unsigned int tmp_64;
    #line 655 
    unsigned int tmp_32;
    #line 655 
    unsigned int tmp_33;
    #line 655 
    unsigned int tmp_65;
    #line 655 
    unsigned int tmp_34;
    #line 655 
    unsigned int tmp_67;
    #line 655 
    unsigned int tmp_3;
    #line 655 
    unsigned int tmp_35;
    #line 655 
    unsigned int tmp_36;
    #line 655 
    unsigned int tmp_4;
    #line 655 
    unsigned int tmp_5;
    #line 655 
    unsigned int tmp_37;
    #line 655 
    unsigned int tmp_38;
    #line 655 
    unsigned int tmp_6;
    #line 655 
    unsigned int tmp_7;
    #line 655 
    unsigned int tmp_39;
    #line 655 
    unsigned int tmp_40;
    #line 655 
    unsigned int tmp_8;
    #line 655 
    unsigned int tmp_9;
    #line 655 
    unsigned int tmp_41;
    #line 655 
    unsigned int tmp_42;
    #line 655 
    unsigned int tmp_10;
    #line 655 
    unsigned int tmp_11;
    #line 655 
    unsigned int tmp_43;
    #line 655 
    unsigned int tmp_44;
    #line 655 
    unsigned int tmp_12;
    #line 655 
    unsigned int tmp_13;
    #line 655 
    unsigned int tmp_45;
    #line 655 
    unsigned int tmp_46;
    #line 655 
    unsigned int tmp_14;
    #line 655 
    unsigned int tmp_15;
    #line 655 
    unsigned int tmp_47;
    #line 655 
    unsigned int tmp_48;
    #line 655 
    unsigned int tmp_16;
    #line 655 
    unsigned int tmp_17;
    #line 655 
    unsigned int tmp_49;
    #line 655 
    unsigned int tmp_50;
    #line 655 
    unsigned int tmp_18;
    #line 655 
    unsigned int tmp_68;
    #line 655 
    if (num_desc != 1U) {
      #line 655 
      if (0 != 0) {
        #line 655 
        if (num_desc + 4294967295U > 1U) {
          #line 655 
          if (((unsigned long long)(num_desc + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
            #line 655 
            if (((unsigned long long)(num_desc + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              #line 655 
              if (((unsigned long long)(num_desc + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                #line 655 
                if (((unsigned long long)(num_desc + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  #line 655 
                  if (((unsigned long long)(num_desc + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    #line 655 
                    if (((unsigned long long)(num_desc + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      #line 655 
                      if (((unsigned long long)(num_desc + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        #line 655 
                        if (((unsigned long long)(num_desc + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          #line 655 
                          if (((unsigned long long)(num_desc + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            #line 655 
                            if (((unsigned long long)(num_desc + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              #line 655 
                              if (((unsigned long long)(num_desc + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                #line 655 
                                if (((unsigned long long)(num_desc + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  #line 655 
                                  if (((unsigned long long)(num_desc + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    #line 655 
                                    if (((unsigned long long)(num_desc + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      #line 655 
                                      if (((unsigned long long)(num_desc + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        #line 655 
                                        if (((unsigned long long)(num_desc + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          #line 655 
                                          if (((unsigned long long)(num_desc + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            #line 655 
                                            if (((unsigned long long)(num_desc + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              #line 655 
                                              if (((unsigned long long)(num_desc + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                #line 655 
                                                if (((unsigned long long)(num_desc + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  #line 655 
                                                  if (((unsigned long long)(num_desc + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    #line 655 
                                                    if (((unsigned long long)(num_desc + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      #line 655 
                                                      if (((unsigned long long)(num_desc + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        #line 655 
                                                        if (((unsigned long long)(num_desc + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          #line 655 
                                                          if (((unsigned long long)(num_desc + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            #line 655 
                                                            if (((unsigned long long)(num_desc + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              #line 655 
                                                              if (((unsigned long long)(num_desc + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                #line 655 
                                                                if (((unsigned long long)(num_desc + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  #line 655 
                                                                  if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 655 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 655 
                                                                    tmp_3 = 8U; else 
                                                                    #line 655 
                                                                    tmp_3 = 4U;
                                                                    #line 655 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_4 = 16U;
                                                                    #line 655 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_5 = 32U;
                                                                    #line 655 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_6 = 64U;
                                                                    #line 655 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_7 = 128U;
                                                                    #line 655 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_8 = 256U;
                                                                    #line 655 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_9 = 512U;
                                                                    #line 655 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_10 = 1024U;
                                                                    #line 655 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_11 = 2048U;
                                                                    #line 655 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_12 = 4096U;
                                                                    #line 655 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_13 = 8192U;
                                                                    #line 655 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_14 = 16384U;
                                                                    #line 655 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_15 = 32768U;
                                                                    #line 655 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_16 = 65536U;
                                                                    #line 655 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_17 = 131072U;
                                                                    #line 655 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_18 = 262144U;
                                                                    #line 655 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_19 = 524288U;
                                                                    #line 655 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_20 = 1048576U;
                                                                    #line 655 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_21 = 2097152U;
                                                                    #line 655 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_22 = 4194304U;
                                                                    #line 655 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_23 = 8388608U;
                                                                    #line 655 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_24 = 16777216U;
                                                                    #line 655 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_25 = 33554432U;
                                                                    #line 655 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_26 = 67108864U;
                                                                    #line 655 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_27 = 134217728U;
                                                                    #line 655 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_28 = 268435456U;
                                                                    #line 655 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_29 = 536870912U;
                                                                    #line 655 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_30 = 1073741824U;
                                                                    #line 655 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_31 = 2147483648U;
                                                                    #line 655 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_32 = 0U;
                                                                    #line 655 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_33 = 0U;
                                                                    #line 655 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_34 = 0U;
                                                                    #line 655 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    #line 655 
                                                                    tmp_35 = 0U;
                                                                    #line 655 
                                                                    tmp_36 = tmp_35;
                                                                  }
                                                                  else 
                                                                    #line 655 
                                                                    tmp_36 = 0U;
                                                                  #line 655 
                                                                  tmp_37 = tmp_36;
                                                                }
                                                                else 
                                                                  #line 655 
                                                                  tmp_37 = 0U;
                                                                #line 655 
                                                                tmp_38 = tmp_37;
                                                              }
                                                              else 
                                                                   #line 655 
                                                                   tmp_38 = 0U;
                                                              #line 655 
                                                              tmp_39 = tmp_38;
                                                            }
                                                            else 
                                                                 #line 655 
                                                                 tmp_39 = 0U;
                                                            #line 655 
                                                            tmp_40 = tmp_39;
                                                          }
                                                          else 
                                                               #line 655 
                                                               tmp_40 = 0U;
                                                          #line 655 
                                                          tmp_41 = tmp_40;
                                                        }
                                                        else 
                                                             #line 655 
                                                             tmp_41 = 0U;
                                                        #line 655 
                                                        tmp_42 = tmp_41;
                                                      }
                                                      else 
                                                           #line 655 
                                                           tmp_42 = 0U;
                                                      #line 655 
                                                      tmp_43 = tmp_42;
                                                    }
                                                    else 
                                                         #line 655 
                                                         tmp_43 = 0U;
                                                    #line 655 
                                                    tmp_44 = tmp_43;
                                                  }
                                                  else 
                                                       #line 655 
                                                       tmp_44 = 0U;
                                                  #line 655 
                                                  tmp_45 = tmp_44;
                                                }
                                                else 
                                                     #line 655 
                                                     tmp_45 = 0U;
                                                #line 655 
                                                tmp_46 = tmp_45;
                                              }
                                              else 
                                                   #line 655 
                                                   tmp_46 = 0U;
                                              #line 655 
                                              tmp_47 = tmp_46;
                                            }
                                            else 
                                                 #line 655 
                                                 tmp_47 = 0U;
                                            #line 655 
                                            tmp_48 = tmp_47;
                                          }
                                          else 
                                               #line 655 
                                               tmp_48 = 0U;
                                          #line 655 
                                          tmp_49 = tmp_48;
                                        }
                                        else 
                                             #line 655 
                                             tmp_49 = 0U;
                                        #line 655 
                                        tmp_50 = tmp_49;
                                      }
                                      else 
                                           #line 655 
                                           tmp_50 = 0U;
                                      #line 655 
                                      tmp_51 = tmp_50;
                                    }
                                    else 
                                         #line 655 
                                         tmp_51 = 0U;
                                    #line 655 
                                    tmp_52 = tmp_51;
                                  }
                                  else 
                                       #line 655 
                                       tmp_52 = 0U;
                                  #line 655 
                                  tmp_53 = tmp_52;
                                }
                                else 
                                     #line 655 
                                     tmp_53 = 0U;
                                #line 655 
                                tmp_54 = tmp_53;
                              }
                              else 
                                   #line 655 
                                   tmp_54 = 0U;
                              #line 655 
                              tmp_55 = tmp_54;
                            }
                            else 
                                 #line 655 
                                 tmp_55 = 0U;
                            #line 655 
                            tmp_56 = tmp_55;
                          }
                          else 
                               #line 655 
                               tmp_56 = 0U;
                          #line 655 
                          tmp_57 = tmp_56;
                        }
                        else 
                             #line 655 
                             tmp_57 = 0U;
                        #line 655 
                        tmp_58 = tmp_57;
                      }
                      else 
                           #line 655 
                           tmp_58 = 0U;
                      #line 655 
                      tmp_59 = tmp_58;
                    }
                    else 
                         #line 655 
                         tmp_59 = 0U;
                    #line 655 
                    tmp_60 = tmp_59;
                  }
                  else 
                       #line 655 
                       tmp_60 = 0U;
                  #line 655 
                  tmp_61 = tmp_60;
                }
                else 
                     #line 655 
                     tmp_61 = 0U;
                #line 655 
                tmp_62 = tmp_61;
              }
              else 
                   #line 655 
                   tmp_62 = 0U;
              #line 655 
              tmp_63 = tmp_62;
            }
            else 
                 #line 655 
                 tmp_63 = 0U;
            #line 655 
            tmp_64 = tmp_63;
          }
          else 
               #line 655 
               tmp_64 = 0U;
          #line 655 
          tmp_65 = tmp_64;
        }
        else 
             #line 655 
             tmp_65 = 2U;
        #line 655 
        tmp_67 = tmp_65;
      }
      else {
        #line 655 
        tmp_67 = (unsigned int)(1UL << (__ilog2_u32(num_desc + 4294967295U) + 1));
      }
      #line 655 
      tmp_68 = tmp_67;
    }
    else 
         #line 655 
         tmp_68 = 1U;
    #line 655 
    num_desc = tmp_68;
  }
  else {
    #line 655 
    num_desc = (unsigned int)__roundup_pow_of_two((unsigned long)num_desc);
  }
  #line 657 
  if (val != num_desc) 
                       #line 658 
                       printk((char *)"\001",(char *)(& qlcnic_driver_name),r_name,num_desc,val);
  #line 662 
  return num_desc;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  #line 670 
  u16 num_rxd;
  #line 670 
  u16 num_jumbo_rxd;
  #line 670 
  u16 num_txd;
  #line 669 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 672 
  if (ring->rx_mini_pending != 0U) 
                                   #line 673 
                                   return -95;
  #line 675 
  num_rxd = (unsigned short)qlcnic_validate_ringparam(ring->rx_pending,64U,
                                  (unsigned int)adapter->max_rxd,
                                  (char *)"rx");
  #line 678 
  num_jumbo_rxd = (unsigned short)qlcnic_validate_ringparam(ring->rx_jumbo_pending,32U,
                                  (unsigned int)adapter->max_jumbo_rxd,
                                  (char *)"rx jumbo");
  #line 682 
  num_txd = (unsigned short)qlcnic_validate_ringparam(ring->tx_pending,64U,1024U,(char *)"tx");
  #line 685 
  if (((int)adapter->num_rxd == (int)num_rxd && (int)adapter->num_txd == (int)num_txd) && (int)adapter->num_jumbo_rxd == (int)num_jumbo_rxd) 
    #line 687 
    return 0;
  #line 689 
  adapter->num_rxd = num_rxd;
  #line 690 
  adapter->num_jumbo_rxd = num_jumbo_rxd;
  #line 691 
  adapter->num_txd = num_txd;
  #line 693 
  return qlcnic_reset_context(adapter);
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_validate_ring_count(struct qlcnic_adapter *adapter, u8 rx_ring, u8 tx_ring)
{
  #line 699 
  if ((unsigned int)rx_ring == 0U || (unsigned int)tx_ring == 0U) 
                                                                  #line 700 
                                                                  return -22;
  #line 702 
  if ((unsigned int)rx_ring != 0U) 
    #line 703 
    if ((int)adapter->max_sds_rings < (int)rx_ring) {
      #line 704 
      netdev_err(adapter->netdev,(char *)"Invalid ring count, SDS ring count %d should not be greater than max %d driver sds rings.\n",(int)rx_ring,(int)adapter->max_sds_rings);
      #line 707 
      return -22;
    }
  #line 711 
  if ((unsigned int)tx_ring != 0U) 
    #line 712 
    if ((int)adapter->max_tx_rings < (int)tx_ring) {
      #line 713 
      netdev_err(adapter->netdev,(char *)"Invalid ring count, Tx ring count %d should not be greater than max %d driver Tx rings.\n",(int)tx_ring,(int)adapter->max_tx_rings);
      #line 716 
      return -22;
    }
  #line 720 
  return 0;
}

#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_channels(struct net_device *dev, struct ethtool_channels *channel)
{
  #line 726 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 728 
  channel->max_rx = (unsigned int)adapter->max_sds_rings;
  #line 729 
  channel->max_tx = (unsigned int)adapter->max_tx_rings;
  #line 730 
  channel->rx_count = (unsigned int)adapter->drv_sds_rings;
  #line 731 
  channel->tx_count = (unsigned int)adapter->drv_tx_rings;
  #line 732 
  return;
}

#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_channels(struct net_device *dev, struct ethtool_channels *channel)
{
  #line 738 
  int err;
  #line 737 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 740 
  if ((adapter->flags & 4U) == 0U) {
    #line 741 
    netdev_err(dev,(char *)"No RSS/TSS support in non MSI-X mode\n");
    #line 742 
    return -22;
  }
  #line 745 
  if (channel->other_count != 0U || channel->combined_count != 0U) 
                                                                   #line 746 
                                                                   return -22;
  #line 748 
  err = qlcnic_validate_ring_count(adapter,(unsigned char)((int)((unsigned char)channel->rx_count)),(unsigned char)((int)((unsigned char)channel->tx_count)));
  #line 750 
  if (err != 0) 
                #line 751 
                return err;
  #line 753 
  if ((unsigned int)adapter->drv_sds_rings != channel->rx_count) {
    #line 754 
    err = qlcnic_validate_rings(adapter,channel->rx_count,2);
    #line 756 
    if (err != 0) {
      #line 757 
      netdev_err(dev,(char *)"Unable to configure %u SDS rings\n",channel->rx_count);
      #line 759 
      return err;
    }
    #line 761 
    adapter->drv_rss_rings = (unsigned char)channel->rx_count;
  }
  #line 764 
  if ((unsigned int)adapter->drv_tx_rings != channel->tx_count) {
    #line 765 
    err = qlcnic_validate_rings(adapter,channel->tx_count,1);
    #line 767 
    if (err != 0) {
      #line 768 
      netdev_err(dev,(char *)"Unable to configure %u Tx rings\n",channel->tx_count);
      #line 770 
      return err;
    }
    #line 772 
    adapter->drv_tss_rings = (unsigned char)channel->tx_count;
  }
  #line 775 
  adapter->flags |= 524288U;
  #line 777 
  err = qlcnic_setup_rings(adapter);
  #line 778 
  netdev_info(dev,(char *)"Allocated %d SDS rings and %d Tx rings\n",(int)adapter->drv_sds_rings,(int)adapter->drv_tx_rings);
  #line 781 
  return err;
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 791 
  __u32 val;
  #line 788 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 789 
  int port = (int)(adapter->ahw)->physical_port;
  #line 790 
  int err = 0;
  #line 793 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 794 
    qlcnic_83xx_get_pauseparam(adapter,pause);
    #line 795 
    return;
  }
  #line 797 
  if ((unsigned int)(adapter->ahw)->port_type == 1U) {
    #line 798 
    if ((unsigned int)port > 4U) 
                                 #line 799 
                                 return;
    #line 801 
    val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,
                                                (unsigned long)(port * 65536) + 107151360UL,
                                                & err);
    #line 802 
    if (err == -5) 
                   #line 803 
                   return;
    #line 804 
    pause->rx_pause = (val >> 5) & 1U;
    #line 805 
    val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,106955532UL,& err);
    #line 806 
    if (err == -5) 
                   #line 807 
                   return;
    #line 808 
    switch (port) {
      #line 809 
      case 0: 
              #line 809 
      ;
      #line 810 
      pause->tx_pause = (unsigned int)((val & 1U) == 0U);
      #line 811 
      break;
      #line 812 
      case 1: 
              #line 812 
      ;
      #line 813 
      pause->tx_pause = (unsigned int)((val & 4U) == 0U);
      #line 814 
      break;
      #line 815 
      case 2: 
              #line 815 
      ;
      #line 816 
      pause->tx_pause = (unsigned int)((val & 16U) == 0U);
      #line 817 
      break;
      #line 818 
      case 3: 
              #line 818 
      ;
      #line 819 
      default: 
               #line 819 
      ;
      #line 820 
      pause->tx_pause = (unsigned int)((val & 64U) == 0U);
      #line 821 
      break;
    }
  }
  else 
    #line 823 
    if ((unsigned int)(adapter->ahw)->port_type == 2U) {
      #line 824 
      if ((unsigned int)port > 2U) 
                                   #line 825 
                                   return;
      #line 826 
      pause->rx_pause = 1U;
      #line 827 
      val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,106954904UL,& err);
      #line 828 
      if (err == -5) 
                     #line 829 
                     return;
      #line 830 
      if (port == 0) 
                     #line 831 
                     pause->tx_pause = (unsigned int)((val & 1U) == 0U); else 
                                                                    #line 833 
                                                                    pause->tx_pause = (unsigned int)((val & 8U) == 0U);
    }
    else 
         #line 835 
         _dev_err(& netdev->dev,(char *)"Unknown board type: %x\n",(int)(adapter->ahw)->port_type);
  #line 836 
  return;
}

#line 841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 847 
  __u32 val;
  #line 844 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 845 
  int port = (int)(adapter->ahw)->physical_port;
  #line 846 
  int err = 0;
  #line 849 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 850 
    return qlcnic_83xx_set_pauseparam(adapter,pause);
  }
  #line 853 
  if ((unsigned int)(adapter->ahw)->port_type == 1U) {
    #line 854 
    if ((unsigned int)port > 4U) 
                                 #line 855 
                                 return -5;
    #line 857 
    val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,
                                                (unsigned long)(port * 65536) + 107151360UL,
                                                & err);
    #line 858 
    if (err == -5) 
                   #line 859 
                   return err;
    #line 861 
    if (pause->rx_pause != 0U) 
                               #line 862 
                               val |= 32U; else 
                                                #line 864 
                                                val &= 4294967263U;
    #line 866 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)(port * 65536) + 107151360UL,val);
    #line 868 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)(port * 65536) + 107151360UL,val);
    #line 870 
    val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,106955532UL,& err);
    #line 871 
    if (err == -5) 
                   #line 872 
                   return err;
    #line 873 
    switch (port) {
      #line 874 
      case 0: 
              #line 874 
      ;
      #line 875 
      if (pause->tx_pause != 0U) 
                                 #line 876 
                                 val &= 4294967294U; else 
                                                          #line 878 
                                                          val |= 1U;
      #line 879 
      break;
      #line 880 
      case 1: 
              #line 880 
      ;
      #line 881 
      if (pause->tx_pause != 0U) 
                                 #line 882 
                                 val &= 4294967291U; else 
                                                          #line 884 
                                                          val |= 4U;
      #line 885 
      break;
      #line 886 
      case 2: 
              #line 886 
      ;
      #line 887 
      if (pause->tx_pause != 0U) 
                                 #line 888 
                                 val &= 4294967279U; else 
                                                          #line 890 
                                                          val |= 16U;
      #line 891 
      break;
      #line 892 
      case 3: 
              #line 892 
      ;
      #line 893 
      default: 
               #line 893 
      ;
      #line 894 
      if (pause->tx_pause != 0U) 
                                 #line 895 
                                 val &= 4294967231U; else 
                                                          #line 897 
                                                          val |= 64U;
      #line 898 
      break;
    }
    #line 900 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106955532UL,val);
  }
  else 
    #line 901 
    if ((unsigned int)(adapter->ahw)->port_type == 2U) {
      #line 902 
      if (pause->rx_pause == 0U || pause->autoneg != 0U) 
                                                         #line 903 
                                                         return -95;
      #line 905 
      if ((unsigned int)port > 2U) 
                                   #line 906 
                                   return -5;
      #line 908 
      val = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,106954904UL,& err);
      #line 909 
      if (err == -5) 
                     #line 910 
                     return err;
      #line 911 
      if (port == 0) 
        #line 912 
        if (pause->tx_pause != 0U) 
                                   #line 913 
                                   val &= 4294967294U; else 
                                                            #line 915 
                                                            val |= 1U;
      else 
        #line 917 
        if (pause->tx_pause != 0U) 
                                   #line 918 
                                   val &= 4294967287U; else 
                                                            #line 920 
                                                            val |= 8U;
      #line 922 
      (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106954904UL,val);
    }
    else 
         #line 924 
         _dev_err(& netdev->dev,(char *)"Unknown board type: %x\n",(int)(adapter->ahw)->port_type);
  #line 927 
  return 0;
}

#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_reg_test(struct net_device *dev)
{
  #line 933 
  u32 data_read;
  #line 932 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 934 
  int err = 0;
  #line 936 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 937 
    return qlcnic_83xx_reg_test(adapter);
  }
  #line 939 
  data_read = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,101711872UL,& err);
  #line 940 
  if (err == -5) 
                 #line 941 
                 return err;
  #line 942 
  if ((data_read & 65535U) != (unsigned int)(adapter->pdev)->vendor) 
    #line 943 
    return 1;
  #line 945 
  return 0;
}

#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_eeprom_test(struct net_device *dev)
{
  #line 950 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 952 
  if ((int)qlcnic_82xx_check(adapter) != 0) 
                                            #line 953 
                                            return 0;
  #line 955 
  return qlcnic_83xx_flash_test(adapter);
}

#line 958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_sset_count(struct net_device *dev, int sset)
{
  #line 961 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 962 
  switch (sset) {
    #line 963 
    case 0: 
            #line 963 
    ;
    #line 964 
    return 6;
    #line 965 
    case 1: 
            #line 965 
    ;
    #line 966 
    return qlcnic_dev_statistics_len(adapter);
    #line 967 
    default: 
             #line 967 
    ;
    #line 968 
    return -95;
  }
}

#line 972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_irq_test(struct net_device *netdev)
{
  #line 976 
  struct qlcnic_cmd_args cmd;
  #line 977 
  int ret;
  #line 974 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 975 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 977 
  int drv_sds_rings = (int)adapter->drv_sds_rings;
  #line 978 
  int drv_tx_rings = (int)adapter->drv_tx_rings;
  #line 980 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 981 
    return qlcnic_83xx_interrupt_test(netdev);
  }
  #line 983 
  if ((int)test_and_set_bit(2L,& adapter->state) != 0) 
                                                       #line 984 
                                                       return -5;
  #line 986 
  ret = qlcnic_diag_alloc_res(netdev,1);
  #line 987 
  if (ret != 0) 
                #line 988 
                goto clear_diag_irq;
  #line 990 
  ahw->diag_cnt = 0;
  #line 991 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,17U);
  #line 992 
  if (ret != 0) 
                #line 993 
                goto free_diag_res;
  #line 995 
  *(cmd.req.arg + 1U) = (unsigned int)ahw->pci_func;
  #line 996 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  #line 997 
  if (ret != 0) 
                #line 998 
                goto done;
  #line 1000 
  usleep_range(1000UL,12000UL);
  #line 1001 
  ret = ahw->diag_cnt == 0;
  #line 1003 
  done: 
        #line 1003 
  ;
  #line 1004 
  qlcnic_free_mbx_args(& cmd);
  #line 1006 
  free_diag_res: 
                 #line 1006 
  ;
  #line 1007 
  qlcnic_diag_free_res(netdev,drv_sds_rings);
  #line 1009 
  clear_diag_irq: 
                  #line 1009 
  ;
  #line 1010 
  adapter->drv_sds_rings = (unsigned char)drv_sds_rings;
  #line 1011 
  adapter->drv_tx_rings = (unsigned char)drv_tx_rings;
  #line 1012 
  cif_clear_bit_7(2L,& adapter->state);
  #line 1014 
  return ret;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_create_loopback_buff(unsigned char *data, u8 *mac)
{
  #line 1025 
  unsigned char random_data[4U] = {(unsigned char)168U, (unsigned char)6U, (unsigned char)69U, (unsigned char)0U};
  #line 1027 
  memset((void *)data,78,64UL);
  #line 1029 
  memcpy((void *)data,(void *)mac,6UL);
  #line 1030 
  memcpy((void *)(data + 6U),(void *)mac,6UL);
  #line 1032 
  memcpy((void *)(data + 12U),(void *)(& random_data),4UL);
  #line 1033 
  return;
}

#line 1035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
int qlcnic_check_loopback_buff(unsigned char *data, u8 *mac)
{
  #line 1037 
  unsigned char buff[64U];
  #line 1038 
  qlcnic_create_loopback_buff((unsigned char *)(& buff),mac);
  #line 1039 
  return memcmp((void *)data,(void *)(& buff),64UL);
}

#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
int qlcnic_do_lb_test(struct qlcnic_adapter *adapter, u8 mode)
{
  #line 1046 
  struct sk_buff *skb;
  #line 1047 
  int i;
  #line 1047 
  int loop;
  #line 1044 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1045 
  struct qlcnic_host_sds_ring *sds_ring = recv_ctx->sds_rings;
  #line 1047 
  int cnt = 0;
  #line 1049 
  i = 0;
  #line 1049 
  while (i <= 15) {
    #line 1050 
    skb = netdev_alloc_skb(adapter->netdev,64U);
    #line 1051 
    if (skb == (struct sk_buff *)0) 
                                    #line 1052 
                                    break;
    #line 1053 
    qlcnic_create_loopback_buff(skb->data,(u8 *)(& adapter->mac_addr));
    #line 1054 
    skb_put(skb,64U);
    #line 1055 
    (adapter->ahw)->diag_cnt = 0;
    #line 1056 
    qlcnic_xmit_frame(skb,adapter->netdev);
    #line 1057 
    loop = 0;
    #line 1059 
    while (1) {
      {
        #line 1062 
        int tmp;
        #line 1060 
        msleep(1U);
        #line 1061 
        qlcnic_process_rcv_ring_diag(sds_ring);
        #line 1062 
        tmp = loop;
        #line 1062 
        loop ++;
        #line 1062 
        ;
        #line 1062 
        if (tmp > 20) 
                      #line 1063 
                      break;
      }
      #line 1064 
      if (! ((adapter->ahw)->diag_cnt == 0)) 
                                             #line 1059 
                                             break;
    }
    #line 1066 
    dev_kfree_skb_any(skb);
    #line 1068 
    if ((adapter->ahw)->diag_cnt == 0) 
                                       #line 1069 
                                       _dev_warn(& (adapter->pdev)->dev,(char *)"LB Test: packet #%d was not received\n",i + 1); else 
                                                                    #line 1073 
                                                                    cnt ++;
    #line 1049 
    i ++;
  }
  #line 1075 
  if (cnt != i) {
    #line 1076 
    _dev_err(& (adapter->pdev)->dev,(char *)"LB Test: failed, TX[%d], RX[%d]\n",i,cnt);
    #line 1078 
    if ((unsigned int)mode != 1U) 
                                  #line 1079 
                                  _dev_warn(& (adapter->pdev)->dev,(char *)"WARNING: Please check loopback cable\n");
    #line 1081 
    return -1;
  }
  #line 1083 
  return 0;
}

#line 1086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_loopback_test(struct net_device *netdev, u8 mode)
{
  #line 1091 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1094 
  int ret;
  #line 1105 
  char *tmp_2;
  #line 1088 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1089 
  int drv_tx_rings = (int)adapter->drv_tx_rings;
  #line 1090 
  int drv_sds_rings = (int)adapter->drv_sds_rings;
  #line 1092 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 1093 
  int loop = 0;
  #line 1096 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 1097 
    return qlcnic_83xx_loopback_test(netdev,(unsigned char)((int)mode));
  }
  #line 1099 
  if ((ahw->capabilities & 134217728U) == 0U) {
    #line 1100 
    _dev_info(& (adapter->pdev)->dev,(char *)"Firmware do not support loopback test\n");
    #line 1102 
    return -95;
  }
  #line 1105 
  if ((unsigned int)mode == 1U) 
                                #line 1105 
                                tmp_2 = (char *)"internal"; else 
                                                                 #line 1105 
                                                                 tmp_2 = (char *)"external";
  #line 1105 
  ;
  #line 1105 
  _dev_warn(& (adapter->pdev)->dev,(char *)"%s loopback test in progress\n",tmp_2);
  #line 1107 
  if ((unsigned int)ahw->op_mode == 2U) {
    #line 1108 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Loopback test not supported in nonprivileged mode\n");
    #line 1110 
    return 0;
  }
  #line 1113 
  if ((int)test_and_set_bit(2L,& adapter->state) != 0) 
                                                       #line 1114 
                                                       return -16;
  #line 1116 
  ret = qlcnic_diag_alloc_res(netdev,2);
  #line 1117 
  if (ret != 0) 
                #line 1118 
                goto clear_it;
  #line 1120 
  sds_ring = (adapter->recv_ctx)->sds_rings;
  #line 1121 
  ret = qlcnic_set_lb_mode(adapter,(unsigned char)((int)mode));
  #line 1122 
  if (ret != 0) 
                #line 1123 
                goto free_res;
  #line 1125 
  ahw->diag_cnt = 0;
  #line 1126 
  while (1) {
    {
      #line 1129 
      int tmp_4;
      #line 1127 
      msleep(500U);
      #line 1128 
      qlcnic_process_rcv_ring_diag(sds_ring);
      #line 1129 
      tmp_4 = loop;
      #line 1129 
      loop ++;
      #line 1129 
      ;
      #line 1129 
      if (tmp_4 > 10) {
        #line 1130 
        netdev_info(netdev,(char *)"Firmware didn\'t sent link up event to loopback request\n");
        #line 1132 
        ret = -110;
        #line 1133 
        goto free_res;
      }
      else 
        #line 1134 
        if ((adapter->ahw)->diag_cnt != 0) {
          #line 1135 
          ret = (adapter->ahw)->diag_cnt;
          #line 1136 
          goto free_res;
        }
    }
    #line 1138 
    if (! ((unsigned int)ahw->loopback_state != 3U)) 
                                                     #line 1126 
                                                     break;
  }
  #line 1140 
  ret = qlcnic_do_lb_test(adapter,(unsigned char)((int)mode));
  #line 1142 
  qlcnic_clear_lb_mode(adapter,(unsigned char)((int)mode));
  #line 1144 
  free_res: 
            #line 1144 
  ;
  #line 1145 
  qlcnic_diag_free_res(netdev,drv_sds_rings);
  #line 1147 
  clear_it: 
            #line 1147 
  ;
  #line 1148 
  adapter->drv_sds_rings = (unsigned char)drv_sds_rings;
  #line 1149 
  adapter->drv_tx_rings = (unsigned char)drv_tx_rings;
  #line 1150 
  cif_clear_bit_7(2L,& adapter->state);
  #line 1151 
  return ret;
}

#line 1155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_diag_test(struct net_device *dev, struct ethtool_test *eth_test, u64 *data)
{
  #line 1158 
  memset((void *)data,0,48UL);
  #line 1160 
  *data = (unsigned long long)qlcnic_reg_test(dev);
  #line 1161 
  if (*data != 0ULL) 
                     #line 1162 
                     eth_test->flags |= 2U;
  #line 1164 
  *(data + 1U) = (unsigned long long)qlcnic_test_link(dev);
  #line 1165 
  if (*(data + 1U) != 0ULL) 
                            #line 1166 
                            eth_test->flags |= 2U;
  #line 1168 
  if ((eth_test->flags & 1U) != 0U) {
    #line 1169 
    *(data + 2U) = (unsigned long long)qlcnic_irq_test(dev);
    #line 1170 
    if (*(data + 2U) != 0ULL) 
                              #line 1171 
                              eth_test->flags |= 2U;
    #line 1173 
    *(data + 3U) = (unsigned long long)qlcnic_loopback_test(dev,(unsigned char)1);
    #line 1174 
    if (*(data + 3U) != 0ULL) 
                              #line 1175 
                              eth_test->flags |= 2U;
    #line 1177 
    if ((eth_test->flags & 4U) != 0U) {
      #line 1178 
      *(data + 4U) = (unsigned long long)qlcnic_loopback_test(dev,(unsigned char)2);
      #line 1179 
      if (*(data + 4U) != 0ULL) 
                                #line 1180 
                                eth_test->flags |= 2U;
      #line 1181 
      eth_test->flags |= 8U;
    }
    #line 1184 
    *(data + 5U) = (unsigned long long)qlcnic_eeprom_test(dev);
    #line 1185 
    if (*(data + 5U) != 0ULL) 
                              #line 1186 
                              eth_test->flags |= 2U;
  }
  #line 1188 
  return;
}

#line 1191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 1194 
  int index;
  #line 1194 
  int i;
  #line 1194 
  int num_stats;
  #line 1193 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 1196 
  switch (stringset) {
    #line 1197 
    case (u32)0: 
                 #line 1197 
    ;
    #line 1198 
    memcpy((void *)data,(void *)(& qlcnic_gstrings_test),192UL);
    #line 1200 
    break;
    #line 1201 
    case (u32)1: 
                 #line 1201 
    ;
    #line 1202 
    num_stats = 5;
    #line 1203 
    i = 0;
    #line 1203 
    while ((int)adapter->drv_tx_rings > i) {
      #line 1204 
      index = 0;
      #line 1204 
      while (index < num_stats) {
        #line 1205 
        sprintf((char *)data,(char *)"tx_queue_%d %s",i,(char *)(& qlcnic_tx_queue_stats_strings[index]));
        #line 1207 
        data += 32U;
        #line 1204 
        index ++;
      }
      #line 1203 
      i ++;
    }
    #line 1211 
    index = 0;
    #line 1211 
    while ((unsigned int)index <= 22U) {
      #line 1212 
      memcpy((void *)(data + (unsigned long)(index * 32)),(void *)(& qlcnic_gstrings_stats[index].stat_string),32UL);
      #line 1211 
      index ++;
    }
    #line 1217 
    if ((int)qlcnic_83xx_check(adapter) != 0) {
      #line 1218 
      num_stats = 5;
      #line 1219 
      i = 0;
      #line 1219 
      while (i < num_stats) {
        #line 1220 
        memcpy((void *)(data + (unsigned long)(index * 32)),(void *)(& qlcnic_83xx_tx_stats_strings[i]),32UL);
        #line 1219 
        i ++;
        #line 1219 
        index ++;
      }
      #line 1223 
      num_stats = 40;
      #line 1224 
      i = 0;
      #line 1224 
      while (i < num_stats) {
        #line 1225 
        memcpy((void *)(data + (unsigned long)(index * 32)),(void *)(& qlcnic_83xx_mac_stats_strings[i]),32UL);
        #line 1224 
        i ++;
        #line 1224 
        index ++;
      }
      #line 1228 
      num_stats = 17;
      #line 1229 
      i = 0;
      #line 1229 
      while (i < num_stats) {
        #line 1230 
        memcpy((void *)(data + (unsigned long)(index * 32)),(void *)(& qlcnic_83xx_rx_stats_strings[i]),32UL);
        #line 1229 
        i ++;
        #line 1229 
        index ++;
      }
      #line 1233 
      return;
    }
    else {
      #line 1235 
      num_stats = 40;
      #line 1236 
      i = 0;
      #line 1236 
      while (i < num_stats) {
        #line 1237 
        memcpy((void *)(data + (unsigned long)(index * 32)),(void *)(& qlcnic_83xx_mac_stats_strings[i]),32UL);
        #line 1236 
        i ++;
        #line 1236 
        index ++;
      }
    }
    #line 1241 
    if ((adapter->flags & 64U) == 0U) 
                                      #line 1242 
                                      return;
    #line 1243 
    num_stats = 14;
    #line 1244 
    i = 0;
    #line 1244 
    while (i < num_stats) {
      #line 1245 
      memcpy((void *)(data + (unsigned long)(index * 32)),(void *)(& qlcnic_device_gstrings_stats[i]),32UL);
      #line 1244 
      index ++;
      #line 1244 
      i ++;
    }
  }
  #line 1248 
  return;
}

#line 1252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u64 *qlcnic_fill_stats(u64 *data, void *stats, int type)
{
  #line 1254 
  if (type == 1) {
    #line 1257 
    u64 *tmp;
    #line 1258 
    u64 *tmp_0;
    #line 1259 
    u64 *tmp_1;
    #line 1260 
    u64 *tmp_2;
    #line 1261 
    u64 *tmp_3;
    #line 1262 
    u64 *tmp_4;
    #line 1263 
    u64 *tmp_5;
    #line 1264 
    u64 *tmp_6;
    #line 1265 
    u64 *tmp_7;
    #line 1266 
    u64 *tmp_8;
    #line 1267 
    u64 *tmp_9;
    #line 1268 
    u64 *tmp_10;
    #line 1269 
    u64 *tmp_11;
    #line 1270 
    u64 *tmp_12;
    #line 1271 
    u64 *tmp_13;
    #line 1272 
    u64 *tmp_14;
    #line 1273 
    u64 *tmp_15;
    #line 1274 
    u64 *tmp_16;
    #line 1275 
    u64 *tmp_17;
    #line 1276 
    u64 *tmp_18;
    #line 1277 
    u64 *tmp_19;
    #line 1278 
    u64 *tmp_20;
    #line 1279 
    u64 *tmp_21;
    #line 1280 
    u64 *tmp_22;
    #line 1281 
    u64 *tmp_23;
    #line 1282 
    u64 *tmp_24;
    #line 1283 
    u64 *tmp_25;
    #line 1284 
    u64 *tmp_26;
    #line 1285 
    u64 *tmp_27;
    #line 1286 
    u64 *tmp_28;
    #line 1287 
    u64 *tmp_29;
    #line 1288 
    u64 *tmp_30;
    #line 1289 
    u64 *tmp_31;
    #line 1255 
    struct qlcnic_mac_statistics *mac_stats = (struct qlcnic_mac_statistics *)stats;
    #line 1257 
    tmp = data;
    #line 1257 
    data ++;
    #line 1257 
    if (mac_stats->mac_tx_frames != 18446744073709551615ULL) 
                                                             #line 1257 
                                                             *tmp = mac_stats->mac_tx_frames; else 
                                                                    #line 1257 
                                                                    *tmp = 0ULL;
    #line 1258 
    tmp_0 = data;
    #line 1258 
    data ++;
    #line 1258 
    if (mac_stats->mac_tx_bytes != 18446744073709551615ULL) 
                                                            #line 1258 
                                                            *tmp_0 = mac_stats->mac_tx_bytes; else 
                                                                    #line 1258 
                                                                    *tmp_0 = 0ULL;
    #line 1259 
    tmp_1 = data;
    #line 1259 
    data ++;
    #line 1259 
    if (mac_stats->mac_tx_mcast_pkts != 18446744073709551615ULL) 
                                                                 #line 1259 
                                                                 *tmp_1 = mac_stats->mac_tx_mcast_pkts; else 
                                                                    #line 1259 
                                                                    *tmp_1 = 0ULL;
    #line 1260 
    tmp_2 = data;
    #line 1260 
    data ++;
    #line 1260 
    if (mac_stats->mac_tx_bcast_pkts != 18446744073709551615ULL) 
                                                                 #line 1260 
                                                                 *tmp_2 = mac_stats->mac_tx_bcast_pkts; else 
                                                                    #line 1260 
                                                                    *tmp_2 = 0ULL;
    #line 1261 
    tmp_3 = data;
    #line 1261 
    data ++;
    #line 1261 
    if (mac_stats->mac_tx_pause_cnt != 18446744073709551615ULL) 
                                                                #line 1261 
                                                                *tmp_3 = mac_stats->mac_tx_pause_cnt; else 
                                                                    #line 1261 
                                                                    *tmp_3 = 0ULL;
    #line 1262 
    tmp_4 = data;
    #line 1262 
    data ++;
    #line 1262 
    if (mac_stats->mac_tx_ctrl_pkt != 18446744073709551615ULL) 
                                                               #line 1262 
                                                               *tmp_4 = mac_stats->mac_tx_ctrl_pkt; else 
                                                                    #line 1262 
                                                                    *tmp_4 = 0ULL;
    #line 1263 
    tmp_5 = data;
    #line 1263 
    data ++;
    #line 1263 
    if (mac_stats->mac_tx_lt_64b_pkts != 18446744073709551615ULL) 
                                                                  #line 1263 
                                                                  *tmp_5 = mac_stats->mac_tx_lt_64b_pkts; else 
                                                                    #line 1263 
                                                                    *tmp_5 = 0ULL;
    #line 1264 
    tmp_6 = data;
    #line 1264 
    data ++;
    #line 1264 
    if (mac_stats->mac_tx_lt_127b_pkts != 18446744073709551615ULL) 
                                                                   #line 1264 
                                                                   *tmp_6 = mac_stats->mac_tx_lt_127b_pkts; else 
                                                                    #line 1264 
                                                                    *tmp_6 = 0ULL;
    #line 1265 
    tmp_7 = data;
    #line 1265 
    data ++;
    #line 1265 
    if (mac_stats->mac_tx_lt_255b_pkts != 18446744073709551615ULL) 
                                                                   #line 1265 
                                                                   *tmp_7 = mac_stats->mac_tx_lt_255b_pkts; else 
                                                                    #line 1265 
                                                                    *tmp_7 = 0ULL;
    #line 1266 
    tmp_8 = data;
    #line 1266 
    data ++;
    #line 1266 
    if (mac_stats->mac_tx_lt_511b_pkts != 18446744073709551615ULL) 
                                                                   #line 1266 
                                                                   *tmp_8 = mac_stats->mac_tx_lt_511b_pkts; else 
                                                                    #line 1266 
                                                                    *tmp_8 = 0ULL;
    #line 1267 
    tmp_9 = data;
    #line 1267 
    data ++;
    #line 1267 
    if (mac_stats->mac_tx_lt_1023b_pkts != 18446744073709551615ULL) 
                                                                    #line 1267 
                                                                    *tmp_9 = mac_stats->mac_tx_lt_1023b_pkts; else 
                                                                    #line 1267 
                                                                    *tmp_9 = 0ULL;
    #line 1268 
    tmp_10 = data;
    #line 1268 
    data ++;
    #line 1268 
    if (mac_stats->mac_tx_lt_1518b_pkts != 18446744073709551615ULL) 
                                                                    #line 1268 
                                                                    *tmp_10 = mac_stats->mac_tx_lt_1518b_pkts; else 
                                                                    #line 1268 
                                                                    *tmp_10 = 0ULL;
    #line 1269 
    tmp_11 = data;
    #line 1269 
    data ++;
    #line 1269 
    if (mac_stats->mac_tx_gt_1518b_pkts != 18446744073709551615ULL) 
                                                                    #line 1269 
                                                                    *tmp_11 = mac_stats->mac_tx_gt_1518b_pkts; else 
                                                                    #line 1269 
                                                                    *tmp_11 = 0ULL;
    #line 1270 
    tmp_12 = data;
    #line 1270 
    data ++;
    #line 1270 
    if (mac_stats->mac_rx_frames != 18446744073709551615ULL) 
                                                             #line 1270 
                                                             *tmp_12 = mac_stats->mac_rx_frames; else 
                                                                    #line 1270 
                                                                    *tmp_12 = 0ULL;
    #line 1271 
    tmp_13 = data;
    #line 1271 
    data ++;
    #line 1271 
    if (mac_stats->mac_rx_bytes != 18446744073709551615ULL) 
                                                            #line 1271 
                                                            *tmp_13 = mac_stats->mac_rx_bytes; else 
                                                                    #line 1271 
                                                                    *tmp_13 = 0ULL;
    #line 1272 
    tmp_14 = data;
    #line 1272 
    data ++;
    #line 1272 
    if (mac_stats->mac_rx_mcast_pkts != 18446744073709551615ULL) 
                                                                 #line 1272 
                                                                 *tmp_14 = mac_stats->mac_rx_mcast_pkts; else 
                                                                    #line 1272 
                                                                    *tmp_14 = 0ULL;
    #line 1273 
    tmp_15 = data;
    #line 1273 
    data ++;
    #line 1273 
    if (mac_stats->mac_rx_bcast_pkts != 18446744073709551615ULL) 
                                                                 #line 1273 
                                                                 *tmp_15 = mac_stats->mac_rx_bcast_pkts; else 
                                                                    #line 1273 
                                                                    *tmp_15 = 0ULL;
    #line 1274 
    tmp_16 = data;
    #line 1274 
    data ++;
    #line 1274 
    if (mac_stats->mac_rx_pause_cnt != 18446744073709551615ULL) 
                                                                #line 1274 
                                                                *tmp_16 = mac_stats->mac_rx_pause_cnt; else 
                                                                    #line 1274 
                                                                    *tmp_16 = 0ULL;
    #line 1275 
    tmp_17 = data;
    #line 1275 
    data ++;
    #line 1275 
    if (mac_stats->mac_rx_ctrl_pkt != 18446744073709551615ULL) 
                                                               #line 1275 
                                                               *tmp_17 = mac_stats->mac_rx_ctrl_pkt; else 
                                                                    #line 1275 
                                                                    *tmp_17 = 0ULL;
    #line 1276 
    tmp_18 = data;
    #line 1276 
    data ++;
    #line 1276 
    if (mac_stats->mac_rx_lt_64b_pkts != 18446744073709551615ULL) 
                                                                  #line 1276 
                                                                  *tmp_18 = mac_stats->mac_rx_lt_64b_pkts; else 
                                                                    #line 1276 
                                                                    *tmp_18 = 0ULL;
    #line 1277 
    tmp_19 = data;
    #line 1277 
    data ++;
    #line 1277 
    if (mac_stats->mac_rx_lt_127b_pkts != 18446744073709551615ULL) 
                                                                   #line 1277 
                                                                   *tmp_19 = mac_stats->mac_rx_lt_127b_pkts; else 
                                                                    #line 1277 
                                                                    *tmp_19 = 0ULL;
    #line 1278 
    tmp_20 = data;
    #line 1278 
    data ++;
    #line 1278 
    if (mac_stats->mac_rx_lt_255b_pkts != 18446744073709551615ULL) 
                                                                   #line 1278 
                                                                   *tmp_20 = mac_stats->mac_rx_lt_255b_pkts; else 
                                                                    #line 1278 
                                                                    *tmp_20 = 0ULL;
    #line 1279 
    tmp_21 = data;
    #line 1279 
    data ++;
    #line 1279 
    if (mac_stats->mac_rx_lt_511b_pkts != 18446744073709551615ULL) 
                                                                   #line 1279 
                                                                   *tmp_21 = mac_stats->mac_rx_lt_511b_pkts; else 
                                                                    #line 1279 
                                                                    *tmp_21 = 0ULL;
    #line 1280 
    tmp_22 = data;
    #line 1280 
    data ++;
    #line 1280 
    if (mac_stats->mac_rx_lt_1023b_pkts != 18446744073709551615ULL) 
                                                                    #line 1280 
                                                                    *tmp_22 = mac_stats->mac_rx_lt_1023b_pkts; else 
                                                                    #line 1280 
                                                                    *tmp_22 = 0ULL;
    #line 1281 
    tmp_23 = data;
    #line 1281 
    data ++;
    #line 1281 
    if (mac_stats->mac_rx_lt_1518b_pkts != 18446744073709551615ULL) 
                                                                    #line 1281 
                                                                    *tmp_23 = mac_stats->mac_rx_lt_1518b_pkts; else 
                                                                    #line 1281 
                                                                    *tmp_23 = 0ULL;
    #line 1282 
    tmp_24 = data;
    #line 1282 
    data ++;
    #line 1282 
    if (mac_stats->mac_rx_gt_1518b_pkts != 18446744073709551615ULL) 
                                                                    #line 1282 
                                                                    *tmp_24 = mac_stats->mac_rx_gt_1518b_pkts; else 
                                                                    #line 1282 
                                                                    *tmp_24 = 0ULL;
    #line 1283 
    tmp_25 = data;
    #line 1283 
    data ++;
    #line 1283 
    if (mac_stats->mac_rx_length_error != 18446744073709551615ULL) 
                                                                   #line 1283 
                                                                   *tmp_25 = mac_stats->mac_rx_length_error; else 
                                                                    #line 1283 
                                                                    *tmp_25 = 0ULL;
    #line 1284 
    tmp_26 = data;
    #line 1284 
    data ++;
    #line 1284 
    if (mac_stats->mac_rx_length_small != 18446744073709551615ULL) 
                                                                   #line 1284 
                                                                   *tmp_26 = mac_stats->mac_rx_length_small; else 
                                                                    #line 1284 
                                                                    *tmp_26 = 0ULL;
    #line 1285 
    tmp_27 = data;
    #line 1285 
    data ++;
    #line 1285 
    if (mac_stats->mac_rx_length_large != 18446744073709551615ULL) 
                                                                   #line 1285 
                                                                   *tmp_27 = mac_stats->mac_rx_length_large; else 
                                                                    #line 1285 
                                                                    *tmp_27 = 0ULL;
    #line 1286 
    tmp_28 = data;
    #line 1286 
    data ++;
    #line 1286 
    if (mac_stats->mac_rx_jabber != 18446744073709551615ULL) 
                                                             #line 1286 
                                                             *tmp_28 = mac_stats->mac_rx_jabber; else 
                                                                    #line 1286 
                                                                    *tmp_28 = 0ULL;
    #line 1287 
    tmp_29 = data;
    #line 1287 
    data ++;
    #line 1287 
    if (mac_stats->mac_rx_dropped != 18446744073709551615ULL) 
                                                              #line 1287 
                                                              *tmp_29 = mac_stats->mac_rx_dropped; else 
                                                                    #line 1287 
                                                                    *tmp_29 = 0ULL;
    #line 1288 
    tmp_30 = data;
    #line 1288 
    data ++;
    #line 1288 
    if (mac_stats->mac_rx_crc_error != 18446744073709551615ULL) 
                                                                #line 1288 
                                                                *tmp_30 = mac_stats->mac_rx_crc_error; else 
                                                                    #line 1288 
                                                                    *tmp_30 = 0ULL;
    #line 1289 
    tmp_31 = data;
    #line 1289 
    data ++;
    #line 1289 
    if (mac_stats->mac_align_error != 18446744073709551615ULL) 
                                                               #line 1289 
                                                               *tmp_31 = mac_stats->mac_align_error; else 
                                                                    #line 1289 
                                                                    *tmp_31 = 0ULL;
  }
  else 
    #line 1290 
    if (type == 2) {
      #line 1293 
      u64 *tmp_32;
      #line 1294 
      u64 *tmp_33;
      #line 1295 
      u64 *tmp_34;
      #line 1296 
      u64 *tmp_35;
      #line 1297 
      u64 *tmp_36;
      #line 1298 
      u64 *tmp_37;
      #line 1299 
      u64 *tmp_38;
      #line 1291 
      struct __qlcnic_esw_statistics *esw_stats = (struct __qlcnic_esw_statistics *)stats;
      #line 1293 
      tmp_32 = data;
      #line 1293 
      data ++;
      #line 1293 
      if (esw_stats->unicast_frames != 18446744073709551615ULL) 
                                                                #line 1293 
                                                                *tmp_32 = esw_stats->unicast_frames; else 
                                                                    #line 1293 
                                                                    *tmp_32 = 0ULL;
      #line 1294 
      tmp_33 = data;
      #line 1294 
      data ++;
      #line 1294 
      if (esw_stats->multicast_frames != 18446744073709551615ULL) 
                                                                  #line 1294 
                                                                  *tmp_33 = esw_stats->multicast_frames; else 
                                                                    #line 1294 
                                                                    *tmp_33 = 0ULL;
      #line 1295 
      tmp_34 = data;
      #line 1295 
      data ++;
      #line 1295 
      if (esw_stats->broadcast_frames != 18446744073709551615ULL) 
                                                                  #line 1295 
                                                                  *tmp_34 = esw_stats->broadcast_frames; else 
                                                                    #line 1295 
                                                                    *tmp_34 = 0ULL;
      #line 1296 
      tmp_35 = data;
      #line 1296 
      data ++;
      #line 1296 
      if (esw_stats->dropped_frames != 18446744073709551615ULL) 
                                                                #line 1296 
                                                                *tmp_35 = esw_stats->dropped_frames; else 
                                                                    #line 1296 
                                                                    *tmp_35 = 0ULL;
      #line 1297 
      tmp_36 = data;
      #line 1297 
      data ++;
      #line 1297 
      if (esw_stats->errors != 18446744073709551615ULL) 
                                                        #line 1297 
                                                        *tmp_36 = esw_stats->errors; else 
                                                                    #line 1297 
                                                                    *tmp_36 = 0ULL;
      #line 1298 
      tmp_37 = data;
      #line 1298 
      data ++;
      #line 1298 
      if (esw_stats->local_frames != 18446744073709551615ULL) 
                                                              #line 1298 
                                                              *tmp_37 = esw_stats->local_frames; else 
                                                                    #line 1298 
                                                                    *tmp_37 = 0ULL;
      #line 1299 
      tmp_38 = data;
      #line 1299 
      data ++;
      #line 1299 
      if (esw_stats->numbytes != 18446744073709551615ULL) 
                                                          #line 1299 
                                                          *tmp_38 = esw_stats->numbytes; else 
                                                                    #line 1299 
                                                                    *tmp_38 = 0ULL;
    }
  #line 1301 
  return data;
}

#line 1304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
void qlcnic_update_stats(struct qlcnic_adapter *adapter)
{
  #line 1306 
  struct qlcnic_tx_queue_stats tx_stats;
  #line 1307 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1308 
  int ring;
  #line 1310 
  memset((void *)(& tx_stats),0,40UL);
  #line 1311 
  ring = 0;
  #line 1311 
  while ((int)adapter->drv_tx_rings > ring) {
    #line 1312 
    tx_ring = adapter->tx_ring + (unsigned long)ring;
    #line 1313 
    tx_stats.xmit_on += tx_ring->tx_stats.xmit_on;
    #line 1314 
    tx_stats.xmit_off += tx_ring->tx_stats.xmit_off;
    #line 1315 
    tx_stats.xmit_called += tx_ring->tx_stats.xmit_called;
    #line 1316 
    tx_stats.xmit_finished += tx_ring->tx_stats.xmit_finished;
    #line 1317 
    tx_stats.tx_bytes += tx_ring->tx_stats.tx_bytes;
    #line 1311 
    ring ++;
  }
  #line 1320 
  adapter->stats.xmit_on = tx_stats.xmit_on;
  #line 1321 
  adapter->stats.xmit_off = tx_stats.xmit_off;
  #line 1322 
  adapter->stats.xmitcalled = tx_stats.xmit_called;
  #line 1323 
  adapter->stats.xmitfinished = tx_stats.xmit_finished;
  #line 1324 
  adapter->stats.txbytes = tx_stats.tx_bytes;
  #line 1325 
  return;
}

#line 1327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u64 *qlcnic_fill_tx_queue_stats(u64 *data, void *stats)
{
  #line 1329 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1333 
  u64 *tmp;
  #line 1334 
  u64 *tmp_0;
  #line 1335 
  u64 *tmp_1;
  #line 1336 
  u64 *tmp_2;
  #line 1337 
  u64 *tmp_3;
  #line 1331 
  tx_ring = (struct qlcnic_host_tx_ring *)stats;
  #line 1333 
  tmp = data;
  #line 1333 
  data ++;
  #line 1333 
  if (tx_ring->tx_stats.xmit_on != 18446744073709551615ULL) 
                                                            #line 1333 
                                                            *tmp = tx_ring->tx_stats.xmit_on; else 
                                                                    #line 1333 
                                                                    *tmp = 0ULL;
  #line 1334 
  tmp_0 = data;
  #line 1334 
  data ++;
  #line 1334 
  if (tx_ring->tx_stats.xmit_off != 18446744073709551615ULL) 
                                                             #line 1334 
                                                             *tmp_0 = tx_ring->tx_stats.xmit_off; else 
                                                                    #line 1334 
                                                                    *tmp_0 = 0ULL;
  #line 1335 
  tmp_1 = data;
  #line 1335 
  data ++;
  #line 1335 
  if (tx_ring->tx_stats.xmit_called != 18446744073709551615ULL) 
                                                                #line 1335 
                                                                *tmp_1 = tx_ring->tx_stats.xmit_called; else 
                                                                    #line 1335 
                                                                    *tmp_1 = 0ULL;
  #line 1336 
  tmp_2 = data;
  #line 1336 
  data ++;
  #line 1336 
  if (tx_ring->tx_stats.xmit_finished != 18446744073709551615ULL) 
                                                                  #line 1336 
                                                                  *tmp_2 = tx_ring->tx_stats.xmit_finished; else 
                                                                    #line 1336 
                                                                    *tmp_2 = 0ULL;
  #line 1337 
  tmp_3 = data;
  #line 1337 
  data ++;
  #line 1337 
  if (tx_ring->tx_stats.tx_bytes != 18446744073709551615ULL) 
                                                             #line 1337 
                                                             *tmp_3 = tx_ring->tx_stats.tx_bytes; else 
                                                                    #line 1337 
                                                                    *tmp_3 = 0ULL;
  #line 1339 
  return data;
}

#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  #line 1346 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1347 
  struct qlcnic_esw_statistics port_stats;
  #line 1348 
  struct qlcnic_mac_statistics mac_stats;
  #line 1349 
  int index;
  #line 1349 
  int ret;
  #line 1349 
  int length;
  #line 1349 
  int size;
  #line 1349 
  int ring;
  #line 1350 
  char *p;
  #line 1345 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 1352 
  memset((void *)data,0,(unsigned long)stats->n_stats * 8UL);
  #line 1354 
  ring = 0;
  #line 1354 
  index = 0;
  #line 1354 
  while ((int)adapter->drv_tx_rings > ring) {
    #line 1355 
    if ((unsigned int)adapter->is_up == 777U) {
      #line 1356 
      tx_ring = adapter->tx_ring + (unsigned long)ring;
      #line 1357 
      data = qlcnic_fill_tx_queue_stats(data,(void *)tx_ring);
      #line 1358 
      qlcnic_update_stats(adapter);
    }
    else 
         #line 1360 
         data += 5UL;
    #line 1354 
    ring ++;
  }
  #line 1364 
  length = 23;
  #line 1365 
  index = 0;
  #line 1365 
  while (index < length) {
    {
      #line 1368 
      u64 *tmp_0;
      #line 1366 
      p = (char *)adapter + (unsigned long)qlcnic_gstrings_stats[index].stat_offset;
      #line 1367 
      size = qlcnic_gstrings_stats[index].sizeof_stat;
      #line 1368 
      tmp_0 = data;
      #line 1368 
      data ++;
      #line 1368 
      if (size == 8) 
                     #line 1368 
                     *tmp_0 = *((u64 *)p); else 
                                                #line 1368 
                                                *tmp_0 = (unsigned long long)*((u32 *)p);
    }
    #line 1365 
    index ++;
  }
  #line 1371 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 1372 
    if ((unsigned int)(adapter->ahw)->linkup != 0U) 
                                                    #line 1373 
                                                    qlcnic_83xx_get_stats(adapter,data);
    #line 1374 
    return;
  }
  else {
    #line 1377 
    memset((void *)(& mac_stats),0,312UL);
    #line 1378 
    qlcnic_get_mac_stats(adapter,& mac_stats);
    #line 1379 
    data = qlcnic_fill_stats(data,(void *)(& mac_stats),1);
  }
  #line 1382 
  if ((adapter->flags & 64U) == 0U) 
                                    #line 1383 
                                    return;
  #line 1385 
  memset((void *)(& port_stats),0,176UL);
  #line 1386 
  ret = qlcnic_get_port_stats(adapter,(unsigned char)((int)(adapter->ahw)->pci_func),(unsigned char)0,& port_stats.rx);
  #line 1388 
  if (ret != 0) 
                #line 1389 
                return;
  #line 1391 
  data = qlcnic_fill_stats(data,(void *)(& port_stats.rx),2);
  #line 1392 
  ret = qlcnic_get_port_stats(adapter,(unsigned char)((int)(adapter->ahw)->pci_func),(unsigned char)1,& port_stats.tx);
  #line 1394 
  if (ret != 0) 
                #line 1395 
                return;
  #line 1397 
  qlcnic_fill_stats(data,(void *)(& port_stats.tx),2);
  #line 1398 
  return;
}

#line 1400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_led(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 1403 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 1404 
  int drv_sds_rings = (int)adapter->drv_sds_rings;
  #line 1405 
  int err = -5;
  #line 1405 
  int active = 1;
  #line 1407 
  if ((int)qlcnic_83xx_check(adapter) != 0) {
    #line 1408 
    return qlcnic_83xx_set_led(dev,state);
  }
  #line 1410 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) {
    #line 1411 
    netdev_warn(dev,(char *)"LED test not supported for non ");
    #line 1413 
    return -95;
  }
  #line 1416 
  switch ((unsigned int)state) {
    #line 1417 
    case (unsigned int)1: 
                          #line 1417 
    ;
    #line 1418 
    if ((int)test_and_set_bit(7L,& adapter->state) != 0) 
                                                         #line 1419 
                                                         return -16;
    #line 1421 
    if ((int)test_bit(2L,& adapter->state) != 0) 
                                                 #line 1422 
                                                 break;
    #line 1424 
    if (! test_bit(1L,& adapter->state)) {
      #line 1425 
      if (qlcnic_diag_alloc_res(dev,3) != 0) 
                                             #line 1426 
                                             break;
      #line 1427 
      cif_set_bit_8(6L,& adapter->state);
    }
    #line 1430 
    if ((*((adapter->nic_ops)->config_led))(adapter,1U,15U) == 0) {
      #line 1431 
      err = 0;
      #line 1432 
      break;
    }
    #line 1435 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to set LED blink state.\n");
    #line 1437 
    break;
    #line 1439 
    case (unsigned int)0: 
                          #line 1439 
    ;
    #line 1440 
    active = 0;
    #line 1442 
    if ((int)test_bit(2L,& adapter->state) != 0) 
                                                 #line 1443 
                                                 break;
    #line 1445 
    if (! test_bit(1L,& adapter->state)) {
      #line 1446 
      if (qlcnic_diag_alloc_res(dev,3) != 0) 
                                             #line 1447 
                                             break;
      #line 1448 
      cif_set_bit_8(6L,& adapter->state);
    }
    #line 1451 
    if ((*((adapter->nic_ops)->config_led))(adapter,0U,15U) != 0) 
                                                                  #line 1452 
                                                                  _dev_err(& (adapter->pdev)->dev,(char *)"Failed to reset LED blink state.\n");
    #line 1455 
    break;
    #line 1457 
    default: 
             #line 1457 
    ;
    #line 1458 
    return -22;
  }
  #line 1461 
  if ((int)test_and_set_bit(6L,& adapter->state) != 0) 
                                                       #line 1462 
                                                       qlcnic_diag_free_res(dev,drv_sds_rings);
  #line 1464 
  if (active == 0 || err != 0) 
                               #line 1465 
                               cif_clear_bit_7(7L,& adapter->state);
  #line 1467 
  return err;
}

#line 1471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 1474 
  u32 wol_cfg;
  #line 1473 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 1475 
  int err = 0;
  #line 1477 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 1478 
                                            return;
  #line 1479 
  wol->supported = 0U;
  #line 1480 
  wol->wolopts = 0U;
  #line 1482 
  wol_cfg = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323460UL,& err);
  #line 1483 
  if (err == -5) 
                 #line 1484 
                 return;
  #line 1485 
  if ((((unsigned long)wol_cfg >> (int)adapter->portnum) & 1UL) != 0UL) 
    #line 1486 
    wol->supported |= 32U;
  #line 1488 
  wol_cfg = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323464UL,& err);
  #line 1489 
  if ((((unsigned long)wol_cfg >> (int)adapter->portnum) & 1UL) != 0UL) 
    #line 1490 
    wol->wolopts |= 32U;
  #line 1491 
  return;
}

#line 1494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 1497 
  u32 wol_cfg;
  #line 1496 
  struct qlcnic_adapter *adapter = netdev_priv(dev);
  #line 1498 
  int err = 0;
  #line 1500 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 1501 
                                            return -95;
  #line 1502 
  if ((wol->wolopts & 4294967263U) != 0U) 
                                          #line 1503 
                                          return -22;
  #line 1505 
  wol_cfg = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323460UL,& err);
  #line 1506 
  if (err == -5) 
                 #line 1507 
                 return err;
  #line 1508 
  if (((unsigned int)(1 << (int)adapter->portnum) & wol_cfg) == 0U) 
                                                                    #line 1509 
                                                                    return -95;
  #line 1511 
  wol_cfg = (unsigned int)(*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323464UL,& err);
  #line 1512 
  if (err == -5) 
                 #line 1513 
                 return err;
  #line 1514 
  if ((wol->wolopts & 32U) != 0U) 
                                  #line 1515 
                                  wol_cfg = (unsigned int)(1UL << (int)adapter->portnum) | wol_cfg; else 
                                                                    #line 1517 
                                                                    wol_cfg = ~ ((unsigned int)(1UL << (int)adapter->portnum)) & wol_cfg;
  #line 1519 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,136323464UL,wol_cfg);
  #line 1521 
  return 0;
}

#line 1529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_intr_coalesce(struct net_device *netdev, struct ethtool_coalesce *ethcoal)
{
  #line 1533 
  int err;
  #line 1532 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1535 
  if (! test_bit(1L,& adapter->state)) 
                                       #line 1536 
                                       return -22;
  #line 1542 
  if ((((((((((((((((((((ethcoal->rx_coalesce_usecs > 65535U || ethcoal->rx_max_coalesced_frames > 65535U) || ethcoal->tx_coalesce_usecs > 65535U) || ethcoal->tx_max_coalesced_frames > 65535U) || ethcoal->rx_coalesce_usecs_irq != 0U) || ethcoal->rx_max_coalesced_frames_irq != 0U) || ethcoal->tx_coalesce_usecs_irq != 0U) || ethcoal->tx_max_coalesced_frames_irq != 0U) || ethcoal->stats_block_coalesce_usecs != 0U) || ethcoal->use_adaptive_rx_coalesce != 0U) || ethcoal->use_adaptive_tx_coalesce != 0U) || ethcoal->pkt_rate_low != 0U) || ethcoal->rx_coalesce_usecs_low != 0U) || ethcoal->rx_max_coalesced_frames_low != 0U) || ethcoal->tx_coalesce_usecs_low != 0U) || ethcoal->tx_max_coalesced_frames_low != 0U) || ethcoal->pkt_rate_high != 0U) || ethcoal->rx_coalesce_usecs_high != 0U) || ethcoal->rx_max_coalesced_frames_high != 0U) || ethcoal->tx_coalesce_usecs_high != 0U) || ethcoal->tx_max_coalesced_frames_high != 0U) 
    #line 1563 
    return -22;
  #line 1565 
  err = qlcnic_config_intr_coalesce(adapter,ethcoal);
  #line 1567 
  return err;
}

#line 1570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_intr_coalesce(struct net_device *netdev, struct ethtool_coalesce *ethcoal)
{
  #line 1573 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1575 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 1576 
                                            return -22;
  #line 1578 
  ethcoal->rx_coalesce_usecs = (unsigned int)(adapter->ahw)->coal.rx_time_us;
  #line 1579 
  ethcoal->rx_max_coalesced_frames = (unsigned int)(adapter->ahw)->coal.rx_packets;
  #line 1580 
  ethcoal->tx_coalesce_usecs = (unsigned int)(adapter->ahw)->coal.tx_time_us;
  #line 1581 
  ethcoal->tx_max_coalesced_frames = (unsigned int)(adapter->ahw)->coal.tx_packets;
  #line 1583 
  return 0;
}

#line 1586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 qlcnic_get_msglevel(struct net_device *netdev)
{
  #line 1588 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1590 
  return (adapter->ahw)->msg_enable;
}

#line 1593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_set_msglevel(struct net_device *netdev, u32 msglvl)
{
  #line 1595 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1597 
  (adapter->ahw)->msg_enable = msglvl;
  #line 1598 
  return;
}

#line 1600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
int qlcnic_enable_fw_dump_state(struct qlcnic_adapter *adapter)
{
  #line 1603 
  u32 val;
  #line 1602 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 1605 
  if ((int)qlcnic_84xx_check(adapter) != 0) {
    #line 1606 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 1607 
                                               return -16;
    #line 1609 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
    #line 1610 
    val &= 4294967291U;
    #line 1611 
    writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
    #line 1613 
    qlcnic_83xx_unlock_driver(adapter);
  }
  else 
       #line 1615 
       fw_dump->enable = (_Bool)1;
  #line 1618 
  _dev_info(& (adapter->pdev)->dev,(char *)"FW dump enabled\n");
  #line 1620 
  return 0;
}

#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_disable_fw_dump_state(struct qlcnic_adapter *adapter)
{
  #line 1626 
  u32 val;
  #line 1625 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 1628 
  if ((int)qlcnic_84xx_check(adapter) != 0) {
    #line 1629 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 1630 
                                               return -16;
    #line 1632 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
    #line 1633 
    val |= 4U;
    #line 1634 
    writel(val,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
    #line 1636 
    qlcnic_83xx_unlock_driver(adapter);
  }
  else 
       #line 1638 
       fw_dump->enable = (_Bool)0;
  #line 1641 
  _dev_info(& (adapter->pdev)->dev,(char *)"FW dump disabled\n");
  #line 1643 
  return 0;
}

#line 1646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
bool qlcnic_check_fw_dump_state(struct qlcnic_adapter *adapter)
{
  #line 1649 
  bool state;
  #line 1650 
  u32 val;
  #line 1648 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 1652 
  if ((int)qlcnic_84xx_check(adapter) != 0) {
    #line 1653 
    val = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 15U));
    #line 1654 
    state = (_Bool)((val & 4U) == 0U);
  }
  else 
       #line 1656 
       state = fw_dump->enable;
  #line 1659 
  return state;
}

#line 1663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_dump_flag(struct net_device *netdev, struct ethtool_dump *dump)
{
  #line 1665 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1666 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 1668 
  if (fw_dump->tmpl_hdr == (void *)0) {
    #line 1669 
    netdev_err(adapter->netdev,(char *)"FW Dump not supported\n");
    #line 1670 
    return -524;
  }
  #line 1673 
  if ((unsigned int)fw_dump->clr != 0U) 
                                        #line 1674 
                                        dump->len = fw_dump->tmpl_hdr_size + fw_dump->size; else 
                                                                    #line 1676 
                                                                    dump->len = 0U;
  #line 1678 
  if (qlcnic_check_fw_dump_state(adapter)) 
                                           #line 1681 
                                           dump->flag = fw_dump->cap_mask; else 
                                                                    #line 1679 
                                                                    dump->flag = 0U;
  #line 1683 
  dump->version = adapter->fw_version;
  #line 1684 
  return 0;
}

#line 1688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_dump_data(struct net_device *netdev, struct ethtool_dump *dump, void *buffer)
{
  #line 1691 
  int i;
  #line 1691 
  int copy_sz;
  #line 1692 
  u32 *hdr_ptr;
  #line 1693 
  __le32 *data;
  #line 1694 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1695 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 1697 
  if (fw_dump->tmpl_hdr == (void *)0) {
    #line 1698 
    netdev_err(netdev,(char *)"FW Dump not supported\n");
    #line 1699 
    return -524;
  }
  #line 1702 
  if ((unsigned int)fw_dump->clr == 0U) {
    #line 1703 
    netdev_info(netdev,(char *)"Dump not available\n");
    #line 1704 
    return -22;
  }
  #line 1708 
  copy_sz = (int)fw_dump->tmpl_hdr_size;
  #line 1709 
  hdr_ptr = (u32 *)fw_dump->tmpl_hdr;
  #line 1710 
  data = (__le32 *)buffer;
  #line 1711 
  i = 0;
  #line 1711 
  while ((unsigned long)i < (unsigned long)copy_sz / 4UL) {
    #line 1712 
    __le32 *tmp_0;
    #line 1712 
    u32 *tmp_1;
    #line 1712 
    tmp_0 = data;
    #line 1712 
    data ++;
    #line 1712 
    tmp_1 = hdr_ptr;
    #line 1712 
    hdr_ptr ++;
    #line 1712 
    *tmp_0 = *tmp_1;
    #line 1711 
    i ++;
  }
  #line 1715 
  memcpy(buffer + (unsigned long)copy_sz,fw_dump->data,(unsigned long)fw_dump->size);
  #line 1716 
  dump->len = fw_dump->size + (unsigned int)copy_sz;
  #line 1717 
  dump->flag = fw_dump->cap_mask;
  #line 1720 
  cif_vfree_3(fw_dump->data);
  #line 1721 
  fw_dump->data = (void *)0;
  #line 1722 
  fw_dump->clr = (unsigned char)0U;
  #line 1723 
  netdev_info(netdev,(char *)"extracted the FW dump Successfully\n");
  #line 1724 
  return 0;
}

#line 1727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_dump_mask(struct qlcnic_adapter *adapter, u32 mask)
{
  #line 1729 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 1730 
  struct net_device *netdev = adapter->netdev;
  #line 1732 
  if (! qlcnic_check_fw_dump_state(adapter)) {
    #line 1733 
    netdev_info(netdev,(char *)"Can not change driver mask to 0x%x. FW dump not enabled\n",mask);
    #line 1736 
    return -95;
  }
  #line 1739 
  fw_dump->cap_mask = mask;
  #line 1742 
  qlcnic_store_cap_mask(adapter,fw_dump->tmpl_hdr,mask);
  #line 1744 
  netdev_info(netdev,(char *)"Driver mask changed to: 0x%x\n",mask);
  #line 1745 
  return 0;
}

#line 1749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_dump(struct net_device *netdev, struct ethtool_dump *val)
{
  #line 1754 
  int i;
  #line 1751 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 1752 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  #line 1753 
  bool valid_mask = (_Bool)0;
  #line 1754 
  int ret = 0;
  #line 1756 
  switch (val->flag) {
    #line 1757 
    case (__u32)(-559022355): 
                              #line 1757 
    ;
    #line 1758 
    if (fw_dump->tmpl_hdr == (void *)0) {
      #line 1759 
      netdev_err(netdev,(char *)"FW dump not supported\n");
      #line 1760 
      ret = -95;
      #line 1761 
      break;
    }
    #line 1764 
    if (! qlcnic_check_fw_dump_state(adapter)) {
      #line 1765 
      netdev_info(netdev,(char *)"FW dump not enabled\n");
      #line 1766 
      ret = -95;
      #line 1767 
      break;
    }
    #line 1770 
    if ((unsigned int)fw_dump->clr != 0U) {
      #line 1771 
      netdev_info(netdev,(char *)"Previous dump not cleared, not forcing dump\n");
      #line 1773 
      break;
    }
    #line 1776 
    netdev_info(netdev,(char *)"Forcing a FW dump\n");
    #line 1777 
    qlcnic_dev_request_reset(adapter,val->flag);
    #line 1778 
    break;
    #line 1779 
    case (__u32)195952365: 
                           #line 1779 
    ;
    #line 1780 
    if (fw_dump->tmpl_hdr == (void *)0) {
      #line 1781 
      netdev_err(netdev,(char *)"FW dump not supported\n");
      #line 1782 
      ret = -95;
      #line 1783 
      break;
    }
    #line 1786 
    ret = qlcnic_disable_fw_dump_state(adapter);
    #line 1787 
    break;
    #line 1789 
    case (__u32)182320877: 
                           #line 1789 
    ;
    #line 1790 
    if (fw_dump->tmpl_hdr == (void *)0) {
      #line 1791 
      netdev_err(netdev,(char *)"FW dump not supported\n");
      #line 1792 
      ret = -95;
      #line 1793 
      break;
    }
    #line 1796 
    ret = qlcnic_enable_fw_dump_state(adapter);
    #line 1797 
    break;
    #line 1799 
    case (__u32)(-559030611): 
                              #line 1799 
    ;
    #line 1800 
    netdev_info(netdev,(char *)"Forcing a FW reset\n");
    #line 1801 
    qlcnic_dev_request_reset(adapter,val->flag);
    #line 1802 
    adapter->flags &= 4294959103U;
    #line 1803 
    break;
    #line 1805 
    case (__u32)(-1378877424): 
                               #line 1805 
    ;
    #line 1806 
    case (__u32)(-1378877408): 
                               #line 1806 
    ;
    #line 1807 
    if ((int)test_bit(16L,& adapter->state) != 0) 
                                                  #line 1808 
                                                  netdev_info(netdev,(char *)"Device is in non-operational state\n");
    #line 1809 
    break;
    #line 1811 
    default: 
             #line 1811 
    ;
    #line 1812 
    if (fw_dump->tmpl_hdr == (void *)0) {
      #line 1813 
      netdev_err(netdev,(char *)"FW dump not supported\n");
      #line 1814 
      ret = -95;
      #line 1815 
      break;
    }
    #line 1818 
    i = 0;
    #line 1818 
    while ((unsigned int)i <= 6U) {
      #line 1819 
      if (val->flag == qlcnic_fw_dump_level[i]) {
        #line 1820 
        valid_mask = (_Bool)1;
        #line 1821 
        break;
      }
      #line 1818 
      i ++;
    }
    #line 1825 
    if ((int)valid_mask != 0) 
                              #line 1826 
                              ret = qlcnic_set_dump_mask(adapter,val->flag);
    else {
      #line 1828 
      netdev_info(netdev,(char *)"Invalid dump level: 0x%x\n",val->flag);
      #line 1830 
      ret = -22;
    }
  }
  #line 1833 
  return ret;
}

#line 1836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct ethtool_ops qlcnic_ethtool_ops = {.get_drvinfo = & qlcnic_get_drvinfo, .get_regs_len = & qlcnic_get_regs_len, .get_regs = & qlcnic_get_regs, .get_wol = & qlcnic_get_wol, .set_wol = & qlcnic_set_wol, .get_msglevel = & qlcnic_get_msglevel, .set_msglevel = & qlcnic_set_msglevel, .get_link = & ethtool_op_get_link, .get_eeprom_len = & qlcnic_get_eeprom_len, .get_eeprom = & qlcnic_get_eeprom, .get_coalesce = & qlcnic_get_intr_coalesce, .set_coalesce = & qlcnic_set_intr_coalesce, .get_ringparam = & qlcnic_get_ringparam, .set_ringparam = & qlcnic_set_ringparam, .get_pauseparam = & qlcnic_get_pauseparam, .set_pauseparam = & qlcnic_set_pauseparam, .self_test = & qlcnic_diag_test, .get_strings = & qlcnic_get_strings, .set_phys_id = & qlcnic_set_led, .get_ethtool_stats = & qlcnic_get_ethtool_stats, .get_sset_count = & qlcnic_get_sset_count, .get_channels = & qlcnic_get_channels, .set_channels = & qlcnic_set_channels, .get_dump_flag = & qlcnic_get_dump_flag, .get_dump_data = & qlcnic_get_dump_data, .set_dump = & qlcnic_set_dump, .get_link_ksettings = & qlcnic_get_link_ksettings, .set_link_ksettings = & qlcnic_set_link_ksettings};
#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct ethtool_ops qlcnic_sriov_vf_ethtool_ops = {.get_drvinfo = & qlcnic_get_drvinfo, .get_regs_len = & qlcnic_get_regs_len, .get_regs = & qlcnic_get_regs, .get_wol = & qlcnic_get_wol, .get_msglevel = & qlcnic_get_msglevel, .set_msglevel = & qlcnic_set_msglevel, .get_link = & ethtool_op_get_link, .get_eeprom_len = & qlcnic_get_eeprom_len, .get_eeprom = & qlcnic_get_eeprom, .get_coalesce = & qlcnic_get_intr_coalesce, .set_coalesce = & qlcnic_set_intr_coalesce, .get_ringparam = & qlcnic_get_ringparam, .set_ringparam = & qlcnic_set_ringparam, .get_pauseparam = & qlcnic_get_pauseparam, .get_strings = & qlcnic_get_strings, .get_ethtool_stats = & qlcnic_get_ethtool_stats, .get_sset_count = & qlcnic_get_sset_count, .get_channels = & qlcnic_get_channels, .get_link_ksettings = & qlcnic_get_link_ksettings};
#line 1889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct ethtool_ops qlcnic_ethtool_failed_ops = {.get_drvinfo = & qlcnic_get_drvinfo, .get_msglevel = & qlcnic_get_msglevel, .set_msglevel = & qlcnic_set_msglevel, .set_dump = & qlcnic_set_dump, .get_link_ksettings = & qlcnic_get_link_ksettings};
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_diag_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 109 
  qlcnic_diag_test(arg0,arg1,arg2);
  #line 110 
  return;
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 114 
  qlcnic_get_channels(arg0,arg1);
  #line 115 
  return;
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 119 
  qlcnic_get_drvinfo(arg0,arg1);
  #line 120 
  return;
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_get_dump_data(struct net_device *arg0, struct ethtool_dump *arg1, void *arg2)
{
  #line 124 
  return qlcnic_get_dump_data(arg0,arg1,arg2);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_get_dump_flag(struct net_device *arg0, struct ethtool_dump *arg1)
{
  #line 129 
  return qlcnic_get_dump_flag(arg0,arg1);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 134 
  return qlcnic_get_eeprom(arg0,arg1,arg2);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_get_eeprom_len(struct net_device *arg0)
{
  #line 139 
  return qlcnic_get_eeprom_len(arg0);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 144 
  qlcnic_get_ethtool_stats(arg0,arg1,arg2);
  #line 145 
  return;
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_get_intr_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 149 
  return qlcnic_get_intr_coalesce(arg0,arg1);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 154 
  return qlcnic_get_link_ksettings(arg0,arg1);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
unsigned int emg_wrapper_qlcnic_get_msglevel(struct net_device *arg0)
{
  #line 159 
  return qlcnic_get_msglevel(arg0);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 164 
  qlcnic_get_pauseparam(arg0,arg1);
  #line 165 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 169 
  qlcnic_get_regs(arg0,arg1,arg2);
  #line 170 
  return;
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_get_regs_len(struct net_device *arg0)
{
  #line 174 
  return qlcnic_get_regs_len(arg0);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 179 
  qlcnic_get_ringparam(arg0,arg1);
  #line 180 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 184 
  return qlcnic_get_sset_count(arg0,arg1);
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 189 
  qlcnic_get_strings(arg0,arg1,arg2);
  #line 190 
  return;
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 194 
  qlcnic_get_wol(arg0,arg1);
  #line 195 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 199 
  return qlcnic_set_channels(arg0,arg1);
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_set_dump(struct net_device *arg0, struct ethtool_dump *arg1)
{
  #line 204 
  return qlcnic_set_dump(arg0,arg1);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_set_intr_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 209 
  return qlcnic_set_intr_coalesce(arg0,arg1);
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_set_led(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 214 
  return qlcnic_set_led(arg0,arg1);
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 219 
  return qlcnic_set_link_ksettings(arg0,arg1);
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
void emg_wrapper_qlcnic_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 224 
  qlcnic_set_msglevel(arg0,arg1);
  #line 225 
  return;
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 229 
  return qlcnic_set_pauseparam(arg0,arg1);
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 234 
  return qlcnic_set_ringparam(arg0,arg1);
}

#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
int emg_wrapper_qlcnic_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 239 
  return qlcnic_set_wol(arg0,arg1);
}

#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
static void cif_set_bit_8(long nr, unsigned long *addr)
{
  #line 261 
  ldv_set_bit(nr,addr);
  #line 262 
  return;
}

#line 265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
static void cif_clear_bit_7(long nr, unsigned long *addr)
{
  #line 268 
  ldv_clear_bit(nr,addr);
  #line 269 
  return;
}

#line 945  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_ethtool.i.aux"
static void cif_vfree_3(void *addr)
{
  #line 948 
  ldv_vfree(addr);
  #line 949 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_set_bit_9(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_clear_bit_8(long nr, unsigned long *addr);
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 476 
int scnprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void INIT_LIST_HEAD_6(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_3(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_11851 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_3(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_3(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_3(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_11853 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_3(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_3(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_3(struct list_head *entry)
{
  #line 139 
  __list_del_entry_3(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_2(struct list_head *head)
{
  #line 269 
  union __anonunion___u_11855 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_splice_tail_init(struct list_head *list, struct list_head *head)
{
  #line 466 
  if (list_empty_2(list) == 0) {
    #line 467 
    __list_splice(list,head->prev,head);
    #line 468 
    INIT_LIST_HEAD_6(list);
  }
  #line 470 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del_0(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_11859 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del_0(struct hlist_node *n)
{
  #line 769 
  __hlist_del_0(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  #line 784 
  struct hlist_node *first = h->first;
  #line 785 
  n->next = first;
  #line 786 
  if (first != (struct hlist_node *)0) 
                                       #line 787 
                                       first->pprev = & n->next;
  {
    #line 789 
    union __anonunion___u_11861 __u = {.__val = n};
    #line 788 
    __write_once_size((void *)(& h->first),(void *)(& __u.__c),8);
    #line 788 
    struct hlist_node *tmp = __u.__val;
  }
  #line 789 
  n->pprev = & h->first;
  #line 790 
  return;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 37 
int _raw_spin_trylock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_2(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_lock_rx_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_lock_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 913  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_lock_lock_of_qlcnic_host_rds_ring(spinlock_t *lock);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  #line 348 
  return _raw_spin_trylock(& lock->__anonCompField_spinlock_25.rlock);
}

#line 350 
#line 851  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static int cif_spin_trylock_lock_of_qlcnic_host_rds_ring(spinlock_t *lock);
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 882  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static int cif_spin_trylock_tx_clean_lock_of_qlcnic_host_tx_ring(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_2(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_unlock_rx_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_unlock_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 873  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_unlock_lock_of_qlcnic_host_rds_ring(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 904  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_unlock_tx_clean_lock_of_qlcnic_host_tx_ring_0(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void *kzalloc_7(size_t size, gfp_t flags);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __sum16 csum16_add(__sum16 csum, __be16 addend)
{
  #line 72 
  u16 res = csum;
  #line 74 
  res = (unsigned short)((int)res + (int)addend);
  #line 75 
  return (unsigned short)(((int)res < (int)addend) + (int)res);
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __sum16 csum16_sub(__sum16 csum, __be16 addend)
{
  #line 80 
  return csum16_add((unsigned short)((int)csum),
                 (unsigned short)(~ ((int)addend)));
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static void csum_replace2(__sum16 *sum, __be16 old, __be16 new)
{
  #line 139 
  ;
  #line 139 
  *sum = (unsigned short)(~ ((int)csum16_add((unsigned short)((int)csum16_sub((unsigned short)(~ ((int)*sum)),(unsigned short)((int)old))),
                   (unsigned short)((int)new))));
  #line 140 
  return;
}

#line 1680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff *skb)
{
  #line 2422 
  return skb->head + (unsigned long)skb->inner_network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff *skb)
{
  #line 2566 
  return (unsigned int)((int)skb->transport_header - (int)skb->network_header);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_inner_network_offset(struct sk_buff *skb)
{
  #line 2581 
  ;
  #line 2581 
  return (int)(skb_inner_network_header(skb) - skb->data);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff *skb, void *to, unsigned int len)
{
  #line 3605 
  memcpy(to,(void *)skb->data,(unsigned long)len);
  #line 3606 
  return;
}

#line 3608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data_offset(struct sk_buff *skb, int offset, void *to, unsigned int len)
{
  #line 3612 
  memcpy(to,(void *)(skb->data + (unsigned long)offset),(unsigned long)len);
  #line 3613 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_complete(struct napi_struct *n)
{
  #line 479 
  return napi_complete_done(n,0);
}

#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_8(0L,& n->state);
  #line 517 
  cif_clear_bit_8(3L,& n->state);
  #line 518 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct *n)
{
  #line 531 
  while (1) {
    #line 531 
    if (! ((int)test_bit(0L,& n->state) != 0)) 
                                               #line 531 
                                               break;
    #line 532 
    msleep(1U);
  }
  #line 536 
  return;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_napi_add(struct net_device *dev, struct napi_struct *napi, int (*poll)(struct napi_struct *, int ), int weight)
{
  #line 2253 
  cif_set_bit_9(5L,& napi->state);
  #line 2254 
  netif_napi_add(dev,napi,poll,weight);
  #line 2255 
  return;
}

#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue_0(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_8(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_1(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_9(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static int __vlan_get_tag(struct sk_buff *skb, u16 *vlan_tci)
{
  #line 527 
  struct vlan_ethhdr *veth = (struct vlan_ethhdr *)skb->data;
  #line 529 
  if (! eth_type_vlan((unsigned short)((int)veth->h_vlan_proto))) 
                                                                  #line 530 
                                                                  return -22;
  #line 532 
  *vlan_tci = __builtin_bswap16((unsigned short)((int)veth->h_vlan_TCI));
  #line 533 
  return 0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *inner_ip_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct iphdr *)skb_inner_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *inner_tcp_hdr(struct sk_buff *skb)
{
  #line 41 
  return (struct tcphdr *)skb_inner_transport_header(skb);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int inner_tcp_hdrlen(struct sk_buff *skb)
{
  #line 46 
  ;
  #line 46 
  return (unsigned int)((int)inner_tcp_hdr(skb)->doff * 4);
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *inner_ipv6_hdr(struct sk_buff *skb)
{
  #line 99 
  return (struct ipv6hdr *)skb_inner_network_header(skb);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 2067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_change_filter(struct qlcnic_adapter *adapter, u64 *addr, u16 vlan, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 2071 
  (*(((adapter->ahw)->hw_ops)->change_l2_filter))(adapter,addr,(unsigned short)((int)vlan),tx_ring);
  #line 2072 
  return;
}

#line 2257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_enable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 2260 
  if (((adapter->ahw)->hw_ops)->enable_tx_intr != (void (*)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *))0) 
    #line 2261 
    (*(((adapter->ahw)->hw_ops)->enable_tx_intr))(adapter,tx_ring);
  #line 2262 
  return;
}

#line 2264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_disable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 2267 
  if (((adapter->ahw)->hw_ops)->disable_tx_intr != (void (*)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *))0) 
    #line 2268 
    (*(((adapter->ahw)->hw_ops)->disable_tx_intr))(adapter,tx_ring);
  #line 2269 
  return;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
#line 1357 
static int qlcnic_process_rcv_ring(struct qlcnic_host_sds_ring *sds_ring, int max);
#line 133 
#line 1138 
static struct sk_buff *qlcnic_process_rxbuf(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *ring, u16 index, u16 cksum);
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static u8 qlcnic_mac_hash(u64 mac, u16 vlan)
{
  #line 139 
  return (unsigned char)(((int)((unsigned char)mac) ^ (int)((unsigned char)(mac >> 40))) ^ (int)((unsigned char)vlan));
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static u32 qlcnic_get_ref_handle(struct qlcnic_adapter *adapter, u16 handle, u8 ring_id)
{
  #line 145 
  if ((int)qlcnic_83xx_check(adapter) != 0) 
                                            #line 146 
                                            return (unsigned int)((int)handle | ((int)ring_id << 15)); else 
                                                                    #line 148 
                                                                    return (unsigned int)handle;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static int qlcnic_82xx_is_lb_pkt(u64 sts_data)
{
  #line 153 
  return ((sts_data >> 4) & 15ULL) == 0ULL;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_delete_rx_list_mac(struct qlcnic_adapter *adapter, struct qlcnic_filter *fil, void *addr, u16 vlan_id)
{
  #line 160 
  int ret;
  #line 161 
  u8 op;
  #line 163 
  if ((unsigned int)vlan_id != 0U) 
                                   #line 163 
                                   op = (unsigned char)3U; else 
                                                                #line 163 
                                                                op = (unsigned char)1U;
  #line 164 
  ret = qlcnic_sre_macaddr_change(adapter,(u8 *)addr,(unsigned short)((int)vlan_id),(unsigned char)((int)op));
  #line 165 
  if (ret != 0) 
                #line 166 
                return;
  #line 168 
  if ((unsigned int)vlan_id != 0U) 
                                   #line 168 
                                   op = (unsigned char)4U; else 
                                                                #line 168 
                                                                op = (unsigned char)2U;
  #line 169 
  ret = qlcnic_sre_macaddr_change(adapter,(u8 *)addr,(unsigned short)((int)vlan_id),(unsigned char)((int)op));
  #line 170 
  if (ret == 0) {
    #line 171 
    hlist_del_0(& fil->fnode);
    #line 172 
    adapter->rx_fhash.fnum = (u8)((int)adapter->rx_fhash.fnum - 1);
  }
  #line 174 
  return;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_filter *qlcnic_find_mac_filter(struct hlist_head *head, void *addr, u16 vlan_id)
{
  #line 182 
  void *__mptr;
  #line 182 
  struct qlcnic_filter *tmp_0;
  #line 180 
  struct hlist_node *n;
  #line 179 
  struct qlcnic_filter *tmp_fil = (struct qlcnic_filter *)0;
  {
    #line 182 
    struct hlist_node *____ptr = head->first;
    #line 182 
    if (____ptr != (struct hlist_node *)0) {
      #line 182 
      __mptr = (void *)____ptr;
      #line 182 
      tmp_0 = ((struct qlcnic_filter *)__mptr);
    }
    else 
         #line 182 
         tmp_0 = (struct qlcnic_filter *)0;
    }
  #line 182 
  tmp_fil = tmp_0;
  #line 182 
  while (1) {
    #line 182 
    void *__mptr_0;
    #line 182 
    struct qlcnic_filter *tmp_3;
    #line 182 
    if (tmp_fil != (struct qlcnic_filter *)0) {
      #line 182 
      n = tmp_fil->fnode.next;
      #line 182 
      if (! (1 != 0)) 
                      #line 182 
                      break;
    }
    else 
         #line 182 
         break;
    #line 183 
    if ((int)ether_addr_equal((u8 *)(& tmp_fil->faddr),(u8 *)addr) != 0) 
      #line 183 
      if ((int)tmp_fil->vlan_id == (int)vlan_id) 
                                                 #line 185 
                                                 return tmp_fil;
    {
      #line 182 
      struct hlist_node *____ptr_0 = n;
      #line 182 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 182 
        __mptr_0 = (void *)____ptr_0;
        #line 182 
        tmp_3 = ((struct qlcnic_filter *)__mptr_0);
      }
      else 
           #line 182 
           tmp_3 = (struct qlcnic_filter *)0;
      }
    #line 182 
    tmp_fil = tmp_3;
  }
  #line 188 
  return (struct qlcnic_filter *)0;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_add_lb_filter(struct qlcnic_adapter *adapter, struct sk_buff *skb, int loopback_pkt, u16 vlan_id)
{
  #line 195 
  struct qlcnic_filter *fil;
  #line 195 
  struct qlcnic_filter *tmp_fil;
  #line 196 
  struct hlist_head *head;
  #line 197 
  unsigned long time;
  #line 199 
  u8 hindex;
  #line 199 
  u8 op;
  #line 200 
  int ret;
  #line 194 
  struct ethhdr *phdr = (struct ethhdr *)skb->data;
  #line 198 
  u64 src_addr = 0ULL;
  #line 202 
  if (qlcnic_sriov_pf_check(adapter)) {
    #line 202 
    if ((unsigned int)vlan_id == 65535U) 
                                         #line 203 
                                         vlan_id = (unsigned short)0U;
  }
  else 
       #line 203 
       vlan_id = (unsigned short)0U;
  #line 205 
  memcpy((void *)(& src_addr),(void *)(& phdr->h_source),6UL);
  #line 206 
  hindex = (unsigned char)((unsigned int)qlcnic_mac_hash(src_addr,(unsigned short)((int)vlan_id)) & ((unsigned int)adapter->fhash.fbucket_size + 255U));
  #line 209 
  if (loopback_pkt != 0) {
    #line 210 
    if ((int)((unsigned short)adapter->rx_fhash.fnum) >= (int)adapter->rx_fhash.fmax) 
      #line 211 
      return;
    #line 213 
    head = adapter->rx_fhash.fhead + (unsigned long)hindex;
    #line 215 
    tmp_fil = qlcnic_find_mac_filter(head,(void *)(& src_addr),(unsigned short)((int)vlan_id));
    #line 216 
    if (tmp_fil != (struct qlcnic_filter *)0) {
      #line 217 
      time = tmp_fil->ftime;
      {
        #line 218 
        unsigned long __dummy;
        #line 218 
        unsigned long __dummy2;
        }
      #line 218 
      if (1 != 0) {
        {
          #line 218 
          unsigned long __dummy_0;
          #line 218 
          unsigned long __dummy2_0;
          }
        #line 218 
        if (1 != 0) 
          #line 218 
          if ((long)((time - jiffies) + 5000UL) < 0L) 
                                                      #line 219 
                                                      tmp_fil->ftime = jiffies;
      }
      #line 220 
      return;
    }
    #line 223 
    fil = (struct qlcnic_filter *)kzalloc_7(32UL,2592U);
    #line 224 
    if (fil == (struct qlcnic_filter *)0) 
                                          #line 225 
                                          return;
    #line 227 
    fil->ftime = jiffies;
    #line 228 
    memcpy((void *)(& fil->faddr),(void *)(& src_addr),6UL);
    #line 229 
    fil->vlan_id = vlan_id;
    #line 230 
    cif_spin_lock_rx_mac_learn_lock_of_qlcnic_adapter(& adapter->rx_mac_learn_lock);
    #line 231 
    hlist_add_head(& fil->fnode,head);
    #line 232 
    adapter->rx_fhash.fnum = (u8)((int)adapter->rx_fhash.fnum + 1);
    #line 233 
    cif_spin_unlock_rx_mac_learn_lock_of_qlcnic_adapter(& adapter->rx_mac_learn_lock);
  }
  else {
    #line 235 
    head = adapter->fhash.fhead + (unsigned long)hindex;
    #line 237 
    cif_spin_lock_mac_learn_lock_of_qlcnic_adapter(& adapter->mac_learn_lock);
    #line 239 
    tmp_fil = qlcnic_find_mac_filter(head,(void *)(& src_addr),(unsigned short)((int)vlan_id));
    #line 240 
    if (tmp_fil != (struct qlcnic_filter *)0) {
      #line 241 
      if ((unsigned int)vlan_id != 0U) 
                                       #line 241 
                                       op = (unsigned char)4U; else 
                                                                    #line 241 
                                                                    op = (unsigned char)2U;
      #line 242 
      ret = qlcnic_sre_macaddr_change(adapter,(u8 *)(& src_addr),(unsigned short)((int)vlan_id),(unsigned char)((int)op));
      #line 245 
      if (ret == 0) {
        #line 246 
        hlist_del_0(& tmp_fil->fnode);
        #line 247 
        adapter->fhash.fnum = (u8)((int)adapter->fhash.fnum - 1);
      }
      #line 250 
      cif_spin_unlock_mac_learn_lock_of_qlcnic_adapter(& adapter->mac_learn_lock);
      #line 252 
      return;
    }
    #line 255 
    cif_spin_unlock_mac_learn_lock_of_qlcnic_adapter(& adapter->mac_learn_lock);
    #line 257 
    head = adapter->rx_fhash.fhead + (unsigned long)hindex;
    #line 259 
    cif_spin_lock_rx_mac_learn_lock_of_qlcnic_adapter(& adapter->rx_mac_learn_lock);
    #line 261 
    tmp_fil = qlcnic_find_mac_filter(head,(void *)(& src_addr),(unsigned short)((int)vlan_id));
    #line 262 
    if (tmp_fil != (struct qlcnic_filter *)0) 
                                              #line 263 
                                              qlcnic_delete_rx_list_mac(adapter,tmp_fil,(void *)(& src_addr),(unsigned short)((int)vlan_id));
    #line 266 
    cif_spin_unlock_rx_mac_learn_lock_of_qlcnic_adapter(& adapter->rx_mac_learn_lock);
  }
  #line 268 
  return;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_change_filter(struct qlcnic_adapter *adapter, u64 *uaddr, u16 vlan_id, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 273 
  struct cmd_desc_type0 *hwdesc;
  #line 274 
  struct qlcnic_nic_req *req;
  #line 275 
  struct qlcnic_mac_req *mac_req;
  #line 276 
  struct qlcnic_vlan_req *vlan_req;
  #line 277 
  u32 producer;
  #line 278 
  u64 word;
  #line 280 
  producer = tx_ring->producer;
  #line 281 
  hwdesc = tx_ring->desc_head + (unsigned long)tx_ring->producer;
  #line 283 
  req = (struct qlcnic_nic_req *)hwdesc;
  #line 284 
  memset((void *)req,0,64UL);
  #line 285 
  req->qhdr = 167772160ULL;
  #line 287 
  word = ((unsigned long long)adapter->portnum << 16) | 1ULL;
  #line 288 
  req->req_hdr = word;
  #line 290 
  mac_req = (struct qlcnic_mac_req *)(& req->words[0]);
  #line 291 
  if ((unsigned int)vlan_id != 0U) 
                                   #line 291 
                                   mac_req->op = (unsigned char)3U; else 
                                                                    #line 291 
                                                                    mac_req->op = (unsigned char)1U;
  #line 292 
  memcpy((void *)(& mac_req->mac_addr),(void *)uaddr,6UL);
  #line 294 
  vlan_req = (struct qlcnic_vlan_req *)(& req->words[1]);
  #line 295 
  vlan_req->vlan_id = vlan_id;
  #line 297 
  tx_ring->producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
  #line 298 
  ldv_inline_asm();
  #line 299 
  return;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_send_filter(struct qlcnic_adapter *adapter, struct cmd_desc_type0 *first_desc, struct sk_buff *skb, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 333 
  void *__mptr;
  #line 333 
  struct qlcnic_filter *tmp_2;
  #line 309 
  struct qlcnic_filter *fil;
  #line 309 
  struct qlcnic_filter *tmp_fil;
  #line 310 
  struct hlist_head *head;
  #line 311 
  struct hlist_node *n;
  #line 314 
  u8 hindex;
  #line 314 
  u8 hval;
  #line 306 
  struct vlan_ethhdr *vh = (struct vlan_ethhdr *)skb->data;
  #line 307 
  struct ethhdr *phdr = (struct ethhdr *)skb->data;
  #line 308 
  u16 protocol = __builtin_bswap16((unsigned short)((int)skb->protocol));
  #line 312 
  u64 src_addr = 0ULL;
  #line 313 
  u16 vlan_id = (unsigned short)0U;
  #line 316 
  if ((int)ether_addr_equal((u8 *)(& phdr->h_source),
                         (u8 *)(& adapter->mac_addr)) != 0) 
    #line 317 
    return;
  #line 319 
  if ((adapter->flags & 8388608U) != 0U) 
    #line 320 
    if ((unsigned int)protocol == 33024U) {
      #line 321 
      vh = (struct vlan_ethhdr *)skb->data;
      #line 322 
      vlan_id = __builtin_bswap16((unsigned short)((int)vh->h_vlan_TCI));
    }
    else 
      #line 323 
      if ((unsigned int)skb->vlan_present != 0U) 
                                                 #line 324 
                                                 vlan_id = skb->vlan_tci;
  #line 328 
  memcpy((void *)(& src_addr),(void *)(& phdr->h_source),6UL);
  #line 329 
  hval = qlcnic_mac_hash(src_addr,(unsigned short)((int)vlan_id));
  #line 330 
  hindex = (unsigned char)(((unsigned int)adapter->fhash.fbucket_size + 255U) & (unsigned int)hval);
  #line 331 
  head = adapter->fhash.fhead + (unsigned long)hindex;
  {
    #line 333 
    struct hlist_node *____ptr = head->first;
    #line 333 
    if (____ptr != (struct hlist_node *)0) {
      #line 333 
      __mptr = (void *)____ptr;
      #line 333 
      tmp_2 = ((struct qlcnic_filter *)__mptr);
    }
    else 
         #line 333 
         tmp_2 = (struct qlcnic_filter *)0;
    }
  #line 333 
  tmp_fil = tmp_2;
  #line 333 
  while (1) {
    #line 333 
    void *__mptr_0;
    #line 333 
    struct qlcnic_filter *tmp_5;
    #line 333 
    if (tmp_fil != (struct qlcnic_filter *)0) {
      #line 333 
      n = tmp_fil->fnode.next;
      #line 333 
      if (! (1 != 0)) 
                      #line 333 
                      break;
    }
    else 
         #line 333 
         break;
    #line 334 
    if ((int)ether_addr_equal((u8 *)(& tmp_fil->faddr),(u8 *)(& src_addr)) != 0) 
      #line 334 
      if ((int)tmp_fil->vlan_id == (int)vlan_id) {
        #line 336 
        if (tmp_fil->ftime + 5000UL < jiffies) 
                                               #line 337 
                                               qlcnic_change_filter(adapter,& src_addr,(unsigned short)((int)vlan_id),tx_ring);
        #line 339 
        tmp_fil->ftime = jiffies;
        #line 340 
        return;
      }
    {
      #line 333 
      struct hlist_node *____ptr_0 = n;
      #line 333 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 333 
        __mptr_0 = (void *)____ptr_0;
        #line 333 
        tmp_5 = ((struct qlcnic_filter *)__mptr_0);
      }
      else 
           #line 333 
           tmp_5 = (struct qlcnic_filter *)0;
      }
    #line 333 
    tmp_fil = tmp_5;
  }
  #line 344 
  if ((long)((int)((unsigned short)adapter->fhash.fnum) >= (int)adapter->fhash.fmax) != 0L) {
    #line 345 
    (adapter->stats.mac_filter_limit_overrun) ++;
    #line 346 
    return;
  }
  #line 349 
  fil = (struct qlcnic_filter *)kzalloc_7(32UL,2592U);
  #line 350 
  if (fil == (struct qlcnic_filter *)0) 
                                        #line 351 
                                        return;
  #line 353 
  qlcnic_change_filter(adapter,& src_addr,(unsigned short)((int)vlan_id),tx_ring);
  #line 354 
  fil->ftime = jiffies;
  #line 355 
  fil->vlan_id = vlan_id;
  #line 356 
  memcpy((void *)(& fil->faddr),(void *)(& src_addr),6UL);
  #line 357 
  cif_spin_lock_mac_learn_lock_of_qlcnic_adapter(& adapter->mac_learn_lock);
  #line 358 
  hlist_add_head(& fil->fnode,head);
  #line 359 
  adapter->fhash.fnum = (u8)((int)adapter->fhash.fnum + 1);
  #line 360 
  cif_spin_unlock_mac_learn_lock_of_qlcnic_adapter(& adapter->mac_learn_lock);
  #line 361 
  return;
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_tx_encap_pkt(struct qlcnic_adapter *adapter, struct cmd_desc_type0 *first_desc, struct sk_buff *skb, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 376 
  int copied;
  #line 376 
  int copy_len;
  #line 376 
  int descr_size;
  #line 378 
  struct cmd_desc_type0 *hwdesc;
  #line 375 
  u8 opcode = (unsigned char)0U;
  #line 375 
  u8 inner_hdr_len = (unsigned char)0U;
  #line 375 
  u8 outer_hdr_len = (unsigned char)0U;
  #line 375 
  u8 total_hdr_len = (unsigned char)0U;
  #line 377 
  u32 producer = tx_ring->producer;
  #line 379 
  u16 flags = (unsigned short)0U;
  #line 379 
  u16 encap_descr = (unsigned short)0U;
  #line 381 
  opcode = (unsigned char)1U;
  #line 382 
  encap_descr = (unsigned short)1U;
  #line 384 
  if ((int)skb_is_gso(skb) != 0) {
    #line 385 
    inner_hdr_len = (unsigned char)((skb_inner_transport_header(skb) + (unsigned long)inner_tcp_hdrlen(skb)) - skb_inner_mac_header(skb));
    #line 390 
    outer_hdr_len = (unsigned char)((unsigned int)((unsigned char)skb_transport_offset(skb)) + 16U);
    #line 392 
    first_desc->outer_hdr_length = outer_hdr_len;
    #line 393 
    total_hdr_len = (unsigned char)((int)inner_hdr_len + (int)outer_hdr_len);
    #line 394 
    encap_descr = (unsigned short)((unsigned int)encap_descr | 48U);
    #line 396 
    first_desc->mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
    #line 397 
    first_desc->hdr_length = inner_hdr_len;
    #line 403 
    copied = 0;
    #line 404 
    descr_size = 64;
    #line 405 
    while ((int)total_hdr_len > copied) {
      #line 406 
      int __UNIQUE_ID___x538;
      #line 406 
      int tmp_4;
      {
        #line 406 
        __UNIQUE_ID___x538 = descr_size;
        #line 406 
        int __UNIQUE_ID___y539 = (int)total_hdr_len - copied;
        #line 406 
        if (__UNIQUE_ID___x538 < __UNIQUE_ID___y539) 
                                                     #line 406 
                                                     tmp_4 = __UNIQUE_ID___x538; else 
                                                                    #line 406 
                                                                    tmp_4 = __UNIQUE_ID___y539;
        }
      #line 406 
      copy_len = tmp_4;
      #line 407 
      hwdesc = tx_ring->desc_head + (unsigned long)producer;
      #line 408 
      (tx_ring->cmd_buf_arr + (unsigned long)producer)->skb = (struct sk_buff *)0;
      #line 409 
      skb_copy_from_linear_data_offset(skb,copied,(void *)hwdesc,(unsigned int)copy_len);
      #line 412 
      copied += copy_len;
      #line 413 
      producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
    }
    #line 416 
    tx_ring->producer = producer;
    #line 417 
    ldv_inline_asm();
    #line 422 
    (adapter->stats.encap_lso_frames) ++;
    #line 424 
    opcode = (unsigned char)8U;
  }
  else 
    #line 425 
    if ((unsigned int)skb->ip_summed == 3U) {
      #line 426 
      ;
      #line 426 
      if ((unsigned int)inner_ip_hdr(skb)->version == 6U) {
        #line 427 
        ;
        #line 427 
        if ((unsigned int)inner_ipv6_hdr(skb)->nexthdr == 17U) 
                                                               #line 428 
                                                               encap_descr = (unsigned short)((unsigned int)encap_descr | 8U);
      }
      else {
        #line 430 
        ;
        #line 430 
        if ((unsigned int)inner_ip_hdr(skb)->protocol == 17U) 
                                                              #line 431 
                                                              encap_descr = (unsigned short)((unsigned int)encap_descr | 8U);
      }
      #line 434 
      (adapter->stats.encap_tx_csummed) ++;
      #line 435 
      opcode = (unsigned char)7U;
    }
  #line 439 
  ;
  #line 439 
  if ((unsigned int)ip_hdr(skb)->version == 6U) 
                                                #line 440 
                                                encap_descr = (unsigned short)((unsigned int)encap_descr | 2U);
  #line 443 
  encap_descr = (unsigned short)((int)((unsigned short)((skb_network_header_len(skb) >> 2) << 6)) | (int)encap_descr);
  #line 446 
  encap_descr = (unsigned short)((skb_network_offset(skb) << 10) | (int)encap_descr);
  #line 447 
  first_desc->encap_descr = encap_descr;
  #line 449 
  first_desc->tcp_hdr_offset = (unsigned char)(skb_inner_transport_header(skb) - skb->data);
  #line 451 
  first_desc->ip_hdr_offset = (unsigned char)skb_inner_network_offset(skb);
  #line 453 
  first_desc->flags_opcode = (unsigned short)((int)first_desc->flags_opcode | (int)((unsigned short)(((int)flags & 127) | (((int)opcode << 7) & 8064))));
  #line 455 
  return 0;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_tx_pkt(struct qlcnic_adapter *adapter, struct cmd_desc_type0 *first_desc, struct sk_buff *skb, struct qlcnic_host_tx_ring *tx_ring)
{
  #line 462 
  u8 l4proto;
  #line 464 
  int copied;
  #line 464 
  int offset;
  #line 464 
  int copy_len;
  #line 464 
  int size;
  #line 465 
  struct cmd_desc_type0 *hwdesc;
  #line 466 
  struct vlan_ethhdr *vh;
  #line 462 
  u8 opcode = (unsigned char)0U;
  #line 462 
  u8 hdr_len = (unsigned char)0U;
  #line 462 
  u8 tag_vlan = (unsigned char)0U;
  #line 463 
  u16 flags = (unsigned short)0U;
  #line 463 
  u16 vlan_tci = (unsigned short)0U;
  #line 467 
  u16 protocol = __builtin_bswap16((unsigned short)((int)skb->protocol));
  #line 468 
  u32 producer = tx_ring->producer;
  #line 470 
  if ((unsigned int)protocol == 33024U) {
    #line 471 
    vh = (struct vlan_ethhdr *)skb->data;
    #line 472 
    flags = (unsigned short)16U;
    #line 473 
    vlan_tci = __builtin_bswap16((unsigned short)((int)vh->h_vlan_TCI));
    #line 474 
    protocol = __builtin_bswap16((unsigned short)((int)vh->h_vlan_encapsulated_proto));
    #line 475 
    tag_vlan = (unsigned char)1U;
  }
  else 
    #line 476 
    if ((unsigned int)skb->vlan_present != 0U) {
      #line 477 
      flags = (unsigned short)64U;
      #line 478 
      vlan_tci = skb->vlan_tci;
      #line 479 
      tag_vlan = (unsigned char)1U;
    }
  #line 481 
  if ((long)((unsigned int)adapter->tx_pvid != 0U) != 0L) {
    #line 482 
    if ((unsigned int)tag_vlan != 0U && (adapter->flags & 256U) == 0U) 
      #line 483 
      return -5;
    #line 484 
    if ((unsigned int)tag_vlan != 0U && (adapter->flags & 256U) != 0U) 
      #line 485 
      goto set_flags;
    #line 487 
    flags = (unsigned short)64U;
    #line 488 
    vlan_tci = adapter->tx_pvid;
  }
  #line 490 
  set_flags: 
             #line 490 
  ;
  #line 491 
  first_desc->vlan_TCI = vlan_tci;
  #line 492 
  first_desc->flags_opcode = (unsigned short)((int)first_desc->flags_opcode | (int)((unsigned short)(((int)flags & 127) | (((int)opcode << 7) & 8064))));
  #line 494 
  if (((int)*(skb->data) & 1) != 0) {
    #line 495 
    flags = (unsigned short)((unsigned int)flags | 1U);
    #line 496 
    memcpy((void *)(& first_desc->eth_addr),(void *)skb->data,6UL);
  }
  #line 498 
  opcode = (unsigned char)1U;
  #line 499 
  if ((int)skb_is_gso(skb) != 0) {
    #line 500 
    hdr_len = (unsigned char)((int)((unsigned char)skb_transport_offset(skb)) + (int)((unsigned char)tcp_hdrlen(skb)));
    #line 501 
    first_desc->mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
    #line 502 
    first_desc->hdr_length = hdr_len;
    #line 503 
    if ((unsigned int)protocol == 34525U) 
                                          #line 503 
                                          opcode = (unsigned char)6U; else 
                                                                    #line 503 
                                                                    opcode = (unsigned char)5U;
    #line 508 
    copied = 0;
    #line 509 
    offset = 2;
    #line 511 
    if (((int)flags & 64) != 0) {
      #line 523 
      int __UNIQUE_ID___x540;
      #line 523 
      int tmp_3;
      #line 512 
      first_desc->hdr_length = (unsigned char)((unsigned int)first_desc->hdr_length + 4U);
      #line 513 
      first_desc->tcp_hdr_offset = (unsigned char)4U;
      #line 514 
      first_desc->ip_hdr_offset = (unsigned char)4U;
      #line 517 
      flags = (unsigned short)((unsigned int)flags | 16U);
      #line 520 
      hwdesc = tx_ring->desc_head + (unsigned long)producer;
      #line 521 
      (tx_ring->cmd_buf_arr + (unsigned long)producer)->skb = (struct sk_buff *)0;
      {
        #line 523 
        __UNIQUE_ID___x540 = 64 - offset;
        #line 523 
        int __UNIQUE_ID___y541 = (int)hdr_len + 4;
        #line 523 
        if (__UNIQUE_ID___x540 < __UNIQUE_ID___y541) 
                                                     #line 523 
                                                     tmp_3 = __UNIQUE_ID___x540; else 
                                                                    #line 523 
                                                                    tmp_3 = __UNIQUE_ID___y541;
        }
      #line 523 
      copy_len = tmp_3;
      #line 526 
      vh = (struct vlan_ethhdr *)((char *)hwdesc + 2U);
      #line 527 
      skb_copy_from_linear_data(skb,(void *)vh,12U);
      #line 528 
      vh->h_vlan_proto = (unsigned short)129U;
      #line 529 
      vh->h_vlan_TCI = __builtin_bswap16((unsigned short)((int)vlan_tci));
      #line 531 
      skb_copy_from_linear_data_offset(skb,12,(void *)((char *)vh + 16U),(unsigned int)(copy_len + -16));
      #line 534 
      copied = copy_len + -4;
      #line 535 
      offset = 0;
      #line 536 
      producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
    }
    #line 539 
    while ((int)hdr_len > copied) {
      #line 541 
      int __UNIQUE_ID___x542;
      #line 541 
      int tmp_5;
      #line 540 
      size = 64 - offset;
      {
        #line 541 
        __UNIQUE_ID___x542 = size;
        #line 541 
        int __UNIQUE_ID___y543 = (int)hdr_len - copied;
        #line 541 
        if (__UNIQUE_ID___x542 < __UNIQUE_ID___y543) 
                                                     #line 541 
                                                     tmp_5 = __UNIQUE_ID___x542; else 
                                                                    #line 541 
                                                                    tmp_5 = __UNIQUE_ID___y543;
        }
      #line 541 
      copy_len = tmp_5;
      #line 542 
      hwdesc = tx_ring->desc_head + (unsigned long)producer;
      #line 543 
      (tx_ring->cmd_buf_arr + (unsigned long)producer)->skb = (struct sk_buff *)0;
      #line 544 
      skb_copy_from_linear_data_offset(skb,copied,(void *)((char *)hwdesc + (unsigned long)offset),(unsigned int)copy_len);
      #line 547 
      copied += copy_len;
      #line 548 
      offset = 0;
      #line 549 
      producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
    }
    #line 552 
    tx_ring->producer = producer;
    #line 553 
    ldv_inline_asm();
    #line 554 
    (adapter->stats.lso_frames) ++;
  }
  else 
    #line 556 
    if ((unsigned int)skb->ip_summed == 3U) 
      #line 557 
      if ((unsigned int)protocol == 2048U) {
        #line 558 
        l4proto = ip_hdr(skb)->protocol;
        #line 560 
        if ((unsigned int)l4proto == 6U) 
                                         #line 561 
                                         opcode = (unsigned char)2U;
        else 
          #line 562 
          if ((unsigned int)l4proto == 17U) 
                                            #line 563 
                                            opcode = (unsigned char)3U;
      }
      else 
        #line 564 
        if ((unsigned int)protocol == 34525U) {
          #line 565 
          l4proto = ipv6_hdr(skb)->nexthdr;
          #line 567 
          if ((unsigned int)l4proto == 6U) 
                                           #line 568 
                                           opcode = (unsigned char)11U;
          else 
            #line 569 
            if ((unsigned int)l4proto == 17U) 
                                              #line 570 
                                              opcode = (unsigned char)12U;
        }
  #line 573 
  first_desc->tcp_hdr_offset = (unsigned char)((int)first_desc->tcp_hdr_offset + (int)((unsigned char)skb_transport_offset(skb)));
  #line 574 
  first_desc->ip_hdr_offset = (unsigned char)((int)first_desc->ip_hdr_offset + (int)((unsigned char)skb_network_offset(skb)));
  #line 575 
  first_desc->flags_opcode = (unsigned short)((int)first_desc->flags_opcode | (int)((unsigned short)(((int)flags & 127) | (((int)opcode << 7) & 8064))));
  #line 577 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_map_tx_skb(struct pci_dev *pdev, struct sk_buff *skb, struct qlcnic_cmd_buffer *pbuf)
{
  #line 583 
  struct qlcnic_skb_frag *nf;
  #line 584 
  skb_frag_t *frag;
  #line 585 
  int i;
  #line 585 
  int nr_frags;
  #line 586 
  dma_addr_t map;
  #line 588 
  nr_frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 589 
  nf = & pbuf->frag_array[0];
  #line 591 
  ;
  #line 591 
  ;
  #line 591 
  map = pci_map_single(pdev,(void *)skb->data,(unsigned long)skb_headlen(skb),1);
  #line 593 
  if (pci_dma_mapping_error(pdev,map) != 0) 
                                            #line 594 
                                            goto out_err;
  #line 596 
  nf->dma = map;
  #line 597 
  nf->length = (unsigned long long)skb_headlen(skb);
  #line 599 
  i = 0;
  #line 599 
  while (i < nr_frags) {
    {
      #line 600 
      frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 601 
      nf = & pbuf->frag_array[i + 1];
      #line 602 
      ;
      #line 602 
      ;
      #line 602 
      map = skb_frag_dma_map(& pdev->dev,frag,0UL,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 604 
      if (dma_mapping_error(& pdev->dev,map) != 0) 
                                                   #line 605 
                                                   goto unwind;
      #line 607 
      nf->dma = map;
      #line 608 
      nf->length = (unsigned long long)skb_frag_size(frag);
    }
    #line 599 
    i ++;
  }
  #line 611 
  return 0;
  #line 613 
  unwind: 
          #line 613 
  ;
  #line 614 
  while (1) {
    #line 614 
    i --;
    #line 614 
    if (! (i >= 0)) 
                    #line 614 
                    break;
    #line 615 
    nf = & pbuf->frag_array[i + 1];
    #line 616 
    pci_unmap_page(pdev,nf->dma,(unsigned long)nf->length,1);
  }
  #line 619 
  nf = & pbuf->frag_array[0];
  #line 620 
  ;
  #line 620 
  ;
  #line 620 
  pci_unmap_single(pdev,nf->dma,(unsigned long)skb_headlen(skb),1);
  #line 622 
  out_err: 
           #line 622 
  ;
  #line 623 
  return -12;
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_unmap_buffers(struct pci_dev *pdev, struct sk_buff *skb, struct qlcnic_cmd_buffer *pbuf)
{
  #line 630 
  int i;
  #line 629 
  struct qlcnic_skb_frag *nf = & pbuf->frag_array[0];
  #line 630 
  int nr_frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 632 
  i = 0;
  #line 632 
  while (i < nr_frags) {
    #line 633 
    nf = & pbuf->frag_array[i + 1];
    #line 634 
    pci_unmap_page(pdev,nf->dma,(unsigned long)nf->length,1);
    #line 632 
    i ++;
  }
  #line 637 
  nf = & pbuf->frag_array[0];
  #line 638 
  ;
  #line 638 
  ;
  #line 638 
  pci_unmap_single(pdev,nf->dma,(unsigned long)skb_headlen(skb),1);
  #line 639 
  pbuf->skb = (struct sk_buff *)0;
  #line 640 
  return;
}

#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static void qlcnic_clear_cmddesc(u64 *desc)
{
  #line 644 
  *desc = 0ULL;
  #line 645 
  *(desc + 2U) = 0ULL;
  #line 646 
  *(desc + 7U) = 0ULL;
  #line 647 
  return;
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
netdev_tx_t qlcnic_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  #line 652 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 653 
  struct qlcnic_cmd_buffer *pbuf;
  #line 654 
  struct qlcnic_skb_frag *buffrag;
  #line 655 
  struct cmd_desc_type0 *hwdesc;
  #line 655 
  struct cmd_desc_type0 *first_desc;
  #line 656 
  struct pci_dev *pdev;
  #line 657 
  struct ethhdr *phdr;
  #line 658 
  int i;
  #line 658 
  int k;
  #line 658 
  int frag_count;
  #line 659 
  u32 producer;
  #line 659 
  u32 num_txd;
  #line 660 
  u16 protocol;
  #line 651 
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  #line 658 
  int delta = 0;
  #line 661 
  bool l4_is_udp = (_Bool)0;
  #line 663 
  if (! test_bit(1L,& adapter->state)) {
    #line 664 
    netif_tx_stop_all_queues(netdev);
    #line 665 
    return NETDEV_TX_BUSY;
  }
  #line 668 
  if ((adapter->flags & 512U) != 0U) {
    #line 669 
    phdr = (struct ethhdr *)skb->data;
    #line 670 
    if (! ether_addr_equal((u8 *)(& phdr->h_source),
                         (u8 *)(& adapter->mac_addr))) 
      #line 671 
      goto drop_packet;
  }
  #line 674 
  tx_ring = adapter->tx_ring + (unsigned long)skb_get_queue_mapping(skb);
  #line 675 
  num_txd = tx_ring->num_desc;
  #line 677 
  frag_count = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1;
  #line 682 
  if (! skb_is_gso(skb)) 
    #line 682 
    if (frag_count > 14) {
      #line 683 
      i = 0;
      #line 683 
      while (frag_count + -14 > i) {
        #line 684 
        delta = (int)(skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i]) + (unsigned int)delta);
        #line 683 
        i ++;
      }
      #line 686 
      if (__pskb_pull_tail(skb,delta) == (void *)0) 
                                                    #line 687 
                                                    goto drop_packet;
      #line 689 
      frag_count = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1;
    }
  #line 692 
  if ((long)(qlcnic_tx_avail(tx_ring) <= 10U) != 0L) {
    #line 693 
    netif_tx_stop_queue_1(tx_ring->txq);
    #line 694 
    if (qlcnic_tx_avail(tx_ring) > 10U) 
                                        #line 695 
                                        netif_tx_start_queue_0(tx_ring->txq);
    else {
      #line 697 
      (tx_ring->tx_stats.xmit_off) ++;
      #line 698 
      return NETDEV_TX_BUSY;
    }
  }
  #line 702 
  producer = tx_ring->producer;
  #line 703 
  pbuf = tx_ring->cmd_buf_arr + (unsigned long)producer;
  #line 704 
  pdev = adapter->pdev;
  #line 705 
  first_desc = tx_ring->desc_head + (unsigned long)producer;
  #line 706 
  hwdesc = tx_ring->desc_head + (unsigned long)producer;
  #line 707 
  qlcnic_clear_cmddesc((u64 *)hwdesc);
  #line 709 
  if (qlcnic_map_tx_skb(pdev,skb,pbuf) != 0) {
    #line 710 
    (adapter->stats.tx_dma_map_error) ++;
    #line 711 
    goto drop_packet;
  }
  #line 714 
  pbuf->skb = skb;
  #line 715 
  pbuf->frag_count = (unsigned int)frag_count;
  #line 717 
  first_desc->nfrags__length = ((unsigned int)frag_count & 255U) | (skb->len << 8);
  #line 718 
  first_desc->port_ctxid = (unsigned char)(((int)adapter->portnum & 15) | ((int)adapter->portnum << 4));
  #line 720 
  i = 0;
  #line 720 
  while (i < frag_count) {
    #line 721 
    k = i % 4;
    #line 723 
    if (k == 0 && i > 0) {
      #line 725 
      producer = (producer + 1U) & (num_txd + 4294967295U);
      #line 726 
      hwdesc = tx_ring->desc_head + (unsigned long)producer;
      #line 727 
      qlcnic_clear_cmddesc((u64 *)hwdesc);
      #line 728 
      (tx_ring->cmd_buf_arr + (unsigned long)producer)->skb = (struct sk_buff *)0;
    }
    #line 731 
    buffrag = & pbuf->frag_array[i];
    #line 732 
    hwdesc->buffer_length[k] = (unsigned short)buffrag->length;
    #line 733 
    switch (k) {
      #line 734 
      case 0: 
              #line 734 
      ;
      #line 735 
      hwdesc->addr_buffer1 = buffrag->dma;
      #line 736 
      break;
      #line 737 
      case 1: 
              #line 737 
      ;
      #line 738 
      hwdesc->addr_buffer2 = buffrag->dma;
      #line 739 
      break;
      #line 740 
      case 2: 
              #line 740 
      ;
      #line 741 
      hwdesc->addr_buffer3 = buffrag->dma;
      #line 742 
      break;
      #line 743 
      case 3: 
              #line 743 
      ;
      #line 744 
      hwdesc->addr_buffer4 = buffrag->dma;
      #line 745 
      break;
    }
    #line 720 
    i ++;
  }
  #line 749 
  tx_ring->producer = (producer + 1U) & (num_txd + 4294967295U);
  #line 750 
  ldv_inline_asm();
  #line 752 
  protocol = __builtin_bswap16((unsigned short)((int)skb->protocol));
  #line 753 
  if ((unsigned int)protocol == 2048U) {
    #line 754 
    l4_is_udp = (_Bool)((unsigned int)ip_hdr(skb)->protocol == 17U);
  }
  else 
    #line 755 
    if ((unsigned int)protocol == 34525U) {
      #line 756 
      l4_is_udp = (_Bool)((unsigned int)ipv6_hdr(skb)->nexthdr == 17U);
    }
  #line 759 
  if ((unsigned int)skb->encapsulation == 0U || ! l4_is_udp) 
                                                             #line 759 
                                                             goto _LOR;
  else {
    #line 760 
    if (qlcnic_encap_tx_offload(adapter)) {
      #line 765 
      if ((long)(qlcnic_tx_encap_pkt(adapter,first_desc,skb,tx_ring) != 0) != 0L) 
        #line 767 
        goto unwind_buff;
    }
    else {
      #line 759 
      _LOR: {
              #line 761 
              if ((long)(qlcnic_tx_pkt(adapter,first_desc,skb,tx_ring) != 0) != 0L) 
                #line 763 
                goto unwind_buff;
            }
    }
  }
  #line 770 
  if ((int)adapter->drv_mac_learn != 0) 
                                        #line 771 
                                        qlcnic_send_filter(adapter,first_desc,skb,tx_ring);
  #line 773 
  tx_ring->tx_stats.tx_bytes += (unsigned long long)skb->len;
  #line 774 
  (tx_ring->tx_stats.xmit_called) ++;
  #line 775 
  ldv_inline_asm();
  #line 778 
  qlcnic_update_cmd_producer(tx_ring);
  #line 780 
  return NETDEV_TX_OK;
  #line 782 
  unwind_buff: 
               #line 782 
  ;
  #line 783 
  qlcnic_unmap_buffers(pdev,skb,pbuf);
  #line 784 
  drop_packet: 
               #line 784 
  ;
  #line 785 
  (adapter->stats.txdropped) ++;
  #line 786 
  dev_kfree_skb_any(skb);
  #line 787 
  return NETDEV_TX_OK;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_advert_link_change(struct qlcnic_adapter *adapter, int linkup)
{
  #line 792 
  struct net_device *netdev = adapter->netdev;
  #line 794 
  if ((unsigned int)(adapter->ahw)->linkup != 0U && linkup == 0) {
    #line 795 
    netdev_info(netdev,(char *)"NIC Link is down\n");
    #line 796 
    (adapter->ahw)->linkup = (unsigned char)0U;
    #line 797 
    netif_carrier_off(netdev);
  }
  else 
    #line 798 
    if ((unsigned int)(adapter->ahw)->linkup == 0U && linkup != 0) {
      #line 799 
      (adapter->ahw)->linkup = (unsigned char)1U;
      #line 804 
      if ((int)qlcnic_83xx_check(adapter) != 0) 
        #line 804 
        if ((unsigned int)(adapter->ahw)->lb_mode != 0U) {
          #line 805 
          netdev_info(netdev,(char *)"NIC Link is up for loopback test\n");
          #line 806 
          return;
        }
      #line 809 
      netdev_info(netdev,(char *)"NIC Link is up\n");
      #line 810 
      netif_carrier_on(netdev);
    }
  #line 812 
  return;
}

#line 814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_alloc_rx_skb(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *rds_ring, struct qlcnic_rx_buffer *buffer)
{
  #line 818 
  struct sk_buff *skb;
  #line 819 
  dma_addr_t dma;
  #line 820 
  struct pci_dev *pdev = adapter->pdev;
  #line 822 
  skb = netdev_alloc_skb(adapter->netdev,rds_ring->skb_size);
  #line 823 
  if (skb == (struct sk_buff *)0) {
    #line 824 
    (adapter->stats.skb_alloc_failure) ++;
    #line 825 
    return -12;
  }
  #line 828 
  skb_reserve(skb,0);
  #line 829 
  dma = pci_map_single(pdev,(void *)skb->data,(unsigned long)rds_ring->dma_size,2);
  #line 832 
  if (pci_dma_mapping_error(pdev,dma) != 0) {
    #line 833 
    (adapter->stats.rx_dma_map_error) ++;
    #line 834 
    dev_kfree_skb_any(skb);
    #line 835 
    return -12;
  }
  #line 838 
  buffer->skb = skb;
  #line 839 
  buffer->dma = dma;
  #line 841 
  return 0;
}

#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_post_rx_buffers_nodb(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *rds_ring, u8 ring_id)
{
  #line 848 
  struct rcv_desc *pdesc;
  #line 849 
  struct qlcnic_rx_buffer *buffer;
  #line 851 
  uint32_t producer;
  #line 851 
  uint32_t handle;
  #line 852 
  struct list_head *head;
  #line 850 
  int count = 0;
  #line 854 
  if (cif_spin_trylock_lock_of_qlcnic_host_rds_ring(& rds_ring->lock) == 0) 
    #line 855 
    return;
  #line 857 
  producer = rds_ring->producer;
  #line 858 
  head = & rds_ring->free_list;
  #line 859 
  while (1) {
    #line 859 
    if (! (list_empty_2(head) == 0)) 
                                     #line 859 
                                     break;
    {
      #line 860 
      void *__mptr;
      #line 860 
      __mptr = (void *)head->next;
      #line 860 
      buffer = ((struct qlcnic_rx_buffer *)(__mptr + 18446744073709551600U));
      #line 862 
      if (buffer->skb == (struct sk_buff *)0) {
        #line 863 
        if (qlcnic_alloc_rx_skb(adapter,rds_ring,buffer) != 0) 
                                                               #line 864 
                                                               break;
      }
      #line 866 
      count ++;
      #line 867 
      list_del_3(& buffer->list);
      #line 870 
      pdesc = rds_ring->desc_head + (unsigned long)producer;
      #line 871 
      handle = qlcnic_get_ref_handle(adapter,(unsigned short)((int)buffer->ref_handle),(unsigned char)((int)ring_id));
      #line 873 
      pdesc->reference_handle = (unsigned short)handle;
      #line 874 
      pdesc->buffer_length = rds_ring->dma_size;
      #line 875 
      pdesc->addr_buffer = buffer->dma;
      #line 876 
      producer = (producer + 1U) & (rds_ring->num_desc + 4294967295U);
    }
  }
  #line 878 
  if (count != 0) {
    #line 879 
    rds_ring->producer = producer;
    #line 880 
    writel((producer + 4294967295U) & (rds_ring->num_desc + 4294967295U),rds_ring->crb_rcv_producer);
  }
  #line 883 
  cif_spin_unlock_lock_of_qlcnic_host_rds_ring(& rds_ring->lock);
  #line 884 
  return;
}

#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_process_cmd_ring(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring, int budget)
{
  #line 890 
  u32 sw_consumer;
  #line 890 
  u32 hw_consumer;
  #line 891 
  int i;
  #line 891 
  int done;
  #line 892 
  struct qlcnic_cmd_buffer *buffer;
  #line 895 
  struct qlcnic_skb_frag *frag;
  #line 891 
  int count = 0;
  #line 893 
  struct pci_dev *pdev = adapter->pdev;
  #line 894 
  struct net_device *netdev = adapter->netdev;
  #line 897 
  if (cif_spin_trylock_tx_clean_lock_of_qlcnic_host_tx_ring(& tx_ring->tx_clean_lock) == 0) 
    #line 898 
    return 1;
  #line 900 
  sw_consumer = tx_ring->sw_consumer;
  #line 901 
  hw_consumer = *(tx_ring->hw_consumer);
  #line 903 
  while (sw_consumer != hw_consumer) {
    #line 904 
    buffer = tx_ring->cmd_buf_arr + (unsigned long)sw_consumer;
    #line 905 
    if (buffer->skb != (struct sk_buff *)0) {
      #line 906 
      frag = & buffer->frag_array[0];
      #line 907 
      pci_unmap_single(pdev,frag->dma,(unsigned long)frag->length,1);
      #line 909 
      frag->dma = 0ULL;
      #line 910 
      i = 1;
      #line 910 
      while (buffer->frag_count > (unsigned int)i) {
        #line 911 
        frag ++;
        #line 912 
        pci_unmap_page(pdev,frag->dma,(unsigned long)frag->length,1);
        #line 914 
        frag->dma = 0ULL;
        #line 910 
        i ++;
      }
      #line 916 
      (tx_ring->tx_stats.xmit_finished) ++;
      #line 917 
      dev_kfree_skb_any(buffer->skb);
      #line 918 
      buffer->skb = (struct sk_buff *)0;
    }
    #line 921 
    sw_consumer = (sw_consumer + 1U) & (tx_ring->num_desc + 4294967295U);
    #line 922 
    count ++;
    #line 922 
    ;
    #line 922 
    if (count >= budget) 
                         #line 923 
                         break;
  }
  #line 926 
  tx_ring->sw_consumer = sw_consumer;
  #line 928 
  if (count != 0) {
    #line 928 
    if ((int)netif_running(netdev) != 0) {
      #line 930 
      ldv_inline_asm();
      #line 930 
      if ((int)netif_tx_queue_stopped(tx_ring->txq) != 0) {
        #line 930 
        if ((int)netif_carrier_ok(netdev) != 0) {
          #line 932 
          if (qlcnic_tx_avail(tx_ring) > 10U) {
            #line 933 
            netif_tx_wake_queue(tx_ring->txq);
            #line 934 
            (tx_ring->tx_stats.xmit_on) ++;
          }
        }
      }
      #line 937 
      adapter->tx_timeo_cnt = (unsigned char)0U;
    }
  }
  #line 952 
  hw_consumer = *(tx_ring->hw_consumer);
  #line 953 
  done = sw_consumer == hw_consumer;
  #line 955 
  cif_spin_unlock_tx_clean_lock_of_qlcnic_host_tx_ring_0(& tx_ring->tx_clean_lock);
  #line 957 
  return done;
}

#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_poll(struct napi_struct *napi, int budget)
{
  #line 967 
  void *__mptr;
  #line 962 
  int tx_complete;
  #line 962 
  int work_done;
  #line 963 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 964 
  struct qlcnic_adapter *adapter;
  #line 965 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 967 
  __mptr = (void *)napi;
  #line 967 
  sds_ring = ((struct qlcnic_host_sds_ring *)(__mptr + 18446744073709551576U));
  #line 968 
  adapter = sds_ring->adapter;
  #line 969 
  tx_ring = sds_ring->tx_ring;
  #line 971 
  tx_complete = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  #line 973 
  work_done = qlcnic_process_rcv_ring(sds_ring,budget);
  #line 976 
  if (tx_complete == 0) 
                        #line 977 
                        work_done = budget;
  #line 979 
  if (work_done < budget) {
    #line 980 
    napi_complete_done(& sds_ring->napi,work_done);
    #line 981 
    if ((int)test_bit(1L,& adapter->state) != 0) {
      #line 982 
      qlcnic_enable_sds_intr(adapter,sds_ring);
      #line 983 
      qlcnic_enable_tx_intr(adapter,tx_ring);
    }
  }
  #line 987 
  return work_done;
}

#line 990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_tx_poll(struct napi_struct *napi, int budget)
{
  #line 996 
  void *__mptr;
  #line 992 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 993 
  struct qlcnic_adapter *adapter;
  #line 994 
  int work_done;
  #line 996 
  __mptr = (void *)napi;
  #line 996 
  tx_ring = ((struct qlcnic_host_tx_ring *)(__mptr + 18446744073709551488U));
  #line 997 
  adapter = tx_ring->adapter;
  #line 999 
  work_done = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  #line 1000 
  if (work_done != 0) {
    #line 1001 
    napi_complete(& tx_ring->napi);
    #line 1002 
    if ((int)test_bit(1L,& adapter->state) != 0) 
                                                 #line 1003 
                                                 qlcnic_enable_tx_intr(adapter,tx_ring);
  }
  else 
       #line 1006 
       work_done = budget;
  #line 1009 
  return work_done;
}

#line 1012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_rx_poll(struct napi_struct *napi, int budget)
{
  #line 1018 
  void *__mptr;
  #line 1014 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1015 
  struct qlcnic_adapter *adapter;
  #line 1016 
  int work_done;
  #line 1018 
  __mptr = (void *)napi;
  #line 1018 
  sds_ring = ((struct qlcnic_host_sds_ring *)(__mptr + 18446744073709551576U));
  #line 1019 
  adapter = sds_ring->adapter;
  #line 1021 
  work_done = qlcnic_process_rcv_ring(sds_ring,budget);
  #line 1023 
  if (work_done < budget) {
    #line 1024 
    napi_complete_done(& sds_ring->napi,work_done);
    #line 1025 
    if ((int)test_bit(1L,& adapter->state) != 0) 
                                                 #line 1026 
                                                 qlcnic_enable_sds_intr(adapter,sds_ring);
  }
  #line 1029 
  return work_done;
}

#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_handle_linkevent(struct qlcnic_adapter *adapter, struct qlcnic_fw_msg *msg)
{
  #line 1035 
  u32 cable_OUI;
  #line 1036 
  u16 cable_len;
  #line 1036 
  u16 link_speed;
  #line 1037 
  u8 link_status;
  #line 1037 
  u8 module;
  #line 1037 
  u8 duplex;
  #line 1037 
  u8 autoneg;
  #line 1037 
  u8 lb_status = (unsigned char)0U;
  #line 1038 
  struct net_device *netdev = adapter->netdev;
  #line 1040 
  (adapter->ahw)->has_link_events = (unsigned char)1U;
  #line 1042 
  cable_OUI = (unsigned int)msg->__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[1];
  #line 1043 
  cable_len = (unsigned short)(msg->__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[1] >> 32);
  #line 1044 
  link_speed = (unsigned short)(msg->__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[1] >> 48);
  #line 1046 
  link_status = (unsigned char)msg->__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[2];
  #line 1047 
  duplex = (unsigned char)(msg->__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[2] >> 16);
  #line 1048 
  autoneg = (unsigned char)(msg->__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[2] >> 24);
  #line 1049 
  lb_status = (unsigned char)((unsigned int)((unsigned char)(msg->__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[2] >> 32)) & 3U);
  #line 1051 
  module = (unsigned char)(msg->__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[2] >> 8);
  #line 1052 
  if ((unsigned int)module == 6U) 
                                  #line 1053 
                                  _dev_info(& netdev->dev,(char *)"unsupported cable: OUI 0x%x, length %d\n",cable_OUI,(int)cable_len);
  else 
    #line 1056 
    if ((unsigned int)module == 7U) 
                                    #line 1057 
                                    _dev_info(& netdev->dev,(char *)"unsupported cable length %d\n",(int)cable_len);
  #line 1060 
  if ((unsigned int)link_status == 0U && (unsigned int)lb_status + 255U <= 1U) 
    #line 1062 
    (adapter->ahw)->loopback_state = (unsigned char)((unsigned int)(adapter->ahw)->loopback_state | 1U);
  #line 1064 
  qlcnic_advert_link_change(adapter,(int)link_status);
  #line 1066 
  if ((unsigned int)duplex == 1U) 
                                  #line 1067 
                                  (adapter->ahw)->link_duplex = (unsigned short)1U; else 
                                                                    #line 1069 
                                                                    (adapter->ahw)->link_duplex = (unsigned short)0U;
  #line 1071 
  (adapter->ahw)->module_type = (unsigned short)module;
  #line 1072 
  (adapter->ahw)->link_autoneg = (unsigned short)autoneg;
  #line 1074 
  if ((unsigned int)link_status != 0U) 
                                       #line 1075 
                                       (adapter->ahw)->link_speed = (unsigned int)link_speed;
  else {
    #line 1077 
    (adapter->ahw)->link_speed = 4294967295U;
    #line 1078 
    (adapter->ahw)->link_duplex = (unsigned short)255U;
  }
  #line 1080 
  return;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_handle_fw_message(int desc_cnt, int index, struct qlcnic_host_sds_ring *sds_ring)
{
  #line 1085 
  struct qlcnic_fw_msg msg;
  #line 1086 
  struct status_desc *desc;
  #line 1087 
  struct qlcnic_adapter *adapter;
  #line 1088 
  struct device *dev;
  #line 1089 
  int opcode;
  #line 1089 
  int ret;
  #line 1089 
  int i = 0;
  #line 1091 
  while (desc_cnt > 0 && i <= 7) {
    #line 1093 
    int tmp;
    #line 1094 
    int tmp_0;
    #line 1092 
    desc = sds_ring->desc_head + (unsigned long)index;
    #line 1093 
    tmp = i;
    #line 1093 
    i ++;
    #line 1093 
    msg.__anonCompField_qlcnic_fw_msg_205.words[tmp] = desc->status_desc_data[0];
    #line 1094 
    tmp_0 = i;
    #line 1094 
    i ++;
    #line 1094 
    msg.__anonCompField_qlcnic_fw_msg_205.words[tmp_0] = desc->status_desc_data[1];
    #line 1096 
    index = (int)((unsigned int)(index + 1) & (sds_ring->num_desc + 4294967295U));
    #line 1097 
    desc_cnt --;
  }
  #line 1100 
  adapter = sds_ring->adapter;
  #line 1101 
  dev = & (adapter->pdev)->dev;
  #line 1102 
  opcode = (int)(msg.__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[0] >> 32) & 255;
  #line 1104 
  switch (opcode) {
    #line 1105 
    case 141: 
              #line 1105 
    ;
    #line 1106 
    qlcnic_handle_linkevent(adapter,& msg);
    #line 1107 
    break;
    #line 1108 
    case 143: 
              #line 1108 
    ;
    #line 1109 
    ret = (int)msg.__anonCompField_qlcnic_fw_msg_205.__anonCompField___anonunion_12838_204.body[1];
    #line 1110 
    switch (ret) {
      #line 1111 
      case 0: 
              #line 1111 
      ;
      #line 1112 
      (adapter->ahw)->loopback_state = (unsigned char)((unsigned int)(adapter->ahw)->loopback_state | 2U);
      #line 1113 
      break;
      #line 1114 
      case 1: 
              #line 1114 
      ;
      #line 1115 
      _dev_info(dev,(char *)"loopback already in progress\n");
      #line 1116 
      (adapter->ahw)->diag_cnt = -115;
      #line 1117 
      break;
      #line 1118 
      case 2: 
              #line 1118 
      ;
      #line 1119 
      _dev_info(dev,(char *)"loopback cable is not connected\n");
      #line 1120 
      (adapter->ahw)->diag_cnt = -19;
      #line 1121 
      break;
      #line 1122 
      default: 
               #line 1122 
      ;
      #line 1123 
      _dev_info(dev,(char *)"loopback configure request failed, err %x\n",ret);
      #line 1126 
      (adapter->ahw)->diag_cnt = -5;
      #line 1127 
      break;
    }
    #line 1129 
    break;
    #line 1130 
    case 144: 
              #line 1130 
    ;
    #line 1131 
    qlcnic_dcb_aen_handler(adapter->dcb,(void *)(& msg));
    #line 1132 
    break;
    #line 1133 
    default: 
             #line 1133 
    ;
    #line 1134 
    break;
  }
  #line 1136 
  return;
}

#line 1138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct sk_buff *qlcnic_process_rxbuf(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *ring, u16 index, u16 cksum)
{
  #line 1142 
  struct qlcnic_rx_buffer *buffer;
  #line 1143 
  struct sk_buff *skb;
  #line 1145 
  buffer = ring->rx_buf_arr + (unsigned long)index;
  #line 1146 
  if ((long)(buffer->skb == (struct sk_buff *)0) != 0L) {
    {
      #line 1147 
      int __ret_warn_on = 1;
      #line 1147 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 1148 
        ldv_inline_asm();
        #line 1149 
        ldv_inline_asm();
      }
      #line 1147 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 1148 
    return (struct sk_buff *)0;
  }
  #line 1151 
  pci_unmap_single(adapter->pdev,buffer->dma,(unsigned long)ring->dma_size,2);
  #line 1154 
  skb = buffer->skb;
  #line 1155 
  if ((long)(((adapter->netdev)->features & 549755813888ULL) != 0ULL) != 0L && (long)(((unsigned int)cksum == 2U || (unsigned int)cksum == 0U) != 0) != 0L) {
    #line 1157 
    (adapter->stats.csummed) ++;
    #line 1158 
    skb->ip_summed = (unsigned char)1U;
  }
  else 
       #line 1160 
       skb_checksum_none_assert(skb);
  #line 1164 
  buffer->skb = (struct sk_buff *)0;
  #line 1166 
  return skb;
}

#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static int qlcnic_check_rx_tagging(struct qlcnic_adapter *adapter, struct sk_buff *skb, u16 *vlan_tag)
{
  #line 1172 
  struct ethhdr *eth_hdr;
  #line 1174 
  if (__vlan_get_tag(skb,vlan_tag) == 0) {
    #line 1175 
    eth_hdr = (struct ethhdr *)skb->data;
    #line 1176 
    __memmove((void *)(skb->data + 4U),(void *)eth_hdr,12UL);
    #line 1177 
    skb_pull(skb,4U);
  }
  #line 1179 
  if ((unsigned int)adapter->rx_pvid == 0U) 
                                            #line 1180 
                                            return 0;
  #line 1182 
  if ((int)*vlan_tag == (int)adapter->rx_pvid) {
    #line 1184 
    *vlan_tag = (unsigned short)65535U;
    #line 1185 
    return 0;
  }
  #line 1187 
  if ((adapter->flags & 256U) != 0U) 
                                     #line 1188 
                                     return 0;
  #line 1190 
  return -22;
}

#line 1194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_rx_buffer *qlcnic_process_rcv(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring, int ring, u64 sts_data0)
{
  #line 1200 
  struct qlcnic_rx_buffer *buffer;
  #line 1201 
  struct sk_buff *skb;
  #line 1202 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 1203 
  int index;
  #line 1203 
  int length;
  #line 1203 
  int cksum;
  #line 1203 
  int pkt_offset;
  #line 1203 
  int is_lb_pkt;
  #line 1204 
  u16 t_vid;
  #line 1198 
  struct net_device *netdev = adapter->netdev;
  #line 1199 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1204 
  u16 vid = (unsigned short)65535U;
  #line 1206 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) 
                                                         #line 1207 
                                                         return (struct qlcnic_rx_buffer *)0;
  #line 1209 
  rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
  #line 1211 
  index = (int)(sts_data0 >> 28) & 65535;
  #line 1212 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
                                                               #line 1213 
                                                               return (struct qlcnic_rx_buffer *)0;
  #line 1215 
  buffer = rds_ring->rx_buf_arr + (unsigned long)index;
  #line 1216 
  length = (int)(sts_data0 >> 12) & 65535;
  #line 1217 
  cksum = (int)(sts_data0 >> 4) & 15;
  #line 1218 
  pkt_offset = (int)(sts_data0 >> 48) & 31;
  #line 1220 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)((int)((unsigned short)cksum)));
  #line 1221 
  if (skb == (struct sk_buff *)0) 
                                  #line 1222 
                                  return buffer;
  #line 1224 
  if ((int)adapter->rx_mac_learn != 0) {
    #line 1225 
    t_vid = (unsigned short)0U;
    #line 1226 
    is_lb_pkt = qlcnic_82xx_is_lb_pkt(sts_data0);
    #line 1227 
    qlcnic_add_lb_filter(adapter,skb,is_lb_pkt,(unsigned short)((int)t_vid));
  }
  #line 1230 
  if (rds_ring->skb_size < (unsigned int)length) 
                                                 #line 1231 
                                                 skb_put(skb,rds_ring->skb_size); else 
                                                                    #line 1233 
                                                                    skb_put(skb,(unsigned int)length);
  #line 1235 
  if (pkt_offset != 0) 
                       #line 1236 
                       skb_pull(skb,(unsigned int)pkt_offset);
  #line 1238 
  if ((long)(qlcnic_check_rx_tagging(adapter,skb,& vid) != 0) != 0L) {
    #line 1239 
    (adapter->stats.rxdropped) ++;
    #line 1240 
    consume_skb(skb);
    #line 1241 
    return buffer;
  }
  #line 1244 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 1246 
  if ((unsigned int)vid != 65535U) 
                                   #line 1247 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
  #line 1249 
  napi_gro_receive(& sds_ring->napi,skb);
  #line 1251 
  (adapter->stats.rx_pkts) ++;
  #line 1252 
  adapter->stats.rxbytes += (unsigned long long)length;
  #line 1254 
  return buffer;
}

#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_rx_buffer *qlcnic_process_lro(struct qlcnic_adapter *adapter, int ring, u64 sts_data0, u64 sts_data1)
{
  #line 1267 
  struct qlcnic_rx_buffer *buffer;
  #line 1268 
  struct sk_buff *skb;
  #line 1269 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 1270 
  struct iphdr *iph;
  #line 1271 
  struct ipv6hdr *ipv6h;
  #line 1272 
  struct tcphdr *th;
  #line 1273 
  bool push;
  #line 1273 
  bool timestamp;
  #line 1274 
  int index;
  #line 1274 
  int l2_hdr_offset;
  #line 1274 
  int l4_hdr_offset;
  #line 1274 
  int is_lb_pkt;
  #line 1275 
  u16 lro_length;
  #line 1275 
  u16 length;
  #line 1275 
  u16 data_offset;
  #line 1275 
  u16 t_vid;
  #line 1276 
  u32 seq_number;
  #line 1265 
  struct net_device *netdev = adapter->netdev;
  #line 1266 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1275 
  u16 vid = (unsigned short)65535U;
  #line 1278 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) 
                                                         #line 1279 
                                                         return (struct qlcnic_rx_buffer *)0;
  #line 1281 
  rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
  #line 1283 
  index = (int)sts_data0 & 32767;
  #line 1284 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
                                                               #line 1285 
                                                               return (struct qlcnic_rx_buffer *)0;
  #line 1287 
  buffer = rds_ring->rx_buf_arr + (unsigned long)index;
  #line 1289 
  timestamp = (_Bool)(((sts_data0 >> 48) & 1ULL) != 0ULL);
  #line 1290 
  lro_length = (unsigned short)(sts_data0 >> 16);
  #line 1291 
  l2_hdr_offset = (int)(sts_data0 >> 32) & 255;
  #line 1292 
  l4_hdr_offset = (int)(sts_data0 >> 40) & 255;
  #line 1293 
  push = (_Bool)(((sts_data0 >> 52) & 1ULL) != 0ULL);
  #line 1294 
  seq_number = (unsigned int)sts_data1;
  #line 1296 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)2);
  #line 1297 
  if (skb == (struct sk_buff *)0) 
                                  #line 1298 
                                  return buffer;
  #line 1300 
  if ((int)adapter->rx_mac_learn != 0) {
    #line 1301 
    t_vid = (unsigned short)0U;
    #line 1302 
    is_lb_pkt = qlcnic_82xx_is_lb_pkt(sts_data0);
    #line 1303 
    qlcnic_add_lb_filter(adapter,skb,is_lb_pkt,(unsigned short)((int)t_vid));
  }
  #line 1306 
  if ((int)timestamp != 0) 
                           #line 1307 
                           data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 32U); else 
                                                                    #line 1309 
                                                                    data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 20U);
  #line 1311 
  skb_put(skb,(unsigned int)((int)lro_length + (int)data_offset));
  #line 1312 
  skb_pull(skb,(unsigned int)l2_hdr_offset);
  #line 1314 
  if ((long)(qlcnic_check_rx_tagging(adapter,skb,& vid) != 0) != 0L) {
    #line 1315 
    (adapter->stats.rxdropped) ++;
    #line 1316 
    consume_skb(skb);
    #line 1317 
    return buffer;
  }
  #line 1320 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 1322 
  if ((unsigned int)__builtin_bswap16((unsigned short)((int)skb->protocol)) == 34525U) {
    #line 1323 
    ipv6h = (struct ipv6hdr *)skb->data;
    #line 1324 
    th = (struct tcphdr *)(skb->data + 40UL);
    #line 1325 
    length = (unsigned short)(((int)((unsigned short)th->doff) << 2U) + (int)lro_length);
    #line 1326 
    ipv6h->payload_len = __builtin_bswap16((unsigned short)((int)length));
  }
  else {
    #line 1328 
    iph = (struct iphdr *)skb->data;
    #line 1329 
    th = (struct tcphdr *)(skb->data + (unsigned long)((int)iph->ihl << 2));
    #line 1330 
    length = (unsigned short)((((int)((unsigned short)iph->ihl) << 2U) + ((int)((unsigned short)th->doff) << 2U)) + (int)lro_length);
    #line 1331 
    ;
    #line 1331 
    ;
    #line 1331 
    csum_replace2(& iph->check,(unsigned short)((int)iph->tot_len),(unsigned short)((int)__builtin_bswap16((unsigned short)((int)length))));
    #line 1332 
    iph->tot_len = __builtin_bswap16((unsigned short)((int)length));
  }
  #line 1335 
  th->psh = (unsigned short)push;
  #line 1336 
  th->seq = __builtin_bswap32(seq_number);
  #line 1337 
  length = (unsigned short)skb->len;
  #line 1339 
  if ((adapter->flags & 32768U) != 0U) {
    #line 1340 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size = (unsigned short)(sts_data1 >> 32);
    #line 1341 
    if ((unsigned int)skb->protocol == 56710U) {
      #line 1342 
      ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type = 16U;
    }
    else {
      #line 1344 
      ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type = 1U;
    }
  }
  #line 1347 
  if ((unsigned int)vid != 65535U) 
                                   #line 1348 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
  #line 1349 
  netif_receive_skb(skb);
  #line 1351 
  (adapter->stats.lro_pkts) ++;
  #line 1352 
  adapter->stats.lrobytes += (unsigned long long)length;
  #line 1354 
  return buffer;
}

#line 1357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_process_rcv_ring(struct qlcnic_host_sds_ring *sds_ring, int max)
{
  #line 1359 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 1361 
  struct list_head *cur;
  #line 1362 
  struct status_desc *desc;
  #line 1363 
  struct qlcnic_rx_buffer *rxbuf;
  #line 1364 
  int opcode;
  #line 1364 
  int desc_cnt;
  #line 1365 
  u64 sts_data0;
  #line 1365 
  u64 sts_data1;
  #line 1366 
  u8 ring;
  #line 1360 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  #line 1364 
  int count = 0;
  #line 1367 
  u32 consumer = sds_ring->consumer;
  #line 1369 
  while (count < max) {
    #line 1370 
    desc = sds_ring->desc_head + (unsigned long)consumer;
    #line 1371 
    sts_data0 = desc->status_desc_data[0];
    #line 1373 
    if ((sts_data0 & 72057594037927936ULL) == 0ULL) 
                                                    #line 1374 
                                                    break;
    #line 1376 
    desc_cnt = (int)(sts_data0 >> 53) & 7;
    #line 1377 
    opcode = (int)(sts_data0 >> 58);
    #line 1378 
    switch (opcode) {
      #line 1379 
      case 4: 
              #line 1379 
      ;
      #line 1380 
      case 63: 
               #line 1380 
      ;
      #line 1381 
      case 3: 
              #line 1381 
      ;
      #line 1382 
      ring = (unsigned char)((unsigned int)((unsigned char)(sts_data0 >> 8)) & 15U);
      #line 1383 
      rxbuf = qlcnic_process_rcv(adapter,sds_ring,(int)ring,sts_data0);
      #line 1385 
      break;
      #line 1386 
      case 18: 
               #line 1386 
      ;
      #line 1387 
      ring = (unsigned char)((unsigned int)((unsigned char)(sts_data0 >> 49)) & 7U);
      #line 1388 
      sts_data1 = desc->status_desc_data[1];
      #line 1389 
      rxbuf = qlcnic_process_lro(adapter,(int)ring,sts_data0,sts_data1);
      #line 1391 
      break;
      #line 1392 
      case 5: 
              #line 1392 
      ;
      #line 1393 
      qlcnic_handle_fw_message(desc_cnt,(int)consumer,sds_ring);
      #line 1394 
      default: 
               #line 1394 
      ;
      #line 1395 
      goto skip;
    }
    {
      #line 1397 
      int __ret_warn_on = desc_cnt > 1;
      #line 1397 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 1398 
        ldv_inline_asm();
        #line 1399 
        ldv_inline_asm();
      }
      #line 1397 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 1399 
    if ((long)(rxbuf != (struct qlcnic_rx_buffer *)0) != 0L) 
                                                             #line 1400 
                                                             list_add_tail_3(& rxbuf->list,& sds_ring->free_list[(int)ring]); else 
                                                                    #line 1402 
                                                                    (adapter->stats.null_rxbuf) ++;
    #line 1403 
    skip: 
          #line 1403 
    ;
    #line 1404 
    while (desc_cnt > 0) {
      #line 1405 
      desc = sds_ring->desc_head + (unsigned long)consumer;
      #line 1406 
      desc->status_desc_data[0] = 144115188075855872ULL;
      #line 1407 
      consumer = (consumer + 1U) & (sds_ring->num_desc + 4294967295U);
      #line 1404 
      desc_cnt --;
    }
    #line 1409 
    count ++;
  }
  #line 1412 
  ring = (unsigned char)0U;
  #line 1412 
  while ((int)adapter->max_rds_rings > (int)ring) {
    {
      #line 1413 
      rds_ring = (adapter->recv_ctx)->rds_rings + (unsigned long)ring;
      #line 1414 
      if (list_empty_2(& sds_ring->free_list[(int)ring]) == 0) {
        #line 1415 
        cur = sds_ring->free_list[(int)ring].next;
        #line 1415 
        while (& sds_ring->free_list[(int)ring] != cur) {
          {
            #line 1416 
            void *__mptr;
            #line 1416 
            __mptr = (void *)cur;
            #line 1416 
            rxbuf = ((struct qlcnic_rx_buffer *)(__mptr + 18446744073709551600U));
            #line 1418 
            qlcnic_alloc_rx_skb(adapter,rds_ring,rxbuf);
          }
          #line 1415 
          cur = cur->next;
        }
        #line 1420 
        cif_spin_lock_lock_of_qlcnic_host_rds_ring(& rds_ring->lock);
        #line 1421 
        list_splice_tail_init(& sds_ring->free_list[(int)ring],& rds_ring->free_list);
        #line 1423 
        cif_spin_unlock_lock_of_qlcnic_host_rds_ring(& rds_ring->lock);
      }
      #line 1426 
      qlcnic_post_rx_buffers_nodb(adapter,rds_ring,(unsigned char)((int)ring));
    }
    #line 1412 
    ring = (u8)((int)ring + 1);
  }
  #line 1429 
  if (count != 0) {
    #line 1430 
    sds_ring->consumer = consumer;
    #line 1431 
    writel(consumer,sds_ring->crb_sts_consumer);
  }
  #line 1434 
  return count;
}

#line 1437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_post_rx_buffers(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *rds_ring, u8 ring_id)
{
  #line 1440 
  struct rcv_desc *pdesc;
  #line 1441 
  struct qlcnic_rx_buffer *buffer;
  #line 1443 
  u32 producer;
  #line 1443 
  u32 handle;
  #line 1444 
  struct list_head *head;
  #line 1442 
  int count = 0;
  #line 1446 
  producer = rds_ring->producer;
  #line 1447 
  head = & rds_ring->free_list;
  #line 1449 
  while (1) {
    #line 1449 
    if (! (list_empty_2(head) == 0)) 
                                     #line 1449 
                                     break;
    {
      #line 1451 
      void *__mptr;
      #line 1451 
      __mptr = (void *)head->next;
      #line 1451 
      buffer = ((struct qlcnic_rx_buffer *)(__mptr + 18446744073709551600U));
      #line 1453 
      if (buffer->skb == (struct sk_buff *)0) {
        #line 1454 
        if (qlcnic_alloc_rx_skb(adapter,rds_ring,buffer) != 0) 
                                                               #line 1455 
                                                               break;
      }
      #line 1458 
      count ++;
      #line 1459 
      list_del_3(& buffer->list);
      #line 1462 
      pdesc = rds_ring->desc_head + (unsigned long)producer;
      #line 1463 
      pdesc->addr_buffer = buffer->dma;
      #line 1464 
      handle = qlcnic_get_ref_handle(adapter,(unsigned short)((int)buffer->ref_handle),(unsigned char)((int)ring_id));
      #line 1466 
      pdesc->reference_handle = (unsigned short)handle;
      #line 1467 
      pdesc->buffer_length = rds_ring->dma_size;
      #line 1468 
      producer = (producer + 1U) & (rds_ring->num_desc + 4294967295U);
    }
  }
  #line 1471 
  if (count != 0) {
    #line 1472 
    rds_ring->producer = producer;
    #line 1473 
    writel((producer + 4294967295U) & (rds_ring->num_desc + 4294967295U),rds_ring->crb_rcv_producer);
  }
  #line 1476 
  return;
}

#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void dump_skb(struct sk_buff *skb, struct qlcnic_adapter *adapter)
{
  #line 1480 
  if (((adapter->ahw)->msg_enable & 1U) != 0U) {
    #line 1481 
    char prefix[30U];
    #line 1483 
    scnprintf((char *)(& prefix),30UL,(char *)"%s: %s: ",dev_name(& (adapter->pdev)->dev),(char *)"dump_skb");
    {
      #line 1486 
      bool branch;
      #line 1486 
      struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"qlcnic", .function = (char *)"dump_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c", .format = (char *)"hexdump", .lineno = (unsigned int)1486U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1486 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
      #line 1486 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1486 
                                                  print_hex_dump((char *)"\001",(char *)(& prefix),0,16,1,(void *)skb->data,(unsigned long)skb->len,(_Bool)1);
    }
  }
  #line 1489 
  return;
}

#line 1491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_process_rcv_diag(struct qlcnic_adapter *adapter, int ring, u64 sts_data0)
{
  #line 1495 
  struct sk_buff *skb;
  #line 1496 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 1497 
  int index;
  #line 1497 
  int length;
  #line 1497 
  int cksum;
  #line 1497 
  int pkt_offset;
  #line 1494 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1499 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) 
                                                         #line 1500 
                                                         return;
  #line 1502 
  rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
  #line 1504 
  index = (int)(sts_data0 >> 28) & 65535;
  #line 1505 
  length = (int)(sts_data0 >> 12) & 65535;
  #line 1506 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
                                                               #line 1507 
                                                               return;
  #line 1509 
  cksum = (int)(sts_data0 >> 4) & 15;
  #line 1510 
  pkt_offset = (int)(sts_data0 >> 48) & 31;
  #line 1512 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)((int)((unsigned short)cksum)));
  #line 1513 
  if (skb == (struct sk_buff *)0) 
                                  #line 1514 
                                  return;
  #line 1516 
  if (rds_ring->skb_size < (unsigned int)length) 
                                                 #line 1517 
                                                 skb_put(skb,rds_ring->skb_size); else 
                                                                    #line 1519 
                                                                    skb_put(skb,(unsigned int)length);
  #line 1521 
  if (pkt_offset != 0) 
                       #line 1522 
                       skb_pull(skb,(unsigned int)pkt_offset);
  #line 1524 
  if (qlcnic_check_loopback_buff(skb->data,(u8 *)(& adapter->mac_addr)) == 0) 
    #line 1525 
    ((adapter->ahw)->diag_cnt) ++; else 
                                        #line 1527 
                                        dump_skb(skb,adapter);
  #line 1529 
  dev_kfree_skb_any(skb);
  #line 1530 
  (adapter->stats.rx_pkts) ++;
  #line 1531 
  adapter->stats.rxbytes += (unsigned long long)length;
  #line 1533 
  return;
}

#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring)
{
  #line 1539 
  struct status_desc *desc;
  #line 1540 
  u64 sts_data0;
  #line 1541 
  int ring;
  #line 1541 
  int opcode;
  #line 1541 
  int desc_cnt;
  #line 1538 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  #line 1543 
  u32 consumer = sds_ring->consumer;
  #line 1545 
  desc = sds_ring->desc_head + (unsigned long)consumer;
  #line 1546 
  sts_data0 = desc->status_desc_data[0];
  #line 1548 
  if ((sts_data0 & 72057594037927936ULL) == 0ULL) 
                                                  #line 1549 
                                                  return;
  #line 1551 
  desc_cnt = (int)(sts_data0 >> 53) & 7;
  #line 1552 
  opcode = (int)(sts_data0 >> 58);
  #line 1553 
  switch (opcode) {
    #line 1554 
    case 5: 
            #line 1554 
    ;
    #line 1555 
    qlcnic_handle_fw_message(desc_cnt,(int)consumer,sds_ring);
    #line 1556 
    break;
    #line 1557 
    default: 
             #line 1557 
    ;
    #line 1558 
    ring = (int)(sts_data0 >> 8) & 15;
    #line 1559 
    qlcnic_process_rcv_diag(adapter,ring,sts_data0);
    #line 1560 
    break;
  }
  #line 1563 
  while (desc_cnt > 0) {
    #line 1564 
    desc = sds_ring->desc_head + (unsigned long)consumer;
    #line 1565 
    desc->status_desc_data[0] = 144115188075855872ULL;
    #line 1566 
    consumer = (consumer + 1U) & (sds_ring->num_desc + 4294967295U);
    #line 1563 
    desc_cnt --;
  }
  #line 1569 
  sds_ring->consumer = consumer;
  #line 1570 
  writel(consumer,sds_ring->crb_sts_consumer);
  #line 1571 
  return;
}

#line 1573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
int qlcnic_82xx_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  #line 1576 
  int ring;
  #line 1577 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1579 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1578 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1581 
  if (qlcnic_alloc_sds_rings(recv_ctx,(int)adapter->drv_sds_rings) != 0) 
    #line 1582 
    return -12;
  #line 1584 
  ring = 0;
  #line 1584 
  while ((int)adapter->drv_sds_rings > ring) {
    {
      #line 1585 
      sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
      #line 1586 
      if ((int)qlcnic_check_multi_tx(adapter) != 0) {
        #line 1586 
        if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
                                                           #line 1588 
                                                           netif_napi_add(netdev,& sds_ring->napi,& qlcnic_rx_poll,64); else 
                                                                    #line 1586 
                                                                    goto _LAND;
      }
      else {
        #line 1586 
        _LAND: 
               #line 1591 
        ;
        #line 1591 
        if ((int)adapter->drv_sds_rings + -1 == ring) 
                                                      #line 1592 
                                                      netif_napi_add(netdev,& sds_ring->napi,& qlcnic_poll,64); else 
                                                                    #line 1596 
                                                                    netif_napi_add(netdev,& sds_ring->napi,& qlcnic_rx_poll,64);
      }
    }
    #line 1584 
    ring ++;
  }
  #line 1602 
  if (qlcnic_alloc_tx_rings(adapter,netdev) != 0) {
    #line 1603 
    qlcnic_free_sds_rings(recv_ctx);
    #line 1604 
    return -12;
  }
  #line 1607 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
    #line 1607 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) {
      #line 1608 
      ring = 0;
      #line 1608 
      while ((int)adapter->drv_tx_rings > ring) {
        #line 1609 
        tx_ring = adapter->tx_ring + (unsigned long)ring;
        #line 1610 
        netif_tx_napi_add(netdev,& tx_ring->napi,& qlcnic_tx_poll,64);
        #line 1608 
        ring ++;
      }
    }
  #line 1615 
  return 0;
}

#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_napi_del(struct qlcnic_adapter *adapter)
{
  #line 1620 
  int ring;
  #line 1621 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1623 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1622 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1625 
  ring = 0;
  #line 1625 
  while ((int)adapter->drv_sds_rings > ring) {
    #line 1626 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 1627 
    netif_napi_del(& sds_ring->napi);
    #line 1625 
    ring ++;
  }
  #line 1630 
  qlcnic_free_sds_rings(adapter->recv_ctx);
  #line 1632 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
    #line 1632 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) {
      #line 1633 
      ring = 0;
      #line 1633 
      while ((int)adapter->drv_tx_rings > ring) {
        #line 1634 
        tx_ring = adapter->tx_ring + (unsigned long)ring;
        #line 1635 
        netif_napi_del(& tx_ring->napi);
        #line 1633 
        ring ++;
      }
    }
  #line 1639 
  qlcnic_free_tx_rings(adapter);
  #line 1640 
  return;
}

#line 1642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_napi_enable(struct qlcnic_adapter *adapter)
{
  #line 1644 
  int ring;
  #line 1645 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1646 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1647 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1649 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 1650 
                                            return;
  #line 1652 
  ring = 0;
  #line 1652 
  while ((int)adapter->drv_sds_rings > ring) {
    #line 1653 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 1654 
    napi_enable(& sds_ring->napi);
    #line 1655 
    qlcnic_enable_sds_intr(adapter,sds_ring);
    #line 1652 
    ring ++;
  }
  #line 1658 
  if ((int)qlcnic_check_multi_tx(adapter) != 0) 
    #line 1658 
    if ((adapter->flags & 4U) != 0U) 
      #line 1659 
      if ((unsigned int)(adapter->ahw)->diag_test == 0U) {
        #line 1661 
        ring = 0;
        #line 1661 
        while ((int)adapter->drv_tx_rings > ring) {
          #line 1662 
          tx_ring = adapter->tx_ring + (unsigned long)ring;
          #line 1663 
          napi_enable(& tx_ring->napi);
          #line 1664 
          qlcnic_enable_tx_intr(adapter,tx_ring);
          #line 1661 
          ring ++;
        }
      }
  #line 1667 
  return;
}

#line 1669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_napi_disable(struct qlcnic_adapter *adapter)
{
  #line 1671 
  int ring;
  #line 1672 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1673 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1674 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1676 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 1677 
                                            return;
  #line 1679 
  ring = 0;
  #line 1679 
  while ((int)adapter->drv_sds_rings > ring) {
    #line 1680 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 1681 
    qlcnic_disable_sds_intr(adapter,sds_ring);
    #line 1682 
    napi_synchronize(& sds_ring->napi);
    #line 1683 
    napi_disable(& sds_ring->napi);
    #line 1679 
    ring ++;
  }
  #line 1686 
  if ((adapter->flags & 4U) != 0U && (unsigned int)(adapter->ahw)->diag_test == 0U) {
    #line 1687 
    if ((int)qlcnic_check_multi_tx(adapter) != 0) {
      #line 1689 
      ring = 0;
      #line 1689 
      while ((int)adapter->drv_tx_rings > ring) {
        #line 1690 
        tx_ring = adapter->tx_ring + (unsigned long)ring;
        #line 1691 
        qlcnic_disable_tx_intr(adapter,tx_ring);
        #line 1692 
        napi_synchronize(& tx_ring->napi);
        #line 1693 
        napi_disable(& tx_ring->napi);
        #line 1689 
        ring ++;
      }
    }
  }
  #line 1696 
  return;
}

#line 1701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static int qlcnic_83xx_is_lb_pkt(u64 sts_data, int lro_pkt)
{
  #line 1703 
  if (lro_pkt != 0) 
                    #line 1704 
                    return (int)(sts_data >> 46) & 1; else 
                                                           #line 1706 
                                                           return (int)(sts_data >> 36) & 1;
}

#line 1711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static u8 qlcnic_encap_length(u64 sts_data)
{
  #line 1713 
  return (unsigned char)((unsigned int)((unsigned char)sts_data) & 127U);
}

#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_rx_buffer *qlcnic_83xx_process_rcv(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring, u8 ring, u64 *sts_data)
{
  #line 1723 
  struct qlcnic_rx_buffer *buffer;
  #line 1724 
  struct sk_buff *skb;
  #line 1725 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 1726 
  int index;
  #line 1726 
  int length;
  #line 1726 
  int cksum;
  #line 1726 
  int is_lb_pkt;
  #line 1728 
  int err;
  #line 1721 
  struct net_device *netdev = adapter->netdev;
  #line 1722 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1727 
  u16 vid = (unsigned short)65535U;
  #line 1730 
  if ((long)((int)adapter->max_rds_rings <= (int)ring) != 0L) 
                                                              #line 1731 
                                                              return (struct qlcnic_rx_buffer *)0;
  #line 1733 
  rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
  #line 1735 
  index = (int)(*sts_data >> 48) & 32767;
  #line 1736 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
                                                               #line 1737 
                                                               return (struct qlcnic_rx_buffer *)0;
  #line 1739 
  buffer = rds_ring->rx_buf_arr + (unsigned long)index;
  #line 1740 
  length = (int)(*sts_data >> 32) & 16383;
  #line 1741 
  cksum = (int)(*(sts_data + 1U) >> 39) & 7;
  #line 1742 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)((int)((unsigned short)cksum)));
  #line 1743 
  if (skb == (struct sk_buff *)0) 
                                  #line 1744 
                                  return buffer;
  #line 1746 
  if (rds_ring->skb_size < (unsigned int)length) 
                                                 #line 1747 
                                                 skb_put(skb,rds_ring->skb_size); else 
                                                                    #line 1749 
                                                                    skb_put(skb,(unsigned int)length);
  #line 1751 
  err = qlcnic_check_rx_tagging(adapter,skb,& vid);
  #line 1753 
  if ((int)adapter->rx_mac_learn != 0) {
    #line 1754 
    is_lb_pkt = qlcnic_83xx_is_lb_pkt(*(sts_data + 1U),0);
    #line 1755 
    qlcnic_add_lb_filter(adapter,skb,is_lb_pkt,(unsigned short)((int)vid));
  }
  #line 1758 
  if ((long)(err != 0) != 0L) {
    #line 1759 
    (adapter->stats.rxdropped) ++;
    #line 1760 
    consume_skb(skb);
    #line 1761 
    return buffer;
  }
  #line 1764 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 1766 
  if ((unsigned int)qlcnic_encap_length(*(sts_data + 1U)) != 0U) 
    #line 1766 
    if ((unsigned int)skb->ip_summed == 1U) {
      #line 1768 
      skb->csum_level = (unsigned char)1U;
      #line 1769 
      (adapter->stats.encap_rx_csummed) ++;
    }
  #line 1772 
  if ((unsigned int)vid != 65535U) 
                                   #line 1773 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
  #line 1775 
  napi_gro_receive(& sds_ring->napi,skb);
  #line 1777 
  (adapter->stats.rx_pkts) ++;
  #line 1778 
  adapter->stats.rxbytes += (unsigned long long)length;
  #line 1780 
  return buffer;
}

#line 1784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_rx_buffer *qlcnic_83xx_process_lro(struct qlcnic_adapter *adapter, u8 ring, u64 *sts_data)
{
  #line 1789 
  struct qlcnic_rx_buffer *buffer;
  #line 1790 
  struct sk_buff *skb;
  #line 1791 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 1792 
  struct iphdr *iph;
  #line 1793 
  struct ipv6hdr *ipv6h;
  #line 1794 
  struct tcphdr *th;
  #line 1795 
  bool push;
  #line 1796 
  int l2_hdr_offset;
  #line 1796 
  int l4_hdr_offset;
  #line 1797 
  int index;
  #line 1797 
  int is_lb_pkt;
  #line 1798 
  u16 lro_length;
  #line 1798 
  u16 length;
  #line 1798 
  u16 data_offset;
  #line 1798 
  u16 gso_size;
  #line 1800 
  int err;
  #line 1787 
  struct net_device *netdev = adapter->netdev;
  #line 1788 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 1799 
  u16 vid = (unsigned short)65535U;
  #line 1802 
  if ((long)((int)adapter->max_rds_rings <= (int)ring) != 0L) 
                                                              #line 1803 
                                                              return (struct qlcnic_rx_buffer *)0;
  #line 1805 
  rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
  #line 1807 
  index = (int)(*sts_data >> 48) & 32767;
  #line 1808 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
                                                               #line 1809 
                                                               return (struct qlcnic_rx_buffer *)0;
  #line 1811 
  buffer = rds_ring->rx_buf_arr + (unsigned long)index;
  #line 1813 
  lro_length = (unsigned short)((unsigned int)((unsigned short)(*sts_data >> 32)) & 16383U);
  #line 1814 
  l2_hdr_offset = (int)(*(sts_data + 1U) >> 16) & 255;
  #line 1815 
  l4_hdr_offset = (int)(*(sts_data + 1U) >> 24) & 255;
  #line 1816 
  push = (_Bool)(((*(sts_data + 1U) >> 41) & 1ULL) != 0ULL);
  #line 1818 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)2);
  #line 1819 
  if (skb == (struct sk_buff *)0) 
                                  #line 1820 
                                  return buffer;
  #line 1822 
  if ((*(sts_data + 1U) & 1099511627776ULL) != 0ULL) 
                                                     #line 1823 
                                                     data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 32U); else 
                                                                    #line 1825 
                                                                    data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 20U);
  #line 1827 
  skb_put(skb,(unsigned int)((int)lro_length + (int)data_offset));
  #line 1828 
  skb_pull(skb,(unsigned int)l2_hdr_offset);
  #line 1830 
  err = qlcnic_check_rx_tagging(adapter,skb,& vid);
  #line 1832 
  if ((int)adapter->rx_mac_learn != 0) {
    #line 1833 
    is_lb_pkt = qlcnic_83xx_is_lb_pkt(*(sts_data + 1U),1);
    #line 1834 
    qlcnic_add_lb_filter(adapter,skb,is_lb_pkt,(unsigned short)((int)vid));
  }
  #line 1837 
  if ((long)(err != 0) != 0L) {
    #line 1838 
    (adapter->stats.rxdropped) ++;
    #line 1839 
    consume_skb(skb);
    #line 1840 
    return buffer;
  }
  #line 1843 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 1844 
  if ((unsigned int)__builtin_bswap16((unsigned short)((int)skb->protocol)) == 34525U) {
    #line 1845 
    ipv6h = (struct ipv6hdr *)skb->data;
    #line 1846 
    th = (struct tcphdr *)(skb->data + 40UL);
    #line 1848 
    length = (unsigned short)(((int)((unsigned short)th->doff) << 2U) + (int)lro_length);
    #line 1849 
    ipv6h->payload_len = __builtin_bswap16((unsigned short)((int)length));
  }
  else {
    #line 1851 
    iph = (struct iphdr *)skb->data;
    #line 1852 
    th = (struct tcphdr *)(skb->data + (unsigned long)((int)iph->ihl << 2));
    #line 1853 
    length = (unsigned short)((((int)((unsigned short)iph->ihl) << 2U) + ((int)((unsigned short)th->doff) << 2U)) + (int)lro_length);
    #line 1854 
    ;
    #line 1854 
    ;
    #line 1854 
    csum_replace2(& iph->check,(unsigned short)((int)iph->tot_len),(unsigned short)((int)__builtin_bswap16((unsigned short)((int)length))));
    #line 1855 
    iph->tot_len = __builtin_bswap16((unsigned short)((int)length));
  }
  #line 1858 
  th->psh = (unsigned short)push;
  #line 1859 
  length = (unsigned short)skb->len;
  #line 1861 
  if ((adapter->flags & 32768U) != 0U) {
    #line 1862 
    gso_size = (unsigned short)*sts_data;
    #line 1863 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size = gso_size;
    #line 1864 
    if ((unsigned int)skb->protocol == 56710U) {
      #line 1865 
      ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type = 16U;
    }
    else {
      #line 1867 
      ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type = 1U;
    }
  }
  #line 1870 
  if ((unsigned int)vid != 65535U) 
                                   #line 1871 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
  #line 1873 
  netif_receive_skb(skb);
  #line 1875 
  (adapter->stats.lro_pkts) ++;
  #line 1876 
  adapter->stats.lrobytes += (unsigned long long)length;
  #line 1877 
  return buffer;
}

#line 1880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_process_rcv_ring(struct qlcnic_host_sds_ring *sds_ring, int max)
{
  #line 1883 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 1885 
  struct list_head *cur;
  #line 1886 
  struct status_desc *desc;
  #line 1888 
  u8 ring;
  #line 1889 
  u64 sts_data[2U];
  #line 1890 
  int opcode;
  #line 1884 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  #line 1887 
  struct qlcnic_rx_buffer *rxbuf = (struct qlcnic_rx_buffer *)0;
  #line 1890 
  int count = 0;
  #line 1891 
  u32 consumer = sds_ring->consumer;
  #line 1893 
  while (count < max) {
    #line 1894 
    desc = sds_ring->desc_head + (unsigned long)consumer;
    #line 1895 
    sts_data[1] = desc->status_desc_data[1];
    #line 1896 
    opcode = (int)(sts_data[1] >> 42) & 15;
    #line 1897 
    if (opcode == 0) 
                     #line 1898 
                     break;
    #line 1899 
    sts_data[0] = desc->status_desc_data[0];
    #line 1900 
    ring = (unsigned char)(sts_data[0] >> 63);
    #line 1902 
    switch (opcode) {
      #line 1903 
      case 1: 
              #line 1903 
      ;
      #line 1904 
      rxbuf = qlcnic_83xx_process_rcv(adapter,sds_ring,(unsigned char)((int)ring),(u64 *)(& sts_data));
      #line 1906 
      break;
      #line 1907 
      case 2: 
              #line 1907 
      ;
      #line 1908 
      rxbuf = qlcnic_83xx_process_lro(adapter,(unsigned char)((int)ring),(u64 *)(& sts_data));
      #line 1910 
      break;
      #line 1911 
      default: 
               #line 1911 
      ;
      #line 1912 
      _dev_info(& (adapter->pdev)->dev,(char *)"Unknown opcode: 0x%x\n",opcode);
      #line 1914 
      goto skip;
    }
    #line 1917 
    if ((long)(rxbuf != (struct qlcnic_rx_buffer *)0) != 0L) 
                                                             #line 1918 
                                                             list_add_tail_3(& rxbuf->list,& sds_ring->free_list[(int)ring]); else 
                                                                    #line 1920 
                                                                    (adapter->stats.null_rxbuf) ++;
    #line 1921 
    skip: 
          #line 1921 
    ;
    #line 1922 
    desc = sds_ring->desc_head + (unsigned long)consumer;
    #line 1924 
    desc->status_desc_data[1] = 0ULL;
    #line 1925 
    consumer = (consumer + 1U) & (sds_ring->num_desc + 4294967295U);
    #line 1926 
    count ++;
  }
  #line 1928 
  ring = (unsigned char)0U;
  #line 1928 
  while ((int)adapter->max_rds_rings > (int)ring) {
    {
      #line 1929 
      rds_ring = (adapter->recv_ctx)->rds_rings + (unsigned long)ring;
      #line 1930 
      if (list_empty_2(& sds_ring->free_list[(int)ring]) == 0) {
        #line 1931 
        cur = sds_ring->free_list[(int)ring].next;
        #line 1931 
        while (& sds_ring->free_list[(int)ring] != cur) {
          {
            #line 1932 
            void *__mptr;
            #line 1932 
            __mptr = (void *)cur;
            #line 1932 
            rxbuf = ((struct qlcnic_rx_buffer *)(__mptr + 18446744073709551600U));
            #line 1934 
            qlcnic_alloc_rx_skb(adapter,rds_ring,rxbuf);
          }
          #line 1931 
          cur = cur->next;
        }
        #line 1936 
        cif_spin_lock_lock_of_qlcnic_host_rds_ring(& rds_ring->lock);
        #line 1937 
        list_splice_tail_init(& sds_ring->free_list[(int)ring],& rds_ring->free_list);
        #line 1939 
        cif_spin_unlock_lock_of_qlcnic_host_rds_ring(& rds_ring->lock);
      }
      #line 1941 
      qlcnic_post_rx_buffers_nodb(adapter,rds_ring,(unsigned char)((int)ring));
    }
    #line 1928 
    ring = (u8)((int)ring + 1);
  }
  #line 1943 
  if (count != 0) {
    #line 1944 
    sds_ring->consumer = consumer;
    #line 1945 
    writel(consumer,sds_ring->crb_sts_consumer);
  }
  #line 1947 
  return count;
}

#line 1950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_msix_sriov_vf_poll(struct napi_struct *napi, int budget)
{
  #line 1958 
  void *__mptr;
  #line 1952 
  int tx_complete;
  #line 1953 
  int work_done;
  #line 1954 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1955 
  struct qlcnic_adapter *adapter;
  #line 1956 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1958 
  __mptr = (void *)napi;
  #line 1958 
  sds_ring = ((struct qlcnic_host_sds_ring *)(__mptr + 18446744073709551576U));
  #line 1959 
  adapter = sds_ring->adapter;
  #line 1961 
  tx_ring = adapter->tx_ring;
  #line 1963 
  tx_complete = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  #line 1964 
  work_done = qlcnic_83xx_process_rcv_ring(sds_ring,budget);
  #line 1967 
  if (tx_complete == 0) 
                        #line 1968 
                        work_done = budget;
  #line 1970 
  if (work_done < budget) {
    #line 1971 
    napi_complete_done(& sds_ring->napi,work_done);
    #line 1972 
    qlcnic_enable_sds_intr(adapter,sds_ring);
  }
  #line 1975 
  return work_done;
}

#line 1978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_poll(struct napi_struct *napi, int budget)
{
  #line 1986 
  void *__mptr;
  #line 1980 
  int tx_complete;
  #line 1981 
  int work_done;
  #line 1982 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 1983 
  struct qlcnic_adapter *adapter;
  #line 1984 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 1986 
  __mptr = (void *)napi;
  #line 1986 
  sds_ring = ((struct qlcnic_host_sds_ring *)(__mptr + 18446744073709551576U));
  #line 1987 
  adapter = sds_ring->adapter;
  #line 1989 
  tx_ring = adapter->tx_ring;
  #line 1991 
  tx_complete = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  #line 1992 
  work_done = qlcnic_83xx_process_rcv_ring(sds_ring,budget);
  #line 1995 
  if (tx_complete == 0) 
                        #line 1996 
                        work_done = budget;
  #line 1998 
  if (work_done < budget) {
    #line 1999 
    napi_complete_done(& sds_ring->napi,work_done);
    #line 2000 
    qlcnic_enable_sds_intr(adapter,sds_ring);
  }
  #line 2003 
  return work_done;
}

#line 2006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_msix_tx_poll(struct napi_struct *napi, int budget)
{
  #line 2012 
  void *__mptr;
  #line 2008 
  int work_done;
  #line 2009 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 2010 
  struct qlcnic_adapter *adapter;
  #line 2012 
  __mptr = (void *)napi;
  #line 2012 
  tx_ring = ((struct qlcnic_host_tx_ring *)(__mptr + 18446744073709551488U));
  #line 2013 
  adapter = tx_ring->adapter;
  #line 2014 
  work_done = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  #line 2015 
  if (work_done != 0) {
    #line 2016 
    napi_complete(& tx_ring->napi);
    #line 2017 
    if ((int)test_bit(1L,& adapter->state) != 0) 
                                                 #line 2018 
                                                 qlcnic_enable_tx_intr(adapter,tx_ring);
  }
  else 
       #line 2021 
       work_done = budget;
  #line 2024 
  return work_done;
}

#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_rx_poll(struct napi_struct *napi, int budget)
{
  #line 2033 
  void *__mptr;
  #line 2029 
  int work_done;
  #line 2030 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 2031 
  struct qlcnic_adapter *adapter;
  #line 2033 
  __mptr = (void *)napi;
  #line 2033 
  sds_ring = ((struct qlcnic_host_sds_ring *)(__mptr + 18446744073709551576U));
  #line 2034 
  adapter = sds_ring->adapter;
  #line 2035 
  work_done = qlcnic_83xx_process_rcv_ring(sds_ring,budget);
  #line 2036 
  if (work_done < budget) {
    #line 2037 
    napi_complete_done(& sds_ring->napi,work_done);
    #line 2038 
    if ((int)test_bit(1L,& adapter->state) != 0) 
                                                 #line 2039 
                                                 qlcnic_enable_sds_intr(adapter,sds_ring);
  }
  #line 2042 
  return work_done;
}

#line 2045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_83xx_napi_enable(struct qlcnic_adapter *adapter)
{
  #line 2047 
  int ring;
  #line 2048 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 2049 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 2050 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 2052 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 2053 
                                            return;
  #line 2055 
  ring = 0;
  #line 2055 
  while ((int)adapter->drv_sds_rings > ring) {
    #line 2056 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 2057 
    napi_enable(& sds_ring->napi);
    #line 2058 
    if ((adapter->flags & 4U) != 0U) 
                                     #line 2059 
                                     qlcnic_enable_sds_intr(adapter,sds_ring);
    #line 2055 
    ring ++;
  }
  #line 2062 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    #line 2064 
    ring = 0;
    #line 2064 
    while ((int)adapter->drv_tx_rings > ring) {
      #line 2065 
      tx_ring = adapter->tx_ring + (unsigned long)ring;
      #line 2066 
      napi_enable(& tx_ring->napi);
      #line 2067 
      qlcnic_enable_tx_intr(adapter,tx_ring);
      #line 2064 
      ring ++;
    }
  }
  #line 2070 
  return;
}

#line 2072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_83xx_napi_disable(struct qlcnic_adapter *adapter)
{
  #line 2074 
  int ring;
  #line 2075 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 2077 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 2076 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 2079 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 2080 
                                            return;
  #line 2082 
  ring = 0;
  #line 2082 
  while ((int)adapter->drv_sds_rings > ring) {
    #line 2083 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 2084 
    if ((adapter->flags & 4U) != 0U) 
                                     #line 2085 
                                     qlcnic_disable_sds_intr(adapter,sds_ring);
    #line 2086 
    napi_synchronize(& sds_ring->napi);
    #line 2087 
    napi_disable(& sds_ring->napi);
    #line 2082 
    ring ++;
  }
  #line 2090 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    #line 2092 
    ring = 0;
    #line 2092 
    while ((int)adapter->drv_tx_rings > ring) {
      #line 2093 
      tx_ring = adapter->tx_ring + (unsigned long)ring;
      #line 2094 
      qlcnic_disable_tx_intr(adapter,tx_ring);
      #line 2095 
      napi_synchronize(& tx_ring->napi);
      #line 2096 
      napi_disable(& tx_ring->napi);
      #line 2092 
      ring ++;
    }
  }
  #line 2099 
  return;
}

#line 2101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
int qlcnic_83xx_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  #line 2104 
  int ring;
  #line 2105 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 2106 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 2107 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 2109 
  if (qlcnic_alloc_sds_rings(recv_ctx,(int)adapter->drv_sds_rings) != 0) 
    #line 2110 
    return -12;
  #line 2112 
  ring = 0;
  #line 2112 
  while ((int)adapter->drv_sds_rings > ring) {
    #line 2113 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 2114 
    if ((adapter->flags & 4U) != 0U) 
      #line 2115 
      if ((adapter->flags & 65536U) == 0U) 
                                           #line 2116 
                                           netif_napi_add(netdev,& sds_ring->napi,& qlcnic_83xx_rx_poll,64); else 
                                                                    #line 2120 
                                                                    netif_napi_add(netdev,& sds_ring->napi,& qlcnic_83xx_msix_sriov_vf_poll,64);
    else 
         #line 2125 
         netif_napi_add(netdev,& sds_ring->napi,& qlcnic_83xx_poll,64);
    #line 2112 
    ring ++;
  }
  #line 2131 
  if (qlcnic_alloc_tx_rings(adapter,netdev) != 0) {
    #line 2132 
    qlcnic_free_sds_rings(recv_ctx);
    #line 2133 
    return -12;
  }
  #line 2136 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    #line 2138 
    ring = 0;
    #line 2138 
    while ((int)adapter->drv_tx_rings > ring) {
      #line 2139 
      tx_ring = adapter->tx_ring + (unsigned long)ring;
      #line 2140 
      netif_tx_napi_add(netdev,& tx_ring->napi,& qlcnic_83xx_msix_tx_poll,64);
      #line 2138 
      ring ++;
    }
  }
  #line 2146 
  return 0;
}

#line 2149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_83xx_napi_del(struct qlcnic_adapter *adapter)
{
  #line 2151 
  int ring;
  #line 2152 
  struct qlcnic_host_sds_ring *sds_ring;
  #line 2154 
  struct qlcnic_host_tx_ring *tx_ring;
  #line 2153 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 2156 
  ring = 0;
  #line 2156 
  while ((int)adapter->drv_sds_rings > ring) {
    #line 2157 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 2158 
    netif_napi_del(& sds_ring->napi);
    #line 2156 
    ring ++;
  }
  #line 2161 
  qlcnic_free_sds_rings(adapter->recv_ctx);
  #line 2163 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    #line 2165 
    ring = 0;
    #line 2165 
    while ((int)adapter->drv_tx_rings > ring) {
      #line 2166 
      tx_ring = adapter->tx_ring + (unsigned long)ring;
      #line 2167 
      netif_napi_del(& tx_ring->napi);
      #line 2165 
      ring ++;
    }
  }
  #line 2171 
  qlcnic_free_tx_rings(adapter);
  #line 2172 
  return;
}

#line 2174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_83xx_process_rcv_diag(struct qlcnic_adapter *adapter, int ring, u64 *sts_data)
{
  #line 2178 
  struct sk_buff *skb;
  #line 2179 
  struct qlcnic_host_rds_ring *rds_ring;
  #line 2180 
  int index;
  #line 2180 
  int length;
  #line 2177 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  #line 2182 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) 
                                                         #line 2183 
                                                         return;
  #line 2185 
  rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
  #line 2186 
  index = (int)(*sts_data >> 48) & 32767;
  #line 2187 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
                                                               #line 2188 
                                                               return;
  #line 2190 
  length = (int)(*sts_data >> 32) & 16383;
  #line 2192 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)2);
  #line 2193 
  if (skb == (struct sk_buff *)0) 
                                  #line 2194 
                                  return;
  #line 2196 
  if (rds_ring->skb_size < (unsigned int)length) 
                                                 #line 2197 
                                                 skb_put(skb,rds_ring->skb_size); else 
                                                                    #line 2199 
                                                                    skb_put(skb,(unsigned int)length);
  #line 2201 
  if (qlcnic_check_loopback_buff(skb->data,(u8 *)(& adapter->mac_addr)) == 0) 
    #line 2202 
    ((adapter->ahw)->diag_cnt) ++; else 
                                        #line 2204 
                                        dump_skb(skb,adapter);
  #line 2206 
  dev_kfree_skb_any(skb);
  #line 2207 
  return;
}

#line 2210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_83xx_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring)
{
  #line 2213 
  struct status_desc *desc;
  #line 2214 
  u64 sts_data[2U];
  #line 2215 
  int ring;
  #line 2215 
  int opcode;
  #line 2212 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  #line 2216 
  u32 consumer = sds_ring->consumer;
  #line 2218 
  desc = sds_ring->desc_head + (unsigned long)consumer;
  #line 2219 
  sts_data[0] = desc->status_desc_data[0];
  #line 2220 
  sts_data[1] = desc->status_desc_data[1];
  #line 2221 
  opcode = (int)(sts_data[1] >> 42) & 15;
  #line 2222 
  if (opcode == 0) 
                   #line 2223 
                   return;
  #line 2225 
  ring = (int)(sts_data[0] >> 63);
  #line 2226 
  qlcnic_83xx_process_rcv_diag(adapter,ring,(u64 *)(& sts_data));
  #line 2227 
  desc = sds_ring->desc_head + (unsigned long)consumer;
  #line 2228 
  desc->status_desc_data[0] = 144115188075855872ULL;
  #line 2229 
  consumer = (consumer + 1U) & (sds_ring->num_desc + 4294967295U);
  #line 2230 
  sds_ring->consumer = consumer;
  #line 2231 
  writel(consumer,sds_ring->crb_sts_consumer);
  #line 2232 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_set_bit_9(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_clear_bit_8(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void INIT_LIST_HEAD_6(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void *kzalloc_7(size_t size, gfp_t flags)
{
  #line 377 
  return ldv_kzalloc(size,flags);
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_lock_rx_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock)
{
  #line 818 
  ldv_spin_model_lock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  #line 820 
  spin_lock_2(lock);
  #line 821 
  return;
}

#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_unlock_rx_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock)
{
  #line 827 
  ldv_spin_model_unlock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  #line 829 
  spin_unlock_2(lock);
  #line 830 
  return;
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_lock_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock)
{
  #line 836 
  ldv_spin_model_lock((char *)"mac_learn_lock_of_qlcnic_adapter");
  #line 838 
  spin_lock_2(lock);
  #line 839 
  return;
}

#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_unlock_mac_learn_lock_of_qlcnic_adapter(spinlock_t *lock)
{
  #line 845 
  ldv_spin_model_unlock((char *)"mac_learn_lock_of_qlcnic_adapter");
  #line 847 
  spin_unlock_2(lock);
  #line 848 
  return;
}

#line 851  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static int cif_spin_trylock_lock_of_qlcnic_host_rds_ring(spinlock_t *lock)
{
  #line 855 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  #line 857 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 859 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 862 
                                           return 0;
  else {
    #line 864 
    ldv_spin_model_lock((char *)"lock_of_qlcnic_host_rds_ring");
    #line 866 
    return 1;
  }
  #line 869 
  return ldv_func_res;
}

#line 873  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_unlock_lock_of_qlcnic_host_rds_ring(spinlock_t *lock)
{
  #line 876 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_host_rds_ring");
  #line 878 
  spin_unlock_2(lock);
  #line 879 
  return;
}

#line 882  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static int cif_spin_trylock_tx_clean_lock_of_qlcnic_host_tx_ring(spinlock_t *lock)
{
  #line 886 
  ldv_func_ret_type_0 ldv_func_res = spin_trylock(lock);
  #line 888 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 890 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 893 
                                           return 0;
  else {
    #line 895 
    ldv_spin_model_lock((char *)"tx_clean_lock_of_qlcnic_host_tx_ring");
    #line 897 
    return 1;
  }
  #line 900 
  return ldv_func_res;
}

#line 904  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_unlock_tx_clean_lock_of_qlcnic_host_tx_ring_0(spinlock_t *lock)
{
  #line 907 
  ldv_spin_model_unlock((char *)"tx_clean_lock_of_qlcnic_host_tx_ring");
  #line 909 
  spin_unlock_2(lock);
  #line 910 
  return;
}

#line 913  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/0/concurrency safety/weaver/qlcnic_io.i.aux"
static void cif_spin_lock_lock_of_qlcnic_host_rds_ring(spinlock_t *lock)
{
  #line 916 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_host_rds_ring");
  #line 918 
  spin_lock_2(lock);
  #line 919 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static int qlcnic_83xx_enable_vnic_mode(struct qlcnic_adapter *adapter, int lock)
{
  #line 13 
  if (lock != 0) {
    #line 14 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 15 
                                               return -16;
  }
  #line 17 
  writel(1U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 38U));
  #line 18 
  if (lock != 0) 
                 #line 19 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 21 
  return 0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_disable_vnic_mode(struct qlcnic_adapter *adapter, int lock)
{
  #line 26 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 28 
  if (lock != 0) {
    #line 29 
    if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                               #line 30 
                                               return -16;
  }
  #line 33 
  writel(0U,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 38U));
  #line 34 
  ahw->idc.vnic_state = (unsigned char)0U;
  #line 36 
  if (lock != 0) 
                 #line 37 
                 qlcnic_83xx_unlock_driver(adapter);
  #line 39 
  return 0;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_set_vnic_opmode(struct qlcnic_adapter *adapter)
{
  #line 44 
  u8 id;
  #line 45 
  int ret = -16;
  #line 46 
  u32 data = 0U;
  #line 47 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 49 
  if (qlcnic_83xx_lock_driver(adapter) != 0) 
                                             #line 50 
                                             return ret;
  #line 52 
  id = ahw->pci_func;
  #line 53 
  data = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 37U));
  #line 54 
  data = (unsigned int)(~ (3 << (int)id * 2)) & data;
  #line 57 
  writel(data,(adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 37U));
  #line 59 
  qlcnic_83xx_unlock_driver(adapter);
  #line 61 
  return 0;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static void qlcnic_83xx_config_vnic_buff_descriptors(struct qlcnic_adapter *adapter)
{
  #line 67 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 69 
  if ((unsigned int)ahw->port_type == 2U) {
    #line 70 
    adapter->num_rxd = (unsigned short)1024U;
    #line 71 
    adapter->max_rxd = (unsigned short)2048U;
    #line 72 
    adapter->num_jumbo_rxd = (unsigned short)1024U;
    #line 73 
    adapter->max_jumbo_rxd = (unsigned short)1024U;
  }
  else 
    #line 75 
    if ((unsigned int)ahw->port_type == 1U) {
      #line 76 
      adapter->num_rxd = (unsigned short)2048U;
      #line 77 
      adapter->num_jumbo_rxd = (unsigned short)512U;
      #line 78 
      adapter->max_jumbo_rxd = (unsigned short)512U;
      #line 79 
      adapter->max_rxd = (unsigned short)4096U;
    }
  #line 81 
  adapter->num_txd = (unsigned short)1024U;
  #line 82 
  adapter->max_rds_rings = (unsigned char)2U;
  #line 83 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static int qlcnic_83xx_init_mgmt_vnic(struct qlcnic_adapter *adapter)
{
  #line 99 
  struct qlcnic_npar_info *npar;
  #line 100 
  int i;
  #line 97 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 98 
  struct device *dev = & (adapter->pdev)->dev;
  #line 100 
  int err = -5;
  #line 102 
  qlcnic_83xx_get_minidump_template(adapter);
  #line 104 
  if ((adapter->flags & 128U) == 0U) {
    #line 105 
    if (qlcnic_init_pci_info(adapter) != 0) 
                                            #line 106 
                                            return err;
    #line 108 
    npar = adapter->npars;
    #line 110 
    i = 0;
    #line 110 
    while ((int)ahw->total_nic_func > i) {
      #line 111 
      _dev_info(dev,(char *)"id:%d active:%d type:%d port:%d min_bw:%d max_bw:%d mac_addr:%pM\n",(int)npar->pci_func,(int)npar->active,(int)npar->type,(int)npar->phy_port,(int)npar->min_bw,(int)npar->max_bw,(u8 *)(& npar->mac));
      #line 110 
      i ++;
      #line 110 
      npar ++;
    }
    #line 117 
    _dev_info(dev,(char *)"Max functions = %d, active functions = %d\n",(int)ahw->max_pci_func,(int)ahw->total_nic_func);
    #line 120 
    if (qlcnic_83xx_set_vnic_opmode(adapter) != 0) 
                                                   #line 121 
                                                   return err;
    #line 123 
    if (qlcnic_set_default_offload_settings(adapter) != 0) 
                                                           #line 124 
                                                           return err;
  }
  else {
    #line 126 
    if (qlcnic_reset_npar_config(adapter) != 0) 
                                                #line 127 
                                                return err;
  }
  #line 130 
  if (qlcnic_83xx_get_port_info(adapter) != 0) 
                                               #line 131 
                                               return err;
  #line 133 
  qlcnic_83xx_config_vnic_buff_descriptors(adapter);
  #line 134 
  ahw->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  #line 135 
  adapter->flags |= 128U;
  #line 136 
  qlcnic_83xx_enable_vnic_mode(adapter,1);
  #line 138 
  _dev_info(dev,(char *)"HAL Version: %d, Management function\n",ahw->fw_hal_version);
  #line 141 
  return 0;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static int qlcnic_83xx_init_privileged_vnic(struct qlcnic_adapter *adapter)
{
  #line 146 
  int err = -5;
  #line 148 
  qlcnic_83xx_get_minidump_template(adapter);
  #line 149 
  if (qlcnic_83xx_get_port_info(adapter) != 0) 
                                               #line 150 
                                               return err;
  #line 152 
  qlcnic_83xx_config_vnic_buff_descriptors(adapter);
  #line 153 
  (adapter->ahw)->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  #line 154 
  adapter->flags |= 128U;
  #line 156 
  _dev_info(& (adapter->pdev)->dev,(char *)"HAL Version: %d, Privileged function\n",(adapter->ahw)->fw_hal_version);
  #line 159 
  return 0;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static int qlcnic_83xx_init_non_privileged_vnic(struct qlcnic_adapter *adapter)
{
  #line 164 
  int err = -5;
  #line 166 
  qlcnic_83xx_get_fw_version(adapter);
  #line 167 
  if (qlcnic_set_eswitch_port_config(adapter) != 0) 
                                                    #line 168 
                                                    return err;
  #line 170 
  if (qlcnic_83xx_get_port_info(adapter) != 0) 
                                               #line 171 
                                               return err;
  #line 173 
  qlcnic_83xx_config_vnic_buff_descriptors(adapter);
  #line 174 
  (adapter->ahw)->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  #line 175 
  adapter->flags |= 128U;
  #line 177 
  _dev_info(& (adapter->pdev)->dev,(char *)"HAL Version: %d, Virtual function\n",(adapter->ahw)->fw_hal_version);
  #line 180 
  return 0;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_config_vnic_opmode(struct qlcnic_adapter *adapter)
{
  #line 194 
  u32 op_mode;
  #line 194 
  u32 priv_level;
  #line 195 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 196 
  struct qlcnic_nic_template *nic_ops = adapter->nic_ops;
  #line 198 
  qlcnic_get_func_no(adapter);
  #line 199 
  op_mode = readl((adapter->ahw)->pci_base0 + (unsigned long)*((adapter->ahw)->ext_reg_tbl + 37U));
  #line 201 
  if (op_mode == 1431655765U) 
                              #line 202 
                              priv_level = 0U; else 
                                                    #line 204 
                                                    priv_level = (op_mode >> (int)ahw->pci_func * 2) & 3U;
  #line 206 
  switch (priv_level) {
    #line 207 
    case (u32)2: 
                 #line 207 
    ;
    #line 208 
    ahw->op_mode = (unsigned short)2U;
    #line 209 
    ahw->idc.state_entry = & qlcnic_83xx_idc_ready_state_entry;
    #line 210 
    nic_ops->init_driver = & qlcnic_83xx_init_non_privileged_vnic;
    #line 211 
    break;
    #line 212 
    case (u32)1: 
                 #line 212 
    ;
    #line 213 
    ahw->op_mode = (unsigned short)1U;
    #line 214 
    ahw->idc.state_entry = & qlcnic_83xx_idc_vnic_pf_entry;
    #line 215 
    nic_ops->init_driver = & qlcnic_83xx_init_privileged_vnic;
    #line 216 
    break;
    #line 217 
    case (u32)0: 
                 #line 217 
    ;
    #line 218 
    ahw->op_mode = (unsigned short)0U;
    #line 219 
    ahw->idc.state_entry = & qlcnic_83xx_idc_ready_state_entry;
    #line 220 
    nic_ops->init_driver = & qlcnic_83xx_init_mgmt_vnic;
    #line 221 
    break;
    #line 222 
    default: 
             #line 222 
    ;
    #line 223 
    _dev_err(& (adapter->pdev)->dev,(char *)"Invalid Virtual NIC opmode\n");
    #line 224 
    return -5;
  }
  #line 227 
  if ((ahw->capabilities & 8388608U) != 0U) {
    #line 228 
    adapter->flags |= 64U;
    #line 229 
    if ((int)adapter->drv_mac_learn != 0) 
                                          #line 230 
                                          adapter->rx_mac_learn = (_Bool)1;
  }
  else {
    #line 232 
    adapter->flags &= 4294967231U;
    #line 233 
    adapter->rx_mac_learn = (_Bool)0;
  }
  #line 236 
  ahw->idc.vnic_state = (unsigned char)0U;
  #line 237 
  ahw->idc.vnic_wait_limit = (unsigned char)30U;
  #line 239 
  return 0;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_check_vnic_state(struct qlcnic_adapter *adapter)
{
  #line 246 
  u32 state;
  #line 244 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  #line 245 
  struct qlc_83xx_idc *idc = & ahw->idc;
  #line 248 
  state = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 38U));
  #line 249 
  while (state != 1U && (unsigned int)idc->vnic_wait_limit != 0U) {
    #line 250 
    idc->vnic_wait_limit = (u8)((int)idc->vnic_wait_limit - 1);
    #line 251 
    msleep(1000U);
    #line 252 
    state = readl(ahw->pci_base0 + (unsigned long)*(ahw->ext_reg_tbl + 38U));
  }
  #line 255 
  if (state != 1U) {
    #line 256 
    _dev_err(& (adapter->pdev)->dev,(char *)"vNIC mode not operational, state check timed out.\n");
    #line 258 
    return -5;
  }
  #line 261 
  return 0;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_set_port_eswitch_status(struct qlcnic_adapter *adapter, int func, int *port_id)
{
  #line 267 
  struct qlcnic_info nic_info;
  #line 268 
  int err = 0;
  #line 270 
  memset((void *)(& nic_info),0,72UL);
  #line 272 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)((unsigned char)func)));
  #line 273 
  if (err != 0) 
                #line 274 
                return err;
  #line 276 
  if ((nic_info.capabilities & 8388608U) != 0U) 
                                                #line 277 
                                                *port_id = (int)nic_info.phys_port; else 
                                                                    #line 279 
                                                                    err = -5;
  #line 281 
  if (err == 0) 
                #line 282 
                (adapter->eswitch + (unsigned long)*port_id)->flags |= 2U;
  #line 284 
  return err;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
#line 304 
void *emg_devattr_devattr_instance_3(void *arg0);
#line 125 
#line 384 
void *emg_devattr_devattr_instance_dev_attr_beacon(void *arg0);
#line 126 
#line 464 
void *emg_devattr_devattr_instance_dev_attr_bridged_mode(void *arg0);
#line 127 
#line 544 
void *emg_devattr_devattr_instance_dev_attr_diag_mode(void *arg0);
#line 130 
#line 295 
void emg_dispatch_deregister_13(struct net_device *arg0);
#line 131 
#line 219 
void emg_dispatch_deregister_5(struct device *arg0, struct device_attribute *arg1);
#line 132 
#line 261 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 133 
#line 252 
void emg_dispatch_irq_deregister_6(int arg0);
#line 134 
#line 281 
void emg_dispatch_irq_register_12(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 135 
#line 270 
void emg_dispatch_register_11(struct net_device *arg0);
#line 136 
#line 163 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 137 
#line 174 
void emg_dispatch_register_4(struct device *arg0, struct device_attribute *arg1);
#line 138 
#line 2201 
void *emg_entry_point_insmod(void *arg0);
#line 141 
#line 624 
void *emg_interrupt_interrupt_scenario_4(void *arg0);
#line 142 
#line 690 
void *emg_net_random_allocationless_scenario_qlcnic_get_strings(void *arg0);
#line 143 
#line 1709 
void *emg_pci_pci_scenario_qlcnic_driver(void *arg0);
#line 150 
#line 2230 
int main(void);
#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 164 
  int ret;
  #line 165 
  struct emg_struct_pci_scenario_qlcnic_driver_20 *cf_arg_20;
  #line 166 
  cf_arg_20 = (struct emg_struct_pci_scenario_qlcnic_driver_20 *)ldv_xmalloc(16UL);
  #line 167 
  cf_arg_20->arg0 = arg0;
  #line 168 
  ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_pci_pci_scenario_qlcnic_driver,(void *)cf_arg_20);
  #line 169 
  __VERIFIER_assume(ret == 0);
  #line 170 
  return;
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_4(struct device *arg0, struct device_attribute *arg1)
{
  #line 175 
  int ret;
  #line 176 
  struct emg_struct_devattr_instance_3_14 *cf_arg_14;
  #line 177 
  struct emg_struct_devattr_instance_3_14 *cf_arg_15;
  #line 178 
  struct emg_struct_devattr_instance_3_14 *cf_arg_16;
  #line 179 
  struct emg_struct_devattr_instance_3_14 *cf_arg_17;
  #line 180 
  switch (ldv_undef_int()) {
    #line 181 
    case 0: 
            #line 181 
    ;
    #line 182 
    cf_arg_14 = (struct emg_struct_devattr_instance_3_14 *)ldv_xmalloc(24UL);
    #line 183 
    cf_arg_14->arg0 = arg0;
    #line 184 
    cf_arg_14->arg1 = arg1;
    #line 185 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_devattr_devattr_instance_3,(void *)cf_arg_14);
    #line 186 
    __VERIFIER_assume(ret == 0);
    #line 187 
    break;
    #line 189 
    case 1: 
            #line 189 
    ;
    #line 190 
    cf_arg_15 = (struct emg_struct_devattr_instance_3_14 *)ldv_xmalloc(24UL);
    #line 191 
    cf_arg_15->arg0 = arg0;
    #line 192 
    cf_arg_15->arg1 = arg1;
    #line 193 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_beacon,(void *)cf_arg_15);
    #line 194 
    __VERIFIER_assume(ret == 0);
    #line 195 
    break;
    #line 197 
    case 2: 
            #line 197 
    ;
    #line 198 
    cf_arg_16 = (struct emg_struct_devattr_instance_3_14 *)ldv_xmalloc(24UL);
    #line 199 
    cf_arg_16->arg0 = arg0;
    #line 200 
    cf_arg_16->arg1 = arg1;
    #line 201 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_bridged_mode,(void *)cf_arg_16);
    #line 202 
    __VERIFIER_assume(ret == 0);
    #line 203 
    break;
    #line 205 
    case 3: 
            #line 205 
    ;
    #line 206 
    cf_arg_17 = (struct emg_struct_devattr_instance_3_14 *)ldv_xmalloc(24UL);
    #line 207 
    cf_arg_17->arg0 = arg0;
    #line 208 
    cf_arg_17->arg1 = arg1;
    #line 209 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_diag_mode,(void *)cf_arg_17);
    #line 210 
    __VERIFIER_assume(ret == 0);
    #line 211 
    break;
    #line 213 
    default: 
             #line 213 
    ;
    #line 213 
    __VERIFIER_assume(0);
  }
  #line 215 
  return;
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_5(struct device *arg0, struct device_attribute *arg1)
{
  #line 220 
  int ret;
  #line 221 
  struct emg_struct_devattr_instance_3_14 *cf_arg_14;
  #line 222 
  struct emg_struct_devattr_instance_3_14 *cf_arg_15;
  #line 223 
  struct emg_struct_devattr_instance_3_14 *cf_arg_16;
  #line 224 
  struct emg_struct_devattr_instance_3_14 *cf_arg_17;
  #line 225 
  switch (ldv_undef_int()) {
    #line 226 
    case 0: 
            #line 226 
    ;
    #line 227 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 228 
    __VERIFIER_assume(ret == 0);
    #line 229 
    break;
    #line 231 
    case 1: 
            #line 231 
    ;
    #line 232 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 233 
    __VERIFIER_assume(ret == 0);
    #line 234 
    break;
    #line 236 
    case 2: 
            #line 236 
    ;
    #line 237 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 238 
    __VERIFIER_assume(ret == 0);
    #line 239 
    break;
    #line 241 
    case 3: 
            #line 241 
    ;
    #line 242 
    ret = pthread_join(emg_thread_17,(void **)0);
    #line 243 
    __VERIFIER_assume(ret == 0);
    #line 244 
    break;
    #line 246 
    default: 
             #line 246 
    ;
    #line 246 
    __VERIFIER_assume(0);
  }
  #line 248 
  return;
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_6(int arg0)
{
  #line 253 
  int ret;
  #line 254 
  struct emg_struct_free_irq_6 *cf_arg_18;
  #line 255 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 256 
  __VERIFIER_assume(ret == 0);
  #line 257 
  return;
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 262 
  int ret;
  #line 263 
  struct emg_struct_pci_scenario_qlcnic_driver_20 *cf_arg_20;
  #line 264 
  ret = pthread_join(emg_thread_20,(void **)0);
  #line 265 
  __VERIFIER_assume(ret == 0);
  #line 266 
  return;
}

#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_11(struct net_device *arg0)
{
  #line 271 
  int ret;
  #line 272 
  struct emg_struct_random_allocationless_scenario_qlcnic_get_strings_19 *cf_arg_19;
  #line 273 
  cf_arg_19 = (struct emg_struct_random_allocationless_scenario_qlcnic_get_strings_19 *)ldv_xmalloc(16UL);
  #line 274 
  cf_arg_19->arg0 = arg0;
  #line 275 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_qlcnic_get_strings,(void *)cf_arg_19);
  #line 276 
  __VERIFIER_assume(ret == 0);
  #line 277 
  return;
}

#line 281  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_12(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 282 
  int ret;
  #line 283 
  struct emg_struct_interrupt_scenario_4_18 *cf_arg_18;
  #line 284 
  cf_arg_18 = (struct emg_struct_interrupt_scenario_4_18 *)ldv_xmalloc(40UL);
  #line 285 
  cf_arg_18->arg0 = arg0;
  #line 286 
  cf_arg_18->arg1 = arg1;
  #line 287 
  cf_arg_18->arg2 = arg2;
  #line 288 
  cf_arg_18->arg3 = arg3;
  #line 289 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_4,(void *)cf_arg_18);
  #line 290 
  __VERIFIER_assume(ret == 0);
  #line 291 
  return;
}

#line 295  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_13(struct net_device *arg0)
{
  #line 296 
  int ret;
  #line 297 
  struct emg_struct_random_allocationless_scenario_qlcnic_get_strings_19 *cf_arg_19;
  #line 298 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 299 
  __VERIFIER_assume(ret == 0);
  #line 300 
  return;
}

#line 304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_3(void *arg0)
{
  #line 307 
  struct device_attribute *emg_14_devattr;
  #line 308 
  struct device *emg_14_device;
  #line 309 
  char *emg_14_emg_param_2_0;
  #line 310 
  char *emg_14_emg_param_2_1;
  #line 311 
  unsigned long emg_14_emg_param_3_2;
  #line 312 
  int emg_repeat_cnt_main_14 = 1;
  #line 314 
  struct emg_struct_devattr_instance_3_14 *data = (struct emg_struct_devattr_instance_3_14 *)arg0;
  #line 317 
  emg_14_devattr = emg_alias_dev_attr_beacon;
  #line 319 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_beacon);
  #line 321 
  if (data != (struct emg_struct_devattr_instance_3_14 *)0) {
    #line 322 
    emg_14_device = data->arg0;
    #line 323 
    emg_14_devattr = data->arg1;
    #line 324 
    ldv_free((void *)data);
  }
  #line 329 
  goto emg_main_14;
  #line 333 
  return (void *)0;
  #line 336 
  emg_main_14: 
               #line 336 
  ;
  #line 337 
  if (ldv_undef_int() != 0) {
    #line 338 
    if (ldv_undef_int() != 0) {
      #line 340 
      emg_14_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 340 
      emg_14_emg_param_2_0 = emg_14_emg_param_2_0;
      #line 344 
      emg_wrapper_qlcnic_show_beacon(emg_14_device,emg_14_devattr,emg_14_emg_param_2_0);
      #line 348 
      ldv_free((void *)emg_14_emg_param_2_0);
    }
    else {
      #line 352 
      emg_14_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 352 
      emg_14_emg_param_2_1 = emg_14_emg_param_2_1;
      #line 356 
      emg_wrapper_qlcnic_store_beacon(emg_14_device,emg_14_devattr,emg_14_emg_param_2_1,emg_14_emg_param_3_2);
      #line 360 
      ldv_free((void *)emg_14_emg_param_2_1);
    }
    #line 364 
    if (emg_repeat_cnt_main_14 > 0) {
      #line 365 
      emg_repeat_cnt_main_14 --;
      #line 367 
      goto emg_main_14;
    }
    else 
         #line 369 
         __VERIFIER_assume(0);
  }
  #line 379 
  return (void *)0;
}

#line 384  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_beacon(void *arg0)
{
  #line 387 
  struct device_attribute *emg_15_devattr;
  #line 388 
  struct device *emg_15_device;
  #line 389 
  char *emg_15_emg_param_2_0;
  #line 390 
  char *emg_15_emg_param_2_1;
  #line 391 
  unsigned long emg_15_emg_param_3_2;
  #line 392 
  int emg_repeat_cnt_main_15 = 1;
  #line 394 
  struct emg_struct_devattr_instance_3_14 *data = (struct emg_struct_devattr_instance_3_14 *)arg0;
  #line 397 
  emg_15_devattr = emg_alias_dev_attr_beacon;
  #line 399 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_beacon);
  #line 401 
  if (data != (struct emg_struct_devattr_instance_3_14 *)0) {
    #line 402 
    emg_15_device = data->arg0;
    #line 403 
    emg_15_devattr = data->arg1;
    #line 404 
    ldv_free((void *)data);
  }
  #line 409 
  goto emg_main_15;
  #line 413 
  return (void *)0;
  #line 416 
  emg_main_15: 
               #line 416 
  ;
  #line 417 
  if (ldv_undef_int() != 0) {
    #line 418 
    if (ldv_undef_int() != 0) {
      #line 420 
      emg_15_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 420 
      emg_15_emg_param_2_0 = emg_15_emg_param_2_0;
      #line 424 
      emg_wrapper_qlcnic_hwmon_show_temp(emg_15_device,emg_15_devattr,emg_15_emg_param_2_0);
      #line 428 
      ldv_free((void *)emg_15_emg_param_2_0);
    }
    else {
      #line 432 
      emg_15_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 432 
      emg_15_emg_param_2_1 = emg_15_emg_param_2_1;
      #line 436 
      emg_wrapper_qlcnic_store_beacon(emg_15_device,emg_15_devattr,emg_15_emg_param_2_1,emg_15_emg_param_3_2);
      #line 440 
      ldv_free((void *)emg_15_emg_param_2_1);
    }
    #line 444 
    if (emg_repeat_cnt_main_15 > 0) {
      #line 445 
      emg_repeat_cnt_main_15 --;
      #line 447 
      goto emg_main_15;
    }
    else 
         #line 449 
         __VERIFIER_assume(0);
  }
  #line 459 
  return (void *)0;
}

#line 464  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_bridged_mode(void *arg0)
{
  #line 467 
  struct device_attribute *emg_16_devattr;
  #line 468 
  struct device *emg_16_device;
  #line 469 
  char *emg_16_emg_param_2_0;
  #line 470 
  char *emg_16_emg_param_2_1;
  #line 471 
  unsigned long emg_16_emg_param_3_2;
  #line 472 
  int emg_repeat_cnt_main_16 = 1;
  #line 474 
  struct emg_struct_devattr_instance_3_14 *data = (struct emg_struct_devattr_instance_3_14 *)arg0;
  #line 477 
  emg_16_devattr = emg_alias_dev_attr_bridged_mode;
  #line 479 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_bridged_mode);
  #line 481 
  if (data != (struct emg_struct_devattr_instance_3_14 *)0) {
    #line 482 
    emg_16_device = data->arg0;
    #line 483 
    emg_16_devattr = data->arg1;
    #line 484 
    ldv_free((void *)data);
  }
  #line 489 
  goto emg_main_16;
  #line 493 
  return (void *)0;
  #line 496 
  emg_main_16: 
               #line 496 
  ;
  #line 497 
  if (ldv_undef_int() != 0) {
    #line 498 
    if (ldv_undef_int() != 0) {
      #line 500 
      emg_16_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 500 
      emg_16_emg_param_2_0 = emg_16_emg_param_2_0;
      #line 504 
      emg_wrapper_qlcnic_show_bridged_mode(emg_16_device,emg_16_devattr,emg_16_emg_param_2_0);
      #line 508 
      ldv_free((void *)emg_16_emg_param_2_0);
    }
    else {
      #line 512 
      emg_16_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 512 
      emg_16_emg_param_2_1 = emg_16_emg_param_2_1;
      #line 516 
      emg_wrapper_qlcnic_store_bridged_mode(emg_16_device,emg_16_devattr,emg_16_emg_param_2_1,emg_16_emg_param_3_2);
      #line 520 
      ldv_free((void *)emg_16_emg_param_2_1);
    }
    #line 524 
    if (emg_repeat_cnt_main_16 > 0) {
      #line 525 
      emg_repeat_cnt_main_16 --;
      #line 527 
      goto emg_main_16;
    }
    else 
         #line 529 
         __VERIFIER_assume(0);
  }
  #line 539 
  return (void *)0;
}

#line 544  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_diag_mode(void *arg0)
{
  #line 547 
  struct device_attribute *emg_17_devattr;
  #line 548 
  struct device *emg_17_device;
  #line 549 
  char *emg_17_emg_param_2_0;
  #line 550 
  char *emg_17_emg_param_2_1;
  #line 551 
  unsigned long emg_17_emg_param_3_2;
  #line 552 
  int emg_repeat_cnt_main_17 = 1;
  #line 554 
  struct emg_struct_devattr_instance_3_14 *data = (struct emg_struct_devattr_instance_3_14 *)arg0;
  #line 557 
  emg_17_devattr = emg_alias_dev_attr_diag_mode;
  #line 559 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_diag_mode);
  #line 561 
  if (data != (struct emg_struct_devattr_instance_3_14 *)0) {
    #line 562 
    emg_17_device = data->arg0;
    #line 563 
    emg_17_devattr = data->arg1;
    #line 564 
    ldv_free((void *)data);
  }
  #line 569 
  goto emg_main_17;
  #line 573 
  return (void *)0;
  #line 576 
  emg_main_17: 
               #line 576 
  ;
  #line 577 
  if (ldv_undef_int() != 0) {
    #line 578 
    if (ldv_undef_int() != 0) {
      #line 580 
      emg_17_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 580 
      emg_17_emg_param_2_0 = emg_17_emg_param_2_0;
      #line 584 
      emg_wrapper_qlcnic_show_diag_mode(emg_17_device,emg_17_devattr,emg_17_emg_param_2_0);
      #line 588 
      ldv_free((void *)emg_17_emg_param_2_0);
    }
    else {
      #line 592 
      emg_17_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 592 
      emg_17_emg_param_2_1 = emg_17_emg_param_2_1;
      #line 596 
      emg_wrapper_qlcnic_store_diag_mode(emg_17_device,emg_17_devattr,emg_17_emg_param_2_1,emg_17_emg_param_3_2);
      #line 600 
      ldv_free((void *)emg_17_emg_param_2_1);
    }
    #line 604 
    if (emg_repeat_cnt_main_17 > 0) {
      #line 605 
      emg_repeat_cnt_main_17 --;
      #line 607 
      goto emg_main_17;
    }
    else 
         #line 609 
         __VERIFIER_assume(0);
  }
  #line 619 
  return (void *)0;
}

#line 624  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_4(void *arg0)
{
  #line 627 
  enum irqreturn (*emg_18_callback)(int , void *);
  #line 628 
  void *emg_18_data;
  #line 629 
  int emg_18_line;
  #line 630 
  enum irqreturn emg_18_ret_val;
  #line 631 
  enum irqreturn (*emg_18_thread)(int , void *);
  #line 633 
  struct emg_struct_interrupt_scenario_4_18 *data = (struct emg_struct_interrupt_scenario_4_18 *)arg0;
  #line 638 
  if (data != (struct emg_struct_interrupt_scenario_4_18 *)0) {
    #line 639 
    emg_18_line = data->arg0;
    #line 640 
    emg_18_callback = data->arg1;
    #line 641 
    emg_18_thread = data->arg2;
    #line 642 
    emg_18_data = data->arg3;
    #line 643 
    ldv_free((void *)data);
  }
  #line 649 
  ldv_switch_to_interrupt_context();
  #line 653 
  if (emg_18_callback != (enum irqreturn (*)(int , void *))0) 
                                                              #line 654 
                                                              emg_18_ret_val = (*emg_18_callback)(emg_18_line,emg_18_data);
  else {
    #line 656 
    emg_18_ret_val = (enum irqreturn)ldv_undef_int();
  }
  #line 662 
  ldv_switch_to_process_context();
  #line 665 
  if (ldv_undef_int() != 0) {
    #line 667 
    __VERIFIER_assume(emg_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 671 
    if (emg_18_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 672 
                                                              (*emg_18_thread)(emg_18_line,emg_18_data);
  }
  else 
       #line 677 
       __VERIFIER_assume(emg_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 685 
  return (void *)0;
}

#line 690  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_qlcnic_get_strings(void *arg0)
{
  #line 693 
  struct net_device *emg_19_container;
  #line 694 
  struct ndmsg *emg_19_emg_param_0_43;
  #line 695 
  struct ndmsg *emg_19_emg_param_0_49;
  #line 696 
  struct sk_buff *emg_19_emg_param_0_53;
  #line 697 
  struct sk_buff *emg_19_emg_param_0_57;
  #line 698 
  struct sk_buff *emg_19_emg_param_0_76;
  #line 699 
  unsigned int emg_19_emg_param_1_0;
  #line 700 
  struct ethtool_link_ksettings *emg_19_emg_param_1_10;
  #line 701 
  struct ethtool_wolinfo *emg_19_emg_param_1_11;
  #line 702 
  struct ethtool_regs *emg_19_emg_param_1_12;
  #line 703 
  struct ethtool_drvinfo *emg_19_emg_param_1_14;
  #line 704 
  struct ethtool_link_ksettings *emg_19_emg_param_1_15;
  #line 705 
  struct ethtool_dump *emg_19_emg_param_1_16;
  #line 706 
  unsigned int emg_19_emg_param_1_17;
  #line 707 
  struct ethtool_drvinfo *emg_19_emg_param_1_18;
  #line 708 
  struct ethtool_channels *emg_19_emg_param_1_19;
  #line 709 
  struct ethtool_pauseparam *emg_19_emg_param_1_2;
  #line 710 
  int emg_19_emg_param_1_20;
  #line 711 
  struct ethtool_stats *emg_19_emg_param_1_21;
  #line 712 
  struct ethtool_channels *emg_19_emg_param_1_23;
  #line 713 
  struct ethtool_coalesce *emg_19_emg_param_1_24;
  #line 714 
  struct ethtool_drvinfo *emg_19_emg_param_1_25;
  #line 715 
  struct ethtool_dump *emg_19_emg_param_1_26;
  #line 716 
  struct ethtool_dump *emg_19_emg_param_1_28;
  #line 717 
  struct ethtool_eeprom *emg_19_emg_param_1_29;
  #line 718 
  struct ethtool_ringparam *emg_19_emg_param_1_3;
  #line 719 
  struct ethtool_stats *emg_19_emg_param_1_31;
  #line 720 
  struct ethtool_link_ksettings *emg_19_emg_param_1_33;
  #line 721 
  struct ethtool_pauseparam *emg_19_emg_param_1_34;
  #line 722 
  struct ethtool_regs *emg_19_emg_param_1_35;
  #line 723 
  struct ethtool_ringparam *emg_19_emg_param_1_37;
  #line 724 
  int emg_19_emg_param_1_38;
  #line 725 
  unsigned int emg_19_emg_param_1_39;
  #line 726 
  struct ethtool_ringparam *emg_19_emg_param_1_4;
  #line 727 
  struct ethtool_wolinfo *emg_19_emg_param_1_41;
  #line 728 
  int emg_19_emg_param_1_42;
  #line 729 
  struct nlattr **emg_19_emg_param_1_44;
  #line 730 
  struct ethtool_coalesce *emg_19_emg_param_1_5;
  #line 731 
  struct nlattr **emg_19_emg_param_1_50;
  #line 732 
  struct netlink_callback *emg_19_emg_param_1_54;
  #line 733 
  unsigned long long emg_19_emg_param_1_59;
  #line 734 
  struct ethtool_coalesce *emg_19_emg_param_1_6;
  #line 735 
  struct netdev_phys_item_id *emg_19_emg_param_1_60;
  #line 736 
  int emg_19_emg_param_1_61;
  #line 737 
  unsigned long long emg_19_emg_param_1_63;
  #line 738 
  void *emg_19_emg_param_1_64;
  #line 739 
  int emg_19_emg_param_1_65;
  #line 740 
  int emg_19_emg_param_1_67;
  #line 741 
  struct ethtool_eeprom *emg_19_emg_param_1_7;
  #line 742 
  int emg_19_emg_param_1_70;
  #line 743 
  int emg_19_emg_param_1_72;
  #line 744 
  struct udp_tunnel_info *emg_19_emg_param_1_77;
  #line 745 
  struct udp_tunnel_info *emg_19_emg_param_1_78;
  #line 746 
  unsigned short emg_19_emg_param_1_79;
  #line 747 
  unsigned short emg_19_emg_param_1_81;
  #line 748 
  struct ethtool_test *emg_19_emg_param_1_83;
  #line 749 
  struct ethtool_channels *emg_19_emg_param_1_85;
  #line 750 
  struct ethtool_coalesce *emg_19_emg_param_1_86;
  #line 751 
  struct ethtool_dump *emg_19_emg_param_1_87;
  #line 752 
  struct ethtool_link_ksettings *emg_19_emg_param_1_88;
  #line 753 
  unsigned int emg_19_emg_param_1_89;
  #line 754 
  unsigned int emg_19_emg_param_1_9;
  #line 755 
  struct ethtool_pauseparam *emg_19_emg_param_1_90;
  #line 756 
  enum ethtool_phys_id_state *emg_19_emg_param_1_91;
  #line 757 
  struct ethtool_ringparam *emg_19_emg_param_1_92;
  #line 758 
  struct ethtool_wolinfo *emg_19_emg_param_1_93;
  #line 759 
  unsigned char *emg_19_emg_param_2_1;
  #line 760 
  void *emg_19_emg_param_2_13;
  #line 761 
  unsigned long long *emg_19_emg_param_2_22;
  #line 762 
  void *emg_19_emg_param_2_27;
  #line 763 
  unsigned char *emg_19_emg_param_2_30;
  #line 764 
  unsigned long long *emg_19_emg_param_2_32;
  #line 765 
  void *emg_19_emg_param_2_36;
  #line 766 
  unsigned char *emg_19_emg_param_2_40;
  #line 767 
  unsigned long long emg_19_emg_param_2_58;
  #line 768 
  struct ifla_vf_info *emg_19_emg_param_2_62;
  #line 769 
  unsigned char *emg_19_emg_param_2_66;
  #line 770 
  int emg_19_emg_param_2_68;
  #line 771 
  _Bool emg_19_emg_param_2_71;
  #line 772 
  unsigned short emg_19_emg_param_2_73;
  #line 773 
  unsigned char *emg_19_emg_param_2_8;
  #line 774 
  unsigned short emg_19_emg_param_2_80;
  #line 775 
  unsigned short emg_19_emg_param_2_82;
  #line 776 
  unsigned long long *emg_19_emg_param_2_84;
  #line 777 
  unsigned char *emg_19_emg_param_3_45;
  #line 778 
  unsigned char *emg_19_emg_param_3_51;
  #line 779 
  struct net_device *emg_19_emg_param_3_55;
  #line 780 
  int emg_19_emg_param_3_69;
  #line 781 
  unsigned char emg_19_emg_param_3_74;
  #line 782 
  unsigned short emg_19_emg_param_4_46;
  #line 783 
  unsigned short emg_19_emg_param_4_52;
  #line 784 
  int *emg_19_emg_param_4_56;
  #line 785 
  unsigned short emg_19_emg_param_4_75;
  #line 786 
  unsigned short emg_19_emg_param_5_47;
  #line 787 
  struct netlink_ext_ack *emg_19_emg_param_6_48;
  #line 788 
  int emg_repeat_cnt_call_19 = 1;
  #line 790 
  struct emg_struct_random_allocationless_scenario_qlcnic_get_strings_19 *data = (struct emg_struct_random_allocationless_scenario_qlcnic_get_strings_19 *)arg0;
  #line 795 
  if (data != (struct emg_struct_random_allocationless_scenario_qlcnic_get_strings_19 *)0) {
    #line 796 
    emg_19_container = data->arg0;
    #line 797 
    ldv_free((void *)data);
  }
  #line 802 
  goto emg_call_19;
  #line 806 
  return (void *)0;
  #line 809 
  emg_call_19: 
               #line 809 
  ;
  #line 810 
  switch (ldv_undef_int()) {
    #line 811 
    case 0: 
            #line 811 
    ;
    #line 813 
    emg_19_emg_param_1_93 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 813 
    emg_19_emg_param_1_93 = emg_19_emg_param_1_93;
    #line 817 
    emg_wrapper_qlcnic_set_wol(emg_19_container,emg_19_emg_param_1_93);
    #line 821 
    ldv_free((void *)emg_19_emg_param_1_93);
    #line 823 
    break;
    #line 825 
    case 1: 
            #line 825 
    ;
    #line 827 
    emg_19_emg_param_1_92 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 827 
    emg_19_emg_param_1_92 = emg_19_emg_param_1_92;
    #line 831 
    emg_wrapper_qlcnic_set_ringparam(emg_19_container,emg_19_emg_param_1_92);
    #line 835 
    ldv_free((void *)emg_19_emg_param_1_92);
    #line 837 
    break;
    #line 839 
    case 2: 
            #line 839 
    ;
    #line 841 
    emg_19_emg_param_1_91 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 841 
    emg_19_emg_param_1_91 = emg_19_emg_param_1_91;
    #line 845 
    emg_wrapper_qlcnic_set_led(emg_19_container,*emg_19_emg_param_1_91);
    #line 849 
    ldv_free((void *)emg_19_emg_param_1_91);
    #line 851 
    break;
    #line 853 
    case 3: 
            #line 853 
    ;
    #line 855 
    emg_19_emg_param_1_90 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 855 
    emg_19_emg_param_1_90 = emg_19_emg_param_1_90;
    #line 859 
    emg_wrapper_qlcnic_set_pauseparam(emg_19_container,emg_19_emg_param_1_90);
    #line 863 
    ldv_free((void *)emg_19_emg_param_1_90);
    #line 865 
    break;
    #line 867 
    case 4: 
            #line 867 
    ;
    #line 869 
    emg_wrapper_qlcnic_set_msglevel(emg_19_container,emg_19_emg_param_1_89);
    #line 871 
    break;
    #line 873 
    case 5: 
            #line 873 
    ;
    #line 875 
    emg_19_emg_param_1_88 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 875 
    emg_19_emg_param_1_88 = emg_19_emg_param_1_88;
    #line 879 
    emg_wrapper_qlcnic_set_link_ksettings(emg_19_container,emg_19_emg_param_1_88);
    #line 883 
    ldv_free((void *)emg_19_emg_param_1_88);
    #line 885 
    break;
    #line 887 
    case 6: 
            #line 887 
    ;
    #line 889 
    emg_19_emg_param_1_87 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 889 
    emg_19_emg_param_1_87 = emg_19_emg_param_1_87;
    #line 893 
    emg_wrapper_qlcnic_set_dump(emg_19_container,emg_19_emg_param_1_87);
    #line 897 
    ldv_free((void *)emg_19_emg_param_1_87);
    #line 899 
    break;
    #line 901 
    case 7: 
            #line 901 
    ;
    #line 903 
    emg_19_emg_param_1_86 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 903 
    emg_19_emg_param_1_86 = emg_19_emg_param_1_86;
    #line 907 
    emg_wrapper_qlcnic_set_intr_coalesce(emg_19_container,emg_19_emg_param_1_86);
    #line 911 
    ldv_free((void *)emg_19_emg_param_1_86);
    #line 913 
    break;
    #line 915 
    case 8: 
            #line 915 
    ;
    #line 917 
    emg_19_emg_param_1_85 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 917 
    emg_19_emg_param_1_85 = emg_19_emg_param_1_85;
    #line 921 
    emg_wrapper_qlcnic_set_channels(emg_19_container,emg_19_emg_param_1_85);
    #line 925 
    ldv_free((void *)emg_19_emg_param_1_85);
    #line 927 
    break;
    #line 929 
    case 9: 
            #line 929 
    ;
    #line 931 
    emg_19_emg_param_1_83 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 931 
    emg_19_emg_param_1_83 = emg_19_emg_param_1_83;
    #line 932 
    emg_19_emg_param_2_84 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 932 
    emg_19_emg_param_2_84 = emg_19_emg_param_2_84;
    #line 936 
    emg_wrapper_qlcnic_diag_test(emg_19_container,emg_19_emg_param_1_83,emg_19_emg_param_2_84);
    #line 940 
    ldv_free((void *)emg_19_emg_param_1_83);
    #line 941 
    ldv_free((void *)emg_19_emg_param_2_84);
    #line 943 
    break;
    #line 945 
    case 10: 
             #line 945 
    ;
    #line 947 
    emg_wrapper_qlcnic_vlan_rx_del(emg_19_container,(unsigned short)((int)emg_19_emg_param_1_81),(unsigned short)((int)emg_19_emg_param_2_82));
    #line 949 
    break;
    #line 951 
    case 11: 
             #line 951 
    ;
    #line 953 
    emg_wrapper_qlcnic_vlan_rx_add(emg_19_container,(unsigned short)((int)emg_19_emg_param_1_79),(unsigned short)((int)emg_19_emg_param_2_80));
    #line 955 
    break;
    #line 957 
    case 12: 
             #line 957 
    ;
    #line 959 
    (*emg_alias_eth_validate_addr)(emg_19_container);
    #line 961 
    break;
    #line 963 
    case 13: 
             #line 963 
    ;
    #line 965 
    emg_19_emg_param_1_78 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 965 
    emg_19_emg_param_1_78 = emg_19_emg_param_1_78;
    #line 969 
    emg_wrapper_qlcnic_del_vxlan_port(emg_19_container,emg_19_emg_param_1_78);
    #line 973 
    ldv_free((void *)emg_19_emg_param_1_78);
    #line 975 
    break;
    #line 977 
    case 14: 
             #line 977 
    ;
    #line 979 
    emg_19_emg_param_1_77 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 979 
    emg_19_emg_param_1_77 = emg_19_emg_param_1_77;
    #line 983 
    emg_wrapper_qlcnic_add_vxlan_port(emg_19_container,emg_19_emg_param_1_77);
    #line 987 
    ldv_free((void *)emg_19_emg_param_1_77);
    #line 989 
    break;
    #line 991 
    case 15: 
             #line 991 
    ;
    #line 993 
    emg_wrapper_qlcnic_tx_timeout(emg_19_container);
    #line 995 
    break;
    #line 997 
    case 16: 
             #line 997 
    ;
    #line 999 
    emg_19_emg_param_0_76 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 999 
    emg_19_emg_param_0_76 = emg_19_emg_param_0_76;
    #line 1003 
    qlcnic_xmit_frame(emg_19_emg_param_0_76,emg_19_container);
    #line 1007 
    ldv_free((void *)emg_19_emg_param_0_76);
    #line 1009 
    break;
    #line 1011 
    case 17: 
             #line 1011 
    ;
    #line 1013 
    qlcnic_sriov_set_vf_vlan(emg_19_container,emg_19_emg_param_1_72,(unsigned short)((int)emg_19_emg_param_2_73),(unsigned char)((int)emg_19_emg_param_3_74),(unsigned short)((int)emg_19_emg_param_4_75));
    #line 1015 
    break;
    #line 1017 
    case 18: 
             #line 1017 
    ;
    #line 1019 
    qlcnic_sriov_set_vf_spoofchk(emg_19_container,emg_19_emg_param_1_70,(_Bool)((bool)((int)emg_19_emg_param_2_71) != 0));
    #line 1021 
    break;
    #line 1023 
    case 19: 
             #line 1023 
    ;
    #line 1025 
    qlcnic_sriov_set_vf_tx_rate(emg_19_container,emg_19_emg_param_1_67,emg_19_emg_param_2_68,emg_19_emg_param_3_69);
    #line 1027 
    break;
    #line 1029 
    case 20: 
             #line 1029 
    ;
    #line 1031 
    emg_19_emg_param_2_66 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1031 
    emg_19_emg_param_2_66 = emg_19_emg_param_2_66;
    #line 1035 
    qlcnic_sriov_set_vf_mac(emg_19_container,emg_19_emg_param_1_65,emg_19_emg_param_2_66);
    #line 1039 
    ldv_free((void *)emg_19_emg_param_2_66);
    #line 1041 
    break;
    #line 1043 
    case 21: 
             #line 1043 
    ;
    #line 1045 
    qlcnic_set_multi(emg_19_container);
    #line 1047 
    break;
    #line 1049 
    case 22: 
             #line 1049 
    ;
    #line 1051 
    emg_19_emg_param_1_64 = ldv_xmalloc_unknown_size(0UL);
    #line 1051 
    emg_19_emg_param_1_64 = emg_19_emg_param_1_64;
    #line 1055 
    emg_wrapper_qlcnic_set_mac(emg_19_container,emg_19_emg_param_1_64);
    #line 1059 
    ldv_free(emg_19_emg_param_1_64);
    #line 1061 
    break;
    #line 1063 
    case 23: 
             #line 1063 
    ;
    #line 1065 
    qlcnic_set_features(emg_19_container,emg_19_emg_param_1_63);
    #line 1067 
    break;
    #line 1069 
    case 24: 
             #line 1069 
    ;
    #line 1071 
    emg_19_emg_param_2_62 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1071 
    emg_19_emg_param_2_62 = emg_19_emg_param_2_62;
    #line 1075 
    qlcnic_sriov_get_vf_config(emg_19_container,emg_19_emg_param_1_61,emg_19_emg_param_2_62);
    #line 1079 
    ldv_free((void *)emg_19_emg_param_2_62);
    #line 1081 
    break;
    #line 1083 
    case 25: 
             #line 1083 
    ;
    #line 1085 
    emg_wrapper_qlcnic_get_stats(emg_19_container);
    #line 1087 
    break;
    #line 1089 
    case 26: 
             #line 1089 
    ;
    #line 1091 
    emg_19_emg_param_1_60 = (struct netdev_phys_item_id *)ldv_xmalloc_unknown_size(0UL);
    #line 1091 
    emg_19_emg_param_1_60 = emg_19_emg_param_1_60;
    #line 1095 
    emg_wrapper_qlcnic_get_phys_port_id(emg_19_container,emg_19_emg_param_1_60);
    #line 1099 
    ldv_free((void *)emg_19_emg_param_1_60);
    #line 1101 
    break;
    #line 1103 
    case 27: 
             #line 1103 
    ;
    #line 1105 
    qlcnic_fix_features(emg_19_container,emg_19_emg_param_1_59);
    #line 1107 
    break;
    #line 1109 
    case 28: 
             #line 1109 
    ;
    #line 1111 
    emg_19_emg_param_0_57 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1111 
    emg_19_emg_param_0_57 = emg_19_emg_param_0_57;
    #line 1115 
    emg_wrapper_qlcnic_features_check(emg_19_emg_param_0_57,emg_19_container,emg_19_emg_param_2_58);
    #line 1119 
    ldv_free((void *)emg_19_emg_param_0_57);
    #line 1121 
    break;
    #line 1123 
    case 29: 
             #line 1123 
    ;
    #line 1125 
    emg_19_emg_param_0_53 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1125 
    emg_19_emg_param_0_53 = emg_19_emg_param_0_53;
    #line 1126 
    emg_19_emg_param_1_54 = (struct netlink_callback *)ldv_xmalloc_unknown_size(0UL);
    #line 1126 
    emg_19_emg_param_1_54 = emg_19_emg_param_1_54;
    #line 1127 
    emg_19_emg_param_3_55 = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    #line 1127 
    emg_19_emg_param_3_55 = emg_19_emg_param_3_55;
    #line 1128 
    emg_19_emg_param_4_56 = (int *)ldv_xmalloc_unknown_size(0UL);
    #line 1128 
    emg_19_emg_param_4_56 = emg_19_emg_param_4_56;
    #line 1132 
    emg_wrapper_qlcnic_fdb_dump(emg_19_emg_param_0_53,emg_19_emg_param_1_54,emg_19_container,emg_19_emg_param_3_55,emg_19_emg_param_4_56);
    #line 1136 
    ldv_free((void *)emg_19_emg_param_0_53);
    #line 1137 
    ldv_free((void *)emg_19_emg_param_1_54);
    #line 1138 
    ldv_free((void *)emg_19_emg_param_3_55);
    #line 1139 
    ldv_free((void *)emg_19_emg_param_4_56);
    #line 1141 
    break;
    #line 1143 
    case 30: 
             #line 1143 
    ;
    #line 1145 
    emg_19_emg_param_0_49 = (struct ndmsg *)ldv_xmalloc_unknown_size(0UL);
    #line 1145 
    emg_19_emg_param_0_49 = emg_19_emg_param_0_49;
    #line 1146 
    emg_19_emg_param_1_50 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
    #line 1146 
    emg_19_emg_param_1_50 = emg_19_emg_param_1_50;
    #line 1147 
    emg_19_emg_param_3_51 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1147 
    emg_19_emg_param_3_51 = emg_19_emg_param_3_51;
    #line 1151 
    emg_wrapper_qlcnic_fdb_del(emg_19_emg_param_0_49,emg_19_emg_param_1_50,emg_19_container,emg_19_emg_param_3_51,(unsigned short)((int)emg_19_emg_param_4_52));
    #line 1155 
    ldv_free((void *)emg_19_emg_param_0_49);
    #line 1156 
    ldv_free((void *)emg_19_emg_param_1_50);
    #line 1157 
    ldv_free((void *)emg_19_emg_param_3_51);
    #line 1159 
    break;
    #line 1161 
    case 31: 
             #line 1161 
    ;
    #line 1163 
    emg_19_emg_param_0_43 = (struct ndmsg *)ldv_xmalloc_unknown_size(0UL);
    #line 1163 
    emg_19_emg_param_0_43 = emg_19_emg_param_0_43;
    #line 1164 
    emg_19_emg_param_1_44 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
    #line 1164 
    emg_19_emg_param_1_44 = emg_19_emg_param_1_44;
    #line 1165 
    emg_19_emg_param_3_45 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1165 
    emg_19_emg_param_3_45 = emg_19_emg_param_3_45;
    #line 1166 
    emg_19_emg_param_6_48 = (struct netlink_ext_ack *)ldv_xmalloc_unknown_size(0UL);
    #line 1166 
    emg_19_emg_param_6_48 = emg_19_emg_param_6_48;
    #line 1170 
    emg_wrapper_qlcnic_fdb_add(emg_19_emg_param_0_43,emg_19_emg_param_1_44,emg_19_container,emg_19_emg_param_3_45,(unsigned short)((int)emg_19_emg_param_4_46),(unsigned short)((int)emg_19_emg_param_5_47),emg_19_emg_param_6_48);
    #line 1174 
    ldv_free((void *)emg_19_emg_param_0_43);
    #line 1175 
    ldv_free((void *)emg_19_emg_param_1_44);
    #line 1176 
    ldv_free((void *)emg_19_emg_param_3_45);
    #line 1177 
    ldv_free((void *)emg_19_emg_param_6_48);
    #line 1179 
    break;
    #line 1181 
    case 32: 
             #line 1181 
    ;
    #line 1183 
    qlcnic_change_mtu(emg_19_container,emg_19_emg_param_1_42);
    #line 1185 
    break;
    #line 1187 
    case 33: 
             #line 1187 
    ;
    #line 1189 
    emg_19_emg_param_1_41 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1189 
    emg_19_emg_param_1_41 = emg_19_emg_param_1_41;
    #line 1193 
    emg_wrapper_qlcnic_get_wol(emg_19_container,emg_19_emg_param_1_41);
    #line 1197 
    ldv_free((void *)emg_19_emg_param_1_41);
    #line 1199 
    break;
    #line 1201 
    case 34: 
             #line 1201 
    ;
    #line 1203 
    emg_19_emg_param_2_40 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1203 
    emg_19_emg_param_2_40 = emg_19_emg_param_2_40;
    #line 1207 
    emg_wrapper_qlcnic_get_strings(emg_19_container,emg_19_emg_param_1_39,emg_19_emg_param_2_40);
    #line 1211 
    ldv_free((void *)emg_19_emg_param_2_40);
    #line 1213 
    break;
    #line 1215 
    case 35: 
             #line 1215 
    ;
    #line 1217 
    emg_wrapper_qlcnic_get_sset_count(emg_19_container,emg_19_emg_param_1_38);
    #line 1219 
    break;
    #line 1221 
    case 36: 
             #line 1221 
    ;
    #line 1223 
    emg_19_emg_param_1_37 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1223 
    emg_19_emg_param_1_37 = emg_19_emg_param_1_37;
    #line 1227 
    emg_wrapper_qlcnic_get_ringparam(emg_19_container,emg_19_emg_param_1_37);
    #line 1231 
    ldv_free((void *)emg_19_emg_param_1_37);
    #line 1233 
    break;
    #line 1235 
    case 37: 
             #line 1235 
    ;
    #line 1237 
    emg_wrapper_qlcnic_get_regs_len(emg_19_container);
    #line 1239 
    break;
    #line 1241 
    case 38: 
             #line 1241 
    ;
    #line 1243 
    emg_19_emg_param_1_35 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1243 
    emg_19_emg_param_1_35 = emg_19_emg_param_1_35;
    #line 1244 
    emg_19_emg_param_2_36 = ldv_xmalloc_unknown_size(0UL);
    #line 1244 
    emg_19_emg_param_2_36 = emg_19_emg_param_2_36;
    #line 1248 
    emg_wrapper_qlcnic_get_regs(emg_19_container,emg_19_emg_param_1_35,emg_19_emg_param_2_36);
    #line 1252 
    ldv_free((void *)emg_19_emg_param_1_35);
    #line 1253 
    ldv_free(emg_19_emg_param_2_36);
    #line 1255 
    break;
    #line 1257 
    case 39: 
             #line 1257 
    ;
    #line 1259 
    emg_19_emg_param_1_34 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1259 
    emg_19_emg_param_1_34 = emg_19_emg_param_1_34;
    #line 1263 
    emg_wrapper_qlcnic_get_pauseparam(emg_19_container,emg_19_emg_param_1_34);
    #line 1267 
    ldv_free((void *)emg_19_emg_param_1_34);
    #line 1269 
    break;
    #line 1271 
    case 40: 
             #line 1271 
    ;
    #line 1273 
    emg_wrapper_qlcnic_get_msglevel(emg_19_container);
    #line 1275 
    break;
    #line 1277 
    case 41: 
             #line 1277 
    ;
    #line 1279 
    emg_19_emg_param_1_33 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1279 
    emg_19_emg_param_1_33 = emg_19_emg_param_1_33;
    #line 1283 
    emg_wrapper_qlcnic_get_link_ksettings(emg_19_container,emg_19_emg_param_1_33);
    #line 1287 
    ldv_free((void *)emg_19_emg_param_1_33);
    #line 1289 
    break;
    #line 1291 
    case 42: 
             #line 1291 
    ;
    #line 1293 
    ethtool_op_get_link(emg_19_container);
    #line 1295 
    break;
    #line 1297 
    case 43: 
             #line 1297 
    ;
    #line 1299 
    emg_19_emg_param_1_31 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1299 
    emg_19_emg_param_1_31 = emg_19_emg_param_1_31;
    #line 1300 
    emg_19_emg_param_2_32 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1300 
    emg_19_emg_param_2_32 = emg_19_emg_param_2_32;
    #line 1304 
    emg_wrapper_qlcnic_get_ethtool_stats(emg_19_container,emg_19_emg_param_1_31,emg_19_emg_param_2_32);
    #line 1308 
    ldv_free((void *)emg_19_emg_param_1_31);
    #line 1309 
    ldv_free((void *)emg_19_emg_param_2_32);
    #line 1311 
    break;
    #line 1313 
    case 44: 
             #line 1313 
    ;
    #line 1315 
    emg_wrapper_qlcnic_get_eeprom_len(emg_19_container);
    #line 1317 
    break;
    #line 1319 
    case 45: 
             #line 1319 
    ;
    #line 1321 
    emg_19_emg_param_1_29 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1321 
    emg_19_emg_param_1_29 = emg_19_emg_param_1_29;
    #line 1322 
    emg_19_emg_param_2_30 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1322 
    emg_19_emg_param_2_30 = emg_19_emg_param_2_30;
    #line 1326 
    emg_wrapper_qlcnic_get_eeprom(emg_19_container,emg_19_emg_param_1_29,emg_19_emg_param_2_30);
    #line 1330 
    ldv_free((void *)emg_19_emg_param_1_29);
    #line 1331 
    ldv_free((void *)emg_19_emg_param_2_30);
    #line 1333 
    break;
    #line 1335 
    case 46: 
             #line 1335 
    ;
    #line 1337 
    emg_19_emg_param_1_28 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 1337 
    emg_19_emg_param_1_28 = emg_19_emg_param_1_28;
    #line 1341 
    emg_wrapper_qlcnic_get_dump_flag(emg_19_container,emg_19_emg_param_1_28);
    #line 1345 
    ldv_free((void *)emg_19_emg_param_1_28);
    #line 1347 
    break;
    #line 1349 
    case 47: 
             #line 1349 
    ;
    #line 1351 
    emg_19_emg_param_1_26 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 1351 
    emg_19_emg_param_1_26 = emg_19_emg_param_1_26;
    #line 1352 
    emg_19_emg_param_2_27 = ldv_xmalloc_unknown_size(0UL);
    #line 1352 
    emg_19_emg_param_2_27 = emg_19_emg_param_2_27;
    #line 1356 
    emg_wrapper_qlcnic_get_dump_data(emg_19_container,emg_19_emg_param_1_26,emg_19_emg_param_2_27);
    #line 1360 
    ldv_free((void *)emg_19_emg_param_1_26);
    #line 1361 
    ldv_free(emg_19_emg_param_2_27);
    #line 1363 
    break;
    #line 1365 
    case 48: 
             #line 1365 
    ;
    #line 1367 
    emg_19_emg_param_1_25 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1367 
    emg_19_emg_param_1_25 = emg_19_emg_param_1_25;
    #line 1371 
    emg_wrapper_qlcnic_get_drvinfo(emg_19_container,emg_19_emg_param_1_25);
    #line 1375 
    ldv_free((void *)emg_19_emg_param_1_25);
    #line 1377 
    break;
    #line 1379 
    case 49: 
             #line 1379 
    ;
    #line 1381 
    emg_19_emg_param_1_24 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1381 
    emg_19_emg_param_1_24 = emg_19_emg_param_1_24;
    #line 1385 
    emg_wrapper_qlcnic_get_intr_coalesce(emg_19_container,emg_19_emg_param_1_24);
    #line 1389 
    ldv_free((void *)emg_19_emg_param_1_24);
    #line 1391 
    break;
    #line 1393 
    case 50: 
             #line 1393 
    ;
    #line 1395 
    emg_19_emg_param_1_23 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1395 
    emg_19_emg_param_1_23 = emg_19_emg_param_1_23;
    #line 1399 
    emg_wrapper_qlcnic_get_channels(emg_19_container,emg_19_emg_param_1_23);
    #line 1403 
    ldv_free((void *)emg_19_emg_param_1_23);
    #line 1405 
    break;
    #line 1407 
    case 51: 
             #line 1407 
    ;
    #line 1409 
    emg_19_emg_param_1_21 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1409 
    emg_19_emg_param_1_21 = emg_19_emg_param_1_21;
    #line 1410 
    emg_19_emg_param_2_22 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1410 
    emg_19_emg_param_2_22 = emg_19_emg_param_2_22;
    #line 1414 
    emg_wrapper_qlcnic_get_ethtool_stats(emg_19_container,emg_19_emg_param_1_21,emg_19_emg_param_2_22);
    #line 1418 
    ldv_free((void *)emg_19_emg_param_1_21);
    #line 1419 
    ldv_free((void *)emg_19_emg_param_2_22);
    #line 1421 
    break;
    #line 1423 
    case 52: 
             #line 1423 
    ;
    #line 1425 
    emg_wrapper_qlcnic_get_sset_count(emg_19_container,emg_19_emg_param_1_20);
    #line 1427 
    break;
    #line 1429 
    case 53: 
             #line 1429 
    ;
    #line 1431 
    emg_19_emg_param_1_19 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1431 
    emg_19_emg_param_1_19 = emg_19_emg_param_1_19;
    #line 1435 
    emg_wrapper_qlcnic_get_channels(emg_19_container,emg_19_emg_param_1_19);
    #line 1439 
    ldv_free((void *)emg_19_emg_param_1_19);
    #line 1441 
    break;
    #line 1443 
    case 54: 
             #line 1443 
    ;
    #line 1445 
    emg_19_emg_param_1_18 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1445 
    emg_19_emg_param_1_18 = emg_19_emg_param_1_18;
    #line 1449 
    emg_wrapper_qlcnic_get_drvinfo(emg_19_container,emg_19_emg_param_1_18);
    #line 1453 
    ldv_free((void *)emg_19_emg_param_1_18);
    #line 1455 
    break;
    #line 1457 
    case 55: 
             #line 1457 
    ;
    #line 1459 
    emg_wrapper_qlcnic_get_msglevel(emg_19_container);
    #line 1461 
    break;
    #line 1463 
    case 56: 
             #line 1463 
    ;
    #line 1465 
    emg_wrapper_qlcnic_set_msglevel(emg_19_container,emg_19_emg_param_1_17);
    #line 1467 
    break;
    #line 1469 
    case 57: 
             #line 1469 
    ;
    #line 1471 
    emg_19_emg_param_1_16 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 1471 
    emg_19_emg_param_1_16 = emg_19_emg_param_1_16;
    #line 1475 
    emg_wrapper_qlcnic_set_dump(emg_19_container,emg_19_emg_param_1_16);
    #line 1479 
    ldv_free((void *)emg_19_emg_param_1_16);
    #line 1481 
    break;
    #line 1483 
    case 58: 
             #line 1483 
    ;
    #line 1485 
    emg_19_emg_param_1_15 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1485 
    emg_19_emg_param_1_15 = emg_19_emg_param_1_15;
    #line 1489 
    emg_wrapper_qlcnic_get_link_ksettings(emg_19_container,emg_19_emg_param_1_15);
    #line 1493 
    ldv_free((void *)emg_19_emg_param_1_15);
    #line 1495 
    break;
    #line 1497 
    case 59: 
             #line 1497 
    ;
    #line 1499 
    emg_19_emg_param_1_14 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1499 
    emg_19_emg_param_1_14 = emg_19_emg_param_1_14;
    #line 1503 
    emg_wrapper_qlcnic_get_drvinfo(emg_19_container,emg_19_emg_param_1_14);
    #line 1507 
    ldv_free((void *)emg_19_emg_param_1_14);
    #line 1509 
    break;
    #line 1511 
    case 60: 
             #line 1511 
    ;
    #line 1513 
    emg_wrapper_qlcnic_get_regs_len(emg_19_container);
    #line 1515 
    break;
    #line 1517 
    case 61: 
             #line 1517 
    ;
    #line 1519 
    emg_19_emg_param_1_12 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1519 
    emg_19_emg_param_1_12 = emg_19_emg_param_1_12;
    #line 1520 
    emg_19_emg_param_2_13 = ldv_xmalloc_unknown_size(0UL);
    #line 1520 
    emg_19_emg_param_2_13 = emg_19_emg_param_2_13;
    #line 1524 
    emg_wrapper_qlcnic_get_regs(emg_19_container,emg_19_emg_param_1_12,emg_19_emg_param_2_13);
    #line 1528 
    ldv_free((void *)emg_19_emg_param_1_12);
    #line 1529 
    ldv_free(emg_19_emg_param_2_13);
    #line 1531 
    break;
    #line 1533 
    case 62: 
             #line 1533 
    ;
    #line 1535 
    emg_19_emg_param_1_11 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1535 
    emg_19_emg_param_1_11 = emg_19_emg_param_1_11;
    #line 1539 
    emg_wrapper_qlcnic_get_wol(emg_19_container,emg_19_emg_param_1_11);
    #line 1543 
    ldv_free((void *)emg_19_emg_param_1_11);
    #line 1545 
    break;
    #line 1547 
    case 63: 
             #line 1547 
    ;
    #line 1549 
    emg_wrapper_qlcnic_get_msglevel(emg_19_container);
    #line 1551 
    break;
    #line 1553 
    case 64: 
             #line 1553 
    ;
    #line 1555 
    emg_19_emg_param_1_10 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1555 
    emg_19_emg_param_1_10 = emg_19_emg_param_1_10;
    #line 1559 
    emg_wrapper_qlcnic_get_link_ksettings(emg_19_container,emg_19_emg_param_1_10);
    #line 1563 
    ldv_free((void *)emg_19_emg_param_1_10);
    #line 1565 
    break;
    #line 1567 
    case 65: 
             #line 1567 
    ;
    #line 1569 
    emg_wrapper_qlcnic_set_msglevel(emg_19_container,emg_19_emg_param_1_9);
    #line 1571 
    break;
    #line 1573 
    case 66: 
             #line 1573 
    ;
    #line 1575 
    ethtool_op_get_link(emg_19_container);
    #line 1577 
    break;
    #line 1579 
    case 67: 
             #line 1579 
    ;
    #line 1581 
    emg_wrapper_qlcnic_get_eeprom_len(emg_19_container);
    #line 1583 
    break;
    #line 1585 
    case 68: 
             #line 1585 
    ;
    #line 1587 
    emg_19_emg_param_1_7 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1587 
    emg_19_emg_param_1_7 = emg_19_emg_param_1_7;
    #line 1588 
    emg_19_emg_param_2_8 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1588 
    emg_19_emg_param_2_8 = emg_19_emg_param_2_8;
    #line 1592 
    emg_wrapper_qlcnic_get_eeprom(emg_19_container,emg_19_emg_param_1_7,emg_19_emg_param_2_8);
    #line 1596 
    ldv_free((void *)emg_19_emg_param_1_7);
    #line 1597 
    ldv_free((void *)emg_19_emg_param_2_8);
    #line 1599 
    break;
    #line 1601 
    case 69: 
             #line 1601 
    ;
    #line 1603 
    emg_19_emg_param_1_6 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1603 
    emg_19_emg_param_1_6 = emg_19_emg_param_1_6;
    #line 1607 
    emg_wrapper_qlcnic_get_intr_coalesce(emg_19_container,emg_19_emg_param_1_6);
    #line 1611 
    ldv_free((void *)emg_19_emg_param_1_6);
    #line 1613 
    break;
    #line 1615 
    case 70: 
             #line 1615 
    ;
    #line 1617 
    emg_19_emg_param_1_5 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1617 
    emg_19_emg_param_1_5 = emg_19_emg_param_1_5;
    #line 1621 
    emg_wrapper_qlcnic_set_intr_coalesce(emg_19_container,emg_19_emg_param_1_5);
    #line 1625 
    ldv_free((void *)emg_19_emg_param_1_5);
    #line 1627 
    break;
    #line 1629 
    case 71: 
             #line 1629 
    ;
    #line 1631 
    emg_19_emg_param_1_4 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1631 
    emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
    #line 1635 
    emg_wrapper_qlcnic_get_ringparam(emg_19_container,emg_19_emg_param_1_4);
    #line 1639 
    ldv_free((void *)emg_19_emg_param_1_4);
    #line 1641 
    break;
    #line 1643 
    case 72: 
             #line 1643 
    ;
    #line 1645 
    emg_19_emg_param_1_3 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1645 
    emg_19_emg_param_1_3 = emg_19_emg_param_1_3;
    #line 1649 
    emg_wrapper_qlcnic_set_ringparam(emg_19_container,emg_19_emg_param_1_3);
    #line 1653 
    ldv_free((void *)emg_19_emg_param_1_3);
    #line 1655 
    break;
    #line 1657 
    case 73: 
             #line 1657 
    ;
    #line 1659 
    emg_19_emg_param_1_2 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1659 
    emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
    #line 1663 
    emg_wrapper_qlcnic_get_pauseparam(emg_19_container,emg_19_emg_param_1_2);
    #line 1667 
    ldv_free((void *)emg_19_emg_param_1_2);
    #line 1669 
    break;
    #line 1671 
    case 74: 
             #line 1671 
    ;
    #line 1673 
    emg_19_emg_param_2_1 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1673 
    emg_19_emg_param_2_1 = emg_19_emg_param_2_1;
    #line 1677 
    emg_wrapper_qlcnic_get_strings(emg_19_container,emg_19_emg_param_1_0,emg_19_emg_param_2_1);
    #line 1681 
    ldv_free((void *)emg_19_emg_param_2_1);
    #line 1684 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 1685 
      emg_repeat_cnt_call_19 --;
      #line 1687 
      goto emg_call_19;
    }
    else 
         #line 1689 
         __VERIFIER_assume(0);
    #line 1693 
    break;
    #line 1695 
    case 75: 
             #line 1695 
    ;
    #line 1699 
    break;
    #line 1701 
    default: 
             #line 1701 
    ;
    #line 1701 
    __VERIFIER_assume(0);
  }
  #line 1704 
  return (void *)0;
}

#line 1709  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_qlcnic_driver(void *arg0)
{
  #line 1712 
  int emg_20_choice;
  #line 1713 
  struct pci_driver *emg_20_container;
  #line 1714 
  struct pci_device_id *emg_20_device_id;
  #line 1715 
  int emg_20_emg_param_1_0;
  #line 1716 
  struct pci_dev *emg_20_resource_0;
  #line 1717 
  struct pm_message emg_20_resource_1;
  #line 1718 
  int emg_20_ret;
  #line 1719 
  int emg_repeat_cnt_call_20_0 = 1;
  #line 1720 
  int emg_repeat_cnt_call_20_1 = 1;
  #line 1721 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 1722 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 1724 
  struct emg_struct_pci_scenario_qlcnic_driver_20 *data = (struct emg_struct_pci_scenario_qlcnic_driver_20 *)arg0;
  #line 1728 
  emg_20_choice = 0;
  #line 1729 
  emg_20_ret = ldv_undef_int();
  #line 1730 
  emg_20_choice = 0;
  #line 1731 
  emg_20_container = emg_alias_qlcnic_driver;
  #line 1732 
  emg_20_ret = ldv_undef_int();
  #line 1734 
  __VERIFIER_assume(data->arg0 == emg_alias_qlcnic_driver);
  #line 1736 
  if (data != (struct emg_struct_pci_scenario_qlcnic_driver_20 *)0) {
    #line 1737 
    emg_20_container = data->arg0;
    #line 1738 
    ldv_free((void *)data);
  }
  #line 1743 
  emg_20_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1744 
  emg_20_choice = __ldv_undef_int_range(0,7);
  #line 1745 
  emg_20_device_id = emg_20_container->id_table + (unsigned long)emg_20_choice;
  #line 1749 
  goto emg_main_20;
  #line 1753 
  return (void *)0;
  #line 1756 
  emg_call_20: 
               #line 1756 
  ;
  #line 1757 
  switch (ldv_undef_int()) {
    #line 1758 
    case 0: 
            #line 1758 
    ;
    #line 1760 
    qlcnic_pci_sriov_configure(emg_20_resource_0,emg_20_emg_param_1_0);
    #line 1763 
    if (emg_repeat_cnt_call_20_1 > 0) {
      #line 1764 
      emg_repeat_cnt_call_20_1 --;
      #line 1766 
      goto emg_call_20;
    }
    else 
         #line 1768 
         __VERIFIER_assume(0);
    #line 1772 
    break;
    #line 1774 
    case 1: 
            #line 1774 
    ;
    #line 1776 
    emg_20_ret = emg_wrapper_qlcnic_suspend(emg_20_resource_0,emg_20_resource_1);
    #line 1781 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 1785 
    emg_wrapper_qlcnic_resume(emg_20_resource_0);
    #line 1788 
    if (emg_repeat_cnt_call_20_0 > 0) {
      #line 1789 
      emg_repeat_cnt_call_20_0 --;
      #line 1791 
      goto emg_call_20;
    }
    else 
         #line 1793 
         __VERIFIER_assume(0);
    #line 1797 
    break;
    #line 1799 
    case 2: 
            #line 1799 
    ;
    #line 1801 
    emg_wrapper_qlcnic_shutdown(emg_20_resource_0);
    #line 1805 
    emg_wrapper_qlcnic_remove(emg_20_resource_0);
    #line 1808 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 1809 
      emg_repeat_cnt_main_20_0 --;
      #line 1811 
      goto emg_main_20;
    }
    else 
         #line 1813 
         __VERIFIER_assume(0);
    #line 1817 
    break;
    #line 1819 
    default: 
             #line 1819 
    ;
    #line 1819 
    __VERIFIER_assume(0);
  }
  #line 1822 
  return (void *)0;
  #line 1825 
  emg_main_20: 
               #line 1825 
  ;
  #line 1826 
  if (ldv_undef_int() != 0) {
    #line 1829 
    ldv_pre_probe();
    #line 1833 
    emg_20_ret = emg_wrapper_qlcnic_probe(emg_20_resource_0,emg_20_device_id);
    #line 1838 
    emg_20_ret = ldv_post_probe(emg_20_ret);
    #line 1841 
    if (ldv_undef_int() != 0) {
      #line 1843 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 1847 
      goto emg_call_20;
    }
    else 
         #line 1852 
         __VERIFIER_assume(emg_20_ret != 0);
    #line 1856 
    if (emg_repeat_cnt_main_20_1 > 0) {
      #line 1857 
      emg_repeat_cnt_main_20_1 --;
      #line 1859 
      goto emg_main_20;
    }
    else 
         #line 1861 
         __VERIFIER_assume(0);
  }
  else 
       #line 1867 
       ldv_free((void *)emg_20_resource_0);
  #line 1875 
  return (void *)0;
}

#line 1880  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1883 
  struct pci_driver *emg_2_pci_driver;
  #line 1885 
  emg_2_pci_driver = emg_alias_qlcnic_driver;
  #line 1886 
  if (ldv_undef_int() != 0) {
    #line 1888 
    emg_2_pci_driver = arg0;
    #line 1892 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1896 
    return 0;
  }
  else {
    #line 1900 
    return ldv_undef_int_negative();
  }
}

#line 1908  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1911 
  struct net_device *emg_3_netdev;
  #line 1913 
  if (ldv_undef_int() != 0) {
    #line 1915 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1919 
    return emg_3_netdev;
  }
  else 
       #line 1923 
       return (struct net_device *)0;
}

#line 1931  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1)
{
  #line 1934 
  struct device_attribute *emg_4_devattr;
  #line 1935 
  struct device *emg_4_device;
  #line 1937 
  if (ldv_undef_int() != 0) {
    #line 1939 
    emg_4_device = arg0;
    #line 1940 
    emg_4_devattr = arg1;
    #line 1944 
    emg_dispatch_register_4(emg_4_device,emg_4_devattr);
    #line 1948 
    return 0;
  }
  else {
    #line 1952 
    return ldv_undef_int_negative();
  }
}

#line 1960  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_device_remove_file(struct device *arg0, struct device_attribute *arg1)
{
  #line 1963 
  struct device_attribute *emg_5_devattr;
  #line 1964 
  struct device *emg_5_device;
  #line 1967 
  emg_5_device = arg0;
  #line 1968 
  emg_5_devattr = arg1;
  #line 1972 
  emg_dispatch_deregister_5(emg_5_device,emg_5_devattr);
  #line 1975 
  return;
}

#line 1980  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1983 
  int emg_6_line;
  #line 1986 
  emg_6_line = (int)arg0;
  #line 1990 
  emg_dispatch_irq_deregister_6(emg_6_line);
  #line 1991 
  ;
  #line 1991 
  return (void *)0;
}

#line 1997  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2000 
  struct net_device *emg_7_netdev;
  #line 2003 
  emg_7_netdev = arg0;
  #line 2004 
  ldv_free((void *)emg_7_netdev);
  #line 2007 
  return;
}

#line 2012  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2015 
  struct pci_driver *emg_8_pci_driver;
  #line 2017 
  emg_8_pci_driver = emg_alias_qlcnic_driver;
  #line 2019 
  emg_8_pci_driver = arg0;
  #line 2023 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 2026 
  return;
}

#line 2031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 2034 
  struct delayed_work *emg_9_delayed_work;
  #line 2035 
  struct work_struct *emg_9_emg_param_0_0;
  #line 2037 
  if (ldv_undef_int() != 0) {
    #line 2039 
    emg_9_delayed_work = arg1;
    #line 2043 
    emg_9_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 2043 
    emg_9_emg_param_0_0 = emg_9_emg_param_0_0;
    #line 2047 
    if (emg_9_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 2048 
      (*(emg_9_delayed_work->work.func))(emg_9_emg_param_0_0);
    #line 2053 
    ldv_free((void *)emg_9_emg_param_0_0);
    #line 2057 
    return (_Bool)1;
  }
  else 
       #line 2061 
       return (_Bool)0;
}

#line 2069  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 2072 
  struct work_struct *emg_10_work_struct;
  #line 2074 
  if (ldv_undef_int() != 0) {
    #line 2076 
    emg_10_work_struct = arg1;
    #line 2080 
    if (emg_10_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2081 
      (*(emg_10_work_struct->func))(emg_10_work_struct);
    #line 2086 
    return (_Bool)1;
  }
  else 
       #line 2090 
       return (_Bool)0;
}

#line 2098  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2101 
  struct net_device *emg_11_netdev;
  #line 2102 
  int emg_11_ret;
  #line 2105 
  emg_11_ret = ldv_undef_int();
  #line 2106 
  emg_11_ret = ldv_undef_int();
  #line 2107 
  if (ldv_undef_int() != 0) {
    #line 2109 
    emg_11_netdev = arg0;
    #line 2113 
    emg_11_ret = emg_wrapper_qlcnic_open(emg_11_netdev);
    #line 2116 
    if (ldv_undef_int() != 0) {
      #line 2118 
      __VERIFIER_assume(emg_11_ret == 0);
      #line 2122 
      emg_dispatch_register_11(emg_11_netdev);
      #line 2126 
      return 0;
    }
    else {
      #line 2130 
      __VERIFIER_assume(emg_11_ret != 0);
      #line 2131 
      ldv_failed_register_netdev();
      #line 2132 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2137 
    ldv_failed_register_netdev();
    #line 2138 
    return ldv_undef_int_negative();
  }
}

#line 2146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2149 
  enum irqreturn (*emg_12_callback)(int , void *);
  #line 2150 
  void *emg_12_data;
  #line 2151 
  int emg_12_line;
  #line 2152 
  enum irqreturn (*emg_12_thread)(int , void *);
  #line 2154 
  if (ldv_undef_int() != 0) {
    #line 2156 
    emg_12_line = (int)arg0;
    #line 2157 
    emg_12_callback = arg1;
    #line 2158 
    emg_12_thread = (enum irqreturn (*)(int , void *))0;
    #line 2159 
    emg_12_data = arg4;
    #line 2163 
    emg_dispatch_irq_register_12(emg_12_line,emg_12_callback,emg_12_thread,emg_12_data);
    #line 2167 
    return 0;
  }
  else {
    #line 2171 
    return ldv_undef_int_negative();
  }
}

#line 2179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2182 
  struct net_device *emg_13_netdev;
  #line 2185 
  emg_13_netdev = arg0;
  #line 2189 
  emg_wrapper_qlcnic_close(emg_13_netdev);
  #line 2193 
  emg_dispatch_deregister_13(emg_13_netdev);
  #line 2196 
  return;
}

#line 2201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2204 
  int emg_1_ret;
  #line 2207 
  emg_1_ret = emg_qlcnic_init_module();
  #line 2208 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2211 
  if (ldv_undef_int() != 0) {
    #line 2213 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2217 
    emg_qlcnic_exit_module();
  }
  else 
       #line 2221 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2225 
  return (void *)0;
}

#line 2230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2232 
  ldv_initialize();
  #line 2234 
  emg_entry_point_insmod((void *)0);
  #line 2236 
  return 0;
}

