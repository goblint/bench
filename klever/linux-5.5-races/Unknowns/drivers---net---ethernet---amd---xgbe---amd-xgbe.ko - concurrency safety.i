/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_device_crosststamp {
   ktime_t device ;
   ktime_t sys_realtime ;
   ktime_t sys_monoraw ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_304 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_304 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_305 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_306 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_307 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_308 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_311 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_312 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_310 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_311 _addr_bnd ;
   struct __anonstruct__addr_pkey_312 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_309 {
   void *_addr ;
   union __anonunion_310 __anonCompField___anonstruct__sigfault_309_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_313 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_314 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_305 _kill ;
   struct __anonstruct__timer_306 _timer ;
   struct __anonstruct__rt_307 _rt ;
   struct __anonstruct__sigchld_308 _sigchld ;
   struct __anonstruct__sigfault_309 _sigfault ;
   struct __anonstruct__sigpoll_313 _sigpoll ;
   struct __anonstruct__sigsys_314 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_319 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_319 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_324 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_324 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_326 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_326 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103 
struct percpu_ref;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_410 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_412 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_411 {
   unsigned long nr_segs ;
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_410 __anonCompField_iov_iter_59 ;
   union __anonunion_411 __anonCompField_iov_iter_61 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_415 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_415 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_416 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_416 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_417 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_417 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_418 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_418 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_419 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_419 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_420 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_420 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_421 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_421 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_422 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_422 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_423 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_424 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_423 ifr_ifrn ;
   union __anonunion_ifr_ifru_424 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_439 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_438 {
   struct __anonstruct_439 __anonCompField___anonunion_438_64 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_438 __anonCompField_lockref_65 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_441 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_440 {
   struct __anonstruct_441 __anonCompField___anonunion_440_66 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_440 __anonCompField_qstr_67 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_442 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_443 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_442 __anonCompField_dentry_68 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_443 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_451 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_451 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_452 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_453 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_452 __anonCompField_io_cq_69 ;
   union __anonunion_453 __anonCompField_io_cq_70 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 290 
struct kstatfs;
#line 291 
struct swap_info_struct;
#line 292 
struct fscrypt_info;
#line 293 
struct fscrypt_operations;
#line 294 
struct fsverity_info;
#line 295 
struct fsverity_operations;
#line 296 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_454 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_454 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_455 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_455 __anonCompField_kqid_71 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_460 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_461 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_462 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628 
struct cdev;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_463 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_460 __anonCompField_inode_72 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_461 __anonCompField_inode_73 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_462 __anonCompField_inode_74 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_463 __anonCompField_inode_75 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_464 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_464 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_466 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_465 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_466 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_465 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_510 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_510 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_511 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_511 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_532 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_533 __anonCompField___anonstruct_532_89 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_531 {
   struct __anonstruct_532 __anonCompField___anonunion_531_90 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_534 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_537 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct __anonstruct_537 __anonCompField___anonunion_536_94 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   __wsum csum ;
   struct __anonstruct_539 __anonCompField___anonunion_538_96 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_541 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_531 __anonCompField_sk_buff_91 ;
   union __anonunion_534 __anonCompField_sk_buff_92 ;
   union __anonunion_535 __anonCompField_sk_buff_93 ;
   char cb[48U] ;
   union __anonunion_536 __anonCompField_sk_buff_95 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_538 __anonCompField_sk_buff_97 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 secmark ;
   union __anonunion_541 __anonCompField_sk_buff_99 ;
   union __anonunion_542 __anonCompField_sk_buff_100 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_568 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_568 __anonCompField_ethtool_rxnfc_102 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_571 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_571 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_572 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_572 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_573 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_573 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_574 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_574 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_575 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_575 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_577 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_577 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_590 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_589 {
   struct __anonstruct_590 __anonCompField___anonunion_589_103 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_589 __anonCompField_keyring_index_key_104 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_592 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_594 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct keyring_index_key index_key ;
   struct __anonstruct_594 __anonCompField___anonunion_593_107 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   union key_payload payload ;
   struct __anonstruct_596 __anonCompField___anonunion_595_109 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_591 __anonCompField_key_105 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_592 __anonCompField_key_106 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_593 __anonCompField_key_108 ;
   union __anonunion_595 __anonCompField_key_110 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_599 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_599 __anonCompField_cred_111 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_600 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_600 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_602 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_601 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_602 __anonCompField___anonunion_601_112 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_601 __anonCompField_uid_gid_map_113 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_604 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_606 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_605 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_606 __anonCompField___anonstruct_605_116 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_608 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_610 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_612 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   union __anonunion_612 __anonCompField___anonstruct_611_121 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_613 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_614 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_615 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_616 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_617 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_604 __anonCompField_bpf_attr_115 ;
   struct __anonstruct_605 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_608 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_test_610 test ;
   struct __anonstruct_611 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_info_613 info ;
   struct __anonstruct_query_614 query ;
   struct __anonstruct_raw_tracepoint_615 raw_tracepoint ;
   struct __anonstruct_616 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_task_fd_query_617 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_644 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_644 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_646 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_645 {
   struct __anonstruct_tail_call_646 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_645 __anonCompField_bpf_jit_poke_descriptor_148 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_647 __anonCompField_bpf_prog_aux_149 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_649 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_649 __anonCompField_bpf_cgroup_storage_151 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_674 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_674 __anonCompField_netlink_callback_154 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_679 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_680 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_682 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_678 {
   struct __anonstruct_679 __anonCompField___anonunion_678_156 ;
   struct __anonstruct_680 __anonCompField___anonunion_678_157 ;
   struct __anonstruct_681 __anonCompField___anonunion_678_158 ;
   struct __anonstruct_xsk_682 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_678 __anonCompField_netdev_bpf_159 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14737 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14738 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_683 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_684 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_683 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14737 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14738 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_684 __anonCompField_net_device_160 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
   struct netlink_ext_ack *extack ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 823 
struct gpio_desc;
#line 824 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_15404 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_15404 phy_interface_t;
#line 186 
struct phylink;
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   int state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};
#line 138 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_702 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_request {
   int type ;
   union __anonunion_702 __anonCompField_ptp_clock_request_161 ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfine)(struct ptp_clock_info *, long ) ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*gettimex64)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *) ;
   int (*getcrosststamp)(struct ptp_clock_info *, struct system_device_crosststamp *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
   long (*do_aux_work)(struct ptp_clock_info *) ;
};
#line 144 
struct ptp_clock;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct cyclecounter {
   u64 (*read)(struct cyclecounter *) ;
   u64 mask ;
   u32 mult ;
   u32 shift ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct timecounter {
   struct cyclecounter *cc ;
   u64 cycle_last ;
   u64 nsec ;
   u64 mask ;
   u64 frac ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 161 
struct xgbe_prv_data;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_packet_data {
   struct sk_buff *skb ;
   unsigned int attributes ;
   unsigned int errors ;
   unsigned int rdesc_count ;
   unsigned int length ;
   unsigned int header_len ;
   unsigned int tcp_header_len ;
   unsigned int tcp_payload_len ;
   unsigned short mss ;
   unsigned short vlan_ctag ;
   u64 rx_tstamp ;
   u32 rss_hash ;
   enum pkt_hash_types rss_hash_type ;
   unsigned int tx_packets ;
   unsigned int tx_bytes ;
};
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_ring_desc {
   __le32 desc0 ;
   __le32 desc1 ;
   __le32 desc2 ;
   __le32 desc3 ;
};
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_page_alloc {
   struct page *pages ;
   unsigned int pages_len ;
   unsigned int pages_offset ;
   dma_addr_t pages_dma ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_buffer_data {
   struct xgbe_page_alloc pa ;
   struct xgbe_page_alloc pa_unmap ;
   dma_addr_t dma_base ;
   unsigned long dma_off ;
   unsigned int dma_len ;
};
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_tx_ring_data {
   unsigned int packets ;
   unsigned int bytes ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_rx_ring_data {
   struct xgbe_buffer_data hdr ;
   struct xgbe_buffer_data buf ;
   unsigned short hdr_len ;
   unsigned short len ;
};
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct __anonstruct_state_704 {
   struct sk_buff *skb ;
   unsigned int len ;
   unsigned int error ;
};
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_ring_data {
   struct xgbe_ring_desc *rdesc ;
   dma_addr_t rdesc_dma ;
   struct sk_buff *skb ;
   dma_addr_t skb_dma ;
   unsigned int skb_dma_len ;
   struct xgbe_tx_ring_data tx ;
   struct xgbe_rx_ring_data rx ;
   unsigned int mapped_as_page ;
   unsigned int state_saved ;
   struct __anonstruct_state_704 state ;
};
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct __anonstruct_tx_706 {
   unsigned int queue_stopped ;
   unsigned int xmit_more ;
   unsigned short cur_mss ;
   unsigned short cur_vlan_ctag ;
};
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
union __anonunion_705 {
   struct __anonstruct_tx_706 tx ;
};
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_ring {
   spinlock_t lock ;
   struct xgbe_packet_data packet_data ;
   struct xgbe_ring_desc *rdesc ;
   dma_addr_t rdesc_dma ;
   unsigned int rdesc_count ;
   struct xgbe_ring_data *rdata ;
   struct xgbe_page_alloc rx_hdr_pa ;
   struct xgbe_page_alloc rx_buf_pa ;
   int node ;
   unsigned int cur ;
   unsigned int dirty ;
   unsigned int coalesce_count ;
   union __anonunion_705 __anonCompField_xgbe_ring_163 ;
} __attribute__((__aligned__(64)));
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_channel {
   char name[16U] ;
   struct xgbe_prv_data *pdata ;
   unsigned int queue_index ;
   void *dma_regs ;
   int dma_irq ;
   char dma_irq_name[48U] ;
   struct napi_struct napi ;
   unsigned int curr_ier ;
   unsigned int saved_ier ;
   unsigned int tx_timer_active ;
   struct timer_list tx_timer ;
   struct xgbe_ring *tx_ring ;
   struct xgbe_ring *rx_ring ;
   int node ;
   cpumask_t affinity_mask ;
} __attribute__((__aligned__(64)));
#line 532 
enum xgbe_int {
    XGMAC_INT_DMA_CH_SR_TI = 0,
    XGMAC_INT_DMA_CH_SR_TPS = 1,
    XGMAC_INT_DMA_CH_SR_TBU = 2,
    XGMAC_INT_DMA_CH_SR_RI = 3,
    XGMAC_INT_DMA_CH_SR_RBU = 4,
    XGMAC_INT_DMA_CH_SR_RPS = 5,
    XGMAC_INT_DMA_CH_SR_TI_RI = 6,
    XGMAC_INT_DMA_CH_SR_FBE = 7,
    XGMAC_INT_DMA_ALL = 8
};
#line 549 
enum xgbe_ecc_sec {
    XGBE_ECC_SEC_TX = 0,
    XGBE_ECC_SEC_RX = 1,
    XGBE_ECC_SEC_DESC = 2
};
#line 562 
enum xgbe_xpcs_access {
    XGBE_XPCS_ACCESS_V1 = 0,
    XGBE_XPCS_ACCESS_V2 = 1
};
#line 567 
enum xgbe_an_mode {
    XGBE_AN_MODE_CL73 = 0,
    XGBE_AN_MODE_CL73_REDRV = 1,
    XGBE_AN_MODE_CL37 = 2,
    XGBE_AN_MODE_CL37_SGMII = 3,
    XGBE_AN_MODE_NONE = 4
};
#line 575 
enum xgbe_an {
    XGBE_AN_READY = 0,
    XGBE_AN_PAGE_RECEIVED = 1,
    XGBE_AN_INCOMPAT_LINK = 2,
    XGBE_AN_COMPLETE = 3,
    XGBE_AN_NO_LINK = 4,
    XGBE_AN_ERROR = 5
};
#line 584 
enum xgbe_rx {
    XGBE_RX_BPA = 0,
    XGBE_RX_XNP = 1,
    XGBE_RX_COMPLETE = 2,
    XGBE_RX_ERROR = 3
};
#line 591 
enum xgbe_mode {
    XGBE_MODE_KX_1000 = 0,
    XGBE_MODE_KX_2500 = 1,
    XGBE_MODE_KR = 2,
    XGBE_MODE_X = 3,
    XGBE_MODE_SGMII_100 = 4,
    XGBE_MODE_SGMII_1000 = 5,
    XGBE_MODE_SFI = 6,
    XGBE_MODE_UNKNOWN = 7
};
#line 607 
enum xgbe_mdio_mode {
    XGBE_MDIO_MODE_NONE = 0,
    XGBE_MDIO_MODE_CL22 = 1,
    XGBE_MDIO_MODE_CL45 = 2
};
#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_phy {
   struct ethtool_link_ksettings lks ;
   int address ;
   int autoneg ;
   int speed ;
   int duplex ;
   int link ;
   int pause_autoneg ;
   int tx_pause ;
   int rx_pause ;
};
#line 629 
enum xgbe_i2c_cmd {
    XGBE_I2C_CMD_READ = 0,
    XGBE_I2C_CMD_WRITE = 1
};
#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_i2c_op {
   enum xgbe_i2c_cmd cmd ;
   unsigned int target ;
   void *buf ;
   unsigned int len ;
};
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_i2c_op_state {
   struct xgbe_i2c_op *op ;
   unsigned int tx_len ;
   unsigned char *tx_buf ;
   unsigned int rx_len ;
   unsigned char *rx_buf ;
   unsigned int tx_abort_source ;
   int ret ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_i2c {
   unsigned int started ;
   unsigned int max_speed_mode ;
   unsigned int rx_fifo_size ;
   unsigned int tx_fifo_size ;
   struct xgbe_i2c_op_state op_state ;
};
#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_mmc_stats {
   u64 txoctetcount_gb ;
   u64 txframecount_gb ;
   u64 txbroadcastframes_g ;
   u64 txmulticastframes_g ;
   u64 tx64octets_gb ;
   u64 tx65to127octets_gb ;
   u64 tx128to255octets_gb ;
   u64 tx256to511octets_gb ;
   u64 tx512to1023octets_gb ;
   u64 tx1024tomaxoctets_gb ;
   u64 txunicastframes_gb ;
   u64 txmulticastframes_gb ;
   u64 txbroadcastframes_gb ;
   u64 txunderflowerror ;
   u64 txoctetcount_g ;
   u64 txframecount_g ;
   u64 txpauseframes ;
   u64 txvlanframes_g ;
   u64 rxframecount_gb ;
   u64 rxoctetcount_gb ;
   u64 rxoctetcount_g ;
   u64 rxbroadcastframes_g ;
   u64 rxmulticastframes_g ;
   u64 rxcrcerror ;
   u64 rxrunterror ;
   u64 rxjabbererror ;
   u64 rxundersize_g ;
   u64 rxoversize_g ;
   u64 rx64octets_gb ;
   u64 rx65to127octets_gb ;
   u64 rx128to255octets_gb ;
   u64 rx256to511octets_gb ;
   u64 rx512to1023octets_gb ;
   u64 rx1024tomaxoctets_gb ;
   u64 rxunicastframes_g ;
   u64 rxlengtherror ;
   u64 rxoutofrangetype ;
   u64 rxpauseframes ;
   u64 rxfifooverflow ;
   u64 rxvlanframes_gb ;
   u64 rxwatchdogerror ;
};
#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_ext_stats {
   u64 tx_tso_packets ;
   u64 rx_split_header_packets ;
   u64 rx_buffer_unavailable ;
   u64 txq_packets[16U] ;
   u64 txq_bytes[16U] ;
   u64 rxq_packets[16U] ;
   u64 rxq_bytes[16U] ;
   u64 tx_vxlan_packets ;
   u64 rx_vxlan_packets ;
   u64 rx_csum_errors ;
   u64 rx_vxlan_csum_errors ;
};
#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_hw_if {
   int (*tx_complete)(struct xgbe_ring_desc *) ;
   int (*set_mac_address)(struct xgbe_prv_data *, u8 *) ;
   int (*config_rx_mode)(struct xgbe_prv_data *) ;
   int (*enable_rx_csum)(struct xgbe_prv_data *) ;
   int (*disable_rx_csum)(struct xgbe_prv_data *) ;
   int (*enable_rx_vlan_stripping)(struct xgbe_prv_data *) ;
   int (*disable_rx_vlan_stripping)(struct xgbe_prv_data *) ;
   int (*enable_rx_vlan_filtering)(struct xgbe_prv_data *) ;
   int (*disable_rx_vlan_filtering)(struct xgbe_prv_data *) ;
   int (*update_vlan_hash_table)(struct xgbe_prv_data *) ;
   int (*read_mmd_regs)(struct xgbe_prv_data *, int , int ) ;
   void (*write_mmd_regs)(struct xgbe_prv_data *, int , int , int ) ;
   int (*set_speed)(struct xgbe_prv_data *, int ) ;
   int (*set_ext_mii_mode)(struct xgbe_prv_data *, unsigned int , enum xgbe_mdio_mode ) ;
   int (*read_ext_mii_regs)(struct xgbe_prv_data *, int , int ) ;
   int (*write_ext_mii_regs)(struct xgbe_prv_data *, int , int , u16 ) ;
   int (*set_gpio)(struct xgbe_prv_data *, unsigned int ) ;
   int (*clr_gpio)(struct xgbe_prv_data *, unsigned int ) ;
   void (*enable_tx)(struct xgbe_prv_data *) ;
   void (*disable_tx)(struct xgbe_prv_data *) ;
   void (*enable_rx)(struct xgbe_prv_data *) ;
   void (*disable_rx)(struct xgbe_prv_data *) ;
   void (*powerup_tx)(struct xgbe_prv_data *) ;
   void (*powerdown_tx)(struct xgbe_prv_data *) ;
   void (*powerup_rx)(struct xgbe_prv_data *) ;
   void (*powerdown_rx)(struct xgbe_prv_data *) ;
   int (*init)(struct xgbe_prv_data *) ;
   int (*exit)(struct xgbe_prv_data *) ;
   int (*enable_int)(struct xgbe_channel *, enum xgbe_int ) ;
   int (*disable_int)(struct xgbe_channel *, enum xgbe_int ) ;
   void (*dev_xmit)(struct xgbe_channel *) ;
   int (*dev_read)(struct xgbe_channel *) ;
   void (*tx_desc_init)(struct xgbe_channel *) ;
   void (*rx_desc_init)(struct xgbe_channel *) ;
   void (*tx_desc_reset)(struct xgbe_ring_data *) ;
   void (*rx_desc_reset)(struct xgbe_prv_data *, struct xgbe_ring_data *, unsigned int ) ;
   int (*is_last_desc)(struct xgbe_ring_desc *) ;
   int (*is_context_desc)(struct xgbe_ring_desc *) ;
   void (*tx_start_xmit)(struct xgbe_channel *, struct xgbe_ring *) ;
   int (*config_tx_flow_control)(struct xgbe_prv_data *) ;
   int (*config_rx_flow_control)(struct xgbe_prv_data *) ;
   int (*config_rx_coalesce)(struct xgbe_prv_data *) ;
   int (*config_tx_coalesce)(struct xgbe_prv_data *) ;
   unsigned int (*usec_to_riwt)(struct xgbe_prv_data *, unsigned int ) ;
   unsigned int (*riwt_to_usec)(struct xgbe_prv_data *, unsigned int ) ;
   int (*config_rx_threshold)(struct xgbe_prv_data *, unsigned int ) ;
   int (*config_tx_threshold)(struct xgbe_prv_data *, unsigned int ) ;
   int (*config_rsf_mode)(struct xgbe_prv_data *, unsigned int ) ;
   int (*config_tsf_mode)(struct xgbe_prv_data *, unsigned int ) ;
   int (*config_osp_mode)(struct xgbe_prv_data *) ;
   void (*rx_mmc_int)(struct xgbe_prv_data *) ;
   void (*tx_mmc_int)(struct xgbe_prv_data *) ;
   void (*read_mmc_stats)(struct xgbe_prv_data *) ;
   int (*config_tstamp)(struct xgbe_prv_data *, unsigned int ) ;
   void (*update_tstamp_addend)(struct xgbe_prv_data *, unsigned int ) ;
   void (*set_tstamp_time)(struct xgbe_prv_data *, unsigned int , unsigned int ) ;
   u64 (*get_tstamp_time)(struct xgbe_prv_data *) ;
   u64 (*get_tx_tstamp)(struct xgbe_prv_data *) ;
   void (*config_tc)(struct xgbe_prv_data *) ;
   void (*config_dcb_tc)(struct xgbe_prv_data *) ;
   void (*config_dcb_pfc)(struct xgbe_prv_data *) ;
   int (*enable_rss)(struct xgbe_prv_data *) ;
   int (*disable_rss)(struct xgbe_prv_data *) ;
   int (*set_rss_hash_key)(struct xgbe_prv_data *, u8 *) ;
   int (*set_rss_lookup_table)(struct xgbe_prv_data *, u32 *) ;
   void (*disable_ecc_ded)(struct xgbe_prv_data *) ;
   void (*disable_ecc_sec)(struct xgbe_prv_data *, enum xgbe_ecc_sec ) ;
   void (*enable_vxlan)(struct xgbe_prv_data *) ;
   void (*disable_vxlan)(struct xgbe_prv_data *) ;
   void (*set_vxlan_id)(struct xgbe_prv_data *) ;
};
#line 845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_phy_impl_if {
   int (*init)(struct xgbe_prv_data *) ;
   void (*exit)(struct xgbe_prv_data *) ;
   int (*reset)(struct xgbe_prv_data *) ;
   int (*start)(struct xgbe_prv_data *) ;
   void (*stop)(struct xgbe_prv_data *) ;
   int (*link_status)(struct xgbe_prv_data *, int *) ;
   bool (*valid_speed)(struct xgbe_prv_data *, int ) ;
   bool (*use_mode)(struct xgbe_prv_data *, enum xgbe_mode ) ;
   void (*set_mode)(struct xgbe_prv_data *, enum xgbe_mode ) ;
   enum xgbe_mode (*get_mode)(struct xgbe_prv_data *, int ) ;
   enum xgbe_mode (*switch_mode)(struct xgbe_prv_data *) ;
   enum xgbe_mode (*cur_mode)(struct xgbe_prv_data *) ;
   enum xgbe_an_mode (*an_mode)(struct xgbe_prv_data *) ;
   int (*an_config)(struct xgbe_prv_data *) ;
   void (*an_advertising)(struct xgbe_prv_data *, struct ethtool_link_ksettings *) ;
   enum xgbe_mode (*an_outcome)(struct xgbe_prv_data *) ;
   void (*an_pre)(struct xgbe_prv_data *) ;
   void (*an_post)(struct xgbe_prv_data *) ;
   void (*kr_training_pre)(struct xgbe_prv_data *) ;
   void (*kr_training_post)(struct xgbe_prv_data *) ;
   int (*module_info)(struct xgbe_prv_data *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct xgbe_prv_data *, struct ethtool_eeprom *, u8 *) ;
};
#line 900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_phy_if {
   int (*phy_init)(struct xgbe_prv_data *) ;
   void (*phy_exit)(struct xgbe_prv_data *) ;
   int (*phy_reset)(struct xgbe_prv_data *) ;
   int (*phy_start)(struct xgbe_prv_data *) ;
   void (*phy_stop)(struct xgbe_prv_data *) ;
   void (*phy_status)(struct xgbe_prv_data *) ;
   int (*phy_config_aneg)(struct xgbe_prv_data *) ;
   bool (*phy_valid_speed)(struct xgbe_prv_data *, int ) ;
   irqreturn_t (*an_isr)(struct xgbe_prv_data *) ;
   int (*module_info)(struct xgbe_prv_data *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct xgbe_prv_data *, struct ethtool_eeprom *, u8 *) ;
   struct xgbe_phy_impl_if phy_impl ;
};
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_i2c_if {
   int (*i2c_init)(struct xgbe_prv_data *) ;
   int (*i2c_start)(struct xgbe_prv_data *) ;
   void (*i2c_stop)(struct xgbe_prv_data *) ;
   int (*i2c_xfer)(struct xgbe_prv_data *, struct xgbe_i2c_op *) ;
   irqreturn_t (*i2c_isr)(struct xgbe_prv_data *) ;
};
#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_desc_if {
   int (*alloc_ring_resources)(struct xgbe_prv_data *) ;
   void (*free_ring_resources)(struct xgbe_prv_data *) ;
   int (*map_tx_skb)(struct xgbe_channel *, struct sk_buff *) ;
   int (*map_rx_buffer)(struct xgbe_prv_data *, struct xgbe_ring *, struct xgbe_ring_data *) ;
   void (*unmap_rdata)(struct xgbe_prv_data *, struct xgbe_ring_data *) ;
   void (*wrapper_tx_desc_init)(struct xgbe_prv_data *) ;
   void (*wrapper_rx_desc_init)(struct xgbe_prv_data *) ;
};
#line 959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_hw_features {
   unsigned int version ;
   unsigned int gmii ;
   unsigned int vlhash ;
   unsigned int sma ;
   unsigned int rwk ;
   unsigned int mgk ;
   unsigned int mmc ;
   unsigned int aoe ;
   unsigned int ts ;
   unsigned int eee ;
   unsigned int tx_coe ;
   unsigned int rx_coe ;
   unsigned int addn_mac ;
   unsigned int ts_src ;
   unsigned int sa_vlan_ins ;
   unsigned int vxn ;
   unsigned int rx_fifo_size ;
   unsigned int tx_fifo_size ;
   unsigned int adv_ts_hi ;
   unsigned int dma_width ;
   unsigned int dcb ;
   unsigned int sph ;
   unsigned int tso ;
   unsigned int dma_debug ;
   unsigned int rss ;
   unsigned int tc_cnt ;
   unsigned int hash_table_size ;
   unsigned int l3l4_filter_num ;
   unsigned int rx_q_cnt ;
   unsigned int tx_q_cnt ;
   unsigned int rx_ch_cnt ;
   unsigned int tx_ch_cnt ;
   unsigned int pps_out_num ;
   unsigned int aux_snap_num ;
};
#line 1003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_version_data {
   void (*init_function_ptrs_phy_impl)(struct xgbe_phy_if *) ;
   enum xgbe_xpcs_access xpcs_access ;
   unsigned int mmc_64bit ;
   unsigned int tx_max_fifo_size ;
   unsigned int rx_max_fifo_size ;
   unsigned int tx_tstamp_workaround ;
   unsigned int ecc_support ;
   unsigned int i2c_support ;
   unsigned int irq_reissue_support ;
   unsigned int tx_desc_prefetch ;
   unsigned int rx_desc_prefetch ;
   unsigned int an_cdr_workaround ;
};
#line 1024 
struct clk;
#line 1024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_prv_data {
   struct net_device *netdev ;
   struct pci_dev *pcidev ;
   struct platform_device *platdev ;
   struct acpi_device *adev ;
   struct device *dev ;
   struct platform_device *phy_platdev ;
   struct device *phy_dev ;
   struct xgbe_version_data *vdata ;
   unsigned int use_acpi ;
   void *xgmac_regs ;
   void *xpcs_regs ;
   void *rxtx_regs ;
   void *sir0_regs ;
   void *sir1_regs ;
   void *xprop_regs ;
   void *xi2c_regs ;
   unsigned int pp0 ;
   unsigned int pp1 ;
   unsigned int pp2 ;
   unsigned int pp3 ;
   unsigned int pp4 ;
   spinlock_t lock ;
   spinlock_t xpcs_lock ;
   unsigned int xpcs_window_def_reg ;
   unsigned int xpcs_window_sel_reg ;
   unsigned int xpcs_window ;
   unsigned int xpcs_window_size ;
   unsigned int xpcs_window_mask ;
   struct mutex rss_mutex ;
   unsigned long dev_state ;
   unsigned long tx_sec_period ;
   unsigned long tx_ded_period ;
   unsigned long rx_sec_period ;
   unsigned long rx_ded_period ;
   unsigned long desc_sec_period ;
   unsigned long desc_ded_period ;
   unsigned int tx_sec_count ;
   unsigned int tx_ded_count ;
   unsigned int rx_sec_count ;
   unsigned int rx_ded_count ;
   unsigned int desc_ded_count ;
   unsigned int desc_sec_count ;
   int dev_irq ;
   int ecc_irq ;
   int i2c_irq ;
   int channel_irq[16U] ;
   unsigned int per_channel_irq ;
   unsigned int irq_count ;
   unsigned int channel_irq_count ;
   unsigned int channel_irq_mode ;
   char ecc_name[48U] ;
   struct xgbe_hw_if hw_if ;
   struct xgbe_phy_if phy_if ;
   struct xgbe_desc_if desc_if ;
   struct xgbe_i2c_if i2c_if ;
   unsigned int coherent ;
   unsigned int arcr ;
   unsigned int awcr ;
   unsigned int awarcr ;
   struct workqueue_struct *dev_workqueue ;
   struct work_struct service_work ;
   struct timer_list service_timer ;
   struct xgbe_channel *channel[16U] ;
   unsigned int tx_max_channel_count ;
   unsigned int rx_max_channel_count ;
   unsigned int channel_count ;
   unsigned int tx_ring_count ;
   unsigned int tx_desc_count ;
   unsigned int rx_ring_count ;
   unsigned int rx_desc_count ;
   unsigned int new_tx_ring_count ;
   unsigned int new_rx_ring_count ;
   unsigned int tx_max_q_count ;
   unsigned int rx_max_q_count ;
   unsigned int tx_q_count ;
   unsigned int rx_q_count ;
   unsigned int blen ;
   unsigned int pbl ;
   unsigned int aal ;
   unsigned int rd_osr_limit ;
   unsigned int wr_osr_limit ;
   unsigned int tx_sf_mode ;
   unsigned int tx_threshold ;
   unsigned int tx_osp_mode ;
   unsigned int tx_max_fifo_size ;
   unsigned int rx_sf_mode ;
   unsigned int rx_threshold ;
   unsigned int rx_max_fifo_size ;
   unsigned int tx_usecs ;
   unsigned int tx_frames ;
   unsigned int rx_riwt ;
   unsigned int rx_usecs ;
   unsigned int rx_frames ;
   unsigned int rx_buf_size ;
   unsigned int pause_autoneg ;
   unsigned int tx_pause ;
   unsigned int rx_pause ;
   unsigned int rx_rfa[16U] ;
   unsigned int rx_rfd[16U] ;
   u8 rss_key[40U] ;
   u32 rss_table[256U] ;
   u32 rss_options ;
   unsigned int vxlan_port_set ;
   unsigned int vxlan_offloads_set ;
   unsigned int vxlan_force_disable ;
   unsigned int vxlan_port_count ;
   struct list_head vxlan_ports ;
   u16 vxlan_port ;
   netdev_features_t vxlan_features ;
   unsigned char mac_addr[6U] ;
   netdev_features_t netdev_features ;
   struct napi_struct napi ;
   struct xgbe_mmc_stats mmc_stats ;
   struct xgbe_ext_stats ext_stats ;
   unsigned long active_vlans[64U] ;
   struct clk *sysclk ;
   unsigned long sysclk_rate ;
   struct clk *ptpclk ;
   unsigned long ptpclk_rate ;
   spinlock_t tstamp_lock ;
   struct ptp_clock_info ptp_clock_info ;
   struct ptp_clock *ptp_clock ;
   struct hwtstamp_config tstamp_config ;
   struct cyclecounter tstamp_cc ;
   struct timecounter tstamp_tc ;
   unsigned int tstamp_addend ;
   struct work_struct tx_tstamp_work ;
   struct sk_buff *tx_tstamp_skb ;
   u64 tx_tstamp ;
   struct ieee_ets *ets ;
   struct ieee_pfc *pfc ;
   unsigned int q2tc_map[16U] ;
   unsigned int prio2q_map[8U] ;
   unsigned int pfcq[16U] ;
   unsigned int pfc_rfa ;
   u8 num_tcs ;
   struct xgbe_hw_features hw_feat ;
   struct work_struct restart_work ;
   struct work_struct stopdev_work ;
   unsigned int power_down ;
   u32 msg_enable ;
   phy_interface_t phy_mode ;
   int phy_link ;
   int phy_speed ;
   unsigned int phy_started ;
   void *phy_data ;
   struct xgbe_phy phy ;
   int mdio_mmd ;
   unsigned long link_check ;
   struct completion mdio_complete ;
   unsigned int kr_redrv ;
   char an_name[48U] ;
   struct workqueue_struct *an_workqueue ;
   int an_irq ;
   struct work_struct an_irq_work ;
   unsigned int an_int ;
   unsigned int an_status ;
   struct mutex an_mutex ;
   enum xgbe_an an_result ;
   enum xgbe_an an_state ;
   enum xgbe_rx kr_state ;
   enum xgbe_rx kx_state ;
   struct work_struct an_work ;
   unsigned int an_again ;
   unsigned int an_supported ;
   unsigned int parallel_detect ;
   unsigned int fec_ability ;
   unsigned long an_start ;
   enum xgbe_an_mode an_mode ;
   struct xgbe_i2c i2c ;
   struct mutex i2c_mutex ;
   struct completion i2c_complete ;
   char i2c_name[48U] ;
   unsigned int lpm_ctrl ;
   unsigned int isr_as_tasklet ;
   struct tasklet_struct tasklet_dev ;
   struct tasklet_struct tasklet_ecc ;
   struct tasklet_struct tasklet_i2c ;
   struct tasklet_struct tasklet_an ;
   struct dentry *xgbe_debugfs ;
   unsigned int debugfs_xgmac_reg ;
   unsigned int debugfs_xpcs_mmd ;
   unsigned int debugfs_xpcs_reg ;
   unsigned int debugfs_xprop_reg ;
   unsigned int debugfs_xi2c_reg ;
   bool debugfs_an_cdr_workaround ;
   bool debugfs_an_cdr_track_early ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
enum xgbe_port_mode {
    XGBE_PORT_MODE_RSVD = 0,
    XGBE_PORT_MODE_BACKPLANE = 1,
    XGBE_PORT_MODE_BACKPLANE_2500 = 2,
    XGBE_PORT_MODE_1000BASE_T = 3,
    XGBE_PORT_MODE_1000BASE_X = 4,
    XGBE_PORT_MODE_NBASE_T = 5,
    XGBE_PORT_MODE_10GBASE_T = 6,
    XGBE_PORT_MODE_10GBASE_R = 7,
    XGBE_PORT_MODE_SFP = 8,
    XGBE_PORT_MODE_MAX = 9
};
#line 1362 
enum xgbe_conn_type {
    XGBE_CONN_TYPE_NONE = 0,
    XGBE_CONN_TYPE_SFP = 1,
    XGBE_CONN_TYPE_MDIO = 2,
    XGBE_CONN_TYPE_RSVD1 = 3,
    XGBE_CONN_TYPE_BACKPLANE = 4,
    XGBE_CONN_TYPE_MAX = 5
};
#line 1371 
enum xgbe_sfp_comm {
    XGBE_SFP_COMM_DIRECT = 0,
    XGBE_SFP_COMM_PCA9545 = 1
};
#line 1376 
enum xgbe_sfp_cable {
    XGBE_SFP_CABLE_UNKNOWN = 0,
    XGBE_SFP_CABLE_ACTIVE = 1,
    XGBE_SFP_CABLE_PASSIVE = 2
};
#line 1382 
enum xgbe_sfp_base {
    XGBE_SFP_BASE_UNKNOWN = 0,
    XGBE_SFP_BASE_1000_T = 1,
    XGBE_SFP_BASE_1000_SX = 2,
    XGBE_SFP_BASE_1000_LX = 3,
    XGBE_SFP_BASE_1000_CX = 4,
    XGBE_SFP_BASE_10000_SR = 5,
    XGBE_SFP_BASE_10000_LR = 6,
    XGBE_SFP_BASE_10000_LRM = 7,
    XGBE_SFP_BASE_10000_ER = 8,
    XGBE_SFP_BASE_10000_CR = 9
};
#line 1395 
enum xgbe_sfp_speed {
    XGBE_SFP_SPEED_UNKNOWN = 0,
    XGBE_SFP_SPEED_100_1000 = 1,
    XGBE_SFP_SPEED_1000 = 2,
    XGBE_SFP_SPEED_10000 = 3
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
struct xgbe_sfp_eeprom {
   u8 base[64U] ;
   u8 extd[32U] ;
   u8 vendor[32U] ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
union __anonunion_u_1413 {
   char vendor[17U] ;
   char partno[17U] ;
   char rev[5U] ;
   char serno[17U] ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
struct xgbe_sfp_ascii {
   union __anonunion_u_1413 u ;
};
#line 294 
enum xgbe_mdio_reset {
    XGBE_MDIO_RESET_NONE = 0,
    XGBE_MDIO_RESET_I2C_GPIO = 1,
    XGBE_MDIO_RESET_INT_GPIO = 2,
    XGBE_MDIO_RESET_MAX = 3
};
#line 313 
enum xgbe_phy_redrv_mode {
    XGBE_PHY_REDRV_MODE_CX = 5,
    XGBE_PHY_REDRV_MODE_SR = 9
};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
struct xgbe_phy_data {
   enum xgbe_port_mode port_mode ;
   unsigned int port_id ;
   unsigned int port_speeds ;
   enum xgbe_conn_type conn_type ;
   enum xgbe_mode cur_mode ;
   enum xgbe_mode start_mode ;
   unsigned int rrc_count ;
   unsigned int mdio_addr ;
   enum xgbe_sfp_comm sfp_comm ;
   unsigned int sfp_mux_address ;
   unsigned int sfp_mux_channel ;
   unsigned int sfp_gpio_address ;
   unsigned int sfp_gpio_mask ;
   unsigned int sfp_gpio_inputs ;
   unsigned int sfp_gpio_rx_los ;
   unsigned int sfp_gpio_tx_fault ;
   unsigned int sfp_gpio_mod_absent ;
   unsigned int sfp_gpio_rate_select ;
   unsigned int sfp_rx_los ;
   unsigned int sfp_tx_fault ;
   unsigned int sfp_mod_absent ;
   unsigned int sfp_changed ;
   unsigned int sfp_phy_avail ;
   unsigned int sfp_cable_len ;
   enum xgbe_sfp_base sfp_base ;
   enum xgbe_sfp_cable sfp_cable ;
   enum xgbe_sfp_speed sfp_speed ;
   struct xgbe_sfp_eeprom sfp_eeprom ;
   enum xgbe_mdio_mode phydev_mode ;
   struct mii_bus *mii ;
   struct phy_device *phydev ;
   enum xgbe_mdio_reset mdio_reset ;
   unsigned int mdio_reset_addr ;
   unsigned int mdio_reset_gpio ;
   unsigned int redrv ;
   unsigned int redrv_if ;
   unsigned int redrv_addr ;
   unsigned int redrv_lane ;
   unsigned int redrv_model ;
   unsigned int phy_cdr_notrack ;
   unsigned int phy_cdr_delay ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
struct xgbe_phy_data_0 {
   unsigned int speed_set ;
   u32 blwc[3U] ;
   u32 cdr_rate[3U] ;
   u32 pq_skew[3U] ;
   u32 tx_amp[3U] ;
   u32 dfe_tap_cfg[3U] ;
   u32 dfe_tap_ena[3U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3552 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3554 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3556 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_3606 {
   int __val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 288 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_3973 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_3972 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_3973 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_3972 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
enum kmalloc_cache_type {
    KMALLOC_NORMAL = 0,
    KMALLOC_RECLAIM = 1,
    KMALLOC_DMA = 2,
    NR_KMALLOC_TYPES = 3
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9626 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9626 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_4029 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_4030 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_4031 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_4032 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_4029 ports ;
   struct __anonstruct_icmpt_4030 icmpt ;
   struct __anonstruct_dnports_4031 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_4032 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_4033 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_4033 u ;
} __attribute__((__aligned__(8)));
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 973 
struct rtable;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_4080 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_4082 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_4190 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_4189 {
   struct __anonstruct_4190 __anonCompField___anonunion_4189_152 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_4189 __anonCompField_sock_cgroup_data_153 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_mqprio_qopt {
   __u8 num_tc ;
   __u8 prio_tc_map[16U] ;
   __u8 hw ;
   __u16 count[16U] ;
   __u16 offset[16U] ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_4230 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_4230 __anonCompField_bdi_writeback_161 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_4231 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_4231 __anonCompField_bio_162 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_4234 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_4235 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_4237 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_4238 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_4236 {
   struct __anonstruct_elv_4237 elv ;
   struct __anonstruct_flush_4238 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_4239 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_4234 __anonCompField_request_163 ;
   union __anonunion_4235 __anonCompField_request_164 ;
   union __anonunion_4236 __anonCompField_request_165 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_4239 __anonCompField_request_166 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_4266 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_4265 {
   void *validation_data ;
   struct __anonstruct_4266 __anonCompField___anonunion_4265_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_4265 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_4340 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_4341 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_4339 {
   struct __anonstruct_4340 __anonCompField___anonunion_4339_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_4341 __anonCompField___anonunion_4339_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_4339 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_4343 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_4343 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_4356 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_4356 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_metrics {
   u32 metrics[17U] ;
   refcount_t refcnt ;
} __attribute__((__aligned__(4)));
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_4378 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_4378 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_4380 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4379 {
   __addrpair skc_addrpair ;
   struct __anonstruct_4380 __anonCompField___anonunion_4379_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4381 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_4383 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4382 {
   __portpair skc_portpair ;
   struct __anonstruct_4383 __anonCompField___anonunion_4382_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4384 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4385 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4386 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4387 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4388 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_4379 __anonCompField_sock_common_177 ;
   union __anonunion_4381 __anonCompField_sock_common_178 ;
   union __anonunion_4382 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_4384 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_4385 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_4386 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_4387 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_4388 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_4389 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4390 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_4391 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_4389 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_4390 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_4391 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_4426 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_4426 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_4500 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_4499 {
   struct __anonstruct_s_4500 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_4499 __anonCompField_net_generic_190 ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 261 
struct fib6_nh;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_exception {
   struct fib_nh_exception *fnhe_next ;
   int fnhe_genid ;
   __be32 fnhe_daddr ;
   u32 fnhe_pmtu ;
   bool fnhe_mtu_locked ;
   __be32 fnhe_gw ;
   unsigned long fnhe_expires ;
   struct rtable *fnhe_rth_input ;
   struct rtable *fnhe_rth_output ;
   unsigned long fnhe_stamp ;
   struct callback_head rcu ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fnhe_hash_bucket {
   struct fib_nh_exception *chain ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
union __anonunion_nhc_gw_4518 {
   __be32 ipv4 ;
   struct in6_addr ipv6 ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_common {
   struct net_device *nhc_dev ;
   int nhc_oif ;
   unsigned char nhc_scope ;
   u8 nhc_family ;
   u8 nhc_gw_family ;
   unsigned char nhc_flags ;
   struct lwtunnel_state *nhc_lwtstate ;
   union __anonunion_nhc_gw_4518 nhc_gw ;
   int nhc_weight ;
   atomic_t nhc_upper_bound ;
   struct rtable **nhc_pcpu_rth_output ;
   struct rtable *nhc_rth_input ;
   struct fnhe_hash_bucket *nhc_exceptions ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh {
   struct fib_nh_common nh_common ;
   struct hlist_node nh_hash ;
   struct fib_info *nh_parent ;
   __u32 nh_tclassid ;
   __be32 nh_saddr ;
   int nh_saddr_genid ;
};
#line 113 
struct nexthop;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info {
   struct hlist_node fib_hash ;
   struct hlist_node fib_lhash ;
   struct list_head nh_list ;
   struct net *fib_net ;
   int fib_treeref ;
   refcount_t fib_clntref ;
   unsigned int fib_flags ;
   unsigned char fib_dead ;
   unsigned char fib_protocol ;
   unsigned char fib_scope ;
   unsigned char fib_type ;
   __be32 fib_prefsrc ;
   u32 fib_tb_id ;
   u32 fib_priority ;
   struct dst_metrics *fib_metrics ;
   int fib_nhs ;
   bool fib_nh_is_v6 ;
   bool nh_updated ;
   struct nexthop *nh ;
   struct callback_head rcu ;
   struct fib_nh fib_nh[0U] ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/route.h"
struct uncached_list;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
union __anonunion_4527 {
   __be32 rt_gw4 ;
   struct in6_addr rt_gw6 ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   u8 rt_gw_family ;
   union __anonunion_4527 __anonCompField_rtable_195 ;
   u32 rt_mtu_locked : 1 ;
   u32 rt_pmtu : 31 ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lwtunnel.h"
struct lwtunnel_state {
   __u16 type ;
   __u16 flags ;
   __u16 headroom ;
   atomic_t refcnt ;
   int (*orig_output)(struct net *, struct sock *, struct sk_buff *) ;
   int (*orig_input)(struct sk_buff *) ;
   struct callback_head rcu ;
   __u8 data[0U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_node {
   struct fib6_node *parent ;
   struct fib6_node *left ;
   struct fib6_node *right ;
   struct fib6_node *subtree ;
   struct fib6_info *leaf ;
   __u16 fn_bit ;
   __u16 fn_flags ;
   int fn_sernum ;
   struct fib6_info *rr_ptr ;
   struct callback_head rcu ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6key {
   struct in6_addr addr ;
   int plen ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_exception_bucket {
   struct hlist_head chain ;
   int depth ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_nh {
   struct fib_nh_common nh_common ;
   unsigned long last_probe ;
   struct rt6_info **rt6i_pcpu ;
   struct rt6_exception_bucket *rt6i_exception_bucket ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
union __anonunion_4528 {
   struct list_head fib6_siblings ;
   struct list_head nh_list ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_info {
   struct fib6_table *fib6_table ;
   struct fib6_info *fib6_next ;
   struct fib6_node *fib6_node ;
   union __anonunion_4528 __anonCompField_fib6_info_196 ;
   unsigned int fib6_nsiblings ;
   refcount_t fib6_ref ;
   unsigned long expires ;
   struct dst_metrics *fib6_metrics ;
   struct rt6key fib6_dst ;
   u32 fib6_flags ;
   struct rt6key fib6_src ;
   struct rt6key fib6_prefsrc ;
   u32 fib6_metric ;
   u8 fib6_protocol ;
   u8 fib6_type ;
   u8 should_flush : 1 ;
   u8 dst_nocount : 1 ;
   u8 dst_nopolicy : 1 ;
   u8 dst_host : 1 ;
   u8 fib6_destroying : 1 ;
   u8 unused : 3 ;
   struct callback_head rcu ;
   struct nexthop *nh ;
   struct fib6_nh fib6_nh[0U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_info {
   struct dst_entry dst ;
   struct fib6_info *from ;
   struct rt6key rt6i_dst ;
   struct rt6key rt6i_src ;
   struct in6_addr rt6i_gateway ;
   struct inet6_dev *rt6i_idev ;
   u32 rt6i_flags ;
   struct list_head rt6i_uncached ;
   struct uncached_list *rt6i_uncached_list ;
   unsigned short rt6i_nfheader_len ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_statistics {
   __u32 fib_nodes ;
   __u32 fib_route_nodes ;
   __u32 fib_rt_entries ;
   __u32 fib_rt_cache ;
   __u32 fib_discarded_routes ;
   atomic_t fib_rt_alloc ;
   atomic_t fib_rt_uncache ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_table {
   struct hlist_node tb6_hlist ;
   u32 tb6_id ;
   spinlock_t tb6_lock ;
   struct fib6_node tb6_root ;
   struct inet_peer_base tb6_peers ;
   unsigned int flags ;
   unsigned int fib_seq ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/addrconf.h"
struct prefix_info {
   __u8 type ;
   __u8 length ;
   __u8 prefix_len ;
   __u8 reserved : 6 ;
   __u8 autoconf : 1 ;
   __u8 onlink : 1 ;
   __be32 valid ;
   __be32 prefered ;
   __be32 reserved2 ;
   struct in6_addr prefix ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_4542 {
   struct fib_nh_common fib_nhc ;
   struct fib_nh fib_nh ;
   struct fib6_nh fib6_nh ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_info {
   struct hlist_node dev_hash ;
   struct nexthop *nh_parent ;
   u8 family ;
   bool reject_nh ;
   union __anonunion_4542 __anonCompField_nh_info_197 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_grp_entry {
   struct nexthop *nh ;
   u8 weight ;
   atomic_t upper_bound ;
   struct list_head nh_list ;
   struct nexthop *nh_parent ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_group {
   u16 num_nh ;
   bool mpath ;
   bool has_v4 ;
   struct nh_grp_entry nh_entries[0U] ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_4543 {
   struct nh_info *nh_info ;
   struct nh_group *nh_grp ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nexthop {
   struct rb_node rb_node ;
   struct list_head fi_list ;
   struct list_head f6i_list ;
   struct list_head grp_list ;
   struct net *net ;
   u32 id ;
   u8 protocol ;
   u8 nh_flags ;
   bool is_group ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   union __anonunion_4543 __anonCompField_nexthop_198 ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_4569 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_4569 __anonCompField_ip_ra_chain_199 ;
   struct callback_head rcu ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
struct udp_tunnel_info {
   unsigned short type ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 1018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
struct xgbe_vxlan_data {
   struct list_head list ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_6069 {
   int __val ;
   char __c[1U] ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_6149 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct mfd_cell;
#line 1915 
struct platform_device_id;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device *) ;
   int (*remove)(struct platform_device *) ;
   void (*shutdown)(struct platform_device *) ;
   int (*suspend)(struct platform_device *, pm_message_t ) ;
   int (*resume)(struct platform_device *) ;
   struct device_driver driver ;
   struct platform_device_id *id_table ;
   bool prevent_deferred_probe ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 831 
enum dev_dma_attr {
    DEV_DMA_NOT_SUPPORTED = 0,
    DEV_DMA_NON_COHERENT = 1,
    DEV_DMA_COHERENT = 2
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
typedef u64 acpi_io_address;
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
typedef void *acpi_handle;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
typedef u32 acpi_object_type;
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_integer_7406 {
   acpi_object_type type ;
   u64 value ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_string_7407 {
   acpi_object_type type ;
   u32 length ;
   char *pointer ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_buffer_7408 {
   acpi_object_type type ;
   u32 length ;
   u8 *pointer ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_package_7409 {
   acpi_object_type type ;
   u32 count ;
   union acpi_object *elements ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_reference_7410 {
   acpi_object_type type ;
   acpi_object_type actual_type ;
   acpi_handle handle ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_processor_7411 {
   acpi_object_type type ;
   u32 proc_id ;
   acpi_io_address pblk_address ;
   u32 pblk_length ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
struct __anonstruct_power_resource_7412 {
   acpi_object_type type ;
   u32 system_level ;
   u32 resource_order ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/actypes.h"
union acpi_object {
   acpi_object_type type ;
   struct __anonstruct_integer_7406 integer ;
   struct __anonstruct_string_7407 string ;
   struct __anonstruct_buffer_7408 buffer ;
   struct __anonstruct_package_7409 package ;
   struct __anonstruct_reference_7410 reference ;
   struct __anonstruct_processor_7411 processor ;
   struct __anonstruct_power_resource_7412 power_resource ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_driver;
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_hotplug_profile {
   struct kobject kobj ;
   int (*scan_dependent)(struct acpi_device *) ;
   void (*notify_online)(struct acpi_device *) ;
   bool enabled : 1 ;
   bool demand_offline : 1 ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_scan_handler {
   struct acpi_device_id *ids ;
   struct list_head list_node ;
   bool (*match)(char *, struct acpi_device_id **) ;
   int (*attach)(struct acpi_device *, struct acpi_device_id *) ;
   void (*detach)(struct acpi_device *) ;
   void (*bind)(struct device *) ;
   void (*unbind)(struct device *) ;
   struct acpi_hotplug_profile hotplug ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_hotplug_context {
   struct acpi_device *self ;
   int (*notify)(struct acpi_device *, u32 ) ;
   void (*uevent)(struct acpi_device *, u32 ) ;
   void (*fixup)(struct acpi_device *) ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_ops {
   int (*add)(struct acpi_device *) ;
   int (*remove)(struct acpi_device *) ;
   void (*notify)(struct acpi_device *, u32 ) ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_driver {
   char name[80U] ;
   char class[80U] ;
   struct acpi_device_id *ids ;
   unsigned int flags ;
   struct acpi_device_ops ops ;
   struct device_driver drv ;
   struct module *owner ;
};
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_status {
   u32 present : 1 ;
   u32 enabled : 1 ;
   u32 show_in_ui : 1 ;
   u32 functional : 1 ;
   u32 battery_present : 1 ;
   u32 reserved : 27 ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_flags {
   u32 dynamic_status : 1 ;
   u32 removable : 1 ;
   u32 ejectable : 1 ;
   u32 power_manageable : 1 ;
   u32 match_driver : 1 ;
   u32 initialized : 1 ;
   u32 visited : 1 ;
   u32 hotplug_notify : 1 ;
   u32 is_dock_station : 1 ;
   u32 of_compatible_ok : 1 ;
   u32 coherent_dma : 1 ;
   u32 cca_seen : 1 ;
   u32 enumeration_by_parent : 1 ;
   u32 reserved : 19 ;
};
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_dir {
   struct proc_dir_entry *entry ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
typedef char acpi_bus_id[8U];
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
typedef u64 acpi_bus_address;
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
typedef char acpi_device_name[40U];
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
typedef char acpi_device_class[20U];
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_pnp_type {
   u32 hardware_id : 1 ;
   u32 bus_address : 1 ;
   u32 platform_id : 1 ;
   u32 reserved : 29 ;
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_pnp {
   acpi_bus_id bus_id ;
   struct acpi_pnp_type type ;
   acpi_bus_address bus_address ;
   char *unique_id ;
   struct list_head ids ;
   acpi_device_name device_name ;
   acpi_device_class device_class ;
   union acpi_object *str_obj ;
};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_power_flags {
   u32 explicit_get : 1 ;
   u32 power_resources : 1 ;
   u32 inrush_current : 1 ;
   u32 power_removed : 1 ;
   u32 ignore_parent : 1 ;
   u32 dsw_present : 1 ;
   u32 reserved : 26 ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct __anonstruct_flags_7413 {
   u8 valid : 1 ;
   u8 explicit_set : 1 ;
   u8 reserved : 6 ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_power_state {
   struct __anonstruct_flags_7413 flags ;
   int power ;
   int latency ;
   struct list_head resources ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_power {
   int state ;
   struct acpi_device_power_flags flags ;
   struct acpi_device_power_state states[5U] ;
};
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_perf_flags {
   u8 reserved : 8 ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct __anonstruct_flags_7414 {
   u8 valid : 1 ;
   u8 reserved : 7 ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_perf_state {
   struct __anonstruct_flags_7414 flags ;
   u8 power ;
   u8 performance ;
   int latency ;
};
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_perf {
   int state ;
   struct acpi_device_perf_flags flags ;
   int state_count ;
   struct acpi_device_perf_state *states ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_wakeup_flags {
   u8 valid : 1 ;
   u8 notifier_present : 1 ;
};
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_wakeup_context {
   void (*func)(struct acpi_device_wakeup_context *) ;
   struct device *dev ;
};
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_wakeup {
   acpi_handle gpe_device ;
   u64 gpe_number ;
   u64 sleep_state ;
   struct list_head resources ;
   struct acpi_device_wakeup_flags flags ;
   struct acpi_device_wakeup_context context ;
   struct wakeup_source *ws ;
   int prepare_count ;
   int enable_count ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device_data {
   union acpi_object *pointer ;
   struct list_head properties ;
   union acpi_object *of_compatible ;
   struct list_head subnodes ;
};
#line 346 
struct acpi_gpio_mapping;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
struct acpi_device {
   int device_type ;
   acpi_handle handle ;
   struct fwnode_handle fwnode ;
   struct acpi_device *parent ;
   struct list_head children ;
   struct list_head node ;
   struct list_head wakeup_list ;
   struct list_head del_list ;
   struct acpi_device_status status ;
   struct acpi_device_flags flags ;
   struct acpi_device_pnp pnp ;
   struct acpi_device_power power ;
   struct acpi_device_wakeup wakeup ;
   struct acpi_device_perf performance ;
   struct acpi_device_dir dir ;
   struct acpi_device_data data ;
   struct acpi_scan_handler *handler ;
   struct acpi_hotplug_context *hp ;
   struct acpi_driver *driver ;
   struct acpi_gpio_mapping *driver_gpios ;
   void *driver_data ;
   struct device dev ;
   unsigned int physical_node_count ;
   unsigned int dep_unmet ;
   struct list_head physical_node_list ;
   struct mutex physical_node_lock ;
   void (*remove)(struct acpi_device *) ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity {
   unsigned int pre_vectors ;
   unsigned int post_vectors ;
   unsigned int nr_sets ;
   unsigned int set_size[4U] ;
   void (*calc_sets)(struct irq_affinity *, unsigned int ) ;
   void *priv ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_9247 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_9247 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
struct xgbe_stats {
   char stat_string[32U] ;
   int stat_size ;
   int stat_offset ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_12038 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_12038 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_12039 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_12039 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_12055 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_12055 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_12059 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_12059 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_12060 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_12061 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_12060 __anonCompField_media_link_90 ;
   union __anonunion_12061 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_12063 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_12062 {
   struct __anonstruct_dev_12063 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_12062 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_12077 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_12078 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_12076 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_12077 i2c ;
   struct __anonstruct_custom_12078 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_12076 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_12979 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_12979 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_platform_instance_xgbe_driver_31 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_xgbe_get_channels_29 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_xgbe_driver_30 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_13_33 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 70 
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void *ERR_PTR(long error);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25 
void *ldv_err_ptr(long error);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2519 
#line 2519 
int register_netdevice_notifier(struct notifier_block *);
#line 2520 
#line 2520 
int unregister_netdevice_notifier(struct notifier_block *);
#line 2568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info *info)
{
  #line 2570 
  return info->dev;
}

#line 2679 
#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 4131 
#line 713  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 721  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 697  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 1301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
struct xgbe_prv_data *xgbe_alloc_pdata(struct device *dev);
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
void xgbe_free_pdata(struct xgbe_prv_data *pdata);
#line 1303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
void xgbe_set_counts(struct xgbe_prv_data *pdata);
#line 1304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
int xgbe_config_netdev(struct xgbe_prv_data *pdata);
#line 1305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
void xgbe_deconfig_netdev(struct xgbe_prv_data *pdata);
#line 1307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 1307 
int xgbe_platform_init(void);
#line 1308 
#line 1308 
void xgbe_platform_exit(void);
#line 1310 
#line 1310 
int xgbe_pci_init(void);
#line 1311 
#line 1311 
void xgbe_pci_exit(void);
#line 1317 
#line 1317 
void xgbe_init_function_ptrs_dev(struct xgbe_hw_if *hw_if);
#line 1318 
#line 1318 
void xgbe_init_function_ptrs_phy(struct xgbe_phy_if *phy_if);
#line 1321 
#line 1321 
void xgbe_init_function_ptrs_desc(struct xgbe_desc_if *desc_if);
#line 1322 
#line 1322 
void xgbe_init_function_ptrs_i2c(struct xgbe_i2c_if *i2c_if);
#line 1323 
#line 1323 
struct net_device_ops *xgbe_get_netdev_ops(void);
#line 1324 
#line 1324 
struct ethtool_ops *xgbe_get_ethtool_ops(void);
#line 1327 
#line 1327 
struct dcbnl_rtnl_ops *xgbe_get_dcbnl_ops(void);
#line 1330 
#line 1330 
void xgbe_ptp_register(struct xgbe_prv_data *pdata);
#line 1331 
#line 1331 
void xgbe_ptp_unregister(struct xgbe_prv_data *pdata);
#line 1337 
#line 1337 
void xgbe_get_all_hw_features(struct xgbe_prv_data *pdata);
#line 1340 
#line 1340 
void xgbe_init_rx_coalesce(struct xgbe_prv_data *pdata);
#line 1341 
#line 1341 
void xgbe_init_tx_coalesce(struct xgbe_prv_data *pdata);
#line 1346 
#line 1346 
void xgbe_debugfs_init(struct xgbe_prv_data *pdata);
#line 1347 
#line 1347 
void xgbe_debugfs_exit(struct xgbe_prv_data *pdata);
#line 1348 
#line 1348 
void xgbe_debugfs_rename(struct xgbe_prv_data *pdata);
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
static int debug = -1;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
static void xgbe_default_config(struct xgbe_prv_data *pdata)
{
  #line 144 
  pdata->blen = 64U;
  #line 145 
  pdata->pbl = 128U;
  #line 146 
  pdata->aal = 1U;
  #line 147 
  pdata->rd_osr_limit = 8U;
  #line 148 
  pdata->wr_osr_limit = 8U;
  #line 149 
  pdata->tx_sf_mode = 1U;
  #line 150 
  pdata->tx_threshold = 0U;
  #line 151 
  pdata->tx_osp_mode = 1U;
  #line 152 
  pdata->rx_sf_mode = 0U;
  #line 153 
  pdata->rx_threshold = 0U;
  #line 154 
  pdata->pause_autoneg = 1U;
  #line 155 
  pdata->tx_pause = 1U;
  #line 156 
  pdata->rx_pause = 1U;
  #line 157 
  pdata->phy_speed = -1;
  #line 158 
  pdata->power_down = 0U;
  #line 163 
  return;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
static void xgbe_init_all_fptrs(struct xgbe_prv_data *pdata)
{
  #line 165 
  xgbe_init_function_ptrs_dev(& pdata->hw_if);
  #line 166 
  xgbe_init_function_ptrs_phy(& pdata->phy_if);
  #line 167 
  xgbe_init_function_ptrs_i2c(& pdata->i2c_if);
  #line 168 
  xgbe_init_function_ptrs_desc(& pdata->desc_if);
  #line 170 
  (*((pdata->vdata)->init_function_ptrs_phy_impl))(& pdata->phy_if);
  #line 171 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
struct xgbe_prv_data *xgbe_alloc_pdata(struct device *dev)
{
  #line 175 
  struct xgbe_prv_data *pdata;
  #line 176 
  struct net_device *netdev;
  #line 178 
  netdev = cif_alloc_etherdev_mqs(7344,16U,16U);
  #line 180 
  if (netdev == (struct net_device *)0) {
    #line 181 
    _dev_err(dev,(char *)"alloc_etherdev_mq failed\n");
    #line 182 
    return (struct xgbe_prv_data *)ERR_PTR(-12L);
  }
  #line 184 
  netdev->dev.parent = dev;
  #line 185 
  pdata = (struct xgbe_prv_data *)netdev_priv(netdev);
  #line 186 
  pdata->netdev = netdev;
  #line 187 
  pdata->dev = dev;
  #line 189 
  spinlock_check(& pdata->lock);
  {
    #line 189 
    struct lock_class_key __key;
    #line 189 
    __raw_spin_lock_init(& pdata->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&pdata->lock)->rlock",& __key);
  }
  #line 190 
  spinlock_check(& pdata->xpcs_lock);
  {
    #line 190 
    struct lock_class_key __key_0;
    #line 190 
    __raw_spin_lock_init(& pdata->xpcs_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&pdata->xpcs_lock)->rlock",& __key_0);
  }
  {
    #line 191 
    struct lock_class_key __key_1;
    #line 191 
    __mutex_init(& pdata->rss_mutex,(char *)"&pdata->rss_mutex",& __key_1);
  }
  #line 192 
  spinlock_check(& pdata->tstamp_lock);
  {
    #line 192 
    struct lock_class_key __key_2;
    #line 192 
    __raw_spin_lock_init(& pdata->tstamp_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&pdata->tstamp_lock)->rlock",& __key_2);
  }
  {
    #line 193 
    struct lock_class_key __key_3;
    #line 193 
    __mutex_init(& pdata->i2c_mutex,(char *)"&pdata->i2c_mutex",& __key_3);
  }
  #line 194 
  __init_completion(& pdata->i2c_complete);
  #line 195 
  __init_completion(& pdata->mdio_complete);
  #line 196 
  INIT_LIST_HEAD(& pdata->vxlan_ports);
  #line 198 
  pdata->msg_enable = netif_msg_init(debug,52);
  #line 200 
  cif_set_bit(0L,& pdata->dev_state);
  #line 201 
  cif_set_bit(3L,& pdata->dev_state);
  #line 203 
  return pdata;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
void xgbe_free_pdata(struct xgbe_prv_data *pdata)
{
  #line 208 
  struct net_device *netdev = pdata->netdev;
  #line 210 
  cif_free_netdev(netdev);
  #line 211 
  return;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
void xgbe_set_counts(struct xgbe_prv_data *pdata)
{
  #line 248 
  unsigned int tmp_7;
  #line 239 
  unsigned int __UNIQUE_ID___x447;
  #line 250 
  unsigned int __UNIQUE_ID___x455;
  #line 239 
  unsigned int tmp_0;
  #line 250 
  unsigned int tmp_9;
  #line 241 
  unsigned int __UNIQUE_ID___x449;
  #line 253 
  unsigned int __UNIQUE_ID___x457;
  #line 241 
  unsigned int tmp_2;
  #line 253 
  unsigned int tmp_11;
  #line 243 
  unsigned int __UNIQUE_ID___x451;
  #line 243 
  unsigned int tmp_4;
  #line 248 
  unsigned int __UNIQUE_ID___x453;
  #line 216 
  xgbe_init_all_fptrs(pdata);
  #line 219 
  xgbe_get_all_hw_features(pdata);
  #line 222 
  if (pdata->tx_max_channel_count == 0U) 
                                         #line 223 
                                         pdata->tx_max_channel_count = pdata->hw_feat.tx_ch_cnt;
  #line 224 
  if (pdata->rx_max_channel_count == 0U) 
                                         #line 225 
                                         pdata->rx_max_channel_count = pdata->hw_feat.rx_ch_cnt;
  #line 227 
  if (pdata->tx_max_q_count == 0U) 
                                   #line 228 
                                   pdata->tx_max_q_count = pdata->hw_feat.tx_q_cnt;
  #line 229 
  if (pdata->rx_max_q_count == 0U) 
                                   #line 230 
                                   pdata->rx_max_q_count = pdata->hw_feat.rx_q_cnt;
  {
    #line 239 
    __UNIQUE_ID___x447 = num_online_cpus();
    #line 239 
    unsigned int __UNIQUE_ID___y448 = pdata->hw_feat.tx_ch_cnt;
    #line 239 
    if (__UNIQUE_ID___x447 < __UNIQUE_ID___y448) 
                                                 #line 239 
                                                 tmp_0 = __UNIQUE_ID___x447; else 
                                                                    #line 239 
                                                                    tmp_0 = __UNIQUE_ID___y448;
    }
  #line 239 
  pdata->tx_ring_count = tmp_0;
  {
    #line 241 
    __UNIQUE_ID___x449 = pdata->tx_ring_count;
    #line 241 
    unsigned int __UNIQUE_ID___y450 = pdata->tx_max_channel_count;
    #line 241 
    if (__UNIQUE_ID___x449 < __UNIQUE_ID___y450) 
                                                 #line 241 
                                                 tmp_2 = __UNIQUE_ID___x449; else 
                                                                    #line 241 
                                                                    tmp_2 = __UNIQUE_ID___y450;
    }
  #line 241 
  pdata->tx_ring_count = tmp_2;
  {
    #line 243 
    __UNIQUE_ID___x451 = pdata->tx_ring_count;
    #line 243 
    unsigned int __UNIQUE_ID___y452 = pdata->tx_max_q_count;
    #line 243 
    if (__UNIQUE_ID___x451 < __UNIQUE_ID___y452) 
                                                 #line 243 
                                                 tmp_4 = __UNIQUE_ID___x451; else 
                                                                    #line 243 
                                                                    tmp_4 = __UNIQUE_ID___y452;
    }
  #line 243 
  pdata->tx_ring_count = tmp_4;
  #line 246 
  pdata->tx_q_count = pdata->tx_ring_count;
  {
    #line 248 
    __UNIQUE_ID___x453 = num_online_cpus();
    #line 248 
    unsigned int __UNIQUE_ID___y454 = pdata->hw_feat.rx_ch_cnt;
    #line 248 
    if (__UNIQUE_ID___x453 < __UNIQUE_ID___y454) 
                                                 #line 248 
                                                 tmp_7 = __UNIQUE_ID___x453; else 
                                                                    #line 248 
                                                                    tmp_7 = __UNIQUE_ID___y454;
    }
  #line 248 
  pdata->rx_ring_count = tmp_7;
  {
    #line 250 
    __UNIQUE_ID___x455 = pdata->rx_ring_count;
    #line 250 
    unsigned int __UNIQUE_ID___y456 = pdata->rx_max_channel_count;
    #line 250 
    if (__UNIQUE_ID___x455 < __UNIQUE_ID___y456) 
                                                 #line 250 
                                                 tmp_9 = __UNIQUE_ID___x455; else 
                                                                    #line 250 
                                                                    tmp_9 = __UNIQUE_ID___y456;
    }
  #line 250 
  pdata->rx_ring_count = tmp_9;
  {
    #line 253 
    __UNIQUE_ID___x457 = pdata->hw_feat.rx_q_cnt;
    #line 253 
    unsigned int __UNIQUE_ID___y458 = pdata->rx_max_q_count;
    #line 253 
    if (__UNIQUE_ID___x457 < __UNIQUE_ID___y458) 
                                                 #line 253 
                                                 tmp_11 = __UNIQUE_ID___x457; else 
                                                                    #line 253 
                                                                    tmp_11 = __UNIQUE_ID___y458;
    }
  #line 253 
  pdata->rx_q_count = tmp_11;
  #line 256 
  if ((pdata->msg_enable & 2U) != 0U) {
    {
      #line 257 
      bool branch;
      #line 257 
      struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_set_counts", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c", .format = (char *)"TX/RX DMA channel count = %u/%u\n", .lineno = (unsigned int)257U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 257 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
      #line 257 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 257 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug459,pdata->dev,(char *)"TX/RX DMA channel count = %u/%u\n",pdata->tx_ring_count,pdata->rx_ring_count);
    }
    {
      #line 259 
      bool branch_0;
      #line 259 
      struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_set_counts", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c", .format = (char *)"TX/RX hardware queue count = %u/%u\n", .lineno = (unsigned int)259U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 259 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
      #line 259 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 259 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug460,pdata->dev,(char *)"TX/RX hardware queue count = %u/%u\n",pdata->tx_q_count,pdata->rx_q_count);
    }
  }
  #line 262 
  return;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
int xgbe_config_netdev(struct xgbe_prv_data *pdata)
{
  #line 268 
  int ret;
  #line 293 
  unsigned long long tmp;
  #line 266 
  struct net_device *netdev = pdata->netdev;
  #line 267 
  struct device *dev = pdata->dev;
  #line 270 
  netdev->irq = pdata->dev_irq;
  #line 271 
  netdev->base_addr = (unsigned long)pdata->xgmac_regs;
  #line 272 
  memcpy((void *)netdev->dev_addr,(void *)(& pdata->mac_addr),(unsigned long)netdev->addr_len);
  #line 275 
  pdata->tx_sec_period = jiffies;
  #line 276 
  pdata->tx_ded_period = jiffies;
  #line 277 
  pdata->rx_sec_period = jiffies;
  #line 278 
  pdata->rx_ded_period = jiffies;
  #line 279 
  pdata->desc_sec_period = jiffies;
  #line 280 
  pdata->desc_ded_period = jiffies;
  #line 283 
  ret = (*(pdata->hw_if.exit))(pdata);
  #line 284 
  if (ret != 0) {
    #line 285 
    _dev_err(dev,(char *)"software reset failed\n");
    #line 286 
    return ret;
  }
  #line 290 
  xgbe_default_config(pdata);
  #line 293 
  if (pdata->hw_feat.dma_width != 64U) 
                                       #line 293 
                                       tmp = (1ULL << pdata->hw_feat.dma_width) + 18446744073709551615ULL; else 
                                                                    #line 293 
                                                                    tmp = 18446744073709551615ULL;
  #line 293 
  ;
  #line 293 
  ret = dma_set_mask_and_coherent(dev,tmp);
  #line 295 
  if (ret != 0) {
    #line 296 
    _dev_err(dev,(char *)"dma_set_mask_and_coherent failed\n");
    #line 297 
    return ret;
  }
  #line 301 
  if (pdata->tx_max_fifo_size == 0U) 
                                     #line 302 
                                     pdata->tx_max_fifo_size = pdata->hw_feat.tx_fifo_size;
  #line 303 
  if (pdata->rx_max_fifo_size == 0U) 
                                     #line 304 
                                     pdata->rx_max_fifo_size = pdata->hw_feat.rx_fifo_size;
  #line 308 
  pdata->tx_desc_count = 512U;
  #line 311 
  pdata->rx_desc_count = 512U;
  #line 314 
  if (pdata->channel_irq_count != 0U) {
    #line 315 
    unsigned int __UNIQUE_ID___x461;
    #line 315 
    unsigned int tmp_0;
    #line 317 
    unsigned int __UNIQUE_ID___x463;
    #line 317 
    unsigned int tmp_2;
    {
      #line 315 
      __UNIQUE_ID___x461 = pdata->tx_ring_count;
      #line 315 
      unsigned int __UNIQUE_ID___y462 = pdata->channel_irq_count;
      #line 315 
      if (__UNIQUE_ID___x461 < __UNIQUE_ID___y462) 
                                                   #line 315 
                                                   tmp_0 = __UNIQUE_ID___x461; else 
                                                                    #line 315 
                                                                    tmp_0 = __UNIQUE_ID___y462;
      }
    #line 315 
    pdata->tx_ring_count = tmp_0;
    {
      #line 317 
      __UNIQUE_ID___x463 = pdata->rx_ring_count;
      #line 317 
      unsigned int __UNIQUE_ID___y464 = pdata->channel_irq_count;
      #line 317 
      if (__UNIQUE_ID___x463 < __UNIQUE_ID___y464) 
                                                   #line 317 
                                                   tmp_2 = __UNIQUE_ID___x463; else 
                                                                    #line 317 
                                                                    tmp_2 = __UNIQUE_ID___y464;
      }
    #line 317 
    pdata->rx_ring_count = tmp_2;
    #line 320 
    if ((pdata->msg_enable & 2U) != 0U) {
      #line 321 
      bool branch;
      #line 321 
      struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_netdev", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c", .format = (char *)"adjusted TX/RX DMA channel count = %u/%u\n", .lineno = (unsigned int)321U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 321 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
      #line 321 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 321 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug465,pdata->dev,(char *)"adjusted TX/RX DMA channel count = %u/%u\n",pdata->tx_ring_count,pdata->rx_ring_count);
    }
  }
  #line 327 
  netdev_rss_key_fill((void *)(& pdata->rss_key),40UL);
  #line 329 
  pdata->rss_options &= 4294967293U;
  #line 329 
  pdata->rss_options |= 2U;
  #line 330 
  pdata->rss_options &= 4294967291U;
  #line 330 
  pdata->rss_options |= 4U;
  #line 331 
  pdata->rss_options &= 4294967287U;
  #line 331 
  pdata->rss_options |= 8U;
  #line 334 
  pdata->debugfs_an_cdr_workaround = (_Bool)((pdata->vdata)->an_cdr_workaround != 0U);
  #line 335 
  ret = (*(pdata->phy_if.phy_init))(pdata);
  #line 336 
  if (ret != 0) 
                #line 337 
                return ret;
  #line 340 
  netdev->netdev_ops = xgbe_get_netdev_ops();
  #line 341 
  netdev->ethtool_ops = xgbe_get_ethtool_ops();
  #line 343 
  netdev->dcbnl_ops = xgbe_get_dcbnl_ops();
  #line 347 
  netdev->hw_features = 549756945299ULL;
  #line 358 
  if (pdata->hw_feat.rss != 0U) 
                                #line 359 
                                netdev->hw_features |= 274877906944ULL;
  #line 361 
  if (pdata->hw_feat.vxn != 0U) {
    #line 362 
    netdev->hw_enc_features = 2252349771956243ULL;
    #line 373 
    netdev->hw_features |= 2251800015011840ULL;
    #line 377 
    pdata->vxlan_offloads_set = 1U;
    #line 378 
    pdata->vxlan_features = 2251800015011840ULL;
  }
  #line 383 
  netdev->vlan_features |= 1114131ULL;
  #line 389 
  netdev->features |= netdev->hw_features;
  #line 390 
  pdata->netdev_features = netdev->features;
  #line 392 
  netdev->priv_flags |= 4096U;
  #line 393 
  netdev->min_mtu = 0U;
  #line 394 
  netdev->max_mtu = 9000U;
  #line 397 
  netdev->watchdog_timeo = 0;
  #line 399 
  xgbe_init_rx_coalesce(pdata);
  #line 400 
  xgbe_init_tx_coalesce(pdata);
  #line 402 
  netif_carrier_off(netdev);
  #line 403 
  ret = cif_register_netdev(netdev);
  #line 404 
  if (ret != 0) {
    #line 405 
    _dev_err(dev,(char *)"net device registration failed\n");
    #line 406 
    return ret;
  }
  #line 410 
  xgbe_ptp_register(pdata);
  #line 412 
  xgbe_debugfs_init(pdata);
  #line 414 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 414 
    bool branch_0;
    #line 414 
    struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_netdev", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c", .format = (char *)"%u Tx software queues\n", .lineno = (unsigned int)414U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 414 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
    #line 414 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 414 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug466,pdata->netdev,(char *)"%u Tx software queues\n",pdata->tx_ring_count);
  }
  #line 416 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 416 
    bool branch_1;
    #line 416 
    struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_netdev", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c", .format = (char *)"%u Rx software queues\n", .lineno = (unsigned int)416U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 416 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
    #line 416 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 416 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug467,pdata->netdev,(char *)"%u Rx software queues\n",pdata->rx_ring_count);
  }
  #line 419 
  return 0;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
void xgbe_deconfig_netdev(struct xgbe_prv_data *pdata)
{
  #line 424 
  struct net_device *netdev = pdata->netdev;
  #line 426 
  xgbe_debugfs_exit(pdata);
  #line 429 
  xgbe_ptp_unregister(pdata);
  #line 431 
  cif_unregister_netdev(netdev);
  #line 433 
  (*(pdata->phy_if.phy_exit))(pdata);
  #line 434 
  return;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
static int xgbe_netdev_event(struct notifier_block *nb, unsigned long event, void *data)
{
  #line 439 
  struct net_device *netdev = netdev_notifier_info_to_dev((struct netdev_notifier_info *)data);
  #line 440 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 442 
  ;
  #line 442 
  if (netdev->netdev_ops != xgbe_get_netdev_ops()) 
                                                   #line 443 
                                                   goto out;
  #line 445 
  switch (event) {
    #line 446 
    case (unsigned long)11: 
                            #line 446 
    ;
    #line 447 
    xgbe_debugfs_rename(pdata);
    #line 448 
    break;
    #line 450 
    default: 
             #line 450 
    ;
    #line 451 
    break;
  }
  #line 454 
  out: 
       #line 454 
  ;
  #line 455 
  return 0;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
static struct notifier_block xgbe_netdev_notifier = {.notifier_call = & xgbe_netdev_event};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
static int xgbe_mod_init(void)
{
  #line 464 
  int ret;
  #line 466 
  ret = register_netdevice_notifier(& xgbe_netdev_notifier);
  #line 467 
  if (ret != 0) 
                #line 468 
                return ret;
  #line 470 
  ret = xgbe_platform_init();
  #line 471 
  if (ret != 0) 
                #line 472 
                goto err_platform_init;
  #line 474 
  ret = xgbe_pci_init();
  #line 475 
  if (ret != 0) 
                #line 476 
                goto err_pci_init;
  #line 478 
  return 0;
  #line 480 
  err_pci_init: 
                #line 480 
  ;
  #line 481 
  xgbe_platform_exit();
  #line 482 
  err_platform_init: 
                     #line 482 
  ;
  #line 483 
  unregister_netdevice_notifier(& xgbe_netdev_notifier);
  #line 484 
  return ret;
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-main.c"
static void xgbe_mod_exit(void)
{
  #line 489 
  xgbe_pci_exit();
  #line 491 
  xgbe_platform_exit();
  #line 493 
  unregister_netdevice_notifier(& xgbe_netdev_notifier);
  #line 494 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
#line 93 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 97 
#line 97 
void emg_free_netdev(struct net_device *arg0);
#line 100 
#line 100 
int emg_register_netdev(struct net_device *arg0);
#line 104 
#line 104 
void emg_unregister_netdev(struct net_device *arg0);
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
void emg_xgbe_mod_exit(void)
{
  #line 109 
  xgbe_mod_exit();
  #line 110 
  return;
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
int emg_xgbe_mod_init(void)
{
  #line 113 
  return xgbe_mod_init();
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 134 
  ldv_set_bit(nr,addr);
  #line 135 
  return;
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 148 
  ldv_init_list_head(list);
  #line 149 
  return;
}

#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void *ERR_PTR(long error)
{
  #line 218 
  return ldv_err_ptr(error);
}

#line 697  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 701 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 709 
  emg_free_netdev(dev);
  #line 710 
  return;
}

#line 713  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 717 
  return emg_register_netdev(dev);
}

#line 721  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 725 
  emg_unregister_netdev(dev);
  #line 726 
  return;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 15 
void *__memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 59 
char *strchr(char *, int);
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 136 
int __bitmap_and(unsigned long *, unsigned long *, unsigned long *, unsigned int);
#line 230 
#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v2.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst, unsigned long *src, unsigned int nbits)
{
  #line 240 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 241 
  __memcpy((void *)dst,(void *)src,(unsigned long)len);
  #line 242 
  return;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_and(unsigned long *dst, unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 276 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 277 
    *dst = ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U)));
    #line 277 
    return ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U))) != 0UL;
  }
  #line 278 
  return __bitmap_and(dst,src1,src2,nbits);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v2.i.aux"
static bool IS_ERR(void *ptr);
#line 26 
#line 694 
static void cif_mutex_lock_xgbe_phy_comm_lock(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v2.i.aux"
static void cif_mutex_unlock_xgbe_phy_comm_lock(struct mutex *lock);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 32 
unsigned int ioread32(void *);
#line 53 
#line 53 
void iowrite32(u32, void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 701  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v2.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_copy(unsigned long *dst, unsigned long *src)
{
  #line 15 
  bitmap_copy(dst,src,74U);
  #line 16 
  return;
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_and(unsigned long *dst, unsigned long *a, unsigned long *b)
{
  #line 21 
  bitmap_and(dst,a,b,74U);
  #line 22 
  return;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_set_bit(int nr, unsigned long *addr)
{
  #line 43 
  __set_bit((long)nr,addr);
  #line 44 
  return;
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_set_bit_array(int *array, int array_size, unsigned long *addr)
{
  #line 49 
  int i;
  #line 51 
  i = 0;
  #line 51 
  while (i < array_size) {
    #line 52 
    linkmode_set_bit(*(array + (unsigned long)i),addr);
    #line 51 
    i ++;
  }
  #line 53 
  return;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static int linkmode_test_bit(int nr, unsigned long *addr)
{
  #line 76 
  return (int)test_bit((long)nr,addr);
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 linkmode_adv_to_lcl_adv_t(unsigned long *advertising)
{
  #line 476 
  u32 lcl_adv = 0U;
  #line 478 
  if (linkmode_test_bit(13,advertising) != 0) 
                                              #line 480 
                                              lcl_adv |= 1024U;
  #line 481 
  if (linkmode_test_bit(14,advertising) != 0) 
                                              #line 483 
                                              lcl_adv |= 2048U;
  #line 485 
  return lcl_adv;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u8 mii_resolve_flowctrl_fdx(u16 lcladv, u16 rmtadv)
{
  #line 513 
  u8 cap = (unsigned char)0U;
  #line 515 
  if ((((int)lcladv & (int)rmtadv) & 1024) != 0) 
                                                 #line 516 
                                                 cap = (unsigned char)3U;
  else 
    #line 517 
    if ((((int)lcladv & (int)rmtadv) & 2048) != 0) 
      #line 518 
      if (((int)lcladv & 1024) != 0) 
                                     #line 519 
                                     cap = (unsigned char)2U;
      else 
        #line 520 
        if (((int)rmtadv & 1024) != 0) 
                                       #line 521 
                                       cap = (unsigned char)1U;
  #line 524 
  return cap;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 320 
int mdiobus_read(struct mii_bus *, int, u32);
#line 322 
#line 322 
int mdiobus_write(struct mii_bus *, int, u32, u16);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 61 
extern int phy_10_100_features_array[4U];
#line 63 
#line 63 
extern int phy_gbit_features_array[2U];
#line 266 
#line 266 
int __mdiobus_register(struct mii_bus *, struct module *);
#line 268 
#line 268 
void mdiobus_unregister(struct mii_bus *);
#line 270 
#line 270 
struct mii_bus *devm_mdiobus_alloc_size(struct device *, int);
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static struct mii_bus *devm_mdiobus_alloc(struct device *dev)
{
  #line 273 
  return devm_mdiobus_alloc_size(dev,0);
}

#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static int phy_read(struct phy_device *phydev, u32 regnum)
{
  #line 702 
  return mdiobus_read(phydev->mdio.bus,phydev->mdio.addr,regnum);
}

#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static int phy_write(struct phy_device *phydev, u32 regnum, u16 val)
{
  #line 729 
  return mdiobus_write(phydev->mdio.bus,phydev->mdio.addr,regnum,
                    (unsigned short)((int)val));
}

#line 1007 
#line 1007 
struct phy_device *get_phy_device(struct mii_bus *, int, bool);
#line 1008 
#line 1008 
int phy_device_register(struct phy_device *);
#line 1009 
#line 1009 
void phy_device_free(struct phy_device *);
#line 1024 
#line 1024 
void phy_device_remove(struct phy_device *);
#line 1025 
#line 1025 
int phy_init_hw(struct phy_device *);
#line 1037 
#line 1037 
int phy_attach_direct(struct net_device *, struct phy_device *, u32, phy_interface_t);
#line 1046 
#line 1046 
void phy_detach(struct phy_device *);
#line 1049 
#line 1049 
int phy_start_aneg(struct phy_device *);
#line 1050 
#line 1050 
int phy_aneg_done(struct phy_device *);
#line 1102 
#line 1102 
int genphy_read_status(struct phy_device *);
#line 1152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static int phy_read_status(struct phy_device *phydev)
{
  #line 1154 
  if (phydev->drv == (struct phy_driver *)0) 
                                             #line 1155 
                                             return -5;
  #line 1157 
  if ((phydev->drv)->read_status != (int (*)(struct phy_device *))0) {
    #line 1158 
    return (*((phydev->drv)->read_status))(phydev);
  }
  else {
    #line 1160 
    return genphy_read_status(phydev);
  }
}

#line 1185 
#line 1185 
void phy_support_asym_pause(struct phy_device *);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 4713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static char *netdev_name(struct net_device *dev)
{
  #line 4715 
  if ((int)dev->name[0] == 0) 
                              #line 4716 
                              return (char *)"(unnamed net_device)";
  else {
    #line 4715 
    if (strchr((char *)(& dev->name),37) != (char *)0) 
                                                       #line 4716 
                                                       return (char *)"(unnamed net_device)";
  }
  #line 4717 
  return (char *)(& dev->name);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 1320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 3356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
void xgbe_init_function_ptrs_phy_v2(struct xgbe_phy_if *phy_if);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static struct mutex xgbe_phy_comm_lock = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"xgbe_phy_comm_lock.wait_lock"}}}}, .wait_list = {.next = & xgbe_phy_comm_lock.wait_list, .prev = & xgbe_phy_comm_lock.wait_list}, .magic = (void *)(& xgbe_phy_comm_lock), .dep_map = {.name = (char *)"xgbe_phy_comm_lock"}};
#line 387 
#line 1866 
static enum xgbe_an_mode xgbe_phy_an_mode(struct xgbe_prv_data *pdata);
#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_i2c_xfer(struct xgbe_prv_data *pdata, struct xgbe_i2c_op *i2c_op)
{
  #line 392 
  return (*(pdata->i2c_if.i2c_xfer))(pdata,i2c_op);
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_redrv_write(struct xgbe_prv_data *pdata, unsigned int reg, unsigned int val)
{
  #line 399 
  struct xgbe_i2c_op i2c_op;
  #line 400 
  __be16 *redrv_val;
  #line 401 
  u8 redrv_data[5U];
  #line 401 
  u8 csum;
  #line 402 
  unsigned int i;
  #line 402 
  unsigned int retry;
  #line 403 
  int ret;
  #line 398 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 406 
  redrv_data[0] = (unsigned char)((int)((unsigned char)(reg >> 8)) << 1U);
  #line 407 
  redrv_data[1] = (unsigned char)reg;
  #line 408 
  redrv_val = (__be16 *)(& redrv_data[2]);
  #line 409 
  *redrv_val = __builtin_bswap16((unsigned short)((int)((unsigned short)val)));
  #line 412 
  csum = (unsigned char)0U;
  #line 413 
  i = 0U;
  #line 413 
  while (i <= 3U) {
    #line 414 
    csum = (unsigned char)((int)redrv_data[i] + (int)csum);
    #line 415 
    if ((int)redrv_data[i] > (int)csum) 
                                        #line 416 
                                        csum = (u8)((int)csum + 1);
    #line 413 
    i ++;
  }
  #line 418 
  redrv_data[4] = (unsigned char)(~ ((int)csum));
  #line 420 
  retry = 1U;
  #line 421 
  again1: 
          #line 421 
  ;
  #line 422 
  i2c_op.cmd = XGBE_I2C_CMD_WRITE;
  #line 423 
  i2c_op.target = phy_data->redrv_addr;
  #line 424 
  i2c_op.len = 5U;
  #line 425 
  i2c_op.buf = (void *)(& redrv_data);
  #line 426 
  ret = xgbe_phy_i2c_xfer(pdata,& i2c_op);
  #line 427 
  if (ret != 0) {
    #line 428 
    if (ret == -11) {
      #line 428 
      unsigned int tmp;
      #line 428 
      tmp = retry;
      #line 428 
      retry --;
      #line 428 
      ;
      #line 428 
      if (tmp != 0U) 
                     #line 429 
                     goto again1;
    }
    #line 431 
    return ret;
  }
  #line 434 
  retry = 1U;
  #line 435 
  again2: 
          #line 435 
  ;
  #line 436 
  i2c_op.cmd = XGBE_I2C_CMD_READ;
  #line 437 
  i2c_op.target = phy_data->redrv_addr;
  #line 438 
  i2c_op.len = 1U;
  #line 439 
  i2c_op.buf = (void *)(& redrv_data);
  #line 440 
  ret = xgbe_phy_i2c_xfer(pdata,& i2c_op);
  #line 441 
  if (ret != 0) {
    #line 442 
    if (ret == -11) {
      #line 442 
      unsigned int tmp_0;
      #line 442 
      tmp_0 = retry;
      #line 442 
      retry --;
      #line 442 
      ;
      #line 442 
      if (tmp_0 != 0U) 
                       #line 443 
                       goto again2;
    }
    #line 445 
    return ret;
  }
  #line 448 
  if ((unsigned int)redrv_data[0] != 255U) {
    #line 449 
    if ((pdata->msg_enable & 1U) != 0U) {
      #line 449 
      bool branch;
      #line 449 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_redrv_write", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"Redriver write checksum error\n", .lineno = (unsigned int)449U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 449 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 449 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 449 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,pdata->netdev,(char *)"Redriver write checksum error\n");
    }
    #line 451 
    ret = -5;
  }
  #line 454 
  return ret;
}

#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_i2c_write(struct xgbe_prv_data *pdata, unsigned int target, void *val, unsigned int val_len)
{
  #line 460 
  struct xgbe_i2c_op i2c_op;
  #line 461 
  int retry;
  #line 461 
  int ret;
  #line 463 
  retry = 1;
  #line 464 
  again: 
         #line 464 
  ;
  #line 466 
  i2c_op.cmd = XGBE_I2C_CMD_WRITE;
  #line 467 
  i2c_op.target = target;
  #line 468 
  i2c_op.len = val_len;
  #line 469 
  i2c_op.buf = val;
  #line 470 
  ret = xgbe_phy_i2c_xfer(pdata,& i2c_op);
  #line 471 
  if (ret == -11) {
    #line 471 
    int tmp;
    #line 471 
    tmp = retry;
    #line 471 
    retry --;
    #line 471 
    ;
    #line 471 
    if (tmp != 0) 
                  #line 472 
                  goto again;
  }
  #line 474 
  return ret;
}

#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_i2c_read(struct xgbe_prv_data *pdata, unsigned int target, void *reg, unsigned int reg_len, void *val, unsigned int val_len)
{
  #line 481 
  struct xgbe_i2c_op i2c_op;
  #line 482 
  int retry;
  #line 482 
  int ret;
  #line 484 
  retry = 1;
  #line 485 
  again1: 
          #line 485 
  ;
  #line 487 
  i2c_op.cmd = XGBE_I2C_CMD_WRITE;
  #line 488 
  i2c_op.target = target;
  #line 489 
  i2c_op.len = reg_len;
  #line 490 
  i2c_op.buf = reg;
  #line 491 
  ret = xgbe_phy_i2c_xfer(pdata,& i2c_op);
  #line 492 
  if (ret != 0) {
    #line 493 
    if (ret == -11) {
      #line 493 
      int tmp;
      #line 493 
      tmp = retry;
      #line 493 
      retry --;
      #line 493 
      ;
      #line 493 
      if (tmp != 0) 
                    #line 494 
                    goto again1;
    }
    #line 496 
    return ret;
  }
  #line 499 
  retry = 1;
  #line 500 
  again2: 
          #line 500 
  ;
  #line 502 
  i2c_op.cmd = XGBE_I2C_CMD_READ;
  #line 503 
  i2c_op.target = target;
  #line 504 
  i2c_op.len = val_len;
  #line 505 
  i2c_op.buf = val;
  #line 506 
  ret = xgbe_phy_i2c_xfer(pdata,& i2c_op);
  #line 507 
  if (ret == -11) {
    #line 507 
    int tmp_0;
    #line 507 
    tmp_0 = retry;
    #line 507 
    retry --;
    #line 507 
    ;
    #line 507 
    if (tmp_0 != 0) 
                    #line 508 
                    goto again2;
  }
  #line 510 
  return ret;
}

#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_sfp_put_mux(struct xgbe_prv_data *pdata)
{
  #line 516 
  struct xgbe_i2c_op i2c_op;
  #line 517 
  u8 mux_channel;
  #line 515 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 519 
  if (phy_data->sfp_comm == (unsigned int)XGBE_SFP_COMM_DIRECT) 
                                                                #line 520 
                                                                return 0;
  #line 523 
  mux_channel = (unsigned char)0U;
  #line 524 
  i2c_op.cmd = XGBE_I2C_CMD_WRITE;
  #line 525 
  i2c_op.target = phy_data->sfp_mux_address;
  #line 526 
  i2c_op.len = 1U;
  #line 527 
  i2c_op.buf = (void *)(& mux_channel);
  #line 529 
  return xgbe_phy_i2c_xfer(pdata,& i2c_op);
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_sfp_get_mux(struct xgbe_prv_data *pdata)
{
  #line 535 
  struct xgbe_i2c_op i2c_op;
  #line 536 
  u8 mux_channel;
  #line 534 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 538 
  if (phy_data->sfp_comm == (unsigned int)XGBE_SFP_COMM_DIRECT) 
                                                                #line 539 
                                                                return 0;
  #line 542 
  mux_channel = (unsigned char)(1 << phy_data->sfp_mux_channel);
  #line 543 
  i2c_op.cmd = XGBE_I2C_CMD_WRITE;
  #line 544 
  i2c_op.target = phy_data->sfp_mux_address;
  #line 545 
  i2c_op.len = 1U;
  #line 546 
  i2c_op.buf = (void *)(& mux_channel);
  #line 548 
  return xgbe_phy_i2c_xfer(pdata,& i2c_op);
}

#line 551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_put_comm_ownership(struct xgbe_prv_data *pdata)
{
  #line 553 
  cif_mutex_unlock_xgbe_phy_comm_lock(& xgbe_phy_comm_lock);
  #line 554 
  return;
}

#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_get_comm_ownership(struct xgbe_prv_data *pdata)
{
  #line 559 
  unsigned long timeout;
  #line 560 
  unsigned int mutex_id;
  #line 558 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 566 
  cif_mutex_lock_xgbe_phy_comm_lock(& xgbe_phy_comm_lock);
  #line 569 
  iowrite32(2147483648U,pdata->xprop_regs + 128U);
  #line 570 
  iowrite32(2147483648U,pdata->xprop_regs + 132U);
  #line 573 
  mutex_id = 0U;
  #line 574 
  mutex_id &= 2684354559U;
  #line 574 
  mutex_id = ((phy_data->port_id << 29) & 1610612736U) | mutex_id;
  #line 575 
  mutex_id &= 4294967294U;
  #line 575 
  mutex_id |= 1U;
  #line 577 
  timeout = jiffies + 1250UL;
  #line 578 
  while (1) {
    {
      #line 578 
      unsigned long __dummy;
      #line 578 
      unsigned long __dummy2;
      }
    #line 578 
    if (1 != 0) {
      {
        #line 578 
        unsigned long __dummy_0;
        #line 578 
        unsigned long __dummy2_0;
        }
      #line 578 
      if (1 != 0) {
        #line 578 
        if (! ((long)(jiffies - timeout) < 0L)) 
                                                #line 578 
                                                break;
      }
      else 
           #line 578 
           break;
    }
    else 
         #line 578 
         break;
    {
      #line 580 
      if (ioread32(pdata->xprop_regs + 128U) != 0U) 
                                                    #line 580 
                                                    goto _LOR;
      else {
        #line 580 
        if (ioread32(pdata->xprop_regs + 132U) != 0U) {
          #line 580 
          _LOR: {
                  #line 582 
                  usleep_range(100UL,200UL);
                  #line 583 
                  continue;
                }
        }
      }
      #line 587 
      iowrite32(mutex_id,pdata->xprop_regs + 128U);
      #line 588 
      iowrite32(mutex_id,pdata->xprop_regs + 132U);
      #line 590 
      return 0;
    }
  }
  #line 593 
  cif_mutex_unlock_xgbe_phy_comm_lock(& xgbe_phy_comm_lock);
  #line 595 
  netdev_err(pdata->netdev,(char *)"unable to obtain hardware mutexes\n");
  #line 597 
  return -110;
}

#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_mdio_mii_write(struct xgbe_prv_data *pdata, int addr, int reg, u16 val)
{
  #line 603 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 605 
  if ((reg & 1073741824) != 0) {
    #line 606 
    if (phy_data->phydev_mode != (unsigned int)XGBE_MDIO_MODE_CL45) 
                                                                    #line 607 
                                                                    return -524;
  }
  else 
    #line 609 
    if (phy_data->phydev_mode != (unsigned int)XGBE_MDIO_MODE_CL22) 
                                                                    #line 610 
                                                                    return -524;
  #line 613 
  return (*(pdata->hw_if.write_ext_mii_regs))(pdata,addr,reg,
                                           (unsigned short)((int)val));
}

#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_i2c_mii_write(struct xgbe_prv_data *pdata, int reg, u16 val)
{
  #line 618 
  __be16 *mii_val;
  #line 619 
  u8 mii_data[3U];
  #line 620 
  int ret;
  #line 622 
  ret = xgbe_phy_sfp_get_mux(pdata);
  #line 623 
  if (ret != 0) 
                #line 624 
                return ret;
  #line 626 
  mii_data[0] = (unsigned char)reg;
  #line 627 
  mii_val = (__be16 *)(& mii_data[1]);
  #line 628 
  *mii_val = __builtin_bswap16((unsigned short)((int)val));
  #line 630 
  ret = xgbe_phy_i2c_write(pdata,86U,(void *)(& mii_data),3U);
  #line 633 
  xgbe_phy_sfp_put_mux(pdata);
  #line 635 
  return ret;
}

#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_mii_write(struct mii_bus *mii, int addr, int reg, u16 val)
{
  #line 642 
  int ret;
  #line 640 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)mii->priv;
  #line 641 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 644 
  ret = xgbe_phy_get_comm_ownership(pdata);
  #line 645 
  if (ret != 0) 
                #line 646 
                return ret;
  #line 648 
  if (phy_data->conn_type == (unsigned int)XGBE_CONN_TYPE_SFP) 
                                                               #line 649 
                                                               ret = xgbe_phy_i2c_mii_write(pdata,reg,(unsigned short)((int)val));
  else 
    #line 650 
    if (((unsigned int)phy_data->conn_type & 2U) != 0U) 
                                                        #line 651 
                                                        ret = xgbe_phy_mdio_mii_write(pdata,addr,reg,(unsigned short)((int)val)); else 
                                                                    #line 653 
                                                                    ret = -524;
  #line 655 
  xgbe_phy_put_comm_ownership(pdata);
  #line 657 
  return ret;
}

#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_mdio_mii_read(struct xgbe_prv_data *pdata, int addr, int reg)
{
  #line 663 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 665 
  if ((reg & 1073741824) != 0) {
    #line 666 
    if (phy_data->phydev_mode != (unsigned int)XGBE_MDIO_MODE_CL45) 
                                                                    #line 667 
                                                                    return -524;
  }
  else 
    #line 669 
    if (phy_data->phydev_mode != (unsigned int)XGBE_MDIO_MODE_CL22) 
                                                                    #line 670 
                                                                    return -524;
  #line 673 
  return (*(pdata->hw_if.read_ext_mii_regs))(pdata,addr,reg);
}

#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_i2c_mii_read(struct xgbe_prv_data *pdata, int reg)
{
  #line 678 
  __be16 mii_val;
  #line 679 
  u8 mii_reg;
  #line 680 
  int ret;
  #line 682 
  ret = xgbe_phy_sfp_get_mux(pdata);
  #line 683 
  if (ret != 0) 
                #line 684 
                return ret;
  #line 686 
  mii_reg = (unsigned char)reg;
  #line 687 
  ret = xgbe_phy_i2c_read(pdata,86U,(void *)(& mii_reg),1U,(void *)(& mii_val),2U);
  #line 690 
  if (ret == 0) {
    #line 691 
    ret = (int)__builtin_bswap16((unsigned short)((int)mii_val));
  }
  #line 693 
  xgbe_phy_sfp_put_mux(pdata);
  #line 695 
  return ret;
}

#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_mii_read(struct mii_bus *mii, int addr, int reg)
{
  #line 702 
  int ret;
  #line 700 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)mii->priv;
  #line 701 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 704 
  ret = xgbe_phy_get_comm_ownership(pdata);
  #line 705 
  if (ret != 0) 
                #line 706 
                return ret;
  #line 708 
  if (phy_data->conn_type == (unsigned int)XGBE_CONN_TYPE_SFP) 
                                                               #line 709 
                                                               ret = xgbe_phy_i2c_mii_read(pdata,reg);
  else 
    #line 710 
    if (((unsigned int)phy_data->conn_type & 2U) != 0U) 
                                                        #line 711 
                                                        ret = xgbe_phy_mdio_mii_read(pdata,addr,reg); else 
                                                                    #line 713 
                                                                    ret = -524;
  #line 715 
  xgbe_phy_put_comm_ownership(pdata);
  #line 717 
  return ret;
}

#line 720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_phy_settings(struct xgbe_prv_data *pdata)
{
  #line 722 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 723 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 725 
  if (phy_data->sfp_mod_absent == 0U && phy_data->sfp_changed == 0U) 
    #line 726 
    return;
  #line 728 
  cif_bitmap_zero((unsigned long *)(& lks->link_modes.supported),74U);
  #line 730 
  if (phy_data->sfp_mod_absent != 0U) {
    #line 731 
    pdata->phy.speed = -1;
    #line 732 
    pdata->phy.duplex = 255;
    #line 733 
    pdata->phy.autoneg = 1;
    #line 734 
    pdata->phy.pause_autoneg = 1;
    #line 736 
    __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
    #line 737 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 738 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 739 
    __set_bit(7L,(unsigned long *)(& lks->link_modes.supported));
    #line 740 
    __set_bit(10L,(unsigned long *)(& lks->link_modes.supported));
    #line 742 
    bitmap_copy((unsigned long *)(& lks->link_modes.advertising),(unsigned long *)(& lks->link_modes.supported),74U);
    #line 744 
    return;
  }
  #line 747 
  switch ((unsigned int)phy_data->sfp_base) {
    #line 748 
    case (unsigned int)1: 
                          #line 748 
    ;
    #line 749 
    case (unsigned int)2: 
                          #line 749 
    ;
    #line 750 
    case (unsigned int)3: 
                          #line 750 
    ;
    #line 751 
    case (unsigned int)4: 
                          #line 751 
    ;
    #line 752 
    pdata->phy.speed = -1;
    #line 753 
    pdata->phy.duplex = 255;
    #line 754 
    pdata->phy.autoneg = 1;
    #line 755 
    pdata->phy.pause_autoneg = 1;
    #line 756 
    __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
    #line 757 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 758 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 759 
    if (phy_data->sfp_base == (unsigned int)XGBE_SFP_BASE_1000_T) {
      #line 760 
      if (((unsigned long)phy_data->port_speeds & 1UL) != 0UL) 
                                                               #line 761 
                                                               __set_bit(3L,(unsigned long *)(& lks->link_modes.supported));
      #line 762 
      if (((unsigned long)phy_data->port_speeds & 2UL) != 0UL) 
                                                               #line 763 
                                                               __set_bit(5L,(unsigned long *)(& lks->link_modes.supported));
    }
    else 
      #line 765 
      if (((unsigned long)phy_data->port_speeds & 2UL) != 0UL) 
                                                               #line 766 
                                                               __set_bit(41L,(unsigned long *)(& lks->link_modes.supported));
    #line 768 
    break;
    #line 769 
    case (unsigned int)5: 
                          #line 769 
    ;
    #line 770 
    case (unsigned int)6: 
                          #line 770 
    ;
    #line 771 
    case (unsigned int)7: 
                          #line 771 
    ;
    #line 772 
    case (unsigned int)8: 
                          #line 772 
    ;
    #line 773 
    case (unsigned int)9: 
                          #line 773 
    ;
    #line 774 
    pdata->phy.speed = 10000;
    #line 775 
    pdata->phy.duplex = 1;
    #line 776 
    pdata->phy.autoneg = 0;
    #line 777 
    pdata->phy.pause_autoneg = 0;
    #line 778 
    if (((unsigned long)phy_data->port_speeds & 8UL) != 0UL) 
      #line 779 
      switch ((unsigned int)phy_data->sfp_base) {
        #line 780 
        case (unsigned int)5: 
                              #line 780 
        ;
        #line 781 
        __set_bit(43L,(unsigned long *)(& lks->link_modes.supported));
        #line 782 
        break;
        #line 783 
        case (unsigned int)6: 
                              #line 783 
        ;
        #line 784 
        __set_bit(44L,(unsigned long *)(& lks->link_modes.supported));
        #line 785 
        break;
        #line 786 
        case (unsigned int)7: 
                              #line 786 
        ;
        #line 787 
        __set_bit(45L,(unsigned long *)(& lks->link_modes.supported));
        #line 788 
        break;
        #line 789 
        case (unsigned int)8: 
                              #line 789 
        ;
        #line 790 
        __set_bit(46L,(unsigned long *)(& lks->link_modes.supported));
        #line 791 
        break;
        #line 792 
        case (unsigned int)9: 
                              #line 792 
        ;
        #line 793 
        __set_bit(42L,(unsigned long *)(& lks->link_modes.supported));
        #line 794 
        break;
        #line 795 
        default: 
                 #line 795 
        ;
        #line 796 
        break;
      }
    #line 799 
    break;
    #line 800 
    default: 
             #line 800 
    ;
    #line 801 
    pdata->phy.speed = -1;
    #line 802 
    pdata->phy.duplex = 255;
    #line 803 
    pdata->phy.autoneg = 0;
    #line 804 
    pdata->phy.pause_autoneg = 0;
    #line 805 
    break;
  }
  #line 808 
  switch ((unsigned int)phy_data->sfp_base) {
    #line 809 
    case (unsigned int)1: 
                          #line 809 
    ;
    #line 810 
    case (unsigned int)4: 
                          #line 810 
    ;
    #line 811 
    case (unsigned int)9: 
                          #line 811 
    ;
    #line 812 
    __set_bit(7L,(unsigned long *)(& lks->link_modes.supported));
    #line 813 
    break;
    #line 814 
    default: 
             #line 814 
    ;
    #line 815 
    __set_bit(10L,(unsigned long *)(& lks->link_modes.supported));
    #line 816 
    break;
  }
  #line 819 
  bitmap_copy((unsigned long *)(& lks->link_modes.advertising),(unsigned long *)(& lks->link_modes.supported),74U);
  #line 820 
  return;
}

#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_sfp_bit_rate(struct xgbe_sfp_eeprom *sfp_eeprom, enum xgbe_sfp_speed sfp_speed)
{
  #line 825 
  u8 *sfp_base;
  #line 825 
  u8 min;
  #line 825 
  u8 max;
  #line 827 
  sfp_base = (u8 *)(& sfp_eeprom->base);
  #line 829 
  switch ((unsigned int)sfp_speed) {
    #line 830 
    case (unsigned int)2: 
                          #line 830 
    ;
    #line 831 
    min = (unsigned char)10U;
    #line 832 
    max = (unsigned char)13U;
    #line 833 
    break;
    #line 834 
    case (unsigned int)3: 
                          #line 834 
    ;
    #line 835 
    min = (unsigned char)100U;
    #line 836 
    max = (unsigned char)104U;
    #line 837 
    break;
    #line 838 
    default: 
             #line 838 
    ;
    #line 839 
    return (_Bool)0;
  }
  #line 842 
  return (_Bool)(((int)*(sfp_base + 12U) >= (int)min && (int)*(sfp_base + 12U) <= (int)max) != 0);
}

#line 846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_free_phy_device(struct xgbe_prv_data *pdata)
{
  #line 848 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 850 
  if (phy_data->phydev != (struct phy_device *)0) {
    #line 851 
    phy_detach(phy_data->phydev);
    #line 852 
    phy_device_remove(phy_data->phydev);
    #line 853 
    phy_device_free(phy_data->phydev);
    #line 854 
    phy_data->phydev = (struct phy_device *)0;
  }
  #line 856 
  return;
}

#line 858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_finisar_phy_quirks(struct xgbe_prv_data *pdata)
{
  #line 860 
  unsigned long supported[2U] = {0UL};
  #line 861 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 862 
  unsigned int phy_id = (phy_data->phydev)->phy_id;
  #line 864 
  if (phy_data->port_mode != (unsigned int)XGBE_PORT_MODE_SFP) 
                                                               #line 865 
                                                               return (_Bool)0;
  #line 867 
  if ((phy_id & 4294967280U) != 33492160U) 
                                           #line 868 
                                           return (_Bool)0;
  #line 871 
  phy_write(phy_data->phydev,22U,(unsigned short)1);
  #line 872 
  phy_write(phy_data->phydev,0U,(unsigned short)37184);
  #line 873 
  phy_write(phy_data->phydev,22U,(unsigned short)0);
  #line 876 
  phy_write(phy_data->phydev,27U,(unsigned short)36996);
  #line 877 
  phy_write(phy_data->phydev,9U,(unsigned short)3584);
  #line 878 
  phy_write(phy_data->phydev,0U,(unsigned short)33088);
  #line 879 
  phy_write(phy_data->phydev,4U,(unsigned short)3329);
  #line 880 
  phy_write(phy_data->phydev,0U,(unsigned short)37184);
  #line 882 
  linkmode_set_bit_array((int *)(& phy_10_100_features_array),4,(unsigned long *)(& supported));
  #line 885 
  linkmode_set_bit_array((int *)(& phy_gbit_features_array),2,(unsigned long *)(& supported));
  #line 889 
  linkmode_copy((unsigned long *)(& (phy_data->phydev)->supported),(unsigned long *)(& supported));
  #line 891 
  phy_support_asym_pause(phy_data->phydev);
  #line 893 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 893 
    bool branch;
    #line 893 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_finisar_phy_quirks", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"Finisar PHY quirk in place\n", .lineno = (unsigned int)893U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 893 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 893 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 893 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,pdata->netdev,(char *)"Finisar PHY quirk in place\n");
  }
  #line 896 
  return (_Bool)1;
}

#line 899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_belfuse_phy_quirks(struct xgbe_prv_data *pdata)
{
  #line 905 
  int reg;
  #line 901 
  unsigned long supported[2U] = {0UL};
  #line 902 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 903 
  struct xgbe_sfp_eeprom *sfp_eeprom = & phy_data->sfp_eeprom;
  #line 904 
  unsigned int phy_id = (phy_data->phydev)->phy_id;
  #line 907 
  if (phy_data->port_mode != (unsigned int)XGBE_PORT_MODE_SFP) 
                                                               #line 908 
                                                               return (_Bool)0;
  #line 910 
  if (memcmp((void *)(& sfp_eeprom->base[20]),(void *)"BEL-FUSE        ",
             16UL) != 0) 
    #line 912 
    return (_Bool)0;
  #line 915 
  pdata->an_again = 1U;
  #line 917 
  if (memcmp((void *)(& sfp_eeprom->base[40]),(void *)"1GBT-SFP06      ",
               16UL) != 0) 
    #line 919 
    return (_Bool)0;
  #line 921 
  if ((phy_id & 4294967280U) != 56778000U) 
                                           #line 922 
                                           return (_Bool)0;
  #line 925 
  phy_write(phy_data->phydev,24U,(unsigned short)28679);
  #line 926 
  reg = phy_read(phy_data->phydev,24U);
  #line 927 
  phy_write(phy_data->phydev,24U,(unsigned short)((int)((unsigned short)reg) & 65407));
  #line 930 
  phy_write(phy_data->phydev,28U,(unsigned short)31744);
  #line 931 
  reg = phy_read(phy_data->phydev,28U);
  #line 932 
  reg &= 1023;
  #line 933 
  reg &= -2;
  #line 934 
  phy_write(phy_data->phydev,28U,(unsigned short)((int)((unsigned short)(reg | -1023))));
  #line 937 
  reg = phy_read(phy_data->phydev,0U);
  #line 938 
  phy_write(phy_data->phydev,0U,(unsigned short)((int)((unsigned short)(reg | 2048))));
  #line 941 
  phy_write(phy_data->phydev,28U,(unsigned short)31744);
  #line 942 
  reg = phy_read(phy_data->phydev,28U);
  #line 943 
  reg &= 1023;
  #line 944 
  reg &= -7;
  #line 945 
  phy_write(phy_data->phydev,28U,(unsigned short)((int)((unsigned short)(reg | -1020))));
  #line 948 
  reg = phy_read(phy_data->phydev,0U);
  #line 949 
  phy_write(phy_data->phydev,0U,(unsigned short)((int)((unsigned short)reg) & 63487));
  #line 952 
  phy_write(phy_data->phydev,28U,(unsigned short)31744);
  #line 953 
  reg = phy_read(phy_data->phydev,28U);
  #line 954 
  reg &= 1023;
  #line 955 
  reg &= -2;
  #line 956 
  phy_write(phy_data->phydev,28U,(unsigned short)((int)((unsigned short)(reg | -1024))));
  #line 959 
  reg = phy_read(phy_data->phydev,0U);
  #line 960 
  phy_write(phy_data->phydev,0U,(unsigned short)((int)((unsigned short)reg) & 63487));
  #line 962 
  linkmode_set_bit_array((int *)(& phy_10_100_features_array),4,(unsigned long *)(& supported));
  #line 965 
  linkmode_set_bit_array((int *)(& phy_gbit_features_array),2,(unsigned long *)(& supported));
  #line 968 
  linkmode_copy((unsigned long *)(& (phy_data->phydev)->supported),(unsigned long *)(& supported));
  #line 969 
  phy_support_asym_pause(phy_data->phydev);
  #line 971 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 971 
    bool branch;
    #line 971 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_belfuse_phy_quirks", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"BelFuse PHY quirk in place\n", .lineno = (unsigned int)971U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 971 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 971 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 971 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,pdata->netdev,(char *)"BelFuse PHY quirk in place\n");
  }
  #line 974 
  return (_Bool)1;
}

#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_external_phy_quirks(struct xgbe_prv_data *pdata)
{
  #line 979 
  if ((int)xgbe_phy_belfuse_phy_quirks(pdata) != 0) 
                                                    #line 980 
                                                    return;
  #line 982 
  if ((int)xgbe_phy_finisar_phy_quirks(pdata) != 0) 
                                                    #line 983 
                                                    return;
  #line 984 
  return;
}

#line 986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_find_phy_device(struct xgbe_prv_data *pdata)
{
  #line 990 
  struct phy_device *phydev;
  #line 991 
  int ret;
  #line 988 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 989 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 994 
  if (phy_data->phydev != (struct phy_device *)0) 
                                                  #line 995 
                                                  return 0;
  #line 998 
  pdata->an_again = 0U;
  #line 1001 
  if (phy_data->phydev_mode == (unsigned int)XGBE_MDIO_MODE_NONE) 
                                                                  #line 1002 
                                                                  return 0;
  #line 1005 
  if (phy_data->port_mode == (unsigned int)XGBE_PORT_MODE_SFP && phy_data->sfp_phy_avail == 0U) 
    #line 1007 
    return 0;
  #line 1010 
  ret = (*(pdata->hw_if.set_ext_mii_mode))(pdata,phy_data->mdio_addr,phy_data->phydev_mode);
  #line 1012 
  if (ret != 0) {
    #line 1013 
    netdev_err(pdata->netdev,(char *)"mdio port/clause not compatible (%u/%u)\n",phy_data->mdio_addr,(unsigned int)phy_data->phydev_mode);
    #line 1016 
    return ret;
  }
  #line 1020 
  phydev = get_phy_device(phy_data->mii,(int)phy_data->mdio_addr,(_Bool)(phy_data->phydev_mode == (unsigned int)XGBE_MDIO_MODE_CL45));
  #line 1022 
  if ((int)IS_ERR((void *)phydev) != 0) {
    #line 1023 
    netdev_err(pdata->netdev,(char *)"get_phy_device failed\n");
    #line 1024 
    return -19;
  }
  #line 1026 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 1026 
    bool branch;
    #line 1026 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_find_phy_device", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"external PHY id is %#010x\n", .lineno = (unsigned int)1026U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1026 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 1026 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1026 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,pdata->netdev,(char *)"external PHY id is %#010x\n",phydev->phy_id);
  }
  #line 1031 
  ret = phy_device_register(phydev);
  #line 1032 
  if (ret != 0) {
    #line 1033 
    netdev_err(pdata->netdev,(char *)"phy_device_register failed\n");
    #line 1034 
    phy_device_free(phydev);
    #line 1035 
    return ret;
  }
  #line 1038 
  ret = phy_attach_direct(pdata->netdev,phydev,phydev->dev_flags,(enum ldv_15404)PHY_INTERFACE_MODE_SGMII);
  #line 1040 
  if (ret != 0) {
    #line 1041 
    netdev_err(pdata->netdev,(char *)"phy_attach_direct failed\n");
    #line 1042 
    phy_device_remove(phydev);
    #line 1043 
    phy_device_free(phydev);
    #line 1044 
    return ret;
  }
  #line 1046 
  phy_data->phydev = phydev;
  #line 1048 
  xgbe_phy_external_phy_quirks(pdata);
  #line 1050 
  linkmode_and((unsigned long *)(& phydev->advertising),(unsigned long *)(& phydev->advertising),(unsigned long *)(& lks->link_modes.advertising));
  #line 1053 
  phy_start_aneg(phy_data->phydev);
  #line 1055 
  return 0;
}

#line 1058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_external_phy(struct xgbe_prv_data *pdata)
{
  #line 1061 
  int ret;
  #line 1060 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1063 
  if (phy_data->sfp_changed == 0U) 
                                   #line 1064 
                                   return;
  #line 1066 
  phy_data->sfp_phy_avail = 0U;
  #line 1068 
  if (phy_data->sfp_base != (unsigned int)XGBE_SFP_BASE_1000_T) 
                                                                #line 1069 
                                                                return;
  #line 1072 
  ret = xgbe_phy_i2c_mii_read(pdata,0);
  #line 1073 
  if (ret < 0) 
               #line 1074 
               return;
  #line 1077 
  phy_data->sfp_phy_avail = 1U;
  #line 1078 
  return;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_check_sfp_rx_los(struct xgbe_phy_data *phy_data)
{
  #line 1082 
  u8 *sfp_extd = (u8 *)(& phy_data->sfp_eeprom.extd);
  #line 1084 
  if (((unsigned long)*(sfp_extd + 1U) & 2UL) == 0UL) 
                                                      #line 1085 
                                                      return (_Bool)0;
  #line 1087 
  if (((unsigned long)phy_data->sfp_gpio_mask & 8UL) != 0UL) 
                                                             #line 1088 
                                                             return (_Bool)0;
  #line 1090 
  if ((phy_data->sfp_gpio_inputs & (unsigned int)(1 << phy_data->sfp_gpio_rx_los)) != 0U) 
    #line 1091 
    return (_Bool)1;
  #line 1093 
  return (_Bool)0;
}

#line 1096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_check_sfp_tx_fault(struct xgbe_phy_data *phy_data)
{
  #line 1098 
  u8 *sfp_extd = (u8 *)(& phy_data->sfp_eeprom.extd);
  #line 1100 
  if (((unsigned long)*(sfp_extd + 1U) & 8UL) == 0UL) 
                                                      #line 1101 
                                                      return (_Bool)0;
  #line 1103 
  if (((unsigned long)phy_data->sfp_gpio_mask & 1UL) != 0UL) 
                                                             #line 1104 
                                                             return (_Bool)0;
  #line 1106 
  if ((phy_data->sfp_gpio_inputs & (unsigned int)(1 << phy_data->sfp_gpio_tx_fault)) != 0U) 
    #line 1107 
    return (_Bool)1;
  #line 1109 
  return (_Bool)0;
}

#line 1112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_check_sfp_mod_absent(struct xgbe_phy_data *phy_data)
{
  #line 1114 
  if (((unsigned long)phy_data->sfp_gpio_mask & 4UL) != 0UL) 
                                                             #line 1115 
                                                             return (_Bool)0;
  #line 1117 
  if ((phy_data->sfp_gpio_inputs & (unsigned int)(1 << phy_data->sfp_gpio_mod_absent)) != 0U) 
    #line 1118 
    return (_Bool)1;
  #line 1120 
  return (_Bool)0;
}

#line 1123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_parse_eeprom(struct xgbe_prv_data *pdata)
{
  #line 1127 
  u8 *sfp_base;
  #line 1125 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1126 
  struct xgbe_sfp_eeprom *sfp_eeprom = & phy_data->sfp_eeprom;
  #line 1129 
  sfp_base = (u8 *)(& sfp_eeprom->base);
  #line 1131 
  if ((unsigned int)*sfp_base != 3U) 
                                     #line 1132 
                                     return;
  #line 1134 
  if ((unsigned int)*(sfp_base + 1U) != 4U) 
                                            #line 1135 
                                            return;
  #line 1138 
  phy_data->sfp_tx_fault = (unsigned int)xgbe_phy_check_sfp_tx_fault(phy_data);
  #line 1139 
  phy_data->sfp_rx_los = (unsigned int)xgbe_phy_check_sfp_rx_los(phy_data);
  #line 1142 
  if (((unsigned long)*(sfp_base + 8U) & 4UL) != 0UL) {
    #line 1143 
    phy_data->sfp_cable = XGBE_SFP_CABLE_PASSIVE;
    #line 1144 
    phy_data->sfp_cable_len = (unsigned int)*(sfp_base + 18U);
  }
  else 
       #line 1146 
       phy_data->sfp_cable = XGBE_SFP_CABLE_ACTIVE;
  #line 1150 
  if (((unsigned long)*(sfp_base + 3U) & 16UL) != 0UL) 
                                                       #line 1151 
                                                       phy_data->sfp_base = XGBE_SFP_BASE_10000_SR;
  else 
    #line 1152 
    if (((unsigned long)*(sfp_base + 3U) & 32UL) != 0UL) 
                                                         #line 1153 
                                                         phy_data->sfp_base = XGBE_SFP_BASE_10000_LR;
    else 
      #line 1154 
      if (((unsigned long)*(sfp_base + 3U) & 64UL) != 0UL) 
                                                           #line 1155 
                                                           phy_data->sfp_base = XGBE_SFP_BASE_10000_LRM;
      else 
        #line 1156 
        if (((unsigned long)*(sfp_base + 3U) & 128UL) != 0UL) 
                                                              #line 1157 
                                                              phy_data->sfp_base = XGBE_SFP_BASE_10000_ER;
        else 
          #line 1158 
          if (((unsigned long)*(sfp_base + 6U) & 1UL) != 0UL) 
                                                              #line 1159 
                                                              phy_data->sfp_base = XGBE_SFP_BASE_1000_SX;
          else 
            #line 1160 
            if (((unsigned long)*(sfp_base + 6U) & 2UL) != 0UL) 
                                                                #line 1161 
                                                                phy_data->sfp_base = XGBE_SFP_BASE_1000_LX;
            else 
              #line 1162 
              if (((unsigned long)*(sfp_base + 6U) & 4UL) != 0UL) 
                                                                  #line 1163 
                                                                  phy_data->sfp_base = XGBE_SFP_BASE_1000_CX;
              else 
                #line 1164 
                if (((unsigned long)*(sfp_base + 6U) & 8UL) != 0UL) 
                                                                    #line 1165 
                                                                    phy_data->sfp_base = XGBE_SFP_BASE_1000_T;
                else 
                  #line 1166 
                  if (phy_data->sfp_cable == (unsigned int)XGBE_SFP_CABLE_PASSIVE) {
                    #line 1166 
                    if ((int)xgbe_phy_sfp_bit_rate(sfp_eeprom,
                              (enum xgbe_sfp_speed)XGBE_SFP_SPEED_10000) != 0) 
                      #line 1168 
                      phy_data->sfp_base = XGBE_SFP_BASE_10000_CR;
                  }
  #line 1170 
  switch ((unsigned int)phy_data->sfp_base) {
    #line 1171 
    case (unsigned int)1: 
                          #line 1171 
    ;
    #line 1172 
    phy_data->sfp_speed = XGBE_SFP_SPEED_100_1000;
    #line 1173 
    break;
    #line 1174 
    case (unsigned int)2: 
                          #line 1174 
    ;
    #line 1175 
    case (unsigned int)3: 
                          #line 1175 
    ;
    #line 1176 
    case (unsigned int)4: 
                          #line 1176 
    ;
    #line 1177 
    phy_data->sfp_speed = XGBE_SFP_SPEED_1000;
    #line 1178 
    break;
    #line 1179 
    case (unsigned int)5: 
                          #line 1179 
    ;
    #line 1180 
    case (unsigned int)6: 
                          #line 1180 
    ;
    #line 1181 
    case (unsigned int)7: 
                          #line 1181 
    ;
    #line 1182 
    case (unsigned int)8: 
                          #line 1182 
    ;
    #line 1183 
    case (unsigned int)9: 
                          #line 1183 
    ;
    #line 1184 
    phy_data->sfp_speed = XGBE_SFP_SPEED_10000;
    #line 1185 
    break;
    #line 1186 
    default: 
             #line 1186 
    ;
    #line 1187 
    break;
  }
  #line 1189 
  return;
}

#line 1191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_eeprom_info(struct xgbe_prv_data *pdata, struct xgbe_sfp_eeprom *sfp_eeprom)
{
  #line 1194 
  struct xgbe_sfp_ascii sfp_ascii;
  #line 1195 
  char *sfp_data = (char *)(& sfp_ascii);
  #line 1197 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 1197 
    bool branch;
    #line 1197 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_eeprom_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"SFP detected:\n", .lineno = (unsigned int)1197U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1197 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 1197 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1197 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,pdata->netdev,(char *)"SFP detected:\n");
  }
  #line 1198 
  memcpy((void *)sfp_data,(void *)(& sfp_eeprom->base[20]),16UL);
  #line 1200 
  *(sfp_data + 16U) = (char)0;
  #line 1201 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 1201 
    bool branch_0;
    #line 1201 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_eeprom_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"  vendor:         %s\n", .lineno = (unsigned int)1201U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1201 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 1201 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1201 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,pdata->netdev,(char *)"  vendor:         %s\n",sfp_data);
  }
  #line 1204 
  memcpy((void *)sfp_data,(void *)(& sfp_eeprom->base[40]),16UL);
  #line 1206 
  *(sfp_data + 16U) = (char)0;
  #line 1207 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 1207 
    bool branch_1;
    #line 1207 
    struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_eeprom_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"  part number:    %s\n", .lineno = (unsigned int)1207U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1207 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
    #line 1207 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 1207 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,pdata->netdev,(char *)"  part number:    %s\n",sfp_data);
  }
  #line 1210 
  memcpy((void *)sfp_data,(void *)(& sfp_eeprom->base[56]),4UL);
  #line 1212 
  *(sfp_data + 4U) = (char)0;
  #line 1213 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 1213 
    bool branch_2;
    #line 1213 
    struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_eeprom_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"  revision level: %s\n", .lineno = (unsigned int)1213U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1213 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
    #line 1213 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 1213 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,pdata->netdev,(char *)"  revision level: %s\n",sfp_data);
  }
  #line 1216 
  memcpy((void *)sfp_data,(void *)(& sfp_eeprom->extd[4]),16UL);
  #line 1218 
  *(sfp_data + 16U) = (char)0;
  #line 1219 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 1219 
    bool branch_3;
    #line 1219 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_eeprom_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"  serial number:  %s\n", .lineno = (unsigned int)1219U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1219 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 1219 
    if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                  #line 1219 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,pdata->netdev,(char *)"  serial number:  %s\n",sfp_data);
  }
  #line 1221 
  return;
}

#line 1223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_sfp_verify_eeprom(u8 cc_in, u8 *buf, unsigned int len)
{
  #line 1225 
  u8 cc;
  #line 1227 
  cc = (unsigned char)0U;
  #line 1227 
  while (len != 0U) {
    #line 1228 
    cc = (unsigned char)((int)*buf + (int)cc);
    #line 1227 
    buf ++;
    #line 1227 
    len --;
  }
  #line 1230 
  return (_Bool)((int)cc == (int)cc_in);
}

#line 1233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_sfp_read_eeprom(struct xgbe_prv_data *pdata)
{
  #line 1236 
  struct xgbe_sfp_eeprom sfp_eeprom;
  #line 1237 
  u8 eeprom_addr;
  #line 1238 
  int ret;
  #line 1235 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1240 
  ret = xgbe_phy_sfp_get_mux(pdata);
  #line 1241 
  if (ret != 0) {
    {
      #line 1242 
      bool __print_once;
      #line 1242 
      if (! __print_once) {
        #line 1242 
        __print_once = (_Bool)1;
        #line 1242 
        ;
        #line 1242 
        _dev_err(pdata->dev,(char *)"%s: I2C error setting SFP MUX\n",netdev_name(pdata->netdev));
      }
    }
    #line 1244 
    return ret;
  }
  #line 1248 
  eeprom_addr = (unsigned char)0U;
  #line 1249 
  ret = xgbe_phy_i2c_read(pdata,80U,(void *)(& eeprom_addr),1U,(void *)(& sfp_eeprom),128U);
  #line 1252 
  if (ret != 0) {
    {
      #line 1253 
      bool __print_once_0;
      #line 1253 
      if (! __print_once_0) {
        #line 1253 
        __print_once_0 = (_Bool)1;
        #line 1253 
        ;
        #line 1253 
        _dev_err(pdata->dev,(char *)"%s: I2C error reading SFP EEPROM\n",netdev_name(pdata->netdev));
      }
    }
    #line 1255 
    goto put;
  }
  #line 1259 
  if (! xgbe_phy_sfp_verify_eeprom((unsigned char)((int)sfp_eeprom.base[63]),
                                   (u8 *)(& sfp_eeprom.base),63U)) {
    #line 1262 
    ret = -22;
    #line 1263 
    goto put;
  }
  #line 1266 
  if (! xgbe_phy_sfp_verify_eeprom((unsigned char)((int)sfp_eeprom.extd[31]),
                                   (u8 *)(& sfp_eeprom.extd),31U)) {
    #line 1269 
    ret = -22;
    #line 1270 
    goto put;
  }
  #line 1274 
  if (memcmp((void *)(& phy_data->sfp_eeprom),(void *)(& sfp_eeprom),128UL) != 0) {
    #line 1275 
    phy_data->sfp_changed = 1U;
    #line 1277 
    if ((pdata->msg_enable & 1U) != 0U) 
                                        #line 1278 
                                        xgbe_phy_sfp_eeprom_info(pdata,& sfp_eeprom);
    #line 1280 
    memcpy((void *)(& phy_data->sfp_eeprom),(void *)(& sfp_eeprom),128UL);
    #line 1282 
    xgbe_phy_free_phy_device(pdata);
  }
  else 
       #line 1284 
       phy_data->sfp_changed = 0U;
  #line 1287 
  put: 
       #line 1287 
  ;
  #line 1288 
  xgbe_phy_sfp_put_mux(pdata);
  #line 1290 
  return ret;
}

#line 1293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_signals(struct xgbe_prv_data *pdata)
{
  #line 1296 
  u8 gpio_reg;
  #line 1296 
  u8 gpio_ports[2U];
  #line 1297 
  int ret;
  #line 1295 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1300 
  gpio_reg = (unsigned char)0U;
  #line 1301 
  ret = xgbe_phy_i2c_read(pdata,phy_data->sfp_gpio_address,(void *)(& gpio_reg),1U,(void *)(& gpio_ports),2U);
  #line 1304 
  if (ret != 0) {
    {
      #line 1305 
      bool __print_once;
      #line 1305 
      if (! __print_once) {
        #line 1305 
        __print_once = (_Bool)1;
        #line 1305 
        ;
        #line 1305 
        _dev_err(pdata->dev,(char *)"%s: I2C error reading SFP GPIOs\n",netdev_name(pdata->netdev));
      }
    }
    #line 1307 
    return;
  }
  #line 1310 
  phy_data->sfp_gpio_inputs = (unsigned int)(((int)gpio_ports[1] << 8) | (int)gpio_ports[0]);
  #line 1312 
  phy_data->sfp_mod_absent = (unsigned int)xgbe_phy_check_sfp_mod_absent(phy_data);
  #line 1313 
  return;
}

#line 1315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_mod_absent(struct xgbe_prv_data *pdata)
{
  #line 1317 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1319 
  xgbe_phy_free_phy_device(pdata);
  #line 1321 
  phy_data->sfp_mod_absent = 1U;
  #line 1322 
  phy_data->sfp_phy_avail = 0U;
  #line 1323 
  memset((void *)(& phy_data->sfp_eeprom),0,128UL);
  #line 1324 
  return;
}

#line 1326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_reset(struct xgbe_phy_data *phy_data)
{
  #line 1328 
  phy_data->sfp_rx_los = 0U;
  #line 1329 
  phy_data->sfp_tx_fault = 0U;
  #line 1330 
  phy_data->sfp_mod_absent = 1U;
  #line 1331 
  phy_data->sfp_base = XGBE_SFP_BASE_UNKNOWN;
  #line 1332 
  phy_data->sfp_cable = XGBE_SFP_CABLE_UNKNOWN;
  #line 1333 
  phy_data->sfp_speed = XGBE_SFP_SPEED_UNKNOWN;
  #line 1334 
  return;
}

#line 1336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_detect(struct xgbe_prv_data *pdata)
{
  #line 1339 
  int ret;
  #line 1338 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1342 
  xgbe_phy_sfp_reset(phy_data);
  #line 1344 
  ret = xgbe_phy_get_comm_ownership(pdata);
  #line 1345 
  if (ret != 0) 
                #line 1346 
                return;
  #line 1349 
  xgbe_phy_sfp_signals(pdata);
  #line 1350 
  if (phy_data->sfp_mod_absent != 0U) {
    #line 1351 
    xgbe_phy_sfp_mod_absent(pdata);
    #line 1352 
    goto put;
  }
  #line 1355 
  ret = xgbe_phy_sfp_read_eeprom(pdata);
  #line 1356 
  if (ret != 0) {
    #line 1358 
    xgbe_phy_sfp_reset(phy_data);
    #line 1359 
    xgbe_phy_sfp_mod_absent(pdata);
    #line 1360 
    goto put;
  }
  #line 1363 
  xgbe_phy_sfp_parse_eeprom(pdata);
  #line 1365 
  xgbe_phy_sfp_external_phy(pdata);
  #line 1367 
  put: 
       #line 1367 
  ;
  #line 1368 
  xgbe_phy_sfp_phy_settings(pdata);
  #line 1370 
  xgbe_phy_put_comm_ownership(pdata);
  #line 1371 
  return;
}

#line 1373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_module_eeprom(struct xgbe_prv_data *pdata, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 1377 
  u8 eeprom_addr;
  #line 1377 
  u8 eeprom_data[512U];
  #line 1378 
  struct xgbe_sfp_eeprom *sfp_eeprom;
  #line 1379 
  unsigned int i;
  #line 1379 
  unsigned int j;
  #line 1379 
  unsigned int rem;
  #line 1380 
  int ret;
  #line 1376 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1382 
  rem = eeprom->len;
  #line 1384 
  if (eeprom->len == 0U) {
    #line 1385 
    ret = -22;
    #line 1386 
    goto done;
  }
  #line 1389 
  if (eeprom->offset + eeprom->len > 512U) {
    #line 1390 
    ret = -22;
    #line 1391 
    goto done;
  }
  #line 1394 
  if (phy_data->port_mode != (unsigned int)XGBE_PORT_MODE_SFP) {
    #line 1395 
    ret = -6;
    #line 1396 
    goto done;
  }
  #line 1399 
  if (! netif_running(pdata->netdev)) {
    #line 1400 
    ret = -5;
    #line 1401 
    goto done;
  }
  #line 1404 
  if (phy_data->sfp_mod_absent != 0U) {
    #line 1405 
    ret = -5;
    #line 1406 
    goto done;
  }
  #line 1409 
  ret = xgbe_phy_get_comm_ownership(pdata);
  #line 1410 
  if (ret != 0) {
    #line 1411 
    ret = -5;
    #line 1412 
    goto done;
  }
  #line 1415 
  ret = xgbe_phy_sfp_get_mux(pdata);
  #line 1416 
  if (ret != 0) {
    #line 1417 
    netdev_err(pdata->netdev,(char *)"I2C error setting SFP MUX\n");
    #line 1418 
    ret = -5;
    #line 1419 
    goto put_own;
  }
  #line 1423 
  eeprom_addr = (unsigned char)0U;
  #line 1424 
  ret = xgbe_phy_i2c_read(pdata,80U,(void *)(& eeprom_addr),1U,(void *)(& eeprom_data),256U);
  #line 1427 
  if (ret != 0) {
    #line 1428 
    netdev_err(pdata->netdev,(char *)"I2C error reading SFP EEPROM\n");
    #line 1430 
    ret = -5;
    #line 1431 
    goto put_mux;
  }
  #line 1434 
  sfp_eeprom = (struct xgbe_sfp_eeprom *)(& eeprom_data);
  #line 1436 
  if ((unsigned int)sfp_eeprom->extd[30] != 0U && ((unsigned long)sfp_eeprom->extd[28] & 4UL) == 0UL) {
    #line 1438 
    eeprom_addr = (unsigned char)0U;
    #line 1439 
    ret = xgbe_phy_i2c_read(pdata,81U,(void *)(& eeprom_addr),1U,(void *)((u8 *)(& eeprom_data) + 256U),256U);
    #line 1443 
    if (ret != 0) {
      #line 1444 
      netdev_err(pdata->netdev,(char *)"I2C error reading SFP DIAGS\n");
      #line 1446 
      ret = -5;
      #line 1447 
      goto put_mux;
    }
  }
  #line 1451 
  i = 0U;
  #line 1451 
  j = eeprom->offset;
  #line 1451 
  while (eeprom->len > i) {
    #line 1452 
    if (j > 255U && ((unsigned int)sfp_eeprom->extd[30] == 0U || ((unsigned long)sfp_eeprom->extd[28] & 4UL) != 0UL)) 
      #line 1454 
      break;
    #line 1456 
    *(data + (unsigned long)i) = eeprom_data[j];
    #line 1457 
    rem --;
    #line 1451 
    i ++;
    #line 1451 
    j ++;
  }
  #line 1460 
  put_mux: 
           #line 1460 
  ;
  #line 1461 
  xgbe_phy_sfp_put_mux(pdata);
  #line 1463 
  put_own: 
           #line 1463 
  ;
  #line 1464 
  xgbe_phy_put_comm_ownership(pdata);
  #line 1466 
  done: 
        #line 1466 
  ;
  #line 1467 
  eeprom->len -= rem;
  #line 1469 
  return ret;
}

#line 1472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_module_info(struct xgbe_prv_data *pdata, struct ethtool_modinfo *modinfo)
{
  #line 1475 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1477 
  if (phy_data->port_mode != (unsigned int)XGBE_PORT_MODE_SFP) 
                                                               #line 1478 
                                                               return -6;
  #line 1480 
  if (! netif_running(pdata->netdev)) 
                                      #line 1481 
                                      return -5;
  #line 1483 
  if (phy_data->sfp_mod_absent != 0U) 
                                      #line 1484 
                                      return -5;
  #line 1486 
  if ((unsigned int)phy_data->sfp_eeprom.extd[30] != 0U && ((unsigned long)phy_data->sfp_eeprom.extd[28] & 4UL) == 0UL) {
    #line 1487 
    modinfo->type = 2U;
    #line 1488 
    modinfo->eeprom_len = 512U;
  }
  else {
    #line 1490 
    modinfo->type = 1U;
    #line 1491 
    modinfo->eeprom_len = 256U;
  }
  #line 1494 
  return 0;
}

#line 1497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_phydev_flowctrl(struct xgbe_prv_data *pdata)
{
  #line 1502 
  u8 fc;
  #line 1499 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 1500 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1501 
  u16 lcl_adv = (unsigned short)0U;
  #line 1501 
  u16 rmt_adv = (unsigned short)0U;
  #line 1504 
  pdata->phy.tx_pause = 0;
  #line 1505 
  pdata->phy.rx_pause = 0;
  #line 1507 
  if (phy_data->phydev == (struct phy_device *)0) 
                                                  #line 1508 
                                                  return;
  #line 1510 
  lcl_adv = (unsigned short)linkmode_adv_to_lcl_adv_t((unsigned long *)(& (phy_data->phydev)->advertising));
  #line 1512 
  if ((phy_data->phydev)->pause != 0) {
    #line 1513 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.lp_advertising));
    #line 1514 
    rmt_adv = (unsigned short)((unsigned int)rmt_adv | 1024U);
  }
  #line 1516 
  if ((phy_data->phydev)->asym_pause != 0) {
    #line 1517 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.lp_advertising));
    #line 1518 
    rmt_adv = (unsigned short)((unsigned int)rmt_adv | 2048U);
  }
  #line 1521 
  fc = mii_resolve_flowctrl_fdx((unsigned short)((int)lcl_adv),(unsigned short)((int)rmt_adv));
  #line 1522 
  if (((int)fc & 1) != 0) 
                          #line 1523 
                          pdata->phy.tx_pause = 1;
  #line 1524 
  if (((int)fc & 2) != 0) 
                          #line 1525 
                          pdata->phy.rx_pause = 1;
  #line 1526 
  return;
}

#line 1528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_an37_sgmii_outcome(struct xgbe_prv_data *pdata)
{
  #line 1531 
  enum xgbe_mode mode;
  #line 1530 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 1533 
  __set_bit(6L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1534 
  __set_bit(7L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1537 
  if (pdata->phy.pause_autoneg != 0) 
                                     #line 1538 
                                     xgbe_phy_phydev_flowctrl(pdata);
  #line 1540 
  switch ((unsigned long)pdata->an_status & 12UL) {
    #line 1541 
    case (unsigned long)4: 
                           #line 1541 
    ;
    #line 1542 
    if (((unsigned long)pdata->an_status & 16UL) != 0UL) {
      #line 1543 
      __set_bit(3L,(unsigned long *)(& lks->link_modes.lp_advertising));
      #line 1544 
      mode = XGBE_MODE_SGMII_100;
    }
    else {
      #line 1547 
      __set_bit(2L,(unsigned long *)(& lks->link_modes.lp_advertising));
      #line 1548 
      mode = XGBE_MODE_UNKNOWN;
    }
    #line 1550 
    break;
    #line 1551 
    case (unsigned long)8: 
                           #line 1551 
    ;
    #line 1552 
    if (((unsigned long)pdata->an_status & 16UL) != 0UL) {
      #line 1553 
      __set_bit(5L,(unsigned long *)(& lks->link_modes.lp_advertising));
      #line 1554 
      mode = XGBE_MODE_SGMII_1000;
    }
    else {
      #line 1557 
      __set_bit(4L,(unsigned long *)(& lks->link_modes.lp_advertising));
      #line 1558 
      mode = XGBE_MODE_UNKNOWN;
    }
    #line 1560 
    break;
    #line 1561 
    default: 
             #line 1561 
    ;
    #line 1562 
    mode = XGBE_MODE_UNKNOWN;
  }
  #line 1565 
  return mode;
}

#line 1568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_an37_outcome(struct xgbe_prv_data *pdata)
{
  #line 1571 
  enum xgbe_mode mode;
  #line 1572 
  unsigned int ad_reg;
  #line 1572 
  unsigned int lp_reg;
  #line 1570 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 1574 
  __set_bit(6L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1575 
  __set_bit(10L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1578 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1075773444);
  #line 1579 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1075773445);
  #line 1580 
  if ((lp_reg & 256U) != 0U) 
                             #line 1581 
                             __set_bit(13L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1582 
  if ((lp_reg & 128U) != 0U) 
                             #line 1583 
                             __set_bit(14L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1585 
  if (pdata->phy.pause_autoneg != 0) {
    #line 1587 
    pdata->phy.tx_pause = 0;
    #line 1588 
    pdata->phy.rx_pause = 0;
    #line 1590 
    if (((ad_reg & lp_reg) & 256U) != 0U) {
      #line 1591 
      pdata->phy.tx_pause = 1;
      #line 1592 
      pdata->phy.rx_pause = 1;
    }
    else 
      #line 1593 
      if (((ad_reg & lp_reg) & 128U) != 0U) 
        #line 1594 
        if ((ad_reg & 256U) != 0U) 
                                   #line 1595 
                                   pdata->phy.rx_pause = 1;
        else 
          #line 1596 
          if ((lp_reg & 256U) != 0U) 
                                     #line 1597 
                                     pdata->phy.tx_pause = 1;
  }
  #line 1601 
  if ((lp_reg & 32U) != 0U) 
                            #line 1602 
                            __set_bit(41L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1605 
  ad_reg &= lp_reg;
  #line 1606 
  if ((ad_reg & 32U) != 0U) 
                            #line 1606 
                            mode = XGBE_MODE_X; else 
                                                     #line 1606 
                                                     mode = XGBE_MODE_UNKNOWN;
  #line 1608 
  return mode;
}

#line 1611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_an73_redrv_outcome(struct xgbe_prv_data *pdata)
{
  #line 1615 
  enum xgbe_mode mode;
  #line 1616 
  unsigned int ad_reg;
  #line 1616 
  unsigned int lp_reg;
  #line 1613 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 1614 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1618 
  __set_bit(6L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1619 
  __set_bit(16L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1622 
  if (pdata->phy.pause_autoneg != 0) 
                                     #line 1623 
                                     xgbe_phy_phydev_flowctrl(pdata);
  #line 1626 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200593);
  #line 1627 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200596);
  #line 1628 
  if ((lp_reg & 128U) != 0U) 
                             #line 1629 
                             __set_bit(19L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1630 
  if ((lp_reg & 32U) != 0U) 
                            #line 1631 
                            __set_bit(17L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1633 
  ad_reg &= lp_reg;
  #line 1634 
  if ((ad_reg & 128U) != 0U) 
    #line 1635 
    switch ((unsigned int)phy_data->port_mode) {
      #line 1636 
      case (unsigned int)1: 
                            #line 1636 
      ;
      #line 1637 
      mode = XGBE_MODE_KR;
      #line 1638 
      break;
      #line 1639 
      default: 
               #line 1639 
      ;
      #line 1640 
      mode = XGBE_MODE_SFI;
      #line 1641 
      break;
    }
  else 
    #line 1643 
    if ((ad_reg & 32U) != 0U) 
      #line 1644 
      switch ((unsigned int)phy_data->port_mode) {
        #line 1645 
        case (unsigned int)1: 
                              #line 1645 
        ;
        #line 1646 
        mode = XGBE_MODE_KX_1000;
        #line 1647 
        break;
        #line 1648 
        case (unsigned int)4: 
                              #line 1648 
        ;
        #line 1649 
        mode = XGBE_MODE_X;
        #line 1650 
        break;
        #line 1651 
        case (unsigned int)8: 
                              #line 1651 
        ;
        #line 1652 
        switch ((unsigned int)phy_data->sfp_base) {
          #line 1653 
          case (unsigned int)1: 
                                #line 1653 
          ;
          #line 1654 
          if (phy_data->phydev != (struct phy_device *)0 && (phy_data->phydev)->speed == 100) 
            #line 1656 
            mode = XGBE_MODE_SGMII_100; else 
                                             #line 1658 
                                             mode = XGBE_MODE_SGMII_1000;
          #line 1659 
          break;
          #line 1660 
          case (unsigned int)2: 
                                #line 1660 
          ;
          #line 1661 
          case (unsigned int)3: 
                                #line 1661 
          ;
          #line 1662 
          case (unsigned int)4: 
                                #line 1662 
          ;
          #line 1663 
          default: 
                   #line 1663 
          ;
          #line 1664 
          mode = XGBE_MODE_X;
          #line 1665 
          break;
        }
        #line 1667 
        break;
        #line 1668 
        default: 
                 #line 1668 
        ;
        #line 1669 
        if (phy_data->phydev != (struct phy_device *)0 && (phy_data->phydev)->speed == 100) 
          #line 1671 
          mode = XGBE_MODE_SGMII_100; else 
                                           #line 1673 
                                           mode = XGBE_MODE_SGMII_1000;
        #line 1674 
        break;
      }
    else 
         #line 1677 
         mode = XGBE_MODE_UNKNOWN;
  #line 1681 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200594);
  #line 1682 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200597);
  #line 1683 
  if ((lp_reg & 49152U) != 0U) 
                               #line 1684 
                               __set_bit(20L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1686 
  return mode;
}

#line 1689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_an73_outcome(struct xgbe_prv_data *pdata)
{
  #line 1692 
  enum xgbe_mode mode;
  #line 1693 
  unsigned int ad_reg;
  #line 1693 
  unsigned int lp_reg;
  #line 1691 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 1695 
  __set_bit(6L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1696 
  __set_bit(16L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1699 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200592);
  #line 1700 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200595);
  #line 1701 
  if ((lp_reg & 1024U) != 0U) 
                              #line 1702 
                              __set_bit(13L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1703 
  if ((lp_reg & 2048U) != 0U) 
                              #line 1704 
                              __set_bit(14L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1706 
  if (pdata->phy.pause_autoneg != 0) {
    #line 1708 
    pdata->phy.tx_pause = 0;
    #line 1709 
    pdata->phy.rx_pause = 0;
    #line 1711 
    if (((ad_reg & lp_reg) & 1024U) != 0U) {
      #line 1712 
      pdata->phy.tx_pause = 1;
      #line 1713 
      pdata->phy.rx_pause = 1;
    }
    else 
      #line 1714 
      if (((ad_reg & lp_reg) & 2048U) != 0U) 
        #line 1715 
        if ((ad_reg & 1024U) != 0U) 
                                    #line 1716 
                                    pdata->phy.rx_pause = 1;
        else 
          #line 1717 
          if ((lp_reg & 1024U) != 0U) 
                                      #line 1718 
                                      pdata->phy.tx_pause = 1;
  }
  #line 1723 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200593);
  #line 1724 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200596);
  #line 1725 
  if ((lp_reg & 128U) != 0U) 
                             #line 1726 
                             __set_bit(19L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1727 
  if ((lp_reg & 32U) != 0U) 
                            #line 1728 
                            __set_bit(17L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1730 
  ad_reg &= lp_reg;
  #line 1731 
  if ((ad_reg & 128U) != 0U) 
                             #line 1732 
                             mode = XGBE_MODE_KR;
  else 
    #line 1733 
    if ((ad_reg & 32U) != 0U) 
                              #line 1734 
                              mode = XGBE_MODE_KX_1000; else 
                                                             #line 1736 
                                                             mode = XGBE_MODE_UNKNOWN;
  #line 1739 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200594);
  #line 1740 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200597);
  #line 1741 
  if ((lp_reg & 49152U) != 0U) 
                               #line 1742 
                               __set_bit(20L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 1744 
  return mode;
}

#line 1747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_an_outcome(struct xgbe_prv_data *pdata)
{
  #line 1749 
  switch ((unsigned int)pdata->an_mode) {
    #line 1750 
    case (unsigned int)0: 
                          #line 1750 
    ;
    #line 1751 
    return xgbe_phy_an73_outcome(pdata);
    #line 1752 
    case (unsigned int)1: 
                          #line 1752 
    ;
    #line 1753 
    return xgbe_phy_an73_redrv_outcome(pdata);
    #line 1754 
    case (unsigned int)2: 
                          #line 1754 
    ;
    #line 1755 
    return xgbe_phy_an37_outcome(pdata);
    #line 1756 
    case (unsigned int)3: 
                          #line 1756 
    ;
    #line 1757 
    return xgbe_phy_an37_sgmii_outcome(pdata);
    #line 1758 
    default: 
             #line 1758 
    ;
    #line 1759 
    return XGBE_MODE_UNKNOWN;
  }
}

#line 1763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_an_advertising(struct xgbe_prv_data *pdata, struct ethtool_link_ksettings *dlks)
{
  #line 1766 
  struct ethtool_link_ksettings *slks = & pdata->phy.lks;
  #line 1767 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1769 
  bitmap_copy((unsigned long *)(& dlks->link_modes.advertising),(unsigned long *)(& slks->link_modes.advertising),74U);
  #line 1772 
  if (phy_data->redrv == 0U) 
                             #line 1773 
                             return;
  #line 1776 
  __set_bit(17L,(unsigned long *)(& dlks->link_modes.advertising));
  #line 1777 
  __set_bit(19L,(unsigned long *)(& dlks->link_modes.advertising));
  #line 1780 
  if ((pdata->fec_ability & 1U) != 0U) 
                                       #line 1781 
                                       __set_bit(20L,(unsigned long *)(& dlks->link_modes.advertising));
  #line 1783 
  switch ((unsigned int)phy_data->port_mode) {
    #line 1784 
    case (unsigned int)1: 
                          #line 1784 
    ;
    #line 1785 
    __set_bit(19L,(unsigned long *)(& dlks->link_modes.advertising));
    #line 1786 
    break;
    #line 1787 
    case (unsigned int)2: 
                          #line 1787 
    ;
    #line 1788 
    __set_bit(17L,(unsigned long *)(& dlks->link_modes.advertising));
    #line 1789 
    break;
    #line 1790 
    case (unsigned int)3: 
                          #line 1790 
    ;
    #line 1791 
    case (unsigned int)4: 
                          #line 1791 
    ;
    #line 1792 
    case (unsigned int)5: 
                          #line 1792 
    ;
    #line 1793 
    __set_bit(17L,(unsigned long *)(& dlks->link_modes.advertising));
    #line 1794 
    break;
    #line 1795 
    case (unsigned int)6: 
                          #line 1795 
    ;
    #line 1796 
    if (phy_data->phydev != (struct phy_device *)0 && (phy_data->phydev)->speed == 10000) 
      #line 1798 
      __set_bit(19L,(unsigned long *)(& dlks->link_modes.advertising)); else 
                                                                    #line 1800 
                                                                    __set_bit(17L,(unsigned long *)(& dlks->link_modes.advertising));
    #line 1801 
    break;
    #line 1802 
    case (unsigned int)7: 
                          #line 1802 
    ;
    #line 1803 
    __set_bit(19L,(unsigned long *)(& dlks->link_modes.advertising));
    #line 1804 
    break;
    #line 1805 
    case (unsigned int)8: 
                          #line 1805 
    ;
    #line 1806 
    switch ((unsigned int)phy_data->sfp_base) {
      #line 1807 
      case (unsigned int)1: 
                            #line 1807 
      ;
      #line 1808 
      case (unsigned int)2: 
                            #line 1808 
      ;
      #line 1809 
      case (unsigned int)3: 
                            #line 1809 
      ;
      #line 1810 
      case (unsigned int)4: 
                            #line 1810 
      ;
      #line 1811 
      __set_bit(17L,(unsigned long *)(& dlks->link_modes.advertising));
      #line 1812 
      break;
      #line 1813 
      default: 
               #line 1813 
      ;
      #line 1814 
      __set_bit(19L,(unsigned long *)(& dlks->link_modes.advertising));
      #line 1815 
      break;
    }
    #line 1817 
    break;
    #line 1818 
    default: 
             #line 1818 
    ;
    #line 1819 
    __set_bit(19L,(unsigned long *)(& dlks->link_modes.advertising));
    #line 1820 
    break;
  }
  #line 1822 
  return;
}

#line 1824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_an_config(struct xgbe_prv_data *pdata)
{
  #line 1828 
  int ret;
  #line 1826 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 1827 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1830 
  ret = xgbe_phy_find_phy_device(pdata);
  #line 1831 
  if (ret != 0) 
                #line 1832 
                return ret;
  #line 1834 
  if (phy_data->phydev == (struct phy_device *)0) 
                                                  #line 1835 
                                                  return 0;
  #line 1837 
  (phy_data->phydev)->autoneg = (unsigned int)pdata->phy.autoneg;
  #line 1838 
  linkmode_and((unsigned long *)(& (phy_data->phydev)->advertising),(unsigned long *)(& (phy_data->phydev)->supported),(unsigned long *)(& lks->link_modes.advertising));
  #line 1842 
  if (pdata->phy.autoneg != 1) {
    #line 1843 
    (phy_data->phydev)->speed = pdata->phy.speed;
    #line 1844 
    (phy_data->phydev)->duplex = pdata->phy.duplex;
  }
  #line 1847 
  ret = phy_start_aneg(phy_data->phydev);
  #line 1849 
  return ret;
}

#line 1852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_an_mode xgbe_phy_an_sfp_mode(struct xgbe_phy_data *phy_data)
{
  #line 1854 
  switch ((unsigned int)phy_data->sfp_base) {
    #line 1855 
    case (unsigned int)1: 
                          #line 1855 
    ;
    #line 1856 
    return XGBE_AN_MODE_CL37_SGMII;
    #line 1857 
    case (unsigned int)2: 
                          #line 1857 
    ;
    #line 1858 
    case (unsigned int)3: 
                          #line 1858 
    ;
    #line 1859 
    case (unsigned int)4: 
                          #line 1859 
    ;
    #line 1860 
    return XGBE_AN_MODE_CL37;
    #line 1861 
    default: 
             #line 1861 
    ;
    #line 1862 
    return XGBE_AN_MODE_NONE;
  }
}

#line 1866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_an_mode xgbe_phy_an_mode(struct xgbe_prv_data *pdata)
{
  #line 1868 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1871 
  if (phy_data->redrv != 0U) 
                             #line 1872 
                             return XGBE_AN_MODE_CL73_REDRV;
  #line 1874 
  switch ((unsigned int)phy_data->port_mode) {
    #line 1875 
    case (unsigned int)1: 
                          #line 1875 
    ;
    #line 1876 
    return XGBE_AN_MODE_CL73;
    #line 1877 
    case (unsigned int)2: 
                          #line 1877 
    ;
    #line 1878 
    return XGBE_AN_MODE_NONE;
    #line 1879 
    case (unsigned int)3: 
                          #line 1879 
    ;
    #line 1880 
    return XGBE_AN_MODE_CL37_SGMII;
    #line 1881 
    case (unsigned int)4: 
                          #line 1881 
    ;
    #line 1882 
    return XGBE_AN_MODE_CL37;
    #line 1883 
    case (unsigned int)5: 
                          #line 1883 
    ;
    #line 1884 
    return XGBE_AN_MODE_CL37_SGMII;
    #line 1885 
    case (unsigned int)6: 
                          #line 1885 
    ;
    #line 1886 
    return XGBE_AN_MODE_CL73;
    #line 1887 
    case (unsigned int)7: 
                          #line 1887 
    ;
    #line 1888 
    return XGBE_AN_MODE_NONE;
    #line 1889 
    case (unsigned int)8: 
                          #line 1889 
    ;
    #line 1890 
    return xgbe_phy_an_sfp_mode(phy_data);
    #line 1891 
    default: 
             #line 1891 
    ;
    #line 1892 
    return XGBE_AN_MODE_NONE;
  }
}

#line 1896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_set_redrv_mode_mdio(struct xgbe_prv_data *pdata, enum xgbe_phy_redrv_mode mode)
{
  #line 1900 
  u16 redrv_reg;
  #line 1900 
  u16 redrv_val;
  #line 1899 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1902 
  redrv_reg = (unsigned short)((unsigned int)((unsigned short)phy_data->redrv_lane) * 4096U + 4784U);
  #line 1903 
  redrv_val = (unsigned short)mode;
  #line 1905 
  return (*(pdata->hw_if.write_ext_mii_regs))(pdata,(int)phy_data->redrv_addr,
                                           (int)redrv_reg,
                                           (unsigned short)((int)redrv_val));
}

#line 1909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_set_redrv_mode_i2c(struct xgbe_prv_data *pdata, enum xgbe_phy_redrv_mode mode)
{
  #line 1913 
  unsigned int redrv_reg;
  #line 1914 
  int ret;
  #line 1912 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1917 
  redrv_reg = phy_data->redrv_lane * 4096U + 4784U;
  #line 1919 
  ret = xgbe_phy_redrv_write(pdata,redrv_reg,(unsigned int)mode);
  #line 1921 
  return ret;
}

#line 1924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_set_redrv_mode(struct xgbe_prv_data *pdata)
{
  #line 1927 
  enum xgbe_phy_redrv_mode mode;
  #line 1928 
  int ret;
  #line 1926 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1930 
  if (phy_data->redrv == 0U) 
                             #line 1931 
                             return;
  #line 1933 
  mode = XGBE_PHY_REDRV_MODE_CX;
  #line 1934 
  if ((phy_data->port_mode == (unsigned int)XGBE_PORT_MODE_SFP && phy_data->sfp_base != (unsigned int)XGBE_SFP_BASE_1000_CX) && phy_data->sfp_base != (unsigned int)XGBE_SFP_BASE_10000_CR) 
    #line 1937 
    mode = XGBE_PHY_REDRV_MODE_SR;
  #line 1939 
  ret = xgbe_phy_get_comm_ownership(pdata);
  #line 1940 
  if (ret != 0) 
                #line 1941 
                return;
  #line 1943 
  if (phy_data->redrv_if != 0U) 
                                #line 1944 
                                xgbe_phy_set_redrv_mode_i2c(pdata,mode); else 
                                                                    #line 1946 
                                                                    xgbe_phy_set_redrv_mode_mdio(pdata,mode);
  #line 1948 
  xgbe_phy_put_comm_ownership(pdata);
  #line 1949 
  return;
}

#line 1951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_perform_ratechange(struct xgbe_prv_data *pdata, unsigned int cmd, unsigned int sub_cmd)
{
  #line 1955 
  unsigned int wait;
  #line 1954 
  unsigned int s0 = 0U;
  #line 1958 
  if ((ioread32(pdata->xprop_regs + 100U) & 1U) != 0U) 
    #line 1959 
    if ((pdata->msg_enable & 4U) != 0U) {
      #line 1959 
      bool branch;
      #line 1959 
      struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_perform_ratechange", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"firmware mailbox not ready for command\n", .lineno = (unsigned int)1959U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1959 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
      #line 1959 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1959 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,pdata->netdev,(char *)"firmware mailbox not ready for command\n");
    }
  #line 1963 
  s0 &= 4294967040U;
  #line 1963 
  s0 = (cmd & 255U) | s0;
  #line 1964 
  s0 &= 4294902015U;
  #line 1964 
  s0 = ((sub_cmd << 8) & 65535U) | s0;
  #line 1967 
  iowrite32(s0,pdata->xprop_regs + 104U);
  #line 1968 
  iowrite32(0U,pdata->xprop_regs + 108U);
  {
    #line 1969 
    u32 reg_val = ioread32(pdata->xprop_regs + 96U);
    #line 1969 
    reg_val &= 4294967294U;
    #line 1969 
    reg_val |= 1U;
    #line 1969 
    iowrite32(reg_val,pdata->xprop_regs + 96U);
  }
  #line 1972 
  wait = 500U;
  #line 1973 
  while (1) {
    #line 1973 
    unsigned int tmp_3;
    #line 1973 
    tmp_3 = wait;
    #line 1973 
    wait --;
    #line 1973 
    ;
    #line 1973 
    if (! (tmp_3 != 0U)) 
                         #line 1973 
                         break;
    {
      #line 1974 
      if ((ioread32(pdata->xprop_regs + 100U) & 1U) == 0U) 
                                                           #line 1975 
                                                           return;
      #line 1977 
      usleep_range(1000UL,2000UL);
    }
  }
  #line 1980 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 1980 
    bool branch_0;
    #line 1980 
    struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_perform_ratechange", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"firmware mailbox command did not complete\n", .lineno = (unsigned int)1980U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1980 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
    #line 1980 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1980 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,pdata->netdev,(char *)"firmware mailbox command did not complete\n");
  }
  #line 1982 
  return;
}

#line 1984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_rrc(struct xgbe_prv_data *pdata)
{
  #line 1987 
  xgbe_phy_perform_ratechange(pdata,5U,0U);
  #line 1989 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 1989 
    bool branch;
    #line 1989 
    struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_rrc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"receiver reset complete\n", .lineno = (unsigned int)1989U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1989 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
    #line 1989 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1989 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,pdata->netdev,(char *)"receiver reset complete\n");
  }
  #line 1991 
  return;
}

#line 1992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_power_off(struct xgbe_prv_data *pdata)
{
  #line 1994 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 1997 
  xgbe_phy_perform_ratechange(pdata,0U,0U);
  #line 1999 
  phy_data->cur_mode = XGBE_MODE_UNKNOWN;
  #line 2001 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 2001 
    bool branch;
    #line 2001 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_power_off", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"phy powered off\n", .lineno = (unsigned int)2001U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2001 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 2001 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2001 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,pdata->netdev,(char *)"phy powered off\n");
  }
  #line 2003 
  return;
}

#line 2004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfi_mode(struct xgbe_prv_data *pdata)
{
  #line 2006 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2008 
  xgbe_phy_set_redrv_mode(pdata);
  #line 2011 
  if (phy_data->sfp_cable != (unsigned int)XGBE_SFP_CABLE_PASSIVE) 
                                                                   #line 2012 
                                                                   xgbe_phy_perform_ratechange(pdata,3U,0U);
  else 
    #line 2014 
    if (phy_data->sfp_cable_len <= 1U) 
                                       #line 2015 
                                       xgbe_phy_perform_ratechange(pdata,3U,1U);
    else 
      #line 2016 
      if (phy_data->sfp_cable_len <= 3U) 
                                         #line 2017 
                                         xgbe_phy_perform_ratechange(pdata,3U,2U); else 
                                                                    #line 2019 
                                                                    xgbe_phy_perform_ratechange(pdata,3U,3U);
  #line 2022 
  phy_data->cur_mode = XGBE_MODE_SFI;
  #line 2024 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 2024 
    bool branch;
    #line 2024 
    struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfi_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"10GbE SFI mode set\n", .lineno = (unsigned int)2024U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2024 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
    #line 2024 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2024 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,pdata->netdev,(char *)"10GbE SFI mode set\n");
  }
  #line 2026 
  return;
}

#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_x_mode(struct xgbe_prv_data *pdata)
{
  #line 2029 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2031 
  xgbe_phy_set_redrv_mode(pdata);
  #line 2034 
  xgbe_phy_perform_ratechange(pdata,1U,3U);
  #line 2036 
  phy_data->cur_mode = XGBE_MODE_X;
  #line 2038 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 2038 
    bool branch;
    #line 2038 
    struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_x_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"1GbE X mode set\n", .lineno = (unsigned int)2038U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2038 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
    #line 2038 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2038 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,pdata->netdev,(char *)"1GbE X mode set\n");
  }
  #line 2040 
  return;
}

#line 2041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sgmii_1000_mode(struct xgbe_prv_data *pdata)
{
  #line 2043 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2045 
  xgbe_phy_set_redrv_mode(pdata);
  #line 2048 
  xgbe_phy_perform_ratechange(pdata,1U,2U);
  #line 2050 
  phy_data->cur_mode = XGBE_MODE_SGMII_1000;
  #line 2052 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 2052 
    bool branch;
    #line 2052 
    struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sgmii_1000_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"1GbE SGMII mode set\n", .lineno = (unsigned int)2052U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2052 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
    #line 2052 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2052 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,pdata->netdev,(char *)"1GbE SGMII mode set\n");
  }
  #line 2054 
  return;
}

#line 2055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sgmii_100_mode(struct xgbe_prv_data *pdata)
{
  #line 2057 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2059 
  xgbe_phy_set_redrv_mode(pdata);
  #line 2062 
  xgbe_phy_perform_ratechange(pdata,1U,1U);
  #line 2064 
  phy_data->cur_mode = XGBE_MODE_SGMII_100;
  #line 2066 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 2066 
    bool branch;
    #line 2066 
    struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sgmii_100_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"100MbE SGMII mode set\n", .lineno = (unsigned int)2066U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2066 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
    #line 2066 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2066 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,pdata->netdev,(char *)"100MbE SGMII mode set\n");
  }
  #line 2068 
  return;
}

#line 2069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_kr_mode(struct xgbe_prv_data *pdata)
{
  #line 2071 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2073 
  xgbe_phy_set_redrv_mode(pdata);
  #line 2076 
  xgbe_phy_perform_ratechange(pdata,4U,0U);
  #line 2078 
  phy_data->cur_mode = XGBE_MODE_KR;
  #line 2080 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 2080 
    bool branch;
    #line 2080 
    struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_kr_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"10GbE KR mode set\n", .lineno = (unsigned int)2080U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2080 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
    #line 2080 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2080 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,pdata->netdev,(char *)"10GbE KR mode set\n");
  }
  #line 2082 
  return;
}

#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_kx_2500_mode(struct xgbe_prv_data *pdata)
{
  #line 2085 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2087 
  xgbe_phy_set_redrv_mode(pdata);
  #line 2090 
  xgbe_phy_perform_ratechange(pdata,2U,0U);
  #line 2092 
  phy_data->cur_mode = XGBE_MODE_KX_2500;
  #line 2094 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 2094 
    bool branch;
    #line 2094 
    struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_kx_2500_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"2.5GbE KX mode set\n", .lineno = (unsigned int)2094U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2094 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
    #line 2094 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2094 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,pdata->netdev,(char *)"2.5GbE KX mode set\n");
  }
  #line 2096 
  return;
}

#line 2097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_kx_1000_mode(struct xgbe_prv_data *pdata)
{
  #line 2099 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2101 
  xgbe_phy_set_redrv_mode(pdata);
  #line 2104 
  xgbe_phy_perform_ratechange(pdata,1U,3U);
  #line 2106 
  phy_data->cur_mode = XGBE_MODE_KX_1000;
  #line 2108 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 2108 
    bool branch;
    #line 2108 
    struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_kx_1000_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"1GbE KX mode set\n", .lineno = (unsigned int)2108U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2108 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
    #line 2108 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2108 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,pdata->netdev,(char *)"1GbE KX mode set\n");
  }
  #line 2110 
  return;
}

#line 2111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_cur_mode(struct xgbe_prv_data *pdata)
{
  #line 2113 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2115 
  return phy_data->cur_mode;
}

#line 2118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_switch_baset_mode(struct xgbe_prv_data *pdata)
{
  #line 2120 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2123 
  if (phy_data->port_mode != (unsigned int)XGBE_PORT_MODE_10GBASE_T) {
    #line 2124 
    return xgbe_phy_cur_mode(pdata);
  }
  #line 2126 
  switch ((unsigned int)xgbe_phy_cur_mode(pdata)) {
    #line 2127 
    case (unsigned int)4: 
                          #line 2127 
    ;
    #line 2128 
    case (unsigned int)5: 
                          #line 2128 
    ;
    #line 2129 
    return XGBE_MODE_KR;
    #line 2130 
    case (unsigned int)2: 
                          #line 2130 
    ;
    #line 2131 
    default: 
             #line 2131 
    ;
    #line 2132 
    return XGBE_MODE_SGMII_1000;
  }
}

#line 2136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_switch_bp_2500_mode(struct xgbe_prv_data *pdata)
{
  #line 2138 
  return XGBE_MODE_KX_2500;
}

#line 2141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_switch_bp_mode(struct xgbe_prv_data *pdata)
{
  #line 2144 
  switch ((unsigned int)xgbe_phy_cur_mode(pdata)) {
    #line 2145 
    case (unsigned int)0: 
                          #line 2145 
    ;
    #line 2146 
    return XGBE_MODE_KR;
    #line 2147 
    case (unsigned int)2: 
                          #line 2147 
    ;
    #line 2148 
    default: 
             #line 2148 
    ;
    #line 2149 
    return XGBE_MODE_KX_1000;
  }
}

#line 2153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_switch_mode(struct xgbe_prv_data *pdata)
{
  #line 2155 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2157 
  switch ((unsigned int)phy_data->port_mode) {
    #line 2158 
    case (unsigned int)1: 
                          #line 2158 
    ;
    #line 2159 
    return xgbe_phy_switch_bp_mode(pdata);
    #line 2160 
    case (unsigned int)2: 
                          #line 2160 
    ;
    #line 2161 
    return xgbe_phy_switch_bp_2500_mode(pdata);
    #line 2162 
    case (unsigned int)3: 
                          #line 2162 
    ;
    #line 2163 
    case (unsigned int)5: 
                          #line 2163 
    ;
    #line 2164 
    case (unsigned int)6: 
                          #line 2164 
    ;
    #line 2165 
    return xgbe_phy_switch_baset_mode(pdata);
    #line 2166 
    case (unsigned int)4: 
                          #line 2166 
    ;
    #line 2167 
    case (unsigned int)7: 
                          #line 2167 
    ;
    #line 2168 
    case (unsigned int)8: 
                          #line 2168 
    ;
    #line 2170 
    return xgbe_phy_cur_mode(pdata);
    #line 2171 
    default: 
             #line 2171 
    ;
    #line 2172 
    return XGBE_MODE_UNKNOWN;
  }
}

#line 2176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_get_basex_mode(struct xgbe_phy_data *phy_data, int speed)
{
  #line 2179 
  switch (speed) {
    #line 2180 
    case 1000: 
               #line 2180 
    ;
    #line 2181 
    return XGBE_MODE_X;
    #line 2182 
    case 10000: 
                #line 2182 
    ;
    #line 2183 
    return XGBE_MODE_KR;
    #line 2184 
    default: 
             #line 2184 
    ;
    #line 2185 
    return XGBE_MODE_UNKNOWN;
  }
}

#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_get_baset_mode(struct xgbe_phy_data *phy_data, int speed)
{
  #line 2192 
  switch (speed) {
    #line 2193 
    case 100: 
              #line 2193 
    ;
    #line 2194 
    return XGBE_MODE_SGMII_100;
    #line 2195 
    case 1000: 
               #line 2195 
    ;
    #line 2196 
    return XGBE_MODE_SGMII_1000;
    #line 2197 
    case 2500: 
               #line 2197 
    ;
    #line 2198 
    return XGBE_MODE_KX_2500;
    #line 2199 
    case 10000: 
                #line 2199 
    ;
    #line 2200 
    return XGBE_MODE_KR;
    #line 2201 
    default: 
             #line 2201 
    ;
    #line 2202 
    return XGBE_MODE_UNKNOWN;
  }
}

#line 2206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_get_sfp_mode(struct xgbe_phy_data *phy_data, int speed)
{
  #line 2209 
  switch (speed) {
    #line 2210 
    case 100: 
              #line 2210 
    ;
    #line 2211 
    return XGBE_MODE_SGMII_100;
    #line 2212 
    case 1000: 
               #line 2212 
    ;
    #line 2213 
    if (phy_data->sfp_base == (unsigned int)XGBE_SFP_BASE_1000_T) 
                                                                  #line 2214 
                                                                  return XGBE_MODE_SGMII_1000; else 
                                                                    #line 2216 
                                                                    return XGBE_MODE_X;
    #line 2217 
    case 10000: 
                #line 2217 
    ;
    #line 2218 
    case -1: 
             #line 2218 
    ;
    #line 2219 
    return XGBE_MODE_SFI;
    #line 2220 
    default: 
             #line 2220 
    ;
    #line 2221 
    return XGBE_MODE_UNKNOWN;
  }
}

#line 2225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_get_bp_2500_mode(int speed)
{
  #line 2227 
  switch (speed) {
    #line 2228 
    case 2500: 
               #line 2228 
    ;
    #line 2229 
    return XGBE_MODE_KX_2500;
    #line 2230 
    default: 
             #line 2230 
    ;
    #line 2231 
    return XGBE_MODE_UNKNOWN;
  }
}

#line 2235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_get_bp_mode(int speed)
{
  #line 2237 
  switch (speed) {
    #line 2238 
    case 1000: 
               #line 2238 
    ;
    #line 2239 
    return XGBE_MODE_KX_1000;
    #line 2240 
    case 10000: 
                #line 2240 
    ;
    #line 2241 
    return XGBE_MODE_KR;
    #line 2242 
    default: 
             #line 2242 
    ;
    #line 2243 
    return XGBE_MODE_UNKNOWN;
  }
}

#line 2247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static enum xgbe_mode xgbe_phy_get_mode(struct xgbe_prv_data *pdata, int speed)
{
  #line 2250 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2252 
  switch ((unsigned int)phy_data->port_mode) {
    #line 2253 
    case (unsigned int)1: 
                          #line 2253 
    ;
    #line 2254 
    return xgbe_phy_get_bp_mode(speed);
    #line 2255 
    case (unsigned int)2: 
                          #line 2255 
    ;
    #line 2256 
    return xgbe_phy_get_bp_2500_mode(speed);
    #line 2257 
    case (unsigned int)3: 
                          #line 2257 
    ;
    #line 2258 
    case (unsigned int)5: 
                          #line 2258 
    ;
    #line 2259 
    case (unsigned int)6: 
                          #line 2259 
    ;
    #line 2260 
    return xgbe_phy_get_baset_mode(phy_data,speed);
    #line 2261 
    case (unsigned int)4: 
                          #line 2261 
    ;
    #line 2262 
    case (unsigned int)7: 
                          #line 2262 
    ;
    #line 2263 
    return xgbe_phy_get_basex_mode(phy_data,speed);
    #line 2264 
    case (unsigned int)8: 
                          #line 2264 
    ;
    #line 2265 
    return xgbe_phy_get_sfp_mode(phy_data,speed);
    #line 2266 
    default: 
             #line 2266 
    ;
    #line 2267 
    return XGBE_MODE_UNKNOWN;
  }
}

#line 2271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_set_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 2273 
  switch ((unsigned int)mode) {
    #line 2274 
    case (unsigned int)0: 
                          #line 2274 
    ;
    #line 2275 
    xgbe_phy_kx_1000_mode(pdata);
    #line 2276 
    break;
    #line 2277 
    case (unsigned int)1: 
                          #line 2277 
    ;
    #line 2278 
    xgbe_phy_kx_2500_mode(pdata);
    #line 2279 
    break;
    #line 2280 
    case (unsigned int)2: 
                          #line 2280 
    ;
    #line 2281 
    xgbe_phy_kr_mode(pdata);
    #line 2282 
    break;
    #line 2283 
    case (unsigned int)4: 
                          #line 2283 
    ;
    #line 2284 
    xgbe_phy_sgmii_100_mode(pdata);
    #line 2285 
    break;
    #line 2286 
    case (unsigned int)5: 
                          #line 2286 
    ;
    #line 2287 
    xgbe_phy_sgmii_1000_mode(pdata);
    #line 2288 
    break;
    #line 2289 
    case (unsigned int)3: 
                          #line 2289 
    ;
    #line 2290 
    xgbe_phy_x_mode(pdata);
    #line 2291 
    break;
    #line 2292 
    case (unsigned int)6: 
                          #line 2292 
    ;
    #line 2293 
    xgbe_phy_sfi_mode(pdata);
    #line 2294 
    break;
    #line 2295 
    default: 
             #line 2295 
    ;
    #line 2296 
    break;
  }
  #line 2298 
  return;
}

#line 2300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_check_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode, bool advert)
{
  #line 2303 
  if (pdata->phy.autoneg == 1) 
                               #line 2304 
                               return advert;
  else {
    #line 2306 
    enum xgbe_mode cur_mode;
    #line 2308 
    cur_mode = xgbe_phy_get_mode(pdata,pdata->phy.speed);
    #line 2309 
    if (cur_mode == mode) 
                          #line 2310 
                          return (_Bool)1;
  }
  #line 2313 
  return (_Bool)0;
}

#line 2316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_use_basex_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 2319 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 2321 
  switch ((unsigned int)mode) {
    #line 2322 
    case (unsigned int)3: 
                          #line 2322 
    ;
    #line 2323 
    ;
    #line 2323 
    ;
    #line 2323 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(41L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2325 
    case (unsigned int)2: 
                          #line 2325 
    ;
    #line 2326 
    ;
    #line 2326 
    ;
    #line 2326 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(19L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2328 
    default: 
             #line 2328 
    ;
    #line 2329 
    return (_Bool)0;
  }
}

#line 2333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_use_baset_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 2336 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 2338 
  switch ((unsigned int)mode) {
    #line 2339 
    case (unsigned int)4: 
                          #line 2339 
    ;
    #line 2340 
    ;
    #line 2340 
    ;
    #line 2340 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(3L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2342 
    case (unsigned int)5: 
                          #line 2342 
    ;
    #line 2343 
    ;
    #line 2343 
    ;
    #line 2343 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(5L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2345 
    case (unsigned int)1: 
                          #line 2345 
    ;
    #line 2346 
    ;
    #line 2346 
    ;
    #line 2346 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(47L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2348 
    case (unsigned int)2: 
                          #line 2348 
    ;
    #line 2349 
    ;
    #line 2349 
    ;
    #line 2349 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(12L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2351 
    default: 
             #line 2351 
    ;
    #line 2352 
    return (_Bool)0;
  }
}

#line 2356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_use_sfp_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 2359 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 2360 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2362 
  switch ((unsigned int)mode) {
    #line 2385 
    int tmp_10;
    #line 2363 
    case (unsigned int)3: 
                          #line 2363 
    ;
    #line 2364 
    if (phy_data->sfp_base == (unsigned int)XGBE_SFP_BASE_1000_T) 
                                                                  #line 2365 
                                                                  return (_Bool)0;
    #line 2366 
    ;
    #line 2366 
    ;
    #line 2366 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(41L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2368 
    case (unsigned int)4: 
                          #line 2368 
    ;
    #line 2369 
    if (phy_data->sfp_base != (unsigned int)XGBE_SFP_BASE_1000_T) 
                                                                  #line 2370 
                                                                  return (_Bool)0;
    #line 2371 
    ;
    #line 2371 
    ;
    #line 2371 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(3L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2373 
    case (unsigned int)5: 
                          #line 2373 
    ;
    #line 2374 
    if (phy_data->sfp_base != (unsigned int)XGBE_SFP_BASE_1000_T) 
                                                                  #line 2375 
                                                                  return (_Bool)0;
    #line 2376 
    ;
    #line 2376 
    ;
    #line 2376 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(5L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2378 
    case (unsigned int)6: 
                          #line 2378 
    ;
    #line 2379 
    if (phy_data->sfp_mod_absent != 0U) 
                                        #line 2380 
                                        return (_Bool)1;
    #line 2385 
    if ((int)test_bit(43L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
      #line 2385 
      tmp_10 = 1;
    else {
      #line 2382 
      if ((int)test_bit(44L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
        #line 2385 
        tmp_10 = 1;
      else {
        #line 2383 
        if ((int)test_bit(45L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
          #line 2385 
          tmp_10 = 1;
        else {
          #line 2384 
          if ((int)test_bit(46L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
            #line 2385 
            tmp_10 = 1;
          else {
            #line 2385 
            if ((int)test_bit(42L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
              #line 2385 
              tmp_10 = 1; else 
                               #line 2385 
                               tmp_10 = 0;
          }
        }
      }
    }
    #line 2381 
    ;
    #line 2381 
    ;
    #line 2381 
    return xgbe_phy_check_mode(pdata,mode,(_Bool)((int)((_Bool)(tmp_10 != 0))));
    #line 2387 
    default: 
             #line 2387 
    ;
    #line 2388 
    return (_Bool)0;
  }
}

#line 2392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_use_bp_2500_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 2395 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 2397 
  switch ((unsigned int)mode) {
    #line 2398 
    case (unsigned int)1: 
                          #line 2398 
    ;
    #line 2399 
    ;
    #line 2399 
    ;
    #line 2399 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(15L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2401 
    default: 
             #line 2401 
    ;
    #line 2402 
    return (_Bool)0;
  }
}

#line 2406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_use_bp_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 2409 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 2411 
  switch ((unsigned int)mode) {
    #line 2412 
    case (unsigned int)0: 
                          #line 2412 
    ;
    #line 2413 
    ;
    #line 2413 
    ;
    #line 2413 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(17L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2415 
    case (unsigned int)2: 
                          #line 2415 
    ;
    #line 2416 
    ;
    #line 2416 
    ;
    #line 2416 
    return xgbe_phy_check_mode(pdata,mode,
                            (_Bool)((bool)((int)test_bit(19L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 2418 
    default: 
             #line 2418 
    ;
    #line 2419 
    return (_Bool)0;
  }
}

#line 2423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_use_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 2425 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2427 
  switch ((unsigned int)phy_data->port_mode) {
    #line 2428 
    case (unsigned int)1: 
                          #line 2428 
    ;
    #line 2429 
    return xgbe_phy_use_bp_mode(pdata,mode);
    #line 2430 
    case (unsigned int)2: 
                          #line 2430 
    ;
    #line 2431 
    return xgbe_phy_use_bp_2500_mode(pdata,mode);
    #line 2432 
    case (unsigned int)3: 
                          #line 2432 
    ;
    #line 2433 
    case (unsigned int)5: 
                          #line 2433 
    ;
    #line 2434 
    case (unsigned int)6: 
                          #line 2434 
    ;
    #line 2435 
    return xgbe_phy_use_baset_mode(pdata,mode);
    #line 2436 
    case (unsigned int)4: 
                          #line 2436 
    ;
    #line 2437 
    case (unsigned int)7: 
                          #line 2437 
    ;
    #line 2438 
    return xgbe_phy_use_basex_mode(pdata,mode);
    #line 2439 
    case (unsigned int)8: 
                          #line 2439 
    ;
    #line 2440 
    return xgbe_phy_use_sfp_mode(pdata,mode);
    #line 2441 
    default: 
             #line 2441 
    ;
    #line 2442 
    return (_Bool)0;
  }
}

#line 2446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_valid_speed_basex_mode(struct xgbe_phy_data *phy_data, int speed)
{
  #line 2449 
  switch (speed) {
    #line 2450 
    case 1000: 
               #line 2450 
    ;
    #line 2451 
    return (_Bool)(phy_data->port_mode == (unsigned int)XGBE_PORT_MODE_1000BASE_X);
    #line 2452 
    case 10000: 
                #line 2452 
    ;
    #line 2453 
    return (_Bool)(phy_data->port_mode == (unsigned int)XGBE_PORT_MODE_10GBASE_R);
    #line 2454 
    default: 
             #line 2454 
    ;
    #line 2455 
    return (_Bool)0;
  }
}

#line 2459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_valid_speed_baset_mode(struct xgbe_phy_data *phy_data, int speed)
{
  #line 2462 
  switch (speed) {
    #line 2463 
    case 100: 
              #line 2463 
    ;
    #line 2464 
    case 1000: 
               #line 2464 
    ;
    #line 2465 
    return (_Bool)1;
    #line 2466 
    case 2500: 
               #line 2466 
    ;
    #line 2467 
    return (_Bool)(phy_data->port_mode == (unsigned int)XGBE_PORT_MODE_NBASE_T);
    #line 2468 
    case 10000: 
                #line 2468 
    ;
    #line 2469 
    return (_Bool)(phy_data->port_mode == (unsigned int)XGBE_PORT_MODE_10GBASE_T);
    #line 2470 
    default: 
             #line 2470 
    ;
    #line 2471 
    return (_Bool)0;
  }
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_valid_speed_sfp_mode(struct xgbe_phy_data *phy_data, int speed)
{
  #line 2478 
  switch (speed) {
    #line 2479 
    case 100: 
              #line 2479 
    ;
    #line 2480 
    return (_Bool)(phy_data->sfp_speed == (unsigned int)XGBE_SFP_SPEED_100_1000);
    #line 2481 
    case 1000: 
               #line 2481 
    ;
    #line 2482 
    return (_Bool)((unsigned int)phy_data->sfp_speed + 4294967295U <= 1U);
    #line 2484 
    case 10000: 
                #line 2484 
    ;
    #line 2485 
    return (_Bool)(phy_data->sfp_speed == (unsigned int)XGBE_SFP_SPEED_10000);
    #line 2486 
    default: 
             #line 2486 
    ;
    #line 2487 
    return (_Bool)0;
  }
}

#line 2491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_valid_speed_bp_2500_mode(int speed)
{
  #line 2493 
  switch (speed) {
    #line 2494 
    case 2500: 
               #line 2494 
    ;
    #line 2495 
    return (_Bool)1;
    #line 2496 
    default: 
             #line 2496 
    ;
    #line 2497 
    return (_Bool)0;
  }
}

#line 2501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_valid_speed_bp_mode(int speed)
{
  #line 2503 
  switch (speed) {
    #line 2504 
    case 1000: 
               #line 2504 
    ;
    #line 2505 
    case 10000: 
                #line 2505 
    ;
    #line 2506 
    return (_Bool)1;
    #line 2507 
    default: 
             #line 2507 
    ;
    #line 2508 
    return (_Bool)0;
  }
}

#line 2512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_valid_speed(struct xgbe_prv_data *pdata, int speed)
{
  #line 2514 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2516 
  switch ((unsigned int)phy_data->port_mode) {
    #line 2517 
    case (unsigned int)1: 
                          #line 2517 
    ;
    #line 2518 
    return xgbe_phy_valid_speed_bp_mode(speed);
    #line 2519 
    case (unsigned int)2: 
                          #line 2519 
    ;
    #line 2520 
    return xgbe_phy_valid_speed_bp_2500_mode(speed);
    #line 2521 
    case (unsigned int)3: 
                          #line 2521 
    ;
    #line 2522 
    case (unsigned int)5: 
                          #line 2522 
    ;
    #line 2523 
    case (unsigned int)6: 
                          #line 2523 
    ;
    #line 2524 
    return xgbe_phy_valid_speed_baset_mode(phy_data,speed);
    #line 2525 
    case (unsigned int)4: 
                          #line 2525 
    ;
    #line 2526 
    case (unsigned int)7: 
                          #line 2526 
    ;
    #line 2527 
    return xgbe_phy_valid_speed_basex_mode(phy_data,speed);
    #line 2528 
    case (unsigned int)8: 
                          #line 2528 
    ;
    #line 2529 
    return xgbe_phy_valid_speed_sfp_mode(phy_data,speed);
    #line 2530 
    default: 
             #line 2530 
    ;
    #line 2531 
    return (_Bool)0;
  }
}

#line 2535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_link_status(struct xgbe_prv_data *pdata, int *an_restart)
{
  #line 2538 
  unsigned int reg;
  #line 2539 
  int ret;
  #line 2579 
  unsigned int tmp_2;
  #line 2537 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2541 
  *an_restart = 0;
  #line 2543 
  if (phy_data->port_mode == (unsigned int)XGBE_PORT_MODE_SFP) {
    #line 2545 
    xgbe_phy_sfp_detect(pdata);
    #line 2547 
    if (phy_data->sfp_changed != 0U) {
      #line 2548 
      *an_restart = 1;
      #line 2549 
      return 0;
    }
    #line 2552 
    if (phy_data->sfp_mod_absent != 0U || phy_data->sfp_rx_los != 0U) 
      #line 2553 
      return 0;
  }
  #line 2556 
  if (phy_data->phydev != (struct phy_device *)0) {
    #line 2558 
    ret = phy_read_status(phy_data->phydev);
    #line 2559 
    if (ret < 0) 
                 #line 2560 
                 return 0;
    #line 2562 
    if (pdata->phy.autoneg == 1) {
      #line 2562 
      if (phy_aneg_done(phy_data->phydev) == 0) 
                                                #line 2564 
                                                return 0;
    }
    #line 2566 
    if ((unsigned int)(phy_data->phydev)->link == 0U) 
                                                      #line 2567 
                                                      return 0;
  }
  #line 2573 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938433);
  #line 2574 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938433);
  #line 2575 
  if ((reg & 4U) != 0U) 
                        #line 2576 
                        return 1;
  #line 2579 
  tmp_2 = phy_data->rrc_count;
  #line 2579 
  (phy_data->rrc_count) ++;
  #line 2579 
  ;
  #line 2579 
  if (tmp_2 > 10U) {
    #line 2580 
    phy_data->rrc_count = 0U;
    #line 2581 
    xgbe_phy_rrc(pdata);
  }
  #line 2584 
  return 0;
}

#line 2587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_gpio_setup(struct xgbe_prv_data *pdata)
{
  #line 2589 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2591 
  phy_data->sfp_gpio_address = ((pdata->pp3 >> 8) & 7U) + 32U;
  #line 2595 
  phy_data->sfp_gpio_mask = pdata->pp3 >> 28;
  #line 2598 
  phy_data->sfp_gpio_rx_los = (pdata->pp3 >> 24) & 15U;
  #line 2600 
  phy_data->sfp_gpio_tx_fault = (pdata->pp3 >> 12) & 15U;
  #line 2602 
  phy_data->sfp_gpio_mod_absent = (pdata->pp3 >> 20) & 15U;
  #line 2604 
  phy_data->sfp_gpio_rate_select = (pdata->pp3 >> 16) & 15U;
  #line 2607 
  if ((pdata->msg_enable & 2U) != 0U) {
    {
      #line 2608 
      bool branch;
      #line 2608 
      struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_gpio_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"SFP: gpio_address=%#x\n", .lineno = (unsigned int)2608U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2608 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
      #line 2608 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2608 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug461,pdata->dev,(char *)"SFP: gpio_address=%#x\n",phy_data->sfp_gpio_address);
    }
    {
      #line 2610 
      bool branch_0;
      #line 2610 
      struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_gpio_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"SFP: gpio_mask=%#x\n", .lineno = (unsigned int)2610U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2610 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
      #line 2610 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 2610 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug462,pdata->dev,(char *)"SFP: gpio_mask=%#x\n",phy_data->sfp_gpio_mask);
    }
    {
      #line 2612 
      bool branch_1;
      #line 2612 
      struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_gpio_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"SFP: gpio_rx_los=%u\n", .lineno = (unsigned int)2612U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2612 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
      #line 2612 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 2612 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug463,pdata->dev,(char *)"SFP: gpio_rx_los=%u\n",phy_data->sfp_gpio_rx_los);
    }
    {
      #line 2614 
      bool branch_2;
      #line 2614 
      struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_gpio_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"SFP: gpio_tx_fault=%u\n", .lineno = (unsigned int)2614U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2614 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
      #line 2614 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 2614 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug464,pdata->dev,(char *)"SFP: gpio_tx_fault=%u\n",phy_data->sfp_gpio_tx_fault);
    }
    {
      #line 2616 
      bool branch_3;
      #line 2616 
      struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_gpio_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"SFP: gpio_mod_absent=%u\n", .lineno = (unsigned int)2616U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2616 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
      #line 2616 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 2616 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug465,pdata->dev,(char *)"SFP: gpio_mod_absent=%u\n",phy_data->sfp_gpio_mod_absent);
    }
    {
      #line 2618 
      bool branch_4;
      #line 2618 
      struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_gpio_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"SFP: gpio_rate_select=%u\n", .lineno = (unsigned int)2618U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2618 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
      #line 2618 
      if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                    #line 2618 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug466,pdata->dev,(char *)"SFP: gpio_rate_select=%u\n",phy_data->sfp_gpio_rate_select);
    }
  }
  #line 2621 
  return;
}

#line 2623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_comm_setup(struct xgbe_prv_data *pdata)
{
  #line 2626 
  unsigned int mux_addr_hi;
  #line 2626 
  unsigned int mux_addr_lo;
  #line 2625 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2628 
  mux_addr_hi = (pdata->pp4 >> 8) & 31U;
  #line 2629 
  mux_addr_lo = pdata->pp4 & 7U;
  #line 2630 
  if (mux_addr_lo == 7U) 
                         #line 2631 
                         return;
  #line 2633 
  phy_data->sfp_comm = XGBE_SFP_COMM_PCA9545;
  #line 2634 
  phy_data->sfp_mux_address = (mux_addr_hi << 2) + mux_addr_lo;
  #line 2635 
  phy_data->sfp_mux_channel = (pdata->pp4 >> 4) & 7U;
  #line 2638 
  if ((pdata->msg_enable & 2U) != 0U) {
    {
      #line 2639 
      bool branch;
      #line 2639 
      struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_comm_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"SFP: mux_address=%#x\n", .lineno = (unsigned int)2639U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2639 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
      #line 2639 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2639 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug467,pdata->dev,(char *)"SFP: mux_address=%#x\n",phy_data->sfp_mux_address);
    }
    {
      #line 2641 
      bool branch_0;
      #line 2641 
      struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_sfp_comm_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"SFP: mux_channel=%u\n", .lineno = (unsigned int)2641U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2641 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
      #line 2641 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 2641 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug468,pdata->dev,(char *)"SFP: mux_channel=%u\n",phy_data->sfp_mux_channel);
    }
  }
  #line 2644 
  return;
}

#line 2646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_sfp_setup(struct xgbe_prv_data *pdata)
{
  #line 2648 
  xgbe_phy_sfp_comm_setup(pdata);
  #line 2649 
  xgbe_phy_sfp_gpio_setup(pdata);
  #line 2650 
  return;
}

#line 2652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_int_mdio_reset(struct xgbe_prv_data *pdata)
{
  #line 2655 
  unsigned int ret;
  #line 2654 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2657 
  ret = (unsigned int)(*(pdata->hw_if.set_gpio))(pdata,phy_data->mdio_reset_gpio);
  #line 2658 
  if (ret != 0U) 
                 #line 2659 
                 return (int)ret;
  #line 2661 
  ret = (unsigned int)(*(pdata->hw_if.clr_gpio))(pdata,phy_data->mdio_reset_gpio);
  #line 2663 
  return (int)ret;
}

#line 2666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_i2c_mdio_reset(struct xgbe_prv_data *pdata)
{
  #line 2669 
  u8 gpio_reg;
  #line 2669 
  u8 gpio_ports[2U];
  #line 2669 
  u8 gpio_data[3U];
  #line 2670 
  int ret;
  #line 2668 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2673 
  gpio_reg = (unsigned char)2U;
  #line 2674 
  ret = xgbe_phy_i2c_read(pdata,phy_data->mdio_reset_addr,(void *)(& gpio_reg),1U,(void *)(& gpio_ports),2U);
  #line 2677 
  if (ret != 0) 
                #line 2678 
                return ret;
  #line 2681 
  gpio_data[0] = (unsigned char)2U;
  #line 2682 
  gpio_data[1] = gpio_ports[0];
  #line 2683 
  gpio_data[2] = gpio_ports[1];
  #line 2686 
  if (phy_data->mdio_reset_gpio <= 7U) 
                                       #line 2687 
                                       gpio_data[1] = (unsigned char)((int)gpio_data[1] | (1 << (phy_data->mdio_reset_gpio & 7U))); else 
                                                                    #line 2689 
                                                                    gpio_data[2] = (unsigned char)((int)gpio_data[2] | (1 << (phy_data->mdio_reset_gpio & 7U)));
  #line 2692 
  ret = xgbe_phy_i2c_write(pdata,phy_data->mdio_reset_addr,(void *)(& gpio_data),3U);
  #line 2694 
  if (ret != 0) 
                #line 2695 
                return ret;
  #line 2698 
  if (phy_data->mdio_reset_gpio <= 7U) 
                                       #line 2699 
                                       gpio_data[1] = (unsigned char)((int)gpio_data[1] & ~ (1 << (phy_data->mdio_reset_gpio & 7U))); else 
                                                                    #line 2701 
                                                                    gpio_data[2] = (unsigned char)((int)gpio_data[2] & ~ (1 << (phy_data->mdio_reset_gpio & 7U)));
  #line 2704 
  ret = xgbe_phy_i2c_write(pdata,phy_data->mdio_reset_addr,(void *)(& gpio_data),3U);
  #line 2707 
  return ret;
}

#line 2710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_mdio_reset(struct xgbe_prv_data *pdata)
{
  #line 2713 
  int ret;
  #line 2712 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2715 
  if (phy_data->conn_type != (unsigned int)XGBE_CONN_TYPE_MDIO) 
                                                                #line 2716 
                                                                return 0;
  #line 2718 
  ret = xgbe_phy_get_comm_ownership(pdata);
  #line 2719 
  if (ret != 0) 
                #line 2720 
                return ret;
  #line 2722 
  if (phy_data->mdio_reset == (unsigned int)XGBE_MDIO_RESET_I2C_GPIO) 
    #line 2723 
    ret = xgbe_phy_i2c_mdio_reset(pdata);
  else 
    #line 2724 
    if (phy_data->mdio_reset == (unsigned int)XGBE_MDIO_RESET_INT_GPIO) 
      #line 2725 
      ret = xgbe_phy_int_mdio_reset(pdata);
  #line 2727 
  xgbe_phy_put_comm_ownership(pdata);
  #line 2729 
  return ret;
}

#line 2732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_redrv_error(struct xgbe_phy_data *phy_data)
{
  #line 2734 
  if (phy_data->redrv == 0U) 
                             #line 2735 
                             return (_Bool)0;
  #line 2737 
  if (phy_data->redrv_if > 1U) 
                               #line 2738 
                               return (_Bool)1;
  #line 2740 
  switch (phy_data->redrv_model) {
    #line 2741 
    case (unsigned int)0: 
                          #line 2741 
    ;
    #line 2742 
    if (phy_data->redrv_lane > 3U) 
                                   #line 2743 
                                   return (_Bool)1;
    #line 2744 
    break;
    #line 2745 
    case (unsigned int)1: 
                          #line 2745 
    ;
    #line 2746 
    if (phy_data->redrv_lane > 1U) 
                                   #line 2747 
                                   return (_Bool)1;
    #line 2748 
    break;
    #line 2749 
    default: 
             #line 2749 
    ;
    #line 2750 
    return (_Bool)1;
  }
  #line 2753 
  return (_Bool)0;
}

#line 2756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_mdio_reset_setup(struct xgbe_prv_data *pdata)
{
  #line 2758 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2760 
  if (phy_data->conn_type != (unsigned int)XGBE_CONN_TYPE_MDIO) 
                                                                #line 2761 
                                                                return 0;
  #line 2763 
  phy_data->mdio_reset = (enum xgbe_mdio_reset)(pdata->pp3 & 3U);
  #line 2764 
  switch ((unsigned int)phy_data->mdio_reset) {
    #line 2765 
    case (unsigned int)0: 
                          #line 2765 
    ;
    #line 2766 
    case (unsigned int)1: 
                          #line 2766 
    ;
    #line 2767 
    case (unsigned int)2: 
                          #line 2767 
    ;
    #line 2768 
    break;
    #line 2769 
    default: 
             #line 2769 
    ;
    #line 2770 
    _dev_err(pdata->dev,(char *)"unsupported MDIO reset (%#x)\n",(unsigned int)phy_data->mdio_reset);
    #line 2772 
    return -22;
  }
  #line 2775 
  if (phy_data->mdio_reset == (unsigned int)XGBE_MDIO_RESET_I2C_GPIO) {
    #line 2776 
    phy_data->mdio_reset_addr = ((pdata->pp3 >> 8) & 7U) + 32U;
    #line 2779 
    phy_data->mdio_reset_gpio = (pdata->pp3 >> 12) & 15U;
  }
  else 
    #line 2781 
    if (phy_data->mdio_reset == (unsigned int)XGBE_MDIO_RESET_INT_GPIO) 
      #line 2782 
      phy_data->mdio_reset_gpio = (pdata->pp3 >> 4) & 3U;
  #line 2786 
  return 0;
}

#line 2789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_port_mode_mismatch(struct xgbe_prv_data *pdata)
{
  #line 2791 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2793 
  switch ((unsigned int)phy_data->port_mode) {
    #line 2794 
    case (unsigned int)1: 
                          #line 2794 
    ;
    #line 2795 
    if (((unsigned long)phy_data->port_speeds & 2UL) != 0UL || ((unsigned long)phy_data->port_speeds & 8UL) != 0UL) 
      #line 2797 
      return (_Bool)0;
    #line 2798 
    break;
    #line 2799 
    case (unsigned int)2: 
                          #line 2799 
    ;
    #line 2800 
    if (((unsigned long)phy_data->port_speeds & 4UL) != 0UL) 
                                                             #line 2801 
                                                             return (_Bool)0;
    #line 2802 
    break;
    #line 2803 
    case (unsigned int)3: 
                          #line 2803 
    ;
    #line 2804 
    if (((unsigned long)phy_data->port_speeds & 1UL) != 0UL || ((unsigned long)phy_data->port_speeds & 2UL) != 0UL) 
      #line 2806 
      return (_Bool)0;
    #line 2807 
    break;
    #line 2808 
    case (unsigned int)4: 
                          #line 2808 
    ;
    #line 2809 
    if (((unsigned long)phy_data->port_speeds & 2UL) != 0UL) 
                                                             #line 2810 
                                                             return (_Bool)0;
    #line 2811 
    break;
    #line 2812 
    case (unsigned int)5: 
                          #line 2812 
    ;
    #line 2813 
    if ((((unsigned long)phy_data->port_speeds & 1UL) != 0UL || ((unsigned long)phy_data->port_speeds & 2UL) != 0UL) || ((unsigned long)phy_data->port_speeds & 4UL) != 0UL) 
      #line 2816 
      return (_Bool)0;
    #line 2817 
    break;
    #line 2818 
    case (unsigned int)6: 
                          #line 2818 
    ;
    #line 2819 
    if ((((unsigned long)phy_data->port_speeds & 1UL) != 0UL || ((unsigned long)phy_data->port_speeds & 2UL) != 0UL) || ((unsigned long)phy_data->port_speeds & 8UL) != 0UL) 
      #line 2822 
      return (_Bool)0;
    #line 2823 
    break;
    #line 2824 
    case (unsigned int)7: 
                          #line 2824 
    ;
    #line 2825 
    if (((unsigned long)phy_data->port_speeds & 8UL) != 0UL) 
                                                             #line 2826 
                                                             return (_Bool)0;
    #line 2827 
    break;
    #line 2828 
    case (unsigned int)8: 
                          #line 2828 
    ;
    #line 2829 
    if ((((unsigned long)phy_data->port_speeds & 1UL) != 0UL || ((unsigned long)phy_data->port_speeds & 2UL) != 0UL) || ((unsigned long)phy_data->port_speeds & 8UL) != 0UL) 
      #line 2832 
      return (_Bool)0;
    #line 2833 
    break;
    #line 2834 
    default: 
             #line 2834 
    ;
    #line 2835 
    break;
  }
  #line 2838 
  return (_Bool)1;
}

#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_conn_type_mismatch(struct xgbe_prv_data *pdata)
{
  #line 2843 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2845 
  switch ((unsigned int)phy_data->port_mode) {
    #line 2846 
    case (unsigned int)1: 
                          #line 2846 
    ;
    #line 2847 
    case (unsigned int)2: 
                          #line 2847 
    ;
    #line 2848 
    if (phy_data->conn_type == (unsigned int)XGBE_CONN_TYPE_BACKPLANE) 
      #line 2849 
      return (_Bool)0;
    #line 2850 
    break;
    #line 2851 
    case (unsigned int)3: 
                          #line 2851 
    ;
    #line 2852 
    case (unsigned int)4: 
                          #line 2852 
    ;
    #line 2853 
    case (unsigned int)5: 
                          #line 2853 
    ;
    #line 2854 
    case (unsigned int)6: 
                          #line 2854 
    ;
    #line 2855 
    case (unsigned int)7: 
                          #line 2855 
    ;
    #line 2856 
    if (phy_data->conn_type == (unsigned int)XGBE_CONN_TYPE_MDIO) 
                                                                  #line 2857 
                                                                  return (_Bool)0;
    #line 2858 
    break;
    #line 2859 
    case (unsigned int)8: 
                          #line 2859 
    ;
    #line 2860 
    if (phy_data->conn_type == (unsigned int)XGBE_CONN_TYPE_SFP) 
                                                                 #line 2861 
                                                                 return (_Bool)0;
    #line 2862 
    break;
    #line 2863 
    default: 
             #line 2863 
    ;
    #line 2864 
    break;
  }
  #line 2867 
  return (_Bool)1;
}

#line 2870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static bool xgbe_phy_port_enabled(struct xgbe_prv_data *pdata)
{
  #line 2872 
  if (((pdata->pp0 >> 23) & 15U) == 0U) 
                                        #line 2873 
                                        return (_Bool)0;
  #line 2874 
  if (((pdata->pp0 >> 28) & 7U) == 0U) 
                                       #line 2875 
                                       return (_Bool)0;
  #line 2877 
  return (_Bool)1;
}

#line 2880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_cdr_track(struct xgbe_prv_data *pdata)
{
  #line 2882 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2884 
  if (! pdata->debugfs_an_cdr_workaround) 
                                          #line 2885 
                                          return;
  #line 2887 
  if (phy_data->phy_cdr_notrack == 0U) 
                                       #line 2888 
                                       return;
  #line 2890 
  usleep_range((unsigned long)phy_data->phy_cdr_delay,(unsigned long)(phy_data->phy_cdr_delay + 500U));
  {
    #line 2893 
    u32 mmd_val = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073840214);
    #line 2893 
    mmd_val &= 4294967294U;
    #line 2893 
    mmd_val |= 1U;
    #line 2893 
    (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073840214,(int)mmd_val);
  }
  #line 2897 
  phy_data->phy_cdr_notrack = 0U;
  #line 2898 
  return;
}

#line 2900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_cdr_notrack(struct xgbe_prv_data *pdata)
{
  #line 2902 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2904 
  if (! pdata->debugfs_an_cdr_workaround) 
                                          #line 2905 
                                          return;
  #line 2907 
  if (phy_data->phy_cdr_notrack != 0U) 
                                       #line 2908 
                                       return;
  {
    #line 2910 
    u32 mmd_val = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073840214);
    #line 2910 
    mmd_val &= 4294967294U;
    #line 2910 
    mmd_val = mmd_val;
    #line 2910 
    (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073840214,(int)mmd_val);
  }
  #line 2914 
  xgbe_phy_rrc(pdata);
  #line 2916 
  phy_data->phy_cdr_notrack = 1U;
  #line 2917 
  return;
}

#line 2919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_kr_training_post(struct xgbe_prv_data *pdata)
{
  #line 2921 
  if (! pdata->debugfs_an_cdr_track_early) 
                                           #line 2922 
                                           xgbe_phy_cdr_track(pdata);
  #line 2923 
  return;
}

#line 2925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_kr_training_pre(struct xgbe_prv_data *pdata)
{
  #line 2927 
  if ((int)pdata->debugfs_an_cdr_track_early != 0) 
                                                   #line 2928 
                                                   xgbe_phy_cdr_track(pdata);
  #line 2929 
  return;
}

#line 2931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_an_post(struct xgbe_prv_data *pdata)
{
  #line 2933 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2935 
  switch ((unsigned int)pdata->an_mode) {
    #line 2936 
    case (unsigned int)0: 
                          #line 2936 
    ;
    #line 2937 
    case (unsigned int)1: 
                          #line 2937 
    ;
    #line 2938 
    if (phy_data->cur_mode != (unsigned int)XGBE_MODE_KR) 
                                                          #line 2939 
                                                          break;
    #line 2941 
    xgbe_phy_cdr_track(pdata);
    #line 2943 
    switch ((unsigned int)pdata->an_result) {
      #line 2944 
      case (unsigned int)0: 
                            #line 2944 
      ;
      #line 2945 
      case (unsigned int)3: 
                            #line 2945 
      ;
      #line 2946 
      break;
      #line 2947 
      default: 
               #line 2947 
      ;
      #line 2948 
      if (phy_data->phy_cdr_delay <= 99999U) 
                                             #line 2949 
                                             phy_data->phy_cdr_delay += 10000U; else 
                                                                    #line 2951 
                                                                    phy_data->phy_cdr_delay = 10000U;
      #line 2952 
      break;
    }
    #line 2954 
    break;
    #line 2955 
    default: 
             #line 2955 
    ;
    #line 2956 
    break;
  }
  #line 2958 
  return;
}

#line 2960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_an_pre(struct xgbe_prv_data *pdata)
{
  #line 2962 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2964 
  switch ((unsigned int)pdata->an_mode) {
    #line 2965 
    case (unsigned int)0: 
                          #line 2965 
    ;
    #line 2966 
    case (unsigned int)1: 
                          #line 2966 
    ;
    #line 2967 
    if (phy_data->cur_mode != (unsigned int)XGBE_MODE_KR) 
                                                          #line 2968 
                                                          break;
    #line 2970 
    xgbe_phy_cdr_notrack(pdata);
    #line 2971 
    break;
    #line 2972 
    default: 
             #line 2972 
    ;
    #line 2973 
    break;
  }
  #line 2975 
  return;
}

#line 2977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_stop(struct xgbe_prv_data *pdata)
{
  #line 2979 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 2982 
  xgbe_phy_free_phy_device(pdata);
  #line 2985 
  xgbe_phy_sfp_reset(phy_data);
  #line 2986 
  xgbe_phy_sfp_mod_absent(pdata);
  #line 2989 
  xgbe_phy_cdr_track(pdata);
  #line 2992 
  xgbe_phy_power_off(pdata);
  #line 2995 
  (*(pdata->i2c_if.i2c_stop))(pdata);
  #line 2996 
  return;
}

#line 2998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_start(struct xgbe_prv_data *pdata)
{
  #line 3001 
  int ret;
  #line 3000 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 3004 
  ret = (*(pdata->i2c_if.i2c_start))(pdata);
  #line 3005 
  if (ret != 0) 
                #line 3006 
                return ret;
  #line 3009 
  if (phy_data->redrv != 0U && phy_data->redrv_if == 0U) {
    #line 3010 
    ret = (*(pdata->hw_if.set_ext_mii_mode))(pdata,phy_data->redrv_addr,(enum xgbe_mdio_mode)XGBE_MDIO_MODE_CL22);
    #line 3012 
    if (ret != 0) {
      #line 3013 
      netdev_err(pdata->netdev,(char *)"redriver mdio port not compatible (%u)\n",phy_data->redrv_addr);
      #line 3016 
      return ret;
    }
  }
  #line 3021 
  xgbe_phy_set_mode(pdata,phy_data->start_mode);
  #line 3024 
  xgbe_phy_cdr_track(pdata);
  #line 3027 
  switch ((unsigned int)phy_data->port_mode) {
    #line 3028 
    case (unsigned int)8: 
                          #line 3028 
    ;
    #line 3029 
    xgbe_phy_sfp_detect(pdata);
    #line 3030 
    break;
    #line 3031 
    default: 
             #line 3031 
    ;
    #line 3032 
    break;
  }
  #line 3036 
  ret = xgbe_phy_find_phy_device(pdata);
  #line 3037 
  if (ret != 0) 
                #line 3038 
                goto err_i2c;
  #line 3040 
  return 0;
  #line 3042 
  err_i2c: 
           #line 3042 
  ;
  #line 3043 
  (*(pdata->i2c_if.i2c_stop))(pdata);
  #line 3045 
  return ret;
}

#line 3048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_reset(struct xgbe_prv_data *pdata)
{
  #line 3051 
  enum xgbe_mode cur_mode;
  #line 3052 
  int ret;
  #line 3050 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 3055 
  cur_mode = phy_data->cur_mode;
  #line 3056 
  xgbe_phy_power_off(pdata);
  #line 3057 
  xgbe_phy_set_mode(pdata,cur_mode);
  #line 3059 
  if (phy_data->phydev == (struct phy_device *)0) 
                                                  #line 3060 
                                                  return 0;
  #line 3063 
  ret = xgbe_phy_mdio_reset(pdata);
  #line 3064 
  if (ret != 0) 
                #line 3065 
                return ret;
  #line 3067 
  return phy_init_hw(phy_data->phydev);
}

#line 3070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static void xgbe_phy_exit(struct xgbe_prv_data *pdata)
{
  #line 3072 
  struct xgbe_phy_data *phy_data = (struct xgbe_phy_data *)pdata->phy_data;
  #line 3075 
  mdiobus_unregister(phy_data->mii);
  #line 3076 
  return;
}

#line 3078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
static int xgbe_phy_init(struct xgbe_prv_data *pdata)
{
  #line 3081 
  struct xgbe_phy_data *phy_data;
  #line 3082 
  struct mii_bus *mii;
  #line 3083 
  int ret;
  #line 3080 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 3086 
  if (! xgbe_phy_port_enabled(pdata)) {
    #line 3087 
    _dev_info(pdata->dev,(char *)"device is not enabled\n");
    #line 3088 
    return -19;
  }
  #line 3092 
  ret = (*(pdata->i2c_if.i2c_init))(pdata);
  #line 3093 
  if (ret != 0) 
                #line 3094 
                return ret;
  #line 3096 
  phy_data = (struct xgbe_phy_data *)cif_devm_kzalloc(pdata->dev,296UL,3264U);
  #line 3097 
  if (phy_data == (struct xgbe_phy_data *)0) 
                                             #line 3098 
                                             return -12;
  #line 3099 
  pdata->phy_data = (void *)phy_data;
  #line 3101 
  phy_data->port_mode = (enum xgbe_port_mode)((pdata->pp0 >> 8) & 15U);
  #line 3102 
  phy_data->port_id = pdata->pp0 & 255U;
  #line 3103 
  phy_data->port_speeds = (pdata->pp0 >> 23) & 15U;
  #line 3104 
  phy_data->conn_type = (enum xgbe_conn_type)((pdata->pp0 >> 28) & 7U);
  #line 3105 
  phy_data->mdio_addr = (pdata->pp0 >> 16) & 31U;
  #line 3106 
  if ((pdata->msg_enable & 2U) != 0U) {
    {
      #line 3107 
      bool branch;
      #line 3107 
      struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"port mode=%u\n", .lineno = (unsigned int)3107U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3107 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
      #line 3107 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3107 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug469,pdata->dev,(char *)"port mode=%u\n",(unsigned int)phy_data->port_mode);
    }
    {
      #line 3108 
      bool branch_0;
      #line 3108 
      struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"port id=%u\n", .lineno = (unsigned int)3108U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3108 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
      #line 3108 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3108 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug470,pdata->dev,(char *)"port id=%u\n",phy_data->port_id);
    }
    {
      #line 3109 
      bool branch_1;
      #line 3109 
      struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"port speeds=%#x\n", .lineno = (unsigned int)3109U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3109 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
      #line 3109 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 3109 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug471,pdata->dev,(char *)"port speeds=%#x\n",phy_data->port_speeds);
    }
    {
      #line 3110 
      bool branch_2;
      #line 3110 
      struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"conn type=%u\n", .lineno = (unsigned int)3110U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3110 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
      #line 3110 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 3110 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug472,pdata->dev,(char *)"conn type=%u\n",(unsigned int)phy_data->conn_type);
    }
    {
      #line 3111 
      bool branch_3;
      #line 3111 
      struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"mdio addr=%u\n", .lineno = (unsigned int)3111U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3111 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
      #line 3111 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 3111 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug473,pdata->dev,(char *)"mdio addr=%u\n",phy_data->mdio_addr);
    }
  }
  #line 3114 
  phy_data->redrv = pdata->pp4 >> 31;
  #line 3115 
  phy_data->redrv_if = (pdata->pp4 >> 23) & 1U;
  #line 3116 
  phy_data->redrv_addr = (pdata->pp4 >> 16) & 127U;
  #line 3117 
  phy_data->redrv_lane = (pdata->pp4 >> 24) & 7U;
  #line 3118 
  phy_data->redrv_model = (pdata->pp4 >> 28) & 7U;
  #line 3119 
  if (phy_data->redrv != 0U && (pdata->msg_enable & 2U) != 0U) {
    {
      #line 3120 
      bool branch_4;
      #line 3120 
      struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"redrv present\n", .lineno = (unsigned int)3120U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3120 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
      #line 3120 
      if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                    #line 3120 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug474,pdata->dev,(char *)"redrv present\n");
    }
    {
      #line 3121 
      bool branch_5;
      #line 3121 
      struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"redrv i/f=%u\n", .lineno = (unsigned int)3121U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3121 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
      #line 3121 
      if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                    #line 3121 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug475,pdata->dev,(char *)"redrv i/f=%u\n",phy_data->redrv_if);
    }
    {
      #line 3122 
      bool branch_6;
      #line 3122 
      struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"redrv addr=%#x\n", .lineno = (unsigned int)3122U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3122 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
      #line 3122 
      if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                    #line 3122 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug476,pdata->dev,(char *)"redrv addr=%#x\n",phy_data->redrv_addr);
    }
    {
      #line 3123 
      bool branch_7;
      #line 3123 
      struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"redrv lane=%u\n", .lineno = (unsigned int)3123U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3123 
      branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
      #line 3123 
      if ((long)((long)((int)branch_7 != 0)) != 0L) 
                                                    #line 3123 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug477,pdata->dev,(char *)"redrv lane=%u\n",phy_data->redrv_lane);
    }
    {
      #line 3124 
      bool branch_8;
      #line 3124 
      struct _ddebug __UNIQUE_ID_ddebug478 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"redrv model=%u\n", .lineno = (unsigned int)3124U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3124 
      branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug478.key.dd_key_false.key,(_Bool)0);
      #line 3124 
      if ((long)((long)((int)branch_8 != 0)) != 0L) 
                                                    #line 3124 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug478,pdata->dev,(char *)"redrv model=%u\n",phy_data->redrv_model);
    }
  }
  #line 3128 
  if ((int)xgbe_phy_conn_type_mismatch(pdata) != 0) {
    #line 3129 
    _dev_err(pdata->dev,(char *)"phy mode/connection mismatch (%#x/%#x)\n",(unsigned int)phy_data->port_mode,(unsigned int)phy_data->conn_type);
    #line 3131 
    return -22;
  }
  #line 3135 
  if ((int)xgbe_phy_port_mode_mismatch(pdata) != 0) {
    #line 3136 
    _dev_err(pdata->dev,(char *)"phy mode/speed mismatch (%#x/%#x)\n",(unsigned int)phy_data->port_mode,phy_data->port_speeds);
    #line 3138 
    return -22;
  }
  #line 3142 
  ret = xgbe_phy_mdio_reset_setup(pdata);
  #line 3143 
  if (ret != 0) 
                #line 3144 
                return ret;
  #line 3147 
  if ((int)xgbe_phy_redrv_error(phy_data) != 0) {
    #line 3148 
    _dev_err(pdata->dev,(char *)"phy re-driver settings error\n");
    #line 3149 
    return -22;
  }
  #line 3151 
  pdata->kr_redrv = phy_data->redrv;
  #line 3154 
  phy_data->cur_mode = XGBE_MODE_UNKNOWN;
  #line 3157 
  cif_bitmap_zero((unsigned long *)(& lks->link_modes.supported),74U);
  #line 3159 
  switch ((unsigned int)phy_data->port_mode) {
    #line 3161 
    case (unsigned int)1: 
                          #line 3161 
    ;
    #line 3162 
    __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
    #line 3163 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 3164 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 3165 
    __set_bit(16L,(unsigned long *)(& lks->link_modes.supported));
    #line 3166 
    if (((unsigned long)phy_data->port_speeds & 2UL) != 0UL) {
      #line 3167 
      __set_bit(17L,(unsigned long *)(& lks->link_modes.supported));
      #line 3168 
      phy_data->start_mode = XGBE_MODE_KX_1000;
    }
    #line 3170 
    if (((unsigned long)phy_data->port_speeds & 8UL) != 0UL) {
      #line 3171 
      __set_bit(19L,(unsigned long *)(& lks->link_modes.supported));
      #line 3172 
      if ((pdata->fec_ability & 1U) != 0U) 
                                           #line 3173 
                                           __set_bit(20L,(unsigned long *)(& lks->link_modes.supported));
      #line 3174 
      phy_data->start_mode = XGBE_MODE_KR;
    }
    #line 3177 
    phy_data->phydev_mode = XGBE_MDIO_MODE_NONE;
    #line 3178 
    break;
    #line 3179 
    case (unsigned int)2: 
                          #line 3179 
    ;
    #line 3180 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 3181 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 3182 
    __set_bit(16L,(unsigned long *)(& lks->link_modes.supported));
    #line 3183 
    __set_bit(15L,(unsigned long *)(& lks->link_modes.supported));
    #line 3184 
    phy_data->start_mode = XGBE_MODE_KX_2500;
    #line 3186 
    phy_data->phydev_mode = XGBE_MDIO_MODE_NONE;
    #line 3187 
    break;
    #line 3190 
    case (unsigned int)3: 
                          #line 3190 
    ;
    #line 3191 
    __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
    #line 3192 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 3193 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 3194 
    __set_bit(7L,(unsigned long *)(& lks->link_modes.supported));
    #line 3195 
    if (((unsigned long)phy_data->port_speeds & 1UL) != 0UL) {
      #line 3196 
      __set_bit(3L,(unsigned long *)(& lks->link_modes.supported));
      #line 3197 
      phy_data->start_mode = XGBE_MODE_SGMII_100;
    }
    #line 3199 
    if (((unsigned long)phy_data->port_speeds & 2UL) != 0UL) {
      #line 3200 
      __set_bit(5L,(unsigned long *)(& lks->link_modes.supported));
      #line 3201 
      phy_data->start_mode = XGBE_MODE_SGMII_1000;
    }
    #line 3204 
    phy_data->phydev_mode = XGBE_MDIO_MODE_CL22;
    #line 3205 
    break;
    #line 3208 
    case (unsigned int)4: 
                          #line 3208 
    ;
    #line 3209 
    __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
    #line 3210 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 3211 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 3212 
    __set_bit(10L,(unsigned long *)(& lks->link_modes.supported));
    #line 3213 
    __set_bit(41L,(unsigned long *)(& lks->link_modes.supported));
    #line 3214 
    phy_data->start_mode = XGBE_MODE_X;
    #line 3216 
    phy_data->phydev_mode = XGBE_MDIO_MODE_CL22;
    #line 3217 
    break;
    #line 3220 
    case (unsigned int)5: 
                          #line 3220 
    ;
    #line 3221 
    __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
    #line 3222 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 3223 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 3224 
    __set_bit(7L,(unsigned long *)(& lks->link_modes.supported));
    #line 3225 
    if (((unsigned long)phy_data->port_speeds & 1UL) != 0UL) {
      #line 3226 
      __set_bit(3L,(unsigned long *)(& lks->link_modes.supported));
      #line 3227 
      phy_data->start_mode = XGBE_MODE_SGMII_100;
    }
    #line 3229 
    if (((unsigned long)phy_data->port_speeds & 2UL) != 0UL) {
      #line 3230 
      __set_bit(5L,(unsigned long *)(& lks->link_modes.supported));
      #line 3231 
      phy_data->start_mode = XGBE_MODE_SGMII_1000;
    }
    #line 3233 
    if (((unsigned long)phy_data->port_speeds & 4UL) != 0UL) {
      #line 3234 
      __set_bit(47L,(unsigned long *)(& lks->link_modes.supported));
      #line 3235 
      phy_data->start_mode = XGBE_MODE_KX_2500;
    }
    #line 3238 
    phy_data->phydev_mode = XGBE_MDIO_MODE_CL45;
    #line 3239 
    break;
    #line 3242 
    case (unsigned int)6: 
                          #line 3242 
    ;
    #line 3243 
    __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
    #line 3244 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 3245 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 3246 
    __set_bit(7L,(unsigned long *)(& lks->link_modes.supported));
    #line 3247 
    if (((unsigned long)phy_data->port_speeds & 1UL) != 0UL) {
      #line 3248 
      __set_bit(3L,(unsigned long *)(& lks->link_modes.supported));
      #line 3249 
      phy_data->start_mode = XGBE_MODE_SGMII_100;
    }
    #line 3251 
    if (((unsigned long)phy_data->port_speeds & 2UL) != 0UL) {
      #line 3252 
      __set_bit(5L,(unsigned long *)(& lks->link_modes.supported));
      #line 3253 
      phy_data->start_mode = XGBE_MODE_SGMII_1000;
    }
    #line 3255 
    if (((unsigned long)phy_data->port_speeds & 8UL) != 0UL) {
      #line 3256 
      __set_bit(12L,(unsigned long *)(& lks->link_modes.supported));
      #line 3257 
      phy_data->start_mode = XGBE_MODE_KR;
    }
    #line 3260 
    phy_data->phydev_mode = XGBE_MDIO_MODE_CL45;
    #line 3261 
    break;
    #line 3264 
    case (unsigned int)7: 
                          #line 3264 
    ;
    #line 3265 
    __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
    #line 3266 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 3267 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 3268 
    __set_bit(10L,(unsigned long *)(& lks->link_modes.supported));
    #line 3269 
    __set_bit(43L,(unsigned long *)(& lks->link_modes.supported));
    #line 3270 
    __set_bit(44L,(unsigned long *)(& lks->link_modes.supported));
    #line 3271 
    __set_bit(45L,(unsigned long *)(& lks->link_modes.supported));
    #line 3272 
    __set_bit(46L,(unsigned long *)(& lks->link_modes.supported));
    #line 3273 
    if ((pdata->fec_ability & 1U) != 0U) 
                                         #line 3274 
                                         __set_bit(20L,(unsigned long *)(& lks->link_modes.supported));
    #line 3275 
    phy_data->start_mode = XGBE_MODE_SFI;
    #line 3277 
    phy_data->phydev_mode = XGBE_MDIO_MODE_NONE;
    #line 3278 
    break;
    #line 3281 
    case (unsigned int)8: 
                          #line 3281 
    ;
    #line 3282 
    __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
    #line 3283 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
    #line 3284 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
    #line 3285 
    __set_bit(7L,(unsigned long *)(& lks->link_modes.supported));
    #line 3286 
    __set_bit(10L,(unsigned long *)(& lks->link_modes.supported));
    #line 3287 
    if (((unsigned long)phy_data->port_speeds & 1UL) != 0UL) 
                                                             #line 3288 
                                                             phy_data->start_mode = XGBE_MODE_SGMII_100;
    #line 3289 
    if (((unsigned long)phy_data->port_speeds & 2UL) != 0UL) 
                                                             #line 3290 
                                                             phy_data->start_mode = XGBE_MODE_SGMII_1000;
    #line 3291 
    if (((unsigned long)phy_data->port_speeds & 8UL) != 0UL) 
                                                             #line 3292 
                                                             phy_data->start_mode = XGBE_MODE_SFI;
    #line 3294 
    phy_data->phydev_mode = XGBE_MDIO_MODE_CL22;
    #line 3296 
    xgbe_phy_sfp_setup(pdata);
    #line 3297 
    break;
    #line 3298 
    default: 
             #line 3298 
    ;
    #line 3299 
    return -22;
  }
  #line 3302 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 3303 
    bool branch_9;
    #line 3303 
    struct _ddebug __UNIQUE_ID_ddebug479 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c", .format = (char *)"phy supported=0x%*pb\n", .lineno = (unsigned int)3303U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3303 
    branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug479.key.dd_key_false.key,(_Bool)0);
    #line 3303 
    if ((long)((long)((int)branch_9 != 0)) != 0L) 
                                                  #line 3303 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug479,pdata->dev,(char *)"phy supported=0x%*pb\n",74,(unsigned long *)(& lks->link_modes.supported));
  }
  #line 3307 
  if (((unsigned int)phy_data->conn_type & 2U) != 0U && phy_data->phydev_mode != (unsigned int)XGBE_MDIO_MODE_NONE) {
    #line 3309 
    ret = (*(pdata->hw_if.set_ext_mii_mode))(pdata,phy_data->mdio_addr,phy_data->phydev_mode);
    #line 3311 
    if (ret != 0) {
      #line 3312 
      _dev_err(pdata->dev,(char *)"mdio port/clause not compatible (%d/%u)\n",phy_data->mdio_addr,(unsigned int)phy_data->phydev_mode);
      #line 3315 
      return -22;
    }
  }
  #line 3319 
  if (phy_data->redrv != 0U && phy_data->redrv_if == 0U) {
    #line 3320 
    ret = (*(pdata->hw_if.set_ext_mii_mode))(pdata,phy_data->redrv_addr,(enum xgbe_mdio_mode)XGBE_MDIO_MODE_CL22);
    #line 3322 
    if (ret != 0) {
      #line 3323 
      _dev_err(pdata->dev,(char *)"redriver mdio port not compatible (%u)\n",phy_data->redrv_addr);
      #line 3326 
      return -22;
    }
  }
  #line 3330 
  phy_data->phy_cdr_delay = 10000U;
  #line 3333 
  mii = devm_mdiobus_alloc(pdata->dev);
  #line 3334 
  if (mii == (struct mii_bus *)0) {
    #line 3335 
    _dev_err(pdata->dev,(char *)"mdiobus_alloc failed\n");
    #line 3336 
    return -12;
  }
  #line 3339 
  mii->priv = (void *)pdata;
  #line 3340 
  mii->name = (char *)"amd-xgbe-mii";
  #line 3341 
  mii->read = & xgbe_phy_mii_read;
  #line 3342 
  mii->write = & xgbe_phy_mii_write;
  #line 3343 
  mii->parent = pdata->dev;
  #line 3344 
  mii->phy_mask = 4294967295U;
  #line 3345 
  ;
  #line 3345 
  snprintf((char *)(& mii->id),61UL,(char *)"%s",dev_name(pdata->dev));
  #line 3346 
  ret = __mdiobus_register(mii,& __this_module);
  #line 3347 
  if (ret != 0) {
    #line 3348 
    _dev_err(pdata->dev,(char *)"mdiobus_register failed\n");
    #line 3349 
    return ret;
  }
  #line 3351 
  phy_data->mii = mii;
  #line 3353 
  return 0;
}

#line 3356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c"
void xgbe_init_function_ptrs_phy_v2(struct xgbe_phy_if *phy_if)
{
  #line 3358 
  struct xgbe_phy_impl_if *phy_impl = & phy_if->phy_impl;
  #line 3360 
  phy_impl->init = & xgbe_phy_init;
  #line 3361 
  phy_impl->exit = & xgbe_phy_exit;
  #line 3363 
  phy_impl->reset = & xgbe_phy_reset;
  #line 3364 
  phy_impl->start = & xgbe_phy_start;
  #line 3365 
  phy_impl->stop = & xgbe_phy_stop;
  #line 3367 
  phy_impl->link_status = & xgbe_phy_link_status;
  #line 3369 
  phy_impl->valid_speed = & xgbe_phy_valid_speed;
  #line 3371 
  phy_impl->use_mode = & xgbe_phy_use_mode;
  #line 3372 
  phy_impl->set_mode = & xgbe_phy_set_mode;
  #line 3373 
  phy_impl->get_mode = & xgbe_phy_get_mode;
  #line 3374 
  phy_impl->switch_mode = & xgbe_phy_switch_mode;
  #line 3375 
  phy_impl->cur_mode = & xgbe_phy_cur_mode;
  #line 3377 
  phy_impl->an_mode = & xgbe_phy_an_mode;
  #line 3379 
  phy_impl->an_config = & xgbe_phy_an_config;
  #line 3381 
  phy_impl->an_advertising = & xgbe_phy_an_advertising;
  #line 3383 
  phy_impl->an_outcome = & xgbe_phy_an_outcome;
  #line 3385 
  phy_impl->an_pre = & xgbe_phy_an_pre;
  #line 3386 
  phy_impl->an_post = & xgbe_phy_an_post;
  #line 3388 
  phy_impl->kr_training_pre = & xgbe_phy_kr_training_pre;
  #line 3389 
  phy_impl->kr_training_post = & xgbe_phy_kr_training_post;
  #line 3391 
  phy_impl->module_info = & xgbe_phy_module_info;
  #line 3392 
  phy_impl->module_eeprom = & xgbe_phy_module_eeprom;
  #line 3393 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v2.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 201 
  ldv_bitmap_zero(dst,nbits);
  #line 202 
  return;
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v2.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 222 
  return ldv_is_err(ptr);
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v2.i.aux"
static void cif_mutex_unlock_xgbe_phy_comm_lock(struct mutex *lock)
{
  #line 690 
  ldv_mutex_model_unlock(lock,(char *)"xgbe_phy_comm_lock");
  #line 691 
  return;
}

#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v2.i.aux"
static void cif_mutex_lock_xgbe_phy_comm_lock(struct mutex *lock)
{
  #line 697 
  ldv_mutex_model_lock(lock,(char *)"xgbe_phy_comm_lock");
  #line 698 
  return;
}

#line 701  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v2.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 704 
  return ldv_devm_kzalloc(size,flags);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
#line 695 
static void cif_mutex_lock_i2c_mutex_of_xgbe_prv_data(struct mutex *lock);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void reinit_completion(struct completion *x)
{
  #line 100 
  x->done = 0U;
  #line 101 
  return;
}

#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 118 
#line 118 
void complete(struct completion *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 702  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
static void cif_mutex_unlock_i2c_mutex_of_xgbe_prv_data(struct mutex *lock);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 197 
int devm_request_threaded_irq(struct device *, unsigned int, irqreturn_t (*)(int , void *), irqreturn_t (*)(int , void *), unsigned long, char *, void *);
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static int devm_request_irq(struct device *dev, unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long irqflags, char *devname, void *dev_id)
{
  #line 206 
  return devm_request_threaded_irq(dev,irq,handler,
                                (irqreturn_t (*)(int , void *))0,irqflags,
                                devname,dev_id);
}

#line 216 
#line 709  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
static void cif_devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 717  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static int xgbe_i2c_abort(struct xgbe_prv_data *pdata)
{
  #line 146 
  unsigned int wait = 500U;
  {
    #line 149 
    u32 reg_val = ioread32(pdata->xi2c_regs + 108U);
    #line 149 
    reg_val &= 4294967294U;
    #line 149 
    reg_val |= 1U;
    #line 149 
    iowrite32(reg_val,pdata->xi2c_regs + 108U);
  }
  {
    #line 152 
    u32 reg_val_0 = ioread32(pdata->xi2c_regs + 108U);
    #line 152 
    reg_val_0 &= 4294967293U;
    #line 152 
    reg_val_0 |= 2U;
    #line 152 
    iowrite32(reg_val_0,pdata->xi2c_regs + 108U);
  }
  #line 154 
  while (1) {
    #line 154 
    unsigned int tmp_2;
    #line 154 
    tmp_2 = wait;
    #line 154 
    wait --;
    #line 154 
    ;
    #line 154 
    if (! (tmp_2 != 0U)) 
                         #line 154 
                         break;
    {
      #line 155 
      if ((ioread32(pdata->xi2c_regs + 108U) & 2U) == 0U) 
                                                          #line 156 
                                                          return 0;
      #line 158 
      usleep_range(500UL,600UL);
    }
  }
  #line 161 
  return -16;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static int xgbe_i2c_set_enable(struct xgbe_prv_data *pdata, bool enable)
{
  #line 166 
  unsigned int wait = 1000U;
  #line 167 
  unsigned int mode = (unsigned int)((int)enable != 0);
  #line 169 
  while (1) {
    #line 169 
    unsigned int tmp_1;
    #line 169 
    tmp_1 = wait;
    #line 169 
    wait --;
    #line 169 
    ;
    #line 169 
    if (! (tmp_1 != 0U)) 
                         #line 169 
                         break;
    {
      {
        #line 170 
        u32 reg_val = ioread32(pdata->xi2c_regs + 108U);
        #line 170 
        reg_val &= 4294967294U;
        #line 170 
        reg_val = (mode & 1U) | reg_val;
        #line 170 
        iowrite32(reg_val,pdata->xi2c_regs + 108U);
      }
      #line 171 
      ;
      #line 171 
      if ((ioread32(pdata->xi2c_regs + 156U) & 1U) == mode) 
                                                            #line 172 
                                                            return 0;
      #line 174 
      usleep_range(100UL,110UL);
    }
  }
  #line 177 
  return -16;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static int xgbe_i2c_disable(struct xgbe_prv_data *pdata)
{
  #line 182 
  unsigned int ret;
  #line 184 
  ret = (unsigned int)xgbe_i2c_set_enable(pdata,(_Bool)0);
  #line 185 
  if (ret != 0U) {
    #line 187 
    ret = (unsigned int)xgbe_i2c_abort(pdata);
    #line 188 
    if (ret != 0U) 
                   #line 189 
                   return (int)ret;
    #line 192 
    ret = (unsigned int)xgbe_i2c_set_enable(pdata,(_Bool)0);
  }
  #line 195 
  return (int)ret;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static int xgbe_i2c_enable(struct xgbe_prv_data *pdata)
{
  #line 200 
  return xgbe_i2c_set_enable(pdata,(_Bool)1);
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_clear_all_interrupts(struct xgbe_prv_data *pdata)
{
  #line 205 
  ioread32(pdata->xi2c_regs + 64U);
  #line 206 
  return;
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_disable_interrupts(struct xgbe_prv_data *pdata)
{
  #line 210 
  iowrite32(0U,pdata->xi2c_regs + 48U);
  #line 211 
  return;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_enable_interrupts(struct xgbe_prv_data *pdata)
{
  #line 215 
  iowrite32(596U,pdata->xi2c_regs + 48U);
  #line 216 
  return;
}

#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_write(struct xgbe_prv_data *pdata)
{
  #line 221 
  unsigned int tx_slots;
  #line 222 
  unsigned int cmd;
  #line 220 
  struct xgbe_i2c_op_state *state = & pdata->i2c.op_state;
  #line 225 
  tx_slots = pdata->i2c.tx_fifo_size - ioread32(pdata->xi2c_regs + 116U);
  #line 226 
  while (tx_slots != 0U && state->tx_len != 0U) {
    #line 227 
    if ((state->op)->cmd == (unsigned int)XGBE_I2C_CMD_READ) 
                                                             #line 228 
                                                             cmd = 256U;
    else {
      #line 230 
      unsigned char *tmp_0;
      #line 230 
      tmp_0 = state->tx_buf;
      #line 230 
      (state->tx_buf) ++;
      #line 230 
      cmd = (unsigned int)*tmp_0;
    }
    #line 232 
    if (state->tx_len == 1U) {
      #line 233 
      cmd &= 4294966783U;
      #line 233 
      cmd |= 512U;
    }
    #line 235 
    iowrite32(cmd,pdata->xi2c_regs + 16U);
    #line 237 
    tx_slots --;
    #line 238 
    (state->tx_len) --;
  }
  #line 242 
  if (state->tx_len == 0U) {
    #line 243 
    u32 reg_val = ioread32(pdata->xi2c_regs + 48U);
    #line 243 
    reg_val &= 4294967279U;
    #line 243 
    reg_val = reg_val;
    #line 243 
    iowrite32(reg_val,pdata->xi2c_regs + 48U);
  }
  #line 245 
  return;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_read(struct xgbe_prv_data *pdata)
{
  #line 249 
  unsigned int rx_slots;
  #line 248 
  struct xgbe_i2c_op_state *state = & pdata->i2c.op_state;
  #line 252 
  if ((state->op)->cmd != (unsigned int)XGBE_I2C_CMD_READ) 
                                                           #line 253 
                                                           return;
  #line 255 
  rx_slots = ioread32(pdata->xi2c_regs + 120U);
  #line 256 
  while (rx_slots != 0U && state->rx_len != 0U) {
    #line 257 
    unsigned char *tmp;
    #line 257 
    tmp = state->rx_buf;
    #line 257 
    (state->rx_buf) ++;
    #line 257 
    *tmp = (unsigned char)ioread32(pdata->xi2c_regs + 16U);
    #line 258 
    (state->rx_len) --;
    #line 259 
    rx_slots --;
  }
  #line 261 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_clear_isr_interrupts(struct xgbe_prv_data *pdata, unsigned int isr)
{
  #line 266 
  struct xgbe_i2c_op_state *state = & pdata->i2c.op_state;
  #line 268 
  if (((unsigned long)isr & 64UL) != 0UL) {
    #line 269 
    state->tx_abort_source = ioread32(pdata->xi2c_regs + 128U);
    #line 270 
    ioread32(pdata->xi2c_regs + 84U);
  }
  #line 273 
  if (((unsigned long)isr & 512UL) != 0UL) 
                                           #line 274 
                                           ioread32(pdata->xi2c_regs + 96U);
  #line 275 
  return;
}

#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_isr_task(unsigned long data)
{
  #line 281 
  unsigned int isr;
  #line 279 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)data;
  #line 280 
  struct xgbe_i2c_op_state *state = & pdata->i2c.op_state;
  #line 283 
  isr = ioread32(pdata->xi2c_regs + 52U);
  #line 284 
  if (isr == 0U) 
                 #line 285 
                 goto reissue_check;
  #line 287 
  if ((pdata->msg_enable & 512U) != 0U) {
    #line 287 
    bool branch;
    #line 287 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_i2c_isr_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c", .format = (char *)"I2C interrupt received: status=%#010x\n", .lineno = (unsigned int)287U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 287 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 287 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 287 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,pdata->netdev,(char *)"I2C interrupt received: status=%#010x\n",isr);
  }
  #line 290 
  xgbe_i2c_clear_isr_interrupts(pdata,isr);
  #line 292 
  if (((unsigned long)isr & 64UL) != 0UL) {
    #line 293 
    if ((pdata->msg_enable & 4U) != 0U) {
      #line 293 
      bool branch_0;
      #line 293 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_i2c_isr_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c", .format = (char *)"I2C TX_ABRT received (%#010x) for target %#04x\n", .lineno = (unsigned int)293U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 293 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 293 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 293 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,pdata->netdev,(char *)"I2C TX_ABRT received (%#010x) for target %#04x\n",state->tx_abort_source,(state->op)->target);
    }
    #line 297 
    xgbe_i2c_disable_interrupts(pdata);
    #line 299 
    state->ret = -5;
    #line 300 
    goto out;
  }
  #line 304 
  xgbe_i2c_read(pdata);
  #line 307 
  xgbe_i2c_write(pdata);
  #line 309 
  out: 
       #line 309 
  ;
  #line 311 
  if (state->ret != 0 || (isr & 512U) != 0U) 
                                             #line 312 
                                             complete(& pdata->i2c_complete);
  #line 314 
  reissue_check: 
                 #line 314 
  ;
  #line 316 
  if ((pdata->vdata)->irq_reissue_support != 0U) 
                                                 #line 317 
                                                 iowrite32(4U,pdata->xprop_regs + 116U);
  #line 318 
  return;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static irqreturn_t xgbe_i2c_isr(int irq, void *data)
{
  #line 322 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)data;
  #line 324 
  if (pdata->isr_as_tasklet != 0U) 
                                   #line 325 
                                   cif_tasklet_schedule(& pdata->tasklet_i2c); else 
                                                                    #line 327 
                                                                    xgbe_i2c_isr_task((unsigned long)pdata);
  #line 329 
  return IRQ_HANDLED;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_set_mode(struct xgbe_prv_data *pdata)
{
  #line 334 
  unsigned int reg;
  #line 336 
  reg = ioread32(pdata->xi2c_regs);
  #line 337 
  reg &= 4294967294U;
  #line 337 
  reg |= 1U;
  #line 338 
  reg &= 4294967231U;
  #line 338 
  reg |= 64U;
  #line 339 
  reg &= 4294967263U;
  #line 339 
  reg |= 32U;
  #line 340 
  reg &= 4294967289U;
  #line 340 
  reg |= 2U;
  #line 341 
  reg &= 4294966783U;
  #line 341 
  reg |= 512U;
  #line 342 
  iowrite32(reg,pdata->xi2c_regs);
  #line 343 
  return;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_get_features(struct xgbe_prv_data *pdata)
{
  #line 348 
  unsigned int reg;
  #line 347 
  struct xgbe_i2c *i2c = & pdata->i2c;
  #line 350 
  reg = ioread32(pdata->xi2c_regs + 244U);
  #line 351 
  i2c->max_speed_mode = (reg >> 2) & 3U;
  #line 353 
  i2c->rx_fifo_size = (reg >> 8) & 255U;
  #line 355 
  i2c->tx_fifo_size = (reg >> 16) & 255U;
  #line 358 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 359 
    bool branch;
    #line 359 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_i2c_get_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c", .format = (char *)"I2C features: %s=%u, %s=%u, %s=%u\n", .lineno = (unsigned int)359U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 359 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 359 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 359 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,pdata->dev,(char *)"I2C features: %s=%u, %s=%u, %s=%u\n",(char *)"MAX_SPEED_MODE",i2c->max_speed_mode,(char *)"RX_BUFFER_DEPTH",i2c->rx_fifo_size,(char *)"TX_BUFFER_DEPTH",i2c->tx_fifo_size);
  }
  #line 361 
  return;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_set_target(struct xgbe_prv_data *pdata, unsigned int addr)
{
  #line 367 
  iowrite32(addr,pdata->xi2c_regs + 4U);
  #line 368 
  return;
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static irqreturn_t xgbe_i2c_combined_isr(struct xgbe_prv_data *pdata)
{
  #line 372 
  xgbe_i2c_isr_task((unsigned long)pdata);
  #line 374 
  return IRQ_HANDLED;
}

#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static int xgbe_i2c_xfer(struct xgbe_prv_data *pdata, struct xgbe_i2c_op *op)
{
  #line 380 
  int ret;
  #line 379 
  struct xgbe_i2c_op_state *state = & pdata->i2c.op_state;
  #line 382 
  cif_mutex_lock_i2c_mutex_of_xgbe_prv_data(& pdata->i2c_mutex);
  #line 384 
  reinit_completion(& pdata->i2c_complete);
  #line 386 
  ret = xgbe_i2c_disable(pdata);
  #line 387 
  if (ret != 0) {
    #line 388 
    netdev_err(pdata->netdev,(char *)"failed to disable i2c master\n");
    #line 389 
    goto unlock;
  }
  #line 392 
  xgbe_i2c_set_target(pdata,op->target);
  #line 394 
  memset((void *)state,0,48UL);
  #line 395 
  state->op = op;
  #line 396 
  state->tx_len = op->len;
  #line 397 
  state->tx_buf = (unsigned char *)op->buf;
  #line 398 
  state->rx_len = op->len;
  #line 399 
  state->rx_buf = (unsigned char *)op->buf;
  #line 401 
  xgbe_i2c_clear_all_interrupts(pdata);
  #line 402 
  ret = xgbe_i2c_enable(pdata);
  #line 403 
  if (ret != 0) {
    #line 404 
    netdev_err(pdata->netdev,(char *)"failed to enable i2c master\n");
    #line 405 
    goto unlock;
  }
  #line 411 
  xgbe_i2c_enable_interrupts(pdata);
  #line 413 
  if (wait_for_completion_timeout(& pdata->i2c_complete,250UL) == 0UL) {
    #line 414 
    netdev_err(pdata->netdev,(char *)"i2c operation timed out\n");
    #line 415 
    ret = -110;
    #line 416 
    goto disable;
  }
  #line 419 
  ret = state->ret;
  #line 420 
  if (ret != 0) 
    #line 421 
    if ((state->tx_abort_source & 1U) != 0U) 
                                             #line 422 
                                             ret = -107;
    else 
      #line 423 
      if ((state->tx_abort_source & 4096U) != 0U) 
                                                  #line 424 
                                                  ret = -11;
  #line 427 
  disable: 
           #line 427 
  ;
  #line 428 
  xgbe_i2c_disable_interrupts(pdata);
  #line 429 
  xgbe_i2c_disable(pdata);
  #line 431 
  unlock: 
          #line 431 
  ;
  #line 432 
  cif_mutex_unlock_i2c_mutex_of_xgbe_prv_data(& pdata->i2c_mutex);
  #line 434 
  return ret;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static void xgbe_i2c_stop(struct xgbe_prv_data *pdata)
{
  #line 439 
  if (pdata->i2c.started == 0U) 
                                #line 440 
                                return;
  #line 442 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 442 
    bool branch;
    #line 442 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_i2c_stop", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c", .format = (char *)"stopping I2C\n", .lineno = (unsigned int)442U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 442 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 442 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 442 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,pdata->netdev,(char *)"stopping I2C\n");
  }
  #line 444 
  pdata->i2c.started = 0U;
  #line 446 
  xgbe_i2c_disable_interrupts(pdata);
  #line 447 
  xgbe_i2c_disable(pdata);
  #line 448 
  xgbe_i2c_clear_all_interrupts(pdata);
  #line 450 
  if (pdata->dev_irq != pdata->i2c_irq) 
                                        #line 451 
                                        cif_devm_free_irq(pdata->dev,(unsigned int)pdata->i2c_irq,(void *)pdata);
  #line 452 
  return;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static int xgbe_i2c_start(struct xgbe_prv_data *pdata)
{
  #line 456 
  int ret;
  #line 458 
  if (pdata->i2c.started != 0U) 
                                #line 459 
                                return 0;
  #line 461 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 461 
    bool branch;
    #line 461 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_i2c_start", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c", .format = (char *)"starting I2C\n", .lineno = (unsigned int)461U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 461 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 461 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 461 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,pdata->netdev,(char *)"starting I2C\n");
  }
  #line 464 
  if (pdata->dev_irq != pdata->i2c_irq) {
    #line 465 
    cif_tasklet_init(& pdata->tasklet_i2c,& xgbe_i2c_isr_task,(unsigned long)pdata);
    #line 468 
    ret = devm_request_irq(pdata->dev,(unsigned int)pdata->i2c_irq,& xgbe_i2c_isr,0UL,(char *)(& pdata->i2c_name),(void *)pdata);
    #line 471 
    if (ret != 0) {
      #line 472 
      netdev_err(pdata->netdev,(char *)"i2c irq request failed\n");
      #line 473 
      return ret;
    }
  }
  #line 477 
  pdata->i2c.started = 1U;
  #line 479 
  return 0;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
static int xgbe_i2c_init(struct xgbe_prv_data *pdata)
{
  #line 484 
  int ret;
  #line 486 
  xgbe_i2c_disable_interrupts(pdata);
  #line 488 
  ret = xgbe_i2c_disable(pdata);
  #line 489 
  if (ret != 0) {
    #line 490 
    _dev_err(pdata->dev,(char *)"failed to disable i2c master\n");
    #line 491 
    return ret;
  }
  #line 494 
  xgbe_i2c_get_features(pdata);
  #line 496 
  xgbe_i2c_set_mode(pdata);
  #line 498 
  xgbe_i2c_clear_all_interrupts(pdata);
  #line 500 
  return 0;
}

#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-i2c.c"
void xgbe_init_function_ptrs_i2c(struct xgbe_i2c_if *i2c_if)
{
  #line 505 
  i2c_if->i2c_init = & xgbe_i2c_init;
  #line 507 
  i2c_if->i2c_start = & xgbe_i2c_start;
  #line 508 
  i2c_if->i2c_stop = & xgbe_i2c_stop;
  #line 510 
  i2c_if->i2c_xfer = & xgbe_i2c_xfer;
  #line 512 
  i2c_if->i2c_isr = & xgbe_i2c_combined_isr;
  #line 513 
  return;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
#line 95 
void emg_devm_free_irq(struct device *arg0, unsigned int arg1, void *arg2);
#line 102 
#line 102 
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);
#line 103 
#line 103 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 691 
  emg_tasklet_schedule(t);
  #line 692 
  return;
}

#line 695  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
static void cif_mutex_lock_i2c_mutex_of_xgbe_prv_data(struct mutex *lock)
{
  #line 698 
  ldv_mutex_model_lock(lock,(char *)"i2c_mutex_of_xgbe_prv_data");
  #line 699 
  return;
}

#line 702  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
static void cif_mutex_unlock_i2c_mutex_of_xgbe_prv_data(struct mutex *lock)
{
  #line 705 
  ldv_mutex_model_unlock(lock,(char *)"i2c_mutex_of_xgbe_prv_data");
  #line 706 
  return;
}

#line 709  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
static void cif_devm_free_irq(struct device *dev, unsigned int irq, void *dev_id)
{
  #line 713 
  emg_devm_free_irq(dev,irq,dev_id);
  #line 714 
  return;
}

#line 717  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-i2c.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 721 
  emg_tasklet_init(t,func,data);
  #line 722 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_bitmap_zero_0(unsigned long *dst, unsigned int nbits);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
#line 710 
static void cif_mutex_lock_an_mutex_of_xgbe_prv_data(struct mutex *lock);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 717  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_mutex_unlock_an_mutex_of_xgbe_prv_data(struct mutex *lock);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 702  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static bool cif_flush_work(struct work_struct *work);
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 724  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_devm_free_irq_0(struct device *dev, unsigned int irq, void *dev_id);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 237 
void disable_irq(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 655 
#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_tasklet_schedule_0(struct tasklet_struct *t);
#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 732  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_tasklet_init_0(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 3812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3812 
void netif_carrier_on(struct net_device *);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int xgbe_phy_module_eeprom_0(struct xgbe_prv_data *pdata, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 132 
  if (pdata->phy_if.phy_impl.module_eeprom == (int (*)(struct xgbe_prv_data *, struct ethtool_eeprom *, u8 *))0) 
    #line 133 
    return -6;
  #line 135 
  return (*(pdata->phy_if.phy_impl.module_eeprom))(pdata,eeprom,data);
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int xgbe_phy_module_info_0(struct xgbe_prv_data *pdata, struct ethtool_modinfo *modinfo)
{
  #line 141 
  if (pdata->phy_if.phy_impl.module_info == (int (*)(struct xgbe_prv_data *, struct ethtool_modinfo *))0) 
    #line 142 
    return -6;
  #line 144 
  return (*(pdata->phy_if.phy_impl.module_info))(pdata,modinfo);
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an37_clear_interrupts(struct xgbe_prv_data *pdata)
{
  #line 149 
  int reg;
  #line 151 
  reg = (*(pdata->hw_if.read_mmd_regs))(pdata,0,1075806210);
  #line 152 
  reg &= -2;
  #line 153 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1075806210,reg);
  #line 154 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an37_disable_interrupts(struct xgbe_prv_data *pdata)
{
  #line 158 
  int reg;
  #line 160 
  reg = (*(pdata->hw_if.read_mmd_regs))(pdata,0,1075806209);
  #line 161 
  reg &= -2;
  #line 162 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1075806209,reg);
  #line 164 
  reg = (*(pdata->hw_if.read_mmd_regs))(pdata,0,1073971200);
  #line 165 
  reg &= -4097;
  #line 166 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073971200,reg);
  #line 167 
  return;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an37_enable_interrupts(struct xgbe_prv_data *pdata)
{
  #line 171 
  int reg;
  #line 173 
  reg = (*(pdata->hw_if.read_mmd_regs))(pdata,0,1073971200);
  #line 174 
  reg |= 4096;
  #line 175 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073971200,reg);
  #line 177 
  reg = (*(pdata->hw_if.read_mmd_regs))(pdata,0,1075806209);
  #line 178 
  reg |= 1;
  #line 179 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1075806209,reg);
  #line 180 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an73_clear_interrupts(struct xgbe_prv_data *pdata)
{
  #line 184 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074233346,0);
  #line 185 
  return;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an73_disable_interrupts(struct xgbe_prv_data *pdata)
{
  #line 189 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074233345,0);
  #line 190 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an73_enable_interrupts(struct xgbe_prv_data *pdata)
{
  #line 194 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074233345,7);
  #line 195 
  return;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an_enable_interrupts(struct xgbe_prv_data *pdata)
{
  #line 199 
  switch ((unsigned int)pdata->an_mode) {
    #line 200 
    case (unsigned int)0: 
                          #line 200 
    ;
    #line 201 
    case (unsigned int)1: 
                          #line 201 
    ;
    #line 202 
    xgbe_an73_enable_interrupts(pdata);
    #line 203 
    break;
    #line 204 
    case (unsigned int)2: 
                          #line 204 
    ;
    #line 205 
    case (unsigned int)3: 
                          #line 205 
    ;
    #line 206 
    xgbe_an37_enable_interrupts(pdata);
    #line 207 
    break;
    #line 208 
    default: 
             #line 208 
    ;
    #line 209 
    break;
  }
  #line 211 
  return;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an_clear_interrupts_all(struct xgbe_prv_data *pdata)
{
  #line 215 
  xgbe_an73_clear_interrupts(pdata);
  #line 216 
  xgbe_an37_clear_interrupts(pdata);
  #line 217 
  return;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_kr_mode(struct xgbe_prv_data *pdata)
{
  #line 222 
  (*(pdata->hw_if.set_speed))(pdata,10000);
  #line 225 
  (*(pdata->phy_if.phy_impl.set_mode))(pdata,(enum xgbe_mode)XGBE_MODE_KR);
  #line 226 
  return;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_kx_2500_mode(struct xgbe_prv_data *pdata)
{
  #line 231 
  (*(pdata->hw_if.set_speed))(pdata,2500);
  #line 234 
  (*(pdata->phy_if.phy_impl.set_mode))(pdata,(enum xgbe_mode)XGBE_MODE_KX_2500);
  #line 235 
  return;
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_kx_1000_mode(struct xgbe_prv_data *pdata)
{
  #line 240 
  (*(pdata->hw_if.set_speed))(pdata,1000);
  #line 243 
  (*(pdata->phy_if.phy_impl.set_mode))(pdata,(enum xgbe_mode)XGBE_MODE_KX_1000);
  #line 244 
  return;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_sfi_mode(struct xgbe_prv_data *pdata)
{
  #line 249 
  if (pdata->kr_redrv != 0U) 
                             #line 250 
                             xgbe_kr_mode(pdata);
  #line 253 
  (*(pdata->hw_if.set_speed))(pdata,10000);
  #line 256 
  (*(pdata->phy_if.phy_impl.set_mode))(pdata,(enum xgbe_mode)XGBE_MODE_SFI);
  #line 257 
  return;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_x_mode(struct xgbe_prv_data *pdata)
{
  #line 262 
  (*(pdata->hw_if.set_speed))(pdata,1000);
  #line 265 
  (*(pdata->phy_if.phy_impl.set_mode))(pdata,(enum xgbe_mode)XGBE_MODE_X);
  #line 266 
  return;
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_sgmii_1000_mode(struct xgbe_prv_data *pdata)
{
  #line 271 
  (*(pdata->hw_if.set_speed))(pdata,1000);
  #line 274 
  (*(pdata->phy_if.phy_impl.set_mode))(pdata,(enum xgbe_mode)XGBE_MODE_SGMII_1000);
  #line 275 
  return;
}

#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_sgmii_100_mode(struct xgbe_prv_data *pdata)
{
  #line 280 
  (*(pdata->hw_if.set_speed))(pdata,1000);
  #line 283 
  (*(pdata->phy_if.phy_impl.set_mode))(pdata,(enum xgbe_mode)XGBE_MODE_SGMII_100);
  #line 284 
  return;
}

#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static enum xgbe_mode xgbe_cur_mode(struct xgbe_prv_data *pdata)
{
  #line 288 
  return (*(pdata->phy_if.phy_impl.cur_mode))(pdata);
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static bool xgbe_in_kr_mode(struct xgbe_prv_data *pdata)
{
  #line 293 
  return (_Bool)(xgbe_cur_mode(pdata) == (unsigned int)XGBE_MODE_KR);
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_change_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 299 
  switch ((unsigned int)mode) {
    #line 300 
    case (unsigned int)0: 
                          #line 300 
    ;
    #line 301 
    xgbe_kx_1000_mode(pdata);
    #line 302 
    break;
    #line 303 
    case (unsigned int)1: 
                          #line 303 
    ;
    #line 304 
    xgbe_kx_2500_mode(pdata);
    #line 305 
    break;
    #line 306 
    case (unsigned int)2: 
                          #line 306 
    ;
    #line 307 
    xgbe_kr_mode(pdata);
    #line 308 
    break;
    #line 309 
    case (unsigned int)4: 
                          #line 309 
    ;
    #line 310 
    xgbe_sgmii_100_mode(pdata);
    #line 311 
    break;
    #line 312 
    case (unsigned int)5: 
                          #line 312 
    ;
    #line 313 
    xgbe_sgmii_1000_mode(pdata);
    #line 314 
    break;
    #line 315 
    case (unsigned int)3: 
                          #line 315 
    ;
    #line 316 
    xgbe_x_mode(pdata);
    #line 317 
    break;
    #line 318 
    case (unsigned int)6: 
                          #line 318 
    ;
    #line 319 
    xgbe_sfi_mode(pdata);
    #line 320 
    break;
    #line 321 
    case (unsigned int)7: 
                          #line 321 
    ;
    #line 322 
    break;
    #line 323 
    default: 
             #line 323 
    ;
    #line 324 
    if ((pdata->msg_enable & 4U) != 0U) {
      #line 324 
      bool branch;
      #line 324 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_change_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"invalid operation mode requested (%u)\n", .lineno = (unsigned int)324U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 324 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 324 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 324 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,pdata->netdev,(char *)"invalid operation mode requested (%u)\n",(unsigned int)mode);
    }
  }
  #line 327 
  return;
}

#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_switch_mode(struct xgbe_prv_data *pdata)
{
  #line 331 
  ;
  #line 331 
  xgbe_change_mode(pdata,(*(pdata->phy_if.phy_impl.switch_mode))(pdata));
  #line 332 
  return;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static bool xgbe_set_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 337 
  ;
  #line 337 
  if (xgbe_cur_mode(pdata) == mode) 
                                    #line 338 
                                    return (_Bool)0;
  #line 340 
  xgbe_change_mode(pdata,mode);
  #line 342 
  return (_Bool)1;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static bool xgbe_use_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 348 
  return (*(pdata->phy_if.phy_impl.use_mode))(pdata,mode);
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an37_set(struct xgbe_prv_data *pdata, bool enable, bool restart)
{
  #line 354 
  unsigned int reg;
  #line 356 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1075773440);
  #line 357 
  reg &= 4294963199U;
  #line 359 
  if ((int)enable != 0) 
                        #line 360 
                        reg |= 4096U;
  #line 362 
  if ((int)restart != 0) 
                         #line 363 
                         reg |= 512U;
  #line 365 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1075773440,(int)reg);
  #line 366 
  return;
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an37_restart(struct xgbe_prv_data *pdata)
{
  #line 370 
  xgbe_an37_enable_interrupts(pdata);
  #line 371 
  xgbe_an37_set(pdata,(_Bool)1,(_Bool)1);
  #line 373 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 373 
    bool branch;
    #line 373 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an37_restart", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL37 AN enabled/restarted\n", .lineno = (unsigned int)373U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 373 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 373 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 373 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,pdata->netdev,(char *)"CL37 AN enabled/restarted\n");
  }
  #line 375 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an37_disable(struct xgbe_prv_data *pdata)
{
  #line 378 
  xgbe_an37_set(pdata,(_Bool)0,(_Bool)0);
  #line 379 
  xgbe_an37_disable_interrupts(pdata);
  #line 381 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 381 
    bool branch;
    #line 381 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an37_disable", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL37 AN disabled\n", .lineno = (unsigned int)381U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 381 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 381 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 381 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,pdata->netdev,(char *)"CL37 AN disabled\n");
  }
  #line 383 
  return;
}

#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an73_set(struct xgbe_prv_data *pdata, bool enable, bool restart)
{
  #line 387 
  unsigned int reg;
  #line 390 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073807510);
  #line 391 
  reg &= 4294967293U;
  #line 392 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073807510,(int)reg);
  #line 395 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200576);
  #line 396 
  reg &= 4294963199U;
  #line 398 
  if ((int)enable != 0) 
                        #line 399 
                        reg |= 4096U;
  #line 401 
  if ((int)restart != 0) 
                         #line 402 
                         reg |= 512U;
  #line 404 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074200576,(int)reg);
  #line 405 
  return;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an73_restart(struct xgbe_prv_data *pdata)
{
  #line 409 
  xgbe_an73_enable_interrupts(pdata);
  #line 410 
  xgbe_an73_set(pdata,(_Bool)1,(_Bool)1);
  #line 412 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 412 
    bool branch;
    #line 412 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an73_restart", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL73 AN enabled/restarted\n", .lineno = (unsigned int)412U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 412 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 412 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 412 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,pdata->netdev,(char *)"CL73 AN enabled/restarted\n");
  }
  #line 414 
  return;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an73_disable(struct xgbe_prv_data *pdata)
{
  #line 417 
  xgbe_an73_set(pdata,(_Bool)0,(_Bool)0);
  #line 418 
  xgbe_an73_disable_interrupts(pdata);
  #line 420 
  pdata->an_start = 0UL;
  #line 422 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 422 
    bool branch;
    #line 422 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an73_disable", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL73 AN disabled\n", .lineno = (unsigned int)422U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 422 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 422 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 422 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,pdata->netdev,(char *)"CL73 AN disabled\n");
  }
  #line 424 
  return;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an_restart(struct xgbe_prv_data *pdata)
{
  #line 427 
  if (pdata->phy_if.phy_impl.an_pre != (void (*)(struct xgbe_prv_data *))0) 
    #line 428 
    (*(pdata->phy_if.phy_impl.an_pre))(pdata);
  #line 430 
  switch ((unsigned int)pdata->an_mode) {
    #line 431 
    case (unsigned int)0: 
                          #line 431 
    ;
    #line 432 
    case (unsigned int)1: 
                          #line 432 
    ;
    #line 433 
    xgbe_an73_restart(pdata);
    #line 434 
    break;
    #line 435 
    case (unsigned int)2: 
                          #line 435 
    ;
    #line 436 
    case (unsigned int)3: 
                          #line 436 
    ;
    #line 437 
    xgbe_an37_restart(pdata);
    #line 438 
    break;
    #line 439 
    default: 
             #line 439 
    ;
    #line 440 
    break;
  }
  #line 442 
  return;
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an_disable(struct xgbe_prv_data *pdata)
{
  #line 446 
  if (pdata->phy_if.phy_impl.an_post != (void (*)(struct xgbe_prv_data *))0) 
    #line 447 
    (*(pdata->phy_if.phy_impl.an_post))(pdata);
  #line 449 
  switch ((unsigned int)pdata->an_mode) {
    #line 450 
    case (unsigned int)0: 
                          #line 450 
    ;
    #line 451 
    case (unsigned int)1: 
                          #line 451 
    ;
    #line 452 
    xgbe_an73_disable(pdata);
    #line 453 
    break;
    #line 454 
    case (unsigned int)2: 
                          #line 454 
    ;
    #line 455 
    case (unsigned int)3: 
                          #line 455 
    ;
    #line 456 
    xgbe_an37_disable(pdata);
    #line 457 
    break;
    #line 458 
    default: 
             #line 458 
    ;
    #line 459 
    break;
  }
  #line 461 
  return;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an_disable_all(struct xgbe_prv_data *pdata)
{
  #line 465 
  xgbe_an73_disable(pdata);
  #line 466 
  xgbe_an37_disable(pdata);
  #line 467 
  return;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static enum xgbe_an xgbe_an73_tx_training(struct xgbe_prv_data *pdata, enum xgbe_rx *state)
{
  #line 472 
  unsigned int ad_reg;
  #line 472 
  unsigned int lp_reg;
  #line 472 
  unsigned int reg;
  #line 474 
  *state = XGBE_RX_COMPLETE;
  #line 477 
  if (! xgbe_in_kr_mode(pdata)) 
                                #line 478 
                                return XGBE_AN_PAGE_RECEIVED;
  #line 481 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200594);
  #line 482 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200597);
  #line 484 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073807531);
  #line 485 
  reg &= 4294967292U;
  #line 486 
  if ((ad_reg & 49152U) != 0U && (lp_reg & 49152U) != 0U) 
                                                          #line 487 
                                                          reg = pdata->fec_ability | reg;
  #line 489 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073807531,(int)reg);
  #line 492 
  if (pdata->phy_if.phy_impl.kr_training_pre != (void (*)(struct xgbe_prv_data *))0) 
    #line 493 
    (*(pdata->phy_if.phy_impl.kr_training_pre))(pdata);
  #line 495 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073807510);
  #line 496 
  reg |= 2U;
  #line 497 
  reg |= 1U;
  #line 498 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073807510,(int)reg);
  #line 500 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 500 
    bool branch;
    #line 500 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an73_tx_training", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"KR training initiated\n", .lineno = (unsigned int)500U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 500 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 500 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 500 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,pdata->netdev,(char *)"KR training initiated\n");
  }
  #line 503 
  if (pdata->phy_if.phy_impl.kr_training_post != (void (*)(struct xgbe_prv_data *))0) 
    #line 504 
    (*(pdata->phy_if.phy_impl.kr_training_post))(pdata);
  #line 506 
  return XGBE_AN_PAGE_RECEIVED;
}

#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static enum xgbe_an xgbe_an73_tx_xnp(struct xgbe_prv_data *pdata, enum xgbe_rx *state)
{
  #line 512 
  u16 msg;
  #line 514 
  *state = XGBE_RX_XNP;
  #line 516 
  msg = (unsigned short)1U;
  #line 517 
  msg = (unsigned short)((unsigned int)msg | 8192U);
  #line 519 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074200600,0);
  #line 520 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074200599,0);
  #line 521 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074200598,(int)msg);
  #line 523 
  return XGBE_AN_PAGE_RECEIVED;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static enum xgbe_an xgbe_an73_rx_bpa(struct xgbe_prv_data *pdata, enum xgbe_rx *state)
{
  #line 529 
  unsigned int link_support;
  #line 530 
  unsigned int reg;
  #line 530 
  unsigned int ad_reg;
  #line 530 
  unsigned int lp_reg;
  #line 547 
  unsigned int tmp_5;
  #line 533 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200596);
  #line 536 
  if ((int)xgbe_in_kr_mode(pdata) != 0) 
                                        #line 536 
                                        link_support = 128U; else 
                                                                  #line 536 
                                                                  link_support = 32U;
  #line 537 
  if ((reg & link_support) == 0U) 
                                  #line 538 
                                  return XGBE_AN_INCOMPAT_LINK;
  #line 541 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200592);
  #line 542 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200595);
  #line 547 
  if (((unsigned long)ad_reg & 32768UL) != 0UL || ((unsigned long)lp_reg & 32768UL) != 0UL) {
    #line 547 
    tmp_5 = xgbe_an73_tx_xnp(pdata,state);
  }
  else {
    #line 547 
    tmp_5 = xgbe_an73_tx_training(pdata,state);
  }
  #line 547 
  return tmp_5;
}

#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static enum xgbe_an xgbe_an73_rx_xnp(struct xgbe_prv_data *pdata, enum xgbe_rx *state)
{
  #line 553 
  unsigned int ad_reg;
  #line 553 
  unsigned int lp_reg;
  #line 562 
  unsigned int tmp_3;
  #line 556 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200598);
  #line 557 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200601);
  #line 562 
  if (((unsigned long)ad_reg & 32768UL) != 0UL || ((unsigned long)lp_reg & 32768UL) != 0UL) {
    #line 562 
    tmp_3 = xgbe_an73_tx_xnp(pdata,state);
  }
  else {
    #line 562 
    tmp_3 = xgbe_an73_tx_training(pdata,state);
  }
  #line 562 
  return tmp_3;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static enum xgbe_an xgbe_an73_page_received(struct xgbe_prv_data *pdata)
{
  #line 567 
  enum xgbe_rx *state;
  #line 568 
  unsigned long an_timeout;
  #line 569 
  enum xgbe_an ret;
  #line 571 
  if (pdata->an_start == 0UL) 
                              #line 572 
                              pdata->an_start = jiffies;
  else {
    #line 574 
    an_timeout = pdata->an_start + msecs_to_jiffies(500U);
    {
      #line 576 
      unsigned long __dummy;
      #line 576 
      unsigned long __dummy2;
      }
    #line 576 
    if (1 != 0) {
      {
        #line 576 
        unsigned long __dummy_0;
        #line 576 
        unsigned long __dummy2_0;
        }
      #line 576 
      if (1 != 0) 
        #line 576 
        if ((long)(an_timeout - jiffies) < 0L) {
          #line 578 
          pdata->kr_state = XGBE_RX_BPA;
          #line 579 
          pdata->kx_state = XGBE_RX_BPA;
          #line 581 
          pdata->an_start = jiffies;
          #line 583 
          if ((pdata->msg_enable & 4U) != 0U) {
            #line 583 
            bool branch;
            #line 583 
            struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an73_page_received", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL73 AN timed out, resetting state\n", .lineno = (unsigned int)583U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 583 
            branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
            #line 583 
            if ((long)((long)((int)branch != 0)) != 0L) 
                                                        #line 583 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,pdata->netdev,(char *)"CL73 AN timed out, resetting state\n");
          }
        }
    }
  }
  #line 588 
  if ((int)xgbe_in_kr_mode(pdata) != 0) 
                                        #line 588 
                                        state = & pdata->kr_state; else 
                                                                    #line 588 
                                                                    state = & pdata->kx_state;
  #line 591 
  switch ((unsigned int)*state) {
    #line 592 
    case (unsigned int)0: 
                          #line 592 
    ;
    #line 593 
    ret = xgbe_an73_rx_bpa(pdata,state);
    #line 594 
    break;
    #line 596 
    case (unsigned int)1: 
                          #line 596 
    ;
    #line 597 
    ret = xgbe_an73_rx_xnp(pdata,state);
    #line 598 
    break;
    #line 600 
    default: 
             #line 600 
    ;
    #line 601 
    ret = XGBE_AN_ERROR;
  }
  #line 604 
  return ret;
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static enum xgbe_an xgbe_an73_incompat_link(struct xgbe_prv_data *pdata)
{
  #line 609 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 612 
  if ((int)xgbe_in_kr_mode(pdata) != 0) {
    #line 613 
    pdata->kr_state = XGBE_RX_ERROR;
    #line 615 
    if (! test_bit(17L,(unsigned long *)(& lks->link_modes.advertising))) {
      #line 616 
      if (! test_bit(15L,(unsigned long *)(& lks->link_modes.advertising))) 
        #line 617 
        return XGBE_AN_NO_LINK;
    }
    #line 619 
    if (pdata->kx_state != (unsigned int)XGBE_RX_BPA) 
                                                      #line 620 
                                                      return XGBE_AN_NO_LINK;
  }
  else {
    #line 622 
    pdata->kx_state = XGBE_RX_ERROR;
    #line 624 
    if (! test_bit(19L,(unsigned long *)(& lks->link_modes.advertising))) 
      #line 625 
      return XGBE_AN_NO_LINK;
    #line 627 
    if (pdata->kr_state != (unsigned int)XGBE_RX_BPA) 
                                                      #line 628 
                                                      return XGBE_AN_NO_LINK;
  }
  #line 631 
  xgbe_an_disable(pdata);
  #line 633 
  xgbe_switch_mode(pdata);
  #line 635 
  xgbe_an_restart(pdata);
  #line 637 
  return XGBE_AN_INCOMPAT_LINK;
}

#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an37_isr(struct xgbe_prv_data *pdata)
{
  #line 642 
  unsigned int reg;
  #line 645 
  xgbe_an37_disable_interrupts(pdata);
  #line 648 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1075806210);
  #line 649 
  pdata->an_int = reg & 1U;
  #line 650 
  pdata->an_status = reg & 4294967294U;
  #line 652 
  if (pdata->an_int != 0U) {
    #line 654 
    reg &= 4294967294U;
    #line 655 
    (*(pdata->hw_if.write_mmd_regs))(pdata,0,1075806210,(int)reg);
    #line 657 
    cif_queue_work(pdata->an_workqueue,& pdata->an_irq_work);
  }
  else {
    #line 660 
    xgbe_an37_enable_interrupts(pdata);
    #line 663 
    if ((pdata->vdata)->irq_reissue_support != 0U) 
                                                   #line 664 
                                                   iowrite32(8U,pdata->xprop_regs + 116U);
  }
  #line 666 
  return;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an73_isr(struct xgbe_prv_data *pdata)
{
  #line 671 
  xgbe_an73_disable_interrupts(pdata);
  #line 674 
  pdata->an_int = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074233346);
  #line 676 
  if (pdata->an_int != 0U) {
    #line 678 
    (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074233346,(int)(~ pdata->an_int));
    #line 680 
    cif_queue_work(pdata->an_workqueue,& pdata->an_irq_work);
  }
  else {
    #line 683 
    xgbe_an73_enable_interrupts(pdata);
    #line 686 
    if ((pdata->vdata)->irq_reissue_support != 0U) 
                                                   #line 687 
                                                   iowrite32(8U,pdata->xprop_regs + 116U);
  }
  #line 689 
  return;
}

#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an_isr_task(unsigned long data)
{
  #line 693 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)data;
  #line 695 
  if ((pdata->msg_enable & 512U) != 0U) {
    #line 695 
    bool branch;
    #line 695 
    struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an_isr_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"AN interrupt received\n", .lineno = (unsigned int)695U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 695 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
    #line 695 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 695 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,pdata->netdev,(char *)"AN interrupt received\n");
  }
  #line 697 
  switch ((unsigned int)pdata->an_mode) {
    #line 698 
    case (unsigned int)0: 
                          #line 698 
    ;
    #line 699 
    case (unsigned int)1: 
                          #line 699 
    ;
    #line 700 
    xgbe_an73_isr(pdata);
    #line 701 
    break;
    #line 702 
    case (unsigned int)2: 
                          #line 702 
    ;
    #line 703 
    case (unsigned int)3: 
                          #line 703 
    ;
    #line 704 
    xgbe_an37_isr(pdata);
    #line 705 
    break;
    #line 706 
    default: 
             #line 706 
    ;
    #line 707 
    break;
  }
  #line 709 
  return;
}

#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static irqreturn_t xgbe_an_isr(int irq, void *data)
{
  #line 713 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)data;
  #line 715 
  if (pdata->isr_as_tasklet != 0U) 
                                   #line 716 
                                   cif_tasklet_schedule_0(& pdata->tasklet_an); else 
                                                                    #line 718 
                                                                    xgbe_an_isr_task((unsigned long)pdata);
  #line 720 
  return IRQ_HANDLED;
}

#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static irqreturn_t xgbe_an_combined_isr(struct xgbe_prv_data *pdata)
{
  #line 725 
  xgbe_an_isr_task((unsigned long)pdata);
  #line 727 
  return IRQ_HANDLED;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an_irq_work(struct work_struct *work)
{
  #line 732 
  void *__mptr;
  #line 732 
  __mptr = (void *)work;
  #line 732 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709545216U));
  #line 739 
  cif_flush_work(& pdata->an_work);
  #line 740 
  cif_queue_work(pdata->an_workqueue,& pdata->an_work);
  #line 741 
  return;
}

#line 743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static char *xgbe_state_as_string(enum xgbe_an state)
{
  #line 745 
  switch ((unsigned int)state) {
    #line 746 
    case (unsigned int)0: 
                          #line 746 
    ;
    #line 747 
    return (char *)"Ready";
    #line 748 
    case (unsigned int)1: 
                          #line 748 
    ;
    #line 749 
    return (char *)"Page-Received";
    #line 750 
    case (unsigned int)2: 
                          #line 750 
    ;
    #line 751 
    return (char *)"Incompatible-Link";
    #line 752 
    case (unsigned int)3: 
                          #line 752 
    ;
    #line 753 
    return (char *)"Complete";
    #line 754 
    case (unsigned int)4: 
                          #line 754 
    ;
    #line 755 
    return (char *)"No-Link";
    #line 756 
    case (unsigned int)5: 
                          #line 756 
    ;
    #line 757 
    return (char *)"Error";
    #line 758 
    default: 
             #line 758 
    ;
    #line 759 
    return (char *)"Undefined";
  }
}

#line 763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an37_state_machine(struct xgbe_prv_data *pdata)
{
  #line 765 
  enum xgbe_an cur_state = pdata->an_state;
  #line 767 
  if (pdata->an_int == 0U) 
                           #line 768 
                           return;
  #line 770 
  if (((unsigned long)pdata->an_int & 1UL) != 0UL) {
    #line 771 
    pdata->an_state = XGBE_AN_COMPLETE;
    #line 772 
    pdata->an_int &= 4294967294U;
    #line 775 
    if (pdata->an_mode == (unsigned int)XGBE_AN_MODE_CL37_SGMII && ((unsigned long)pdata->an_status & 2UL) == 0UL) 
      #line 777 
      pdata->an_state = XGBE_AN_NO_LINK;
  }
  #line 780 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 780 
    bool branch;
    #line 780 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an37_state_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL37 AN %s\n", .lineno = (unsigned int)780U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 780 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 780 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 780 
      ;
      #line 780 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,pdata->netdev,(char *)"CL37 AN %s\n",xgbe_state_as_string(pdata->an_state));
    }
  }
  #line 783 
  cur_state = pdata->an_state;
  #line 785 
  switch ((unsigned int)pdata->an_state) {
    #line 786 
    case (unsigned int)0: 
                          #line 786 
    ;
    #line 787 
    break;
    #line 789 
    case (unsigned int)3: 
                          #line 789 
    ;
    #line 790 
    if ((pdata->msg_enable & 4U) != 0U) {
      #line 790 
      bool branch_0;
      #line 790 
      struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an37_state_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Auto negotiation successful\n", .lineno = (unsigned int)790U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 790 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
      #line 790 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 790 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,pdata->netdev,(char *)"Auto negotiation successful\n");
    }
    #line 792 
    break;
    #line 794 
    case (unsigned int)4: 
                          #line 794 
    ;
    #line 795 
    break;
    #line 797 
    default: 
             #line 797 
    ;
    #line 798 
    pdata->an_state = XGBE_AN_ERROR;
  }
  #line 801 
  if (pdata->an_state == (unsigned int)XGBE_AN_ERROR) {
    #line 802 
    netdev_err(pdata->netdev,(char *)"error during auto-negotiation, state=%u\n",(unsigned int)cur_state);
    #line 806 
    pdata->an_int = 0U;
    #line 807 
    xgbe_an37_clear_interrupts(pdata);
  }
  #line 810 
  if (pdata->an_state > (unsigned int)XGBE_AN_INCOMPAT_LINK) {
    #line 811 
    pdata->an_result = pdata->an_state;
    #line 812 
    pdata->an_state = XGBE_AN_READY;
    #line 814 
    if (pdata->phy_if.phy_impl.an_post != (void (*)(struct xgbe_prv_data *))0) 
      #line 815 
      (*(pdata->phy_if.phy_impl.an_post))(pdata);
    #line 817 
    if ((pdata->msg_enable & 4U) != 0U) {
      #line 817 
      bool branch_1;
      #line 817 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an37_state_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL37 AN result: %s\n", .lineno = (unsigned int)817U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 817 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 817 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 817 
        ;
        #line 817 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,pdata->netdev,(char *)"CL37 AN result: %s\n",xgbe_state_as_string(pdata->an_result));
      }
    }
  }
  #line 821 
  xgbe_an37_enable_interrupts(pdata);
  #line 822 
  return;
}

#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an73_state_machine(struct xgbe_prv_data *pdata)
{
  #line 826 
  enum xgbe_an cur_state = pdata->an_state;
  #line 828 
  if (pdata->an_int == 0U) 
                           #line 829 
                           return;
  #line 831 
  next_int: 
            #line 831 
  ;
  #line 832 
  if (((unsigned long)pdata->an_int & 4UL) != 0UL) {
    #line 833 
    pdata->an_state = XGBE_AN_PAGE_RECEIVED;
    #line 834 
    pdata->an_int &= 4294967291U;
  }
  else 
    #line 835 
    if (((unsigned long)pdata->an_int & 2UL) != 0UL) {
      #line 836 
      pdata->an_state = XGBE_AN_INCOMPAT_LINK;
      #line 837 
      pdata->an_int &= 4294967293U;
    }
    else 
      #line 838 
      if (((unsigned long)pdata->an_int & 1UL) != 0UL) {
        #line 839 
        pdata->an_state = XGBE_AN_COMPLETE;
        #line 840 
        pdata->an_int &= 4294967294U;
      }
      else 
           #line 842 
           pdata->an_state = XGBE_AN_ERROR;
  #line 845 
  again: 
         #line 845 
  ;
  #line 846 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 846 
    bool branch;
    #line 846 
    struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an73_state_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL73 AN %s\n", .lineno = (unsigned int)846U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 846 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
    #line 846 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 846 
      ;
      #line 846 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,pdata->netdev,(char *)"CL73 AN %s\n",xgbe_state_as_string(pdata->an_state));
    }
  }
  #line 849 
  cur_state = pdata->an_state;
  #line 851 
  switch ((unsigned int)pdata->an_state) {
    #line 852 
    case (unsigned int)0: 
                          #line 852 
    ;
    #line 853 
    pdata->an_supported = 0U;
    #line 854 
    break;
    #line 856 
    case (unsigned int)1: 
                          #line 856 
    ;
    #line 857 
    pdata->an_state = xgbe_an73_page_received(pdata);
    #line 858 
    (pdata->an_supported) ++;
    #line 859 
    break;
    #line 861 
    case (unsigned int)2: 
                          #line 861 
    ;
    #line 862 
    pdata->an_supported = 0U;
    #line 863 
    pdata->parallel_detect = 0U;
    #line 864 
    pdata->an_state = xgbe_an73_incompat_link(pdata);
    #line 865 
    break;
    #line 867 
    case (unsigned int)3: 
                          #line 867 
    ;
    #line 868 
    pdata->parallel_detect = (unsigned int)(pdata->an_supported == 0U);
    #line 869 
    if ((pdata->msg_enable & 4U) != 0U) {
      #line 869 
      bool branch_0;
      #line 869 
      struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an73_state_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"%s successful\n", .lineno = (unsigned int)869U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 869 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
      #line 869 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 869 
        char *tmp_1;
        #line 869 
        if (pdata->an_supported != 0U) 
                                       #line 869 
                                       tmp_1 = (char *)"Auto negotiation"; else 
                                                                    #line 869 
                                                                    tmp_1 = (char *)"Parallel detection";
        #line 869 
        ;
        #line 869 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,pdata->netdev,(char *)"%s successful\n",tmp_1);
      }
    }
    #line 872 
    break;
    #line 874 
    case (unsigned int)4: 
                          #line 874 
    ;
    #line 875 
    break;
    #line 877 
    default: 
             #line 877 
    ;
    #line 878 
    pdata->an_state = XGBE_AN_ERROR;
  }
  #line 881 
  if (pdata->an_state == (unsigned int)XGBE_AN_NO_LINK) {
    #line 882 
    pdata->an_int = 0U;
    #line 883 
    xgbe_an73_clear_interrupts(pdata);
  }
  else 
    #line 884 
    if (pdata->an_state == (unsigned int)XGBE_AN_ERROR) {
      #line 885 
      netdev_err(pdata->netdev,(char *)"error during auto-negotiation, state=%u\n",(unsigned int)cur_state);
      #line 889 
      pdata->an_int = 0U;
      #line 890 
      xgbe_an73_clear_interrupts(pdata);
    }
  #line 893 
  if (pdata->an_state > (unsigned int)XGBE_AN_INCOMPAT_LINK) {
    #line 894 
    pdata->an_result = pdata->an_state;
    #line 895 
    pdata->an_state = XGBE_AN_READY;
    #line 896 
    pdata->kr_state = XGBE_RX_BPA;
    #line 897 
    pdata->kx_state = XGBE_RX_BPA;
    #line 898 
    pdata->an_start = 0UL;
    #line 900 
    if (pdata->phy_if.phy_impl.an_post != (void (*)(struct xgbe_prv_data *))0) 
      #line 901 
      (*(pdata->phy_if.phy_impl.an_post))(pdata);
    #line 903 
    if ((pdata->msg_enable & 4U) != 0U) {
      #line 903 
      bool branch_1;
      #line 903 
      struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an73_state_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL73 AN result: %s\n", .lineno = (unsigned int)903U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 903 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
      #line 903 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 903 
        ;
        #line 903 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,pdata->netdev,(char *)"CL73 AN result: %s\n",xgbe_state_as_string(pdata->an_result));
      }
    }
  }
  #line 907 
  if (pdata->an_state != cur_state) 
                                    #line 908 
                                    goto again;
  #line 910 
  if (pdata->an_int != 0U) 
                           #line 911 
                           goto next_int;
  #line 913 
  xgbe_an73_enable_interrupts(pdata);
  #line 914 
  return;
}

#line 916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an_state_machine(struct work_struct *work)
{
  #line 918 
  void *__mptr;
  #line 918 
  __mptr = (void *)work;
  #line 918 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709544952U));
  #line 922 
  cif_mutex_lock_an_mutex_of_xgbe_prv_data(& pdata->an_mutex);
  #line 924 
  switch ((unsigned int)pdata->an_mode) {
    #line 925 
    case (unsigned int)0: 
                          #line 925 
    ;
    #line 926 
    case (unsigned int)1: 
                          #line 926 
    ;
    #line 927 
    xgbe_an73_state_machine(pdata);
    #line 928 
    break;
    #line 929 
    case (unsigned int)2: 
                          #line 929 
    ;
    #line 930 
    case (unsigned int)3: 
                          #line 930 
    ;
    #line 931 
    xgbe_an37_state_machine(pdata);
    #line 932 
    break;
    #line 933 
    default: 
             #line 933 
    ;
    #line 934 
    break;
  }
  #line 938 
  if ((pdata->vdata)->irq_reissue_support != 0U) 
                                                 #line 939 
                                                 iowrite32(8U,pdata->xprop_regs + 116U);
  #line 941 
  cif_mutex_unlock_an_mutex_of_xgbe_prv_data(& pdata->an_mutex);
  #line 942 
  return;
}

#line 944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an37_init(struct xgbe_prv_data *pdata)
{
  #line 946 
  struct ethtool_link_ksettings lks;
  #line 947 
  unsigned int reg;
  #line 949 
  (*(pdata->phy_if.phy_impl.an_advertising))(pdata,& lks);
  #line 952 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1075773444);
  #line 953 
  if ((int)test_bit(13L,(unsigned long *)(& lks.link_modes.advertising)) != 0) 
    #line 954 
    reg |= 256U; else 
                      #line 956 
                      reg &= 4294967039U;
  #line 958 
  if ((int)test_bit(14L,(unsigned long *)(& lks.link_modes.advertising)) != 0) 
    #line 959 
    reg |= 128U; else 
                      #line 961 
                      reg &= 4294967167U;
  #line 964 
  reg |= 32U;
  #line 965 
  reg &= 4294967231U;
  #line 967 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1075773444,(int)reg);
  #line 970 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1075806209);
  #line 971 
  reg &= 4294967287U;
  #line 972 
  reg &= 4294967289U;
  #line 974 
  switch ((unsigned int)pdata->an_mode) {
    #line 975 
    case (unsigned int)2: 
                          #line 975 
    ;
    #line 976 
    reg = reg;
    #line 977 
    break;
    #line 978 
    case (unsigned int)3: 
                          #line 978 
    ;
    #line 979 
    reg |= 4U;
    #line 980 
    break;
    #line 981 
    default: 
             #line 981 
    ;
    #line 982 
    break;
  }
  #line 985 
  reg |= 256U;
  #line 987 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1075806209,(int)reg);
  #line 989 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 989 
    bool branch;
    #line 989 
    struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an37_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL37 AN (%s) initialized\n", .lineno = (unsigned int)989U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 989 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
    #line 989 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 989 
      char *tmp_3;
      #line 989 
      if (pdata->an_mode == (unsigned int)XGBE_AN_MODE_CL37) 
                                                             #line 989 
                                                             tmp_3 = (char *)"BaseX"; else 
                                                                    #line 989 
                                                                    tmp_3 = (char *)"SGMII";
      #line 989 
      ;
      #line 989 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,pdata->netdev,(char *)"CL37 AN (%s) initialized\n",tmp_3);
    }
  }
  #line 991 
  return;
}

#line 993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an73_init(struct xgbe_prv_data *pdata)
{
  #line 995 
  struct ethtool_link_ksettings lks;
  #line 996 
  unsigned int reg;
  #line 998 
  (*(pdata->phy_if.phy_impl.an_advertising))(pdata,& lks);
  #line 1001 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200594);
  #line 1002 
  if ((int)test_bit(20L,(unsigned long *)(& lks.link_modes.advertising)) != 0) 
    #line 1003 
    reg |= 49152U; else 
                        #line 1005 
                        reg &= 4294918143U;
  #line 1007 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074200594,(int)reg);
  #line 1010 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200593);
  #line 1011 
  if ((int)test_bit(19L,(unsigned long *)(& lks.link_modes.advertising)) != 0) 
    #line 1012 
    reg |= 128U; else 
                      #line 1014 
                      reg &= 4294967167U;
  #line 1016 
  if ((int)test_bit(17L,(unsigned long *)(& lks.link_modes.advertising)) != 0) 
    #line 1016 
    goto _LOR;
  else {
    #line 1016 
    if ((int)test_bit(15L,(unsigned long *)(& lks.link_modes.advertising)) != 0) 
      #line 1016 
      _LOR: 
            #line 1018 
            reg |= 32U; else 
                             #line 1020 
                             reg &= 4294967263U;
  }
  #line 1022 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074200593,(int)reg);
  #line 1025 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200592);
  #line 1026 
  if ((int)test_bit(13L,(unsigned long *)(& lks.link_modes.advertising)) != 0) 
    #line 1027 
    reg |= 1024U; else 
                       #line 1029 
                       reg &= 4294966271U;
  #line 1031 
  if ((int)test_bit(14L,(unsigned long *)(& lks.link_modes.advertising)) != 0) 
    #line 1032 
    reg |= 2048U; else 
                       #line 1034 
                       reg &= 4294965247U;
  #line 1037 
  reg &= 4294934527U;
  #line 1039 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1074200592,(int)reg);
  #line 1041 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 1041 
    bool branch;
    #line 1041 
    struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_an73_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"CL73 AN initialized\n", .lineno = (unsigned int)1041U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1041 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
    #line 1041 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1041 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,pdata->netdev,(char *)"CL73 AN initialized\n");
  }
  #line 1043 
  return;
}

#line 1044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_an_init(struct xgbe_prv_data *pdata)
{
  #line 1047 
  pdata->an_mode = (*(pdata->phy_if.phy_impl.an_mode))(pdata);
  #line 1048 
  switch ((unsigned int)pdata->an_mode) {
    #line 1049 
    case (unsigned int)0: 
                          #line 1049 
    ;
    #line 1050 
    case (unsigned int)1: 
                          #line 1050 
    ;
    #line 1051 
    xgbe_an73_init(pdata);
    #line 1052 
    break;
    #line 1053 
    case (unsigned int)2: 
                          #line 1053 
    ;
    #line 1054 
    case (unsigned int)3: 
                          #line 1054 
    ;
    #line 1055 
    xgbe_an37_init(pdata);
    #line 1056 
    break;
    #line 1057 
    default: 
             #line 1057 
    ;
    #line 1058 
    break;
  }
  #line 1060 
  return;
}

#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static char *xgbe_phy_fc_string(struct xgbe_prv_data *pdata)
{
  #line 1064 
  if (pdata->tx_pause != 0U && pdata->rx_pause != 0U) 
                                                      #line 1065 
                                                      return (char *)"rx/tx";
  else 
    #line 1066 
    if (pdata->rx_pause != 0U) 
                               #line 1067 
                               return (char *)"rx";
    else 
      #line 1068 
      if (pdata->tx_pause != 0U) 
                                 #line 1069 
                                 return (char *)"tx"; else 
                                                           #line 1071 
                                                           return (char *)"off";
}

#line 1074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static char *xgbe_phy_speed_string(int speed)
{
  #line 1076 
  switch (speed) {
    #line 1077 
    case 100: 
              #line 1077 
    ;
    #line 1078 
    return (char *)"100Mbps";
    #line 1079 
    case 1000: 
               #line 1079 
    ;
    #line 1080 
    return (char *)"1Gbps";
    #line 1081 
    case 2500: 
               #line 1081 
    ;
    #line 1082 
    return (char *)"2.5Gbps";
    #line 1083 
    case 10000: 
                #line 1083 
    ;
    #line 1084 
    return (char *)"10Gbps";
    #line 1085 
    case -1: 
             #line 1085 
    ;
    #line 1086 
    return (char *)"Unknown";
    #line 1087 
    default: 
             #line 1087 
    ;
    #line 1088 
    return (char *)"Unsupported";
  }
}

#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_phy_print_status(struct xgbe_prv_data *pdata)
{
  #line 1094 
  if (pdata->phy.link != 0) {
    #line 1098 
    char *tmp;
    #line 1097 
    char *tmp_0;
    #line 1098 
    tmp = xgbe_phy_fc_string(pdata);
    #line 1097 
    if (pdata->phy.duplex == 1) 
                                #line 1097 
                                tmp_0 = (char *)"Full"; else 
                                                             #line 1097 
                                                             tmp_0 = (char *)"Half";
    #line 1095 
    ;
    #line 1095 
    netdev_info(pdata->netdev,(char *)"Link is Up - %s/%s - flow control %s\n",xgbe_phy_speed_string(pdata->phy.speed),tmp_0,tmp);
  }
  else 
       #line 1101 
       netdev_info(pdata->netdev,(char *)"Link is Down\n");
  #line 1102 
  return;
}

#line 1104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_phy_adjust_link(struct xgbe_prv_data *pdata)
{
  #line 1106 
  int new_state = 0;
  #line 1108 
  if (pdata->phy.link != 0) {
    #line 1110 
    pdata->pause_autoneg = (unsigned int)pdata->phy.pause_autoneg;
    #line 1112 
    if (pdata->tx_pause != (unsigned int)pdata->phy.tx_pause) {
      #line 1113 
      new_state = 1;
      #line 1114 
      pdata->tx_pause = (unsigned int)pdata->phy.tx_pause;
      #line 1115 
      (*(pdata->hw_if.config_tx_flow_control))(pdata);
    }
    #line 1118 
    if (pdata->rx_pause != (unsigned int)pdata->phy.rx_pause) {
      #line 1119 
      new_state = 1;
      #line 1120 
      pdata->rx_pause = (unsigned int)pdata->phy.rx_pause;
      #line 1121 
      (*(pdata->hw_if.config_rx_flow_control))(pdata);
    }
    #line 1125 
    if (pdata->phy_speed != pdata->phy.speed) {
      #line 1126 
      new_state = 1;
      #line 1127 
      pdata->phy_speed = pdata->phy.speed;
    }
    #line 1130 
    if (pdata->phy_link != pdata->phy.link) {
      #line 1131 
      new_state = 1;
      #line 1132 
      pdata->phy_link = pdata->phy.link;
    }
  }
  else 
    #line 1134 
    if (pdata->phy_link != 0) {
      #line 1135 
      new_state = 1;
      #line 1136 
      pdata->phy_link = 0;
      #line 1137 
      pdata->phy_speed = -1;
    }
  #line 1140 
  if (new_state != 0 && (pdata->msg_enable & 4U) != 0U) 
                                                        #line 1141 
                                                        xgbe_phy_print_status(pdata);
  #line 1142 
  return;
}

#line 1144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static bool xgbe_phy_valid_speed_0(struct xgbe_prv_data *pdata, int speed)
{
  #line 1146 
  return (*(pdata->phy_if.phy_impl.valid_speed))(pdata,speed);
}

#line 1149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int xgbe_phy_config_fixed(struct xgbe_prv_data *pdata)
{
  #line 1151 
  enum xgbe_mode mode;
  #line 1153 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 1153 
    bool branch;
    #line 1153 
    struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_config_fixed", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"fixed PHY configuration\n", .lineno = (unsigned int)1153U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1153 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
    #line 1153 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1153 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,pdata->netdev,(char *)"fixed PHY configuration\n");
  }
  #line 1156 
  xgbe_an_disable(pdata);
  #line 1159 
  mode = (*(pdata->phy_if.phy_impl.get_mode))(pdata,pdata->phy.speed);
  #line 1160 
  switch ((unsigned int)mode) {
    #line 1161 
    case (unsigned int)0: 
                          #line 1161 
    ;
    #line 1162 
    case (unsigned int)1: 
                          #line 1162 
    ;
    #line 1163 
    case (unsigned int)2: 
                          #line 1163 
    ;
    #line 1164 
    case (unsigned int)4: 
                          #line 1164 
    ;
    #line 1165 
    case (unsigned int)5: 
                          #line 1165 
    ;
    #line 1166 
    case (unsigned int)3: 
                          #line 1166 
    ;
    #line 1167 
    case (unsigned int)6: 
                          #line 1167 
    ;
    #line 1168 
    break;
    #line 1169 
    case (unsigned int)7: 
                          #line 1169 
    ;
    #line 1170 
    default: 
             #line 1170 
    ;
    #line 1171 
    return -22;
  }
  #line 1175 
  if (pdata->phy.duplex != 1) 
                              #line 1176 
                              return -22;
  #line 1178 
  xgbe_set_mode(pdata,mode);
  #line 1180 
  return 0;
}

#line 1183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int __xgbe_phy_config_aneg(struct xgbe_prv_data *pdata, bool set_mode)
{
  #line 1185 
  int ret;
  #line 1187 
  cif_mutex_lock_an_mutex_of_xgbe_prv_data(& pdata->an_mutex);
  #line 1189 
  cif_set_bit_0(1L,& pdata->dev_state);
  #line 1190 
  pdata->link_check = jiffies;
  #line 1192 
  ret = (*(pdata->phy_if.phy_impl.an_config))(pdata);
  #line 1193 
  if (ret != 0) 
                #line 1194 
                goto out;
  #line 1196 
  if (pdata->phy.autoneg != 1) {
    #line 1197 
    ret = xgbe_phy_config_fixed(pdata);
    #line 1198 
    if (ret != 0 || pdata->kr_redrv == 0U) 
                                           #line 1199 
                                           goto out;
    #line 1201 
    if ((pdata->msg_enable & 4U) != 0U) {
      #line 1201 
      bool branch;
      #line 1201 
      struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"amd_xgbe", .function = (char *)"__xgbe_phy_config_aneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"AN redriver support\n", .lineno = (unsigned int)1201U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1201 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
      #line 1201 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1201 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,pdata->netdev,(char *)"AN redriver support\n");
    }
  }
  else 
    #line 1203 
    if ((pdata->msg_enable & 4U) != 0U) {
      #line 1203 
      bool branch_0;
      #line 1203 
      struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"amd_xgbe", .function = (char *)"__xgbe_phy_config_aneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"AN PHY configuration\n", .lineno = (unsigned int)1203U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1203 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
      #line 1203 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1203 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,pdata->netdev,(char *)"AN PHY configuration\n");
    }
  #line 1207 
  disable_irq((unsigned int)pdata->an_irq);
  #line 1209 
  if ((int)set_mode != 0) {
    #line 1211 
    if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_KR) != 0) 
      #line 1212 
      xgbe_set_mode(pdata,(enum xgbe_mode)XGBE_MODE_KR);
    else {
      #line 1213 
      if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_KX_2500) != 0) 
        #line 1214 
        xgbe_set_mode(pdata,(enum xgbe_mode)XGBE_MODE_KX_2500);
      else {
        #line 1215 
        if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_KX_1000) != 0) 
          #line 1216 
          xgbe_set_mode(pdata,(enum xgbe_mode)XGBE_MODE_KX_1000);
        else {
          #line 1217 
          if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_SFI) != 0) 
            #line 1218 
            xgbe_set_mode(pdata,(enum xgbe_mode)XGBE_MODE_SFI);
          else {
            #line 1219 
            if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_X) != 0) 
              #line 1220 
              xgbe_set_mode(pdata,(enum xgbe_mode)XGBE_MODE_X);
            else {
              #line 1221 
              if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_SGMII_1000) != 0) 
                #line 1222 
                xgbe_set_mode(pdata,(enum xgbe_mode)XGBE_MODE_SGMII_1000);
              else {
                #line 1223 
                if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_SGMII_100) != 0) 
                  #line 1224 
                  xgbe_set_mode(pdata,(enum xgbe_mode)XGBE_MODE_SGMII_100);
                else {
                  #line 1226 
                  enable_irq((unsigned int)pdata->an_irq);
                  #line 1227 
                  ret = -22;
                  #line 1228 
                  goto out;
                }
              }
            }
          }
        }
      }
    }
  }
  #line 1233 
  xgbe_an_disable_all(pdata);
  #line 1236 
  xgbe_an_clear_interrupts_all(pdata);
  #line 1238 
  pdata->an_result = XGBE_AN_READY;
  #line 1239 
  pdata->an_state = XGBE_AN_READY;
  #line 1240 
  pdata->kr_state = XGBE_RX_BPA;
  #line 1241 
  pdata->kx_state = XGBE_RX_BPA;
  #line 1244 
  enable_irq((unsigned int)pdata->an_irq);
  #line 1246 
  xgbe_an_init(pdata);
  #line 1247 
  xgbe_an_restart(pdata);
  #line 1249 
  out: 
       #line 1249 
  ;
  #line 1250 
  if (ret != 0) 
                #line 1251 
                cif_set_bit_0(2L,& pdata->dev_state); else 
                                                           #line 1253 
                                                           cif_clear_bit(2L,& pdata->dev_state);
  #line 1255 
  cif_mutex_unlock_an_mutex_of_xgbe_prv_data(& pdata->an_mutex);
  #line 1257 
  return ret;
}

#line 1260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int xgbe_phy_config_aneg(struct xgbe_prv_data *pdata)
{
  #line 1262 
  return __xgbe_phy_config_aneg(pdata,(_Bool)1);
}

#line 1265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int xgbe_phy_reconfig_aneg(struct xgbe_prv_data *pdata)
{
  #line 1267 
  return __xgbe_phy_config_aneg(pdata,(_Bool)0);
}

#line 1270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static bool xgbe_phy_aneg_done(struct xgbe_prv_data *pdata)
{
  #line 1272 
  return (_Bool)(pdata->an_result == (unsigned int)XGBE_AN_COMPLETE);
}

#line 1275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_check_link_timeout(struct xgbe_prv_data *pdata)
{
  #line 1277 
  unsigned long link_timeout;
  #line 1279 
  link_timeout = pdata->link_check + 1250UL;
  {
    #line 1280 
    unsigned long __dummy;
    #line 1280 
    unsigned long __dummy2;
    }
  #line 1280 
  if (1 != 0) {
    {
      #line 1280 
      unsigned long __dummy_0;
      #line 1280 
      unsigned long __dummy2_0;
      }
    #line 1280 
    if (1 != 0) 
      #line 1280 
      if ((long)(link_timeout - jiffies) < 0L) {
        #line 1281 
        if ((pdata->msg_enable & 4U) != 0U) {
          #line 1281 
          bool branch;
          #line 1281 
          struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_check_link_timeout", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"AN link timeout\n", .lineno = (unsigned int)1281U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1281 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
          #line 1281 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 1281 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,pdata->netdev,(char *)"AN link timeout\n");
        }
        #line 1282 
        xgbe_phy_config_aneg(pdata);
      }
  }
  #line 1284 
  return;
}

#line 1286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static enum xgbe_mode xgbe_phy_status_aneg(struct xgbe_prv_data *pdata)
{
  #line 1288 
  return (*(pdata->phy_if.phy_impl.an_outcome))(pdata);
}

#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_phy_status_result(struct xgbe_prv_data *pdata)
{
  #line 1294 
  enum xgbe_mode mode;
  #line 1293 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 1296 
  cif_bitmap_zero_0((unsigned long *)(& lks->link_modes.lp_advertising),74U);
  #line 1298 
  if (pdata->phy.autoneg != 1 || pdata->parallel_detect != 0U) 
                                                               #line 1299 
                                                               mode = xgbe_cur_mode(pdata); else 
                                                                    #line 1301 
                                                                    mode = xgbe_phy_status_aneg(pdata);
  #line 1303 
  switch ((unsigned int)mode) {
    #line 1304 
    case (unsigned int)4: 
                          #line 1304 
    ;
    #line 1305 
    pdata->phy.speed = 100;
    #line 1306 
    break;
    #line 1307 
    case (unsigned int)3: 
                          #line 1307 
    ;
    #line 1308 
    case (unsigned int)0: 
                          #line 1308 
    ;
    #line 1309 
    case (unsigned int)5: 
                          #line 1309 
    ;
    #line 1310 
    pdata->phy.speed = 1000;
    #line 1311 
    break;
    #line 1312 
    case (unsigned int)1: 
                          #line 1312 
    ;
    #line 1313 
    pdata->phy.speed = 2500;
    #line 1314 
    break;
    #line 1315 
    case (unsigned int)2: 
                          #line 1315 
    ;
    #line 1316 
    case (unsigned int)6: 
                          #line 1316 
    ;
    #line 1317 
    pdata->phy.speed = 10000;
    #line 1318 
    break;
    #line 1319 
    case (unsigned int)7: 
                          #line 1319 
    ;
    #line 1320 
    default: 
             #line 1320 
    ;
    #line 1321 
    pdata->phy.speed = -1;
  }
  #line 1324 
  pdata->phy.duplex = 1;
  #line 1326 
  if ((int)xgbe_set_mode(pdata,mode) != 0) 
    #line 1326 
    if (pdata->an_again != 0U) 
                               #line 1327 
                               xgbe_phy_reconfig_aneg(pdata);
  #line 1328 
  return;
}

#line 1330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_phy_status(struct xgbe_prv_data *pdata)
{
  #line 1332 
  unsigned int link_aneg;
  #line 1333 
  int an_restart;
  #line 1335 
  if ((int)test_bit(2L,& pdata->dev_state) != 0) {
    #line 1336 
    netif_carrier_off(pdata->netdev);
    #line 1338 
    pdata->phy.link = 0;
    #line 1339 
    goto adjust_link;
  }
  #line 1342 
  link_aneg = (unsigned int)(pdata->phy.autoneg == 1);
  #line 1344 
  pdata->phy.link = (*(pdata->phy_if.phy_impl.link_status))(pdata,& an_restart);
  #line 1346 
  if (an_restart != 0) {
    #line 1347 
    xgbe_phy_config_aneg(pdata);
    #line 1348 
    return;
  }
  #line 1351 
  if (pdata->phy.link != 0) {
    #line 1352 
    if (link_aneg != 0U) {
      #line 1352 
      if (! xgbe_phy_aneg_done(pdata)) {
        #line 1353 
        xgbe_check_link_timeout(pdata);
        #line 1354 
        return;
      }
    }
    #line 1357 
    xgbe_phy_status_result(pdata);
    #line 1359 
    if ((int)test_bit(1L,& pdata->dev_state) != 0) 
                                                   #line 1360 
                                                   cif_clear_bit(1L,& pdata->dev_state);
    #line 1362 
    netif_carrier_on(pdata->netdev);
  }
  else {
    #line 1364 
    if ((int)test_bit(1L,& pdata->dev_state) != 0) {
      #line 1365 
      xgbe_check_link_timeout(pdata);
      #line 1367 
      if (link_aneg != 0U) 
                           #line 1368 
                           return;
    }
    #line 1371 
    xgbe_phy_status_result(pdata);
    #line 1373 
    netif_carrier_off(pdata->netdev);
  }
  #line 1376 
  adjust_link: 
               #line 1376 
  ;
  #line 1377 
  xgbe_phy_adjust_link(pdata);
  #line 1378 
  return;
}

#line 1380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_phy_stop_0(struct xgbe_prv_data *pdata)
{
  #line 1382 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 1382 
    bool branch;
    #line 1382 
    struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_stop", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"stopping PHY\n", .lineno = (unsigned int)1382U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1382 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
    #line 1382 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1382 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,pdata->netdev,(char *)"stopping PHY\n");
  }
  #line 1384 
  if (pdata->phy_started == 0U) 
                                #line 1385 
                                return;
  #line 1388 
  pdata->phy_started = 0U;
  #line 1391 
  xgbe_an_disable_all(pdata);
  #line 1393 
  if (pdata->dev_irq != pdata->an_irq) 
                                       #line 1394 
                                       cif_devm_free_irq_0(pdata->dev,(unsigned int)pdata->an_irq,(void *)pdata);
  #line 1396 
  (*(pdata->phy_if.phy_impl.stop))(pdata);
  #line 1398 
  pdata->phy.link = 0;
  #line 1399 
  netif_carrier_off(pdata->netdev);
  #line 1401 
  xgbe_phy_adjust_link(pdata);
  #line 1402 
  return;
}

#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int xgbe_phy_start_0(struct xgbe_prv_data *pdata)
{
  #line 1407 
  int ret;
  #line 1406 
  struct net_device *netdev = pdata->netdev;
  #line 1409 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 1409 
    bool branch;
    #line 1409 
    struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_start", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"starting PHY\n", .lineno = (unsigned int)1409U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1409 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
    #line 1409 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1409 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug462,pdata->netdev,(char *)"starting PHY\n");
  }
  #line 1411 
  ret = (*(pdata->phy_if.phy_impl.start))(pdata);
  #line 1412 
  if (ret != 0) 
                #line 1413 
                return ret;
  #line 1416 
  if (pdata->dev_irq != pdata->an_irq) {
    #line 1417 
    cif_tasklet_init_0(& pdata->tasklet_an,& xgbe_an_isr_task,(unsigned long)pdata);
    #line 1420 
    ret = devm_request_irq(pdata->dev,(unsigned int)pdata->an_irq,& xgbe_an_isr,0UL,(char *)(& pdata->an_name),(void *)pdata);
    #line 1423 
    if (ret != 0) {
      #line 1424 
      netdev_err(netdev,(char *)"phy irq request failed\n");
      #line 1425 
      goto err_stop;
    }
  }
  #line 1432 
  if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_KR) != 0) 
                                                                   #line 1433 
                                                                   xgbe_kr_mode(pdata);
  else {
    #line 1434 
    if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_KX_2500) != 0) 
      #line 1435 
      xgbe_kx_2500_mode(pdata);
    else {
      #line 1436 
      if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_KX_1000) != 0) 
        #line 1437 
        xgbe_kx_1000_mode(pdata);
      else {
        #line 1438 
        if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_SFI) != 0) 
          #line 1439 
          xgbe_sfi_mode(pdata);
        else {
          #line 1440 
          if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_X) != 0) 
            #line 1441 
            xgbe_x_mode(pdata);
          else {
            #line 1442 
            if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_SGMII_1000) != 0) 
              #line 1443 
              xgbe_sgmii_1000_mode(pdata);
            else {
              #line 1444 
              if ((int)xgbe_use_mode(pdata,(enum xgbe_mode)XGBE_MODE_SGMII_100) != 0) 
                #line 1445 
                xgbe_sgmii_100_mode(pdata);
              else {
                #line 1447 
                ret = -22;
                #line 1448 
                goto err_irq;
              }
            }
          }
        }
      }
    }
  }
  #line 1452 
  pdata->phy_started = 1U;
  #line 1454 
  xgbe_an_init(pdata);
  #line 1455 
  xgbe_an_enable_interrupts(pdata);
  #line 1457 
  return xgbe_phy_config_aneg(pdata);
  #line 1459 
  err_irq: 
           #line 1459 
  ;
  #line 1460 
  if (pdata->dev_irq != pdata->an_irq) 
                                       #line 1461 
                                       cif_devm_free_irq_0(pdata->dev,(unsigned int)pdata->an_irq,(void *)pdata);
  #line 1463 
  err_stop: 
            #line 1463 
  ;
  #line 1464 
  (*(pdata->phy_if.phy_impl.stop))(pdata);
  #line 1466 
  return ret;
}

#line 1469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int xgbe_phy_reset_0(struct xgbe_prv_data *pdata)
{
  #line 1471 
  int ret;
  #line 1473 
  ret = (*(pdata->phy_if.phy_impl.reset))(pdata);
  #line 1474 
  if (ret != 0) 
                #line 1475 
                return ret;
  #line 1478 
  xgbe_an_disable_all(pdata);
  #line 1481 
  xgbe_an_clear_interrupts_all(pdata);
  #line 1483 
  return 0;
}

#line 1486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_dump_phy_registers(struct xgbe_prv_data *pdata)
{
  #line 1488 
  struct device *dev = pdata->dev;
  {
    #line 1490 
    bool branch;
    #line 1490 
    struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"\n************* PHY Reg dump **********************\n", .lineno = (unsigned int)1490U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1490 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
    #line 1490 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1490 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug463,dev,(char *)"\n************* PHY Reg dump **********************\n");
  }
  {
    #line 1492 
    bool branch_0;
    #line 1492 
    struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"PCS Control Reg (%#06x) = %#06x\n", .lineno = (unsigned int)1492U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1492 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
    #line 1492 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 1492 
      ;
      #line 1492 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug464,dev,(char *)"PCS Control Reg (%#06x) = %#06x\n",0,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938432));
    }
  }
  {
    #line 1494 
    bool branch_1;
    #line 1494 
    struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"PCS Status Reg (%#06x) = %#06x\n", .lineno = (unsigned int)1494U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1494 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
    #line 1494 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 1494 
      ;
      #line 1494 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug465,dev,(char *)"PCS Status Reg (%#06x) = %#06x\n",1,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938433));
    }
  }
  {
    #line 1496 
    bool branch_2;
    #line 1496 
    struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Phy Id (PHYS ID 1 %#06x)= %#06x\n", .lineno = (unsigned int)1496U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1496 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
    #line 1496 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 1496 
      ;
      #line 1496 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug466,dev,(char *)"Phy Id (PHYS ID 1 %#06x)= %#06x\n",2,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938434));
    }
  }
  {
    #line 1498 
    bool branch_3;
    #line 1498 
    struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Phy Id (PHYS ID 2 %#06x)= %#06x\n", .lineno = (unsigned int)1498U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1498 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
    #line 1498 
    if ((long)((long)((int)branch_3 != 0)) != 0L) {
      #line 1498 
      ;
      #line 1498 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug467,dev,(char *)"Phy Id (PHYS ID 2 %#06x)= %#06x\n",3,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938435));
    }
  }
  {
    #line 1500 
    bool branch_4;
    #line 1500 
    struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Devices in Package (%#06x)= %#06x\n", .lineno = (unsigned int)1500U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1500 
    branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
    #line 1500 
    if ((long)((long)((int)branch_4 != 0)) != 0L) {
      #line 1500 
      ;
      #line 1500 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug468,dev,(char *)"Devices in Package (%#06x)= %#06x\n",5,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938437));
    }
  }
  {
    #line 1502 
    bool branch_5;
    #line 1502 
    struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Devices in Package (%#06x)= %#06x\n", .lineno = (unsigned int)1502U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1502 
    branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
    #line 1502 
    if ((long)((long)((int)branch_5 != 0)) != 0L) {
      #line 1502 
      ;
      #line 1502 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug469,dev,(char *)"Devices in Package (%#06x)= %#06x\n",6,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938438));
    }
  }
  {
    #line 1505 
    bool branch_6;
    #line 1505 
    struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Auto-Neg Control Reg (%#06x) = %#06x\n", .lineno = (unsigned int)1505U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1505 
    branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
    #line 1505 
    if ((long)((long)((int)branch_6 != 0)) != 0L) {
      #line 1505 
      ;
      #line 1505 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug470,dev,(char *)"Auto-Neg Control Reg (%#06x) = %#06x\n",0,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200576));
    }
  }
  {
    #line 1507 
    bool branch_7;
    #line 1507 
    struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Auto-Neg Status Reg (%#06x) = %#06x\n", .lineno = (unsigned int)1507U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1507 
    branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
    #line 1507 
    if ((long)((long)((int)branch_7 != 0)) != 0L) {
      #line 1507 
      ;
      #line 1507 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug471,dev,(char *)"Auto-Neg Status Reg (%#06x) = %#06x\n",1,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200577));
    }
  }
  {
    #line 1509 
    bool branch_8;
    #line 1509 
    struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Auto-Neg Ad Reg 1 (%#06x) = %#06x\n", .lineno = (unsigned int)1509U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1509 
    branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
    #line 1509 
    if ((long)((long)((int)branch_8 != 0)) != 0L) {
      #line 1509 
      ;
      #line 1509 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug472,dev,(char *)"Auto-Neg Ad Reg 1 (%#06x) = %#06x\n",16,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200592));
    }
  }
  {
    #line 1512 
    bool branch_9;
    #line 1512 
    struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Auto-Neg Ad Reg 2 (%#06x) = %#06x\n", .lineno = (unsigned int)1512U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1512 
    branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
    #line 1512 
    if ((long)((long)((int)branch_9 != 0)) != 0L) {
      #line 1512 
      ;
      #line 1512 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug473,dev,(char *)"Auto-Neg Ad Reg 2 (%#06x) = %#06x\n",17,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200593));
    }
  }
  {
    #line 1515 
    bool branch_10;
    #line 1515 
    struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Auto-Neg Ad Reg 3 (%#06x) = %#06x\n", .lineno = (unsigned int)1515U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1515 
    branch_10 = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
    #line 1515 
    if ((long)((long)((int)branch_10 != 0)) != 0L) {
      #line 1515 
      ;
      #line 1515 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug474,dev,(char *)"Auto-Neg Ad Reg 3 (%#06x) = %#06x\n",18,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200594));
    }
  }
  {
    #line 1518 
    bool branch_11;
    #line 1518 
    struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"Auto-Neg Completion Reg (%#06x) = %#06x\n", .lineno = (unsigned int)1518U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1518 
    branch_11 = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
    #line 1518 
    if ((long)((long)((int)branch_11 != 0)) != 0L) {
      #line 1518 
      ;
      #line 1518 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug475,dev,(char *)"Auto-Neg Completion Reg (%#06x) = %#06x\n",48,(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200624));
    }
  }
  {
    #line 1522 
    bool branch_12;
    #line 1522 
    struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_phy_registers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c", .format = (char *)"\n*************************************************\n", .lineno = (unsigned int)1522U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1522 
    branch_12 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
    #line 1522 
    if ((long)((long)((int)branch_12 != 0)) != 0L) 
                                                   #line 1522 
                                                   __dynamic_dev_dbg(& __UNIQUE_ID_ddebug476,dev,(char *)"\n*************************************************\n");
  }
  #line 1524 
  return;
}

#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int xgbe_phy_best_advertised_speed(struct xgbe_prv_data *pdata)
{
  #line 1527 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 1529 
  if ((int)test_bit(19L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
    #line 1530 
    return 10000;
  else {
    #line 1531 
    if ((int)test_bit(12L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
      #line 1532 
      return 10000;
    else {
      #line 1533 
      if ((int)test_bit(15L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
        #line 1534 
        return 2500;
      else {
        #line 1535 
        if ((int)test_bit(47L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
          #line 1536 
          return 2500;
        else {
          #line 1537 
          if ((int)test_bit(17L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
            #line 1538 
            return 1000;
          else {
            #line 1539 
            if ((int)test_bit(5L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
              #line 1540 
              return 1000;
            else {
              #line 1541 
              if ((int)test_bit(3L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
                #line 1542 
                return 100;
            }
          }
        }
      }
    }
  }
  #line 1544 
  return -1;
}

#line 1547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static void xgbe_phy_exit_0(struct xgbe_prv_data *pdata)
{
  #line 1549 
  (*(pdata->phy_if.phy_impl.exit))(pdata);
  #line 1550 
  return;
}

#line 1552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
static int xgbe_phy_init_0(struct xgbe_prv_data *pdata)
{
  #line 1555 
  int ret;
  #line 1554 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  {
    #line 1557 
    struct lock_class_key __key;
    #line 1557 
    __mutex_init(& pdata->an_mutex,(char *)"&pdata->an_mutex",& __key);
  }
  {
    #line 1558 
    struct lock_class_key __key_0;
    #line 1558 
    __init_work(& pdata->an_irq_work,0);
    #line 1558 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 1558 
    pdata->an_irq_work.data = __constr_expr_34;
    #line 1558 
    lockdep_init_map(& pdata->an_irq_work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 1558 
    INIT_LIST_HEAD_0(& pdata->an_irq_work.entry);
    #line 1558 
    pdata->an_irq_work.func = & xgbe_an_irq_work;
  }
  {
    #line 1559 
    struct lock_class_key __key_1;
    #line 1559 
    __init_work(& pdata->an_work,0);
    #line 1559 
    atomic_long_t __constr_expr_35 = {.counter = 137438953408LL};
    #line 1559 
    pdata->an_work.data = __constr_expr_35;
    #line 1559 
    lockdep_init_map(& pdata->an_work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 1559 
    INIT_LIST_HEAD_0(& pdata->an_work.entry);
    #line 1559 
    pdata->an_work.func = & xgbe_an_state_machine;
  }
  #line 1560 
  pdata->mdio_mmd = 3;
  #line 1563 
  pdata->fec_ability = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073807530);
  #line 1565 
  pdata->fec_ability &= 3U;
  #line 1569 
  ret = (*(pdata->phy_if.phy_impl.init))(pdata);
  #line 1570 
  if (ret != 0) 
                #line 1571 
                return ret;
  #line 1574 
  bitmap_copy((unsigned long *)(& lks->link_modes.advertising),(unsigned long *)(& lks->link_modes.supported),74U);
  #line 1576 
  pdata->phy.address = 0;
  #line 1578 
  if ((int)test_bit(6L,(unsigned long *)(& lks->link_modes.advertising)) != 0) {
    #line 1579 
    pdata->phy.autoneg = 1;
    #line 1580 
    pdata->phy.speed = -1;
    #line 1581 
    pdata->phy.duplex = 255;
  }
  else {
    #line 1583 
    pdata->phy.autoneg = 0;
    #line 1584 
    pdata->phy.speed = xgbe_phy_best_advertised_speed(pdata);
    #line 1585 
    pdata->phy.duplex = 1;
  }
  #line 1588 
  pdata->phy.link = 0;
  #line 1590 
  pdata->phy.pause_autoneg = (int)pdata->pause_autoneg;
  #line 1591 
  pdata->phy.tx_pause = (int)pdata->tx_pause;
  #line 1592 
  pdata->phy.rx_pause = (int)pdata->rx_pause;
  #line 1595 
  __set_bit(13L,(unsigned long *)(& lks->link_modes.advertising));
  #line 1596 
  __set_bit(14L,(unsigned long *)(& lks->link_modes.advertising));
  #line 1598 
  if (pdata->rx_pause != 0U) {
    #line 1599 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.advertising));
    #line 1600 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.advertising));
  }
  #line 1603 
  if (pdata->tx_pause != 0U) {
    #line 1605 
    if ((int)test_bit(14L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
      #line 1606 
      __set_bit(14L,(unsigned long *)(& lks->link_modes.advertising)); else 
                                                                    #line 1608 
                                                                    __set_bit(14L,(unsigned long *)(& lks->link_modes.advertising));
  }
  #line 1611 
  if ((pdata->msg_enable & 1U) != 0U) 
                                      #line 1612 
                                      xgbe_dump_phy_registers(pdata);
  #line 1614 
  return 0;
}

#line 1617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c"
void xgbe_init_function_ptrs_phy(struct xgbe_phy_if *phy_if)
{
  #line 1619 
  phy_if->phy_init = & xgbe_phy_init_0;
  #line 1620 
  phy_if->phy_exit = & xgbe_phy_exit_0;
  #line 1622 
  phy_if->phy_reset = & xgbe_phy_reset_0;
  #line 1623 
  phy_if->phy_start = & xgbe_phy_start_0;
  #line 1624 
  phy_if->phy_stop = & xgbe_phy_stop_0;
  #line 1626 
  phy_if->phy_status = & xgbe_phy_status;
  #line 1627 
  phy_if->phy_config_aneg = & xgbe_phy_config_aneg;
  #line 1629 
  phy_if->phy_valid_speed = & xgbe_phy_valid_speed_0;
  #line 1631 
  phy_if->an_isr = & xgbe_an_combined_isr;
  #line 1633 
  phy_if->module_info = & xgbe_phy_module_info_0;
  #line 1634 
  phy_if->module_eeprom = & xgbe_phy_module_eeprom_0;
  #line 1635 
  return;
}

#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
#line 96 
_Bool emg_flush_work(struct work_struct *arg0);
#line 99 
#line 99 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_bitmap_zero_0(unsigned long *dst, unsigned int nbits)
{
  #line 201 
  ldv_bitmap_zero(dst,nbits);
  #line 202 
  return;
}

#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 309 
  return emg_queue_work(wq,work);
}

#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_tasklet_schedule_0(struct tasklet_struct *t)
{
  #line 698 
  emg_tasklet_schedule(t);
  #line 699 
  return;
}

#line 702  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static bool cif_flush_work(struct work_struct *work)
{
  #line 706 
  return emg_flush_work(work);
}

#line 710  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_mutex_lock_an_mutex_of_xgbe_prv_data(struct mutex *lock)
{
  #line 713 
  ldv_mutex_model_lock(lock,(char *)"an_mutex_of_xgbe_prv_data");
  #line 714 
  return;
}

#line 717  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_mutex_unlock_an_mutex_of_xgbe_prv_data(struct mutex *lock)
{
  #line 720 
  ldv_mutex_model_unlock(lock,(char *)"an_mutex_of_xgbe_prv_data");
  #line 721 
  return;
}

#line 724  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_devm_free_irq_0(struct device *dev, unsigned int irq, void *dev_id)
{
  #line 728 
  emg_devm_free_irq(dev,irq,dev_id);
  #line 729 
  return;
}

#line 732  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-mdio.i.aux"
static void cif_tasklet_init_0(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 736 
  emg_tasklet_init(t,func,data);
  #line 737 
  return;
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v1.i.aux"
static void cif_bitmap_zero_1(unsigned long *dst, unsigned int nbits);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 30 
unsigned int ioread16(void *);
#line 51 
#line 51 
void iowrite16(u16, void *);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v1.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
#line 35 
bool device_property_present(struct device *, char *);
#line 40 
#line 40 
int device_property_read_u32_array(struct device *, char *, u32 *, size_t);
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
__inline static int device_property_read_u32(struct device *dev, char *propname, u32 *val)
{
  #line 143 
  return device_property_read_u32_array(dev,propname,val,1UL);
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 1319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
void xgbe_init_function_ptrs_phy_v1(struct xgbe_phy_if *phy_if);
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static u32 xgbe_phy_blwc[3U] = {1U, 1U};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static u32 xgbe_phy_cdr_rate[3U] = {2U, 2U, 7U};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static u32 xgbe_phy_pq_skew[3U] = {10U, 10U, 18U};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static u32 xgbe_phy_tx_amp[3U] = {15U, 15U, 10U};
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static u32 xgbe_phy_dfe_tap_cfg[3U] = {3U, 3U, 1U};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static u32 xgbe_phy_dfe_tap_ena[3U] = {[2] = 127U};
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_kr_training_pre_0(struct xgbe_prv_data *pdata)
{
  #line 224 
  u16 reg_val = (unsigned short)ioread16(pdata->sir0_regs + 44U);
  #line 224 
  reg_val = (unsigned short)((unsigned int)reg_val & 63487U);
  #line 224 
  reg_val = (unsigned short)((unsigned int)reg_val | 2048U);
  #line 224 
  iowrite16((unsigned short)((int)reg_val),pdata->sir0_regs + 44U);
  #line 226 
  return;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_kr_training_post_0(struct xgbe_prv_data *pdata)
{
  #line 229 
  u16 reg_val = (unsigned short)ioread16(pdata->sir0_regs + 44U);
  #line 229 
  reg_val = (unsigned short)((unsigned int)reg_val & 63487U);
  #line 229 
  reg_val = reg_val;
  #line 229 
  iowrite16((unsigned short)((int)reg_val),pdata->sir0_regs + 44U);
  #line 231 
  return;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static enum xgbe_mode xgbe_phy_an_outcome_0(struct xgbe_prv_data *pdata)
{
  #line 236 
  enum xgbe_mode mode;
  #line 237 
  unsigned int ad_reg;
  #line 237 
  unsigned int lp_reg;
  #line 234 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 235 
  struct xgbe_phy_data_0 *phy_data = (struct xgbe_phy_data_0 *)pdata->phy_data;
  #line 239 
  __set_bit(6L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 240 
  __set_bit(16L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 243 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200592);
  #line 244 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200595);
  #line 245 
  if ((lp_reg & 1024U) != 0U) 
                              #line 246 
                              __set_bit(13L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 247 
  if ((lp_reg & 2048U) != 0U) 
                              #line 248 
                              __set_bit(14L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 250 
  if (pdata->phy.pause_autoneg != 0) {
    #line 252 
    pdata->phy.tx_pause = 0;
    #line 253 
    pdata->phy.rx_pause = 0;
    #line 255 
    if (((ad_reg & lp_reg) & 1024U) != 0U) {
      #line 256 
      pdata->phy.tx_pause = 1;
      #line 257 
      pdata->phy.rx_pause = 1;
    }
    else 
      #line 258 
      if (((ad_reg & lp_reg) & 2048U) != 0U) 
        #line 259 
        if ((ad_reg & 1024U) != 0U) 
                                    #line 260 
                                    pdata->phy.rx_pause = 1;
        else 
          #line 261 
          if ((lp_reg & 1024U) != 0U) 
                                      #line 262 
                                      pdata->phy.tx_pause = 1;
  }
  #line 267 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200593);
  #line 268 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200596);
  #line 269 
  if ((lp_reg & 128U) != 0U) 
                             #line 270 
                             __set_bit(19L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 271 
  if ((lp_reg & 32U) != 0U) 
    #line 272 
    if (phy_data->speed_set == 1U) 
                                   #line 273 
                                   __set_bit(15L,(unsigned long *)(& lks->link_modes.lp_advertising)); else 
                                                                    #line 275 
                                                                    __set_bit(17L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 278 
  ad_reg &= lp_reg;
  #line 279 
  if ((ad_reg & 128U) != 0U) 
                             #line 280 
                             mode = XGBE_MODE_KR;
  else 
    #line 281 
    if ((ad_reg & 32U) != 0U) 
      #line 282 
      if (phy_data->speed_set == 1U) 
                                     #line 283 
                                     mode = XGBE_MODE_KX_2500; else 
                                                                    #line 285 
                                                                    mode = XGBE_MODE_KX_1000;
    else 
         #line 287 
         mode = XGBE_MODE_UNKNOWN;
  #line 291 
  ad_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200594);
  #line 292 
  lp_reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1074200597);
  #line 293 
  if ((lp_reg & 49152U) != 0U) 
                               #line 294 
                               __set_bit(20L,(unsigned long *)(& lks->link_modes.lp_advertising));
  #line 296 
  return mode;
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_an_advertising_0(struct xgbe_prv_data *pdata, struct ethtool_link_ksettings *dlks)
{
  #line 302 
  struct ethtool_link_ksettings *slks = & pdata->phy.lks;
  #line 304 
  bitmap_copy((unsigned long *)(& dlks->link_modes.advertising),(unsigned long *)(& slks->link_modes.advertising),74U);
  #line 305 
  return;
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static int xgbe_phy_an_config_0(struct xgbe_prv_data *pdata)
{
  #line 310 
  return 0;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static enum xgbe_an_mode xgbe_phy_an_mode_0(struct xgbe_prv_data *pdata)
{
  #line 315 
  return XGBE_AN_MODE_CL73;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_pcs_power_cycle(struct xgbe_prv_data *pdata)
{
  #line 320 
  unsigned int reg;
  #line 322 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938432);
  #line 324 
  reg |= 2048U;
  #line 325 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)reg);
  #line 327 
  usleep_range(75UL,100UL);
  #line 329 
  reg &= 4294965247U;
  #line 330 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)reg);
  #line 331 
  return;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_start_ratechange(struct xgbe_prv_data *pdata)
{
  #line 336 
  u16 reg_val = (unsigned short)ioread16(pdata->sir1_regs);
  #line 336 
  reg_val = (unsigned short)((unsigned int)reg_val & 65471U);
  #line 336 
  reg_val = (unsigned short)((unsigned int)reg_val | 64U);
  #line 336 
  iowrite16((unsigned short)((int)reg_val),pdata->sir1_regs);
  #line 338 
  return;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_complete_ratechange(struct xgbe_prv_data *pdata)
{
  #line 341 
  unsigned int wait;
  #line 342 
  u16 status;
  {
    #line 345 
    u16 reg_val = (unsigned short)ioread16(pdata->sir1_regs);
    #line 345 
    reg_val = (unsigned short)((unsigned int)reg_val & 65471U);
    #line 345 
    reg_val = reg_val;
    #line 345 
    iowrite16((unsigned short)((int)reg_val),pdata->sir1_regs);
  }
  #line 348 
  wait = 500U;
  #line 349 
  while (1) {
    #line 349 
    unsigned int tmp_1;
    #line 349 
    tmp_1 = wait;
    #line 349 
    wait --;
    #line 349 
    ;
    #line 349 
    if (! (tmp_1 != 0U)) 
                         #line 349 
                         break;
    {
      #line 350 
      usleep_range(50UL,75UL);
      #line 352 
      status = (unsigned short)ioread16(pdata->sir0_regs + 64U);
      #line 353 
      if (((int)status & 1) != 0 && (((int)status >> 8) & 1) != 0) 
                                                                   #line 355 
                                                                   goto rx_reset;
    }
  }
  #line 358 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 358 
    bool branch;
    #line 358 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_complete_ratechange", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c", .format = (char *)"SerDes rx/tx not ready (%#hx)\n", .lineno = (unsigned int)358U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 358 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 358 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 358 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,pdata->netdev,(char *)"SerDes rx/tx not ready (%#hx)\n",(int)status);
  }
  #line 361 
  rx_reset: 
            #line 361 
  ;
  {
    #line 363 
    u16 reg_val_0 = (unsigned short)ioread16(pdata->rxtx_regs + 24U);
    #line 363 
    reg_val_0 = (unsigned short)((unsigned int)reg_val_0 & 65279U);
    #line 363 
    reg_val_0 = reg_val_0;
    #line 363 
    iowrite16((unsigned short)((int)reg_val_0),pdata->rxtx_regs + 24U);
  }
  {
    #line 364 
    u16 reg_val_1 = (unsigned short)ioread16(pdata->rxtx_regs + 24U);
    #line 364 
    reg_val_1 = (unsigned short)((unsigned int)reg_val_1 & 65279U);
    #line 364 
    reg_val_1 = (unsigned short)((unsigned int)reg_val_1 | 256U);
    #line 364 
    iowrite16((unsigned short)((int)reg_val_1),pdata->rxtx_regs + 24U);
  }
  #line 366 
  return;
}

#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_kr_mode_0(struct xgbe_prv_data *pdata)
{
  #line 370 
  unsigned int reg;
  #line 369 
  struct xgbe_phy_data_0 *phy_data = (struct xgbe_phy_data_0 *)pdata->phy_data;
  #line 373 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938439);
  #line 374 
  reg &= 4294967292U;
  #line 375 
  reg = reg;
  #line 376 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938439,(int)reg);
  #line 378 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938432);
  #line 379 
  reg &= 4294958979U;
  #line 380 
  reg |= 8256U;
  #line 381 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)reg);
  #line 383 
  xgbe_phy_pcs_power_cycle(pdata);
  #line 386 
  xgbe_phy_start_ratechange(pdata);
  {
    #line 388 
    u16 reg_val = (unsigned short)ioread16(pdata->sir1_regs);
    #line 388 
    reg_val = (unsigned short)((unsigned int)reg_val & 65487U);
    #line 388 
    reg_val = reg_val;
    #line 388 
    iowrite16((unsigned short)((int)reg_val),pdata->sir1_regs);
  }
  {
    #line 389 
    u16 reg_val_0 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 389 
    reg_val_0 = (unsigned short)((unsigned int)reg_val_0 & 65528U);
    #line 389 
    reg_val_0 = (unsigned short)((unsigned int)reg_val_0 | 7U);
    #line 389 
    iowrite16((unsigned short)((int)reg_val_0),pdata->sir1_regs);
  }
  {
    #line 390 
    u16 reg_val_1 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 390 
    reg_val_1 = (unsigned short)((unsigned int)reg_val_1 & 65527U);
    #line 390 
    reg_val_1 = (unsigned short)((unsigned int)reg_val_1 | 8U);
    #line 390 
    iowrite16((unsigned short)((int)reg_val_1),pdata->sir1_regs);
  }
  {
    #line 392 
    u16 reg_val_2 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 392 
    reg_val_2 = (unsigned short)((unsigned int)reg_val_2 & 4095U);
    #line 392 
    reg_val_2 = (unsigned short)(((int)((unsigned short)phy_data->cdr_rate[2]) << 12U) | (int)reg_val_2);
    #line 392 
    iowrite16((unsigned short)((int)reg_val_2),pdata->sir1_regs);
  }
  {
    #line 394 
    u16 reg_val_3 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 394 
    reg_val_3 = (unsigned short)((unsigned int)reg_val_3 & 61695U);
    #line 394 
    reg_val_3 = (unsigned short)(((unsigned int)((int)((unsigned short)phy_data->tx_amp[2]) << 8U) & 3840U) | (unsigned int)reg_val_3);
    #line 394 
    iowrite16((unsigned short)((int)reg_val_3),pdata->sir1_regs);
  }
  {
    #line 396 
    u16 reg_val_4 = (unsigned short)ioread16(pdata->rxtx_regs + 80U);
    #line 396 
    reg_val_4 = (unsigned short)((unsigned int)reg_val_4 & 65531U);
    #line 396 
    reg_val_4 = (unsigned short)(((unsigned int)((int)((unsigned short)phy_data->blwc[2]) << 2U) & 4U) | (unsigned int)reg_val_4);
    #line 396 
    iowrite16((unsigned short)((int)reg_val_4),pdata->rxtx_regs + 80U);
  }
  {
    #line 398 
    u16 reg_val_5 = (unsigned short)ioread16(pdata->rxtx_regs + 456U);
    #line 398 
    reg_val_5 = (unsigned short)((unsigned int)reg_val_5 & 511U);
    #line 398 
    reg_val_5 = (unsigned short)(((int)((unsigned short)phy_data->pq_skew[2]) << 9U) | (int)reg_val_5);
    #line 398 
    iowrite16((unsigned short)((int)reg_val_5),pdata->rxtx_regs + 456U);
  }
  {
    #line 400 
    u16 reg_val_6 = (unsigned short)ioread16(pdata->rxtx_regs + 516U);
    #line 400 
    reg_val_6 = (unsigned short)((unsigned int)reg_val_6 & 16383U);
    #line 400 
    reg_val_6 = (unsigned short)(((int)((unsigned short)phy_data->dfe_tap_cfg[2]) << 14U) | (int)reg_val_6);
    #line 400 
    iowrite16((unsigned short)((int)reg_val_6),pdata->rxtx_regs + 516U);
  }
  #line 402 
  iowrite16((unsigned short)((int)((unsigned short)phy_data->dfe_tap_ena[2])),pdata->rxtx_regs + 88U);
  #line 405 
  xgbe_phy_complete_ratechange(pdata);
  #line 407 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 407 
    bool branch;
    #line 407 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_kr_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c", .format = (char *)"10GbE KR mode set\n", .lineno = (unsigned int)407U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 407 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 407 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 407 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,pdata->netdev,(char *)"10GbE KR mode set\n");
  }
  #line 409 
  return;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_kx_2500_mode_0(struct xgbe_prv_data *pdata)
{
  #line 413 
  unsigned int reg;
  #line 412 
  struct xgbe_phy_data_0 *phy_data = (struct xgbe_phy_data_0 *)pdata->phy_data;
  #line 416 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938439);
  #line 417 
  reg &= 4294967292U;
  #line 418 
  reg |= 1U;
  #line 419 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938439,(int)reg);
  #line 421 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938432);
  #line 422 
  reg &= 4294958979U;
  #line 423 
  reg |= 64U;
  #line 424 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)reg);
  #line 426 
  xgbe_phy_pcs_power_cycle(pdata);
  #line 429 
  xgbe_phy_start_ratechange(pdata);
  {
    #line 431 
    u16 reg_val = (unsigned short)ioread16(pdata->sir1_regs);
    #line 431 
    reg_val = (unsigned short)((unsigned int)reg_val & 65487U);
    #line 431 
    reg_val = (unsigned short)((unsigned int)reg_val | 16U);
    #line 431 
    iowrite16((unsigned short)((int)reg_val),pdata->sir1_regs);
  }
  {
    #line 432 
    u16 reg_val_0 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 432 
    reg_val_0 = (unsigned short)((unsigned int)reg_val_0 & 65528U);
    #line 432 
    reg_val_0 = (unsigned short)((unsigned int)reg_val_0 | 1U);
    #line 432 
    iowrite16((unsigned short)((int)reg_val_0),pdata->sir1_regs);
  }
  {
    #line 433 
    u16 reg_val_1 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 433 
    reg_val_1 = (unsigned short)((unsigned int)reg_val_1 & 65527U);
    #line 433 
    reg_val_1 = reg_val_1;
    #line 433 
    iowrite16((unsigned short)((int)reg_val_1),pdata->sir1_regs);
  }
  {
    #line 435 
    u16 reg_val_2 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 435 
    reg_val_2 = (unsigned short)((unsigned int)reg_val_2 & 4095U);
    #line 435 
    reg_val_2 = (unsigned short)(((int)((unsigned short)phy_data->cdr_rate[1]) << 12U) | (int)reg_val_2);
    #line 435 
    iowrite16((unsigned short)((int)reg_val_2),pdata->sir1_regs);
  }
  {
    #line 437 
    u16 reg_val_3 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 437 
    reg_val_3 = (unsigned short)((unsigned int)reg_val_3 & 61695U);
    #line 437 
    reg_val_3 = (unsigned short)(((unsigned int)((int)((unsigned short)phy_data->tx_amp[1]) << 8U) & 3840U) | (unsigned int)reg_val_3);
    #line 437 
    iowrite16((unsigned short)((int)reg_val_3),pdata->sir1_regs);
  }
  {
    #line 439 
    u16 reg_val_4 = (unsigned short)ioread16(pdata->rxtx_regs + 80U);
    #line 439 
    reg_val_4 = (unsigned short)((unsigned int)reg_val_4 & 65531U);
    #line 439 
    reg_val_4 = (unsigned short)(((unsigned int)((int)((unsigned short)phy_data->blwc[1]) << 2U) & 4U) | (unsigned int)reg_val_4);
    #line 439 
    iowrite16((unsigned short)((int)reg_val_4),pdata->rxtx_regs + 80U);
  }
  {
    #line 441 
    u16 reg_val_5 = (unsigned short)ioread16(pdata->rxtx_regs + 456U);
    #line 441 
    reg_val_5 = (unsigned short)((unsigned int)reg_val_5 & 511U);
    #line 441 
    reg_val_5 = (unsigned short)(((int)((unsigned short)phy_data->pq_skew[1]) << 9U) | (int)reg_val_5);
    #line 441 
    iowrite16((unsigned short)((int)reg_val_5),pdata->rxtx_regs + 456U);
  }
  {
    #line 443 
    u16 reg_val_6 = (unsigned short)ioread16(pdata->rxtx_regs + 516U);
    #line 443 
    reg_val_6 = (unsigned short)((unsigned int)reg_val_6 & 16383U);
    #line 443 
    reg_val_6 = (unsigned short)(((int)((unsigned short)phy_data->dfe_tap_cfg[1]) << 14U) | (int)reg_val_6);
    #line 443 
    iowrite16((unsigned short)((int)reg_val_6),pdata->rxtx_regs + 516U);
  }
  #line 445 
  iowrite16((unsigned short)((int)((unsigned short)phy_data->dfe_tap_ena[1])),pdata->rxtx_regs + 88U);
  #line 448 
  xgbe_phy_complete_ratechange(pdata);
  #line 450 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 450 
    bool branch;
    #line 450 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_kx_2500_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c", .format = (char *)"2.5GbE KX mode set\n", .lineno = (unsigned int)450U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 450 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 450 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 450 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,pdata->netdev,(char *)"2.5GbE KX mode set\n");
  }
  #line 452 
  return;
}

#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_kx_1000_mode_0(struct xgbe_prv_data *pdata)
{
  #line 456 
  unsigned int reg;
  #line 455 
  struct xgbe_phy_data_0 *phy_data = (struct xgbe_phy_data_0 *)pdata->phy_data;
  #line 459 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938439);
  #line 460 
  reg &= 4294967292U;
  #line 461 
  reg |= 1U;
  #line 462 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938439,(int)reg);
  #line 464 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938432);
  #line 465 
  reg &= 4294958979U;
  #line 466 
  reg |= 64U;
  #line 467 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)reg);
  #line 469 
  xgbe_phy_pcs_power_cycle(pdata);
  #line 472 
  xgbe_phy_start_ratechange(pdata);
  {
    #line 474 
    u16 reg_val = (unsigned short)ioread16(pdata->sir1_regs);
    #line 474 
    reg_val = (unsigned short)((unsigned int)reg_val & 65487U);
    #line 474 
    reg_val = (unsigned short)((unsigned int)reg_val | 48U);
    #line 474 
    iowrite16((unsigned short)((int)reg_val),pdata->sir1_regs);
  }
  {
    #line 475 
    u16 reg_val_0 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 475 
    reg_val_0 = (unsigned short)((unsigned int)reg_val_0 & 65528U);
    #line 475 
    reg_val_0 = (unsigned short)((unsigned int)reg_val_0 | 1U);
    #line 475 
    iowrite16((unsigned short)((int)reg_val_0),pdata->sir1_regs);
  }
  {
    #line 476 
    u16 reg_val_1 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 476 
    reg_val_1 = (unsigned short)((unsigned int)reg_val_1 & 65527U);
    #line 476 
    reg_val_1 = reg_val_1;
    #line 476 
    iowrite16((unsigned short)((int)reg_val_1),pdata->sir1_regs);
  }
  {
    #line 478 
    u16 reg_val_2 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 478 
    reg_val_2 = (unsigned short)((unsigned int)reg_val_2 & 4095U);
    #line 478 
    reg_val_2 = (unsigned short)(((int)((unsigned short)phy_data->cdr_rate[0]) << 12U) | (int)reg_val_2);
    #line 478 
    iowrite16((unsigned short)((int)reg_val_2),pdata->sir1_regs);
  }
  {
    #line 480 
    u16 reg_val_3 = (unsigned short)ioread16(pdata->sir1_regs);
    #line 480 
    reg_val_3 = (unsigned short)((unsigned int)reg_val_3 & 61695U);
    #line 480 
    reg_val_3 = (unsigned short)(((unsigned int)((int)((unsigned short)phy_data->tx_amp[0]) << 8U) & 3840U) | (unsigned int)reg_val_3);
    #line 480 
    iowrite16((unsigned short)((int)reg_val_3),pdata->sir1_regs);
  }
  {
    #line 482 
    u16 reg_val_4 = (unsigned short)ioread16(pdata->rxtx_regs + 80U);
    #line 482 
    reg_val_4 = (unsigned short)((unsigned int)reg_val_4 & 65531U);
    #line 482 
    reg_val_4 = (unsigned short)(((unsigned int)((int)((unsigned short)phy_data->blwc[0]) << 2U) & 4U) | (unsigned int)reg_val_4);
    #line 482 
    iowrite16((unsigned short)((int)reg_val_4),pdata->rxtx_regs + 80U);
  }
  {
    #line 484 
    u16 reg_val_5 = (unsigned short)ioread16(pdata->rxtx_regs + 456U);
    #line 484 
    reg_val_5 = (unsigned short)((unsigned int)reg_val_5 & 511U);
    #line 484 
    reg_val_5 = (unsigned short)(((int)((unsigned short)phy_data->pq_skew[0]) << 9U) | (int)reg_val_5);
    #line 484 
    iowrite16((unsigned short)((int)reg_val_5),pdata->rxtx_regs + 456U);
  }
  {
    #line 486 
    u16 reg_val_6 = (unsigned short)ioread16(pdata->rxtx_regs + 516U);
    #line 486 
    reg_val_6 = (unsigned short)((unsigned int)reg_val_6 & 16383U);
    #line 486 
    reg_val_6 = (unsigned short)(((int)((unsigned short)phy_data->dfe_tap_cfg[0]) << 14U) | (int)reg_val_6);
    #line 486 
    iowrite16((unsigned short)((int)reg_val_6),pdata->rxtx_regs + 516U);
  }
  #line 488 
  iowrite16((unsigned short)((int)((unsigned short)phy_data->dfe_tap_ena[0])),pdata->rxtx_regs + 88U);
  #line 491 
  xgbe_phy_complete_ratechange(pdata);
  #line 493 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 493 
    bool branch;
    #line 493 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_phy_kx_1000_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c", .format = (char *)"1GbE KX mode set\n", .lineno = (unsigned int)493U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 493 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 493 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 493 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,pdata->netdev,(char *)"1GbE KX mode set\n");
  }
  #line 495 
  return;
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static enum xgbe_mode xgbe_phy_cur_mode_0(struct xgbe_prv_data *pdata)
{
  #line 499 
  enum xgbe_mode mode;
  #line 500 
  unsigned int reg;
  #line 498 
  struct xgbe_phy_data_0 *phy_data = (struct xgbe_phy_data_0 *)pdata->phy_data;
  #line 502 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938439);
  #line 503 
  reg &= 3U;
  #line 505 
  if (reg == 0U) 
                 #line 506 
                 mode = XGBE_MODE_KR;
  else 
    #line 508 
    if (phy_data->speed_set == 1U) 
                                   #line 509 
                                   mode = XGBE_MODE_KX_2500; else 
                                                                  #line 511 
                                                                  mode = XGBE_MODE_KX_1000;
  #line 514 
  return mode;
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static enum xgbe_mode xgbe_phy_switch_mode_0(struct xgbe_prv_data *pdata)
{
  #line 520 
  enum xgbe_mode mode;
  #line 519 
  struct xgbe_phy_data_0 *phy_data = (struct xgbe_phy_data_0 *)pdata->phy_data;
  #line 523 
  if (xgbe_phy_cur_mode_0(pdata) == (unsigned int)XGBE_MODE_KR) 
    #line 524 
    if (phy_data->speed_set == 1U) 
                                   #line 525 
                                   mode = XGBE_MODE_KX_2500; else 
                                                                  #line 527 
                                                                  mode = XGBE_MODE_KX_1000;
  else 
       #line 529 
       mode = XGBE_MODE_KR;
  #line 532 
  return mode;
}

#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static enum xgbe_mode xgbe_phy_get_mode_0(struct xgbe_prv_data *pdata, int speed)
{
  #line 538 
  struct xgbe_phy_data_0 *phy_data = (struct xgbe_phy_data_0 *)pdata->phy_data;
  #line 540 
  switch (speed) {
    #line 543 
    int tmp;
    #line 546 
    int tmp_0;
    #line 541 
    case 1000: 
               #line 541 
    ;
    #line 543 
    if (phy_data->speed_set == 0U) 
                                   #line 543 
                                   tmp = XGBE_MODE_KX_1000; else 
                                                                 #line 543 
                                                                 tmp = XGBE_MODE_UNKNOWN;
    #line 543 
    return (enum xgbe_mode)tmp;
    #line 544 
    case 2500: 
               #line 544 
    ;
    #line 546 
    if (phy_data->speed_set == 1U) 
                                   #line 546 
                                   tmp_0 = XGBE_MODE_KX_2500; else 
                                                                   #line 546 
                                                                   tmp_0 = XGBE_MODE_UNKNOWN;
    #line 546 
    return (enum xgbe_mode)tmp_0;
    #line 547 
    case 10000: 
                #line 547 
    ;
    #line 548 
    return XGBE_MODE_KR;
    #line 549 
    default: 
             #line 549 
    ;
    #line 550 
    return XGBE_MODE_UNKNOWN;
  }
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_set_mode_0(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 556 
  switch ((unsigned int)mode) {
    #line 557 
    case (unsigned int)0: 
                          #line 557 
    ;
    #line 558 
    xgbe_phy_kx_1000_mode_0(pdata);
    #line 559 
    break;
    #line 560 
    case (unsigned int)1: 
                          #line 560 
    ;
    #line 561 
    xgbe_phy_kx_2500_mode_0(pdata);
    #line 562 
    break;
    #line 563 
    case (unsigned int)2: 
                          #line 563 
    ;
    #line 564 
    xgbe_phy_kr_mode_0(pdata);
    #line 565 
    break;
    #line 566 
    default: 
             #line 566 
    ;
    #line 567 
    break;
  }
  #line 569 
  return;
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static bool xgbe_phy_check_mode_0(struct xgbe_prv_data *pdata, enum xgbe_mode mode, bool advert)
{
  #line 574 
  if (pdata->phy.autoneg == 1) 
                               #line 575 
                               return advert;
  else {
    #line 577 
    enum xgbe_mode cur_mode;
    #line 579 
    cur_mode = xgbe_phy_get_mode_0(pdata,pdata->phy.speed);
    #line 580 
    if (cur_mode == mode) 
                          #line 581 
                          return (_Bool)1;
  }
  #line 584 
  return (_Bool)0;
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static bool xgbe_phy_use_mode_0(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
{
  #line 589 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 591 
  switch ((unsigned int)mode) {
    #line 592 
    case (unsigned int)0: 
                          #line 592 
    ;
    #line 593 
    ;
    #line 593 
    ;
    #line 593 
    return xgbe_phy_check_mode_0(pdata,mode,
                              (_Bool)((bool)((int)test_bit(17L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 595 
    case (unsigned int)1: 
                          #line 595 
    ;
    #line 596 
    ;
    #line 596 
    ;
    #line 596 
    return xgbe_phy_check_mode_0(pdata,mode,
                              (_Bool)((bool)((int)test_bit(15L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 598 
    case (unsigned int)2: 
                          #line 598 
    ;
    #line 599 
    ;
    #line 599 
    ;
    #line 599 
    return xgbe_phy_check_mode_0(pdata,mode,
                              (_Bool)((bool)((int)test_bit(19L,(unsigned long *)(& lks->link_modes.advertising))) != 0));
    #line 601 
    default: 
             #line 601 
    ;
    #line 602 
    return (_Bool)0;
  }
}

#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static bool xgbe_phy_valid_speed_1(struct xgbe_prv_data *pdata, int speed)
{
  #line 608 
  struct xgbe_phy_data_0 *phy_data = (struct xgbe_phy_data_0 *)pdata->phy_data;
  #line 610 
  switch (speed) {
    #line 611 
    case 1000: 
               #line 611 
    ;
    #line 612 
    if (phy_data->speed_set != 0U) 
                                   #line 613 
                                   return (_Bool)0;
    #line 614 
    return (_Bool)1;
    #line 615 
    case 2500: 
               #line 615 
    ;
    #line 616 
    if (phy_data->speed_set != 1U) 
                                   #line 617 
                                   return (_Bool)0;
    #line 618 
    return (_Bool)1;
    #line 619 
    case 10000: 
                #line 619 
    ;
    #line 620 
    return (_Bool)1;
    #line 621 
    default: 
             #line 621 
    ;
    #line 622 
    return (_Bool)0;
  }
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static int xgbe_phy_link_status_0(struct xgbe_prv_data *pdata, int *an_restart)
{
  #line 628 
  unsigned int reg;
  #line 630 
  *an_restart = 0;
  #line 635 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938433);
  #line 636 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938433);
  #line 638 
  return (int)(reg >> 2) & 1;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_stop_1(struct xgbe_prv_data *pdata)
{
  #line 643 
  return;
}

#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static int xgbe_phy_start_1(struct xgbe_prv_data *pdata)
{
  #line 649 
  return 0;
}

#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static int xgbe_phy_reset_1(struct xgbe_prv_data *pdata)
{
  #line 654 
  unsigned int reg;
  #line 654 
  unsigned int count;
  #line 657 
  reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938432);
  #line 658 
  reg |= 32768U;
  #line 659 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)reg);
  #line 661 
  count = 50U;
  #line 662 
  while (1) {
    {
      #line 663 
      msleep(20U);
      #line 664 
      reg = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938432);
    }
    #line 665 
    if ((reg & 32768U) != 0U) {
      #line 665 
      count --;
      #line 665 
      if (! (count != 0U)) 
                           #line 662 
                           break;
    }
    else 
         #line 662 
         break;
  }
  #line 667 
  if ((reg & 32768U) != 0U) 
                            #line 668 
                            return -110;
  #line 670 
  return 0;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static void xgbe_phy_exit_1(struct xgbe_prv_data *pdata)
{
  #line 675 
  return;
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
static int xgbe_phy_init_1(struct xgbe_prv_data *pdata)
{
  #line 681 
  struct xgbe_phy_data_0 *phy_data;
  #line 682 
  int ret;
  #line 680 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 684 
  phy_data = (struct xgbe_phy_data_0 *)cif_devm_kzalloc_0(pdata->dev,76UL,3264U);
  #line 685 
  if (phy_data == (struct xgbe_phy_data_0 *)0) 
                                               #line 686 
                                               return -12;
  #line 689 
  ret = device_property_read_u32(pdata->phy_dev,(char *)"amd,speed-set",& phy_data->speed_set);
  #line 691 
  if (ret != 0) {
    #line 692 
    _dev_err(pdata->dev,(char *)"invalid %s property\n",(char *)"amd,speed-set");
    #line 694 
    return ret;
  }
  #line 697 
  switch (phy_data->speed_set) {
    #line 698 
    case (unsigned int)0: 
                          #line 698 
    ;
    #line 699 
    case (unsigned int)1: 
                          #line 699 
    ;
    #line 700 
    break;
    #line 701 
    default: 
             #line 701 
    ;
    #line 702 
    _dev_err(pdata->dev,(char *)"invalid %s property\n",(char *)"amd,speed-set");
    #line 704 
    return -22;
  }
  #line 708 
  if ((int)device_property_present(pdata->phy_dev,(char *)"amd,serdes-blwc") != 0) {
    #line 709 
    ret = device_property_read_u32_array(pdata->phy_dev,(char *)"amd,serdes-blwc",(u32 *)(& phy_data->blwc),3UL);
    #line 713 
    if (ret != 0) {
      #line 714 
      _dev_err(pdata->dev,(char *)"invalid %s property\n",(char *)"amd,serdes-blwc");
      #line 716 
      return ret;
    }
  }
  else 
       #line 719 
       memcpy((void *)(& phy_data->blwc),(void *)(& xgbe_phy_blwc),12UL);
  #line 723 
  if ((int)device_property_present(pdata->phy_dev,(char *)"amd,serdes-cdr-rate") != 0) {
    #line 724 
    ret = device_property_read_u32_array(pdata->phy_dev,(char *)"amd,serdes-cdr-rate",(u32 *)(& phy_data->cdr_rate),3UL);
    #line 728 
    if (ret != 0) {
      #line 729 
      _dev_err(pdata->dev,(char *)"invalid %s property\n",(char *)"amd,serdes-cdr-rate");
      #line 731 
      return ret;
    }
  }
  else 
       #line 734 
       memcpy((void *)(& phy_data->cdr_rate),(void *)(& xgbe_phy_cdr_rate),12UL);
  #line 738 
  if ((int)device_property_present(pdata->phy_dev,(char *)"amd,serdes-pq-skew") != 0) {
    #line 739 
    ret = device_property_read_u32_array(pdata->phy_dev,(char *)"amd,serdes-pq-skew",(u32 *)(& phy_data->pq_skew),3UL);
    #line 743 
    if (ret != 0) {
      #line 744 
      _dev_err(pdata->dev,(char *)"invalid %s property\n",(char *)"amd,serdes-pq-skew");
      #line 746 
      return ret;
    }
  }
  else 
       #line 749 
       memcpy((void *)(& phy_data->pq_skew),(void *)(& xgbe_phy_pq_skew),12UL);
  #line 753 
  if ((int)device_property_present(pdata->phy_dev,(char *)"amd,serdes-tx-amp") != 0) {
    #line 754 
    ret = device_property_read_u32_array(pdata->phy_dev,(char *)"amd,serdes-tx-amp",(u32 *)(& phy_data->tx_amp),3UL);
    #line 758 
    if (ret != 0) {
      #line 759 
      _dev_err(pdata->dev,(char *)"invalid %s property\n",(char *)"amd,serdes-tx-amp");
      #line 761 
      return ret;
    }
  }
  else 
       #line 764 
       memcpy((void *)(& phy_data->tx_amp),(void *)(& xgbe_phy_tx_amp),12UL);
  #line 768 
  if ((int)device_property_present(pdata->phy_dev,
                                (char *)"amd,serdes-dfe-tap-config") != 0) {
    #line 769 
    ret = device_property_read_u32_array(pdata->phy_dev,(char *)"amd,serdes-dfe-tap-config",(u32 *)(& phy_data->dfe_tap_cfg),3UL);
    #line 773 
    if (ret != 0) {
      #line 774 
      _dev_err(pdata->dev,(char *)"invalid %s property\n",(char *)"amd,serdes-dfe-tap-config");
      #line 776 
      return ret;
    }
  }
  else 
       #line 779 
       memcpy((void *)(& phy_data->dfe_tap_cfg),(void *)(& xgbe_phy_dfe_tap_cfg),12UL);
  #line 783 
  if ((int)device_property_present(pdata->phy_dev,
                                (char *)"amd,serdes-dfe-tap-enable") != 0) {
    #line 784 
    ret = device_property_read_u32_array(pdata->phy_dev,(char *)"amd,serdes-dfe-tap-enable",(u32 *)(& phy_data->dfe_tap_ena),3UL);
    #line 788 
    if (ret != 0) {
      #line 789 
      _dev_err(pdata->dev,(char *)"invalid %s property\n",(char *)"amd,serdes-dfe-tap-enable");
      #line 791 
      return ret;
    }
  }
  else 
       #line 794 
       memcpy((void *)(& phy_data->dfe_tap_ena),(void *)(& xgbe_phy_dfe_tap_ena),12UL);
  #line 799 
  cif_bitmap_zero_1((unsigned long *)(& lks->link_modes.supported),74U);
  #line 800 
  __set_bit(6L,(unsigned long *)(& lks->link_modes.supported));
  #line 801 
  __set_bit(13L,(unsigned long *)(& lks->link_modes.supported));
  #line 802 
  __set_bit(14L,(unsigned long *)(& lks->link_modes.supported));
  #line 803 
  __set_bit(16L,(unsigned long *)(& lks->link_modes.supported));
  #line 804 
  __set_bit(19L,(unsigned long *)(& lks->link_modes.supported));
  #line 805 
  switch (phy_data->speed_set) {
    #line 806 
    case (unsigned int)0: 
                          #line 806 
    ;
    #line 807 
    __set_bit(17L,(unsigned long *)(& lks->link_modes.supported));
    #line 808 
    break;
    #line 809 
    case (unsigned int)1: 
                          #line 809 
    ;
    #line 810 
    __set_bit(15L,(unsigned long *)(& lks->link_modes.supported));
    #line 811 
    break;
  }
  #line 814 
  if ((pdata->fec_ability & 1U) != 0U) 
                                       #line 815 
                                       __set_bit(20L,(unsigned long *)(& lks->link_modes.supported));
  #line 817 
  pdata->phy_data = (void *)phy_data;
  #line 819 
  return 0;
}

#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c"
void xgbe_init_function_ptrs_phy_v1(struct xgbe_phy_if *phy_if)
{
  #line 824 
  struct xgbe_phy_impl_if *phy_impl = & phy_if->phy_impl;
  #line 826 
  phy_impl->init = & xgbe_phy_init_1;
  #line 827 
  phy_impl->exit = & xgbe_phy_exit_1;
  #line 829 
  phy_impl->reset = & xgbe_phy_reset_1;
  #line 830 
  phy_impl->start = & xgbe_phy_start_1;
  #line 831 
  phy_impl->stop = & xgbe_phy_stop_1;
  #line 833 
  phy_impl->link_status = & xgbe_phy_link_status_0;
  #line 835 
  phy_impl->valid_speed = & xgbe_phy_valid_speed_1;
  #line 837 
  phy_impl->use_mode = & xgbe_phy_use_mode_0;
  #line 838 
  phy_impl->set_mode = & xgbe_phy_set_mode_0;
  #line 839 
  phy_impl->get_mode = & xgbe_phy_get_mode_0;
  #line 840 
  phy_impl->switch_mode = & xgbe_phy_switch_mode_0;
  #line 841 
  phy_impl->cur_mode = & xgbe_phy_cur_mode_0;
  #line 843 
  phy_impl->an_mode = & xgbe_phy_an_mode_0;
  #line 845 
  phy_impl->an_config = & xgbe_phy_an_config_0;
  #line 847 
  phy_impl->an_advertising = & xgbe_phy_an_advertising_0;
  #line 849 
  phy_impl->an_outcome = & xgbe_phy_an_outcome_0;
  #line 851 
  phy_impl->kr_training_pre = & xgbe_phy_kr_training_pre_0;
  #line 852 
  phy_impl->kr_training_post = & xgbe_phy_kr_training_post_0;
  #line 853 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v1.i.aux"
static void cif_bitmap_zero_1(unsigned long *dst, unsigned int nbits)
{
  #line 201 
  ldv_bitmap_zero(dst,nbits);
  #line 202 
  return;
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-phy-v1.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags)
{
  #line 690 
  return ldv_devm_kzalloc(size,flags);
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 162 
  bool c;
  #line 163 
  ldv_inline_asm();
  #line 162 
  return c;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 83 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 84 
  return arch_test_and_clear_bit(nr,addr);
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 483 
int hex_dump_to_buffer(void *, size_t, int, int, char *, size_t, bool);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3552 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3554 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_3556 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_3606 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_read((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 247 
#line 247 
unsigned int cpumask_local_spread(unsigned int, int);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit_1((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 984  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_xgbe_prv_data(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1002  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 975 
static void cif___ldv_spin_lock_lock_of_xgbe_prv_data(spinlock_t *lock);
#line 35 
#line 993 
static void cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  #line 267 
  return (long long)ns;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 454 
#line 454 
void flush_workqueue(struct workqueue_struct *);
#line 496 
#line 397  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work);
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 785  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
#line 48 
int __cpu_to_node(int);
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 320 
#line 320 
extern struct kmem_cache *kmalloc_caches[3U][14U];
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
__inline static enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{
  #line 336 
  int tmp;
  #line 329 
  if ((long)((flags & 17U) == 0U) != 0L) 
                                         #line 330 
                                         return KMALLOC_NORMAL;
  #line 336 
  if ((flags & 1U) != 0U) 
                          #line 336 
                          tmp = KMALLOC_DMA; else 
                                                  #line 336 
                                                  tmp = KMALLOC_RECLAIM;
  #line 336 
  return (enum kmalloc_cache_type)tmp;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
__inline static unsigned int kmalloc_index(size_t size)
{
  #line 352 
  if (size == 0UL) 
                   #line 353 
                   return 0U;
  #line 355 
  if (size <= 8UL) 
                   #line 356 
                   return 3U;
  #line 358 
  if (size + 18446744073709551551UL <= 31UL) 
                                             #line 359 
                                             return 1U;
  #line 360 
  if (size + 18446744073709551487UL <= 63UL) 
                                             #line 361 
                                             return 2U;
  #line 362 
  if (size <= 8UL) 
                   #line 362 
                   return 3U;
  #line 363 
  if (size <= 16UL) 
                    #line 363 
                    return 4U;
  #line 364 
  if (size <= 32UL) 
                    #line 364 
                    return 5U;
  #line 365 
  if (size <= 64UL) 
                    #line 365 
                    return 6U;
  #line 366 
  if (size <= 128UL) 
                     #line 366 
                     return 7U;
  #line 367 
  if (size <= 256UL) 
                     #line 367 
                     return 8U;
  #line 368 
  if (size <= 512UL) 
                     #line 368 
                     return 9U;
  #line 369 
  if (size <= 1024UL) 
                      #line 369 
                      return 10U;
  #line 370 
  if (size <= 2048UL) 
                      #line 370 
                      return 11U;
  #line 371 
  if (size <= 4096UL) 
                      #line 371 
                      return 12U;
  #line 372 
  if (size <= 8192UL) 
                      #line 372 
                      return 13U;
  #line 373 
  if (size <= 16384UL) 
                       #line 373 
                       return 14U;
  #line 374 
  if (size <= 32768UL) 
                       #line 374 
                       return 15U;
  #line 375 
  if (size <= 65536UL) 
                       #line 375 
                       return 16U;
  #line 376 
  if (size <= 131072UL) 
                        #line 376 
                        return 17U;
  #line 377 
  if (size <= 262144UL) 
                        #line 377 
                        return 18U;
  #line 378 
  if (size <= 524288UL) 
                        #line 378 
                        return 19U;
  #line 379 
  if (size <= 1048576UL) 
                         #line 379 
                         return 20U;
  #line 380 
  if (size <= 2097152UL) 
                         #line 380 
                         return 21U;
  #line 381 
  if (size <= 4194304UL) 
                         #line 381 
                         return 22U;
  #line 382 
  if (size <= 8388608UL) 
                         #line 382 
                         return 23U;
  #line 383 
  if (size <= 16777216UL) 
                          #line 383 
                          return 24U;
  #line 384 
  if (size <= 33554432UL) 
                          #line 384 
                          return 25U;
  #line 385 
  if (size <= 67108864UL) 
                          #line 385 
                          return 26U;
  #line 387 
  ldv_inline_asm();
  #line 388 
  ldv_inline_asm();
  #line 389 
  ldv_inline_asm();
  #line 386 
  ;
  #line 389 
  return 4294967295U;
}

#line 417 
#line 417 
void *__kmalloc_node(size_t, gfp_t, int);
#line 435 
#line 435 
void *kmem_cache_alloc_node_trace(struct kmem_cache *, gfp_t, int, size_t);
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
__inline static void *kmalloc_node(size_t size, gfp_t flags, int node)
{
  #line 567 
  if (0 != 0 && size <= 8192UL) {
    #line 569 
    unsigned int i = kmalloc_index(size);
    #line 571 
    if (i == 0U) 
                 #line 572 
                 return (void *)16;
    #line 574 
    ;
    #line 574 
    ;
    #line 574 
    ;
    #line 574 
    ;
    #line 574 
    return kmem_cache_alloc_node_trace(kmalloc_caches[(unsigned int)kmalloc_type(flags)][i],
                                    flags,node,size);
  }
  #line 579 
  return __kmalloc_node(size,flags,node);
}

#line 668 
#line 521  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
__inline static void *kzalloc_node(size_t size, gfp_t flags, int node)
{
  #line 681 
  return kmalloc_node(size,flags | 256U,node);
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_cpu(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 602 
  dma_sync_single_for_cpu(dev,addr + (unsigned long long)offset,size,dir);
  #line 603 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  #line 1407 
  return & ((struct skb_shared_info *)skb_end_pointer(skb))->hwtstamps;
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  #line 1582 
  refcount_inc(& skb->users);
  #line 1583 
  return skb;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read_0(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_inner_transport_offset(struct sk_buff *skb)
{
  #line 2405 
  ;
  #line 2405 
  return (int)(skb_inner_transport_header(skb) - skb->data);
}

#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_mac_header(struct sk_buff *skb)
{
  #line 2439 
  return skb->head + (unsigned long)skb->inner_mac_header;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  #line 2825 
  return __napi_alloc_skb(napi,length,2592U);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void *from, unsigned int len)
{
  #line 3619 
  memcpy((void *)skb->data,from,(unsigned long)len);
  #line 3620 
  return;
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_4080 __u;
  #line 93 
  union __anonunion___u_4082 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_ether.h"
__inline static struct ethhdr *inner_eth_hdr(struct sk_buff *skb)
{
  #line 37 
  return (struct ethhdr *)skb_inner_mac_header(skb);
}

#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_devm_free_irq_1(struct device *dev, unsigned int irq, void *dev_id);
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 235 
void disable_irq_nosync(unsigned int);
#line 352 
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 655 
#line 935  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_tasklet_schedule_1(struct tasklet_struct *t);
#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_tasklet_init_1(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 424 
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_0(0L,& n->state);
  #line 517 
  cif_clear_bit_0(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2579 
#line 2579 
int call_netdevice_notifiers(unsigned long, struct net_device *);
#line 3094 
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_0(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_1(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit_1(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit_0(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_clear_bit(1L,& dev_queue->state) != 0) 
                                                           #line 3321 
                                                           netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit_0(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 4403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool can_checksum_protocol(netdev_features_t features, __be16 protocol)
{
  #line 4406 
  if ((unsigned int)protocol == 1673U) 
                                       #line 4407 
                                       return (_Bool)((features & 17179869184ULL) != 0ULL);
  #line 4411 
  if ((features & 8ULL) != 0ULL) 
                                 #line 4413 
                                 return (_Bool)1;
  #line 4416 
  switch ((int)protocol) {
    #line 4417 
    case 8: 
            #line 4417 
    ;
    #line 4418 
    return (_Bool)((features & 2ULL) != 0ULL);
    #line 4419 
    case 56710: 
                #line 4419 
    ;
    #line 4420 
    return (_Bool)((features & 16ULL) != 0ULL);
    #line 4421 
    default: 
             #line 4421 
    ;
    #line 4422 
    return (_Bool)0;
  }
}

#line 4746 
#line 4746 
void netdev_alert(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4754 
#line 4754 
void netdev_notice(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 36 
#line 36 
int rtnl_is_locked(void);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool skb_vlan_tagged_multi(struct sk_buff *skb)
{
  #line 687 
  __be16 protocol = skb->protocol;
  #line 689 
  if ((unsigned int)skb->vlan_present == 0U) {
    #line 690 
    struct vlan_ethhdr *veh;
    #line 692 
    int tmp_0;
    #line 695 
    int tmp_2;
    #line 692 
    if (eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 692 
                                                        tmp_0 = 0; else 
                                                                    #line 692 
                                                                    tmp_0 = 1;
    #line 692 
    if ((long)tmp_0 != 0L) 
                           #line 693 
                           return (_Bool)0;
    #line 695 
    if (pskb_may_pull(skb,18U)) 
                                #line 695 
                                tmp_2 = 0; else 
                                                #line 695 
                                                tmp_2 = 1;
    #line 695 
    if ((long)tmp_2 != 0L) 
                           #line 696 
                           return (_Bool)0;
    #line 698 
    veh = (struct vlan_ethhdr *)skb->data;
    #line 699 
    protocol = veh->h_vlan_encapsulated_proto;
  }
  #line 702 
  if (! eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 703 
                                                        return (_Bool)0;
  #line 705 
  return (_Bool)1;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static netdev_features_t vlan_features_check(struct sk_buff *skb, netdev_features_t features)
{
  #line 718 
  if ((int)skb_vlan_tagged_multi(skb) != 0) 
                                            #line 724 
                                            features &= 17592186044649ULL;
  #line 729 
  return features;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *inner_tcp_hdr(struct sk_buff *skb)
{
  #line 41 
  return (struct tcphdr *)skb_inner_transport_header(skb);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int inner_tcp_hdrlen(struct sk_buff *skb)
{
  #line 46 
  ;
  #line 46 
  return (unsigned int)((int)inner_tcp_hdr(skb)->doff * 4);
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
#line 232 
int clk_prepare(struct clk *);
#line 260 
#line 260 
void clk_unprepare(struct clk *);
#line 491 
#line 491 
int clk_enable(struct clk *);
#line 519 
#line 519 
void clk_disable(struct clk *);
#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static int clk_prepare_enable(struct clk *clk)
{
  #line 905 
  int ret;
  #line 907 
  ret = clk_prepare(clk);
  #line 908 
  if (ret != 0) 
                #line 909 
                return ret;
  #line 910 
  ret = clk_enable(clk);
  #line 911 
  if (ret != 0) 
                #line 912 
                clk_unprepare(clk);
  #line 914 
  return ret;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static void clk_disable_unprepare(struct clk *clk)
{
  #line 920 
  clk_disable(clk);
  #line 921 
  clk_unprepare(clk);
  #line 922 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/udp.h"
__inline static struct udphdr *udp_hdr(struct sk_buff *skb)
{
  #line 23 
  return (struct udphdr *)skb_transport_header(skb);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
__inline static void udp_tunnel_get_rx_info(struct net_device *dev)
{
  {
    #line 130 
    bool __warned;
    #line 130 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 130 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 130 
      __warned = (_Bool)1;
      {
        #line 130 
        int __ret_warn_on = 1;
        #line 130 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 130 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"./include/net/udp_tunnel.h",130);
          #line 131 
          ldv_inline_asm();
          #line 132 
          ldv_inline_asm();
        }
        #line 130 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 130 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 131 
  call_netdevice_notifiers(28UL,dev);
  #line 132 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/vxlan.h"
__inline static netdev_features_t vxlan_features_check(struct sk_buff *skb, netdev_features_t features)
{
  #line 298 
  u8 l4_hdr = (unsigned char)0U;
  #line 300 
  if ((unsigned int)skb->encapsulation == 0U) 
                                              #line 301 
                                              return features;
  #line 303 
  switch ((int)vlan_get_protocol(skb)) {
    #line 304 
    case 8: 
            #line 304 
    ;
    #line 305 
    l4_hdr = ip_hdr(skb)->protocol;
    #line 306 
    break;
    #line 307 
    case 56710: 
                #line 307 
    ;
    #line 308 
    l4_hdr = ipv6_hdr(skb)->nexthdr;
    #line 309 
    break;
    #line 310 
    default: 
             #line 310 
    ;
    #line 311 
    return features;
  }
  #line 314 
  if ((unsigned int)l4_hdr == 17U) 
    #line 314 
    if ((unsigned int)skb->inner_protocol_type != 0U || (unsigned int)skb->__anonCompField_sk_buff_100.inner_protocol != 22629U) 
      #line 321 
      return features & 18446744056529747941ULL;
    else {
      #line 316 
      if (skb_inner_mac_header(skb) - skb_transport_header(skb) != 16L) 
        #line 321 
        return features & 18446744056529747941ULL;
      else 
        #line 318 
        if ((unsigned int)skb->ip_summed != 0U) {
          #line 320 
          ;
          #line 320 
          if (! can_checksum_protocol(features,
                              (unsigned short)((int)inner_eth_hdr(skb)->h_proto))) 
            #line 321 
            return features & 18446744056529747941ULL;
        }
    }
  #line 323 
  return features;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
#line 127 
u64 timecounter_cyc2time(struct timecounter *, u64);
#line 1332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 2942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_dump_tx_desc(struct xgbe_prv_data *pdata, struct xgbe_ring *ring, unsigned int idx, unsigned int count, unsigned int flag);
#line 1334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 2962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_dump_rx_desc(struct xgbe_prv_data *pdata, struct xgbe_ring *ring, unsigned int idx);
#line 1336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 2976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_print_pkt(struct net_device *netdev, struct sk_buff *skb, bool tx_rx);
#line 1338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
int xgbe_powerup(struct net_device *netdev, unsigned int caller);
#line 1339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 1237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
int xgbe_powerdown(struct net_device *netdev, unsigned int caller);
#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 1509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_restart_dev(struct xgbe_prv_data *pdata);
#line 1343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe.h"
#line 1495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_full_restart_dev(struct xgbe_prv_data *pdata);
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static unsigned int ecc_sec_info_threshold = 10U;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static unsigned int ecc_sec_warn_threshold = 10000U;
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static unsigned int ecc_sec_period = 600U;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static unsigned int ecc_ded_threshold = 2U;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static unsigned int ecc_ded_period = 600U;
#line 157 
#line 2873 
static int xgbe_one_poll(struct napi_struct *napi, int budget);
#line 158 
#line 2902 
static int xgbe_all_poll(struct napi_struct *napi, int budget);
#line 159 
#line 1431 
static void xgbe_stop(struct xgbe_prv_data *pdata);
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void *xgbe_alloc_node(size_t size, int node)
{
  #line 163 
  void *mem;
  #line 165 
  mem = kzalloc_node(size,3264U,node);
  #line 166 
  if (mem == (void *)0) 
                        #line 167 
                        mem = kzalloc(size,3264U);
  #line 169 
  return mem;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_free_channels(struct xgbe_prv_data *pdata)
{
  #line 174 
  unsigned int i;
  #line 176 
  i = 0U;
  #line 176 
  while (i <= 15U) {
    #line 177 
    if (pdata->channel[i] == (struct xgbe_channel *)0) 
                                                       #line 178 
                                                       goto __Cont;
    #line 180 
    kfree((void *)(pdata->channel[i])->rx_ring);
    #line 181 
    kfree((void *)(pdata->channel[i])->tx_ring);
    #line 182 
    kfree((void *)pdata->channel[i]);
    #line 184 
    pdata->channel[i] = (struct xgbe_channel *)0;
    #line 176 
    __Cont: 
            #line 176 
    i ++;
  }
  #line 187 
  pdata->channel_count = 0U;
  #line 188 
  return;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_alloc_channels(struct xgbe_prv_data *pdata)
{
  #line 198 
  unsigned int __UNIQUE_ID___x552;
  #line 198 
  unsigned int tmp;
  #line 192 
  struct xgbe_channel *channel;
  #line 193 
  struct xgbe_ring *ring;
  #line 194 
  unsigned int count;
  #line 194 
  unsigned int i;
  #line 195 
  unsigned int cpu;
  #line 196 
  int node;
  {
    #line 198 
    __UNIQUE_ID___x552 = pdata->tx_ring_count;
    #line 198 
    unsigned int __UNIQUE_ID___y553 = pdata->rx_ring_count;
    #line 198 
    if (__UNIQUE_ID___x552 > __UNIQUE_ID___y553) 
                                                 #line 198 
                                                 tmp = __UNIQUE_ID___x552; else 
                                                                    #line 198 
                                                                    tmp = __UNIQUE_ID___y553;
    }
  #line 198 
  count = tmp;
  #line 199 
  i = 0U;
  #line 199 
  while (i < count) {
    {
      #line 201 
      ;
      #line 201 
      cpu = cpumask_local_spread(i,dev_to_node(pdata->dev));
      #line 204 
      node = __cpu_to_node((int)cpu);
      #line 206 
      channel = (struct xgbe_channel *)xgbe_alloc_node(1664UL,node);
      #line 207 
      if (channel == (struct xgbe_channel *)0) 
                                               #line 208 
                                               goto err_mem;
      #line 209 
      pdata->channel[i] = channel;
      #line 211 
      snprintf((char *)(& channel->name),16UL,(char *)"channel-%u",i);
      #line 212 
      channel->pdata = pdata;
      #line 213 
      channel->queue_index = i;
      #line 214 
      channel->dma_regs = pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)12544U);
      #line 216 
      channel->node = node;
      #line 217 
      cpumask_set_cpu(cpu,& channel->affinity_mask);
      #line 219 
      if (pdata->per_channel_irq != 0U) 
                                        #line 220 
                                        channel->dma_irq = pdata->channel_irq[i];
      #line 222 
      if (pdata->tx_ring_count > i) {
        #line 223 
        ring = (struct xgbe_ring *)xgbe_alloc_node(256UL,node);
        #line 224 
        if (ring == (struct xgbe_ring *)0) 
                                           #line 225 
                                           goto err_mem;
        #line 227 
        spinlock_check(& ring->lock);
        {
          #line 227 
          struct lock_class_key __key;
          #line 227 
          __raw_spin_lock_init(& ring->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&ring->lock)->rlock",& __key);
        }
        #line 228 
        ring->node = node;
        #line 230 
        channel->tx_ring = ring;
      }
      #line 233 
      if (pdata->rx_ring_count > i) {
        #line 234 
        ring = (struct xgbe_ring *)xgbe_alloc_node(256UL,node);
        #line 235 
        if (ring == (struct xgbe_ring *)0) 
                                           #line 236 
                                           goto err_mem;
        #line 238 
        spinlock_check(& ring->lock);
        {
          #line 238 
          struct lock_class_key __key_0;
          #line 238 
          __raw_spin_lock_init(& ring->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&ring->lock)->rlock",& __key_0);
        }
        #line 239 
        ring->node = node;
        #line 241 
        channel->rx_ring = ring;
      }
      #line 244 
      if ((pdata->msg_enable & 1U) != 0U) {
        #line 244 
        bool branch;
        #line 244 
        struct _ddebug __UNIQUE_ID_ddebug554 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_alloc_channels", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"%s: cpu=%u, node=%d\n", .lineno = (unsigned int)244U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 244 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug554.key.dd_key_false.key,(_Bool)0);
        #line 244 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 244 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug554,pdata->netdev,(char *)"%s: cpu=%u, node=%d\n",(char *)(& channel->name),cpu,node);
      }
      #line 247 
      if ((pdata->msg_enable & 1U) != 0U) {
        #line 247 
        bool branch_0;
        #line 247 
        struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_alloc_channels", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"%s: dma_regs=%p, dma_irq=%d, tx=%p, rx=%p\n", .lineno = (unsigned int)247U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 247 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
        #line 247 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 247 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug555,pdata->netdev,(char *)"%s: dma_regs=%p, dma_irq=%d, tx=%p, rx=%p\n",(char *)(& channel->name),channel->dma_regs,channel->dma_irq,channel->tx_ring,channel->rx_ring);
      }
    }
    #line 199 
    i ++;
  }
  #line 253 
  pdata->channel_count = count;
  #line 255 
  return 0;
  #line 257 
  err_mem: 
           #line 257 
  ;
  #line 258 
  xgbe_free_channels(pdata);
  #line 260 
  return -12;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
__inline static unsigned int xgbe_tx_avail_desc(struct xgbe_ring *ring)
{
  #line 265 
  return ring->rdesc_count + (ring->dirty - ring->cur);
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
__inline static unsigned int xgbe_rx_dirty_desc(struct xgbe_ring *ring)
{
  #line 270 
  return ring->cur - ring->dirty;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_maybe_stop_tx_queue(struct xgbe_channel *channel, struct xgbe_ring *ring, unsigned int count)
{
  #line 276 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 278 
  ;
  #line 278 
  if (xgbe_tx_avail_desc(ring) < count) {
    #line 279 
    if ((pdata->msg_enable & 1U) != 0U) 
                                        #line 279 
                                        netdev_info(pdata->netdev,(char *)"Tx queue stopped, not enough descriptors available\n");
    #line 281 
    netif_stop_subqueue(pdata->netdev,(unsigned short)((int)((unsigned short)channel->queue_index)));
    #line 282 
    ring->__anonCompField_xgbe_ring_163.tx.queue_stopped = 1U;
    #line 287 
    if (ring->__anonCompField_xgbe_ring_163.tx.xmit_more != 0U) 
                                                                #line 288 
                                                                (*(pdata->hw_if.tx_start_xmit))(channel,ring);
    #line 290 
    return 16;
  }
  #line 293 
  return 0;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_calc_rx_buf_size(struct net_device *netdev, unsigned int mtu)
{
  #line 301 
  unsigned int __UNIQUE_ID___x558;
  #line 301 
  unsigned int tmp_1;
  #line 298 
  unsigned int rx_buf_size;
  #line 300 
  rx_buf_size = mtu + 22U;
  {
    #line 301 
    unsigned int __UNIQUE_ID___x556;
    #line 301 
    unsigned int tmp;
    {
      #line 301 
      __UNIQUE_ID___x556 = rx_buf_size;
      #line 301 
      unsigned int __UNIQUE_ID___y557 = 1522U;
      #line 301 
      if (__UNIQUE_ID___x556 > __UNIQUE_ID___y557) 
                                                   #line 301 
                                                   tmp = __UNIQUE_ID___x556; else 
                                                                    #line 301 
                                                                    tmp = __UNIQUE_ID___y557;
      }
    #line 301 
    __UNIQUE_ID___x558 = tmp;
    #line 301 
    unsigned int __UNIQUE_ID___y559 = 4096U;
    #line 301 
    if (__UNIQUE_ID___x558 < __UNIQUE_ID___y559) 
                                                 #line 301 
                                                 tmp_1 = __UNIQUE_ID___x558; else 
                                                                    #line 301 
                                                                    tmp_1 = __UNIQUE_ID___y559;
    }
  #line 301 
  rx_buf_size = tmp_1;
  #line 303 
  rx_buf_size = (rx_buf_size + 63U) & 4294967232U;
  #line 306 
  return (int)rx_buf_size;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_enable_rx_tx_int(struct xgbe_prv_data *pdata, struct xgbe_channel *channel)
{
  #line 313 
  enum xgbe_int int_id;
  #line 312 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 315 
  if (channel->tx_ring != (struct xgbe_ring *)0 && channel->rx_ring != (struct xgbe_ring *)0) 
    #line 316 
    int_id = XGMAC_INT_DMA_CH_SR_TI_RI;
  else 
    #line 317 
    if (channel->tx_ring != (struct xgbe_ring *)0) 
                                                   #line 318 
                                                   int_id = XGMAC_INT_DMA_CH_SR_TI;
    else 
      #line 319 
      if (channel->rx_ring != (struct xgbe_ring *)0) 
                                                     #line 320 
                                                     int_id = XGMAC_INT_DMA_CH_SR_RI; else 
                                                                    #line 322 
                                                                    return;
  #line 324 
  (*(hw_if->enable_int))(channel,int_id);
  #line 325 
  return;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_enable_rx_tx_ints(struct xgbe_prv_data *pdata)
{
  #line 329 
  unsigned int i;
  #line 331 
  i = 0U;
  #line 331 
  while (pdata->channel_count > i) {
    #line 332 
    xgbe_enable_rx_tx_int(pdata,pdata->channel[i]);
    #line 331 
    i ++;
  }
  #line 333 
  return;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_disable_rx_tx_int(struct xgbe_prv_data *pdata, struct xgbe_channel *channel)
{
  #line 339 
  enum xgbe_int int_id;
  #line 338 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 341 
  if (channel->tx_ring != (struct xgbe_ring *)0 && channel->rx_ring != (struct xgbe_ring *)0) 
    #line 342 
    int_id = XGMAC_INT_DMA_CH_SR_TI_RI;
  else 
    #line 343 
    if (channel->tx_ring != (struct xgbe_ring *)0) 
                                                   #line 344 
                                                   int_id = XGMAC_INT_DMA_CH_SR_TI;
    else 
      #line 345 
      if (channel->rx_ring != (struct xgbe_ring *)0) 
                                                     #line 346 
                                                     int_id = XGMAC_INT_DMA_CH_SR_RI; else 
                                                                    #line 348 
                                                                    return;
  #line 350 
  (*(hw_if->disable_int))(channel,int_id);
  #line 351 
  return;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_disable_rx_tx_ints(struct xgbe_prv_data *pdata)
{
  #line 355 
  unsigned int i;
  #line 357 
  i = 0U;
  #line 357 
  while (pdata->channel_count > i) {
    #line 358 
    xgbe_disable_rx_tx_int(pdata,pdata->channel[i]);
    #line 357 
    i ++;
  }
  #line 359 
  return;
}

#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static bool xgbe_ecc_sec(struct xgbe_prv_data *pdata, unsigned long *period, unsigned int *count, char *area)
{
  {
    #line 364 
    unsigned long __dummy;
    #line 364 
    unsigned long __dummy2;
    }
  #line 364 
  if (1 != 0) {
    {
      #line 364 
      unsigned long __dummy_0;
      #line 364 
      unsigned long __dummy2_0;
      }
    #line 364 
    if (1 != 0) {
      #line 364 
      if ((long)(jiffies - *period) < 0L) 
                                          #line 365 
                                          (*count) ++; else 
                                                            #line 364 
                                                            goto _LAND_0;
    }
    else 
         #line 364 
         goto _LAND_0;
  }
  else {
    #line 364 
    _LAND_0: {
               #line 367 
               *period = (unsigned long)(ecc_sec_period * 250U) + jiffies;
               #line 368 
               *count = 1U;
             }
  }
  #line 371 
  if (*count > ecc_sec_info_threshold) {
    #line 372 
    bool __print_once;
    #line 372 
    if (! __print_once) {
      #line 372 
      __print_once = (_Bool)1;
      #line 372 
      _dev_warn(pdata->dev,(char *)"%s ECC corrected errors exceed informational threshold\n",area);
    }
  }
  #line 376 
  if (*count > ecc_sec_warn_threshold) {
    {
      #line 377 
      bool __print_once_0;
      #line 377 
      if (! __print_once_0) {
        #line 377 
        __print_once_0 = (_Bool)1;
        #line 377 
        _dev_warn(pdata->dev,(char *)"%s ECC corrected errors exceed warning threshold\n",area);
      }
    }
    #line 380 
    return (_Bool)1;
  }
  #line 383 
  return (_Bool)0;
}

#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static bool xgbe_ecc_ded(struct xgbe_prv_data *pdata, unsigned long *period, unsigned int *count, char *area)
{
  {
    #line 389 
    unsigned long __dummy;
    #line 389 
    unsigned long __dummy2;
    }
  #line 389 
  if (1 != 0) {
    {
      #line 389 
      unsigned long __dummy_0;
      #line 389 
      unsigned long __dummy2_0;
      }
    #line 389 
    if (1 != 0) {
      #line 389 
      if ((long)(jiffies - *period) < 0L) 
                                          #line 390 
                                          (*count) ++; else 
                                                            #line 389 
                                                            goto _LAND_0;
    }
    else 
         #line 389 
         goto _LAND_0;
  }
  else {
    #line 389 
    _LAND_0: {
               #line 392 
               *period = (unsigned long)(ecc_ded_period * 250U) + jiffies;
               #line 393 
               *count = 1U;
             }
  }
  #line 396 
  if (*count > ecc_ded_threshold) {
    #line 397 
    netdev_alert(pdata->netdev,(char *)"%s ECC detected errors exceed threshold\n",area);
    #line 400 
    return (_Bool)1;
  }
  #line 403 
  return (_Bool)0;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_ecc_isr_task(unsigned long data)
{
  #line 409 
  unsigned int ecc_isr;
  #line 408 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)data;
  #line 410 
  bool stop = (_Bool)0;
  #line 413 
  ecc_isr = ioread32(pdata->xprop_regs + 48U);
  #line 414 
  ecc_isr = ioread32(pdata->xprop_regs + 52U) & ecc_isr;
  #line 415 
  if ((pdata->msg_enable & 512U) != 0U) {
    #line 415 
    bool branch;
    #line 415 
    struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_ecc_isr_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"ECC_ISR=%#010x\n", .lineno = (unsigned int)415U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 415 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
    #line 415 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 415 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug560,pdata->netdev,(char *)"ECC_ISR=%#010x\n",ecc_isr);
  }
  #line 417 
  if ((ecc_isr & 2U) != 0U) {
    #line 419 
    stop = (_Bool)(((int)xgbe_ecc_ded(pdata,& pdata->tx_ded_period,& pdata->tx_ded_count,
                     (char *)"TX fifo") | (int)stop) != 0);
  }
  #line 422 
  if ((ecc_isr & 8U) != 0U) {
    #line 424 
    stop = (_Bool)(((int)xgbe_ecc_ded(pdata,& pdata->rx_ded_period,& pdata->rx_ded_count,
                     (char *)"RX fifo") | (int)stop) != 0);
  }
  #line 427 
  if ((ecc_isr & 32U) != 0U) {
    #line 430 
    stop = (_Bool)(((int)xgbe_ecc_ded(pdata,& pdata->desc_ded_period,& pdata->desc_ded_count,
                     (char *)"descriptor cache") | (int)stop) != 0);
  }
  #line 433 
  if ((int)stop != 0) {
    #line 434 
    (*(pdata->hw_if.disable_ecc_ded))(pdata);
    #line 435 
    cif_schedule_work(& pdata->stopdev_work);
    #line 436 
    goto out;
  }
  #line 439 
  if ((ecc_isr & 1U) != 0U) {
    #line 440 
    if ((int)xgbe_ecc_sec(pdata,& pdata->tx_sec_period,& pdata->tx_sec_count,
                     (char *)"TX fifo") != 0) 
      #line 442 
      (*(pdata->hw_if.disable_ecc_sec))(pdata,(enum xgbe_ecc_sec)XGBE_ECC_SEC_TX);
  }
  #line 445 
  if ((ecc_isr & 4U) != 0U) {
    #line 446 
    if ((int)xgbe_ecc_sec(pdata,& pdata->rx_sec_period,& pdata->rx_sec_count,
                     (char *)"RX fifo") != 0) 
      #line 448 
      (*(pdata->hw_if.disable_ecc_sec))(pdata,(enum xgbe_ecc_sec)XGBE_ECC_SEC_RX);
  }
  #line 450 
  if ((ecc_isr & 16U) != 0U) {
    #line 451 
    if ((int)xgbe_ecc_sec(pdata,& pdata->desc_sec_period,& pdata->desc_sec_count,
                     (char *)"descriptor cache") != 0) 
      #line 453 
      (*(pdata->hw_if.disable_ecc_sec))(pdata,(enum xgbe_ecc_sec)XGBE_ECC_SEC_DESC);
  }
  #line 455 
  out: 
       #line 455 
  ;
  #line 457 
  iowrite32(ecc_isr,pdata->xprop_regs + 48U);
  #line 460 
  if ((pdata->vdata)->irq_reissue_support != 0U) 
                                                 #line 461 
                                                 iowrite32(2U,pdata->xprop_regs + 116U);
  #line 462 
  return;
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static irqreturn_t xgbe_ecc_isr(int irq, void *data)
{
  #line 466 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)data;
  #line 468 
  if (pdata->isr_as_tasklet != 0U) 
                                   #line 469 
                                   cif_tasklet_schedule_1(& pdata->tasklet_ecc); else 
                                                                    #line 471 
                                                                    xgbe_ecc_isr_task((unsigned long)pdata);
  #line 473 
  return IRQ_HANDLED;
}

#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_isr_task(unsigned long data)
{
  #line 480 
  struct xgbe_channel *channel;
  #line 481 
  unsigned int dma_isr;
  #line 481 
  unsigned int dma_ch_isr;
  #line 482 
  unsigned int mac_isr;
  #line 482 
  unsigned int mac_tssr;
  #line 482 
  unsigned int mac_mdioisr;
  #line 483 
  unsigned int i;
  #line 478 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)data;
  #line 479 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 489 
  dma_isr = ioread32(pdata->xgmac_regs + 12296U);
  #line 490 
  if (dma_isr == 0U) 
                     #line 491 
                     goto isr_done;
  #line 493 
  if ((pdata->msg_enable & 512U) != 0U) {
    #line 493 
    bool branch;
    #line 493 
    struct _ddebug __UNIQUE_ID_ddebug561 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_isr_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"DMA_ISR=%#010x\n", .lineno = (unsigned int)493U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 493 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug561.key.dd_key_false.key,(_Bool)0);
    #line 493 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 493 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug561,pdata->netdev,(char *)"DMA_ISR=%#010x\n",dma_isr);
  }
  #line 495 
  i = 0U;
  #line 495 
  while (pdata->channel_count > i) {
    #line 496 
    if (((unsigned int)(1 << i) & dma_isr) == 0U) 
                                                  #line 497 
                                                  goto __Cont;
    #line 499 
    channel = pdata->channel[i];
    #line 501 
    dma_ch_isr = ioread32(channel->dma_regs + 96U);
    #line 502 
    if ((pdata->msg_enable & 512U) != 0U) {
      #line 502 
      bool branch_0;
      #line 502 
      struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_isr_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"DMA_CH%u_ISR=%#010x\n", .lineno = (unsigned int)502U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 502 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
      #line 502 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 502 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug562,pdata->netdev,(char *)"DMA_CH%u_ISR=%#010x\n",i,dma_ch_isr);
    }
    #line 509 
    if (pdata->per_channel_irq == 0U && ((dma_ch_isr & 1U) != 0U || (dma_ch_isr & 64U) != 0U)) {
      #line 512 
      if ((int)napi_schedule_prep(& pdata->napi) != 0) {
        #line 514 
        xgbe_disable_rx_tx_ints(pdata);
        #line 517 
        __napi_schedule_irqoff(& pdata->napi);
      }
    }
    else {
      #line 524 
      dma_ch_isr &= 4294967294U;
      #line 524 
      dma_ch_isr = dma_ch_isr;
      #line 525 
      dma_ch_isr &= 4294967231U;
      #line 525 
      dma_ch_isr = dma_ch_isr;
    }
    #line 528 
    if ((dma_ch_isr & 128U) != 0U) 
                                   #line 529 
                                   (pdata->ext_stats.rx_buffer_unavailable) ++;
    #line 532 
    if ((dma_ch_isr & 4096U) != 0U) 
                                    #line 533 
                                    cif_schedule_work(& pdata->restart_work);
    #line 536 
    iowrite32(dma_ch_isr,channel->dma_regs + 96U);
    #line 495 
    __Cont: 
            #line 495 
    i ++;
  }
  #line 539 
  if ((dma_isr & 131072U) != 0U) {
    #line 540 
    mac_isr = ioread32(pdata->xgmac_regs + 176U);
    #line 542 
    if ((pdata->msg_enable & 512U) != 0U) {
      #line 542 
      bool branch_1;
      #line 542 
      struct _ddebug __UNIQUE_ID_ddebug563 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_isr_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"MAC_ISR=%#010x\n", .lineno = (unsigned int)542U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 542 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug563.key.dd_key_false.key,(_Bool)0);
      #line 542 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 542 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug563,pdata->netdev,(char *)"MAC_ISR=%#010x\n",mac_isr);
    }
    #line 545 
    if ((mac_isr & 1024U) != 0U) 
                                 #line 546 
                                 (*(hw_if->tx_mmc_int))(pdata);
    #line 548 
    if ((mac_isr & 512U) != 0U) 
                                #line 549 
                                (*(hw_if->rx_mmc_int))(pdata);
    #line 551 
    if ((mac_isr & 4096U) != 0U) {
      #line 552 
      mac_tssr = ioread32(pdata->xgmac_regs + 3360U);
      #line 554 
      if ((pdata->msg_enable & 512U) != 0U) {
        #line 554 
        bool branch_2;
        #line 554 
        struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_isr_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"MAC_TSSR=%#010x\n", .lineno = (unsigned int)554U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 554 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
        #line 554 
        if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                      #line 554 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug564,pdata->netdev,(char *)"MAC_TSSR=%#010x\n",mac_tssr);
      }
      #line 557 
      if ((mac_tssr & 32768U) != 0U) {
        #line 559 
        pdata->tx_tstamp = (*(hw_if->get_tx_tstamp))(pdata);
        #line 561 
        cif_queue_work_0(pdata->dev_workqueue,& pdata->tx_tstamp_work);
      }
    }
    #line 566 
    if ((mac_isr & 2U) != 0U) {
      #line 567 
      mac_mdioisr = ioread32(pdata->xgmac_regs + 532U);
      #line 569 
      if ((pdata->msg_enable & 512U) != 0U) {
        #line 569 
        bool branch_3;
        #line 569 
        struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_isr_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"MAC_MDIOISR=%#010x\n", .lineno = (unsigned int)569U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 569 
        branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
        #line 569 
        if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                      #line 569 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug565,pdata->netdev,(char *)"MAC_MDIOISR=%#010x\n",mac_mdioisr);
      }
      #line 572 
      if ((mac_mdioisr & 4096U) != 0U) 
                                       #line 574 
                                       complete(& pdata->mdio_complete);
    }
  }
  #line 578 
  isr_done: 
            #line 578 
  ;
  #line 580 
  if (pdata->dev_irq == pdata->an_irq) 
                                       #line 581 
                                       (*(pdata->phy_if.an_isr))(pdata);
  #line 584 
  if ((pdata->vdata)->ecc_support != 0U && pdata->dev_irq == pdata->ecc_irq) 
    #line 585 
    xgbe_ecc_isr_task((unsigned long)pdata);
  #line 588 
  if ((pdata->vdata)->i2c_support != 0U && pdata->dev_irq == pdata->i2c_irq) 
    #line 589 
    (*(pdata->i2c_if.i2c_isr))(pdata);
  #line 592 
  if ((pdata->vdata)->irq_reissue_support != 0U) {
    #line 593 
    unsigned int reissue_mask;
    #line 595 
    reissue_mask = 1U;
    #line 596 
    if (pdata->per_channel_irq == 0U) 
                                      #line 597 
                                      reissue_mask |= 1048560U;
    #line 599 
    iowrite32(reissue_mask,pdata->xprop_regs + 116U);
  }
  #line 601 
  return;
}

#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static irqreturn_t xgbe_isr(int irq, void *data)
{
  #line 605 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)data;
  #line 607 
  if (pdata->isr_as_tasklet != 0U) 
                                   #line 608 
                                   cif_tasklet_schedule_1(& pdata->tasklet_dev); else 
                                                                    #line 610 
                                                                    xgbe_isr_task((unsigned long)pdata);
  #line 612 
  return IRQ_HANDLED;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static irqreturn_t xgbe_dma_isr(int irq, void *data)
{
  #line 619 
  unsigned int dma_status;
  #line 617 
  struct xgbe_channel *channel = (struct xgbe_channel *)data;
  #line 618 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 624 
  if ((int)napi_schedule_prep(& channel->napi) != 0) {
    #line 626 
    if (pdata->channel_irq_mode != 0U) 
                                       #line 627 
                                       xgbe_disable_rx_tx_int(pdata,channel); else 
                                                                    #line 629 
                                                                    disable_irq_nosync((unsigned int)channel->dma_irq);
    #line 632 
    __napi_schedule_irqoff(& channel->napi);
  }
  #line 636 
  dma_status = 0U;
  #line 637 
  dma_status &= 4294967294U;
  #line 637 
  dma_status |= 1U;
  #line 638 
  dma_status &= 4294967231U;
  #line 638 
  dma_status |= 64U;
  #line 639 
  iowrite32(dma_status,channel->dma_regs + 96U);
  #line 641 
  return IRQ_HANDLED;
}

#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_tx_timer(struct timer_list *t)
{
  #line 646 
  void *__mptr;
  #line 648 
  struct napi_struct *napi;
  #line 646 
  __mptr = (void *)t;
  #line 646 
  struct xgbe_channel *channel = ((struct xgbe_channel *)(__mptr + 18446744073709551112U));
  #line 647 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 652 
  if (pdata->per_channel_irq != 0U) 
                                    #line 652 
                                    napi = & channel->napi; else 
                                                                 #line 652 
                                                                 napi = & pdata->napi;
  #line 654 
  if ((int)napi_schedule_prep(napi) != 0) {
    #line 656 
    if (pdata->per_channel_irq != 0U) 
      #line 657 
      if (pdata->channel_irq_mode != 0U) 
                                         #line 658 
                                         xgbe_disable_rx_tx_int(pdata,channel); else 
                                                                    #line 660 
                                                                    disable_irq_nosync((unsigned int)channel->dma_irq);
    else 
         #line 662 
         xgbe_disable_rx_tx_ints(pdata);
    #line 665 
    __napi_schedule(napi);
  }
  #line 668 
  channel->tx_timer_active = 0U;
  #line 673 
  return;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_service(struct work_struct *work)
{
  #line 675 
  void *__mptr;
  #line 675 
  __mptr = (void *)work;
  #line 675 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709549968U));
  #line 679 
  (*(pdata->phy_if.phy_status))(pdata);
  #line 680 
  return;
}

#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_service_timer(struct timer_list *t)
{
  #line 684 
  void *__mptr;
  #line 684 
  __mptr = (void *)t;
  #line 684 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709549888U));
  #line 686 
  cif_queue_work_0(pdata->dev_workqueue,& pdata->service_work);
  #line 688 
  cif_mod_timer(& pdata->service_timer,jiffies + 250UL);
  #line 689 
  return;
}

#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_init_timers(struct xgbe_prv_data *pdata)
{
  #line 693 
  struct xgbe_channel *channel;
  #line 694 
  unsigned int i;
  {
    #line 696 
    struct lock_class_key __key;
    #line 696 
    init_timer_key(& pdata->service_timer,& xgbe_service_timer,0U,(char *)"(&pdata->service_timer)",& __key);
  }
  #line 698 
  i = 0U;
  #line 698 
  while (pdata->channel_count > i) {
    #line 699 
    channel = pdata->channel[i];
    #line 700 
    if (channel->tx_ring == (struct xgbe_ring *)0) 
                                                   #line 701 
                                                   break;
    {
      #line 703 
      struct lock_class_key __key_0;
      #line 703 
      init_timer_key(& channel->tx_timer,& xgbe_tx_timer,0U,(char *)"(&channel->tx_timer)",& __key_0);
    }
    #line 698 
    i ++;
  }
  #line 706 
  return;
}

#line 707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_start_timers(struct xgbe_prv_data *pdata)
{
  #line 709 
  cif_mod_timer(& pdata->service_timer,jiffies + 250UL);
  #line 710 
  return;
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_stop_timers(struct xgbe_prv_data *pdata)
{
  #line 714 
  struct xgbe_channel *channel;
  #line 715 
  unsigned int i;
  #line 717 
  cif_del_timer_sync(& pdata->service_timer);
  #line 719 
  i = 0U;
  #line 719 
  while (pdata->channel_count > i) {
    #line 720 
    channel = pdata->channel[i];
    #line 721 
    if (channel->tx_ring == (struct xgbe_ring *)0) 
                                                   #line 722 
                                                   break;
    #line 724 
    cif_del_timer_sync(& channel->tx_timer);
    #line 719 
    i ++;
  }
  #line 726 
  return;
}

#line 728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_get_all_hw_features(struct xgbe_prv_data *pdata)
{
  #line 730 
  unsigned int mac_hfr0;
  #line 730 
  unsigned int mac_hfr1;
  #line 730 
  unsigned int mac_hfr2;
  #line 731 
  struct xgbe_hw_features *hw_feat = & pdata->hw_feat;
  #line 733 
  mac_hfr0 = ioread32(pdata->xgmac_regs + 284U);
  #line 734 
  mac_hfr1 = ioread32(pdata->xgmac_regs + 288U);
  #line 735 
  mac_hfr2 = ioread32(pdata->xgmac_regs + 292U);
  #line 737 
  memset((void *)hw_feat,0,136UL);
  #line 739 
  hw_feat->version = ioread32(pdata->xgmac_regs + 272U);
  #line 742 
  hw_feat->gmii = (mac_hfr0 >> 1) & 1U;
  #line 743 
  hw_feat->vlhash = (mac_hfr0 >> 4) & 1U;
  #line 744 
  hw_feat->sma = (mac_hfr0 >> 5) & 1U;
  #line 745 
  hw_feat->rwk = (mac_hfr0 >> 6) & 1U;
  #line 746 
  hw_feat->mgk = (mac_hfr0 >> 7) & 1U;
  #line 747 
  hw_feat->mmc = (mac_hfr0 >> 8) & 1U;
  #line 748 
  hw_feat->aoe = (mac_hfr0 >> 9) & 1U;
  #line 749 
  hw_feat->ts = (mac_hfr0 >> 12) & 1U;
  #line 750 
  hw_feat->eee = (mac_hfr0 >> 13) & 1U;
  #line 751 
  hw_feat->tx_coe = (mac_hfr0 >> 14) & 1U;
  #line 752 
  hw_feat->rx_coe = (mac_hfr0 >> 16) & 1U;
  #line 753 
  hw_feat->addn_mac = (mac_hfr0 >> 18) & 31U;
  #line 755 
  hw_feat->ts_src = (mac_hfr0 >> 25) & 3U;
  #line 756 
  hw_feat->sa_vlan_ins = (mac_hfr0 >> 27) & 1U;
  #line 757 
  hw_feat->vxn = (mac_hfr0 >> 29) & 1U;
  #line 760 
  hw_feat->rx_fifo_size = mac_hfr1 & 31U;
  #line 762 
  hw_feat->tx_fifo_size = (mac_hfr1 >> 6) & 31U;
  #line 764 
  hw_feat->adv_ts_hi = (mac_hfr1 >> 13) & 1U;
  #line 765 
  hw_feat->dma_width = (mac_hfr1 >> 14) & 3U;
  #line 766 
  hw_feat->dcb = (mac_hfr1 >> 16) & 1U;
  #line 767 
  hw_feat->sph = (mac_hfr1 >> 17) & 1U;
  #line 768 
  hw_feat->tso = (mac_hfr1 >> 18) & 1U;
  #line 769 
  hw_feat->dma_debug = (mac_hfr1 >> 19) & 1U;
  #line 770 
  hw_feat->rss = (mac_hfr1 >> 20) & 1U;
  #line 771 
  hw_feat->tc_cnt = (mac_hfr1 >> 21) & 7U;
  #line 772 
  hw_feat->hash_table_size = (mac_hfr1 >> 24) & 7U;
  #line 774 
  hw_feat->l3l4_filter_num = (mac_hfr1 >> 27) & 15U;
  #line 778 
  hw_feat->rx_q_cnt = mac_hfr2 & 15U;
  #line 779 
  hw_feat->tx_q_cnt = (mac_hfr2 >> 6) & 15U;
  #line 780 
  hw_feat->rx_ch_cnt = (mac_hfr2 >> 12) & 15U;
  #line 781 
  hw_feat->tx_ch_cnt = (mac_hfr2 >> 18) & 15U;
  #line 782 
  hw_feat->pps_out_num = (mac_hfr2 >> 24) & 7U;
  #line 783 
  hw_feat->aux_snap_num = (mac_hfr2 >> 28) & 7U;
  #line 786 
  switch (hw_feat->hash_table_size) {
    #line 787 
    case (unsigned int)0: 
                          #line 787 
    ;
    #line 788 
    break;
    #line 789 
    case (unsigned int)1: 
                          #line 789 
    ;
    #line 790 
    hw_feat->hash_table_size = 64U;
    #line 791 
    break;
    #line 792 
    case (unsigned int)2: 
                          #line 792 
    ;
    #line 793 
    hw_feat->hash_table_size = 128U;
    #line 794 
    break;
    #line 795 
    case (unsigned int)3: 
                          #line 795 
    ;
    #line 796 
    hw_feat->hash_table_size = 256U;
    #line 797 
    break;
  }
  #line 801 
  switch (hw_feat->dma_width) {
    #line 802 
    case (unsigned int)0: 
                          #line 802 
    ;
    #line 803 
    hw_feat->dma_width = 32U;
    #line 804 
    break;
    #line 805 
    case (unsigned int)1: 
                          #line 805 
    ;
    #line 806 
    hw_feat->dma_width = 40U;
    #line 807 
    break;
    #line 808 
    case (unsigned int)2: 
                          #line 808 
    ;
    #line 809 
    hw_feat->dma_width = 48U;
    #line 810 
    break;
    #line 811 
    default: 
             #line 811 
    ;
    #line 812 
    hw_feat->dma_width = 32U;
  }
  #line 818 
  (hw_feat->rx_q_cnt) ++;
  #line 819 
  (hw_feat->tx_q_cnt) ++;
  #line 820 
  (hw_feat->rx_ch_cnt) ++;
  #line 821 
  (hw_feat->tx_ch_cnt) ++;
  #line 822 
  (hw_feat->tc_cnt) ++;
  #line 825 
  hw_feat->rx_fifo_size = (unsigned int)(1 << (hw_feat->rx_fifo_size + 7U));
  #line 826 
  hw_feat->tx_fifo_size = (unsigned int)(1 << (hw_feat->tx_fifo_size + 7U));
  #line 828 
  if ((pdata->msg_enable & 2U) != 0U) {
    {
      #line 829 
      bool branch;
      #line 829 
      struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"Hardware features:\n", .lineno = (unsigned int)829U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 829 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
      #line 829 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 829 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug566,pdata->dev,(char *)"Hardware features:\n");
    }
    {
      #line 832 
      bool branch_0;
      #line 832 
      struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  1GbE support              : %s\n", .lineno = (unsigned int)832U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 832 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
      #line 832 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 832 
        char *tmp_0;
        #line 832 
        if (hw_feat->gmii != 0U) 
                                 #line 832 
                                 tmp_0 = (char *)"yes"; else 
                                                             #line 832 
                                                             tmp_0 = (char *)"no";
        #line 832 
        ;
        #line 832 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug567,pdata->dev,(char *)"  1GbE support              : %s\n",tmp_0);
      }
    }
    {
      #line 834 
      bool branch_1;
      #line 834 
      struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  VLAN hash filter          : %s\n", .lineno = (unsigned int)834U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 834 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
      #line 834 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 834 
        char *tmp_2;
        #line 834 
        if (hw_feat->vlhash != 0U) 
                                   #line 834 
                                   tmp_2 = (char *)"yes"; else 
                                                               #line 834 
                                                               tmp_2 = (char *)"no";
        #line 834 
        ;
        #line 834 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug568,pdata->dev,(char *)"  VLAN hash filter          : %s\n",tmp_2);
      }
    }
    {
      #line 836 
      bool branch_2;
      #line 836 
      struct _ddebug __UNIQUE_ID_ddebug569 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  MDIO interface            : %s\n", .lineno = (unsigned int)836U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 836 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug569.key.dd_key_false.key,(_Bool)0);
      #line 836 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 836 
        char *tmp_4;
        #line 836 
        if (hw_feat->sma != 0U) 
                                #line 836 
                                tmp_4 = (char *)"yes"; else 
                                                            #line 836 
                                                            tmp_4 = (char *)"no";
        #line 836 
        ;
        #line 836 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug569,pdata->dev,(char *)"  MDIO interface            : %s\n",tmp_4);
      }
    }
    {
      #line 838 
      bool branch_3;
      #line 838 
      struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Wake-up packet support    : %s\n", .lineno = (unsigned int)838U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 838 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
      #line 838 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 838 
        char *tmp_6;
        #line 838 
        if (hw_feat->rwk != 0U) 
                                #line 838 
                                tmp_6 = (char *)"yes"; else 
                                                            #line 838 
                                                            tmp_6 = (char *)"no";
        #line 838 
        ;
        #line 838 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug570,pdata->dev,(char *)"  Wake-up packet support    : %s\n",tmp_6);
      }
    }
    {
      #line 840 
      bool branch_4;
      #line 840 
      struct _ddebug __UNIQUE_ID_ddebug571 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Magic packet support      : %s\n", .lineno = (unsigned int)840U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 840 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug571.key.dd_key_false.key,(_Bool)0);
      #line 840 
      if ((long)((long)((int)branch_4 != 0)) != 0L) {
        #line 840 
        char *tmp_8;
        #line 840 
        if (hw_feat->mgk != 0U) 
                                #line 840 
                                tmp_8 = (char *)"yes"; else 
                                                            #line 840 
                                                            tmp_8 = (char *)"no";
        #line 840 
        ;
        #line 840 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug571,pdata->dev,(char *)"  Magic packet support      : %s\n",tmp_8);
      }
    }
    {
      #line 842 
      bool branch_5;
      #line 842 
      struct _ddebug __UNIQUE_ID_ddebug572 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Management counters       : %s\n", .lineno = (unsigned int)842U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 842 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug572.key.dd_key_false.key,(_Bool)0);
      #line 842 
      if ((long)((long)((int)branch_5 != 0)) != 0L) {
        #line 842 
        char *tmp_10;
        #line 842 
        if (hw_feat->mmc != 0U) 
                                #line 842 
                                tmp_10 = (char *)"yes"; else 
                                                             #line 842 
                                                             tmp_10 = (char *)"no";
        #line 842 
        ;
        #line 842 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug572,pdata->dev,(char *)"  Management counters       : %s\n",tmp_10);
      }
    }
    {
      #line 844 
      bool branch_6;
      #line 844 
      struct _ddebug __UNIQUE_ID_ddebug573 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  ARP offload               : %s\n", .lineno = (unsigned int)844U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 844 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug573.key.dd_key_false.key,(_Bool)0);
      #line 844 
      if ((long)((long)((int)branch_6 != 0)) != 0L) {
        #line 844 
        char *tmp_12;
        #line 844 
        if (hw_feat->aoe != 0U) 
                                #line 844 
                                tmp_12 = (char *)"yes"; else 
                                                             #line 844 
                                                             tmp_12 = (char *)"no";
        #line 844 
        ;
        #line 844 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug573,pdata->dev,(char *)"  ARP offload               : %s\n",tmp_12);
      }
    }
    {
      #line 846 
      bool branch_7;
      #line 846 
      struct _ddebug __UNIQUE_ID_ddebug574 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  IEEE 1588-2008 Timestamp  : %s\n", .lineno = (unsigned int)846U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 846 
      branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug574.key.dd_key_false.key,(_Bool)0);
      #line 846 
      if ((long)((long)((int)branch_7 != 0)) != 0L) {
        #line 846 
        char *tmp_14;
        #line 846 
        if (hw_feat->ts != 0U) 
                               #line 846 
                               tmp_14 = (char *)"yes"; else 
                                                            #line 846 
                                                            tmp_14 = (char *)"no";
        #line 846 
        ;
        #line 846 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug574,pdata->dev,(char *)"  IEEE 1588-2008 Timestamp  : %s\n",tmp_14);
      }
    }
    {
      #line 848 
      bool branch_8;
      #line 848 
      struct _ddebug __UNIQUE_ID_ddebug575 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Energy Efficient Ethernet : %s\n", .lineno = (unsigned int)848U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 848 
      branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug575.key.dd_key_false.key,(_Bool)0);
      #line 848 
      if ((long)((long)((int)branch_8 != 0)) != 0L) {
        #line 848 
        char *tmp_16;
        #line 848 
        if (hw_feat->eee != 0U) 
                                #line 848 
                                tmp_16 = (char *)"yes"; else 
                                                             #line 848 
                                                             tmp_16 = (char *)"no";
        #line 848 
        ;
        #line 848 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug575,pdata->dev,(char *)"  Energy Efficient Ethernet : %s\n",tmp_16);
      }
    }
    {
      #line 850 
      bool branch_9;
      #line 850 
      struct _ddebug __UNIQUE_ID_ddebug576 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  TX checksum offload       : %s\n", .lineno = (unsigned int)850U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 850 
      branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug576.key.dd_key_false.key,(_Bool)0);
      #line 850 
      if ((long)((long)((int)branch_9 != 0)) != 0L) {
        #line 850 
        char *tmp_18;
        #line 850 
        if (hw_feat->tx_coe != 0U) 
                                   #line 850 
                                   tmp_18 = (char *)"yes"; else 
                                                                #line 850 
                                                                tmp_18 = (char *)"no";
        #line 850 
        ;
        #line 850 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug576,pdata->dev,(char *)"  TX checksum offload       : %s\n",tmp_18);
      }
    }
    {
      #line 852 
      bool branch_10;
      #line 852 
      struct _ddebug __UNIQUE_ID_ddebug577 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  RX checksum offload       : %s\n", .lineno = (unsigned int)852U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 852 
      branch_10 = arch_static_branch(& __UNIQUE_ID_ddebug577.key.dd_key_false.key,(_Bool)0);
      #line 852 
      if ((long)((long)((int)branch_10 != 0)) != 0L) {
        #line 852 
        char *tmp_20;
        #line 852 
        if (hw_feat->rx_coe != 0U) 
                                   #line 852 
                                   tmp_20 = (char *)"yes"; else 
                                                                #line 852 
                                                                tmp_20 = (char *)"no";
        #line 852 
        ;
        #line 852 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug577,pdata->dev,(char *)"  RX checksum offload       : %s\n",tmp_20);
      }
    }
    {
      #line 854 
      bool branch_11;
      #line 854 
      struct _ddebug __UNIQUE_ID_ddebug578 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Additional MAC addresses  : %u\n", .lineno = (unsigned int)854U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 854 
      branch_11 = arch_static_branch(& __UNIQUE_ID_ddebug578.key.dd_key_false.key,(_Bool)0);
      #line 854 
      if ((long)((long)((int)branch_11 != 0)) != 0L) 
                                                     #line 854 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug578,pdata->dev,(char *)"  Additional MAC addresses  : %u\n",hw_feat->addn_mac);
    }
    {
      #line 856 
      bool branch_12;
      #line 856 
      struct _ddebug __UNIQUE_ID_ddebug579 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Timestamp source          : %s\n", .lineno = (unsigned int)856U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 856 
      branch_12 = arch_static_branch(& __UNIQUE_ID_ddebug579.key.dd_key_false.key,(_Bool)0);
      #line 856 
      if ((long)((long)((int)branch_12 != 0)) != 0L) {
        #line 856 
        char *tmp_23;
        #line 856 
        char *tmp_24;
        #line 856 
        char *tmp_25;
        #line 856 
        if (hw_feat->ts_src != 1U) {
          #line 856 
          if (hw_feat->ts_src != 2U) {
            #line 856 
            if (hw_feat->ts_src == 3U) 
                                       #line 856 
                                       tmp_23 = (char *)"internal/external"; else 
                                                                    #line 856 
                                                                    tmp_23 = (char *)"n/a";
            #line 856 
            tmp_24 = tmp_23;
          }
          else 
               #line 856 
               tmp_24 = (char *)"external";
          #line 856 
          tmp_25 = tmp_24;
        }
        else 
             #line 856 
             tmp_25 = (char *)"internal";
        #line 856 
        ;
        #line 856 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug579,pdata->dev,(char *)"  Timestamp source          : %s\n",tmp_25);
      }
    }
    {
      #line 860 
      bool branch_13;
      #line 860 
      struct _ddebug __UNIQUE_ID_ddebug580 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  SA/VLAN insertion         : %s\n", .lineno = (unsigned int)860U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 860 
      branch_13 = arch_static_branch(& __UNIQUE_ID_ddebug580.key.dd_key_false.key,(_Bool)0);
      #line 860 
      if ((long)((long)((int)branch_13 != 0)) != 0L) {
        #line 860 
        char *tmp_27;
        #line 860 
        if (hw_feat->sa_vlan_ins != 0U) 
                                        #line 860 
                                        tmp_27 = (char *)"yes"; else 
                                                                  #line 860 
                                                                  tmp_27 = (char *)"no";
        #line 860 
        ;
        #line 860 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug580,pdata->dev,(char *)"  SA/VLAN insertion         : %s\n",tmp_27);
      }
    }
    {
      #line 862 
      bool branch_14;
      #line 862 
      struct _ddebug __UNIQUE_ID_ddebug581 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  VXLAN/NVGRE support       : %s\n", .lineno = (unsigned int)862U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 862 
      branch_14 = arch_static_branch(& __UNIQUE_ID_ddebug581.key.dd_key_false.key,(_Bool)0);
      #line 862 
      if ((long)((long)((int)branch_14 != 0)) != 0L) {
        #line 862 
        char *tmp_29;
        #line 862 
        if (hw_feat->vxn != 0U) 
                                #line 862 
                                tmp_29 = (char *)"yes"; else 
                                                             #line 862 
                                                             tmp_29 = (char *)"no";
        #line 862 
        ;
        #line 862 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug581,pdata->dev,(char *)"  VXLAN/NVGRE support       : %s\n",tmp_29);
      }
    }
    {
      #line 866 
      bool branch_15;
      #line 866 
      struct _ddebug __UNIQUE_ID_ddebug582 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  RX fifo size              : %u\n", .lineno = (unsigned int)866U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 866 
      branch_15 = arch_static_branch(& __UNIQUE_ID_ddebug582.key.dd_key_false.key,(_Bool)0);
      #line 866 
      if ((long)((long)((int)branch_15 != 0)) != 0L) 
                                                     #line 866 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug582,pdata->dev,(char *)"  RX fifo size              : %u\n",hw_feat->rx_fifo_size);
    }
    {
      #line 868 
      bool branch_16;
      #line 868 
      struct _ddebug __UNIQUE_ID_ddebug583 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  TX fifo size              : %u\n", .lineno = (unsigned int)868U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 868 
      branch_16 = arch_static_branch(& __UNIQUE_ID_ddebug583.key.dd_key_false.key,(_Bool)0);
      #line 868 
      if ((long)((long)((int)branch_16 != 0)) != 0L) 
                                                     #line 868 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug583,pdata->dev,(char *)"  TX fifo size              : %u\n",hw_feat->tx_fifo_size);
    }
    {
      #line 870 
      bool branch_17;
      #line 870 
      struct _ddebug __UNIQUE_ID_ddebug584 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  IEEE 1588 high word       : %s\n", .lineno = (unsigned int)870U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 870 
      branch_17 = arch_static_branch(& __UNIQUE_ID_ddebug584.key.dd_key_false.key,(_Bool)0);
      #line 870 
      if ((long)((long)((int)branch_17 != 0)) != 0L) {
        #line 870 
        char *tmp_33;
        #line 870 
        if (hw_feat->adv_ts_hi != 0U) 
                                      #line 870 
                                      tmp_33 = (char *)"yes"; else 
                                                                   #line 870 
                                                                   tmp_33 = (char *)"no";
        #line 870 
        ;
        #line 870 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug584,pdata->dev,(char *)"  IEEE 1588 high word       : %s\n",tmp_33);
      }
    }
    {
      #line 872 
      bool branch_18;
      #line 872 
      struct _ddebug __UNIQUE_ID_ddebug585 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  DMA width                 : %u\n", .lineno = (unsigned int)872U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 872 
      branch_18 = arch_static_branch(& __UNIQUE_ID_ddebug585.key.dd_key_false.key,(_Bool)0);
      #line 872 
      if ((long)((long)((int)branch_18 != 0)) != 0L) 
                                                     #line 872 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug585,pdata->dev,(char *)"  DMA width                 : %u\n",hw_feat->dma_width);
    }
    {
      #line 874 
      bool branch_19;
      #line 874 
      struct _ddebug __UNIQUE_ID_ddebug586 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Data Center Bridging      : %s\n", .lineno = (unsigned int)874U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 874 
      branch_19 = arch_static_branch(& __UNIQUE_ID_ddebug586.key.dd_key_false.key,(_Bool)0);
      #line 874 
      if ((long)((long)((int)branch_19 != 0)) != 0L) {
        #line 874 
        char *tmp_36;
        #line 874 
        if (hw_feat->dcb != 0U) 
                                #line 874 
                                tmp_36 = (char *)"yes"; else 
                                                             #line 874 
                                                             tmp_36 = (char *)"no";
        #line 874 
        ;
        #line 874 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug586,pdata->dev,(char *)"  Data Center Bridging      : %s\n",tmp_36);
      }
    }
    {
      #line 876 
      bool branch_20;
      #line 876 
      struct _ddebug __UNIQUE_ID_ddebug587 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Split header              : %s\n", .lineno = (unsigned int)876U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 876 
      branch_20 = arch_static_branch(& __UNIQUE_ID_ddebug587.key.dd_key_false.key,(_Bool)0);
      #line 876 
      if ((long)((long)((int)branch_20 != 0)) != 0L) {
        #line 876 
        char *tmp_38;
        #line 876 
        if (hw_feat->sph != 0U) 
                                #line 876 
                                tmp_38 = (char *)"yes"; else 
                                                             #line 876 
                                                             tmp_38 = (char *)"no";
        #line 876 
        ;
        #line 876 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug587,pdata->dev,(char *)"  Split header              : %s\n",tmp_38);
      }
    }
    {
      #line 878 
      bool branch_21;
      #line 878 
      struct _ddebug __UNIQUE_ID_ddebug588 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  TCP Segmentation Offload  : %s\n", .lineno = (unsigned int)878U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 878 
      branch_21 = arch_static_branch(& __UNIQUE_ID_ddebug588.key.dd_key_false.key,(_Bool)0);
      #line 878 
      if ((long)((long)((int)branch_21 != 0)) != 0L) {
        #line 878 
        char *tmp_40;
        #line 878 
        if (hw_feat->tso != 0U) 
                                #line 878 
                                tmp_40 = (char *)"yes"; else 
                                                             #line 878 
                                                             tmp_40 = (char *)"no";
        #line 878 
        ;
        #line 878 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug588,pdata->dev,(char *)"  TCP Segmentation Offload  : %s\n",tmp_40);
      }
    }
    {
      #line 880 
      bool branch_22;
      #line 880 
      struct _ddebug __UNIQUE_ID_ddebug589 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Debug memory interface    : %s\n", .lineno = (unsigned int)880U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 880 
      branch_22 = arch_static_branch(& __UNIQUE_ID_ddebug589.key.dd_key_false.key,(_Bool)0);
      #line 880 
      if ((long)((long)((int)branch_22 != 0)) != 0L) {
        #line 880 
        char *tmp_42;
        #line 880 
        if (hw_feat->dma_debug != 0U) 
                                      #line 880 
                                      tmp_42 = (char *)"yes"; else 
                                                                   #line 880 
                                                                   tmp_42 = (char *)"no";
        #line 880 
        ;
        #line 880 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug589,pdata->dev,(char *)"  Debug memory interface    : %s\n",tmp_42);
      }
    }
    {
      #line 882 
      bool branch_23;
      #line 882 
      struct _ddebug __UNIQUE_ID_ddebug590 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Receive Side Scaling      : %s\n", .lineno = (unsigned int)882U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 882 
      branch_23 = arch_static_branch(& __UNIQUE_ID_ddebug590.key.dd_key_false.key,(_Bool)0);
      #line 882 
      if ((long)((long)((int)branch_23 != 0)) != 0L) {
        #line 882 
        char *tmp_44;
        #line 882 
        if (hw_feat->rss != 0U) 
                                #line 882 
                                tmp_44 = (char *)"yes"; else 
                                                             #line 882 
                                                             tmp_44 = (char *)"no";
        #line 882 
        ;
        #line 882 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug590,pdata->dev,(char *)"  Receive Side Scaling      : %s\n",tmp_44);
      }
    }
    {
      #line 884 
      bool branch_24;
      #line 884 
      struct _ddebug __UNIQUE_ID_ddebug591 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Traffic Class count       : %u\n", .lineno = (unsigned int)884U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 884 
      branch_24 = arch_static_branch(& __UNIQUE_ID_ddebug591.key.dd_key_false.key,(_Bool)0);
      #line 884 
      if ((long)((long)((int)branch_24 != 0)) != 0L) 
                                                     #line 884 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug591,pdata->dev,(char *)"  Traffic Class count       : %u\n",hw_feat->tc_cnt);
    }
    {
      #line 886 
      bool branch_25;
      #line 886 
      struct _ddebug __UNIQUE_ID_ddebug592 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Hash table size           : %u\n", .lineno = (unsigned int)886U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 886 
      branch_25 = arch_static_branch(& __UNIQUE_ID_ddebug592.key.dd_key_false.key,(_Bool)0);
      #line 886 
      if ((long)((long)((int)branch_25 != 0)) != 0L) 
                                                     #line 886 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug592,pdata->dev,(char *)"  Hash table size           : %u\n",hw_feat->hash_table_size);
    }
    {
      #line 888 
      bool branch_26;
      #line 888 
      struct _ddebug __UNIQUE_ID_ddebug593 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  L3/L4 Filters             : %u\n", .lineno = (unsigned int)888U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 888 
      branch_26 = arch_static_branch(& __UNIQUE_ID_ddebug593.key.dd_key_false.key,(_Bool)0);
      #line 888 
      if ((long)((long)((int)branch_26 != 0)) != 0L) 
                                                     #line 888 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug593,pdata->dev,(char *)"  L3/L4 Filters             : %u\n",hw_feat->l3l4_filter_num);
    }
    {
      #line 892 
      bool branch_27;
      #line 892 
      struct _ddebug __UNIQUE_ID_ddebug594 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  RX queue count            : %u\n", .lineno = (unsigned int)892U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 892 
      branch_27 = arch_static_branch(& __UNIQUE_ID_ddebug594.key.dd_key_false.key,(_Bool)0);
      #line 892 
      if ((long)((long)((int)branch_27 != 0)) != 0L) 
                                                     #line 892 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug594,pdata->dev,(char *)"  RX queue count            : %u\n",hw_feat->rx_q_cnt);
    }
    {
      #line 894 
      bool branch_28;
      #line 894 
      struct _ddebug __UNIQUE_ID_ddebug595 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  TX queue count            : %u\n", .lineno = (unsigned int)894U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 894 
      branch_28 = arch_static_branch(& __UNIQUE_ID_ddebug595.key.dd_key_false.key,(_Bool)0);
      #line 894 
      if ((long)((long)((int)branch_28 != 0)) != 0L) 
                                                     #line 894 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug595,pdata->dev,(char *)"  TX queue count            : %u\n",hw_feat->tx_q_cnt);
    }
    {
      #line 896 
      bool branch_29;
      #line 896 
      struct _ddebug __UNIQUE_ID_ddebug596 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  RX DMA channel count      : %u\n", .lineno = (unsigned int)896U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 896 
      branch_29 = arch_static_branch(& __UNIQUE_ID_ddebug596.key.dd_key_false.key,(_Bool)0);
      #line 896 
      if ((long)((long)((int)branch_29 != 0)) != 0L) 
                                                     #line 896 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug596,pdata->dev,(char *)"  RX DMA channel count      : %u\n",hw_feat->rx_ch_cnt);
    }
    {
      #line 898 
      bool branch_30;
      #line 898 
      struct _ddebug __UNIQUE_ID_ddebug597 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  TX DMA channel count      : %u\n", .lineno = (unsigned int)898U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 898 
      branch_30 = arch_static_branch(& __UNIQUE_ID_ddebug597.key.dd_key_false.key,(_Bool)0);
      #line 898 
      if ((long)((long)((int)branch_30 != 0)) != 0L) 
                                                     #line 898 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug597,pdata->dev,(char *)"  TX DMA channel count      : %u\n",hw_feat->rx_ch_cnt);
    }
    {
      #line 900 
      bool branch_31;
      #line 900 
      struct _ddebug __UNIQUE_ID_ddebug598 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  PPS outputs               : %u\n", .lineno = (unsigned int)900U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 900 
      branch_31 = arch_static_branch(& __UNIQUE_ID_ddebug598.key.dd_key_false.key,(_Bool)0);
      #line 900 
      if ((long)((long)((int)branch_31 != 0)) != 0L) 
                                                     #line 900 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug598,pdata->dev,(char *)"  PPS outputs               : %u\n",hw_feat->pps_out_num);
    }
    {
      #line 902 
      bool branch_32;
      #line 902 
      struct _ddebug __UNIQUE_ID_ddebug599 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_get_all_hw_features", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  Auxiliary snapshot inputs : %u\n", .lineno = (unsigned int)902U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 902 
      branch_32 = arch_static_branch(& __UNIQUE_ID_ddebug599.key.dd_key_false.key,(_Bool)0);
      #line 902 
      if ((long)((long)((int)branch_32 != 0)) != 0L) 
                                                     #line 902 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug599,pdata->dev,(char *)"  Auxiliary snapshot inputs : %u\n",hw_feat->aux_snap_num);
    }
  }
  #line 905 
  return;
}

#line 907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_disable_vxlan_offloads(struct xgbe_prv_data *pdata)
{
  #line 909 
  struct net_device *netdev = pdata->netdev;
  #line 911 
  if (pdata->vxlan_offloads_set == 0U) 
                                       #line 912 
                                       return;
  #line 914 
  netdev_info(netdev,(char *)"disabling VXLAN offloads\n");
  #line 916 
  netdev->hw_enc_features &= 18446743523751280620ULL;
  #line 926 
  netdev->features &= 18446744073508225023ULL;
  #line 929 
  pdata->vxlan_offloads_set = 0U;
  #line 930 
  return;
}

#line 932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_disable_vxlan_hw(struct xgbe_prv_data *pdata)
{
  #line 934 
  if (pdata->vxlan_port_set == 0U) 
                                   #line 935 
                                   return;
  #line 937 
  (*(pdata->hw_if.disable_vxlan))(pdata);
  #line 939 
  pdata->vxlan_port_set = 0U;
  #line 940 
  pdata->vxlan_port = (unsigned short)0U;
  #line 941 
  return;
}

#line 943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_disable_vxlan_accel(struct xgbe_prv_data *pdata)
{
  #line 945 
  xgbe_disable_vxlan_offloads(pdata);
  #line 947 
  xgbe_disable_vxlan_hw(pdata);
  #line 948 
  return;
}

#line 950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_enable_vxlan_offloads(struct xgbe_prv_data *pdata)
{
  #line 952 
  struct net_device *netdev = pdata->netdev;
  #line 954 
  if (pdata->vxlan_offloads_set != 0U) 
                                       #line 955 
                                       return;
  #line 957 
  netdev_info(netdev,(char *)"enabling VXLAN offloads\n");
  #line 959 
  netdev->hw_enc_features = (netdev->hw_enc_features | pdata->vxlan_features) | 549756944403ULL;
  #line 968 
  netdev->features |= pdata->vxlan_features;
  #line 970 
  pdata->vxlan_offloads_set = 1U;
  #line 971 
  return;
}

#line 973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_enable_vxlan_hw(struct xgbe_prv_data *pdata)
{
  #line 983 
  void *__mptr;
  #line 975 
  struct xgbe_vxlan_data *vdata;
  #line 977 
  if (pdata->vxlan_port_set != 0U) 
                                   #line 978 
                                   return;
  #line 980 
  if (list_empty(& pdata->vxlan_ports) != 0) 
                                             #line 981 
                                             return;
  #line 983 
  __mptr = (void *)pdata->vxlan_ports.next;
  #line 983 
  vdata = ((struct xgbe_vxlan_data *)__mptr);
  #line 986 
  pdata->vxlan_port_set = 1U;
  #line 987 
  pdata->vxlan_port = __builtin_bswap16((unsigned short)((int)vdata->port));
  #line 989 
  (*(pdata->hw_if.enable_vxlan))(pdata);
  #line 990 
  return;
}

#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_enable_vxlan_accel(struct xgbe_prv_data *pdata)
{
  #line 995 
  if (pdata->vxlan_features == 0ULL) 
                                     #line 996 
                                     return;
  #line 999 
  if (pdata->vxlan_force_disable != 0U) 
                                        #line 1000 
                                        return;
  #line 1002 
  xgbe_enable_vxlan_hw(pdata);
  #line 1004 
  xgbe_enable_vxlan_offloads(pdata);
  #line 1005 
  return;
}

#line 1007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_reset_vxlan_accel(struct xgbe_prv_data *pdata)
{
  #line 1009 
  xgbe_disable_vxlan_hw(pdata);
  #line 1011 
  if (pdata->vxlan_features != 0ULL) 
                                     #line 1012 
                                     xgbe_enable_vxlan_offloads(pdata);
  #line 1014 
  pdata->vxlan_force_disable = 0U;
  #line 1015 
  return;
}

#line 1017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_napi_enable(struct xgbe_prv_data *pdata, unsigned int add)
{
  #line 1019 
  struct xgbe_channel *channel;
  #line 1020 
  unsigned int i;
  #line 1022 
  if (pdata->per_channel_irq != 0U) {
    #line 1023 
    i = 0U;
    #line 1023 
    while (pdata->channel_count > i) {
      #line 1024 
      channel = pdata->channel[i];
      #line 1025 
      if (add != 0U) 
                     #line 1026 
                     netif_napi_add(pdata->netdev,& channel->napi,& xgbe_one_poll,64);
      #line 1029 
      napi_enable(& channel->napi);
      #line 1023 
      i ++;
    }
  }
  else {
    #line 1032 
    if (add != 0U) 
                   #line 1033 
                   netif_napi_add(pdata->netdev,& pdata->napi,& xgbe_all_poll,64);
    #line 1036 
    napi_enable(& pdata->napi);
  }
  #line 1038 
  return;
}

#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_napi_disable(struct xgbe_prv_data *pdata, unsigned int del)
{
  #line 1042 
  struct xgbe_channel *channel;
  #line 1043 
  unsigned int i;
  #line 1045 
  if (pdata->per_channel_irq != 0U) {
    #line 1046 
    i = 0U;
    #line 1046 
    while (pdata->channel_count > i) {
      #line 1047 
      channel = pdata->channel[i];
      #line 1048 
      napi_disable(& channel->napi);
      #line 1050 
      if (del != 0U) 
                     #line 1051 
                     netif_napi_del(& channel->napi);
      #line 1046 
      i ++;
    }
  }
  else {
    #line 1054 
    napi_disable(& pdata->napi);
    #line 1056 
    if (del != 0U) 
                   #line 1057 
                   netif_napi_del(& pdata->napi);
  }
  #line 1059 
  return;
}

#line 1061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_request_irqs(struct xgbe_prv_data *pdata)
{
  #line 1063 
  struct xgbe_channel *channel;
  #line 1065 
  unsigned int i;
  #line 1066 
  int ret;
  #line 1064 
  struct net_device *netdev = pdata->netdev;
  #line 1068 
  cif_tasklet_init_1(& pdata->tasklet_dev,& xgbe_isr_task,(unsigned long)pdata);
  #line 1069 
  cif_tasklet_init_1(& pdata->tasklet_ecc,& xgbe_ecc_isr_task,(unsigned long)pdata);
  #line 1072 
  ;
  #line 1072 
  ;
  #line 1072 
  ;
  #line 1072 
  ret = devm_request_irq(pdata->dev,(unsigned int)pdata->dev_irq,& xgbe_isr,0UL,netdev_name(netdev),(void *)pdata);
  #line 1074 
  if (ret != 0) {
    #line 1075 
    netdev_alert(netdev,(char *)"error requesting irq %d\n",pdata->dev_irq);
    #line 1077 
    return ret;
  }
  #line 1080 
  if ((pdata->vdata)->ecc_support != 0U && pdata->dev_irq != pdata->ecc_irq) {
    #line 1081 
    ret = devm_request_irq(pdata->dev,(unsigned int)pdata->ecc_irq,& xgbe_ecc_isr,0UL,(char *)(& pdata->ecc_name),(void *)pdata);
    #line 1083 
    if (ret != 0) {
      #line 1084 
      netdev_alert(netdev,(char *)"error requesting ecc irq %d\n",pdata->ecc_irq);
      #line 1086 
      goto err_dev_irq;
    }
  }
  #line 1090 
  if (pdata->per_channel_irq == 0U) 
                                    #line 1091 
                                    return 0;
  #line 1093 
  i = 0U;
  #line 1093 
  while (pdata->channel_count > i) {
    {
      #line 1094 
      channel = pdata->channel[i];
      #line 1095 
      ;
      #line 1095 
      ;
      #line 1095 
      snprintf((char *)(& channel->dma_irq_name),47UL,(char *)"%s-TxRx-%u",netdev_name(netdev),channel->queue_index);
      #line 1100 
      ret = devm_request_irq(pdata->dev,(unsigned int)channel->dma_irq,& xgbe_dma_isr,0UL,(char *)(& channel->dma_irq_name),(void *)channel);
      #line 1103 
      if (ret != 0) {
        #line 1104 
        netdev_alert(netdev,(char *)"error requesting irq %d\n",channel->dma_irq);
        #line 1106 
        goto err_dma_irq;
      }
      #line 1109 
      irq_set_affinity_hint((unsigned int)channel->dma_irq,& channel->affinity_mask);
    }
    #line 1093 
    i ++;
  }
  #line 1113 
  return 0;
  #line 1115 
  err_dma_irq: 
               #line 1115 
  ;
  #line 1117 
  i --;
  #line 1117 
  while (pdata->channel_count > i) {
    #line 1118 
    channel = pdata->channel[i];
    #line 1120 
    irq_set_affinity_hint((unsigned int)channel->dma_irq,(struct cpumask *)0);
    #line 1121 
    cif_devm_free_irq_1(pdata->dev,(unsigned int)channel->dma_irq,(void *)channel);
    #line 1117 
    i --;
  }
  #line 1124 
  if ((pdata->vdata)->ecc_support != 0U && pdata->dev_irq != pdata->ecc_irq) 
    #line 1125 
    cif_devm_free_irq_1(pdata->dev,(unsigned int)pdata->ecc_irq,(void *)pdata);
  #line 1127 
  err_dev_irq: 
               #line 1127 
  ;
  #line 1128 
  cif_devm_free_irq_1(pdata->dev,(unsigned int)pdata->dev_irq,(void *)pdata);
  #line 1130 
  return ret;
}

#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_free_irqs(struct xgbe_prv_data *pdata)
{
  #line 1135 
  struct xgbe_channel *channel;
  #line 1136 
  unsigned int i;
  #line 1138 
  cif_devm_free_irq_1(pdata->dev,(unsigned int)pdata->dev_irq,(void *)pdata);
  #line 1140 
  if ((pdata->vdata)->ecc_support != 0U && pdata->dev_irq != pdata->ecc_irq) 
    #line 1141 
    cif_devm_free_irq_1(pdata->dev,(unsigned int)pdata->ecc_irq,(void *)pdata);
  #line 1143 
  if (pdata->per_channel_irq == 0U) 
                                    #line 1144 
                                    return;
  #line 1146 
  i = 0U;
  #line 1146 
  while (pdata->channel_count > i) {
    #line 1147 
    channel = pdata->channel[i];
    #line 1149 
    irq_set_affinity_hint((unsigned int)channel->dma_irq,(struct cpumask *)0);
    #line 1150 
    cif_devm_free_irq_1(pdata->dev,(unsigned int)channel->dma_irq,(void *)channel);
    #line 1146 
    i ++;
  }
  #line 1152 
  return;
}

#line 1154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_init_tx_coalesce(struct xgbe_prv_data *pdata)
{
  #line 1156 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 1160 
  pdata->tx_usecs = 1000U;
  #line 1161 
  pdata->tx_frames = 25U;
  #line 1163 
  (*(hw_if->config_tx_coalesce))(pdata);
  #line 1168 
  return;
}

#line 1168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_init_rx_coalesce(struct xgbe_prv_data *pdata)
{
  #line 1170 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 1174 
  pdata->rx_riwt = (*(hw_if->usec_to_riwt))(pdata,30U);
  #line 1175 
  pdata->rx_usecs = 30U;
  #line 1176 
  pdata->rx_frames = 25U;
  #line 1178 
  (*(hw_if->config_rx_coalesce))(pdata);
  #line 1183 
  return;
}

#line 1183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_free_tx_data(struct xgbe_prv_data *pdata)
{
  #line 1186 
  struct xgbe_ring *ring;
  #line 1187 
  struct xgbe_ring_data *rdata;
  #line 1188 
  unsigned int i;
  #line 1188 
  unsigned int j;
  #line 1185 
  struct xgbe_desc_if *desc_if = & pdata->desc_if;
  #line 1192 
  i = 0U;
  #line 1192 
  while (pdata->channel_count > i) {
    #line 1193 
    ring = (pdata->channel[i])->tx_ring;
    #line 1194 
    if (ring == (struct xgbe_ring *)0) 
                                       #line 1195 
                                       break;
    #line 1197 
    j = 0U;
    #line 1197 
    while (ring->rdesc_count > j) {
      #line 1198 
      rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & j);
      #line 1199 
      (*(desc_if->unmap_rdata))(pdata,rdata);
      #line 1197 
      j ++;
    }
    #line 1192 
    i ++;
  }
  #line 1206 
  return;
}

#line 1206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_free_rx_data(struct xgbe_prv_data *pdata)
{
  #line 1209 
  struct xgbe_ring *ring;
  #line 1210 
  struct xgbe_ring_data *rdata;
  #line 1211 
  unsigned int i;
  #line 1211 
  unsigned int j;
  #line 1208 
  struct xgbe_desc_if *desc_if = & pdata->desc_if;
  #line 1215 
  i = 0U;
  #line 1215 
  while (pdata->channel_count > i) {
    #line 1216 
    ring = (pdata->channel[i])->rx_ring;
    #line 1217 
    if (ring == (struct xgbe_ring *)0) 
                                       #line 1218 
                                       break;
    #line 1220 
    j = 0U;
    #line 1220 
    while (ring->rdesc_count > j) {
      #line 1221 
      rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & j);
      #line 1222 
      (*(desc_if->unmap_rdata))(pdata,rdata);
      #line 1220 
      j ++;
    }
    #line 1215 
    i ++;
  }
  #line 1229 
  return;
}

#line 1229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_phy_reset_2(struct xgbe_prv_data *pdata)
{
  #line 1231 
  pdata->phy_link = -1;
  #line 1232 
  pdata->phy_speed = -1;
  #line 1234 
  return (*(pdata->phy_if.phy_reset))(pdata);
}

#line 1237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
int xgbe_powerdown(struct net_device *netdev, unsigned int caller)
{
  #line 1241 
  unsigned long flags;
  #line 1239 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 1240 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 1245 
  if (netif_running(netdev)) {
    #line 1245 
    if (caller == 2U && pdata->power_down != 0U) {
      #line 1245 
      _LOR: {
              #line 1247 
              netdev_alert(netdev,(char *)"Device is already powered down\n");
              #line 1249 
              return -22;
            }
    }
  }
  else 
       #line 1245 
       goto _LOR;
  #line 1252 
  cif___ldv_spin_lock_lock_of_xgbe_prv_data(& pdata->lock);
  #line 1254 
  if (caller == 1U) 
                    #line 1255 
                    netif_device_detach(netdev);
  #line 1257 
  netif_tx_stop_all_queues(netdev);
  #line 1259 
  xgbe_stop_timers(pdata);
  #line 1260 
  flush_workqueue(pdata->dev_workqueue);
  #line 1262 
  (*(hw_if->powerdown_tx))(pdata);
  #line 1263 
  (*(hw_if->powerdown_rx))(pdata);
  #line 1265 
  xgbe_napi_disable(pdata,0U);
  #line 1267 
  pdata->power_down = 1U;
  #line 1269 
  cif_spin_unlock_irqrestore_lock_of_xgbe_prv_data(& pdata->lock,flags);
  #line 1273 
  return 0;
}

#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
int xgbe_powerup(struct net_device *netdev, unsigned int caller)
{
  #line 1280 
  unsigned long flags;
  #line 1278 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 1279 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 1284 
  if (netif_running(netdev)) {
    #line 1284 
    if (caller == 2U && pdata->power_down == 0U) {
      #line 1284 
      _LOR: {
              #line 1286 
              netdev_alert(netdev,(char *)"Device is already powered up\n");
              #line 1288 
              return -22;
            }
    }
  }
  else 
       #line 1284 
       goto _LOR;
  #line 1291 
  cif___ldv_spin_lock_lock_of_xgbe_prv_data(& pdata->lock);
  #line 1293 
  pdata->power_down = 0U;
  #line 1295 
  xgbe_napi_enable(pdata,0U);
  #line 1297 
  (*(hw_if->powerup_tx))(pdata);
  #line 1298 
  (*(hw_if->powerup_rx))(pdata);
  #line 1300 
  if (caller == 1U) 
                    #line 1301 
                    netif_device_attach(netdev);
  #line 1303 
  netif_tx_start_all_queues(netdev);
  #line 1305 
  xgbe_start_timers(pdata);
  #line 1307 
  cif_spin_unlock_irqrestore_lock_of_xgbe_prv_data(& pdata->lock,flags);
  #line 1311 
  return 0;
}

#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_free_memory(struct xgbe_prv_data *pdata)
{
  #line 1316 
  struct xgbe_desc_if *desc_if = & pdata->desc_if;
  #line 1319 
  (*(desc_if->free_ring_resources))(pdata);
  #line 1322 
  xgbe_free_channels(pdata);
  #line 1323 
  return;
}

#line 1325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_alloc_memory(struct xgbe_prv_data *pdata)
{
  #line 1329 
  int ret;
  #line 1327 
  struct xgbe_desc_if *desc_if = & pdata->desc_if;
  #line 1328 
  struct net_device *netdev = pdata->netdev;
  #line 1331 
  if (pdata->new_tx_ring_count != 0U) {
    #line 1332 
    pdata->tx_ring_count = pdata->new_tx_ring_count;
    #line 1333 
    pdata->tx_q_count = pdata->tx_ring_count;
    #line 1334 
    pdata->new_tx_ring_count = 0U;
  }
  #line 1337 
  if (pdata->new_rx_ring_count != 0U) {
    #line 1338 
    pdata->rx_ring_count = pdata->new_rx_ring_count;
    #line 1339 
    pdata->new_rx_ring_count = 0U;
  }
  #line 1343 
  pdata->rx_buf_size = (unsigned int)xgbe_calc_rx_buf_size(netdev,netdev->mtu);
  #line 1346 
  ret = xgbe_alloc_channels(pdata);
  #line 1347 
  if (ret != 0) 
                #line 1348 
                return ret;
  #line 1351 
  ret = (*(desc_if->alloc_ring_resources))(pdata);
  #line 1352 
  if (ret != 0) 
                #line 1353 
                goto err_channels;
  #line 1356 
  xgbe_init_timers(pdata);
  #line 1358 
  return 0;
  #line 1360 
  err_channels: 
                #line 1360 
  ;
  #line 1361 
  xgbe_free_memory(pdata);
  #line 1363 
  return ret;
}

#line 1366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_start(struct xgbe_prv_data *pdata)
{
  #line 1371 
  unsigned int i;
  #line 1372 
  int ret;
  #line 1368 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 1369 
  struct xgbe_phy_if *phy_if = & pdata->phy_if;
  #line 1370 
  struct net_device *netdev = pdata->netdev;
  #line 1375 
  ret = netif_set_real_num_tx_queues(netdev,pdata->tx_ring_count);
  #line 1376 
  if (ret != 0) {
    #line 1377 
    netdev_err(netdev,(char *)"error setting real tx queue count\n");
    #line 1378 
    return ret;
  }
  #line 1381 
  ret = netif_set_real_num_rx_queues(netdev,pdata->rx_ring_count);
  #line 1382 
  if (ret != 0) {
    #line 1383 
    netdev_err(netdev,(char *)"error setting real rx queue count\n");
    #line 1384 
    return ret;
  }
  #line 1388 
  i = 0U;
  #line 1388 
  while (i <= 255U) {
    #line 1389 
    pdata->rss_table[i] &= 4294967280U;
    #line 1389 
    pdata->rss_table[i] |= i % pdata->rx_ring_count & 15U;
    #line 1388 
    i ++;
  }
  #line 1392 
  ret = (*(hw_if->init))(pdata);
  #line 1393 
  if (ret != 0) 
                #line 1394 
                return ret;
  #line 1396 
  xgbe_napi_enable(pdata,1U);
  #line 1398 
  ret = xgbe_request_irqs(pdata);
  #line 1399 
  if (ret != 0) 
                #line 1400 
                goto err_napi;
  #line 1402 
  ret = (*(phy_if->phy_start))(pdata);
  #line 1403 
  if (ret != 0) 
                #line 1404 
                goto err_irqs;
  #line 1406 
  (*(hw_if->enable_tx))(pdata);
  #line 1407 
  (*(hw_if->enable_rx))(pdata);
  #line 1409 
  udp_tunnel_get_rx_info(netdev);
  #line 1411 
  netif_tx_start_all_queues(netdev);
  #line 1413 
  xgbe_start_timers(pdata);
  #line 1414 
  cif_queue_work_0(pdata->dev_workqueue,& pdata->service_work);
  #line 1416 
  cif_clear_bit_0(3L,& pdata->dev_state);
  #line 1418 
  return 0;
  #line 1420 
  err_irqs: 
            #line 1420 
  ;
  #line 1421 
  xgbe_free_irqs(pdata);
  #line 1423 
  err_napi: 
            #line 1423 
  ;
  #line 1424 
  xgbe_napi_disable(pdata,1U);
  #line 1426 
  (*(hw_if->exit))(pdata);
  #line 1428 
  return ret;
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_stop(struct xgbe_prv_data *pdata)
{
  #line 1435 
  struct xgbe_channel *channel;
  #line 1437 
  struct netdev_queue *txq;
  #line 1438 
  unsigned int i;
  #line 1433 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 1434 
  struct xgbe_phy_if *phy_if = & pdata->phy_if;
  #line 1436 
  struct net_device *netdev = pdata->netdev;
  #line 1442 
  if ((int)test_bit(3L,& pdata->dev_state) != 0) 
                                                 #line 1443 
                                                 return;
  #line 1445 
  netif_tx_stop_all_queues(netdev);
  #line 1447 
  xgbe_stop_timers(pdata);
  #line 1448 
  flush_workqueue(pdata->dev_workqueue);
  #line 1450 
  xgbe_reset_vxlan_accel(pdata);
  #line 1452 
  (*(hw_if->disable_tx))(pdata);
  #line 1453 
  (*(hw_if->disable_rx))(pdata);
  #line 1455 
  (*(phy_if->phy_stop))(pdata);
  #line 1457 
  xgbe_free_irqs(pdata);
  #line 1459 
  xgbe_napi_disable(pdata,1U);
  #line 1461 
  (*(hw_if->exit))(pdata);
  #line 1463 
  i = 0U;
  #line 1463 
  while (pdata->channel_count > i) {
    #line 1464 
    channel = pdata->channel[i];
    #line 1465 
    if (channel->tx_ring == (struct xgbe_ring *)0) 
                                                   #line 1466 
                                                   goto __Cont;
    #line 1468 
    txq = netdev_get_tx_queue(netdev,channel->queue_index);
    #line 1469 
    netdev_tx_reset_queue(txq);
    #line 1463 
    __Cont: 
            #line 1463 
    i ++;
  }
  #line 1472 
  cif_set_bit_1(3L,& pdata->dev_state);
  #line 1477 
  return;
}

#line 1477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_stopdev(struct work_struct *work)
{
  #line 1479 
  void *__mptr;
  #line 1479 
  __mptr = (void *)work;
  #line 1479 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709545640U));
  #line 1483 
  rtnl_lock();
  #line 1485 
  xgbe_stop(pdata);
  #line 1487 
  xgbe_free_tx_data(pdata);
  #line 1488 
  xgbe_free_rx_data(pdata);
  #line 1490 
  rtnl_unlock();
  #line 1492 
  netdev_alert(pdata->netdev,(char *)"device stopped\n");
  #line 1493 
  return;
}

#line 1495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_full_restart_dev(struct xgbe_prv_data *pdata)
{
  #line 1498 
  if (! netif_running(pdata->netdev)) 
                                      #line 1499 
                                      return;
  #line 1501 
  xgbe_stop(pdata);
  #line 1503 
  xgbe_free_memory(pdata);
  #line 1504 
  xgbe_alloc_memory(pdata);
  #line 1506 
  xgbe_start(pdata);
  #line 1507 
  return;
}

#line 1509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_restart_dev(struct xgbe_prv_data *pdata)
{
  #line 1512 
  if (! netif_running(pdata->netdev)) 
                                      #line 1513 
                                      return;
  #line 1515 
  xgbe_stop(pdata);
  #line 1517 
  xgbe_free_tx_data(pdata);
  #line 1518 
  xgbe_free_rx_data(pdata);
  #line 1520 
  xgbe_start(pdata);
  #line 1521 
  return;
}

#line 1523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_restart(struct work_struct *work)
{
  #line 1525 
  void *__mptr;
  #line 1525 
  __mptr = (void *)work;
  #line 1525 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709545720U));
  #line 1529 
  rtnl_lock();
  #line 1531 
  xgbe_restart_dev(pdata);
  #line 1533 
  rtnl_unlock();
  #line 1534 
  return;
}

#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_tx_tstamp(struct work_struct *work)
{
  #line 1538 
  void *__mptr;
  #line 1541 
  struct skb_shared_hwtstamps hwtstamps;
  #line 1542 
  u64 nsec;
  #line 1543 
  unsigned long flags;
  #line 1538 
  __mptr = (void *)work;
  #line 1538 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709546136U));
  #line 1545 
  cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data(& pdata->tstamp_lock);
  #line 1546 
  if (pdata->tx_tstamp_skb == (struct sk_buff *)0) 
                                                   #line 1547 
                                                   goto unlock;
  #line 1549 
  if (pdata->tx_tstamp != 0ULL) {
    #line 1550 
    nsec = timecounter_cyc2time(& pdata->tstamp_tc,pdata->tx_tstamp);
    #line 1553 
    memset((void *)(& hwtstamps),0,8UL);
    #line 1554 
    hwtstamps.hwtstamp = ns_to_ktime(nsec);
    #line 1555 
    skb_tstamp_tx(pdata->tx_tstamp_skb,& hwtstamps);
  }
  #line 1558 
  dev_kfree_skb_any(pdata->tx_tstamp_skb);
  #line 1560 
  pdata->tx_tstamp_skb = (struct sk_buff *)0;
  #line 1562 
  unlock: 
          #line 1562 
  ;
  #line 1563 
  cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data(& pdata->tstamp_lock,flags);
  #line 1564 
  return;
}

#line 1566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_get_hwtstamp_settings(struct xgbe_prv_data *pdata, struct ifreq *ifreq)
{
  #line 1569 
  if (copy_to_user(ifreq->ifr_ifru.ifru_data,
                   (void *)(& pdata->tstamp_config),12UL) != 0UL) 
    #line 1571 
    return -14;
  #line 1573 
  return 0;
}

#line 1576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_set_hwtstamp_settings(struct xgbe_prv_data *pdata, struct ifreq *ifreq)
{
  #line 1579 
  struct hwtstamp_config config;
  #line 1580 
  unsigned int mac_tscr;
  #line 1582 
  if (copy_from_user((void *)(& config),ifreq->ifr_ifru.ifru_data,12UL) != 0UL) 
    #line 1583 
    return -14;
  #line 1585 
  if (config.flags != 0) 
                         #line 1586 
                         return -22;
  #line 1588 
  mac_tscr = 0U;
  #line 1590 
  switch (config.tx_type) {
    #line 1591 
    case 0: 
            #line 1591 
    ;
    #line 1592 
    break;
    #line 1594 
    case 1: 
            #line 1594 
    ;
    #line 1595 
    mac_tscr &= 4294967294U;
    #line 1595 
    mac_tscr |= 1U;
    #line 1596 
    break;
    #line 1598 
    default: 
             #line 1598 
    ;
    #line 1599 
    return -34;
  }
  #line 1602 
  switch (config.rx_filter) {
    #line 1603 
    case 0: 
            #line 1603 
    ;
    #line 1604 
    break;
    #line 1606 
    case 15: 
             #line 1606 
    ;
    #line 1607 
    case 1: 
            #line 1607 
    ;
    #line 1608 
    mac_tscr &= 4294967039U;
    #line 1608 
    mac_tscr |= 256U;
    #line 1609 
    mac_tscr &= 4294967294U;
    #line 1609 
    mac_tscr |= 1U;
    #line 1610 
    break;
    #line 1613 
    case 6: 
            #line 1613 
    ;
    #line 1614 
    mac_tscr &= 4294966271U;
    #line 1614 
    mac_tscr |= 1024U;
    #line 1616 
    case 3: 
            #line 1616 
    ;
    #line 1617 
    mac_tscr &= 4294959103U;
    #line 1617 
    mac_tscr |= 8192U;
    #line 1618 
    mac_tscr &= 4294963199U;
    #line 1618 
    mac_tscr |= 4096U;
    #line 1619 
    mac_tscr &= 4294770687U;
    #line 1619 
    mac_tscr |= 65536U;
    #line 1620 
    mac_tscr &= 4294967294U;
    #line 1620 
    mac_tscr |= 1U;
    #line 1621 
    break;
    #line 1624 
    case 7: 
            #line 1624 
    ;
    #line 1625 
    mac_tscr &= 4294966271U;
    #line 1625 
    mac_tscr |= 1024U;
    #line 1627 
    case 4: 
            #line 1627 
    ;
    #line 1628 
    mac_tscr &= 4294959103U;
    #line 1628 
    mac_tscr |= 8192U;
    #line 1629 
    mac_tscr &= 4294963199U;
    #line 1629 
    mac_tscr |= 4096U;
    #line 1630 
    mac_tscr &= 4294950911U;
    #line 1630 
    mac_tscr |= 16384U;
    #line 1631 
    mac_tscr &= 4294967294U;
    #line 1631 
    mac_tscr |= 1U;
    #line 1632 
    break;
    #line 1635 
    case 8: 
            #line 1635 
    ;
    #line 1636 
    mac_tscr &= 4294966271U;
    #line 1636 
    mac_tscr |= 1024U;
    #line 1638 
    case 5: 
            #line 1638 
    ;
    #line 1639 
    mac_tscr &= 4294959103U;
    #line 1639 
    mac_tscr |= 8192U;
    #line 1640 
    mac_tscr &= 4294963199U;
    #line 1640 
    mac_tscr |= 4096U;
    #line 1641 
    mac_tscr &= 4294950911U;
    #line 1641 
    mac_tscr |= 16384U;
    #line 1642 
    mac_tscr &= 4294934527U;
    #line 1642 
    mac_tscr |= 32768U;
    #line 1643 
    mac_tscr &= 4294967294U;
    #line 1643 
    mac_tscr |= 1U;
    #line 1644 
    break;
    #line 1647 
    case 9: 
            #line 1647 
    ;
    #line 1648 
    mac_tscr &= 4026531839U;
    #line 1648 
    mac_tscr |= 268435456U;
    #line 1649 
    mac_tscr &= 4294770687U;
    #line 1649 
    mac_tscr |= 65536U;
    #line 1650 
    mac_tscr &= 4294967294U;
    #line 1650 
    mac_tscr |= 1U;
    #line 1651 
    break;
    #line 1654 
    case 10: 
             #line 1654 
    ;
    #line 1655 
    mac_tscr &= 4026531839U;
    #line 1655 
    mac_tscr |= 268435456U;
    #line 1656 
    mac_tscr &= 4294950911U;
    #line 1656 
    mac_tscr |= 16384U;
    #line 1657 
    mac_tscr &= 4294967294U;
    #line 1657 
    mac_tscr |= 1U;
    #line 1658 
    break;
    #line 1661 
    case 11: 
             #line 1661 
    ;
    #line 1662 
    mac_tscr &= 4026531839U;
    #line 1662 
    mac_tscr |= 268435456U;
    #line 1663 
    mac_tscr &= 4294934527U;
    #line 1663 
    mac_tscr |= 32768U;
    #line 1664 
    mac_tscr &= 4294950911U;
    #line 1664 
    mac_tscr |= 16384U;
    #line 1665 
    mac_tscr &= 4294967294U;
    #line 1665 
    mac_tscr |= 1U;
    #line 1666 
    break;
    #line 1669 
    case 12: 
             #line 1669 
    ;
    #line 1670 
    mac_tscr &= 4294966271U;
    #line 1670 
    mac_tscr |= 1024U;
    #line 1671 
    mac_tscr &= 4294965247U;
    #line 1671 
    mac_tscr |= 2048U;
    #line 1672 
    mac_tscr &= 4294959103U;
    #line 1672 
    mac_tscr |= 8192U;
    #line 1673 
    mac_tscr &= 4294963199U;
    #line 1673 
    mac_tscr |= 4096U;
    #line 1674 
    mac_tscr &= 4294770687U;
    #line 1674 
    mac_tscr |= 65536U;
    #line 1675 
    mac_tscr &= 4294967294U;
    #line 1675 
    mac_tscr |= 1U;
    #line 1676 
    break;
    #line 1679 
    case 13: 
             #line 1679 
    ;
    #line 1680 
    mac_tscr &= 4294966271U;
    #line 1680 
    mac_tscr |= 1024U;
    #line 1681 
    mac_tscr &= 4294965247U;
    #line 1681 
    mac_tscr |= 2048U;
    #line 1682 
    mac_tscr &= 4294959103U;
    #line 1682 
    mac_tscr |= 8192U;
    #line 1683 
    mac_tscr &= 4294963199U;
    #line 1683 
    mac_tscr |= 4096U;
    #line 1684 
    mac_tscr &= 4294950911U;
    #line 1684 
    mac_tscr |= 16384U;
    #line 1685 
    mac_tscr &= 4294967294U;
    #line 1685 
    mac_tscr |= 1U;
    #line 1686 
    break;
    #line 1689 
    case 14: 
             #line 1689 
    ;
    #line 1690 
    mac_tscr &= 4294966271U;
    #line 1690 
    mac_tscr |= 1024U;
    #line 1691 
    mac_tscr &= 4294965247U;
    #line 1691 
    mac_tscr |= 2048U;
    #line 1692 
    mac_tscr &= 4294959103U;
    #line 1692 
    mac_tscr |= 8192U;
    #line 1693 
    mac_tscr &= 4294963199U;
    #line 1693 
    mac_tscr |= 4096U;
    #line 1694 
    mac_tscr &= 4294934527U;
    #line 1694 
    mac_tscr |= 32768U;
    #line 1695 
    mac_tscr &= 4294950911U;
    #line 1695 
    mac_tscr |= 16384U;
    #line 1696 
    mac_tscr &= 4294967294U;
    #line 1696 
    mac_tscr |= 1U;
    #line 1697 
    break;
    #line 1699 
    default: 
             #line 1699 
    ;
    #line 1700 
    return -34;
  }
  #line 1703 
  (*(pdata->hw_if.config_tstamp))(pdata,mac_tscr);
  #line 1705 
  memcpy((void *)(& pdata->tstamp_config),(void *)(& config),12UL);
  #line 1707 
  return 0;
}

#line 1710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_prep_tx_tstamp(struct xgbe_prv_data *pdata, struct sk_buff *skb, struct xgbe_packet_data *packet)
{
  #line 1714 
  unsigned long flags;
  #line 1716 
  if ((packet->attributes & 8U) != 0U) {
    #line 1717 
    cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data(& pdata->tstamp_lock);
    #line 1718 
    if (pdata->tx_tstamp_skb != (struct sk_buff *)0) {
      #line 1720 
      packet->attributes &= 4294967287U;
      #line 1720 
      packet->attributes = packet->attributes;
    }
    else {
      #line 1723 
      pdata->tx_tstamp_skb = skb_get(skb);
      #line 1724 
      ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
    }
    #line 1726 
    cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data(& pdata->tstamp_lock,flags);
  }
  #line 1729 
  skb_tx_timestamp(skb);
  #line 1730 
  return;
}

#line 1732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_prep_vlan(struct sk_buff *skb, struct xgbe_packet_data *packet)
{
  #line 1734 
  if ((unsigned int)skb->vlan_present != 0U) 
                                             #line 1735 
                                             packet->vlan_ctag = skb->vlan_tci;
  #line 1736 
  return;
}

#line 1738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_prep_tso(struct sk_buff *skb, struct xgbe_packet_data *packet)
{
  #line 1740 
  int ret;
  #line 1742 
  if ((packet->attributes & 2U) == 0U) 
                                       #line 1744 
                                       return 0;
  #line 1746 
  ret = skb_cow_head(skb,0U);
  #line 1747 
  if (ret != 0) 
                #line 1748 
                return ret;
  #line 1750 
  if ((packet->attributes & 16U) != 0U) {
    #line 1751 
    packet->header_len = (unsigned int)skb_inner_transport_offset(skb) + inner_tcp_hdrlen(skb);
    #line 1753 
    packet->tcp_header_len = inner_tcp_hdrlen(skb);
  }
  else {
    #line 1755 
    packet->header_len = (unsigned int)skb_transport_offset(skb) + tcp_hdrlen(skb);
    #line 1757 
    packet->tcp_header_len = tcp_hdrlen(skb);
  }
  #line 1759 
  packet->tcp_payload_len = skb->len - packet->header_len;
  #line 1760 
  packet->mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 1770 
  packet->tx_packets = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs;
  #line 1771 
  packet->tx_bytes += (packet->tx_packets + 4294967295U) * packet->header_len;
  #line 1773 
  return 0;
}

#line 1776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static bool xgbe_is_vxlan(struct xgbe_prv_data *pdata, struct sk_buff *skb)
{
  #line 1805 
  void *__mptr;
  #line 1778 
  struct xgbe_vxlan_data *vdata;
  #line 1780 
  if (pdata->vxlan_force_disable != 0U) 
                                        #line 1781 
                                        return (_Bool)0;
  #line 1783 
  if ((unsigned int)skb->encapsulation == 0U) 
                                              #line 1784 
                                              return (_Bool)0;
  #line 1786 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 1787 
                                          return (_Bool)0;
  #line 1789 
  switch ((int)skb->protocol) {
    #line 1790 
    case 8: 
            #line 1790 
    ;
    #line 1791 
    ;
    #line 1791 
    if ((unsigned int)ip_hdr(skb)->protocol != 17U) 
                                                    #line 1792 
                                                    return (_Bool)0;
    #line 1793 
    break;
    #line 1795 
    case 56710: 
                #line 1795 
    ;
    #line 1796 
    ;
    #line 1796 
    if ((unsigned int)ipv6_hdr(skb)->nexthdr != 17U) 
                                                     #line 1797 
                                                     return (_Bool)0;
    #line 1798 
    break;
    #line 1800 
    default: 
             #line 1800 
    ;
    #line 1801 
    return (_Bool)0;
  }
  #line 1805 
  __mptr = (void *)pdata->vxlan_ports.next;
  #line 1805 
  vdata = ((struct xgbe_vxlan_data *)__mptr);
  #line 1805 
  while (& vdata->list != & pdata->vxlan_ports) {
    #line 1805 
    void *__mptr_0;
    #line 1806 
    if ((unsigned int)skb->protocol == 8U && (unsigned int)vdata->sa_family == 2U) {
      #line 1808 
      ;
      #line 1808 
      if ((int)vdata->port == (int)udp_hdr(skb)->dest) 
                                                       #line 1809 
                                                       return (_Bool)1; else 
                                                                    #line 1806 
                                                                    goto _LAND;
    }
    else 
      #line 1806 
      _LAND: 
             #line 1810 
             if ((unsigned int)skb->protocol == 56710U && (unsigned int)vdata->sa_family == 10U) {
               #line 1812 
               ;
               #line 1812 
               if ((int)vdata->port == (int)udp_hdr(skb)->dest) 
                                                                #line 1813 
                                                                return (_Bool)1;
             }
    #line 1805 
    __mptr_0 = (void *)vdata->list.next;
    #line 1805 
    vdata = ((struct xgbe_vxlan_data *)__mptr_0);
  }
  #line 1816 
  return (_Bool)0;
}

#line 1819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_is_tso(struct sk_buff *skb)
{
  #line 1821 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 1822 
                                          return 0;
  #line 1824 
  if (! skb_is_gso(skb)) 
                         #line 1825 
                         return 0;
  #line 1829 
  return 1;
}

#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_packet_info(struct xgbe_prv_data *pdata, struct xgbe_ring *ring, struct sk_buff *skb, struct xgbe_packet_data *packet)
{
  #line 1836 
  skb_frag_t *frag;
  #line 1837 
  unsigned int context_desc;
  #line 1838 
  unsigned int len;
  #line 1839 
  unsigned int i;
  #line 1841 
  packet->skb = skb;
  #line 1843 
  context_desc = 0U;
  #line 1844 
  packet->rdesc_count = 0U;
  #line 1846 
  packet->tx_packets = 1U;
  #line 1847 
  packet->tx_bytes = skb->len;
  #line 1849 
  if (xgbe_is_tso(skb) != 0) {
    #line 1851 
    ;
    #line 1851 
    if ((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != (int)ring->__anonCompField_xgbe_ring_163.tx.cur_mss) {
      #line 1852 
      context_desc = 1U;
      #line 1853 
      (packet->rdesc_count) ++;
    }
    #line 1857 
    (packet->rdesc_count) ++;
    #line 1859 
    packet->attributes &= 4294967293U;
    #line 1859 
    packet->attributes |= 2U;
    #line 1861 
    packet->attributes &= 4294967294U;
    #line 1861 
    packet->attributes |= 1U;
  }
  else 
    #line 1863 
    if ((unsigned int)skb->ip_summed == 3U) {
      #line 1864 
      packet->attributes &= 4294967294U;
      #line 1864 
      packet->attributes |= 1U;
    }
  #line 1867 
  if ((int)xgbe_is_vxlan(pdata,skb) != 0) {
    #line 1868 
    packet->attributes &= 4294967279U;
    #line 1868 
    packet->attributes |= 16U;
  }
  #line 1871 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1873 
    if ((int)skb->vlan_tci != (int)ring->__anonCompField_xgbe_ring_163.tx.cur_vlan_ctag) 
      #line 1875 
      if (context_desc == 0U) {
        #line 1876 
        context_desc = 1U;
        #line 1877 
        (packet->rdesc_count) ++;
      }
    #line 1880 
    packet->attributes &= 4294967291U;
    #line 1880 
    packet->attributes |= 4U;
  }
  #line 1884 
  ;
  #line 1884 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) 
    #line 1884 
    if (pdata->tstamp_config.tx_type == 1) {
      #line 1886 
      packet->attributes &= 4294967287U;
      #line 1886 
      packet->attributes |= 8U;
    }
  #line 1889 
  len = skb_headlen(skb);
  #line 1889 
  while (len != 0U) {
    #line 1891 
    unsigned int __UNIQUE_ID___x600;
    #line 1891 
    unsigned int tmp_3;
    #line 1890 
    (packet->rdesc_count) ++;
    {
      #line 1891 
      __UNIQUE_ID___x600 = len;
      #line 1891 
      unsigned int __UNIQUE_ID___y601 = 16320U;
      #line 1891 
      if (__UNIQUE_ID___x600 < __UNIQUE_ID___y601) 
                                                   #line 1891 
                                                   tmp_3 = __UNIQUE_ID___x600; else 
                                                                    #line 1891 
                                                                    tmp_3 = __UNIQUE_ID___y601;
      }
    #line 1891 
    len -= tmp_3;
  }
  #line 1894 
  i = 0U;
  #line 1894 
  while (1) {
    #line 1894 
    ;
    #line 1894 
    if (! ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 1894 
      break;
    {
      #line 1895 
      frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 1896 
      len = skb_frag_size(frag);
      #line 1896 
      while (len != 0U) {
        #line 1898 
        unsigned int __UNIQUE_ID___x602;
        #line 1898 
        unsigned int tmp_6;
        #line 1897 
        (packet->rdesc_count) ++;
        {
          #line 1898 
          __UNIQUE_ID___x602 = len;
          #line 1898 
          unsigned int __UNIQUE_ID___y603 = 16320U;
          #line 1898 
          if (__UNIQUE_ID___x602 < __UNIQUE_ID___y603) 
                                                       #line 1898 
                                                       tmp_6 = __UNIQUE_ID___x602; else 
                                                                    #line 1898 
                                                                    tmp_6 = __UNIQUE_ID___y603;
          }
        #line 1898 
        len -= tmp_6;
      }
    }
    #line 1894 
    i ++;
  }
  #line 1902 
  return;
}

#line 1903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_open(struct net_device *netdev)
{
  #line 1906 
  int ret;
  #line 1905 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 1909 
  ;
  #line 1909 
  snprintf((char *)(& pdata->an_name),47UL,(char *)"%s-pcs",netdev_name(netdev));
  #line 1912 
  ;
  #line 1912 
  snprintf((char *)(& pdata->ecc_name),47UL,(char *)"%s-ecc",netdev_name(netdev));
  #line 1915 
  ;
  #line 1915 
  snprintf((char *)(& pdata->i2c_name),47UL,(char *)"%s-i2c",netdev_name(netdev));
  #line 1919 
  pdata->dev_workqueue = alloc_workqueue((char *)"%s",917514U,1,netdev_name(netdev));
  #line 1921 
  if (pdata->dev_workqueue == (struct workqueue_struct *)0) {
    #line 1922 
    netdev_err(netdev,(char *)"device workqueue creation failed\n");
    #line 1923 
    return -12;
  }
  #line 1926 
  pdata->an_workqueue = alloc_workqueue((char *)"%s",917514U,1,(char *)(& pdata->an_name));
  #line 1928 
  if (pdata->an_workqueue == (struct workqueue_struct *)0) {
    #line 1929 
    netdev_err(netdev,(char *)"phy workqueue creation failed\n");
    #line 1930 
    ret = -12;
    #line 1931 
    goto err_dev_wq;
  }
  #line 1935 
  ret = xgbe_phy_reset_2(pdata);
  #line 1936 
  if (ret != 0) 
                #line 1937 
                goto err_an_wq;
  #line 1940 
  ret = clk_prepare_enable(pdata->sysclk);
  #line 1941 
  if (ret != 0) {
    #line 1942 
    netdev_alert(netdev,(char *)"dma clk_prepare_enable failed\n");
    #line 1943 
    goto err_an_wq;
  }
  #line 1946 
  ret = clk_prepare_enable(pdata->ptpclk);
  #line 1947 
  if (ret != 0) {
    #line 1948 
    netdev_alert(netdev,(char *)"ptp clk_prepare_enable failed\n");
    #line 1949 
    goto err_sysclk;
  }
  {
    #line 1952 
    struct lock_class_key __key;
    #line 1952 
    __init_work(& pdata->service_work,0);
    #line 1952 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 1952 
    pdata->service_work.data = __constr_expr_44;
    #line 1952 
    lockdep_init_map(& pdata->service_work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1952 
    INIT_LIST_HEAD_1(& pdata->service_work.entry);
    #line 1952 
    pdata->service_work.func = & xgbe_service;
  }
  {
    #line 1953 
    struct lock_class_key __key_0;
    #line 1953 
    __init_work(& pdata->restart_work,0);
    #line 1953 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 1953 
    pdata->restart_work.data = __constr_expr_45;
    #line 1953 
    lockdep_init_map(& pdata->restart_work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 1953 
    INIT_LIST_HEAD_1(& pdata->restart_work.entry);
    #line 1953 
    pdata->restart_work.func = & xgbe_restart;
  }
  {
    #line 1954 
    struct lock_class_key __key_1;
    #line 1954 
    __init_work(& pdata->stopdev_work,0);
    #line 1954 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 1954 
    pdata->stopdev_work.data = __constr_expr_46;
    #line 1954 
    lockdep_init_map(& pdata->stopdev_work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 1954 
    INIT_LIST_HEAD_1(& pdata->stopdev_work.entry);
    #line 1954 
    pdata->stopdev_work.func = & xgbe_stopdev;
  }
  {
    #line 1955 
    struct lock_class_key __key_2;
    #line 1955 
    __init_work(& pdata->tx_tstamp_work,0);
    #line 1955 
    atomic_long_t __constr_expr_47 = {.counter = 137438953408LL};
    #line 1955 
    pdata->tx_tstamp_work.data = __constr_expr_47;
    #line 1955 
    lockdep_init_map(& pdata->tx_tstamp_work.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 1955 
    INIT_LIST_HEAD_1(& pdata->tx_tstamp_work.entry);
    #line 1955 
    pdata->tx_tstamp_work.func = & xgbe_tx_tstamp;
  }
  #line 1957 
  ret = xgbe_alloc_memory(pdata);
  #line 1958 
  if (ret != 0) 
                #line 1959 
                goto err_ptpclk;
  #line 1961 
  ret = xgbe_start(pdata);
  #line 1962 
  if (ret != 0) 
                #line 1963 
                goto err_mem;
  #line 1965 
  cif_clear_bit_0(0L,& pdata->dev_state);
  #line 1967 
  return 0;
  #line 1969 
  err_mem: 
           #line 1969 
  ;
  #line 1970 
  xgbe_free_memory(pdata);
  #line 1972 
  err_ptpclk: 
              #line 1972 
  ;
  #line 1973 
  clk_disable_unprepare(pdata->ptpclk);
  #line 1975 
  err_sysclk: 
              #line 1975 
  ;
  #line 1976 
  clk_disable_unprepare(pdata->sysclk);
  #line 1978 
  err_an_wq: 
             #line 1978 
  ;
  #line 1979 
  destroy_workqueue(pdata->an_workqueue);
  #line 1981 
  err_dev_wq: 
              #line 1981 
  ;
  #line 1982 
  destroy_workqueue(pdata->dev_workqueue);
  #line 1984 
  return ret;
}

#line 1987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_close(struct net_device *netdev)
{
  #line 1989 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 1992 
  xgbe_stop(pdata);
  #line 1994 
  xgbe_free_memory(pdata);
  #line 1997 
  clk_disable_unprepare(pdata->ptpclk);
  #line 1998 
  clk_disable_unprepare(pdata->sysclk);
  #line 2000 
  flush_workqueue(pdata->an_workqueue);
  #line 2001 
  destroy_workqueue(pdata->an_workqueue);
  #line 2003 
  flush_workqueue(pdata->dev_workqueue);
  #line 2004 
  destroy_workqueue(pdata->dev_workqueue);
  #line 2006 
  cif_set_bit_1(0L,& pdata->dev_state);
  #line 2008 
  return 0;
}

#line 2011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static netdev_tx_t xgbe_xmit(struct sk_buff *skb, struct net_device *netdev)
{
  #line 2016 
  struct xgbe_channel *channel;
  #line 2017 
  struct xgbe_ring *ring;
  #line 2018 
  struct xgbe_packet_data *packet;
  #line 2019 
  struct netdev_queue *txq;
  #line 2020 
  netdev_tx_t ret;
  #line 2013 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2014 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 2015 
  struct xgbe_desc_if *desc_if = & pdata->desc_if;
  #line 2024 
  channel = pdata->channel[(int)skb->queue_mapping];
  #line 2025 
  txq = netdev_get_tx_queue(netdev,channel->queue_index);
  #line 2026 
  ring = channel->tx_ring;
  #line 2027 
  packet = & ring->packet_data;
  #line 2029 
  ret = NETDEV_TX_OK;
  #line 2031 
  if (skb->len == 0U) {
    #line 2032 
    if ((pdata->msg_enable & 128U) != 0U) 
                                          #line 2032 
                                          netdev_err(netdev,(char *)"empty skb received from stack\n");
    #line 2034 
    dev_kfree_skb_any(skb);
    #line 2035 
    goto tx_netdev_return;
  }
  #line 2039 
  memset((void *)packet,0,64UL);
  #line 2040 
  xgbe_packet_info(pdata,ring,skb,packet);
  #line 2043 
  ret = (enum netdev_tx)xgbe_maybe_stop_tx_queue(channel,ring,packet->rdesc_count);
  #line 2044 
  if (ret != (unsigned int)NETDEV_TX_OK) 
                                         #line 2045 
                                         goto tx_netdev_return;
  #line 2047 
  ret = (enum netdev_tx)xgbe_prep_tso(skb,packet);
  #line 2048 
  if (ret != (unsigned int)NETDEV_TX_OK) {
    #line 2049 
    if ((pdata->msg_enable & 128U) != 0U) 
                                          #line 2049 
                                          netdev_err(netdev,(char *)"error processing TSO packet\n");
    #line 2051 
    dev_kfree_skb_any(skb);
    #line 2052 
    goto tx_netdev_return;
  }
  #line 2054 
  xgbe_prep_vlan(skb,packet);
  #line 2056 
  if ((*(desc_if->map_tx_skb))(channel,skb) == 0) {
    #line 2057 
    dev_kfree_skb_any(skb);
    #line 2058 
    goto tx_netdev_return;
  }
  #line 2061 
  xgbe_prep_tx_tstamp(pdata,skb,packet);
  #line 2064 
  netdev_tx_sent_queue(txq,packet->tx_bytes);
  #line 2067 
  (*(hw_if->dev_xmit))(channel);
  #line 2069 
  if ((pdata->msg_enable & 4096U) != 0U) 
                                         #line 2070 
                                         xgbe_print_pkt(netdev,skb,(_Bool)1);
  #line 2073 
  xgbe_maybe_stop_tx_queue(channel,ring,24U);
  #line 2075 
  ret = NETDEV_TX_OK;
  #line 2077 
  tx_netdev_return: 
                    #line 2077 
  ;
  #line 2078 
  return ret;
}

#line 2081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_set_rx_mode(struct net_device *netdev)
{
  #line 2083 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2084 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 2088 
  (*(hw_if->config_rx_mode))(pdata);
  #line 2093 
  return;
}

#line 2093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_set_mac_address(struct net_device *netdev, void *addr)
{
  #line 2095 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2096 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 2097 
  struct sockaddr *saddr = (struct sockaddr *)addr;
  #line 2101 
  if (! is_valid_ether_addr((u8 *)(& saddr->sa_data))) 
                                                       #line 2102 
                                                       return -99;
  #line 2104 
  memcpy((void *)netdev->dev_addr,(void *)(& saddr->sa_data),(unsigned long)netdev->addr_len);
  #line 2106 
  (*(hw_if->set_mac_address))(pdata,netdev->dev_addr);
  #line 2110 
  return 0;
}

#line 2113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_ioctl(struct net_device *netdev, struct ifreq *ifreq, int cmd)
{
  #line 2116 
  int ret;
  #line 2115 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2118 
  switch (cmd) {
    #line 2119 
    case 35249: 
                #line 2119 
    ;
    #line 2120 
    ret = xgbe_get_hwtstamp_settings(pdata,ifreq);
    #line 2121 
    break;
    #line 2123 
    case 35248: 
                #line 2123 
    ;
    #line 2124 
    ret = xgbe_set_hwtstamp_settings(pdata,ifreq);
    #line 2125 
    break;
    #line 2127 
    default: 
             #line 2127 
    ;
    #line 2128 
    ret = -95;
  }
  #line 2131 
  return ret;
}

#line 2134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_change_mtu(struct net_device *netdev, int mtu)
{
  #line 2137 
  int ret;
  #line 2136 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2141 
  ret = xgbe_calc_rx_buf_size(netdev,(unsigned int)mtu);
  #line 2142 
  if (ret < 0) 
               #line 2143 
               return ret;
  #line 2145 
  pdata->rx_buf_size = (unsigned int)ret;
  #line 2146 
  netdev->mtu = (unsigned int)mtu;
  #line 2148 
  xgbe_restart_dev(pdata);
  #line 2152 
  return 0;
}

#line 2155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_tx_timeout(struct net_device *netdev)
{
  #line 2157 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2159 
  netdev_warn(netdev,(char *)"tx timeout, device restarting\n");
  #line 2160 
  cif_schedule_work(& pdata->restart_work);
  #line 2161 
  return;
}

#line 2163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *s)
{
  #line 2166 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2167 
  struct xgbe_mmc_stats *pstats = & pdata->mmc_stats;
  #line 2171 
  (*(pdata->hw_if.read_mmc_stats))(pdata);
  #line 2173 
  s->rx_packets = pstats->rxframecount_gb;
  #line 2174 
  s->rx_bytes = pstats->rxoctetcount_gb;
  #line 2175 
  s->rx_errors = ((pstats->rxframecount_gb - pstats->rxbroadcastframes_g) - pstats->rxmulticastframes_g) - pstats->rxunicastframes_g;
  #line 2179 
  s->multicast = pstats->rxmulticastframes_g;
  #line 2180 
  s->rx_length_errors = pstats->rxlengtherror;
  #line 2181 
  s->rx_crc_errors = pstats->rxcrcerror;
  #line 2182 
  s->rx_fifo_errors = pstats->rxfifooverflow;
  #line 2184 
  s->tx_packets = pstats->txframecount_gb;
  #line 2185 
  s->tx_bytes = pstats->txoctetcount_gb;
  #line 2186 
  s->tx_errors = pstats->txframecount_gb - pstats->txframecount_g;
  #line 2187 
  s->tx_dropped = (unsigned long long)netdev->stats.tx_dropped;
  #line 2192 
  return;
}

#line 2192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 2195 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2196 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 2200 
  cif_set_bit_1((long)vid,(unsigned long *)(& pdata->active_vlans));
  #line 2201 
  (*(hw_if->update_vlan_hash_table))(pdata);
  #line 2205 
  return 0;
}

#line 2208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 2211 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2212 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 2216 
  cif_clear_bit_0((long)vid,(unsigned long *)(& pdata->active_vlans));
  #line 2217 
  (*(hw_if->update_vlan_hash_table))(pdata);
  #line 2221 
  return 0;
}

#line 2225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_poll_controller(struct net_device *netdev)
{
  #line 2228 
  struct xgbe_channel *channel;
  #line 2229 
  unsigned int i;
  #line 2227 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2233 
  if (pdata->per_channel_irq != 0U) {
    #line 2234 
    i = 0U;
    #line 2234 
    while (pdata->channel_count > i) {
      #line 2235 
      channel = pdata->channel[i];
      #line 2236 
      xgbe_dma_isr(channel->dma_irq,(void *)channel);
      #line 2234 
      i ++;
    }
  }
  else {
    #line 2239 
    disable_irq((unsigned int)pdata->dev_irq);
    #line 2240 
    xgbe_isr(pdata->dev_irq,(void *)pdata);
    #line 2241 
    enable_irq((unsigned int)pdata->dev_irq);
  }
  #line 2247 
  return;
}

#line 2248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_setup_tc(struct net_device *netdev, enum tc_setup_type type, void *type_data)
{
  #line 2253 
  u8 tc;
  #line 2251 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2252 
  struct tc_mqprio_qopt *mqprio = (struct tc_mqprio_qopt *)type_data;
  #line 2255 
  if (type != (unsigned int)TC_SETUP_QDISC_MQPRIO) 
                                                   #line 2256 
                                                   return -95;
  #line 2258 
  mqprio->hw = (unsigned char)1U;
  #line 2259 
  tc = mqprio->num_tc;
  #line 2261 
  if ((unsigned int)tc > pdata->hw_feat.tc_cnt) 
                                                #line 2262 
                                                return -22;
  #line 2264 
  pdata->num_tcs = tc;
  #line 2265 
  (*(pdata->hw_if.config_tc))(pdata);
  #line 2267 
  return 0;
}

#line 2270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static netdev_features_t xgbe_fix_features(struct net_device *netdev, netdev_features_t features)
{
  #line 2274 
  netdev_features_t vxlan_base;
  #line 2274 
  netdev_features_t vxlan_mask;
  #line 2273 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2276 
  vxlan_base = 2251799880794112ULL;
  #line 2277 
  vxlan_mask = vxlan_base | 134217728ULL;
  #line 2279 
  pdata->vxlan_features = features & vxlan_mask;
  #line 2282 
  if (pdata->vxlan_features == 0ULL) 
                                     #line 2283 
                                     return features;
  #line 2289 
  if (pdata->hw_feat.vxn == 0U) 
                                #line 2290 
                                return ~ vxlan_mask & features;
  #line 2293 
  if ((features & 134217728ULL) != 0ULL && (features & 67108864ULL) == 0ULL) {
    #line 2295 
    netdev_notice(netdev,(char *)"forcing tx udp tunnel support\n");
    #line 2297 
    features |= 67108864ULL;
  }
  #line 2301 
  if ((features & vxlan_base) != vxlan_base) {
    #line 2302 
    netdev_notice(netdev,(char *)"forcing both tx and rx udp tunnel support\n");
    #line 2304 
    features |= vxlan_base;
  }
  #line 2307 
  if ((features & 18ULL) != 0ULL) {
    #line 2308 
    if ((features & 134217728ULL) == 0ULL) {
      #line 2309 
      netdev_notice(netdev,(char *)"forcing tx udp tunnel checksumming on\n");
      #line 2311 
      features |= 134217728ULL;
    }
  }
  else 
    #line 2314 
    if ((features & 134217728ULL) != 0ULL) {
      #line 2315 
      netdev_notice(netdev,(char *)"forcing tx udp tunnel checksumming off\n");
      #line 2317 
      features &= 18446744073575333887ULL;
    }
  #line 2321 
  pdata->vxlan_features = features & vxlan_mask;
  #line 2324 
  if (pdata->vxlan_force_disable != 0U) {
    #line 2325 
    netdev_notice(netdev,(char *)"VXLAN acceleration disabled, turning off udp tunnel features\n");
    #line 2327 
    features = ~ vxlan_mask & features;
  }
  #line 2330 
  return features;
}

#line 2333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 2338 
  netdev_features_t rxhash;
  #line 2338 
  netdev_features_t rxcsum;
  #line 2338 
  netdev_features_t rxvlan;
  #line 2338 
  netdev_features_t rxvlan_filter;
  #line 2339 
  netdev_features_t udp_tunnel;
  #line 2336 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2337 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 2340 
  int ret = 0;
  #line 2342 
  rxhash = pdata->netdev_features & 274877906944ULL;
  #line 2343 
  rxcsum = pdata->netdev_features & 549755813888ULL;
  #line 2344 
  rxvlan = pdata->netdev_features & 256ULL;
  #line 2345 
  rxvlan_filter = pdata->netdev_features & 512ULL;
  #line 2346 
  udp_tunnel = pdata->netdev_features & 67108864ULL;
  #line 2348 
  if ((features & 274877906944ULL) != 0ULL && rxhash == 0ULL) 
                                                              #line 2349 
                                                              ret = (*(hw_if->enable_rss))(pdata);
  else 
    #line 2350 
    if ((features & 274877906944ULL) == 0ULL && rxhash != 0ULL) 
                                                                #line 2351 
                                                                ret = (*(hw_if->disable_rss))(pdata);
  #line 2352 
  if (ret != 0) 
                #line 2353 
                return ret;
  #line 2355 
  if ((features & 549755813888ULL) != 0ULL && rxcsum == 0ULL) 
                                                              #line 2356 
                                                              (*(hw_if->enable_rx_csum))(pdata);
  else 
    #line 2357 
    if ((features & 549755813888ULL) == 0ULL && rxcsum != 0ULL) 
                                                                #line 2358 
                                                                (*(hw_if->disable_rx_csum))(pdata);
  #line 2360 
  if ((features & 256ULL) != 0ULL && rxvlan == 0ULL) 
                                                     #line 2361 
                                                     (*(hw_if->enable_rx_vlan_stripping))(pdata);
  else 
    #line 2362 
    if ((features & 256ULL) == 0ULL && rxvlan != 0ULL) 
                                                       #line 2363 
                                                       (*(hw_if->disable_rx_vlan_stripping))(pdata);
  #line 2365 
  if ((features & 512ULL) != 0ULL && rxvlan_filter == 0ULL) 
                                                            #line 2366 
                                                            (*(hw_if->enable_rx_vlan_filtering))(pdata);
  else 
    #line 2367 
    if ((features & 512ULL) == 0ULL && rxvlan_filter != 0ULL) 
                                                              #line 2368 
                                                              (*(hw_if->disable_rx_vlan_filtering))(pdata);
  #line 2370 
  if ((features & 67108864ULL) != 0ULL && udp_tunnel == 0ULL) 
                                                              #line 2371 
                                                              xgbe_enable_vxlan_accel(pdata);
  else 
    #line 2372 
    if ((features & 67108864ULL) == 0ULL && udp_tunnel != 0ULL) 
                                                                #line 2373 
                                                                xgbe_disable_vxlan_accel(pdata);
  #line 2375 
  pdata->netdev_features = features;
  #line 2379 
  return 0;
}

#line 2382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_udp_tunnel_add(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 2386 
  struct xgbe_vxlan_data *vdata;
  #line 2385 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2388 
  if (pdata->hw_feat.vxn == 0U) 
                                #line 2389 
                                return;
  #line 2391 
  if ((unsigned int)ti->type != 0U) 
                                    #line 2392 
                                    return;
  #line 2394 
  (pdata->vxlan_port_count) ++;
  #line 2396 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 2396 
    bool branch;
    #line 2396 
    struct _ddebug __UNIQUE_ID_ddebug604 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_udp_tunnel_add", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"adding VXLAN tunnel, family=%hx/port=%hx\n", .lineno = (unsigned int)2396U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2396 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug604.key.dd_key_false.key,(_Bool)0);
    #line 2396 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2396 
      ;
      #line 2396 
      ;
      #line 2396 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug604,netdev,(char *)"adding VXLAN tunnel, family=%hx/port=%hx\n",(int)ti->sa_family,(int)__builtin_bswap16((unsigned short)((int)ti->port)));
    }
  }
  #line 2400 
  if (pdata->vxlan_force_disable != 0U) 
                                        #line 2401 
                                        return;
  #line 2403 
  vdata = (struct xgbe_vxlan_data *)kzalloc(24UL,2592U);
  #line 2404 
  if (vdata == (struct xgbe_vxlan_data *)0) {
    #line 2406 
    pdata->vxlan_force_disable = 1U;
    #line 2407 
    if ((pdata->msg_enable & 1U) != 0U) {
      #line 2407 
      bool branch_0;
      #line 2407 
      struct _ddebug __UNIQUE_ID_ddebug605 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_udp_tunnel_add", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"internal error, disabling VXLAN accelerations\n", .lineno = (unsigned int)2407U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2407 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug605.key.dd_key_false.key,(_Bool)0);
      #line 2407 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 2407 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug605,netdev,(char *)"internal error, disabling VXLAN accelerations\n");
    }
    #line 2410 
    xgbe_disable_vxlan_accel(pdata);
    #line 2412 
    return;
  }
  #line 2414 
  vdata->sa_family = ti->sa_family;
  #line 2415 
  vdata->port = ti->port;
  #line 2417 
  list_add_tail(& vdata->list,& pdata->vxlan_ports);
  #line 2420 
  if (pdata->vxlan_port_count == 1U) {
    #line 2421 
    xgbe_enable_vxlan_accel(pdata);
    #line 2423 
    return;
  }
  #line 2425 
  return;
}

#line 2427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_udp_tunnel_del(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 2468 
  void *__mptr_1;
  #line 2444 
  void *__mptr;
  #line 2431 
  struct xgbe_vxlan_data *vdata;
  #line 2430 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 2433 
  if (pdata->hw_feat.vxn == 0U) 
                                #line 2434 
                                return;
  #line 2436 
  if ((unsigned int)ti->type != 0U) 
                                    #line 2437 
                                    return;
  #line 2439 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 2439 
    bool branch;
    #line 2439 
    struct _ddebug __UNIQUE_ID_ddebug606 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_udp_tunnel_del", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"deleting VXLAN tunnel, family=%hx/port=%hx\n", .lineno = (unsigned int)2439U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2439 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug606.key.dd_key_false.key,(_Bool)0);
    #line 2439 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2439 
      ;
      #line 2439 
      ;
      #line 2439 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug606,netdev,(char *)"deleting VXLAN tunnel, family=%hx/port=%hx\n",(int)ti->sa_family,(int)__builtin_bswap16((unsigned short)((int)ti->port)));
    }
  }
  #line 2444 
  __mptr = (void *)pdata->vxlan_ports.next;
  #line 2444 
  vdata = ((struct xgbe_vxlan_data *)__mptr);
  #line 2444 
  while (& vdata->list != & pdata->vxlan_ports) {
    #line 2444 
    void *__mptr_0;
    #line 2445 
    if ((int)vdata->sa_family != (int)ti->sa_family) 
                                                     #line 2446 
                                                     goto __Cont;
    #line 2448 
    if ((int)vdata->port != (int)ti->port) 
                                           #line 2449 
                                           goto __Cont;
    #line 2451 
    list_del(& vdata->list);
    #line 2452 
    kfree((void *)vdata);
    #line 2454 
    break;
    #line 2444 
    __Cont: { /* sequence */
              #line 2444 
              __mptr_0 = (void *)vdata->list.next;
              #line 2444 
              vdata = ((struct xgbe_vxlan_data *)__mptr_0);
            }
  }
  #line 2457 
  (pdata->vxlan_port_count) --;
  #line 2458 
  if (pdata->vxlan_port_count == 0U) {
    #line 2459 
    xgbe_reset_vxlan_accel(pdata);
    #line 2461 
    return;
  }
  #line 2464 
  if (pdata->vxlan_force_disable != 0U) 
                                        #line 2465 
                                        return;
  #line 2468 
  __mptr_1 = (void *)pdata->vxlan_ports.next;
  #line 2468 
  vdata = ((struct xgbe_vxlan_data *)__mptr_1);
  #line 2470 
  ;
  #line 2470 
  if ((int)pdata->vxlan_port == (int)__builtin_bswap16((unsigned short)((int)vdata->port))) 
    #line 2471 
    return;
  #line 2473 
  pdata->vxlan_port = __builtin_bswap16((unsigned short)((int)vdata->port));
  #line 2474 
  (*(pdata->hw_if.set_vxlan_id))(pdata);
  #line 2475 
  return;
}

#line 2477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static netdev_features_t xgbe_features_check(struct sk_buff *skb, struct net_device *netdev, netdev_features_t features)
{
  #line 2481 
  features = vlan_features_check(skb,features);
  #line 2482 
  features = vxlan_features_check(skb,features);
  #line 2484 
  return features;
}

#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static struct net_device_ops xgbe_netdev_ops = {.ndo_open = & xgbe_open, .ndo_stop = & xgbe_close, .ndo_start_xmit = & xgbe_xmit, .ndo_features_check = & xgbe_features_check, .ndo_set_rx_mode = & xgbe_set_rx_mode, .ndo_set_mac_address = & xgbe_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & xgbe_ioctl, .ndo_change_mtu = & xgbe_change_mtu, .ndo_tx_timeout = & xgbe_tx_timeout, .ndo_get_stats64 = & xgbe_get_stats64, .ndo_vlan_rx_add_vid = & xgbe_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & xgbe_vlan_rx_kill_vid, .ndo_poll_controller = & xgbe_poll_controller, .ndo_setup_tc = & xgbe_setup_tc, .ndo_fix_features = & xgbe_fix_features, .ndo_set_features = & xgbe_set_features, .ndo_udp_tunnel_add = & xgbe_udp_tunnel_add, .ndo_udp_tunnel_del = & xgbe_udp_tunnel_del};
#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
struct net_device_ops *xgbe_get_netdev_ops(void)
{
  #line 2513 
  return & xgbe_netdev_ops;
}

#line 2516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static void xgbe_rx_refresh(struct xgbe_channel *channel)
{
  #line 2522 
  struct xgbe_ring_data *rdata;
  #line 2518 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 2519 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 2520 
  struct xgbe_desc_if *desc_if = & pdata->desc_if;
  #line 2521 
  struct xgbe_ring *ring = channel->rx_ring;
  #line 2524 
  while (ring->dirty != ring->cur) {
    #line 2525 
    rdata = ring->rdata + (unsigned long)(ring->dirty & (ring->rdesc_count + 4294967295U));
    #line 2528 
    (*(desc_if->unmap_rdata))(pdata,rdata);
    #line 2530 
    if ((*(desc_if->map_rx_buffer))(pdata,ring,rdata) != 0) 
                                                            #line 2531 
                                                            break;
    #line 2533 
    (*(hw_if->rx_desc_reset))(pdata,rdata,ring->dirty);
    #line 2535 
    (ring->dirty) ++;
  }
  #line 2537 
  ldv_inline_asm();
  #line 2543 
  rdata = ring->rdata + (unsigned long)((ring->dirty + 4294967295U) & (ring->rdesc_count + 4294967295U));
  #line 2544 
  iowrite32((unsigned int)rdata->rdesc_dma,channel->dma_regs + 44U);
  #line 2545 
  return;
}

#line 2548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static struct sk_buff *xgbe_create_skb(struct xgbe_prv_data *pdata, struct napi_struct *napi, struct xgbe_ring_data *rdata, unsigned int len)
{
  #line 2553 
  struct sk_buff *skb;
  #line 2554 
  u8 *packet;
  #line 2556 
  skb = napi_alloc_skb(napi,rdata->rx.hdr.dma_len);
  #line 2557 
  if (skb == (struct sk_buff *)0) 
                                  #line 2558 
                                  return (struct sk_buff *)0;
  #line 2563 
  dma_sync_single_range_for_cpu(pdata->dev,rdata->rx.hdr.dma_base,rdata->rx.hdr.dma_off,(unsigned long)rdata->rx.hdr.dma_len,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 2567 
  packet = (u8 *)(lowmem_page_address(rdata->rx.hdr.pa.pages) + (unsigned long)rdata->rx.hdr.pa.pages_offset);
  #line 2569 
  skb_copy_to_linear_data(skb,(void *)packet,len);
  #line 2570 
  skb_put(skb,len);
  #line 2572 
  return skb;
}

#line 2575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static unsigned int xgbe_rx_buf1_len(struct xgbe_ring_data *rdata, struct xgbe_packet_data *packet)
{
  #line 2595 
  unsigned int tmp;
  #line 2595 
  unsigned int __UNIQUE_ID___x607;
  #line 2579 
  if ((packet->attributes & 128U) == 0U) 
                                         #line 2580 
                                         return 0U;
  #line 2583 
  if ((unsigned int)rdata->rx.hdr_len != 0U) 
                                             #line 2584 
                                             return (unsigned int)rdata->rx.hdr_len;
  #line 2589 
  if ((packet->attributes & 4U) == 0U) 
                                       #line 2590 
                                       return rdata->rx.hdr.dma_len;
  {
    #line 2595 
    __UNIQUE_ID___x607 = rdata->rx.hdr.dma_len;
    #line 2595 
    unsigned int __UNIQUE_ID___y608 = (unsigned int)rdata->rx.len;
    #line 2595 
    if (__UNIQUE_ID___x607 < __UNIQUE_ID___y608) 
                                                 #line 2595 
                                                 tmp = __UNIQUE_ID___x607; else 
                                                                    #line 2595 
                                                                    tmp = __UNIQUE_ID___y608;
    }
  #line 2595 
  return tmp;
}

#line 2598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static unsigned int xgbe_rx_buf2_len(struct xgbe_ring_data *rdata, struct xgbe_packet_data *packet, unsigned int len)
{
  #line 2603 
  if ((packet->attributes & 4U) == 0U) 
                                       #line 2604 
                                       return rdata->rx.buf.dma_len;
  #line 2609 
  return (unsigned int)rdata->rx.len - len;
}

#line 2612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_tx_poll(struct xgbe_channel *channel)
{
  #line 2618 
  struct xgbe_ring_data *rdata;
  #line 2619 
  struct xgbe_ring_desc *rdesc;
  #line 2621 
  struct netdev_queue *txq;
  #line 2624 
  unsigned int cur;
  #line 2614 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 2615 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 2616 
  struct xgbe_desc_if *desc_if = & pdata->desc_if;
  #line 2617 
  struct xgbe_ring *ring = channel->tx_ring;
  #line 2620 
  struct net_device *netdev = pdata->netdev;
  #line 2622 
  int processed = 0;
  #line 2623 
  unsigned int tx_packets = 0U;
  #line 2623 
  unsigned int tx_bytes = 0U;
  #line 2629 
  if (ring == (struct xgbe_ring *)0) 
                                     #line 2630 
                                     return 0;
  #line 2632 
  cur = ring->cur;
  #line 2633 
  ldv_inline_asm();
  #line 2637 
  txq = netdev_get_tx_queue(netdev,channel->queue_index);
  #line 2639 
  while (processed <= 255 && ring->dirty != cur) {
    #line 2641 
    rdata = ring->rdata + (unsigned long)(ring->dirty & (ring->rdesc_count + 4294967295U));
    #line 2642 
    rdesc = rdata->rdesc;
    #line 2644 
    if ((*(hw_if->tx_complete))(rdesc) == 0) 
                                             #line 2645 
                                             break;
    #line 2646 
    ldv_inline_asm();
    #line 2651 
    if ((pdata->msg_enable & 1024U) != 0U) 
                                           #line 2652 
                                           xgbe_dump_tx_desc(pdata,ring,ring->dirty,1U,0U);
    #line 2654 
    if ((*(hw_if->is_last_desc))(rdesc) != 0) {
      #line 2655 
      tx_packets = rdata->tx.packets + tx_packets;
      #line 2656 
      tx_bytes = rdata->tx.bytes + tx_bytes;
    }
    #line 2660 
    (*(desc_if->unmap_rdata))(pdata,rdata);
    #line 2661 
    (*(hw_if->tx_desc_reset))(rdata);
    #line 2663 
    processed ++;
    #line 2664 
    (ring->dirty) ++;
  }
  #line 2667 
  if (processed == 0) 
                      #line 2668 
                      return 0;
  #line 2670 
  netdev_tx_completed_queue(txq,tx_packets,tx_bytes);
  #line 2672 
  if (ring->__anonCompField_xgbe_ring_163.tx.queue_stopped == 1U) {
    #line 2672 
    if (xgbe_tx_avail_desc(ring) > 64U) {
      #line 2674 
      ring->__anonCompField_xgbe_ring_163.tx.queue_stopped = 0U;
      #line 2675 
      netif_tx_wake_queue(txq);
    }
  }
  #line 2680 
  return processed;
}

#line 2683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_rx_poll(struct xgbe_channel *channel, int budget)
{
  #line 2688 
  struct xgbe_ring_data *rdata;
  #line 2689 
  struct xgbe_packet_data *packet;
  #line 2691 
  struct napi_struct *napi;
  #line 2692 
  struct sk_buff *skb;
  #line 2693 
  struct skb_shared_hwtstamps *hwtstamps;
  #line 2694 
  unsigned int last;
  #line 2694 
  unsigned int error;
  #line 2694 
  unsigned int context_next;
  #line 2694 
  unsigned int context;
  #line 2695 
  unsigned int len;
  #line 2695 
  unsigned int buf1_len;
  #line 2695 
  unsigned int buf2_len;
  #line 2695 
  unsigned int max_len;
  #line 2685 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 2686 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 2687 
  struct xgbe_ring *ring = channel->rx_ring;
  #line 2690 
  struct net_device *netdev = pdata->netdev;
  #line 2696 
  unsigned int received = 0U;
  #line 2697 
  int packet_count = 0;
  #line 2702 
  if (ring == (struct xgbe_ring *)0) 
                                     #line 2703 
                                     return 0;
  #line 2705 
  last = 0U;
  #line 2706 
  context_next = 0U;
  #line 2708 
  if (pdata->per_channel_irq != 0U) 
                                    #line 2708 
                                    napi = & channel->napi; else 
                                                                 #line 2708 
                                                                 napi = & pdata->napi;
  #line 2710 
  rdata = ring->rdata + (unsigned long)(ring->cur & (ring->rdesc_count + 4294967295U));
  #line 2711 
  packet = & ring->packet_data;
  #line 2712 
  while (packet_count < budget) {
    #line 2716 
    if (received == 0U && rdata->state_saved != 0U) {
      #line 2717 
      skb = rdata->state.skb;
      #line 2718 
      error = rdata->state.error;
      #line 2719 
      len = rdata->state.len;
    }
    else {
      #line 2721 
      memset((void *)packet,0,64UL);
      #line 2722 
      skb = (struct sk_buff *)0;
      #line 2723 
      error = 0U;
      #line 2724 
      len = 0U;
    }
    #line 2727 
    read_again: 
                #line 2727 
    ;
    #line 2728 
    rdata = ring->rdata + (unsigned long)(ring->cur & (ring->rdesc_count + 4294967295U));
    #line 2730 
    if (xgbe_rx_dirty_desc(ring) > 64U) 
                                        #line 2731 
                                        xgbe_rx_refresh(channel);
    #line 2733 
    if ((*(hw_if->dev_read))(channel) != 0) 
                                            #line 2734 
                                            break;
    #line 2736 
    received ++;
    #line 2737 
    (ring->cur) ++;
    #line 2739 
    last = (packet->attributes >> 2) & 1U;
    #line 2741 
    context_next = (packet->attributes >> 3) & 1U;
    #line 2744 
    context = (packet->attributes >> 4) & 1U;
    #line 2749 
    if ((last == 0U || context_next != 0U) && error != 0U) 
                                                           #line 2750 
                                                           goto read_again;
    #line 2752 
    if (error != 0U || packet->errors != 0U) {
      #line 2753 
      if (packet->errors != 0U) 
        #line 2754 
        if ((pdata->msg_enable & 64U) != 0U) 
                                             #line 2754 
                                             netdev_err(netdev,(char *)"error in received packet\n");
      #line 2756 
      consume_skb(skb);
      #line 2757 
      goto next_packet;
    }
    #line 2760 
    if (context == 0U) {
      #line 2762 
      buf1_len = xgbe_rx_buf1_len(rdata,packet);
      #line 2763 
      len += buf1_len;
      #line 2764 
      buf2_len = xgbe_rx_buf2_len(rdata,packet,len);
      #line 2765 
      len += buf2_len;
      #line 2767 
      if (skb == (struct sk_buff *)0) {
        #line 2768 
        skb = xgbe_create_skb(pdata,napi,rdata,buf1_len);
        #line 2770 
        if (skb == (struct sk_buff *)0) {
          #line 2771 
          error = 1U;
          #line 2772 
          goto skip_data;
        }
      }
      #line 2776 
      if (buf2_len != 0U) {
        #line 2777 
        dma_sync_single_range_for_cpu(pdata->dev,rdata->rx.buf.dma_base,rdata->rx.buf.dma_off,(unsigned long)rdata->rx.buf.dma_len,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 2783 
        ;
        #line 2783 
        ;
        #line 2783 
        ;
        #line 2783 
        ;
        #line 2783 
        ;
        #line 2783 
        skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,rdata->rx.buf.pa.pages,(int)rdata->rx.buf.pa.pages_offset,(int)buf2_len,rdata->rx.buf.dma_len);
        #line 2788 
        rdata->rx.buf.pa.pages = (struct page *)0;
      }
    }
    #line 2792 
    skip_data: 
               #line 2792 
    ;
    #line 2793 
    if (last == 0U || context_next != 0U) 
                                          #line 2794 
                                          goto read_again;
    #line 2796 
    if (skb == (struct sk_buff *)0) 
                                    #line 2797 
                                    goto next_packet;
    #line 2800 
    max_len = netdev->mtu + 14U;
    #line 2801 
    if ((netdev->features & 256ULL) == 0ULL && (unsigned int)skb->protocol == 129U) 
      #line 2803 
      max_len += 4U;
    #line 2805 
    if (skb->len > max_len) {
      #line 2806 
      if ((pdata->msg_enable & 64U) != 0U) 
                                           #line 2806 
                                           netdev_err(netdev,(char *)"packet length exceeds configured MTU\n");
      #line 2808 
      consume_skb(skb);
      #line 2809 
      goto next_packet;
    }
    #line 2812 
    if ((pdata->msg_enable & 4096U) != 0U) 
                                           #line 2813 
                                           xgbe_print_pkt(netdev,skb,(_Bool)0);
    #line 2815 
    skb_checksum_none_assert(skb);
    #line 2816 
    if ((packet->attributes & 1U) != 0U) 
                                         #line 2818 
                                         skb->ip_summed = (unsigned char)1U;
    #line 2820 
    if ((packet->attributes & 256U) != 0U) {
      #line 2822 
      skb->encapsulation = (unsigned char)1U;
      #line 2824 
      if ((packet->attributes & 512U) != 0U) 
                                             #line 2826 
                                             skb->csum_level = (unsigned char)1U;
    }
    #line 2829 
    if ((packet->attributes & 2U) != 0U) 
                                         #line 2831 
                                         __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)packet->vlan_ctag));
    #line 2834 
    if ((packet->attributes & 32U) != 0U) {
      #line 2836 
      u64 nsec;
      #line 2838 
      nsec = timecounter_cyc2time(& pdata->tstamp_tc,packet->rx_tstamp);
      #line 2840 
      hwtstamps = skb_hwtstamps(skb);
      #line 2841 
      hwtstamps->hwtstamp = ns_to_ktime(nsec);
    }
    #line 2844 
    if ((packet->attributes & 64U) != 0U) 
                                          #line 2846 
                                          skb_set_hash(skb,packet->rss_hash,packet->rss_hash_type);
    #line 2849 
    skb->__anonCompField_sk_buff_91.__anonCompField___anonunion_531_90.__anonCompField___anonstruct_532_89.dev = netdev;
    #line 2850 
    skb->protocol = eth_type_trans(skb,netdev);
    #line 2851 
    skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)channel->queue_index)));
    #line 2853 
    napi_gro_receive(napi,skb);
    #line 2855 
    next_packet: 
                 #line 2855 
    ;
    #line 2856 
    packet_count ++;
  }
  #line 2860 
  if (received != 0U && (last == 0U || context_next != 0U)) {
    #line 2861 
    rdata = ring->rdata + (unsigned long)(ring->cur & (ring->rdesc_count + 4294967295U));
    #line 2862 
    rdata->state_saved = 1U;
    #line 2863 
    rdata->state.skb = skb;
    #line 2864 
    rdata->state.len = len;
    #line 2865 
    rdata->state.error = error;
  }
  #line 2870 
  return packet_count;
}

#line 2873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_one_poll(struct napi_struct *napi, int budget)
{
  #line 2875 
  void *__mptr;
  #line 2875 
  __mptr = (void *)napi;
  #line 2875 
  struct xgbe_channel *channel = ((struct xgbe_channel *)(__mptr + 18446744073709551520U));
  #line 2877 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 2878 
  int processed = 0;
  #line 2883 
  xgbe_tx_poll(channel);
  #line 2886 
  processed = xgbe_rx_poll(channel,budget);
  #line 2889 
  if (processed < budget) {
    #line 2889 
    if ((int)napi_complete_done(napi,processed) != 0) 
      #line 2891 
      if (pdata->channel_irq_mode != 0U) 
                                         #line 2892 
                                         xgbe_enable_rx_tx_int(pdata,channel); else 
                                                                    #line 2894 
                                                                    enable_irq((unsigned int)channel->dma_irq);
  }
  #line 2899 
  return processed;
}

#line 2902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
static int xgbe_all_poll(struct napi_struct *napi, int budget)
{
  #line 2904 
  void *__mptr;
  #line 2906 
  struct xgbe_channel *channel;
  #line 2907 
  int ring_budget;
  #line 2908 
  int processed;
  #line 2908 
  int last_processed;
  #line 2909 
  unsigned int i;
  #line 2904 
  __mptr = (void *)napi;
  #line 2904 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709548272U));
  #line 2913 
  processed = 0;
  #line 2914 
  ring_budget = (int)((unsigned int)budget / pdata->rx_ring_count);
  #line 2915 
  while (1) {
    #line 2916 
    last_processed = processed;
    #line 2918 
    i = 0U;
    #line 2918 
    while (pdata->channel_count > i) {
      {
        #line 2919 
        channel = pdata->channel[i];
        #line 2922 
        xgbe_tx_poll(channel);
        #line 2925 
        if (budget - processed < ring_budget) 
                                              #line 2926 
                                              ring_budget = budget - processed;
        #line 2927 
        processed = xgbe_rx_poll(channel,ring_budget) + processed;
      }
      #line 2918 
      i ++;
    }
    #line 2929 
    if (! (processed < budget && processed != last_processed)) 
                                                               #line 2915 
                                                               break;
  }
  #line 2932 
  if (processed < budget) {
    #line 2932 
    if ((int)napi_complete_done(napi,processed) != 0) 
                                                      #line 2934 
                                                      xgbe_enable_rx_tx_ints(pdata);
  }
  #line 2939 
  return processed;
}

#line 2942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_dump_tx_desc(struct xgbe_prv_data *pdata, struct xgbe_ring *ring, unsigned int idx, unsigned int count, unsigned int flag)
{
  #line 2945 
  struct xgbe_ring_data *rdata;
  #line 2946 
  struct xgbe_ring_desc *rdesc;
  #line 2948 
  while (1) {
    #line 2948 
    unsigned int tmp_1;
    #line 2948 
    tmp_1 = count;
    #line 2948 
    count --;
    #line 2948 
    ;
    #line 2948 
    if (! (tmp_1 != 0U)) 
                         #line 2948 
                         break;
    #line 2949 
    rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & idx);
    #line 2950 
    rdesc = rdata->rdesc;
    {
      #line 2951 
      bool branch;
      #line 2951 
      struct _ddebug __UNIQUE_ID_ddebug609 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_tx_desc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"TX_NORMAL_DESC[%d %s] = %08x:%08x:%08x:%08x\n", .lineno = (unsigned int)2951U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2951 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug609.key.dd_key_false.key,(_Bool)0);
      #line 2951 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2951 
        char *tmp;
        #line 2951 
        ;
        #line 2951 
        ;
        #line 2951 
        ;
        #line 2951 
        ;
        #line 2951 
        if (flag == 1U) 
                        #line 2951 
                        tmp = (char *)"QUEUED FOR TX"; else 
                                                            #line 2951 
                                                            tmp = (char *)"TX BY DEVICE";
        #line 2951 
        ;
        #line 2951 
        ;
        #line 2951 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug609,pdata->netdev,(char *)"TX_NORMAL_DESC[%d %s] = %08x:%08x:%08x:%08x\n",idx,tmp,rdesc->desc0,rdesc->desc1,rdesc->desc2,rdesc->desc3);
      }
    }
    #line 2958 
    idx ++;
  }
  #line 2960 
  return;
}

#line 2962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_dump_rx_desc(struct xgbe_prv_data *pdata, struct xgbe_ring *ring, unsigned int idx)
{
  #line 2965 
  struct xgbe_ring_data *rdata;
  #line 2966 
  struct xgbe_ring_desc *rdesc;
  #line 2968 
  rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & idx);
  #line 2969 
  rdesc = rdata->rdesc;
  {
    #line 2970 
    bool branch;
    #line 2970 
    struct _ddebug __UNIQUE_ID_ddebug610 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dump_rx_desc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"RX_NORMAL_DESC[%d RX BY DEVICE] = %08x:%08x:%08x:%08x\n", .lineno = (unsigned int)2970U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2970 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug610.key.dd_key_false.key,(_Bool)0);
    #line 2970 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2970 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug610,pdata->netdev,(char *)"RX_NORMAL_DESC[%d RX BY DEVICE] = %08x:%08x:%08x:%08x\n",idx,rdesc->desc0,rdesc->desc1,rdesc->desc2,rdesc->desc3);
  }
  #line 2972 
  return;
}

#line 2976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c"
void xgbe_print_pkt(struct net_device *netdev, struct sk_buff *skb, bool tx_rx)
{
  #line 2979 
  unsigned char buffer[128U];
  #line 2980 
  unsigned int i;
  #line 2978 
  struct ethhdr *eth = (struct ethhdr *)skb->data;
  {
    #line 2982 
    bool branch;
    #line 2982 
    struct _ddebug __UNIQUE_ID_ddebug611 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_print_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"\n************** SKB dump ****************\n", .lineno = (unsigned int)2982U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2982 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug611.key.dd_key_false.key,(_Bool)0);
    #line 2982 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2982 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug611,netdev,(char *)"\n************** SKB dump ****************\n");
  }
  {
    #line 2984 
    bool branch_0;
    #line 2984 
    struct _ddebug __UNIQUE_ID_ddebug612 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_print_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"%s packet of %d bytes\n", .lineno = (unsigned int)2984U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2984 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug612.key.dd_key_false.key,(_Bool)0);
    #line 2984 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 2984 
      char *tmp_0;
      #line 2984 
      ;
      #line 2984 
      if ((int)tx_rx != 0) 
                           #line 2984 
                           tmp_0 = (char *)"TX"; else 
                                                      #line 2984 
                                                      tmp_0 = (char *)"RX";
      #line 2984 
      ;
      #line 2984 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug612,netdev,(char *)"%s packet of %d bytes\n",tmp_0,skb->len);
    }
  }
  {
    #line 2987 
    bool branch_1;
    #line 2987 
    struct _ddebug __UNIQUE_ID_ddebug613 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_print_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"Dst MAC addr: %pM\n", .lineno = (unsigned int)2987U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2987 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug613.key.dd_key_false.key,(_Bool)0);
    #line 2987 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 2987 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug613,netdev,(char *)"Dst MAC addr: %pM\n",(unsigned char *)(& eth->h_dest));
  }
  {
    #line 2988 
    bool branch_2;
    #line 2988 
    struct _ddebug __UNIQUE_ID_ddebug614 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_print_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"Src MAC addr: %pM\n", .lineno = (unsigned int)2988U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2988 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug614.key.dd_key_false.key,(_Bool)0);
    #line 2988 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 2988 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug614,netdev,(char *)"Src MAC addr: %pM\n",(unsigned char *)(& eth->h_source));
  }
  {
    #line 2989 
    bool branch_3;
    #line 2989 
    struct _ddebug __UNIQUE_ID_ddebug615 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_print_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"Protocol: %#06hx\n", .lineno = (unsigned int)2989U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2989 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug615.key.dd_key_false.key,(_Bool)0);
    #line 2989 
    if ((long)((long)((int)branch_3 != 0)) != 0L) {
      #line 2989 
      ;
      #line 2989 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug615,netdev,(char *)"Protocol: %#06hx\n",(int)__builtin_bswap16((unsigned short)((int)eth->h_proto)));
    }
  }
  #line 2991 
  i = 0U;
  #line 2991 
  while (skb->len > i) {
    {
      #line 2992 
      unsigned int __UNIQUE_ID___x616;
      #line 2992 
      unsigned int tmp_6;
      {
        #line 2992 
        __UNIQUE_ID___x616 = skb->len - i;
        #line 2992 
        unsigned int __UNIQUE_ID___y617 = 32U;
        #line 2992 
        if (__UNIQUE_ID___x616 < __UNIQUE_ID___y617) 
                                                     #line 2992 
                                                     tmp_6 = __UNIQUE_ID___x616; else 
                                                                    #line 2992 
                                                                    tmp_6 = __UNIQUE_ID___y617;
        }
      #line 2992 
      unsigned int len = tmp_6;
      #line 2994 
      hex_dump_to_buffer((void *)(skb->data + (unsigned long)i),(unsigned long)len,32,1,(char *)(& buffer),128UL,(_Bool)0);
      {
        #line 2996 
        bool branch_4;
        #line 2996 
        struct _ddebug __UNIQUE_ID_ddebug618 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_print_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"  %#06x: %s\n", .lineno = (unsigned int)2996U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2996 
        branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug618.key.dd_key_false.key,(_Bool)0);
        #line 2996 
        if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                      #line 2996 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug618,netdev,(char *)"  %#06x: %s\n",i,(unsigned char *)(& buffer));
      }
    }
    #line 2991 
    i += 32U;
  }
  {
    #line 2999 
    bool branch_5;
    #line 2999 
    struct _ddebug __UNIQUE_ID_ddebug619 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_print_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-drv.c", .format = (char *)"\n************** SKB dump ****************\n", .lineno = (unsigned int)2999U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2999 
    branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug619.key.dd_key_false.key,(_Bool)0);
    #line 2999 
    if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                  #line 2999 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug619,netdev,(char *)"\n************** SKB dump ****************\n");
  }
  #line 3001 
  return;
}

#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
#line 94 
int emg_del_timer_sync(struct timer_list *arg0);
#line 98 
#line 98 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 101 
#line 101 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
int emg_wrapper_xgbe_change_mtu(struct net_device *arg0, int arg1)
{
  #line 109 
  return xgbe_change_mtu(arg0,arg1);
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
int emg_wrapper_xgbe_close(struct net_device *arg0)
{
  #line 114 
  return xgbe_close(arg0);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
unsigned long long emg_wrapper_xgbe_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 119 
  return xgbe_features_check(arg0,arg1,arg2);
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
unsigned long long emg_wrapper_xgbe_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 124 
  return xgbe_fix_features(arg0,arg1);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
void emg_wrapper_xgbe_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 129 
  xgbe_get_stats64(arg0,arg1);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
int emg_wrapper_xgbe_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 134 
  return xgbe_ioctl(arg0,arg1,arg2);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
int emg_wrapper_xgbe_open(struct net_device *arg0)
{
  #line 139 
  return xgbe_open(arg0);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
void emg_wrapper_xgbe_poll_controller(struct net_device *arg0)
{
  #line 144 
  xgbe_poll_controller(arg0);
  #line 145 
  return;
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
int emg_wrapper_xgbe_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 149 
  return xgbe_set_features(arg0,arg1);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
int emg_wrapper_xgbe_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 154 
  return xgbe_set_mac_address(arg0,arg1);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
void emg_wrapper_xgbe_set_rx_mode(struct net_device *arg0)
{
  #line 159 
  xgbe_set_rx_mode(arg0);
  #line 160 
  return;
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
int emg_wrapper_xgbe_setup_tc(struct net_device *arg0, enum tc_setup_type arg1, void *arg2)
{
  #line 164 
  return xgbe_setup_tc(arg0,arg1,arg2);
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
void emg_wrapper_xgbe_tx_timeout(struct net_device *arg0)
{
  #line 169 
  xgbe_tx_timeout(arg0);
  #line 170 
  return;
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
void emg_wrapper_xgbe_udp_tunnel_add(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 174 
  xgbe_udp_tunnel_add(arg0,arg1);
  #line 175 
  return;
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
void emg_wrapper_xgbe_udp_tunnel_del(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 179 
  xgbe_udp_tunnel_del(arg0,arg1);
  #line 180 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
int emg_wrapper_xgbe_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 184 
  return xgbe_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                           (unsigned short)((int)arg2));
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
int emg_wrapper_xgbe_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 189 
  return xgbe_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                            (unsigned short)((int)arg2));
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
enum netdev_tx emg_wrapper_xgbe_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 194 
  return xgbe_xmit(arg0,arg1);
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 216 
  ldv_set_bit(nr,addr);
  #line 217 
  return;
}

#line 220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 223 
  ldv_clear_bit(nr,addr);
  #line 224 
  return;
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 230 
  ldv_init_list_head(list);
  #line 231 
  return;
}

#line 397  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 401 
  return emg_queue_work(wq,work);
}

#line 521  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 524 
  return ldv_kzalloc(size,flags);
}

#line 785  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 789 
  return emg_schedule_work(work);
}

#line 935  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_tasklet_schedule_1(struct tasklet_struct *t)
{
  #line 939 
  emg_tasklet_schedule(t);
  #line 940 
  return;
}

#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 947 
  return emg_mod_timer(timer,expires);
}

#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 955 
  return emg_del_timer_sync(timer);
}

#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_tasklet_init_1(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 963 
  emg_tasklet_init(t,func,data);
  #line 964 
  return;
}

#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_devm_free_irq_1(struct device *dev, unsigned int irq, void *dev_id)
{
  #line 971 
  emg_devm_free_irq(dev,irq,dev_id);
  #line 972 
  return;
}

#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif___ldv_spin_lock_lock_of_xgbe_prv_data(spinlock_t *lock)
{
  #line 978 
  ldv_spin_model_lock((char *)"lock_of_xgbe_prv_data");
  #line 980 
  __ldv_spin_lock(lock);
  #line 981 
  return;
}

#line 984  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_xgbe_prv_data(spinlock_t *lock, unsigned long flags)
{
  #line 987 
  ldv_spin_model_unlock((char *)"lock_of_xgbe_prv_data");
  #line 989 
  spin_unlock_irqrestore(lock,flags);
  #line 990 
  return;
}

#line 993  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data(spinlock_t *lock)
{
  #line 996 
  ldv_spin_model_lock((char *)"tstamp_lock_of_xgbe_prv_data");
  #line 998 
  __ldv_spin_lock(lock);
  #line 999 
  return;
}

#line 1002  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-drv.i.aux"
static void cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data(spinlock_t *lock, unsigned long flags)
{
  #line 1005 
  ldv_spin_model_unlock((char *)"tstamp_lock_of_xgbe_prv_data");
  #line 1007 
  spin_unlock_irqrestore(lock,flags);
  #line 1008 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  #line 26 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  #line 27 
  return dividend / (unsigned long long)divisor;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  #line 125 
  u32 remainder;
  #line 126 
  return div_u64_rem(dividend,divisor,& remainder);
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
__inline static s64 timespec64_to_ns(struct timespec64 *ts)
{
  #line 135 
  return ts->tv_sec * 1000000000LL + (long long)ts->tv_nsec;
}

#line 144 
#line 144 
struct timespec64 ns_to_timespec64(s64);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ptp.i.aux"
static bool IS_ERR_0(void *ptr);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 703  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ptp.i.aux"
static void cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data_0(spinlock_t *lock, unsigned long flags);
#line 35 
#line 694 
static void cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data_0(spinlock_t *lock);
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_to_ns(ktime_t kt)
{
  #line 99 
  return kt;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 68 
ktime_t ktime_get_with_offset(enum tk_offsets);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  #line 79 
  return ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 186 
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);
#line 195 
#line 195 
int ptp_clock_unregister(struct ptp_clock *);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
__inline static void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
  #line 86 
  tc->nsec += (unsigned long long)delta;
  #line 87 
  return;
}

#line 99 
#line 99 
void timecounter_init(struct timecounter *, struct cyclecounter *, u64);
#line 111 
#line 111 
u64 timecounter_read(struct timecounter *);
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c"
static u64 xgbe_cc_read(struct cyclecounter *cc)
{
  #line 127 
  void *__mptr;
  #line 130 
  u64 nsec;
  #line 127 
  __mptr = (void *)cc;
  #line 127 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709546208U));
  #line 132 
  nsec = (*(pdata->hw_if.get_tstamp_time))(pdata);
  #line 134 
  return nsec;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c"
static int xgbe_adjfreq(struct ptp_clock_info *info, s32 delta)
{
  #line 139 
  void *__mptr;
  #line 142 
  unsigned long flags;
  #line 143 
  u64 adjust;
  #line 144 
  u32 addend;
  #line 144 
  u32 diff;
  #line 139 
  __mptr = (void *)info;
  #line 139 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709546368U));
  #line 145 
  unsigned int neg_adjust = 0U;
  #line 147 
  if (delta < 0) {
    #line 148 
    neg_adjust = 1U;
    #line 149 
    delta = - delta;
  }
  #line 152 
  adjust = (unsigned long long)pdata->tstamp_addend;
  #line 153 
  adjust = (unsigned long long)delta * adjust;
  #line 154 
  diff = (unsigned int)div_u64(adjust,1000000000U);
  #line 156 
  if (neg_adjust != 0U) 
                        #line 156 
                        addend = pdata->tstamp_addend - diff; else 
                                                                   #line 156 
                                                                   addend = pdata->tstamp_addend + diff;
  #line 159 
  cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data_0(& pdata->tstamp_lock);
  #line 161 
  (*(pdata->hw_if.update_tstamp_addend))(pdata,addend);
  #line 163 
  cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data_0(& pdata->tstamp_lock,flags);
  #line 165 
  return 0;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c"
static int xgbe_adjtime(struct ptp_clock_info *info, s64 delta)
{
  #line 170 
  void *__mptr;
  #line 173 
  unsigned long flags;
  #line 170 
  __mptr = (void *)info;
  #line 170 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709546368U));
  #line 175 
  cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data_0(& pdata->tstamp_lock);
  #line 176 
  timecounter_adjtime(& pdata->tstamp_tc,delta);
  #line 177 
  cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data_0(& pdata->tstamp_lock,flags);
  #line 179 
  return 0;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c"
static int xgbe_gettime(struct ptp_clock_info *info, struct timespec64 *ts)
{
  #line 184 
  void *__mptr;
  #line 187 
  unsigned long flags;
  #line 188 
  u64 nsec;
  #line 184 
  __mptr = (void *)info;
  #line 184 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709546368U));
  #line 190 
  cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data_0(& pdata->tstamp_lock);
  #line 192 
  nsec = timecounter_read(& pdata->tstamp_tc);
  #line 194 
  cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data_0(& pdata->tstamp_lock,flags);
  #line 196 
  *ts = ns_to_timespec64((long long)nsec);
  #line 198 
  return 0;
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c"
static int xgbe_settime(struct ptp_clock_info *info, struct timespec64 *ts)
{
  #line 204 
  void *__mptr;
  #line 207 
  unsigned long flags;
  #line 208 
  u64 nsec;
  #line 204 
  __mptr = (void *)info;
  #line 204 
  struct xgbe_prv_data *pdata = ((struct xgbe_prv_data *)(__mptr + 18446744073709546368U));
  #line 210 
  nsec = (unsigned long long)timespec64_to_ns(ts);
  #line 212 
  cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data_0(& pdata->tstamp_lock);
  #line 214 
  timecounter_init(& pdata->tstamp_tc,& pdata->tstamp_cc,nsec);
  #line 216 
  cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data_0(& pdata->tstamp_lock,flags);
  #line 218 
  return 0;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c"
static int xgbe_enable(struct ptp_clock_info *info, struct ptp_clock_request *request, int on)
{
  #line 224 
  return -95;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c"
void xgbe_ptp_register(struct xgbe_prv_data *pdata)
{
  #line 230 
  struct ptp_clock *clock;
  #line 232 
  u64 dividend;
  #line 229 
  struct ptp_clock_info *info = & pdata->ptp_clock_info;
  #line 231 
  struct cyclecounter *cc = & pdata->tstamp_cc;
  #line 234 
  ;
  #line 234 
  snprintf((char *)(& info->name),16UL,(char *)"%s",netdev_name(pdata->netdev));
  #line 236 
  info->owner = & __this_module;
  #line 237 
  info->max_adj = (int)pdata->ptpclk_rate;
  #line 238 
  info->adjfreq = & xgbe_adjfreq;
  #line 239 
  info->adjtime = & xgbe_adjtime;
  #line 240 
  info->gettime64 = & xgbe_gettime;
  #line 241 
  info->settime64 = & xgbe_settime;
  #line 242 
  info->enable = & xgbe_enable;
  #line 244 
  clock = ptp_clock_register(info,pdata->dev);
  #line 245 
  if ((int)IS_ERR_0((void *)clock) != 0) {
    #line 246 
    _dev_err(pdata->dev,(char *)"ptp_clock_register failed\n");
    #line 247 
    return;
  }
  #line 250 
  pdata->ptp_clock = clock;
  #line 256 
  dividend = 50000000ULL;
  #line 257 
  dividend <<= 32;
  #line 258 
  pdata->tstamp_addend = (unsigned int)div_u64(dividend,(unsigned int)pdata->ptpclk_rate);
  #line 261 
  cc->read = & xgbe_cc_read;
  #line 262 
  cc->mask = 18446744073709551615ULL;
  #line 263 
  cc->mult = 1U;
  #line 264 
  cc->shift = 0U;
  #line 266 
  ;
  #line 266 
  ;
  #line 266 
  timecounter_init(& pdata->tstamp_tc,& pdata->tstamp_cc,(unsigned long long)ktime_to_ns(ktime_get_real()));
  #line 270 
  iowrite32(0U,pdata->xgmac_regs + 3328U);
  #line 271 
  pdata->tstamp_config.tx_type = 0;
  #line 272 
  pdata->tstamp_config.rx_filter = 0;
  #line 273 
  return;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c"
void xgbe_ptp_unregister(struct xgbe_prv_data *pdata)
{
  #line 277 
  if (pdata->ptp_clock != (struct ptp_clock *)0) 
                                                 #line 278 
                                                 ptp_clock_unregister(pdata->ptp_clock);
  #line 279 
  return;
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ptp.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 222 
  return ldv_is_err(ptr);
}

#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ptp.i.aux"
static void cif___ldv_spin_lock_tstamp_lock_of_xgbe_prv_data_0(spinlock_t *lock)
{
  #line 697 
  ldv_spin_model_lock((char *)"tstamp_lock_of_xgbe_prv_data");
  #line 699 
  __ldv_spin_lock(lock);
  #line 700 
  return;
}

#line 703  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ptp.i.aux"
static void cif_spin_unlock_irqrestore_tstamp_lock_of_xgbe_prv_data_0(spinlock_t *lock, unsigned long flags)
{
  #line 706 
  ldv_spin_model_unlock((char *)"tstamp_lock_of_xgbe_prv_data");
  #line 708 
  spin_unlock_irqrestore_0(lock,flags);
  #line 709 
  return;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 385 
int kstrtouint(char *, unsigned int, unsigned int *);
#line 480 
#line 480 
char *kasprintf(gfp_t, char * , ...);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
static size_t cif_strlen(char *s);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 26 
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 3300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3300 
int simple_open(struct inode *, struct file *);
#line 3337 
#line 3337 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void *, size_t);
#line 3339 
#line 3339 
ssize_t simple_write_to_buffer(void *, size_t, loff_t *, void *, size_t);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 85 
void debugfs_remove_recursive(struct dentry *);
#line 97 
#line 97 
struct dentry *debugfs_rename(struct dentry *, struct dentry *, struct dentry *, char *);
#line 122 
#line 122 
struct dentry *debugfs_create_bool(char *, umode_t, struct dentry *, bool *);
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xgbe_common_read(char *buffer, size_t count, loff_t *ppos, unsigned int value)
{
  #line 127 
  char *buf;
  #line 128 
  ssize_t len;
  #line 130 
  if (*ppos != 0LL) 
                    #line 131 
                    return 0L;
  #line 133 
  buf = kasprintf(3264U,(char *)"0x%08x\n",value);
  #line 134 
  if (buf == (char *)0) 
                        #line 135 
                        return -12L;
  #line 137 
  ;
  #line 137 
  if (cif_strlen(buf) > count) {
    #line 138 
    kfree((void *)buf);
    #line 139 
    return -28L;
  }
  #line 142 
  ;
  #line 142 
  ;
  #line 142 
  ;
  #line 142 
  ;
  #line 142 
  len = simple_read_from_buffer((void *)buffer,count,ppos,(void *)buf,cif_strlen(buf));
  #line 143 
  kfree((void *)buf);
  #line 145 
  return len;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xgbe_common_write(char *buffer, size_t count, loff_t *ppos, unsigned int *value)
{
  #line 151 
  char workarea[32U];
  #line 152 
  ssize_t len;
  #line 153 
  int ret;
  #line 155 
  if (*ppos != 0LL) 
                    #line 156 
                    return -22L;
  #line 158 
  if (count > 31UL) 
                    #line 159 
                    return -28L;
  #line 161 
  len = simple_write_to_buffer((void *)(& workarea),31UL,ppos,(void *)buffer,count);
  #line 163 
  if (len < 0L) 
                #line 164 
                return len;
  #line 166 
  workarea[len] = (char)0;
  #line 167 
  ret = kstrtouint((char *)(& workarea),16U,value);
  #line 168 
  if (ret != 0) 
                #line 169 
                return -5L;
  #line 171 
  return len;
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xgmac_reg_addr_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 177 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 179 
  return xgbe_common_read(buffer,count,ppos,pdata->debugfs_xgmac_reg);
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xgmac_reg_addr_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 186 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 188 
  return xgbe_common_write(buffer,count,ppos,& pdata->debugfs_xgmac_reg);
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xgmac_reg_value_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 196 
  unsigned int value;
  #line 195 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 198 
  value = ioread32(pdata->xgmac_regs + (unsigned long)pdata->debugfs_xgmac_reg);
  #line 200 
  return xgbe_common_read(buffer,count,ppos,value);
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xgmac_reg_value_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 208 
  unsigned int value;
  #line 209 
  ssize_t len;
  #line 207 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 211 
  len = xgbe_common_write(buffer,count,ppos,& value);
  #line 212 
  if (len < 0L) 
                #line 213 
                return len;
  #line 215 
  iowrite32(value,pdata->xgmac_regs + (unsigned long)pdata->debugfs_xgmac_reg);
  #line 217 
  return len;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static struct file_operations xgmac_reg_addr_fops = {.owner = & __this_module, .read = & xgmac_reg_addr_read, .write = & xgmac_reg_addr_write, .open = & simple_open};
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static struct file_operations xgmac_reg_value_fops = {.owner = & __this_module, .read = & xgmac_reg_value_read, .write = & xgmac_reg_value_write, .open = & simple_open};
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xpcs_mmd_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 237 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 239 
  return xgbe_common_read(buffer,count,ppos,pdata->debugfs_xpcs_mmd);
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xpcs_mmd_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 245 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 247 
  return xgbe_common_write(buffer,count,ppos,& pdata->debugfs_xpcs_mmd);
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xpcs_reg_addr_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 254 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 256 
  return xgbe_common_read(buffer,count,ppos,pdata->debugfs_xpcs_reg);
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xpcs_reg_addr_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 262 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 264 
  return xgbe_common_write(buffer,count,ppos,& pdata->debugfs_xpcs_reg);
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xpcs_reg_value_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 272 
  unsigned int value;
  #line 271 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 274 
  value = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,
                                      (int)(((pdata->debugfs_xpcs_mmd << 16) | (
                                             pdata->debugfs_xpcs_reg & 65535U)) | 1073741824U));
  #line 277 
  return xgbe_common_read(buffer,count,ppos,value);
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xpcs_reg_value_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 285 
  unsigned int value;
  #line 286 
  ssize_t len;
  #line 284 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 288 
  len = xgbe_common_write(buffer,count,ppos,& value);
  #line 289 
  if (len < 0L) 
                #line 290 
                return len;
  #line 292 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,(int)(((pdata->debugfs_xpcs_mmd << 16) | (pdata->debugfs_xpcs_reg & 65535U)) | 1073741824U),(int)value);
  #line 295 
  return len;
}

#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static struct file_operations xpcs_mmd_fops = {.owner = & __this_module, .read = & xpcs_mmd_read, .write = & xpcs_mmd_write, .open = & simple_open};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static struct file_operations xpcs_reg_addr_fops = {.owner = & __this_module, .read = & xpcs_reg_addr_read, .write = & xpcs_reg_addr_write, .open = & simple_open};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static struct file_operations xpcs_reg_value_fops = {.owner = & __this_module, .read = & xpcs_reg_value_read, .write = & xpcs_reg_value_write, .open = & simple_open};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xprop_reg_addr_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 322 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 324 
  return xgbe_common_read(buffer,count,ppos,pdata->debugfs_xprop_reg);
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xprop_reg_addr_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 331 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 333 
  return xgbe_common_write(buffer,count,ppos,& pdata->debugfs_xprop_reg);
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xprop_reg_value_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 341 
  unsigned int value;
  #line 340 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 343 
  value = ioread32(pdata->xprop_regs + (unsigned long)pdata->debugfs_xprop_reg);
  #line 345 
  return xgbe_common_read(buffer,count,ppos,value);
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xprop_reg_value_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 353 
  unsigned int value;
  #line 354 
  ssize_t len;
  #line 352 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 356 
  len = xgbe_common_write(buffer,count,ppos,& value);
  #line 357 
  if (len < 0L) 
                #line 358 
                return len;
  #line 360 
  iowrite32(value,pdata->xprop_regs + (unsigned long)pdata->debugfs_xprop_reg);
  #line 362 
  return len;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static struct file_operations xprop_reg_addr_fops = {.owner = & __this_module, .read = & xprop_reg_addr_read, .write = & xprop_reg_addr_write, .open = & simple_open};
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static struct file_operations xprop_reg_value_fops = {.owner = & __this_module, .read = & xprop_reg_value_read, .write = & xprop_reg_value_write, .open = & simple_open};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xi2c_reg_addr_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 382 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 384 
  return xgbe_common_read(buffer,count,ppos,pdata->debugfs_xi2c_reg);
}

#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xi2c_reg_addr_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 391 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 393 
  return xgbe_common_write(buffer,count,ppos,& pdata->debugfs_xi2c_reg);
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xi2c_reg_value_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 401 
  unsigned int value;
  #line 400 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 403 
  value = ioread32(pdata->xi2c_regs + (unsigned long)pdata->debugfs_xi2c_reg);
  #line 405 
  return xgbe_common_read(buffer,count,ppos,value);
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static ssize_t xi2c_reg_value_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 413 
  unsigned int value;
  #line 414 
  ssize_t len;
  #line 412 
  struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)filp->private_data;
  #line 416 
  len = xgbe_common_write(buffer,count,ppos,& value);
  #line 417 
  if (len < 0L) 
                #line 418 
                return len;
  #line 420 
  iowrite32(value,pdata->xi2c_regs + (unsigned long)pdata->debugfs_xi2c_reg);
  #line 422 
  return len;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static struct file_operations xi2c_reg_addr_fops = {.owner = & __this_module, .read = & xi2c_reg_addr_read, .write = & xi2c_reg_addr_write, .open = & simple_open};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
static struct file_operations xi2c_reg_value_fops = {.owner = & __this_module, .read = & xi2c_reg_value_read, .write = & xi2c_reg_value_write, .open = & simple_open};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
void xgbe_debugfs_init(struct xgbe_prv_data *pdata)
{
  #line 441 
  char *buf;
  #line 444 
  pdata->debugfs_xgmac_reg = 0U;
  #line 445 
  pdata->debugfs_xpcs_mmd = 1U;
  #line 446 
  pdata->debugfs_xpcs_reg = 0U;
  #line 448 
  buf = kasprintf(3264U,(char *)"amd-xgbe-%s",(char *)(& (pdata->netdev)->name));
  #line 449 
  if (buf == (char *)0) 
                        #line 450 
                        return;
  #line 452 
  pdata->xgbe_debugfs = cif_debugfs_create_dir(buf,(struct dentry *)0);
  #line 454 
  cif_debugfs_create_file((char *)"xgmac_register",(unsigned short)384,pdata->xgbe_debugfs,(void *)pdata,& xgmac_reg_addr_fops);
  #line 457 
  cif_debugfs_create_file((char *)"xgmac_register_value",(unsigned short)384,pdata->xgbe_debugfs,(void *)pdata,& xgmac_reg_value_fops);
  #line 460 
  cif_debugfs_create_file((char *)"xpcs_mmd",(unsigned short)384,pdata->xgbe_debugfs,(void *)pdata,& xpcs_mmd_fops);
  #line 463 
  cif_debugfs_create_file((char *)"xpcs_register",(unsigned short)384,pdata->xgbe_debugfs,(void *)pdata,& xpcs_reg_addr_fops);
  #line 466 
  cif_debugfs_create_file((char *)"xpcs_register_value",(unsigned short)384,pdata->xgbe_debugfs,(void *)pdata,& xpcs_reg_value_fops);
  #line 469 
  if (pdata->xprop_regs != (void *)0) {
    #line 470 
    cif_debugfs_create_file((char *)"xprop_register",(unsigned short)384,pdata->xgbe_debugfs,(void *)pdata,& xprop_reg_addr_fops);
    #line 473 
    cif_debugfs_create_file((char *)"xprop_register_value",(unsigned short)384,pdata->xgbe_debugfs,(void *)pdata,& xprop_reg_value_fops);
  }
  #line 478 
  if (pdata->xi2c_regs != (void *)0) {
    #line 479 
    cif_debugfs_create_file((char *)"xi2c_register",(unsigned short)384,pdata->xgbe_debugfs,(void *)pdata,& xi2c_reg_addr_fops);
    #line 482 
    cif_debugfs_create_file((char *)"xi2c_register_value",(unsigned short)384,pdata->xgbe_debugfs,(void *)pdata,& xi2c_reg_value_fops);
  }
  #line 487 
  if ((pdata->vdata)->an_cdr_workaround != 0U) {
    #line 488 
    debugfs_create_bool((char *)"an_cdr_workaround",(unsigned short)384,pdata->xgbe_debugfs,& pdata->debugfs_an_cdr_workaround);
    #line 492 
    debugfs_create_bool((char *)"an_cdr_track_early",(unsigned short)384,pdata->xgbe_debugfs,& pdata->debugfs_an_cdr_track_early);
  }
  #line 497 
  kfree((void *)buf);
  #line 498 
  return;
}

#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
void xgbe_debugfs_exit(struct xgbe_prv_data *pdata)
{
  #line 502 
  debugfs_remove_recursive(pdata->xgbe_debugfs);
  #line 503 
  pdata->xgbe_debugfs = (struct dentry *)0;
  #line 504 
  return;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c"
void xgbe_debugfs_rename(struct xgbe_prv_data *pdata)
{
  #line 508 
  char *buf;
  #line 510 
  if (pdata->xgbe_debugfs == (struct dentry *)0) 
                                                 #line 511 
                                                 return;
  #line 513 
  buf = kasprintf(3264U,(char *)"amd-xgbe-%s",(char *)(& (pdata->netdev)->name));
  #line 514 
  if (buf == (char *)0) 
                        #line 515 
                        return;
  #line 517 
  if (cif_strcmp((char *)(pdata->xgbe_debugfs)->d_name.name,buf) == 0) 
    #line 518 
    goto out;
  #line 520 
  debugfs_rename((pdata->xgbe_debugfs)->d_parent,pdata->xgbe_debugfs,(pdata->xgbe_debugfs)->d_parent,buf);
  #line 523 
  out: 
       #line 523 
  ;
  #line 524 
  kfree((void *)buf);
  #line 525 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
struct file_operations *emg_alias_xgmac_reg_addr_fops = & xgmac_reg_addr_fops;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
struct file_operations *emg_alias_xgmac_reg_value_fops = & xgmac_reg_value_fops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
struct file_operations *emg_alias_xi2c_reg_addr_fops = & xi2c_reg_addr_fops;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
struct file_operations *emg_alias_xi2c_reg_value_fops = & xi2c_reg_value_fops;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
struct file_operations *emg_alias_xpcs_mmd_fops = & xpcs_mmd_fops;
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
struct file_operations *emg_alias_xpcs_reg_addr_fops = & xpcs_reg_addr_fops;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
struct file_operations *emg_alias_xpcs_reg_value_fops = & xpcs_reg_value_fops;
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
struct file_operations *emg_alias_xprop_reg_addr_fops = & xprop_reg_addr_fops;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
struct file_operations *emg_alias_xprop_reg_value_fops = & xprop_reg_value_fops;
#line 105 
#line 105 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 106 
#line 106 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xgmac_reg_addr_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 122 
  return xgmac_reg_addr_read(arg0,arg1,arg2,arg3);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xgmac_reg_addr_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 127 
  return xgmac_reg_addr_write(arg0,arg1,arg2,arg3);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xgmac_reg_value_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 132 
  return xgmac_reg_value_read(arg0,arg1,arg2,arg3);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xgmac_reg_value_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 137 
  return xgmac_reg_value_write(arg0,arg1,arg2,arg3);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xi2c_reg_addr_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 142 
  return xi2c_reg_addr_read(arg0,arg1,arg2,arg3);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xi2c_reg_addr_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 147 
  return xi2c_reg_addr_write(arg0,arg1,arg2,arg3);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xi2c_reg_value_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 152 
  return xi2c_reg_value_read(arg0,arg1,arg2,arg3);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xi2c_reg_value_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 157 
  return xi2c_reg_value_write(arg0,arg1,arg2,arg3);
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xpcs_mmd_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 162 
  return xpcs_mmd_read(arg0,arg1,arg2,arg3);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xpcs_mmd_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 167 
  return xpcs_mmd_write(arg0,arg1,arg2,arg3);
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xpcs_reg_addr_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 172 
  return xpcs_reg_addr_read(arg0,arg1,arg2,arg3);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xpcs_reg_addr_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 177 
  return xpcs_reg_addr_write(arg0,arg1,arg2,arg3);
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xpcs_reg_value_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 182 
  return xpcs_reg_value_read(arg0,arg1,arg2,arg3);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xpcs_reg_value_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 187 
  return xpcs_reg_value_write(arg0,arg1,arg2,arg3);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xprop_reg_addr_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 192 
  return xprop_reg_addr_read(arg0,arg1,arg2,arg3);
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xprop_reg_addr_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 197 
  return xprop_reg_addr_write(arg0,arg1,arg2,arg3);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xprop_reg_value_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 202 
  return xprop_reg_value_read(arg0,arg1,arg2,arg3);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
long emg_wrapper_xprop_reg_value_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 207 
  return xprop_reg_value_write(arg0,arg1,arg2,arg3);
}

#line 254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
static size_t cif_strlen(char *s)
{
  #line 257 
  return ldv_strlen(s);
}

#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 796 
  return emg_debugfs_create_dir(name,parent);
}

#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 804 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-debugfs.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 811 
  return ldv_strcmp(cs,ct);
}

#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-desc.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_6069 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 237 
#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-desc.i.aux"
static void atomic_inc(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_6149 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_131_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret__;
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    int pfo_ret___2;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 1387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void set_dev_node(struct device *dev, int node)
{
  #line 1389 
  dev->numa_node = node;
  #line 1390 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 12 
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read_1(& page->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_43.__anonCompField___anonunion_131_42.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  #line 1003 
  page = compound_head(page);
  #line 1008 
  if ((long)((unsigned int)page_ref_count(page) + 127U <= 127U) != 0L) {
    #line 1008 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 1009 
    ldv_inline_asm();
    #line 1010 
    ldv_inline_asm();
    #line 1011 
    ldv_inline_asm();
    #line 1008 
    ;
  }
  #line 1009 
  page_ref_inc(page);
  #line 1010 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-desc.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
#line 470 
static void xgbe_unmap_rdata(struct xgbe_prv_data *pdata, struct xgbe_ring_data *rdata);
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static void xgbe_free_ring(struct xgbe_prv_data *pdata, struct xgbe_ring *ring)
{
  #line 125 
  struct xgbe_ring_data *rdata;
  #line 126 
  unsigned int i;
  #line 128 
  if (ring == (struct xgbe_ring *)0) 
                                     #line 129 
                                     return;
  #line 131 
  if (ring->rdata != (struct xgbe_ring_data *)0) {
    #line 132 
    i = 0U;
    #line 132 
    while (ring->rdesc_count > i) {
      #line 133 
      rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & i);
      #line 134 
      xgbe_unmap_rdata(pdata,rdata);
      #line 132 
      i ++;
    }
    #line 137 
    kfree((void *)ring->rdata);
    #line 138 
    ring->rdata = (struct xgbe_ring_data *)0;
  }
  #line 141 
  if (ring->rx_hdr_pa.pages != (struct page *)0) {
    #line 142 
    dma_unmap_page_attrs(pdata->dev,ring->rx_hdr_pa.pages_dma,(unsigned long)ring->rx_hdr_pa.pages_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 144 
    put_page(ring->rx_hdr_pa.pages);
    #line 146 
    ring->rx_hdr_pa.pages = (struct page *)0;
    #line 147 
    ring->rx_hdr_pa.pages_len = 0U;
    #line 148 
    ring->rx_hdr_pa.pages_offset = 0U;
    #line 149 
    ring->rx_hdr_pa.pages_dma = 0ULL;
  }
  #line 152 
  if (ring->rx_buf_pa.pages != (struct page *)0) {
    #line 153 
    dma_unmap_page_attrs(pdata->dev,ring->rx_buf_pa.pages_dma,(unsigned long)ring->rx_buf_pa.pages_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 155 
    put_page(ring->rx_buf_pa.pages);
    #line 157 
    ring->rx_buf_pa.pages = (struct page *)0;
    #line 158 
    ring->rx_buf_pa.pages_len = 0U;
    #line 159 
    ring->rx_buf_pa.pages_offset = 0U;
    #line 160 
    ring->rx_buf_pa.pages_dma = 0ULL;
  }
  #line 163 
  if (ring->rdesc != (struct xgbe_ring_desc *)0) {
    #line 164 
    dma_free_coherent(pdata->dev,(unsigned long)ring->rdesc_count * 16UL,(void *)ring->rdesc,ring->rdesc_dma);
    #line 168 
    ring->rdesc = (struct xgbe_ring_desc *)0;
  }
  #line 170 
  return;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static void xgbe_free_ring_resources(struct xgbe_prv_data *pdata)
{
  #line 174 
  struct xgbe_channel *channel;
  #line 175 
  unsigned int i;
  #line 179 
  i = 0U;
  #line 179 
  while (pdata->channel_count > i) {
    #line 180 
    channel = pdata->channel[i];
    #line 181 
    xgbe_free_ring(pdata,channel->tx_ring);
    #line 182 
    xgbe_free_ring(pdata,channel->rx_ring);
    #line 179 
    i ++;
  }
  #line 188 
  return;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static void *xgbe_alloc_node_0(size_t size, int node)
{
  #line 190 
  void *mem;
  #line 192 
  mem = kzalloc_node(size,3264U,node);
  #line 193 
  if (mem == (void *)0) 
                        #line 194 
                        mem = kzalloc_0(size,3264U);
  #line 196 
  return mem;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static void *xgbe_dma_alloc_node(struct device *dev, size_t size, dma_addr_t *dma, int node)
{
  #line 202 
  void *mem;
  #line 203 
  int cur_node = dev_to_node(dev);
  #line 205 
  set_dev_node(dev,node);
  #line 206 
  mem = dma_alloc_coherent(dev,size,dma,3264U);
  #line 207 
  set_dev_node(dev,cur_node);
  #line 209 
  if (mem == (void *)0) 
                        #line 210 
                        mem = dma_alloc_coherent(dev,size,dma,3264U);
  #line 212 
  return mem;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static int xgbe_init_ring(struct xgbe_prv_data *pdata, struct xgbe_ring *ring, unsigned int rdesc_count)
{
  #line 218 
  size_t size;
  #line 220 
  if (ring == (struct xgbe_ring *)0) 
                                     #line 221 
                                     return 0;
  #line 224 
  size = (unsigned long)rdesc_count * 16UL;
  #line 226 
  ring->rdesc_count = rdesc_count;
  #line 227 
  ring->rdesc = (struct xgbe_ring_desc *)xgbe_dma_alloc_node(pdata->dev,size,& ring->rdesc_dma,ring->node);
  #line 229 
  if (ring->rdesc == (struct xgbe_ring_desc *)0) 
                                                 #line 230 
                                                 return -12;
  #line 233 
  size = (unsigned long)rdesc_count * 224UL;
  #line 235 
  ring->rdata = (struct xgbe_ring_data *)xgbe_alloc_node_0(size,ring->node);
  #line 236 
  if (ring->rdata == (struct xgbe_ring_data *)0) 
                                                 #line 237 
                                                 return -12;
  #line 239 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 239 
    bool branch;
    #line 239 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_init_ring", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c", .format = (char *)"rdesc=%p, rdesc_dma=%pad, rdata=%p, node=%d\n", .lineno = (unsigned int)239U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 239 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 239 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 239 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,pdata->netdev,(char *)"rdesc=%p, rdesc_dma=%pad, rdata=%p, node=%d\n",ring->rdesc,& ring->rdesc_dma,ring->rdata,ring->node);
  }
  #line 243 
  return 0;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static int xgbe_alloc_ring_resources(struct xgbe_prv_data *pdata)
{
  #line 248 
  struct xgbe_channel *channel;
  #line 249 
  unsigned int i;
  #line 250 
  int ret;
  #line 252 
  i = 0U;
  #line 252 
  while (pdata->channel_count > i) {
    #line 253 
    channel = pdata->channel[i];
    #line 254 
    if ((pdata->msg_enable & 1U) != 0U) {
      #line 254 
      bool branch;
      #line 254 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_alloc_ring_resources", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c", .format = (char *)"%s - Tx ring:\n", .lineno = (unsigned int)254U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 254 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 254 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 254 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,pdata->netdev,(char *)"%s - Tx ring:\n",(char *)(& channel->name));
    }
    #line 257 
    ret = xgbe_init_ring(pdata,channel->tx_ring,pdata->tx_desc_count);
    #line 259 
    if (ret != 0) {
      #line 260 
      netdev_alert(pdata->netdev,(char *)"error initializing Tx ring\n");
      #line 262 
      goto err_ring;
    }
    #line 265 
    if ((pdata->msg_enable & 1U) != 0U) {
      #line 265 
      bool branch_0;
      #line 265 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_alloc_ring_resources", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c", .format = (char *)"%s - Rx ring:\n", .lineno = (unsigned int)265U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 265 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 265 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 265 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,pdata->netdev,(char *)"%s - Rx ring:\n",(char *)(& channel->name));
    }
    #line 268 
    ret = xgbe_init_ring(pdata,channel->rx_ring,pdata->rx_desc_count);
    #line 270 
    if (ret != 0) {
      #line 271 
      netdev_alert(pdata->netdev,(char *)"error initializing Rx ring\n");
      #line 273 
      goto err_ring;
    }
    #line 252 
    i ++;
  }
  #line 277 
  return 0;
  #line 279 
  err_ring: 
            #line 279 
  ;
  #line 280 
  xgbe_free_ring_resources(pdata);
  #line 282 
  return ret;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static int xgbe_alloc_pages(struct xgbe_prv_data *pdata, struct xgbe_page_alloc *pa, int alloc_order, int node)
{
  #line 290 
  dma_addr_t pages_dma;
  #line 291 
  gfp_t gfp;
  #line 292 
  int order;
  #line 289 
  struct page *pages = (struct page *)0;
  #line 294 
  again: 
         #line 294 
  ;
  #line 295 
  order = alloc_order;
  #line 298 
  gfp = 272928U;
  #line 299 
  while (order >= 0) {
    #line 300 
    pages = alloc_pages_node(node,gfp,(unsigned int)order);
    #line 301 
    if (pages != (struct page *)0) 
                                   #line 302 
                                   break;
    #line 304 
    order --;
  }
  #line 308 
  if (pages == (struct page *)0 && node != -1) {
    #line 309 
    node = -1;
    #line 310 
    goto again;
  }
  #line 313 
  if (pages == (struct page *)0) 
                                 #line 314 
                                 return -12;
  #line 317 
  pages_dma = dma_map_page_attrs(pdata->dev,pages,0UL,4096UL << order,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 319 
  if (dma_mapping_error(pdata->dev,pages_dma) != 0) {
    #line 320 
    put_page(pages);
    #line 321 
    return -12;
  }
  #line 324 
  pa->pages = pages;
  #line 325 
  pa->pages_len = (unsigned int)(4096UL << order);
  #line 326 
  pa->pages_offset = 0U;
  #line 327 
  pa->pages_dma = pages_dma;
  #line 329 
  return 0;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static void xgbe_set_buffer_data(struct xgbe_buffer_data *bd, struct xgbe_page_alloc *pa, unsigned int len)
{
  #line 336 
  get_page(pa->pages);
  #line 337 
  bd->pa = *pa;
  #line 339 
  bd->dma_base = pa->pages_dma;
  #line 340 
  bd->dma_off = (unsigned long)pa->pages_offset;
  #line 341 
  bd->dma_len = len;
  #line 343 
  pa->pages_offset += len;
  #line 344 
  if (pa->pages_offset + len > pa->pages_len) {
    #line 346 
    bd->pa_unmap = *pa;
    #line 349 
    pa->pages = (struct page *)0;
    #line 350 
    pa->pages_len = 0U;
    #line 351 
    pa->pages_offset = 0U;
    #line 352 
    pa->pages_dma = 0ULL;
  }
  #line 354 
  return;
}

#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static int xgbe_map_rx_buffer(struct xgbe_prv_data *pdata, struct xgbe_ring *ring, struct xgbe_ring_data *rdata)
{
  #line 360 
  int ret;
  #line 362 
  if (ring->rx_hdr_pa.pages == (struct page *)0) {
    #line 363 
    ret = xgbe_alloc_pages(pdata,& ring->rx_hdr_pa,0,ring->node);
    #line 364 
    if (ret != 0) 
                  #line 365 
                  return ret;
  }
  #line 368 
  if (ring->rx_buf_pa.pages == (struct page *)0) {
    #line 369 
    ret = xgbe_alloc_pages(pdata,& ring->rx_buf_pa,3,ring->node);
    #line 371 
    if (ret != 0) 
                  #line 372 
                  return ret;
  }
  #line 376 
  xgbe_set_buffer_data(& rdata->rx.hdr,& ring->rx_hdr_pa,256U);
  #line 380 
  xgbe_set_buffer_data(& rdata->rx.buf,& ring->rx_buf_pa,pdata->rx_buf_size);
  #line 383 
  return 0;
}

#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static void xgbe_wrapper_tx_descriptor_init(struct xgbe_prv_data *pdata)
{
  #line 389 
  struct xgbe_channel *channel;
  #line 390 
  struct xgbe_ring *ring;
  #line 391 
  struct xgbe_ring_data *rdata;
  #line 392 
  struct xgbe_ring_desc *rdesc;
  #line 393 
  dma_addr_t rdesc_dma;
  #line 394 
  unsigned int i;
  #line 394 
  unsigned int j;
  #line 388 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 398 
  i = 0U;
  #line 398 
  while (pdata->channel_count > i) {
    #line 399 
    channel = pdata->channel[i];
    #line 400 
    ring = channel->tx_ring;
    #line 401 
    if (ring == (struct xgbe_ring *)0) 
                                       #line 402 
                                       break;
    #line 404 
    rdesc = ring->rdesc;
    #line 405 
    rdesc_dma = ring->rdesc_dma;
    #line 407 
    j = 0U;
    #line 407 
    while (ring->rdesc_count > j) {
      #line 408 
      rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & j);
      #line 410 
      rdata->rdesc = rdesc;
      #line 411 
      rdata->rdesc_dma = rdesc_dma;
      #line 413 
      rdesc ++;
      #line 414 
      rdesc_dma += 16ULL;
      #line 407 
      j ++;
    }
    #line 417 
    ring->cur = 0U;
    #line 418 
    ring->dirty = 0U;
    #line 419 
    memset((void *)(& ring->__anonCompField_xgbe_ring_163.tx),0,12UL);
    #line 421 
    (*(hw_if->tx_desc_init))(channel);
    #line 398 
    i ++;
  }
  #line 427 
  return;
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static void xgbe_wrapper_rx_descriptor_init(struct xgbe_prv_data *pdata)
{
  #line 430 
  struct xgbe_channel *channel;
  #line 431 
  struct xgbe_ring *ring;
  #line 432 
  struct xgbe_ring_desc *rdesc;
  #line 433 
  struct xgbe_ring_data *rdata;
  #line 434 
  dma_addr_t rdesc_dma;
  #line 435 
  unsigned int i;
  #line 435 
  unsigned int j;
  #line 429 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 439 
  i = 0U;
  #line 439 
  while (pdata->channel_count > i) {
    #line 440 
    channel = pdata->channel[i];
    #line 441 
    ring = channel->rx_ring;
    #line 442 
    if (ring == (struct xgbe_ring *)0) 
                                       #line 443 
                                       break;
    #line 445 
    rdesc = ring->rdesc;
    #line 446 
    rdesc_dma = ring->rdesc_dma;
    #line 448 
    j = 0U;
    #line 448 
    while (ring->rdesc_count > j) {
      {
        #line 449 
        rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & j);
        #line 451 
        rdata->rdesc = rdesc;
        #line 452 
        rdata->rdesc_dma = rdesc_dma;
        #line 454 
        if (xgbe_map_rx_buffer(pdata,ring,rdata) != 0) 
                                                       #line 455 
                                                       break;
        #line 457 
        rdesc ++;
        #line 458 
        rdesc_dma += 16ULL;
      }
      #line 448 
      j ++;
    }
    #line 461 
    ring->cur = 0U;
    #line 462 
    ring->dirty = 0U;
    #line 464 
    (*(hw_if->rx_desc_init))(channel);
    #line 439 
    i ++;
  }
  #line 470 
  return;
}

#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static void xgbe_unmap_rdata(struct xgbe_prv_data *pdata, struct xgbe_ring_data *rdata)
{
  #line 473 
  if (rdata->skb_dma != 0ULL) {
    #line 474 
    if (rdata->mapped_as_page != 0U) 
                                     #line 475 
                                     dma_unmap_page_attrs(pdata->dev,rdata->skb_dma,(unsigned long)rdata->skb_dma_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL); else 
                                                                    #line 478 
                                                                    dma_unmap_single_attrs(pdata->dev,rdata->skb_dma,(unsigned long)rdata->skb_dma_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 481 
    rdata->skb_dma = 0ULL;
    #line 482 
    rdata->skb_dma_len = 0U;
  }
  #line 485 
  if (rdata->skb != (struct sk_buff *)0) {
    #line 486 
    dev_kfree_skb_any(rdata->skb);
    #line 487 
    rdata->skb = (struct sk_buff *)0;
  }
  #line 490 
  if (rdata->rx.hdr.pa.pages != (struct page *)0) 
                                                  #line 491 
                                                  put_page(rdata->rx.hdr.pa.pages);
  #line 493 
  if (rdata->rx.hdr.pa_unmap.pages != (struct page *)0) {
    #line 494 
    dma_unmap_page_attrs(pdata->dev,rdata->rx.hdr.pa_unmap.pages_dma,(unsigned long)rdata->rx.hdr.pa_unmap.pages_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 497 
    put_page(rdata->rx.hdr.pa_unmap.pages);
  }
  #line 500 
  if (rdata->rx.buf.pa.pages != (struct page *)0) 
                                                  #line 501 
                                                  put_page(rdata->rx.buf.pa.pages);
  #line 503 
  if (rdata->rx.buf.pa_unmap.pages != (struct page *)0) {
    #line 504 
    dma_unmap_page_attrs(pdata->dev,rdata->rx.buf.pa_unmap.pages_dma,(unsigned long)rdata->rx.buf.pa_unmap.pages_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 507 
    put_page(rdata->rx.buf.pa_unmap.pages);
  }
  #line 510 
  memset((void *)(& rdata->tx),0,8UL);
  #line 511 
  memset((void *)(& rdata->rx),0,152UL);
  #line 513 
  rdata->mapped_as_page = 0U;
  #line 515 
  if (rdata->state_saved != 0U) {
    #line 516 
    rdata->state_saved = 0U;
    #line 517 
    rdata->state.skb = (struct sk_buff *)0;
    #line 518 
    rdata->state.len = 0U;
    #line 519 
    rdata->state.error = 0U;
  }
  #line 521 
  return;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
static int xgbe_map_tx_skb(struct xgbe_channel *channel, struct sk_buff *skb)
{
  #line 527 
  struct xgbe_ring_data *rdata;
  #line 528 
  struct xgbe_packet_data *packet;
  #line 529 
  skb_frag_t *frag;
  #line 530 
  dma_addr_t skb_dma;
  #line 531 
  unsigned int start_index;
  #line 531 
  unsigned int cur_index;
  #line 532 
  unsigned int offset;
  #line 532 
  unsigned int tso;
  #line 532 
  unsigned int vlan;
  #line 532 
  unsigned int datalen;
  #line 532 
  unsigned int len;
  #line 533 
  unsigned int i;
  #line 525 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 526 
  struct xgbe_ring *ring = channel->tx_ring;
  #line 537 
  offset = 0U;
  #line 538 
  start_index = ring->cur;
  #line 539 
  cur_index = ring->cur;
  #line 541 
  packet = & ring->packet_data;
  #line 542 
  packet->rdesc_count = 0U;
  #line 543 
  packet->length = 0U;
  #line 545 
  tso = (packet->attributes >> 1) & 1U;
  #line 547 
  vlan = (packet->attributes >> 2) & 1U;
  #line 551 
  if (tso != 0U && (int)packet->mss != (int)ring->__anonCompField_xgbe_ring_163.tx.cur_mss || vlan != 0U && (int)packet->vlan_ctag != (int)ring->__anonCompField_xgbe_ring_163.tx.cur_vlan_ctag) 
    #line 553 
    cur_index ++;
  #line 554 
  rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & cur_index);
  #line 556 
  if (tso != 0U) {
    #line 558 
    skb_dma = dma_map_single_attrs(pdata->dev,(void *)skb->data,(unsigned long)packet->header_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 560 
    if (dma_mapping_error(pdata->dev,skb_dma) != 0) {
      #line 561 
      netdev_alert(pdata->netdev,(char *)"dma_map_single failed\n");
      #line 562 
      goto err_out;
    }
    #line 564 
    rdata->skb_dma = skb_dma;
    #line 565 
    rdata->skb_dma_len = packet->header_len;
    #line 566 
    if ((pdata->msg_enable & 256U) != 0U) {
      #line 566 
      bool branch;
      #line 566 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_map_tx_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c", .format = (char *)"skb header: index=%u, dma=%pad, len=%u\n", .lineno = (unsigned int)566U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 566 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 566 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 566 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,pdata->netdev,(char *)"skb header: index=%u, dma=%pad, len=%u\n",cur_index,& skb_dma,packet->header_len);
    }
    #line 570 
    offset = packet->header_len;
    #line 572 
    packet->length += packet->header_len;
    #line 574 
    cur_index ++;
    #line 575 
    rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & cur_index);
  }
  #line 579 
  datalen = skb_headlen(skb) - offset;
  #line 579 
  while (datalen != 0U) {
    #line 580 
    unsigned int __UNIQUE_ID___x445;
    #line 580 
    unsigned int tmp_2;
    {
      #line 580 
      __UNIQUE_ID___x445 = datalen;
      #line 580 
      unsigned int __UNIQUE_ID___y446 = 16320U;
      #line 580 
      if (__UNIQUE_ID___x445 < __UNIQUE_ID___y446) 
                                                   #line 580 
                                                   tmp_2 = __UNIQUE_ID___x445; else 
                                                                    #line 580 
                                                                    tmp_2 = __UNIQUE_ID___y446;
      }
    #line 580 
    len = tmp_2;
    #line 582 
    skb_dma = dma_map_single_attrs(pdata->dev,(void *)(skb->data + (unsigned long)offset),(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 584 
    if (dma_mapping_error(pdata->dev,skb_dma) != 0) {
      #line 585 
      netdev_alert(pdata->netdev,(char *)"dma_map_single failed\n");
      #line 586 
      goto err_out;
    }
    #line 588 
    rdata->skb_dma = skb_dma;
    #line 589 
    rdata->skb_dma_len = len;
    #line 590 
    if ((pdata->msg_enable & 256U) != 0U) {
      #line 590 
      bool branch_0;
      #line 590 
      struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_map_tx_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c", .format = (char *)"skb data: index=%u, dma=%pad, len=%u\n", .lineno = (unsigned int)590U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 590 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
      #line 590 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 590 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,pdata->netdev,(char *)"skb data: index=%u, dma=%pad, len=%u\n",cur_index,& skb_dma,len);
    }
    #line 594 
    datalen -= len;
    #line 595 
    offset += len;
    #line 597 
    packet->length += len;
    #line 599 
    cur_index ++;
    #line 600 
    rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & cur_index);
  }
  #line 603 
  i = 0U;
  #line 603 
  while (1) {
    #line 603 
    ;
    #line 603 
    if (! ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 603 
      break;
    {
      #line 604 
      if ((pdata->msg_enable & 256U) != 0U) {
        #line 604 
        bool branch_1;
        #line 604 
        struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_map_tx_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c", .format = (char *)"mapping frag %u\n", .lineno = (unsigned int)604U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 604 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
        #line 604 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 604 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,pdata->netdev,(char *)"mapping frag %u\n",i);
      }
      #line 607 
      frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 608 
      offset = 0U;
      #line 610 
      datalen = skb_frag_size(frag);
      #line 610 
      while (datalen != 0U) {
        #line 611 
        unsigned int __UNIQUE_ID___x449;
        #line 611 
        unsigned int tmp_8;
        {
          #line 611 
          __UNIQUE_ID___x449 = datalen;
          #line 611 
          unsigned int __UNIQUE_ID___y450 = 16320U;
          #line 611 
          if (__UNIQUE_ID___x449 < __UNIQUE_ID___y450) 
                                                       #line 611 
                                                       tmp_8 = __UNIQUE_ID___x449; else 
                                                                    #line 611 
                                                                    tmp_8 = __UNIQUE_ID___y450;
          }
        #line 611 
        len = tmp_8;
        #line 614 
        skb_dma = skb_frag_dma_map(pdata->dev,frag,(unsigned long)offset,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
        #line 616 
        if (dma_mapping_error(pdata->dev,skb_dma) != 0) {
          #line 617 
          netdev_alert(pdata->netdev,(char *)"skb_frag_dma_map failed\n");
          #line 619 
          goto err_out;
        }
        #line 621 
        rdata->skb_dma = skb_dma;
        #line 622 
        rdata->skb_dma_len = len;
        #line 623 
        rdata->mapped_as_page = 1U;
        #line 624 
        if ((pdata->msg_enable & 256U) != 0U) {
          #line 624 
          bool branch_2;
          #line 624 
          struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_map_tx_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c", .format = (char *)"skb frag: index=%u, dma=%pad, len=%u\n", .lineno = (unsigned int)624U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 624 
          branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
          #line 624 
          if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                        #line 624 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,pdata->netdev,(char *)"skb frag: index=%u, dma=%pad, len=%u\n",cur_index,& skb_dma,len);
        }
        #line 628 
        datalen -= len;
        #line 629 
        offset += len;
        #line 631 
        packet->length += len;
        #line 633 
        cur_index ++;
        #line 634 
        rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & cur_index);
      }
    }
    #line 603 
    i ++;
  }
  #line 642 
  rdata = ring->rdata + (unsigned long)((cur_index + 4294967295U) & (ring->rdesc_count + 4294967295U));
  #line 643 
  rdata->skb = skb;
  #line 646 
  packet->rdesc_count = cur_index - start_index;
  #line 650 
  return (int)packet->rdesc_count;
  #line 652 
  err_out: 
           #line 652 
  ;
  #line 653 
  while (start_index < cur_index) {
    #line 654 
    unsigned int tmp_13;
    #line 654 
    tmp_13 = start_index;
    #line 654 
    start_index ++;
    #line 654 
    rdata = ring->rdata + (unsigned long)(tmp_13 & (ring->rdesc_count + 4294967295U));
    #line 655 
    xgbe_unmap_rdata(pdata,rdata);
  }
  #line 660 
  return 0;
}

#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-desc.c"
void xgbe_init_function_ptrs_desc(struct xgbe_desc_if *desc_if)
{
  #line 667 
  desc_if->alloc_ring_resources = & xgbe_alloc_ring_resources;
  #line 668 
  desc_if->free_ring_resources = & xgbe_free_ring_resources;
  #line 669 
  desc_if->map_tx_skb = & xgbe_map_tx_skb;
  #line 670 
  desc_if->map_rx_buffer = & xgbe_map_rx_buffer;
  #line 671 
  desc_if->unmap_rdata = & xgbe_unmap_rdata;
  #line 672 
  desc_if->wrapper_tx_desc_init = & xgbe_wrapper_tx_descriptor_init;
  #line 673 
  desc_if->wrapper_rx_desc_init = & xgbe_wrapper_rx_descriptor_init;
  #line 678 
  return;
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-desc.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 187 
  ldv_atomic_inc(v);
  #line 188 
  return;
}

#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-desc.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 498 
  return ldv_kzalloc(size,flags);
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static int cif_strcmp_0(char *cs, char *ct);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static bool IS_ERR_1(void *ptr);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 26 
long ldv_ptr_err(void *ptr);
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 722  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static bool cif_schedule_work_0(struct work_struct *work);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
__inline static unsigned long resource_type(struct resource *res)
{
  #line 212 
  return res->flags & 7936UL;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1662 
#line 1662 
struct device *get_device(struct device *);
#line 1716 
#line 1716 
void _dev_notice(struct device *, char * , ...);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 58 
void *devm_platform_ioremap_resource(struct platform_device *, unsigned int);
#line 66 
#line 66 
int platform_get_irq(struct platform_device *, unsigned int);
#line 194 
#line 194 
void platform_device_put(struct platform_device *);
#line 217 
#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 738  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device *pdev)
{
  #line 228 
  return dev_get_drvdata(& pdev->dev);
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void platform_set_drvdata(struct platform_device *pdev, void *data)
{
  #line 234 
  dev_set_drvdata(& pdev->dev,data);
  #line 235 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
#line 36 
int device_property_read_u8_array(struct device *, char *, u8 *, size_t);
#line 46 
#line 46 
int device_property_read_string(struct device *, char *, char **);
#line 327 
#line 327 
enum dev_dma_attr device_get_dma_attr(struct device *);
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
#line 122 
void of_node_put(struct device_node *);
#line 364 
#line 364 
struct device_node *of_parse_phandle(struct device_node *, char *, int);
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static char *phy_modes(phy_interface_t interface)
{
  #line 133 
  switch ((unsigned int)interface) {
    #line 134 
    case (unsigned int)0: 
                          #line 134 
    ;
    #line 135 
    return (char *)"";
    #line 136 
    case (unsigned int)1: 
                          #line 136 
    ;
    #line 137 
    return (char *)"internal";
    #line 138 
    case (unsigned int)2: 
                          #line 138 
    ;
    #line 139 
    return (char *)"mii";
    #line 140 
    case (unsigned int)3: 
                          #line 140 
    ;
    #line 141 
    return (char *)"gmii";
    #line 142 
    case (unsigned int)4: 
                          #line 142 
    ;
    #line 143 
    return (char *)"sgmii";
    #line 144 
    case (unsigned int)5: 
                          #line 144 
    ;
    #line 145 
    return (char *)"tbi";
    #line 146 
    case (unsigned int)6: 
                          #line 146 
    ;
    #line 147 
    return (char *)"rev-mii";
    #line 148 
    case (unsigned int)7: 
                          #line 148 
    ;
    #line 149 
    return (char *)"rmii";
    #line 150 
    case (unsigned int)8: 
                          #line 150 
    ;
    #line 151 
    return (char *)"rgmii";
    #line 152 
    case (unsigned int)9: 
                          #line 152 
    ;
    #line 153 
    return (char *)"rgmii-id";
    #line 154 
    case (unsigned int)10: 
                           #line 154 
    ;
    #line 155 
    return (char *)"rgmii-rxid";
    #line 156 
    case (unsigned int)11: 
                           #line 156 
    ;
    #line 157 
    return (char *)"rgmii-txid";
    #line 158 
    case (unsigned int)12: 
                           #line 158 
    ;
    #line 159 
    return (char *)"rtbi";
    #line 160 
    case (unsigned int)13: 
                           #line 160 
    ;
    #line 161 
    return (char *)"smii";
    #line 162 
    case (unsigned int)14: 
                           #line 162 
    ;
    #line 163 
    return (char *)"xgmii";
    #line 164 
    case (unsigned int)15: 
                           #line 164 
    ;
    #line 165 
    return (char *)"moca";
    #line 166 
    case (unsigned int)16: 
                           #line 166 
    ;
    #line 167 
    return (char *)"qsgmii";
    #line 168 
    case (unsigned int)17: 
                           #line 168 
    ;
    #line 169 
    return (char *)"trgmii";
    #line 170 
    case (unsigned int)18: 
                           #line 170 
    ;
    #line 171 
    return (char *)"1000base-x";
    #line 172 
    case (unsigned int)19: 
                           #line 172 
    ;
    #line 173 
    return (char *)"2500base-x";
    #line 174 
    case (unsigned int)20: 
                           #line 174 
    ;
    #line 175 
    return (char *)"rxaui";
    #line 176 
    case (unsigned int)21: 
                           #line 176 
    ;
    #line 177 
    return (char *)"xaui";
    #line 178 
    case (unsigned int)22: 
                           #line 178 
    ;
    #line 179 
    return (char *)"10gbase-kr";
    #line 180 
    case (unsigned int)23: 
                           #line 180 
    ;
    #line 181 
    return (char *)"usxgmii";
    #line 182 
    default: 
             #line 182 
    ;
    #line 183 
    return (char *)"unknown";
  }
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_device.h"
#line 15 
struct of_device_id *of_match_device(struct of_device_id *, struct device *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_platform.h"
#line 56 
struct platform_device *of_find_device_by_node(struct device_node *);
#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
#line 419 
struct clk *devm_clk_get(struct device *, char *);
#line 544 
#line 544 
unsigned long clk_get_rate(struct clk *);
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
#line 396 
bool is_acpi_device_node(struct fwnode_handle *);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/acpi.h"
#line 607 
struct acpi_device_id *acpi_match_device(struct acpi_device_id *, struct device *);
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
#line 584 
static struct acpi_device_id xgbe_acpi_match[2U];
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct xgbe_version_data *xgbe_acpi_vdata(struct xgbe_prv_data *pdata)
{
  #line 142 
  struct acpi_device_id *id;
  #line 146 
  struct xgbe_version_data *tmp;
  #line 144 
  id = acpi_match_device((struct acpi_device_id *)(& xgbe_acpi_match),pdata->dev);
  #line 146 
  if (id != (struct acpi_device_id *)0) 
                                        #line 146 
                                        tmp = (struct xgbe_version_data *)id->driver_data; else 
                                                                    #line 146 
                                                                    tmp = (struct xgbe_version_data *)0;
  #line 146 
  return tmp;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static int xgbe_acpi_support(struct xgbe_prv_data *pdata)
{
  #line 152 
  u32 property;
  #line 153 
  int ret;
  #line 151 
  struct device *dev = pdata->dev;
  #line 156 
  ret = device_property_read_u32(dev,(char *)"amd,dma-freq",& property);
  #line 157 
  if (ret != 0) {
    #line 158 
    _dev_err(dev,(char *)"unable to obtain %s property\n",(char *)"amd,dma-freq");
    #line 160 
    return ret;
  }
  #line 162 
  pdata->sysclk_rate = (unsigned long)property;
  #line 165 
  ret = device_property_read_u32(dev,(char *)"amd,ptp-freq",& property);
  #line 166 
  if (ret != 0) {
    #line 167 
    _dev_err(dev,(char *)"unable to obtain %s property\n",(char *)"amd,ptp-freq");
    #line 169 
    return ret;
  }
  #line 171 
  pdata->ptpclk_rate = (unsigned long)property;
  #line 173 
  return 0;
}

#line 188 
#line 594 
static struct of_device_id xgbe_of_match[2U];
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct xgbe_version_data *xgbe_of_vdata(struct xgbe_prv_data *pdata)
{
  #line 192 
  struct of_device_id *id;
  #line 196 
  struct xgbe_version_data *tmp;
  #line 194 
  id = of_match_device((struct of_device_id *)(& xgbe_of_match),pdata->dev);
  #line 196 
  if (id != (struct of_device_id *)0) 
                                      #line 196 
                                      tmp = (struct xgbe_version_data *)id->data; else 
                                                                    #line 196 
                                                                    tmp = (struct xgbe_version_data *)0;
  #line 196 
  return tmp;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static int xgbe_of_support(struct xgbe_prv_data *pdata)
{
  #line 201 
  struct device *dev = pdata->dev;
  #line 204 
  pdata->sysclk = devm_clk_get(dev,(char *)"dma_clk");
  #line 205 
  if ((int)IS_ERR_1((void *)pdata->sysclk) != 0) {
    #line 206 
    _dev_err(dev,(char *)"dma devm_clk_get failed\n");
    #line 207 
    return (int)PTR_ERR((void *)pdata->sysclk);
  }
  #line 209 
  pdata->sysclk_rate = clk_get_rate(pdata->sysclk);
  #line 212 
  pdata->ptpclk = devm_clk_get(dev,(char *)"ptp_clk");
  #line 213 
  if ((int)IS_ERR_1((void *)pdata->ptpclk) != 0) {
    #line 214 
    _dev_err(dev,(char *)"ptp devm_clk_get failed\n");
    #line 215 
    return (int)PTR_ERR((void *)pdata->ptpclk);
  }
  #line 217 
  pdata->ptpclk_rate = clk_get_rate(pdata->ptpclk);
  #line 219 
  return 0;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct platform_device *xgbe_of_get_phy_pdev(struct xgbe_prv_data *pdata)
{
  #line 225 
  struct device_node *phy_node;
  #line 226 
  struct platform_device *phy_pdev;
  #line 224 
  struct device *dev = pdata->dev;
  #line 228 
  phy_node = of_parse_phandle(dev->of_node,(char *)"phy-handle",0);
  #line 229 
  if (phy_node != (struct device_node *)0) {
    #line 233 
    phy_pdev = of_find_device_by_node(phy_node);
    #line 234 
    of_node_put(phy_node);
  }
  else {
    #line 240 
    get_device(dev);
    #line 241 
    phy_pdev = pdata->platdev;
  }
  #line 244 
  return phy_pdev;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static unsigned int xgbe_resource_count(struct platform_device *pdev, unsigned int type)
{
  #line 266 
  unsigned int count;
  #line 267 
  int i;
  #line 269 
  i = 0;
  #line 269 
  count = 0U;
  #line 269 
  while (pdev->num_resources > (unsigned int)i) {
    {
      #line 270 
      struct resource *res = pdev->resource + (unsigned long)i;
      #line 272 
      ;
      #line 272 
      if ((unsigned long)type == resource_type(res)) 
                                                     #line 273 
                                                     count ++;
    }
    #line 269 
    i ++;
  }
  #line 276 
  return count;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct platform_device *xgbe_get_phy_pdev(struct xgbe_prv_data *pdata)
{
  #line 281 
  struct platform_device *phy_pdev;
  #line 283 
  if (pdata->use_acpi != 0U) {
    #line 284 
    get_device(pdata->dev);
    #line 285 
    phy_pdev = pdata->platdev;
  }
  else 
       #line 287 
       phy_pdev = xgbe_of_get_phy_pdev(pdata);
  #line 290 
  return phy_pdev;
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct xgbe_version_data *xgbe_get_vdata(struct xgbe_prv_data *pdata)
{
  #line 296 
  struct xgbe_version_data *tmp_1;
  #line 296 
  if (pdata->use_acpi != 0U) 
                             #line 295 
                             tmp_1 = xgbe_acpi_vdata(pdata); else 
                                                                  #line 296 
                                                                  tmp_1 = xgbe_of_vdata(pdata);
  #line 296 
  return tmp_1;
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static int xgbe_platform_probe(struct platform_device *pdev)
{
  #line 317 
  void *__mptr;
  #line 317 
  struct acpi_device *tmp_3;
  #line 301 
  struct xgbe_prv_data *pdata;
  #line 303 
  struct platform_device *phy_pdev;
  #line 304 
  char *phy_mode;
  #line 305 
  unsigned int phy_memnum;
  #line 305 
  unsigned int phy_irqnum;
  #line 306 
  unsigned int dma_irqnum;
  #line 306 
  unsigned int dma_irqend;
  #line 307 
  enum dev_dma_attr attr;
  #line 308 
  int ret;
  #line 373 
  unsigned int tmp_13;
  #line 383 
  unsigned int tmp_17;
  #line 393 
  unsigned int tmp_21;
  #line 489 
  unsigned int tmp_30;
  #line 302 
  struct device *dev = & pdev->dev;
  #line 310 
  pdata = xgbe_alloc_pdata(dev);
  #line 311 
  if ((int)IS_ERR_1((void *)pdata) != 0) {
    #line 312 
    ret = (int)PTR_ERR((void *)pdata);
    #line 313 
    goto err_alloc;
  }
  #line 316 
  pdata->platdev = pdev;
  {
    #line 317 
    struct fwnode_handle *__to_acpi_device_node_fwnode = dev->fwnode;
    #line 317 
    if ((int)is_acpi_device_node(__to_acpi_device_node_fwnode) != 0) {
      #line 317 
      __mptr = (void *)__to_acpi_device_node_fwnode;
      #line 317 
      tmp_3 = ((struct acpi_device *)(__mptr + 18446744073709551600U));
    }
    else 
         #line 317 
         tmp_3 = (struct acpi_device *)0;
    }
  #line 317 
  pdata->adev = tmp_3;
  #line 318 
  platform_set_drvdata(pdev,(void *)pdata);
  #line 321 
  pdata->use_acpi = (unsigned int)(dev->of_node == (struct device_node *)0);
  #line 324 
  pdata->vdata = xgbe_get_vdata(pdata);
  #line 326 
  phy_pdev = xgbe_get_phy_pdev(pdata);
  #line 327 
  if (phy_pdev == (struct platform_device *)0) {
    #line 328 
    _dev_err(dev,(char *)"unable to obtain phy device\n");
    #line 329 
    ret = -22;
    #line 330 
    goto err_phydev;
  }
  #line 332 
  pdata->phy_platdev = phy_pdev;
  #line 333 
  pdata->phy_dev = & phy_pdev->dev;
  #line 335 
  if (pdev == phy_pdev) {
    #line 340 
    phy_memnum = xgbe_resource_count(pdev,512U) + 4294967293U;
    #line 341 
    phy_irqnum = xgbe_resource_count(pdev,1024U) + 4294967295U;
    #line 342 
    dma_irqnum = 1U;
    #line 343 
    dma_irqend = phy_irqnum;
  }
  else {
    #line 348 
    phy_memnum = 0U;
    #line 349 
    phy_irqnum = 0U;
    #line 350 
    dma_irqnum = 1U;
    #line 351 
    dma_irqend = xgbe_resource_count(pdev,1024U);
  }
  #line 355 
  pdata->xgmac_regs = devm_platform_ioremap_resource(pdev,0U);
  #line 356 
  if ((int)IS_ERR_1(pdata->xgmac_regs) != 0) {
    #line 357 
    _dev_err(dev,(char *)"xgmac ioremap failed\n");
    #line 358 
    ret = (int)PTR_ERR(pdata->xgmac_regs);
    #line 359 
    goto err_io;
  }
  #line 361 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 362 
    bool branch;
    #line 362 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_platform_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c", .format = (char *)"xgmac_regs = %p\n", .lineno = (unsigned int)362U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 362 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 362 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 362 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,dev,(char *)"xgmac_regs = %p\n",pdata->xgmac_regs);
  }
  #line 364 
  pdata->xpcs_regs = devm_platform_ioremap_resource(pdev,1U);
  #line 365 
  if ((int)IS_ERR_1(pdata->xpcs_regs) != 0) {
    #line 366 
    _dev_err(dev,(char *)"xpcs ioremap failed\n");
    #line 367 
    ret = (int)PTR_ERR(pdata->xpcs_regs);
    #line 368 
    goto err_io;
  }
  #line 370 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 371 
    bool branch_0;
    #line 371 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_platform_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c", .format = (char *)"xpcs_regs  = %p\n", .lineno = (unsigned int)371U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 371 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 371 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 371 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,dev,(char *)"xpcs_regs  = %p\n",pdata->xpcs_regs);
  }
  #line 373 
  tmp_13 = phy_memnum;
  #line 373 
  phy_memnum ++;
  #line 373 
  ;
  #line 373 
  ;
  #line 373 
  pdata->rxtx_regs = devm_platform_ioremap_resource(phy_pdev,tmp_13);
  #line 375 
  if ((int)IS_ERR_1(pdata->rxtx_regs) != 0) {
    #line 376 
    _dev_err(dev,(char *)"rxtx ioremap failed\n");
    #line 377 
    ret = (int)PTR_ERR(pdata->rxtx_regs);
    #line 378 
    goto err_io;
  }
  #line 380 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 381 
    bool branch_1;
    #line 381 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_platform_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c", .format = (char *)"rxtx_regs  = %p\n", .lineno = (unsigned int)381U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 381 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 381 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 381 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug444,dev,(char *)"rxtx_regs  = %p\n",pdata->rxtx_regs);
  }
  #line 383 
  tmp_17 = phy_memnum;
  #line 383 
  phy_memnum ++;
  #line 383 
  ;
  #line 383 
  ;
  #line 383 
  pdata->sir0_regs = devm_platform_ioremap_resource(phy_pdev,tmp_17);
  #line 385 
  if ((int)IS_ERR_1(pdata->sir0_regs) != 0) {
    #line 386 
    _dev_err(dev,(char *)"sir0 ioremap failed\n");
    #line 387 
    ret = (int)PTR_ERR(pdata->sir0_regs);
    #line 388 
    goto err_io;
  }
  #line 390 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 391 
    bool branch_2;
    #line 391 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_platform_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c", .format = (char *)"sir0_regs  = %p\n", .lineno = (unsigned int)391U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 391 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 391 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 391 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug445,dev,(char *)"sir0_regs  = %p\n",pdata->sir0_regs);
  }
  #line 393 
  tmp_21 = phy_memnum;
  #line 393 
  phy_memnum ++;
  #line 393 
  ;
  #line 393 
  ;
  #line 393 
  pdata->sir1_regs = devm_platform_ioremap_resource(phy_pdev,tmp_21);
  #line 395 
  if ((int)IS_ERR_1(pdata->sir1_regs) != 0) {
    #line 396 
    _dev_err(dev,(char *)"sir1 ioremap failed\n");
    #line 397 
    ret = (int)PTR_ERR(pdata->sir1_regs);
    #line 398 
    goto err_io;
  }
  #line 400 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 401 
    bool branch_3;
    #line 401 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_platform_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c", .format = (char *)"sir1_regs  = %p\n", .lineno = (unsigned int)401U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 401 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 401 
    if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                  #line 401 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug446,dev,(char *)"sir1_regs  = %p\n",pdata->sir1_regs);
  }
  #line 404 
  ret = device_property_read_u8_array(dev,(char *)"mac-address",(u8 *)(& pdata->mac_addr),6UL);
  #line 407 
  if (ret != 0) 
                #line 407 
                goto _LOR;
  else {
    #line 407 
    if (! is_valid_ether_addr((u8 *)(& pdata->mac_addr))) {
      #line 407 
      _LOR: {
              #line 408 
              _dev_err(dev,(char *)"invalid %s property\n",(char *)"mac-address");
              #line 409 
              if (ret == 0) 
                            #line 410 
                            ret = -22;
              #line 411 
              goto err_io;
            }
    }
  }
  #line 415 
  ret = device_property_read_string(dev,(char *)"phy-mode",& phy_mode);
  #line 417 
  if (ret != 0) 
                #line 417 
                goto _LOR_0;
  else {
    #line 417 
    ;
    #line 417 
    if (cif_strcmp_0(phy_mode,
                      phy_modes((enum ldv_15404)PHY_INTERFACE_MODE_XGMII)) != 0) {
      #line 417 
      _LOR_0: {
                #line 418 
                _dev_err(dev,(char *)"invalid %s property\n",(char *)"phy-mode");
                #line 419 
                if (ret == 0) 
                              #line 420 
                              ret = -22;
                #line 421 
                goto err_io;
              }
    }
  }
  #line 423 
  pdata->phy_mode = PHY_INTERFACE_MODE_XGMII;
  #line 426 
  if ((int)device_property_present(dev,(char *)"amd,per-channel-interrupt") != 0) {
    #line 427 
    pdata->per_channel_irq = 1U;
    #line 428 
    pdata->channel_irq_mode = 0U;
  }
  #line 432 
  if (pdata->use_acpi != 0U) 
                             #line 433 
                             ret = xgbe_acpi_support(pdata); else 
                                                                  #line 435 
                                                                  ret = xgbe_of_support(pdata);
  #line 436 
  if (ret != 0) 
                #line 437 
                goto err_io;
  #line 440 
  attr = device_get_dma_attr(dev);
  #line 441 
  if (attr == (unsigned int)DEV_DMA_NOT_SUPPORTED) {
    #line 442 
    _dev_err(dev,(char *)"DMA is not supported");
    #line 443 
    ret = -19;
    #line 444 
    goto err_io;
  }
  #line 446 
  pdata->coherent = (unsigned int)(attr == (unsigned int)DEV_DMA_COHERENT);
  #line 447 
  if (pdata->coherent != 0U) {
    #line 448 
    pdata->arcr = 2829099U;
    #line 449 
    pdata->awcr = 791621423U;
  }
  else {
    #line 451 
    pdata->arcr = 3158064U;
    #line 452 
    pdata->awcr = 808464432U;
  }
  #line 456 
  pdata->tx_max_fifo_size = (pdata->vdata)->tx_max_fifo_size;
  #line 457 
  pdata->rx_max_fifo_size = (pdata->vdata)->rx_max_fifo_size;
  #line 460 
  xgbe_set_counts(pdata);
  #line 463 
  pdata->irq_count = 2U;
  #line 466 
  ret = platform_get_irq(pdev,0U);
  #line 467 
  if (ret < 0) 
               #line 468 
               goto err_io;
  #line 469 
  pdata->dev_irq = ret;
  #line 472 
  if (pdata->per_channel_irq != 0U) {
    #line 473 
    unsigned int i;
    #line 473 
    unsigned int max = 16U;
    #line 475 
    i = 0U;
    #line 475 
    while (i < max && dma_irqnum < dma_irqend) {
      {
        #line 476 
        unsigned int tmp_29;
        #line 476 
        tmp_29 = dma_irqnum;
        #line 476 
        dma_irqnum ++;
        #line 476 
        ;
        #line 476 
        ;
        #line 476 
        ret = platform_get_irq(pdata->platdev,tmp_29);
        #line 477 
        if (ret < 0) 
                     #line 478 
                     goto err_io;
        #line 480 
        pdata->channel_irq[i] = ret;
      }
      #line 475 
      i ++;
    }
    #line 483 
    pdata->channel_irq_count = max;
    #line 485 
    pdata->irq_count += max;
  }
  #line 489 
  tmp_30 = phy_irqnum;
  #line 489 
  phy_irqnum ++;
  #line 489 
  ;
  #line 489 
  ;
  #line 489 
  ret = platform_get_irq(phy_pdev,tmp_30);
  #line 490 
  if (ret < 0) 
               #line 491 
               goto err_io;
  #line 492 
  pdata->an_irq = ret;
  #line 495 
  ret = xgbe_config_netdev(pdata);
  #line 496 
  if (ret != 0) 
                #line 497 
                goto err_io;
  #line 499 
  netdev_notice(pdata->netdev,(char *)"net device enabled\n");
  #line 501 
  return 0;
  #line 503 
  err_io: 
          #line 503 
  ;
  #line 504 
  platform_device_put(phy_pdev);
  #line 506 
  err_phydev: 
              #line 506 
  ;
  #line 507 
  xgbe_free_pdata(pdata);
  #line 509 
  err_alloc: 
             #line 509 
  ;
  #line 510 
  _dev_notice(dev,(char *)"net device not enabled\n");
  #line 512 
  return ret;
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static int xgbe_platform_remove(struct platform_device *pdev)
{
  #line 517 
  struct xgbe_prv_data *pdata = platform_get_drvdata(pdev);
  #line 519 
  xgbe_deconfig_netdev(pdata);
  #line 521 
  platform_device_put(pdata->phy_platdev);
  #line 523 
  xgbe_free_pdata(pdata);
  #line 525 
  return 0;
}

#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static int xgbe_platform_suspend(struct device *dev)
{
  #line 531 
  struct xgbe_prv_data *pdata = dev_get_drvdata(dev);
  #line 532 
  struct net_device *netdev = pdata->netdev;
  #line 533 
  int ret = 0;
  #line 537 
  if ((int)netif_running(netdev) != 0) 
                                       #line 538 
                                       ret = xgbe_powerdown(netdev,1U);
  #line 540 
  pdata->lpm_ctrl = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938432);
  #line 541 
  pdata->lpm_ctrl |= 2048U;
  #line 542 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)pdata->lpm_ctrl);
  #line 546 
  return ret;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static int xgbe_platform_resume(struct device *dev)
{
  #line 551 
  struct xgbe_prv_data *pdata = dev_get_drvdata(dev);
  #line 552 
  struct net_device *netdev = pdata->netdev;
  #line 553 
  int ret = 0;
  #line 557 
  pdata->lpm_ctrl &= 4294965247U;
  #line 558 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)pdata->lpm_ctrl);
  #line 560 
  if ((int)netif_running(netdev) != 0) {
    #line 561 
    ret = xgbe_powerup(netdev,1U);
    #line 566 
    cif_schedule_work_0(& pdata->restart_work);
  }
  #line 571 
  return ret;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct xgbe_version_data xgbe_v1 = {.init_function_ptrs_phy_impl = & xgbe_init_function_ptrs_phy_v1, .tx_max_fifo_size = 81920U, .rx_max_fifo_size = 81920U, .tx_tstamp_workaround = 1U};
#line 584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct acpi_device_id xgbe_acpi_match[2U] = {{.id = {(unsigned char)'A', (unsigned char)'M', (unsigned char)'D', (unsigned char)'I', (unsigned char)'8', (unsigned char)'0', (unsigned char)'0', (unsigned char)'1'}, .driver_data = (unsigned long)(& xgbe_v1)}};
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
struct acpi_device_id __mod_acpi__xgbe_acpi_match_device_table[2U];
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct of_device_id xgbe_of_match[2U] = {{.compatible = {(char)'a', (char)'m', (char)'d', (char)',', (char)'x', (char)'g', (char)'b', (char)'e', (char)'-', (char)'s', (char)'e', (char)'a', (char)'t', (char)'t', (char)'l', (char)'e', (char)'-', (char)'v', (char)'1', (char)'a'}, .data = (void *)(& xgbe_v1)}};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
struct of_device_id __mod_of__xgbe_of_match_device_table[2U];
#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct dev_pm_ops xgbe_platform_pm_ops = {.suspend = & xgbe_platform_suspend, .resume = & xgbe_platform_resume, .freeze = & xgbe_platform_suspend, .thaw = & xgbe_platform_resume, .poweroff = & xgbe_platform_suspend, .restore = & xgbe_platform_resume};
#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
static struct platform_driver xgbe_driver = {.probe = & xgbe_platform_probe, .remove = & xgbe_platform_remove, .driver = {.name = (char *)"amd-xgbe", .of_match_table = (struct of_device_id *)(& xgbe_of_match), .acpi_match_table = (struct acpi_device_id *)(& xgbe_acpi_match), .pm = & xgbe_platform_pm_ops}};
#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
int xgbe_platform_init(void)
{
  #line 623 
  return cif___platform_driver_register(& xgbe_driver,& __this_module);
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-platform.c"
void xgbe_platform_exit(void)
{
  #line 628 
  cif_platform_driver_unregister(& xgbe_driver);
  #line 629 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
struct platform_driver *emg_alias_xgbe_driver_1 = & xgbe_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
struct dev_pm_ops *emg_alias_xgbe_platform_pm_ops = & xgbe_platform_pm_ops;
#line 97 
#line 97 
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1);
#line 104 
#line 104 
void emg_platform_driver_unregister(struct platform_driver *arg0);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
int emg_wrapper_xgbe_platform_probe(struct platform_device *arg0)
{
  #line 115 
  return xgbe_platform_probe(arg0);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
int emg_wrapper_xgbe_platform_remove(struct platform_device *arg0)
{
  #line 120 
  return xgbe_platform_remove(arg0);
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
int emg_wrapper_xgbe_platform_resume(struct device *arg0)
{
  #line 125 
  return xgbe_platform_resume(arg0);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
int emg_wrapper_xgbe_platform_suspend(struct device *arg0)
{
  #line 130 
  return xgbe_platform_suspend(arg0);
}

#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 243 
  return ldv_ptr_err(ptr);
}

#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static bool IS_ERR_1(void *ptr)
{
  #line 250 
  return ldv_is_err(ptr);
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static int cif_strcmp_0(char *cs, char *ct)
{
  #line 690 
  return ldv_strcmp(cs,ct);
}

#line 722  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static bool cif_schedule_work_0(struct work_struct *work)
{
  #line 726 
  return emg_schedule_work(work);
}

#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2)
{
  #line 734 
  return emg___platform_driver_register(ldv_func_arg1,ldv_func_arg2);
}

#line 738  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-platform.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1)
{
  #line 742 
  emg_platform_driver_unregister(ldv_func_arg1);
  #line 743 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static int get_bitmask_order(unsigned int count)
{
  #line 64 
  int order;
  #line 66 
  order = fls(count);
  #line 67 
  return order;
}

#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 710  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static void cif_spin_unlock_irqrestore_xpcs_lock_of_xgbe_prv_data(spinlock_t *lock, unsigned long flags);
#line 26 
#line 687 
static void cif_mutex_lock_rss_mutex_of_xgbe_prv_data(struct mutex *lock);
#line 35 
#line 701 
static void cif___ldv_spin_lock_xpcs_lock_of_xgbe_prv_data(spinlock_t *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static void cif_mutex_unlock_rss_mutex_of_xgbe_prv_data(struct mutex *lock);
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 292 
unsigned int jiffies_to_usecs(unsigned long);
#line 375 
#line 375 
unsigned long __usecs_to_jiffies(unsigned int);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int u)
{
  #line 379 
  return (unsigned long)(((long)u + 3999L) / 4000L);
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int u)
{
  #line 413 
  if (0 != 0) {
    #line 414 
    ;
    #line 414 
    if (jiffies_to_usecs(4611686018427387902UL) < u) 
                                                     #line 415 
                                                     return 4611686018427387902UL;
    #line 416 
    return _usecs_to_jiffies(u);
  }
  else {
    #line 418 
    return __usecs_to_jiffies(u);
  }
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
#line 15 
extern u8 byte_rev_table[256U];
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u8 __bitrev8(u8 byte)
{
  #line 18 
  return byte_rev_table[(int)byte];
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u16 __bitrev16(u16 x)
{
  #line 23 
  return (unsigned short)(((int)__bitrev8((unsigned char)((int)((unsigned char)x))) << 8) | (int)__bitrev8((unsigned char)((int)((unsigned char)((int)x >> 8)))));
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u32 __bitrev32(u32 x)
{
  #line 28 
  return (unsigned int)(((int)__bitrev16((unsigned short)((int)((unsigned short)x))) << 16) | (int)__bitrev16((unsigned short)((int)((unsigned short)(x >> 16)))));
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crc32.h"
#line 11 
u32 crc32_le(u32, unsigned char *, size_t);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 2100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_set_prio_tc_map(struct net_device *dev, u8 prio, u8 tc)
{
  #line 2102 
  if ((int)tc >= (int)dev->num_tc) 
                                   #line 2103 
                                   return -22;
  #line 2105 
  dev->prio_tc_map[(int)prio & 15] = (unsigned char)((unsigned int)tc & 15U);
  #line 2106 
  return 0;
}

#line 2110 
#line 2110 
void netdev_reset_tc(struct net_device *);
#line 2111 
#line 2111 
int netdev_set_tc_queue(struct net_device *, u8, u16, u16);
#line 2112 
#line 2112 
int netdev_set_num_tc(struct net_device *, u8);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue_0(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_1(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues_0(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue_0(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
__inline static unsigned int xgbe_get_max_frame(struct xgbe_prv_data *pdata)
{
  #line 129 
  return (pdata->netdev)->mtu + 22U;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static unsigned int xgbe_usec_to_riwt(struct xgbe_prv_data *pdata, unsigned int usec)
{
  #line 135 
  unsigned long rate;
  #line 136 
  unsigned int ret;
  #line 140 
  rate = pdata->sysclk_rate;
  #line 148 
  ret = (unsigned int)(((unsigned long)usec * (rate / 1000000UL)) / 256UL);
  #line 152 
  return ret;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static unsigned int xgbe_riwt_to_usec(struct xgbe_prv_data *pdata, unsigned int riwt)
{
  #line 158 
  unsigned long rate;
  #line 159 
  unsigned int ret;
  #line 163 
  rate = pdata->sysclk_rate;
  #line 171 
  ret = (unsigned int)((unsigned long)(riwt * 256U) / (rate / 1000000UL));
  #line 175 
  return ret;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_pbl_val(struct xgbe_prv_data *pdata)
{
  #line 180 
  unsigned int pblx8;
  #line 180 
  unsigned int pbl;
  #line 181 
  unsigned int i;
  #line 183 
  pblx8 = 0U;
  #line 184 
  pbl = pdata->pbl;
  #line 186 
  if (pdata->pbl > 32U) {
    #line 187 
    pblx8 = 1U;
    #line 188 
    pbl >>= 3;
  }
  #line 191 
  i = 0U;
  #line 191 
  while (pdata->channel_count > i) {
    {
      #line 192 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs);
      #line 192 
      reg_val &= 4294901759U;
      #line 192 
      reg_val = ((pblx8 << 16) & 65536U) | reg_val;
      #line 192 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs);
    }
    #line 195 
    if ((pdata->channel[i])->tx_ring != (struct xgbe_ring *)0) {
      #line 196 
      u32 reg_val_0 = ioread32((pdata->channel[i])->dma_regs + 4U);
      #line 196 
      reg_val_0 &= 4290838527U;
      #line 196 
      reg_val_0 = ((pbl << 16) & 4128768U) | reg_val_0;
      #line 196 
      iowrite32(reg_val_0,(pdata->channel[i])->dma_regs + 4U);
    }
    #line 199 
    if ((pdata->channel[i])->rx_ring != (struct xgbe_ring *)0) {
      #line 200 
      u32 reg_val_1 = ioread32((pdata->channel[i])->dma_regs + 8U);
      #line 200 
      reg_val_1 &= 4290838527U;
      #line 200 
      reg_val_1 = ((pbl << 16) & 4128768U) | reg_val_1;
      #line 200 
      iowrite32(reg_val_1,(pdata->channel[i])->dma_regs + 8U);
    }
    #line 191 
    i ++;
  }
  #line 204 
  return 0;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_osp_mode(struct xgbe_prv_data *pdata)
{
  #line 209 
  unsigned int i;
  #line 211 
  i = 0U;
  #line 211 
  while (pdata->channel_count > i) {
    #line 212 
    if ((pdata->channel[i])->tx_ring == (struct xgbe_ring *)0) 
                                                               #line 213 
                                                               break;
    {
      #line 215 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs + 4U);
      #line 215 
      reg_val &= 4294967279U;
      #line 215 
      reg_val = ((pdata->tx_osp_mode << 4) & 16U) | reg_val;
      #line 215 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs + 4U);
    }
    #line 211 
    i ++;
  }
  #line 219 
  return 0;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_rsf_mode(struct xgbe_prv_data *pdata, unsigned int val)
{
  #line 224 
  unsigned int i;
  #line 226 
  i = 0U;
  #line 226 
  while (pdata->rx_q_count > i) {
    {
      #line 227 
      u32 reg_val = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
      #line 227 
      reg_val &= 4294967263U;
      #line 227 
      reg_val = ((val << 5) & 32U) | reg_val;
      #line 227 
      iowrite32(reg_val,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
    }
    #line 226 
    i ++;
  }
  #line 229 
  return 0;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_tsf_mode(struct xgbe_prv_data *pdata, unsigned int val)
{
  #line 234 
  unsigned int i;
  #line 236 
  i = 0U;
  #line 236 
  while (pdata->tx_q_count > i) {
    {
      #line 237 
      u32 reg_val = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
      #line 237 
      reg_val &= 4294967293U;
      #line 237 
      reg_val = ((val << 1) & 2U) | reg_val;
      #line 237 
      iowrite32(reg_val,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
    }
    #line 236 
    i ++;
  }
  #line 239 
  return 0;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_rx_threshold(struct xgbe_prv_data *pdata, unsigned int val)
{
  #line 245 
  unsigned int i;
  #line 247 
  i = 0U;
  #line 247 
  while (pdata->rx_q_count > i) {
    {
      #line 248 
      u32 reg_val = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
      #line 248 
      reg_val &= 4294967292U;
      #line 248 
      reg_val = (val & 3U) | reg_val;
      #line 248 
      iowrite32(reg_val,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
    }
    #line 247 
    i ++;
  }
  #line 250 
  return 0;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_tx_threshold(struct xgbe_prv_data *pdata, unsigned int val)
{
  #line 256 
  unsigned int i;
  #line 258 
  i = 0U;
  #line 258 
  while (pdata->tx_q_count > i) {
    {
      #line 259 
      u32 reg_val = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
      #line 259 
      reg_val &= 4294967183U;
      #line 259 
      reg_val = ((val << 4) & 112U) | reg_val;
      #line 259 
      iowrite32(reg_val,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
    }
    #line 258 
    i ++;
  }
  #line 261 
  return 0;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_rx_coalesce(struct xgbe_prv_data *pdata)
{
  #line 266 
  unsigned int i;
  #line 268 
  i = 0U;
  #line 268 
  while (pdata->channel_count > i) {
    #line 269 
    if ((pdata->channel[i])->rx_ring == (struct xgbe_ring *)0) 
                                                               #line 270 
                                                               break;
    {
      #line 272 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs + 60U);
      #line 272 
      reg_val &= 4294967040U;
      #line 272 
      reg_val = (pdata->rx_riwt & 255U) | reg_val;
      #line 272 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs + 60U);
    }
    #line 268 
    i ++;
  }
  #line 276 
  return 0;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_tx_coalesce(struct xgbe_prv_data *pdata)
{
  #line 281 
  return 0;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_rx_buffer_size(struct xgbe_prv_data *pdata)
{
  #line 286 
  unsigned int i;
  #line 288 
  i = 0U;
  #line 288 
  while (pdata->channel_count > i) {
    #line 289 
    if ((pdata->channel[i])->rx_ring == (struct xgbe_ring *)0) 
                                                               #line 290 
                                                               break;
    {
      #line 292 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs + 8U);
      #line 292 
      reg_val &= 4294934529U;
      #line 292 
      reg_val = ((pdata->rx_buf_size << 1) & 32766U) | reg_val;
      #line 292 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs + 8U);
    }
    #line 288 
    i ++;
  }
  #line 295 
  return;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_tso_mode(struct xgbe_prv_data *pdata)
{
  #line 299 
  unsigned int i;
  #line 301 
  i = 0U;
  #line 301 
  while (pdata->channel_count > i) {
    #line 302 
    if ((pdata->channel[i])->tx_ring == (struct xgbe_ring *)0) 
                                                               #line 303 
                                                               break;
    {
      #line 305 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs + 4U);
      #line 305 
      reg_val &= 4294963199U;
      #line 305 
      reg_val |= 4096U;
      #line 305 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs + 4U);
    }
    #line 301 
    i ++;
  }
  #line 308 
  return;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_sph_mode(struct xgbe_prv_data *pdata)
{
  #line 311 
  unsigned int i;
  #line 313 
  i = 0U;
  #line 313 
  while (pdata->channel_count > i) {
    #line 314 
    if ((pdata->channel[i])->rx_ring == (struct xgbe_ring *)0) 
                                                               #line 315 
                                                               break;
    {
      #line 317 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs);
      #line 317 
      reg_val &= 4278190079U;
      #line 317 
      reg_val |= 16777216U;
      #line 317 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs);
    }
    #line 313 
    i ++;
  }
  {
    #line 320 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 4U);
    #line 320 
    reg_val_0 &= 4294938623U;
    #line 320 
    reg_val_0 |= 8192U;
    #line 320 
    iowrite32(reg_val_0,pdata->xgmac_regs + 4U);
  }
  #line 322 
  return;
}

#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_write_rss_reg(struct xgbe_prv_data *pdata, unsigned int type, unsigned int index, unsigned int val)
{
  #line 326 
  unsigned int wait;
  #line 327 
  int ret = 0;
  #line 329 
  cif_mutex_lock_rss_mutex_of_xgbe_prv_data(& pdata->rss_mutex);
  #line 331 
  if ((ioread32(pdata->xgmac_regs + 3208U) & 1U) != 0U) {
    #line 332 
    ret = -16;
    #line 333 
    goto unlock;
  }
  #line 336 
  iowrite32(val,pdata->xgmac_regs + 3212U);
  {
    #line 338 
    u32 reg_val = ioread32(pdata->xgmac_regs + 3208U);
    #line 338 
    reg_val &= 4294902015U;
    #line 338 
    reg_val = ((index << 8) & 65535U) | reg_val;
    #line 338 
    iowrite32(reg_val,pdata->xgmac_regs + 3208U);
  }
  {
    #line 339 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 3208U);
    #line 339 
    reg_val_0 &= 4294967291U;
    #line 339 
    reg_val_0 = ((type << 2) & 4U) | reg_val_0;
    #line 339 
    iowrite32(reg_val_0,pdata->xgmac_regs + 3208U);
  }
  {
    #line 340 
    u32 reg_val_1 = ioread32(pdata->xgmac_regs + 3208U);
    #line 340 
    reg_val_1 &= 4294967293U;
    #line 340 
    reg_val_1 = reg_val_1;
    #line 340 
    iowrite32(reg_val_1,pdata->xgmac_regs + 3208U);
  }
  {
    #line 341 
    u32 reg_val_2 = ioread32(pdata->xgmac_regs + 3208U);
    #line 341 
    reg_val_2 &= 4294967294U;
    #line 341 
    reg_val_2 |= 1U;
    #line 341 
    iowrite32(reg_val_2,pdata->xgmac_regs + 3208U);
  }
  #line 343 
  wait = 1000U;
  #line 344 
  while (1) {
    #line 344 
    unsigned int tmp_5;
    #line 344 
    tmp_5 = wait;
    #line 344 
    wait --;
    #line 344 
    ;
    #line 344 
    if (! (tmp_5 != 0U)) 
                         #line 344 
                         break;
    {
      #line 345 
      if ((ioread32(pdata->xgmac_regs + 3208U) & 1U) == 0U) 
                                                            #line 346 
                                                            goto unlock;
      #line 348 
      usleep_range(1000UL,1500UL);
    }
  }
  #line 351 
  ret = -16;
  #line 353 
  unlock: 
          #line 353 
  ;
  #line 354 
  cif_mutex_unlock_rss_mutex_of_xgbe_prv_data(& pdata->rss_mutex);
  #line 356 
  return ret;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_write_rss_hash_key(struct xgbe_prv_data *pdata)
{
  #line 363 
  int ret;
  #line 361 
  unsigned int key_regs = 10U;
  #line 362 
  unsigned int *key = (unsigned int *)(& pdata->rss_key);
  #line 365 
  while (1) {
    #line 365 
    unsigned int tmp_0;
    #line 365 
    tmp_0 = key_regs;
    #line 365 
    key_regs --;
    #line 365 
    ;
    #line 365 
    if (! (tmp_0 != 0U)) 
                         #line 365 
                         break;
    {
      #line 367 
      unsigned int *tmp;
      #line 367 
      tmp = key;
      #line 367 
      key ++;
      #line 366 
      ;
      #line 366 
      ;
      #line 366 
      ;
      #line 366 
      ret = xgbe_write_rss_reg(pdata,1U,key_regs,*tmp);
      #line 368 
      if (ret != 0) 
                    #line 369 
                    return ret;
    }
  }
  #line 372 
  return 0;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_write_rss_lookup_table(struct xgbe_prv_data *pdata)
{
  #line 377 
  unsigned int i;
  #line 378 
  int ret;
  #line 380 
  i = 0U;
  #line 380 
  while (i <= 255U) {
    #line 381 
    ret = xgbe_write_rss_reg(pdata,0U,i,pdata->rss_table[i]);
    #line 384 
    if (ret != 0) 
                  #line 385 
                  return ret;
    #line 380 
    i ++;
  }
  #line 388 
  return 0;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_set_rss_hash_key(struct xgbe_prv_data *pdata, u8 *key)
{
  #line 393 
  memcpy((void *)(& pdata->rss_key),(void *)key,40UL);
  #line 395 
  return xgbe_write_rss_hash_key(pdata);
}

#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_set_rss_lookup_table(struct xgbe_prv_data *pdata, u32 *table)
{
  #line 401 
  unsigned int i;
  #line 403 
  i = 0U;
  #line 403 
  while (i <= 255U) {
    #line 404 
    pdata->rss_table[i] &= 4294967280U;
    #line 404 
    pdata->rss_table[i] |= *(table + (unsigned long)i) & 15U;
    #line 403 
    i ++;
  }
  #line 406 
  return xgbe_write_rss_lookup_table(pdata);
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_enable_rss(struct xgbe_prv_data *pdata)
{
  #line 411 
  int ret;
  #line 413 
  if (pdata->hw_feat.rss == 0U) 
                                #line 414 
                                return -95;
  #line 417 
  ret = xgbe_write_rss_hash_key(pdata);
  #line 418 
  if (ret != 0) 
                #line 419 
                return ret;
  #line 422 
  ret = xgbe_write_rss_lookup_table(pdata);
  #line 423 
  if (ret != 0) 
                #line 424 
                return ret;
  #line 427 
  iowrite32(pdata->rss_options,pdata->xgmac_regs + 3200U);
  {
    #line 430 
    u32 reg_val = ioread32(pdata->xgmac_regs + 3200U);
    #line 430 
    reg_val &= 4294967294U;
    #line 430 
    reg_val |= 1U;
    #line 430 
    iowrite32(reg_val,pdata->xgmac_regs + 3200U);
  }
  #line 432 
  return 0;
}

#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_disable_rss(struct xgbe_prv_data *pdata)
{
  #line 437 
  if (pdata->hw_feat.rss == 0U) 
                                #line 438 
                                return -95;
  {
    #line 440 
    u32 reg_val = ioread32(pdata->xgmac_regs + 3200U);
    #line 440 
    reg_val &= 4294967294U;
    #line 440 
    reg_val = reg_val;
    #line 440 
    iowrite32(reg_val,pdata->xgmac_regs + 3200U);
  }
  #line 442 
  return 0;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_rss(struct xgbe_prv_data *pdata)
{
  #line 447 
  int ret;
  #line 449 
  if (pdata->hw_feat.rss == 0U) 
                                #line 450 
                                return;
  #line 452 
  if (((pdata->netdev)->features & 274877906944ULL) != 0ULL) 
                                                             #line 453 
                                                             ret = xgbe_enable_rss(pdata); else 
                                                                    #line 455 
                                                                    ret = xgbe_disable_rss(pdata);
  #line 457 
  if (ret != 0) 
                #line 458 
                netdev_err(pdata->netdev,(char *)"error configuring RSS, RSS disabled\n");
  #line 460 
  return;
}

#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static bool xgbe_is_pfc_queue(struct xgbe_prv_data *pdata, unsigned int queue)
{
  #line 465 
  unsigned int prio;
  #line 465 
  unsigned int tc;
  #line 467 
  prio = 0U;
  #line 467 
  while (prio <= 7U) {
    #line 469 
    if (pdata->prio2q_map[prio] != queue) 
                                          #line 470 
                                          goto __Cont;
    #line 473 
    tc = (unsigned int)(pdata->ets)->prio_tc[prio];
    #line 476 
    if ((((int)(pdata->pfc)->pfc_en >> tc) & 1) != 0) 
                                                      #line 477 
                                                      return (_Bool)1;
    #line 467 
    __Cont: 
            #line 467 
    prio ++;
  }
  #line 480 
  return (_Bool)0;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_set_vxlan_id(struct xgbe_prv_data *pdata)
{
  {
    #line 486 
    u32 reg_val = ioread32(pdata->xgmac_regs + 224U);
    #line 486 
    reg_val &= 4294901760U;
    #line 486 
    reg_val = (unsigned int)pdata->vxlan_port | reg_val;
    #line 486 
    iowrite32(reg_val,pdata->xgmac_regs + 224U);
  }
  #line 488 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 488 
    bool branch;
    #line 488 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_set_vxlan_id", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"VXLAN tunnel id set to %hx\n", .lineno = (unsigned int)488U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 488 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 488 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 488 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,pdata->netdev,(char *)"VXLAN tunnel id set to %hx\n",(int)pdata->vxlan_port);
  }
  #line 490 
  return;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_enable_vxlan(struct xgbe_prv_data *pdata)
{
  #line 494 
  if (pdata->hw_feat.vxn == 0U) 
                                #line 495 
                                return;
  #line 498 
  xgbe_set_vxlan_id(pdata);
  {
    #line 501 
    u32 reg_val = ioread32(pdata->xgmac_regs + 8U);
    #line 501 
    reg_val &= 4290772991U;
    #line 501 
    reg_val |= 4194304U;
    #line 501 
    iowrite32(reg_val,pdata->xgmac_regs + 8U);
  }
  {
    #line 504 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs);
    #line 504 
    reg_val_0 &= 4261412863U;
    #line 504 
    reg_val_0 = reg_val_0;
    #line 504 
    iowrite32(reg_val_0,pdata->xgmac_regs);
  }
  {
    #line 505 
    u32 reg_val_1 = ioread32(pdata->xgmac_regs);
    #line 505 
    reg_val_1 &= 4278190079U;
    #line 505 
    reg_val_1 |= 16777216U;
    #line 505 
    iowrite32(reg_val_1,pdata->xgmac_regs);
  }
  #line 507 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 507 
    bool branch;
    #line 507 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_enable_vxlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"VXLAN acceleration enabled\n", .lineno = (unsigned int)507U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 507 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 507 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 507 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,pdata->netdev,(char *)"VXLAN acceleration enabled\n");
  }
  #line 509 
  return;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_disable_vxlan(struct xgbe_prv_data *pdata)
{
  #line 512 
  if (pdata->hw_feat.vxn == 0U) 
                                #line 513 
                                return;
  {
    #line 516 
    u32 reg_val = ioread32(pdata->xgmac_regs);
    #line 516 
    reg_val &= 4278190079U;
    #line 516 
    reg_val = reg_val;
    #line 516 
    iowrite32(reg_val,pdata->xgmac_regs);
  }
  {
    #line 519 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 8U);
    #line 519 
    reg_val_0 &= 4290772991U;
    #line 519 
    reg_val_0 = reg_val_0;
    #line 519 
    iowrite32(reg_val_0,pdata->xgmac_regs + 8U);
  }
  {
    #line 522 
    u32 reg_val_1 = ioread32(pdata->xgmac_regs + 224U);
    #line 522 
    reg_val_1 &= 4294901760U;
    #line 522 
    reg_val_1 = reg_val_1;
    #line 522 
    iowrite32(reg_val_1,pdata->xgmac_regs + 224U);
  }
  #line 524 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 524 
    bool branch;
    #line 524 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_disable_vxlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"VXLAN acceleration disabled\n", .lineno = (unsigned int)524U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 524 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 524 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 524 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,pdata->netdev,(char *)"VXLAN acceleration disabled\n");
  }
  #line 526 
  return;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_disable_tx_flow_control(struct xgbe_prv_data *pdata)
{
  #line 539 
  unsigned int tmp_0;
  #line 539 
  unsigned int __UNIQUE_ID___x444;
  #line 529 
  unsigned int max_q_count;
  #line 529 
  unsigned int q_count;
  #line 530 
  unsigned int reg;
  #line 530 
  unsigned int reg_val;
  #line 531 
  unsigned int i;
  #line 534 
  i = 0U;
  #line 534 
  while (pdata->rx_q_count > i) {
    {
      #line 535 
      u32 reg_val_0 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
      #line 535 
      reg_val_0 &= 4294967167U;
      #line 535 
      reg_val_0 = reg_val_0;
      #line 535 
      iowrite32(reg_val_0,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
    }
    #line 534 
    i ++;
  }
  #line 538 
  max_q_count = 8U;
  {
    #line 539 
    __UNIQUE_ID___x444 = pdata->tx_q_count;
    #line 539 
    unsigned int __UNIQUE_ID___y445 = max_q_count;
    #line 539 
    if (__UNIQUE_ID___x444 < __UNIQUE_ID___y445) 
                                                 #line 539 
                                                 tmp_0 = __UNIQUE_ID___x444; else 
                                                                    #line 539 
                                                                    tmp_0 = __UNIQUE_ID___y445;
    }
  #line 539 
  q_count = tmp_0;
  #line 540 
  reg = 112U;
  #line 541 
  i = 0U;
  #line 541 
  while (i < q_count) {
    #line 542 
    reg_val = ioread32(pdata->xgmac_regs + (unsigned long)reg);
    #line 543 
    reg_val &= 4294967293U;
    #line 543 
    reg_val = reg_val;
    #line 544 
    iowrite32(reg_val,pdata->xgmac_regs + (unsigned long)reg);
    #line 546 
    reg += 4U;
    #line 541 
    i ++;
  }
  #line 549 
  return 0;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_enable_tx_flow_control(struct xgbe_prv_data *pdata)
{
  #line 583 
  unsigned int __UNIQUE_ID___x447;
  #line 583 
  unsigned int tmp_3;
  #line 556 
  unsigned int max_q_count;
  #line 556 
  unsigned int q_count;
  #line 557 
  unsigned int reg;
  #line 557 
  unsigned int reg_val;
  #line 558 
  unsigned int i;
  #line 554 
  struct ieee_pfc *pfc = pdata->pfc;
  #line 555 
  struct ieee_ets *ets = pdata->ets;
  #line 561 
  i = 0U;
  #line 561 
  while (pdata->rx_q_count > i) {
    {
      #line 562 
      unsigned int ehfc = 0U;
      #line 564 
      if (pdata->rx_rfd[i] != 0U) 
        #line 566 
        if (pfc != (struct ieee_pfc *)0 && ets != (struct ieee_ets *)0) {
          #line 567 
          if ((int)xgbe_is_pfc_queue(pdata,i) != 0) 
                                                    #line 568 
                                                    ehfc = 1U;
        }
        else 
             #line 570 
             ehfc = 1U;
      {
        #line 574 
        u32 reg_val_0 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
        #line 574 
        reg_val_0 &= 4294967167U;
        #line 574 
        reg_val_0 = ((ehfc << 7) & 255U) | reg_val_0;
        #line 574 
        iowrite32(reg_val_0,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
      }
      #line 576 
      if ((pdata->msg_enable & 1U) != 0U) {
        #line 576 
        bool branch;
        #line 576 
        struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_enable_tx_flow_control", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"flow control %s for RXq%u\n", .lineno = (unsigned int)576U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 576 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
        #line 576 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 576 
          char *tmp_1;
          #line 576 
          ;
          #line 576 
          if (ehfc != 0U) 
                          #line 576 
                          tmp_1 = (char *)"enabled"; else 
                                                          #line 576 
                                                          tmp_1 = (char *)"disabled";
          #line 576 
          ;
          #line 576 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,pdata->netdev,(char *)"flow control %s for RXq%u\n",tmp_1,i);
        }
      }
    }
    #line 561 
    i ++;
  }
  #line 582 
  max_q_count = 8U;
  {
    #line 583 
    __UNIQUE_ID___x447 = pdata->tx_q_count;
    #line 583 
    unsigned int __UNIQUE_ID___y448 = max_q_count;
    #line 583 
    if (__UNIQUE_ID___x447 < __UNIQUE_ID___y448) 
                                                 #line 583 
                                                 tmp_3 = __UNIQUE_ID___x447; else 
                                                                    #line 583 
                                                                    tmp_3 = __UNIQUE_ID___y448;
    }
  #line 583 
  q_count = tmp_3;
  #line 584 
  reg = 112U;
  #line 585 
  i = 0U;
  #line 585 
  while (i < q_count) {
    #line 586 
    reg_val = ioread32(pdata->xgmac_regs + (unsigned long)reg);
    #line 589 
    reg_val &= 4294967293U;
    #line 589 
    reg_val |= 2U;
    #line 591 
    reg_val &= 65535U;
    #line 591 
    reg_val |= 4294901760U;
    #line 593 
    iowrite32(reg_val,pdata->xgmac_regs + (unsigned long)reg);
    #line 595 
    reg += 4U;
    #line 585 
    i ++;
  }
  #line 598 
  return 0;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_disable_rx_flow_control(struct xgbe_prv_data *pdata)
{
  {
    #line 603 
    u32 reg_val = ioread32(pdata->xgmac_regs + 144U);
    #line 603 
    reg_val &= 4294967294U;
    #line 603 
    reg_val = reg_val;
    #line 603 
    iowrite32(reg_val,pdata->xgmac_regs + 144U);
  }
  #line 605 
  return 0;
}

#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_enable_rx_flow_control(struct xgbe_prv_data *pdata)
{
  {
    #line 610 
    u32 reg_val = ioread32(pdata->xgmac_regs + 144U);
    #line 610 
    reg_val &= 4294967294U;
    #line 610 
    reg_val |= 1U;
    #line 610 
    iowrite32(reg_val,pdata->xgmac_regs + 144U);
  }
  #line 612 
  return 0;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_tx_flow_control(struct xgbe_prv_data *pdata)
{
  #line 617 
  struct ieee_pfc *pfc = pdata->pfc;
  #line 619 
  if (pdata->tx_pause != 0U || pfc != (struct ieee_pfc *)0 && (unsigned int)pfc->pfc_en != 0U) 
    #line 620 
    xgbe_enable_tx_flow_control(pdata); else 
                                             #line 622 
                                             xgbe_disable_tx_flow_control(pdata);
  #line 624 
  return 0;
}

#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_rx_flow_control(struct xgbe_prv_data *pdata)
{
  #line 629 
  struct ieee_pfc *pfc = pdata->pfc;
  #line 631 
  if (pdata->rx_pause != 0U || pfc != (struct ieee_pfc *)0 && (unsigned int)pfc->pfc_en != 0U) 
    #line 632 
    xgbe_enable_rx_flow_control(pdata); else 
                                             #line 634 
                                             xgbe_disable_rx_flow_control(pdata);
  #line 636 
  return 0;
}

#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_flow_control(struct xgbe_prv_data *pdata)
{
  #line 641 
  struct ieee_pfc *pfc = pdata->pfc;
  #line 643 
  xgbe_config_tx_flow_control(pdata);
  #line 644 
  xgbe_config_rx_flow_control(pdata);
  {
    #line 646 
    u32 reg_val = ioread32(pdata->xgmac_regs + 144U);
    #line 646 
    reg_val &= 4294967039U;
    #line 646 
    reg_val = ((unsigned int)(((pfc != (struct ieee_pfc *)0 && (unsigned int)pfc->pfc_en != 0U) != 0) << 8) & 256U) | reg_val;
    #line 646 
    iowrite32(reg_val,pdata->xgmac_regs + 144U);
  }
  #line 648 
  return;
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_enable_dma_interrupts(struct xgbe_prv_data *pdata)
{
  #line 652 
  struct xgbe_channel *channel;
  #line 653 
  unsigned int i;
  #line 653 
  unsigned int ver;
  #line 656 
  if (pdata->channel_irq_mode != 0U) {
    #line 657 
    u32 reg_val = ioread32(pdata->xgmac_regs + 12288U);
    #line 657 
    reg_val &= 4294955007U;
    #line 657 
    reg_val = ((pdata->channel_irq_mode << 12) & 12288U) | reg_val;
    #line 657 
    iowrite32(reg_val,pdata->xgmac_regs + 12288U);
  }
  #line 660 
  ver = pdata->hw_feat.version & 255U;
  #line 662 
  i = 0U;
  #line 662 
  while (pdata->channel_count > i) {
    {
      #line 663 
      channel = pdata->channel[i];
      #line 666 
      ;
      #line 666 
      iowrite32(ioread32(channel->dma_regs + 96U),channel->dma_regs + 96U);
      #line 670 
      channel->curr_ier = 0U;
      #line 677 
      if (ver <= 32U) {
        #line 678 
        channel->curr_ier &= 4294901759U;
        #line 678 
        channel->curr_ier |= 65536U;
        #line 679 
        channel->curr_ier &= 4294934527U;
        #line 679 
        channel->curr_ier |= 32768U;
      }
      else {
        #line 681 
        channel->curr_ier &= 4294934527U;
        #line 681 
        channel->curr_ier |= 32768U;
        #line 682 
        channel->curr_ier &= 4294950911U;
        #line 682 
        channel->curr_ier |= 16384U;
      }
      #line 684 
      channel->curr_ier &= 4294963199U;
      #line 684 
      channel->curr_ier |= 4096U;
      #line 686 
      if (channel->tx_ring != (struct xgbe_ring *)0) 
        #line 692 
        if (pdata->per_channel_irq == 0U || pdata->channel_irq_mode != 0U) {
          #line 693 
          channel->curr_ier &= 4294967294U;
          #line 693 
          channel->curr_ier |= 1U;
        }
      #line 696 
      if (channel->rx_ring != (struct xgbe_ring *)0) {
        #line 703 
        channel->curr_ier &= 4294967167U;
        #line 703 
        channel->curr_ier |= 128U;
        #line 704 
        if (pdata->per_channel_irq == 0U || pdata->channel_irq_mode != 0U) {
          #line 705 
          channel->curr_ier &= 4294967231U;
          #line 705 
          channel->curr_ier |= 64U;
        }
      }
      #line 709 
      iowrite32(channel->curr_ier,channel->dma_regs + 56U);
    }
    #line 662 
    i ++;
  }
  #line 711 
  return;
}

#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_enable_mtl_interrupts(struct xgbe_prv_data *pdata)
{
  #line 718 
  unsigned int __UNIQUE_ID___x449;
  #line 718 
  unsigned int tmp;
  #line 715 
  unsigned int mtl_q_isr;
  #line 716 
  unsigned int q_count;
  #line 716 
  unsigned int i;
  {
    #line 718 
    __UNIQUE_ID___x449 = pdata->hw_feat.tx_q_cnt;
    #line 718 
    unsigned int __UNIQUE_ID___y450 = pdata->hw_feat.rx_q_cnt;
    #line 718 
    if (__UNIQUE_ID___x449 > __UNIQUE_ID___y450) 
                                                 #line 718 
                                                 tmp = __UNIQUE_ID___x449; else 
                                                                    #line 718 
                                                                    tmp = __UNIQUE_ID___y450;
    }
  #line 718 
  q_count = tmp;
  #line 719 
  i = 0U;
  #line 719 
  while (i < q_count) {
    #line 721 
    mtl_q_isr = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4468U));
    #line 722 
    iowrite32(mtl_q_isr,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4468U));
    #line 725 
    iowrite32(0U,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4464U));
    #line 719 
    i ++;
  }
  #line 727 
  return;
}

#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_enable_mac_interrupts(struct xgbe_prv_data *pdata)
{
  #line 731 
  unsigned int mac_ier = 0U;
  #line 734 
  mac_ier &= 4294963199U;
  #line 734 
  mac_ier |= 4096U;
  #line 736 
  iowrite32(mac_ier,pdata->xgmac_regs + 180U);
  {
    #line 739 
    u32 reg_val = ioread32(pdata->xgmac_regs + 2060U);
    #line 739 
    reg_val &= 4286578688U;
    #line 739 
    reg_val |= 8388607U;
    #line 739 
    iowrite32(reg_val,pdata->xgmac_regs + 2060U);
  }
  {
    #line 740 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 2064U);
    #line 740 
    reg_val_0 &= 4294705152U;
    #line 740 
    reg_val_0 |= 262143U;
    #line 740 
    iowrite32(reg_val_0,pdata->xgmac_regs + 2064U);
  }
  {
    #line 743 
    u32 reg_val_1 = ioread32(pdata->xgmac_regs + 536U);
    #line 743 
    reg_val_1 &= 4294963199U;
    #line 743 
    reg_val_1 |= 4096U;
    #line 743 
    iowrite32(reg_val_1,pdata->xgmac_regs + 536U);
  }
  #line 745 
  return;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_enable_ecc_interrupts(struct xgbe_prv_data *pdata)
{
  #line 748 
  unsigned int ecc_isr;
  #line 748 
  unsigned int ecc_ier = 0U;
  #line 750 
  if ((pdata->vdata)->ecc_support == 0U) 
                                         #line 751 
                                         return;
  #line 754 
  ecc_isr = ioread32(pdata->xprop_regs + 48U);
  #line 755 
  iowrite32(ecc_isr,pdata->xprop_regs + 48U);
  #line 758 
  ecc_ier &= 4294967293U;
  #line 758 
  ecc_ier |= 2U;
  #line 759 
  ecc_ier &= 4294967294U;
  #line 759 
  ecc_ier |= 1U;
  #line 760 
  ecc_ier &= 4294967287U;
  #line 760 
  ecc_ier |= 8U;
  #line 761 
  ecc_ier &= 4294967291U;
  #line 761 
  ecc_ier |= 4U;
  #line 762 
  ecc_ier &= 4294967263U;
  #line 762 
  ecc_ier |= 32U;
  #line 763 
  ecc_ier &= 4294967279U;
  #line 763 
  ecc_ier |= 16U;
  #line 765 
  iowrite32(ecc_ier,pdata->xprop_regs + 52U);
  #line 766 
  return;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_disable_ecc_ded(struct xgbe_prv_data *pdata)
{
  #line 770 
  unsigned int ecc_ier;
  #line 772 
  ecc_ier = ioread32(pdata->xprop_regs + 52U);
  #line 775 
  ecc_ier &= 4294967293U;
  #line 775 
  ecc_ier = ecc_ier;
  #line 776 
  ecc_ier &= 4294967287U;
  #line 776 
  ecc_ier = ecc_ier;
  #line 777 
  ecc_ier &= 4294967263U;
  #line 777 
  ecc_ier = ecc_ier;
  #line 779 
  iowrite32(ecc_ier,pdata->xprop_regs + 52U);
  #line 780 
  return;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_disable_ecc_sec(struct xgbe_prv_data *pdata, enum xgbe_ecc_sec sec)
{
  #line 785 
  unsigned int ecc_ier;
  #line 787 
  ecc_ier = ioread32(pdata->xprop_regs + 52U);
  #line 790 
  switch ((unsigned int)sec) {
    #line 791 
    case (unsigned int)0: 
                          #line 791 
    ;
    #line 792 
    ecc_ier &= 4294967294U;
    #line 792 
    ecc_ier = ecc_ier;
    #line 793 
    break;
    #line 794 
    case (unsigned int)1: 
                          #line 794 
    ;
    #line 795 
    ecc_ier &= 4294967291U;
    #line 795 
    ecc_ier = ecc_ier;
    #line 796 
    break;
    #line 797 
    case (unsigned int)2: 
                          #line 797 
    ;
    #line 798 
    ecc_ier &= 4294967279U;
    #line 798 
    ecc_ier = ecc_ier;
    #line 799 
    break;
  }
  #line 802 
  iowrite32(ecc_ier,pdata->xprop_regs + 52U);
  #line 803 
  return;
}

#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_set_speed(struct xgbe_prv_data *pdata, int speed)
{
  #line 807 
  unsigned int ss;
  #line 809 
  switch (speed) {
    #line 810 
    case 1000: 
               #line 810 
    ;
    #line 811 
    ss = 3U;
    #line 812 
    break;
    #line 813 
    case 2500: 
               #line 813 
    ;
    #line 814 
    ss = 2U;
    #line 815 
    break;
    #line 816 
    case 10000: 
                #line 816 
    ;
    #line 817 
    ss = 0U;
    #line 818 
    break;
    #line 819 
    default: 
             #line 819 
    ;
    #line 820 
    return -22;
  }
  #line 823 
  ;
  #line 823 
  if (((ioread32(pdata->xgmac_regs) >> 29) & 3U) != ss) {
    #line 824 
    u32 reg_val = ioread32(pdata->xgmac_regs);
    #line 824 
    reg_val &= 2684354559U;
    #line 824 
    reg_val = ((ss << 29) & 1610612736U) | reg_val;
    #line 824 
    iowrite32(reg_val,pdata->xgmac_regs);
  }
  #line 826 
  return 0;
}

#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_enable_rx_vlan_stripping(struct xgbe_prv_data *pdata)
{
  {
    #line 832 
    u32 reg_val = ioread32(pdata->xgmac_regs + 80U);
    #line 832 
    reg_val &= 4278190079U;
    #line 832 
    reg_val |= 16777216U;
    #line 832 
    iowrite32(reg_val,pdata->xgmac_regs + 80U);
  }
  {
    #line 835 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 80U);
    #line 835 
    reg_val_0 &= 4293918719U;
    #line 835 
    reg_val_0 |= 1048576U;
    #line 835 
    iowrite32(reg_val_0,pdata->xgmac_regs + 80U);
  }
  {
    #line 838 
    u32 reg_val_1 = ioread32(pdata->xgmac_regs + 80U);
    #line 838 
    reg_val_1 &= 4294443007U;
    #line 838 
    reg_val_1 = reg_val_1;
    #line 838 
    iowrite32(reg_val_1,pdata->xgmac_regs + 80U);
  }
  {
    #line 841 
    u32 reg_val_2 = ioread32(pdata->xgmac_regs + 80U);
    #line 841 
    reg_val_2 &= 4294705151U;
    #line 841 
    reg_val_2 = reg_val_2;
    #line 841 
    iowrite32(reg_val_2,pdata->xgmac_regs + 80U);
  }
  {
    #line 844 
    u32 reg_val_3 = ioread32(pdata->xgmac_regs + 80U);
    #line 844 
    reg_val_3 &= 4288675839U;
    #line 844 
    reg_val_3 |= 6291456U;
    #line 844 
    iowrite32(reg_val_3,pdata->xgmac_regs + 80U);
  }
  #line 846 
  return 0;
}

#line 849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_disable_rx_vlan_stripping(struct xgbe_prv_data *pdata)
{
  {
    #line 851 
    u32 reg_val = ioread32(pdata->xgmac_regs + 80U);
    #line 851 
    reg_val &= 4288675839U;
    #line 851 
    reg_val = reg_val;
    #line 851 
    iowrite32(reg_val,pdata->xgmac_regs + 80U);
  }
  #line 853 
  return 0;
}

#line 856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_enable_rx_vlan_filtering(struct xgbe_prv_data *pdata)
{
  {
    #line 859 
    u32 reg_val = ioread32(pdata->xgmac_regs + 8U);
    #line 859 
    reg_val &= 4294901759U;
    #line 859 
    reg_val |= 65536U;
    #line 859 
    iowrite32(reg_val,pdata->xgmac_regs + 8U);
  }
  {
    #line 862 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 80U);
    #line 862 
    reg_val_0 &= 4261412863U;
    #line 862 
    reg_val_0 |= 33554432U;
    #line 862 
    iowrite32(reg_val_0,pdata->xgmac_regs + 80U);
  }
  {
    #line 865 
    u32 reg_val_1 = ioread32(pdata->xgmac_regs + 80U);
    #line 865 
    reg_val_1 &= 4294836223U;
    #line 865 
    reg_val_1 = reg_val_1;
    #line 865 
    iowrite32(reg_val_1,pdata->xgmac_regs + 80U);
  }
  {
    #line 868 
    u32 reg_val_2 = ioread32(pdata->xgmac_regs + 80U);
    #line 868 
    reg_val_2 &= 4294901759U;
    #line 868 
    reg_val_2 |= 65536U;
    #line 868 
    iowrite32(reg_val_2,pdata->xgmac_regs + 80U);
  }
  {
    #line 876 
    u32 reg_val_3 = ioread32(pdata->xgmac_regs + 80U);
    #line 876 
    reg_val_3 &= 4294901760U;
    #line 876 
    reg_val_3 |= 1U;
    #line 876 
    iowrite32(reg_val_3,pdata->xgmac_regs + 80U);
  }
  #line 878 
  return 0;
}

#line 881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_disable_rx_vlan_filtering(struct xgbe_prv_data *pdata)
{
  {
    #line 884 
    u32 reg_val = ioread32(pdata->xgmac_regs + 8U);
    #line 884 
    reg_val &= 4294901759U;
    #line 884 
    reg_val = reg_val;
    #line 884 
    iowrite32(reg_val,pdata->xgmac_regs + 8U);
  }
  #line 886 
  return 0;
}

#line 889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static u32 xgbe_vid_crc32_le(__le16 vid_le)
{
  #line 895 
  int i;
  #line 895 
  int bits;
  #line 891 
  u32 crc = 4294967295U;
  #line 892 
  u32 temp = 0U;
  #line 893 
  unsigned char *data = (unsigned char *)(& vid_le);
  #line 894 
  unsigned char data_byte = (unsigned char)0U;
  #line 897 
  bits = get_bitmask_order(4095U);
  #line 898 
  i = 0;
  #line 898 
  while (i < bits) {
    #line 899 
    if (((unsigned int)i & 7U) == 0U) 
                                      #line 900 
                                      data_byte = *(data + (unsigned long)(i / 8));
    #line 902 
    temp = ((crc & 1U) ^ (unsigned int)data_byte) & 1U;
    #line 903 
    crc >>= 1;
    #line 904 
    data_byte = (unsigned char)((int)data_byte >> 1);
    #line 906 
    if (temp != 0U) 
                    #line 907 
                    crc ^= 3988292384U;
    #line 898 
    i ++;
  }
  #line 910 
  return crc;
}

#line 913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_update_vlan_hash_table(struct xgbe_prv_data *pdata)
{
  #line 915 
  u32 crc;
  #line 916 
  u16 vid;
  #line 917 
  __le16 vid_le;
  #line 918 
  u16 vlan_hash_table = (unsigned short)0U;
  #line 921 
  vid = (unsigned short)cif_find_first_bit((unsigned long *)(& pdata->active_vlans),4096UL);
  #line 921 
  while ((unsigned int)vid <= 4095U) {
    {
      #line 924 
      u32 ___x;
      #line 924 
      u32 tmp_4;
      #line 923 
      vid_le = vid;
      {
        #line 924 
        u32 __x = ~ xgbe_vid_crc32_le((unsigned short)((int)vid_le));
        #line 924 
        if (0 != 0) {
          #line 924 
          ___x = __x;
          #line 924 
          ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
          #line 924 
          ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
          #line 924 
          ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
          #line 924 
          ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
          #line 924 
          ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
          #line 924 
          tmp_4 = ___x;
        }
        else 
             #line 924 
             tmp_4 = __bitrev32(__x);
        }
      #line 924 
      crc = tmp_4 >> 28;
      #line 926 
      vlan_hash_table = (unsigned short)((1 << crc) | (int)vlan_hash_table);
    }
    #line 921 
    vid = (unsigned short)cif_find_next_bit((unsigned long *)(& pdata->active_vlans),4096UL,
                          (unsigned long)((int)vid + 1));
  }
  {
    #line 930 
    u32 reg_val = ioread32(pdata->xgmac_regs + 88U);
    #line 930 
    reg_val &= 4294901760U;
    #line 930 
    reg_val = (unsigned int)vlan_hash_table | reg_val;
    #line 930 
    iowrite32(reg_val,pdata->xgmac_regs + 88U);
  }
  #line 932 
  return 0;
}

#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_set_promiscuous_mode(struct xgbe_prv_data *pdata, unsigned int enable)
{
  #line 938 
  unsigned int val = (unsigned int)(enable != 0U);
  #line 940 
  ;
  #line 940 
  if ((ioread32(pdata->xgmac_regs + 8U) & 1U) == val) 
                                                      #line 941 
                                                      return 0;
  #line 943 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 943 
    bool branch;
    #line 943 
    struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_set_promiscuous_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"%s promiscuous mode\n", .lineno = (unsigned int)943U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 943 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
    #line 943 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 943 
      char *tmp_0;
      #line 943 
      if (enable != 0U) 
                        #line 943 
                        tmp_0 = (char *)"entering"; else 
                                                         #line 943 
                                                         tmp_0 = (char *)"leaving";
      #line 943 
      ;
      #line 943 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,pdata->netdev,(char *)"%s promiscuous mode\n",tmp_0);
    }
  }
  {
    #line 945 
    u32 reg_val = ioread32(pdata->xgmac_regs + 8U);
    #line 945 
    reg_val &= 4294967294U;
    #line 945 
    reg_val = (val & 1U) | reg_val;
    #line 945 
    iowrite32(reg_val,pdata->xgmac_regs + 8U);
  }
  #line 948 
  if (enable != 0U) 
                    #line 949 
                    xgbe_disable_rx_vlan_filtering(pdata);
  else 
    #line 951 
    if (((pdata->netdev)->features & 512ULL) != 0ULL) 
                                                      #line 952 
                                                      xgbe_enable_rx_vlan_filtering(pdata);
  #line 955 
  return 0;
}

#line 958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_set_all_multicast_mode(struct xgbe_prv_data *pdata, unsigned int enable)
{
  #line 961 
  unsigned int val = (unsigned int)(enable != 0U);
  #line 963 
  ;
  #line 963 
  if (((ioread32(pdata->xgmac_regs + 8U) >> 4) & 1U) == val) 
                                                             #line 964 
                                                             return 0;
  #line 966 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 966 
    bool branch;
    #line 966 
    struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_set_all_multicast_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"%s allmulti mode\n", .lineno = (unsigned int)966U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 966 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
    #line 966 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 966 
      char *tmp_0;
      #line 966 
      if (enable != 0U) 
                        #line 966 
                        tmp_0 = (char *)"entering"; else 
                                                         #line 966 
                                                         tmp_0 = (char *)"leaving";
      #line 966 
      ;
      #line 966 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,pdata->netdev,(char *)"%s allmulti mode\n",tmp_0);
    }
  }
  {
    #line 968 
    u32 reg_val = ioread32(pdata->xgmac_regs + 8U);
    #line 968 
    reg_val &= 4294967279U;
    #line 968 
    reg_val = ((val << 4) & 16U) | reg_val;
    #line 968 
    iowrite32(reg_val,pdata->xgmac_regs + 8U);
  }
  #line 970 
  return 0;
}

#line 973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_set_mac_reg(struct xgbe_prv_data *pdata, struct netdev_hw_addr *ha, unsigned int *mac_reg)
{
  #line 976 
  unsigned int mac_addr_hi;
  #line 976 
  unsigned int mac_addr_lo;
  #line 977 
  u8 *mac_addr;
  #line 979 
  mac_addr_lo = 0U;
  #line 980 
  mac_addr_hi = 0U;
  #line 982 
  if (ha != (struct netdev_hw_addr *)0) {
    #line 983 
    mac_addr = (u8 *)(& mac_addr_lo);
    #line 984 
    *mac_addr = ha->addr[0];
    #line 985 
    *(mac_addr + 1U) = ha->addr[1];
    #line 986 
    *(mac_addr + 2U) = ha->addr[2];
    #line 987 
    *(mac_addr + 3U) = ha->addr[3];
    #line 988 
    mac_addr = (u8 *)(& mac_addr_hi);
    #line 989 
    *mac_addr = ha->addr[4];
    #line 990 
    *(mac_addr + 1U) = ha->addr[5];
    #line 992 
    if ((pdata->msg_enable & 1U) != 0U) {
      #line 992 
      bool branch;
      #line 992 
      struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_set_mac_reg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"adding mac address %pM at %#x\n", .lineno = (unsigned int)992U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 992 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
      #line 992 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 992 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,pdata->netdev,(char *)"adding mac address %pM at %#x\n",(unsigned char *)(& ha->addr),*mac_reg);
    }
    #line 996 
    mac_addr_hi &= 2147483647U;
    #line 996 
    mac_addr_hi |= 2147483648U;
  }
  #line 999 
  iowrite32(mac_addr_hi,pdata->xgmac_regs + (unsigned long)*mac_reg);
  #line 1000 
  *mac_reg += 4U;
  #line 1001 
  iowrite32(mac_addr_lo,pdata->xgmac_regs + (unsigned long)*mac_reg);
  #line 1002 
  *mac_reg += 4U;
  #line 1003 
  return;
}

#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_set_mac_addn_addrs(struct xgbe_prv_data *pdata)
{
  #line 1008 
  struct netdev_hw_addr *ha;
  #line 1009 
  unsigned int mac_reg;
  #line 1010 
  unsigned int addn_macs;
  #line 1007 
  struct net_device *netdev = pdata->netdev;
  #line 1012 
  mac_reg = 776U;
  #line 1013 
  addn_macs = pdata->hw_feat.addn_mac;
  #line 1015 
  if ((unsigned int)netdev->uc.count > addn_macs) 
                                                  #line 1016 
                                                  xgbe_set_promiscuous_mode(pdata,1U);
  else {
    #line 1018 
    void *__mptr;
    #line 1018 
    __mptr = (void *)netdev->uc.list.next;
    #line 1018 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 1018 
    while (& ha->list != & netdev->uc.list) {
      #line 1018 
      void *__mptr_0;
      #line 1019 
      xgbe_set_mac_reg(pdata,ha,& mac_reg);
      #line 1020 
      addn_macs --;
      #line 1018 
      __mptr_0 = (void *)ha->list.next;
      #line 1018 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
    #line 1023 
    if ((unsigned int)netdev->mc.count > addn_macs) 
                                                    #line 1024 
                                                    xgbe_set_all_multicast_mode(pdata,1U);
    else {
      #line 1026 
      void *__mptr_1;
      #line 1026 
      __mptr_1 = (void *)netdev->mc.list.next;
      #line 1026 
      ha = ((struct netdev_hw_addr *)__mptr_1);
      #line 1026 
      while (& ha->list != & netdev->mc.list) {
        #line 1026 
        void *__mptr_2;
        #line 1027 
        xgbe_set_mac_reg(pdata,ha,& mac_reg);
        #line 1028 
        addn_macs --;
        #line 1026 
        __mptr_2 = (void *)ha->list.next;
        #line 1026 
        ha = ((struct netdev_hw_addr *)__mptr_2);
      }
    }
  }
  #line 1034 
  while (1) {
    #line 1034 
    unsigned int tmp_3;
    #line 1034 
    tmp_3 = addn_macs;
    #line 1034 
    addn_macs --;
    #line 1034 
    ;
    #line 1034 
    if (! (tmp_3 != 0U)) 
                         #line 1034 
                         break;
    #line 1035 
    xgbe_set_mac_reg(pdata,(struct netdev_hw_addr *)0,& mac_reg);
  }
  #line 1036 
  return;
}

#line 1038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_set_mac_hash_table(struct xgbe_prv_data *pdata)
{
  #line 1053 
  void *__mptr;
  #line 1059 
  void *__mptr_1;
  #line 1041 
  struct netdev_hw_addr *ha;
  #line 1042 
  unsigned int hash_reg;
  #line 1043 
  unsigned int hash_table_shift;
  #line 1043 
  unsigned int hash_table_count;
  #line 1044 
  u32 hash_table[8U];
  #line 1045 
  u32 crc;
  #line 1046 
  unsigned int i;
  #line 1040 
  struct net_device *netdev = pdata->netdev;
  #line 1048 
  hash_table_shift = 26U - (pdata->hw_feat.hash_table_size >> 7);
  #line 1049 
  hash_table_count = pdata->hw_feat.hash_table_size / 32U;
  #line 1050 
  memset((void *)(& hash_table),0,32UL);
  #line 1053 
  __mptr = (void *)netdev->uc.list.next;
  #line 1053 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 1053 
  while (& ha->list != & netdev->uc.list) {
    #line 1053 
    void *__mptr_0;
    {
      #line 1054 
      u32 ___x;
      #line 1054 
      u32 tmp_4;
      {
        #line 1054 
        u32 __x = ~ crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
        #line 1054 
        if (0 != 0) {
          #line 1054 
          ___x = __x;
          #line 1054 
          ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
          #line 1054 
          ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
          #line 1054 
          ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
          #line 1054 
          ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
          #line 1054 
          ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
          #line 1054 
          tmp_4 = ___x;
        }
        else 
             #line 1054 
             tmp_4 = __bitrev32(__x);
        }
      #line 1054 
      crc = tmp_4;
      #line 1055 
      crc >>= hash_table_shift;
      #line 1056 
      hash_table[crc >> 5] |= (unsigned int)(1 << (crc & 31U));
    }
    #line 1053 
    __mptr_0 = (void *)ha->list.next;
    #line 1053 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 1059 
  __mptr_1 = (void *)netdev->mc.list.next;
  #line 1059 
  ha = ((struct netdev_hw_addr *)__mptr_1);
  #line 1059 
  while (& ha->list != & netdev->mc.list) {
    #line 1059 
    void *__mptr_2;
    {
      #line 1060 
      u32 ___x_0;
      #line 1060 
      u32 tmp_11;
      {
        #line 1060 
        u32 __x_0 = ~ crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
        #line 1060 
        if (0 != 0) {
          #line 1060 
          ___x_0 = __x_0;
          #line 1060 
          ___x_0 = (___x_0 << 16) | (___x_0 << ((unsigned long)8 * sizeof(___x_0) - (unsigned long)16));
          #line 1060 
          ___x_0 = ((___x_0 >> 8) & 16711935U) | ((___x_0 << 8) & 4278255360U);
          #line 1060 
          ___x_0 = ((___x_0 >> 4) & 252645135U) | ((___x_0 << 4) & 4042322160U);
          #line 1060 
          ___x_0 = ((___x_0 >> 2) & 858993459U) | ((___x_0 << 2) & 3435973836U);
          #line 1060 
          ___x_0 = ((___x_0 >> 1) & 1431655765U) | ((___x_0 << 1) & 2863311530U);
          #line 1060 
          tmp_11 = ___x_0;
        }
        else 
             #line 1060 
             tmp_11 = __bitrev32(__x_0);
        }
      #line 1060 
      crc = tmp_11;
      #line 1061 
      crc >>= hash_table_shift;
      #line 1062 
      hash_table[crc >> 5] |= (unsigned int)(1 << (crc & 31U));
    }
    #line 1059 
    __mptr_2 = (void *)ha->list.next;
    #line 1059 
    ha = ((struct netdev_hw_addr *)__mptr_2);
  }
  #line 1066 
  hash_reg = 16U;
  #line 1067 
  i = 0U;
  #line 1067 
  while (i < hash_table_count) {
    #line 1068 
    iowrite32(hash_table[i],pdata->xgmac_regs + (unsigned long)hash_reg);
    #line 1069 
    hash_reg += 4U;
    #line 1067 
    i ++;
  }
  #line 1071 
  return;
}

#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_add_mac_addresses(struct xgbe_prv_data *pdata)
{
  #line 1075 
  if (pdata->hw_feat.hash_table_size != 0U) 
                                            #line 1076 
                                            xgbe_set_mac_hash_table(pdata); else 
                                                                    #line 1078 
                                                                    xgbe_set_mac_addn_addrs(pdata);
  #line 1080 
  return 0;
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_set_mac_address_0(struct xgbe_prv_data *pdata, u8 *addr)
{
  #line 1085 
  unsigned int mac_addr_hi;
  #line 1085 
  unsigned int mac_addr_lo;
  #line 1087 
  mac_addr_hi = (unsigned int)(((int)*(addr + 5U) << 8) | (int)*(addr + 4U));
  #line 1088 
  mac_addr_lo = (unsigned int)(((((int)*(addr + 3U) << 24) | ((int)*(addr + 2U) << 16)) | ((int)*(addr + 1U) << 8)) | (int)*addr);
  #line 1091 
  iowrite32(mac_addr_hi,pdata->xgmac_regs + 768U);
  #line 1092 
  iowrite32(mac_addr_lo,pdata->xgmac_regs + 772U);
  #line 1094 
  return 0;
}

#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_rx_mode(struct xgbe_prv_data *pdata)
{
  #line 1100 
  unsigned int pr_mode;
  #line 1100 
  unsigned int am_mode;
  #line 1099 
  struct net_device *netdev = pdata->netdev;
  #line 1102 
  pr_mode = (unsigned int)((netdev->flags & 256U) != 0U);
  #line 1103 
  am_mode = (unsigned int)((netdev->flags & 512U) != 0U);
  #line 1105 
  xgbe_set_promiscuous_mode(pdata,pr_mode);
  #line 1106 
  xgbe_set_all_multicast_mode(pdata,am_mode);
  #line 1108 
  xgbe_add_mac_addresses(pdata);
  #line 1110 
  return 0;
}

#line 1113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_clr_gpio(struct xgbe_prv_data *pdata, unsigned int gpio)
{
  #line 1115 
  unsigned int reg;
  #line 1117 
  if (gpio > 15U) 
                  #line 1118 
                  return -22;
  #line 1120 
  reg = ioread32(pdata->xgmac_regs + 636U);
  #line 1122 
  reg = (unsigned int)(~ (1 << (gpio + 16U))) & reg;
  #line 1123 
  iowrite32(reg,pdata->xgmac_regs + 636U);
  #line 1125 
  return 0;
}

#line 1128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_set_gpio(struct xgbe_prv_data *pdata, unsigned int gpio)
{
  #line 1130 
  unsigned int reg;
  #line 1132 
  if (gpio > 15U) 
                  #line 1133 
                  return -22;
  #line 1135 
  reg = ioread32(pdata->xgmac_regs + 636U);
  #line 1137 
  reg = (unsigned int)(1 << (gpio + 16U)) | reg;
  #line 1138 
  iowrite32(reg,pdata->xgmac_regs + 636U);
  #line 1140 
  return 0;
}

#line 1143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_read_mmd_regs_v2(struct xgbe_prv_data *pdata, int prtad, int mmd_reg)
{
  #line 1146 
  unsigned long flags;
  #line 1147 
  unsigned int mmd_address;
  #line 1147 
  unsigned int index;
  #line 1147 
  unsigned int offset;
  #line 1148 
  int mmd_data;
  #line 1150 
  if ((mmd_reg & 1073741824) != 0) 
                                   #line 1151 
                                   mmd_address = (unsigned int)mmd_reg & 3221225471U; else 
                                                                    #line 1153 
                                                                    mmd_address = (unsigned int)((pdata->mdio_mmd << 16) | (mmd_reg & 65535));
  #line 1164 
  mmd_address <<= 1;
  #line 1165 
  index = ~ pdata->xpcs_window_mask & mmd_address;
  #line 1166 
  offset = pdata->xpcs_window + (pdata->xpcs_window_mask & mmd_address);
  #line 1168 
  cif___ldv_spin_lock_xpcs_lock_of_xgbe_prv_data(& pdata->xpcs_lock);
  #line 1169 
  iowrite32(index,pdata->xpcs_regs + (unsigned long)pdata->xpcs_window_sel_reg);
  #line 1170 
  mmd_data = (int)ioread16(pdata->xpcs_regs + (unsigned long)offset);
  #line 1171 
  cif_spin_unlock_irqrestore_xpcs_lock_of_xgbe_prv_data(& pdata->xpcs_lock,flags);
  #line 1173 
  return mmd_data;
}

#line 1176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_write_mmd_regs_v2(struct xgbe_prv_data *pdata, int prtad, int mmd_reg, int mmd_data)
{
  #line 1179 
  unsigned long flags;
  #line 1180 
  unsigned int mmd_address;
  #line 1180 
  unsigned int index;
  #line 1180 
  unsigned int offset;
  #line 1182 
  if ((mmd_reg & 1073741824) != 0) 
                                   #line 1183 
                                   mmd_address = (unsigned int)mmd_reg & 3221225471U; else 
                                                                    #line 1185 
                                                                    mmd_address = (unsigned int)((pdata->mdio_mmd << 16) | (mmd_reg & 65535));
  #line 1196 
  mmd_address <<= 1;
  #line 1197 
  index = ~ pdata->xpcs_window_mask & mmd_address;
  #line 1198 
  offset = pdata->xpcs_window + (pdata->xpcs_window_mask & mmd_address);
  #line 1200 
  cif___ldv_spin_lock_xpcs_lock_of_xgbe_prv_data(& pdata->xpcs_lock);
  #line 1201 
  iowrite32(index,pdata->xpcs_regs + (unsigned long)pdata->xpcs_window_sel_reg);
  #line 1202 
  iowrite16((unsigned short)((int)((unsigned short)mmd_data)),pdata->xpcs_regs + (unsigned long)offset);
  #line 1203 
  cif_spin_unlock_irqrestore_xpcs_lock_of_xgbe_prv_data(& pdata->xpcs_lock,flags);
  #line 1204 
  return;
}

#line 1206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_read_mmd_regs_v1(struct xgbe_prv_data *pdata, int prtad, int mmd_reg)
{
  #line 1209 
  unsigned long flags;
  #line 1210 
  unsigned int mmd_address;
  #line 1211 
  int mmd_data;
  #line 1213 
  if ((mmd_reg & 1073741824) != 0) 
                                   #line 1214 
                                   mmd_address = (unsigned int)mmd_reg & 3221225471U; else 
                                                                    #line 1216 
                                                                    mmd_address = (unsigned int)((pdata->mdio_mmd << 16) | (mmd_reg & 65535));
  #line 1227 
  cif___ldv_spin_lock_xpcs_lock_of_xgbe_prv_data(& pdata->xpcs_lock);
  #line 1228 
  iowrite32(mmd_address >> 8,pdata->xpcs_regs + 1020U);
  #line 1229 
  mmd_data = (int)ioread32(pdata->xpcs_regs + ((unsigned long)(mmd_address << 2) & (unsigned long)1020U));
  #line 1230 
  cif_spin_unlock_irqrestore_xpcs_lock_of_xgbe_prv_data(& pdata->xpcs_lock,flags);
  #line 1232 
  return mmd_data;
}

#line 1235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_write_mmd_regs_v1(struct xgbe_prv_data *pdata, int prtad, int mmd_reg, int mmd_data)
{
  #line 1238 
  unsigned int mmd_address;
  #line 1239 
  unsigned long flags;
  #line 1241 
  if ((mmd_reg & 1073741824) != 0) 
                                   #line 1242 
                                   mmd_address = (unsigned int)mmd_reg & 3221225471U; else 
                                                                    #line 1244 
                                                                    mmd_address = (unsigned int)((pdata->mdio_mmd << 16) | (mmd_reg & 65535));
  #line 1255 
  cif___ldv_spin_lock_xpcs_lock_of_xgbe_prv_data(& pdata->xpcs_lock);
  #line 1256 
  iowrite32(mmd_address >> 8,pdata->xpcs_regs + 1020U);
  #line 1257 
  iowrite32((unsigned int)mmd_data,pdata->xpcs_regs + ((unsigned long)(mmd_address << 2) & (unsigned long)1020U));
  #line 1258 
  cif_spin_unlock_irqrestore_xpcs_lock_of_xgbe_prv_data(& pdata->xpcs_lock,flags);
  #line 1259 
  return;
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_read_mmd_regs(struct xgbe_prv_data *pdata, int prtad, int mmd_reg)
{
  #line 1264 
  switch ((unsigned int)(pdata->vdata)->xpcs_access) {
    #line 1265 
    case (unsigned int)0: 
                          #line 1265 
    ;
    #line 1266 
    return xgbe_read_mmd_regs_v1(pdata,prtad,mmd_reg);
    #line 1268 
    case (unsigned int)1: 
                          #line 1268 
    ;
    #line 1269 
    default: 
             #line 1269 
    ;
    #line 1270 
    return xgbe_read_mmd_regs_v2(pdata,prtad,mmd_reg);
  }
}

#line 1274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_write_mmd_regs(struct xgbe_prv_data *pdata, int prtad, int mmd_reg, int mmd_data)
{
  #line 1277 
  switch ((unsigned int)(pdata->vdata)->xpcs_access) {
    #line 1278 
    case (unsigned int)0: 
                          #line 1278 
    ;
    #line 1279 
    xgbe_write_mmd_regs_v1(pdata,prtad,mmd_reg,mmd_data);
    #line 1281 
    case (unsigned int)1: 
                          #line 1281 
    ;
    #line 1282 
    default: 
             #line 1282 
    ;
    #line 1283 
    xgbe_write_mmd_regs_v2(pdata,prtad,mmd_reg,mmd_data);
  }
  #line 1285 
  return;
}

#line 1287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static unsigned int xgbe_create_mdio_sca(int port, int reg)
{
  #line 1289 
  unsigned int mdio_sca;
  #line 1289 
  unsigned int da;
  #line 1291 
  if ((reg & 1073741824) != 0) 
                               #line 1291 
                               da = (unsigned int)(reg >> 16); else 
                                                                    #line 1291 
                                                                    da = 0U;
  #line 1293 
  mdio_sca = 0U;
  #line 1294 
  mdio_sca &= 4294901760U;
  #line 1294 
  mdio_sca = ((unsigned int)reg & 65535U) | mdio_sca;
  #line 1295 
  mdio_sca &= 4292935679U;
  #line 1295 
  mdio_sca = ((unsigned int)(port << 16) & 2031616U) | mdio_sca;
  #line 1296 
  mdio_sca &= 4229955583U;
  #line 1296 
  mdio_sca = ((da << 21) & 65011712U) | mdio_sca;
  #line 1298 
  return mdio_sca;
}

#line 1301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_write_ext_mii_regs(struct xgbe_prv_data *pdata, int addr, int reg, u16 val)
{
  #line 1304 
  unsigned int mdio_sca;
  #line 1304 
  unsigned int mdio_sccd;
  #line 1306 
  reinit_completion(& pdata->mdio_complete);
  #line 1308 
  mdio_sca = xgbe_create_mdio_sca(addr,reg);
  #line 1309 
  iowrite32(mdio_sca,pdata->xgmac_regs + 512U);
  #line 1311 
  mdio_sccd = 0U;
  #line 1312 
  mdio_sccd &= 4294901760U;
  #line 1312 
  mdio_sccd = (unsigned int)val | mdio_sccd;
  #line 1313 
  mdio_sccd &= 4294770687U;
  #line 1313 
  mdio_sccd |= 65536U;
  #line 1314 
  mdio_sccd &= 4290772991U;
  #line 1314 
  mdio_sccd |= 4194304U;
  #line 1315 
  iowrite32(mdio_sccd,pdata->xgmac_regs + 516U);
  #line 1317 
  if (wait_for_completion_timeout(& pdata->mdio_complete,250UL) == 0UL) {
    #line 1318 
    netdev_err(pdata->netdev,(char *)"mdio write operation timed out\n");
    #line 1319 
    return -110;
  }
  #line 1322 
  return 0;
}

#line 1325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_read_ext_mii_regs(struct xgbe_prv_data *pdata, int addr, int reg)
{
  #line 1328 
  unsigned int mdio_sca;
  #line 1328 
  unsigned int mdio_sccd;
  #line 1330 
  reinit_completion(& pdata->mdio_complete);
  #line 1332 
  mdio_sca = xgbe_create_mdio_sca(addr,reg);
  #line 1333 
  iowrite32(mdio_sca,pdata->xgmac_regs + 512U);
  #line 1335 
  mdio_sccd = 0U;
  #line 1336 
  mdio_sccd &= 4294770687U;
  #line 1336 
  mdio_sccd |= 196608U;
  #line 1337 
  mdio_sccd &= 4290772991U;
  #line 1337 
  mdio_sccd |= 4194304U;
  #line 1338 
  iowrite32(mdio_sccd,pdata->xgmac_regs + 516U);
  #line 1340 
  if (wait_for_completion_timeout(& pdata->mdio_complete,250UL) == 0UL) {
    #line 1341 
    netdev_err(pdata->netdev,(char *)"mdio read operation timed out\n");
    #line 1342 
    return -110;
  }
  #line 1345 
  return (int)ioread32(pdata->xgmac_regs + 516U) & 65535;
}

#line 1348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_set_ext_mii_mode(struct xgbe_prv_data *pdata, unsigned int port, enum xgbe_mdio_mode mode)
{
  #line 1351 
  unsigned int reg_val = ioread32(pdata->xgmac_regs + 544U);
  #line 1353 
  switch ((unsigned int)mode) {
    #line 1354 
    case (unsigned int)1: 
                          #line 1354 
    ;
    #line 1355 
    if (port > 3U) 
                   #line 1356 
                   return -22;
    #line 1357 
    reg_val = (unsigned int)(1 << port) | reg_val;
    #line 1358 
    break;
    #line 1359 
    case (unsigned int)2: 
                          #line 1359 
    ;
    #line 1360 
    break;
    #line 1361 
    default: 
             #line 1361 
    ;
    #line 1362 
    return -22;
  }
  #line 1365 
  iowrite32(reg_val,pdata->xgmac_regs + 544U);
  #line 1367 
  return 0;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_tx_complete(struct xgbe_ring_desc *rdesc)
{
  #line 1372 
  return rdesc->desc3 >= (__le32)0;
}

#line 1375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_disable_rx_csum(struct xgbe_prv_data *pdata)
{
  {
    #line 1377 
    u32 reg_val = ioread32(pdata->xgmac_regs + 4U);
    #line 1377 
    reg_val &= 4294966783U;
    #line 1377 
    reg_val = reg_val;
    #line 1377 
    iowrite32(reg_val,pdata->xgmac_regs + 4U);
  }
  #line 1379 
  return 0;
}

#line 1382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_enable_rx_csum(struct xgbe_prv_data *pdata)
{
  {
    #line 1384 
    u32 reg_val = ioread32(pdata->xgmac_regs + 4U);
    #line 1384 
    reg_val &= 4294966783U;
    #line 1384 
    reg_val |= 512U;
    #line 1384 
    iowrite32(reg_val,pdata->xgmac_regs + 4U);
  }
  #line 1386 
  return 0;
}

#line 1389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_tx_desc_reset(struct xgbe_ring_data *rdata)
{
  #line 1391 
  struct xgbe_ring_desc *rdesc = rdata->rdesc;
  #line 1399 
  rdesc->desc0 = 0U;
  #line 1400 
  rdesc->desc1 = 0U;
  #line 1401 
  rdesc->desc2 = 0U;
  #line 1402 
  rdesc->desc3 = 0U;
  #line 1403 
  ldv_inline_asm();
  #line 1404 
  return;
}

#line 1408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_tx_desc_init(struct xgbe_channel *channel)
{
  #line 1411 
  struct xgbe_ring_data *rdata;
  #line 1412 
  int i;
  #line 1410 
  struct xgbe_ring *ring = channel->tx_ring;
  #line 1413 
  int start_index = (int)ring->cur;
  #line 1418 
  i = 0;
  #line 1418 
  while (ring->rdesc_count > (unsigned int)i) {
    #line 1419 
    rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & (unsigned int)i);
    #line 1422 
    xgbe_tx_desc_reset(rdata);
    #line 1418 
    i ++;
  }
  #line 1426 
  iowrite32(ring->rdesc_count + 4294967295U,channel->dma_regs + 48U);
  #line 1429 
  rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & (unsigned int)start_index);
  #line 1430 
  iowrite32((unsigned int)(rdata->rdesc_dma >> 32),channel->dma_regs + 16U);
  #line 1432 
  iowrite32((unsigned int)rdata->rdesc_dma,channel->dma_regs + 20U);
  #line 1438 
  return;
}

#line 1438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_rx_desc_reset(struct xgbe_prv_data *pdata, struct xgbe_ring_data *rdata, unsigned int index)
{
  #line 1444 
  unsigned int inte;
  #line 1445 
  dma_addr_t hdr_dma;
  #line 1445 
  dma_addr_t buf_dma;
  #line 1441 
  struct xgbe_ring_desc *rdesc = rdata->rdesc;
  #line 1442 
  unsigned int rx_usecs = pdata->rx_usecs;
  #line 1443 
  unsigned int rx_frames = pdata->rx_frames;
  #line 1447 
  if (rx_usecs == 0U && rx_frames == 0U) 
                                         #line 1449 
                                         inte = 1U;
  else 
    #line 1452 
    if (rx_frames != 0U && (index + 1U) % rx_frames == 0U) 
                                                           #line 1453 
                                                           inte = 1U; else 
                                                                    #line 1455 
                                                                    inte = 0U;
  #line 1465 
  hdr_dma = rdata->rx.hdr.dma_base + (unsigned long long)rdata->rx.hdr.dma_off;
  #line 1466 
  buf_dma = rdata->rx.buf.dma_base + (unsigned long long)rdata->rx.buf.dma_off;
  #line 1467 
  rdesc->desc0 = (unsigned int)hdr_dma;
  #line 1468 
  rdesc->desc1 = (unsigned int)(hdr_dma >> 32);
  #line 1469 
  rdesc->desc2 = (unsigned int)buf_dma;
  #line 1470 
  rdesc->desc3 = (unsigned int)(buf_dma >> 32);
  #line 1472 
  rdesc->desc3 &= 3221225471U;
  #line 1472 
  rdesc->desc3 |= (inte << 30) & 1073741824U;
  #line 1474 
  ldv_inline_asm();
  #line 1480 
  rdesc->desc3 &= 2147483647U;
  #line 1480 
  rdesc->desc3 |= 2147483648U;
  #line 1482 
  ldv_inline_asm();
  #line 1483 
  return;
}

#line 1486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_rx_desc_init(struct xgbe_channel *channel)
{
  #line 1490 
  struct xgbe_ring_data *rdata;
  #line 1492 
  unsigned int i;
  #line 1488 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 1489 
  struct xgbe_ring *ring = channel->rx_ring;
  #line 1491 
  unsigned int start_index = ring->cur;
  #line 1497 
  i = 0U;
  #line 1497 
  while (ring->rdesc_count > i) {
    #line 1498 
    rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & i);
    #line 1501 
    xgbe_rx_desc_reset(pdata,rdata,i);
    #line 1497 
    i ++;
  }
  #line 1505 
  iowrite32(ring->rdesc_count + 4294967295U,channel->dma_regs + 52U);
  #line 1508 
  rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & start_index);
  #line 1509 
  iowrite32((unsigned int)(rdata->rdesc_dma >> 32),channel->dma_regs + 24U);
  #line 1511 
  iowrite32((unsigned int)rdata->rdesc_dma,channel->dma_regs + 28U);
  #line 1515 
  rdata = ring->rdata + (unsigned long)(((ring->rdesc_count + start_index) + 4294967295U) & (ring->rdesc_count + 4294967295U));
  #line 1516 
  iowrite32((unsigned int)rdata->rdesc_dma,channel->dma_regs + 44U);
  #line 1522 
  return;
}

#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_update_tstamp_addend(struct xgbe_prv_data *pdata, unsigned int addend)
{
  #line 1525 
  unsigned int count = 10000U;
  #line 1528 
  iowrite32(addend,pdata->xgmac_regs + 3352U);
  {
    #line 1529 
    u32 reg_val = ioread32(pdata->xgmac_regs + 3328U);
    #line 1529 
    reg_val &= 4294967263U;
    #line 1529 
    reg_val |= 32U;
    #line 1529 
    iowrite32(reg_val,pdata->xgmac_regs + 3328U);
  }
  #line 1532 
  while (1) {
    #line 1532 
    count --;
    #line 1532 
    if (count != 0U) {
      #line 1532 
      if (! ((ioread32(pdata->xgmac_regs + 3328U) & 32U) != 0U)) 
                                                                 #line 1532 
                                                                 break;
    }
    else 
         #line 1532 
         break;
    #line 1533 
    __const_udelay(21475UL);
  }
  #line 1535 
  if (count == 0U) 
                   #line 1536 
                   netdev_err(pdata->netdev,(char *)"timed out updating timestamp addend register\n");
  #line 1538 
  return;
}

#line 1540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_set_tstamp_time(struct xgbe_prv_data *pdata, unsigned int sec, unsigned int nsec)
{
  #line 1543 
  unsigned int count = 10000U;
  #line 1546 
  iowrite32(sec,pdata->xgmac_regs + 3344U);
  #line 1547 
  iowrite32(nsec,pdata->xgmac_regs + 3348U);
  {
    #line 1548 
    u32 reg_val = ioread32(pdata->xgmac_regs + 3328U);
    #line 1548 
    reg_val &= 4294967291U;
    #line 1548 
    reg_val |= 4U;
    #line 1548 
    iowrite32(reg_val,pdata->xgmac_regs + 3328U);
  }
  #line 1551 
  while (1) {
    #line 1551 
    count --;
    #line 1551 
    if (count != 0U) {
      #line 1551 
      if (! ((ioread32(pdata->xgmac_regs + 3328U) & 4U) != 0U)) 
                                                                #line 1551 
                                                                break;
    }
    else 
         #line 1551 
         break;
    #line 1552 
    __const_udelay(21475UL);
  }
  #line 1554 
  if (count == 0U) 
                   #line 1555 
                   netdev_err(pdata->netdev,(char *)"timed out initializing timestamp\n");
  #line 1556 
  return;
}

#line 1558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static u64 xgbe_get_tstamp_time(struct xgbe_prv_data *pdata)
{
  #line 1560 
  u64 nsec;
  #line 1562 
  nsec = (unsigned long long)ioread32(pdata->xgmac_regs + 3336U);
  #line 1563 
  nsec *= 1000000000ULL;
  #line 1564 
  nsec = (unsigned long long)ioread32(pdata->xgmac_regs + 3340U) + nsec;
  #line 1566 
  return nsec;
}

#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static u64 xgbe_get_tx_tstamp(struct xgbe_prv_data *pdata)
{
  #line 1571 
  unsigned int tx_snr;
  #line 1571 
  unsigned int tx_ssr;
  #line 1572 
  u64 nsec;
  #line 1574 
  if ((pdata->vdata)->tx_tstamp_workaround != 0U) {
    #line 1575 
    tx_snr = ioread32(pdata->xgmac_regs + 3376U);
    #line 1576 
    tx_ssr = ioread32(pdata->xgmac_regs + 3380U);
  }
  else {
    #line 1578 
    tx_ssr = ioread32(pdata->xgmac_regs + 3380U);
    #line 1579 
    tx_snr = ioread32(pdata->xgmac_regs + 3376U);
  }
  #line 1582 
  if (tx_snr < (unsigned int)0) 
                                #line 1583 
                                return 0ULL;
  #line 1585 
  nsec = (unsigned long long)tx_ssr;
  #line 1586 
  nsec *= 1000000000ULL;
  #line 1587 
  nsec = (unsigned long long)tx_snr + nsec;
  #line 1589 
  return nsec;
}

#line 1592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_get_rx_tstamp(struct xgbe_packet_data *packet, struct xgbe_ring_desc *rdesc)
{
  #line 1595 
  u64 nsec;
  #line 1597 
  if ((rdesc->desc3 & 16U) != 0U && (rdesc->desc3 & 64U) == 0U) {
    #line 1599 
    nsec = (unsigned long long)rdesc->desc1;
    #line 1600 
    nsec <<= 32;
    #line 1601 
    nsec = (unsigned long long)rdesc->desc0 | nsec;
    #line 1602 
    if (nsec != 18446744073709551615ULL) {
      #line 1603 
      packet->rx_tstamp = nsec;
      #line 1604 
      packet->attributes &= 4294967263U;
      #line 1604 
      packet->attributes |= 32U;
    }
  }
  #line 1608 
  return;
}

#line 1610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_config_tstamp(struct xgbe_prv_data *pdata, unsigned int mac_tscr)
{
  #line 1614 
  mac_tscr &= 4294966783U;
  #line 1614 
  mac_tscr |= 512U;
  #line 1617 
  mac_tscr &= 4294967293U;
  #line 1617 
  mac_tscr |= 2U;
  #line 1620 
  mac_tscr &= 4278190079U;
  #line 1620 
  mac_tscr |= 16777216U;
  #line 1622 
  iowrite32(mac_tscr,pdata->xgmac_regs + 3328U);
  #line 1625 
  if ((mac_tscr & 1U) == 0U) 
                             #line 1626 
                             return 0;
  {
    #line 1629 
    u32 reg_val = ioread32(pdata->xgmac_regs + 3332U);
    #line 1629 
    reg_val &= 4278255615U;
    #line 1629 
    reg_val |= 1310720U;
    #line 1629 
    iowrite32(reg_val,pdata->xgmac_regs + 3332U);
  }
  {
    #line 1630 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 3332U);
    #line 1630 
    reg_val_0 &= 4294902015U;
    #line 1630 
    reg_val_0 = reg_val_0;
    #line 1630 
    iowrite32(reg_val_0,pdata->xgmac_regs + 3332U);
  }
  #line 1631 
  xgbe_update_tstamp_addend(pdata,pdata->tstamp_addend);
  #line 1632 
  xgbe_set_tstamp_time(pdata,0U,0U);
  #line 1635 
  ;
  #line 1635 
  ;
  #line 1635 
  timecounter_init(& pdata->tstamp_tc,& pdata->tstamp_cc,(unsigned long long)ktime_to_ns(ktime_get_real()));
  #line 1638 
  return 0;
}

#line 1641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_tx_start_xmit(struct xgbe_channel *channel, struct xgbe_ring *ring)
{
  #line 1645 
  struct xgbe_ring_data *rdata;
  #line 1644 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 1646 
  ldv_inline_asm();
  #line 1652 
  rdata = ring->rdata + (unsigned long)(ring->cur & (ring->rdesc_count + 4294967295U));
  #line 1653 
  iowrite32((unsigned int)rdata->rdesc_dma,channel->dma_regs + 36U);
  #line 1657 
  if (pdata->tx_usecs != 0U && channel->tx_timer_active == 0U) {
    #line 1658 
    channel->tx_timer_active = 1U;
    #line 1659 
    ;
    #line 1659 
    ;
    #line 1659 
    cif_mod_timer_0(& channel->tx_timer,usecs_to_jiffies(pdata->tx_usecs) + jiffies);
  }
  #line 1663 
  ring->__anonCompField_xgbe_ring_163.tx.xmit_more = 0U;
  #line 1664 
  return;
}

#line 1666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_dev_xmit(struct xgbe_channel *channel)
{
  #line 1670 
  struct xgbe_ring_data *rdata;
  #line 1671 
  struct xgbe_ring_desc *rdesc;
  #line 1673 
  unsigned int tx_packets;
  #line 1673 
  unsigned int tx_bytes;
  #line 1674 
  unsigned int csum;
  #line 1674 
  unsigned int tso;
  #line 1674 
  unsigned int vlan;
  #line 1674 
  unsigned int vxlan;
  #line 1675 
  unsigned int tso_context;
  #line 1675 
  unsigned int vlan_context;
  #line 1676 
  unsigned int tx_set_ic;
  #line 1679 
  int i;
  #line 1668 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 1669 
  struct xgbe_ring *ring = channel->tx_ring;
  #line 1672 
  struct xgbe_packet_data *packet = & ring->packet_data;
  #line 1677 
  int start_index = (int)ring->cur;
  #line 1678 
  int cur_index = (int)ring->cur;
  #line 1683 
  tx_packets = packet->tx_packets;
  #line 1684 
  tx_bytes = packet->tx_bytes;
  #line 1686 
  csum = packet->attributes & 1U;
  #line 1688 
  tso = (packet->attributes >> 1) & 1U;
  #line 1690 
  vlan = (packet->attributes >> 2) & 1U;
  #line 1692 
  vxlan = (packet->attributes >> 4) & 1U;
  #line 1695 
  if (tso != 0U && (int)packet->mss != (int)ring->__anonCompField_xgbe_ring_163.tx.cur_mss) 
    #line 1696 
    tso_context = 1U; else 
                           #line 1698 
                           tso_context = 0U;
  #line 1700 
  if (vlan != 0U && (int)packet->vlan_ctag != (int)ring->__anonCompField_xgbe_ring_163.tx.cur_vlan_ctag) 
    #line 1701 
    vlan_context = 1U; else 
                            #line 1703 
                            vlan_context = 0U;
  #line 1715 
  ring->coalesce_count += tx_packets;
  #line 1716 
  if (pdata->tx_frames == 0U) 
                              #line 1717 
                              tx_set_ic = 0U;
  else 
    #line 1718 
    if (pdata->tx_frames < tx_packets) 
                                       #line 1719 
                                       tx_set_ic = 1U;
    else 
      #line 1720 
      if (ring->coalesce_count % pdata->tx_frames < tx_packets) 
                                                                #line 1721 
                                                                tx_set_ic = 1U; else 
                                                                    #line 1723 
                                                                    tx_set_ic = 0U;
  #line 1725 
  rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & (unsigned int)cur_index);
  #line 1726 
  rdesc = rdata->rdesc;
  #line 1729 
  if (tso_context != 0U || vlan_context != 0U) {
    #line 1730 
    if (tso_context != 0U) {
      #line 1731 
      if ((pdata->msg_enable & 256U) != 0U) {
        #line 1731 
        bool branch;
        #line 1731 
        struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dev_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"TSO context descriptor, mss=%u\n", .lineno = (unsigned int)1731U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1731 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
        #line 1731 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1731 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,pdata->netdev,(char *)"TSO context descriptor, mss=%u\n",(int)packet->mss);
      }
      #line 1736 
      rdesc->desc2 &= 4294934528U;
      #line 1736 
      rdesc->desc2 |= (unsigned int)packet->mss & 32767U;
      #line 1740 
      rdesc->desc3 &= 3221225471U;
      #line 1740 
      rdesc->desc3 |= 1073741824U;
      #line 1744 
      rdesc->desc3 &= 4227858431U;
      #line 1744 
      rdesc->desc3 |= 67108864U;
      #line 1747 
      ring->__anonCompField_xgbe_ring_163.tx.cur_mss = packet->mss;
    }
    #line 1750 
    if (vlan_context != 0U) {
      #line 1751 
      if ((pdata->msg_enable & 256U) != 0U) {
        #line 1751 
        bool branch_0;
        #line 1751 
        struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dev_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"VLAN context descriptor, ctag=%u\n", .lineno = (unsigned int)1751U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1751 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
        #line 1751 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1751 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,pdata->netdev,(char *)"VLAN context descriptor, ctag=%u\n",(int)packet->vlan_ctag);
      }
      #line 1756 
      rdesc->desc3 &= 3221225471U;
      #line 1756 
      rdesc->desc3 |= 1073741824U;
      #line 1760 
      rdesc->desc3 &= 4294901760U;
      #line 1760 
      rdesc->desc3 |= (unsigned int)packet->vlan_ctag;
      #line 1764 
      rdesc->desc3 &= 4294901759U;
      #line 1764 
      rdesc->desc3 |= 65536U;
      #line 1767 
      ring->__anonCompField_xgbe_ring_163.tx.cur_vlan_ctag = packet->vlan_ctag;
    }
    #line 1770 
    cur_index ++;
    #line 1771 
    rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & (unsigned int)cur_index);
    #line 1772 
    rdesc = rdata->rdesc;
  }
  #line 1776 
  rdesc->desc0 = (unsigned int)rdata->skb_dma;
  #line 1777 
  rdesc->desc1 = (unsigned int)(rdata->skb_dma >> 32);
  #line 1780 
  rdesc->desc2 &= 4294950912U;
  #line 1780 
  rdesc->desc2 |= rdata->skb_dma_len & 16383U;
  #line 1784 
  if (vlan != 0U) {
    #line 1785 
    rdesc->desc2 &= 4294918143U;
    #line 1785 
    rdesc->desc2 |= 32768U;
  }
  #line 1789 
  if ((packet->attributes & 8U) != 0U) {
    #line 1790 
    rdesc->desc2 &= 3221225471U;
    #line 1790 
    rdesc->desc2 |= 1073741824U;
  }
  #line 1793 
  rdesc->desc3 &= 3758096383U;
  #line 1793 
  rdesc->desc3 |= 536870912U;
  #line 1796 
  rdesc->desc3 &= 3221225471U;
  #line 1796 
  rdesc->desc3 = rdesc->desc3;
  #line 1799 
  if (cur_index != start_index) {
    #line 1800 
    rdesc->desc3 &= 2147483647U;
    #line 1800 
    rdesc->desc3 |= 2147483648U;
  }
  #line 1802 
  if (tso != 0U) {
    #line 1804 
    rdesc->desc3 &= 4294705151U;
    #line 1804 
    rdesc->desc3 |= 262144U;
    #line 1805 
    rdesc->desc3 &= 4294705152U;
    #line 1805 
    rdesc->desc3 |= packet->tcp_payload_len & 262143U;
    #line 1807 
    rdesc->desc3 &= 4287102975U;
    #line 1807 
    rdesc->desc3 |= (packet->tcp_header_len / 4U << 19) & 7864320U;
    #line 1810 
    pdata->ext_stats.tx_tso_packets += (unsigned long long)tx_packets;
  }
  else {
    #line 1813 
    rdesc->desc3 &= 4093640703U;
    #line 1813 
    rdesc->desc3 = rdesc->desc3;
    #line 1816 
    if (csum != 0U) {
      #line 1817 
      rdesc->desc3 &= 4294770687U;
      #line 1817 
      rdesc->desc3 |= 196608U;
    }
    #line 1821 
    rdesc->desc3 &= 4294934528U;
    #line 1821 
    rdesc->desc3 |= packet->length & 32767U;
  }
  #line 1825 
  if (vxlan != 0U) {
    #line 1826 
    rdesc->desc3 &= 4236247039U;
    #line 1826 
    rdesc->desc3 |= 25165824U;
    #line 1829 
    pdata->ext_stats.tx_vxlan_packets += (unsigned long long)packet->tx_packets;
  }
  #line 1832 
  i = (cur_index - start_index) + 1;
  #line 1832 
  while (packet->rdesc_count > (unsigned int)i) {
    #line 1833 
    cur_index ++;
    #line 1834 
    rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & (unsigned int)cur_index);
    #line 1835 
    rdesc = rdata->rdesc;
    #line 1838 
    rdesc->desc0 = (unsigned int)rdata->skb_dma;
    #line 1839 
    rdesc->desc1 = (unsigned int)(rdata->skb_dma >> 32);
    #line 1842 
    rdesc->desc2 &= 4294950912U;
    #line 1842 
    rdesc->desc2 |= rdata->skb_dma_len & 16383U;
    #line 1846 
    rdesc->desc3 &= 2147483647U;
    #line 1846 
    rdesc->desc3 |= 2147483648U;
    #line 1849 
    rdesc->desc3 &= 3221225471U;
    #line 1849 
    rdesc->desc3 = rdesc->desc3;
    #line 1852 
    if (csum != 0U) {
      #line 1853 
      rdesc->desc3 &= 4294770687U;
      #line 1853 
      rdesc->desc3 |= 196608U;
    }
    #line 1832 
    i ++;
  }
  #line 1858 
  rdesc->desc3 &= 4026531839U;
  #line 1858 
  rdesc->desc3 |= 268435456U;
  #line 1861 
  if (tx_set_ic != 0U) {
    #line 1862 
    rdesc->desc2 &= 2147483647U;
    #line 1862 
    rdesc->desc2 |= 2147483648U;
  }
  #line 1865 
  rdata->tx.packets = tx_packets;
  #line 1866 
  rdata->tx.bytes = tx_bytes;
  #line 1868 
  pdata->ext_stats.txq_packets[channel->queue_index] += (unsigned long long)tx_packets;
  #line 1869 
  pdata->ext_stats.txq_bytes[channel->queue_index] += (unsigned long long)tx_bytes;
  #line 1870 
  ldv_inline_asm();
  #line 1878 
  rdata = ring->rdata + (unsigned long)((ring->rdesc_count + 4294967295U) & (unsigned int)start_index);
  #line 1879 
  rdesc = rdata->rdesc;
  #line 1880 
  rdesc->desc3 &= 2147483647U;
  #line 1880 
  rdesc->desc3 |= 2147483648U;
  #line 1882 
  if ((pdata->msg_enable & 256U) != 0U) 
                                        #line 1883 
                                        xgbe_dump_tx_desc(pdata,ring,(unsigned int)start_index,packet->rdesc_count,1U);
  #line 1885 
  ldv_inline_asm();
  #line 1889 
  ring->cur = (unsigned int)(cur_index + 1);
  #line 1890 
  if (netdev_xmit_more()) {
    #line 1890 
    if ((int)netif_xmit_stopped(netdev_get_tx_queue(pdata->netdev,channel->queue_index)) != 0) 
      #line 1890 
      _LOR: 
            #line 1893 
            xgbe_tx_start_xmit(channel,ring); else 
                                                   #line 1895 
                                                   ring->__anonCompField_xgbe_ring_163.tx.xmit_more = 1U;
  }
  else 
       #line 1890 
       goto _LOR;
  #line 1904 
  return;
}

#line 1904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_dev_read(struct xgbe_channel *channel)
{
  #line 1908 
  struct xgbe_ring_data *rdata;
  #line 1909 
  struct xgbe_ring_desc *rdesc;
  #line 1912 
  unsigned int err;
  #line 1912 
  unsigned int etlt;
  #line 1912 
  unsigned int l34t;
  #line 1906 
  struct xgbe_prv_data *pdata = channel->pdata;
  #line 1907 
  struct xgbe_ring *ring = channel->rx_ring;
  #line 1910 
  struct xgbe_packet_data *packet = & ring->packet_data;
  #line 1911 
  struct net_device *netdev = pdata->netdev;
  #line 1916 
  rdata = ring->rdata + (unsigned long)(ring->cur & (ring->rdesc_count + 4294967295U));
  #line 1917 
  rdesc = rdata->rdesc;
  #line 1920 
  if (rdesc->desc3 < (__le32)0) 
                                #line 1921 
                                return 1;
  #line 1922 
  ldv_inline_asm();
  #line 1926 
  if ((pdata->msg_enable & 2048U) != 0U) 
                                         #line 1927 
                                         xgbe_dump_rx_desc(pdata,ring,ring->cur);
  #line 1929 
  if ((rdesc->desc3 & 1073741824U) != 0U) {
    #line 1931 
    xgbe_get_rx_tstamp(packet,rdesc);
    #line 1933 
    packet->attributes &= 4294967279U;
    #line 1933 
    packet->attributes |= 16U;
    #line 1935 
    packet->attributes &= 4294967287U;
    #line 1935 
    packet->attributes = packet->attributes;
    #line 1937 
    return 0;
  }
  #line 1941 
  packet->attributes &= 4294967279U;
  #line 1941 
  packet->attributes = packet->attributes;
  #line 1944 
  if ((rdesc->desc3 & 134217728U) != 0U) {
    #line 1945 
    packet->attributes &= 4294967287U;
    #line 1945 
    packet->attributes |= 8U;
  }
  #line 1949 
  if ((rdesc->desc3 & 536870912U) != 0U) {
    #line 1950 
    packet->attributes &= 4294967167U;
    #line 1950 
    packet->attributes |= 128U;
    #line 1952 
    rdata->rx.hdr_len = (unsigned short)((unsigned int)((unsigned short)rdesc->desc2) & 1023U);
    #line 1954 
    if ((unsigned int)rdata->rx.hdr_len != 0U) 
                                               #line 1955 
                                               (pdata->ext_stats.rx_split_header_packets) ++;
  }
  else {
    #line 1957 
    packet->attributes &= 4294967167U;
    #line 1957 
    packet->attributes = packet->attributes;
  }
  #line 1962 
  if ((rdesc->desc3 & 67108864U) != 0U) {
    #line 1963 
    packet->attributes &= 4294967231U;
    #line 1963 
    packet->attributes |= 64U;
    #line 1966 
    packet->rss_hash = rdesc->desc1;
    #line 1968 
    l34t = (rdesc->desc3 >> 20) & 15U;
    #line 1969 
    switch (l34t) {
      #line 1970 
      case (unsigned int)1: 
                            #line 1970 
      ;
      #line 1971 
      case (unsigned int)2: 
                            #line 1971 
      ;
      #line 1972 
      case (unsigned int)9: 
                            #line 1972 
      ;
      #line 1973 
      case (unsigned int)10: 
                             #line 1973 
      ;
      #line 1974 
      packet->rss_hash_type = PKT_HASH_TYPE_L4;
      #line 1975 
      break;
      #line 1976 
      default: 
               #line 1976 
      ;
      #line 1977 
      packet->rss_hash_type = PKT_HASH_TYPE_L3;
    }
  }
  #line 1982 
  if ((rdesc->desc3 & 268435456U) == 0U) 
                                         #line 1983 
                                         return 0;
  #line 1986 
  packet->attributes &= 4294967291U;
  #line 1986 
  packet->attributes |= 4U;
  #line 1990 
  rdata->rx.len = (unsigned short)((unsigned int)((unsigned short)rdesc->desc3) & 16383U);
  #line 1993 
  if ((netdev->features & 549755813888ULL) != 0ULL) {
    #line 1994 
    packet->attributes &= 4294967294U;
    #line 1994 
    packet->attributes |= 1U;
    #line 1996 
    packet->attributes &= 4294966783U;
    #line 1996 
    packet->attributes |= 512U;
  }
  #line 2001 
  if ((rdesc->desc2 & 2048U) != 0U) {
    #line 2002 
    packet->attributes &= 4294967039U;
    #line 2002 
    packet->attributes |= 256U;
    #line 2004 
    (pdata->ext_stats.rx_vxlan_packets) ++;
    #line 2006 
    l34t = (rdesc->desc3 >> 20) & 15U;
    #line 2007 
    switch (l34t) {
      #line 2008 
      case (unsigned int)7: 
                            #line 2008 
      ;
      #line 2009 
      case (unsigned int)15: 
                             #line 2009 
      ;
      #line 2010 
      packet->attributes &= 4294966783U;
      #line 2010 
      packet->attributes = packet->attributes;
      #line 2012 
      break;
    }
  }
  #line 2017 
  err = (rdesc->desc3 >> 15) & 1U;
  #line 2018 
  etlt = (rdesc->desc3 >> 16) & 15U;
  #line 2019 
  if ((pdata->msg_enable & 2048U) != 0U) {
    #line 2019 
    bool branch;
    #line 2019 
    struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dev_read", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"err=%u, etlt=%#x\n", .lineno = (unsigned int)2019U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2019 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
    #line 2019 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2019 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,netdev,(char *)"err=%u, etlt=%#x\n",err,etlt);
  }
  #line 2021 
  if (err == 0U || etlt == 0U) {
    #line 2023 
    if (etlt == 9U && (netdev->features & 256ULL) != 0ULL) {
      #line 2025 
      packet->attributes &= 4294967293U;
      #line 2025 
      packet->attributes |= 2U;
      #line 2027 
      packet->vlan_ctag = (unsigned short)rdesc->desc0;
      #line 2030 
      if ((pdata->msg_enable & 2048U) != 0U) {
        #line 2030 
        bool branch_0;
        #line 2030 
        struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dev_read", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"vlan-ctag=%#06x\n", .lineno = (unsigned int)2030U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2030 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
        #line 2030 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 2030 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,netdev,(char *)"vlan-ctag=%#06x\n",(int)packet->vlan_ctag);
      }
    }
  }
  else {
    #line 2034 
    unsigned int tnp = (packet->attributes >> 8) & 1U;
    #line 2037 
    if (etlt + 4294967291U <= 1U) {
      #line 2038 
      packet->attributes &= 4294967294U;
      #line 2038 
      packet->attributes = packet->attributes;
      #line 2040 
      packet->attributes &= 4294966783U;
      #line 2040 
      packet->attributes = packet->attributes;
      #line 2042 
      (pdata->ext_stats.rx_csum_errors) ++;
    }
    else 
      #line 2043 
      if (tnp != 0U && etlt + 4294967287U <= 1U) {
        #line 2044 
        packet->attributes &= 4294967294U;
        #line 2044 
        packet->attributes = packet->attributes;
        #line 2046 
        packet->attributes &= 4294966783U;
        #line 2046 
        packet->attributes = packet->attributes;
        #line 2048 
        (pdata->ext_stats.rx_vxlan_csum_errors) ++;
      }
      else {
        #line 2050 
        packet->errors &= 4294967287U;
        #line 2050 
        packet->errors |= 8U;
      }
  }
  #line 2055 
  (pdata->ext_stats.rxq_packets[channel->queue_index]) ++;
  #line 2056 
  pdata->ext_stats.rxq_bytes[channel->queue_index] += (unsigned long long)rdata->rx.len;
  #line 2061 
  return 0;
}

#line 2064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_is_context_desc(struct xgbe_ring_desc *rdesc)
{
  #line 2067 
  return (int)(rdesc->desc3 >> 30) & 1;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_is_last_desc(struct xgbe_ring_desc *rdesc)
{
  #line 2073 
  return (int)(rdesc->desc3 >> 28) & 1;
}

#line 2076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_enable_int(struct xgbe_channel *channel, enum xgbe_int int_id)
{
  #line 2079 
  switch ((unsigned int)int_id) {
    #line 2080 
    case (unsigned int)0: 
                          #line 2080 
    ;
    #line 2081 
    channel->curr_ier &= 4294967294U;
    #line 2081 
    channel->curr_ier |= 1U;
    #line 2082 
    break;
    #line 2083 
    case (unsigned int)1: 
                          #line 2083 
    ;
    #line 2084 
    channel->curr_ier &= 4294967293U;
    #line 2084 
    channel->curr_ier |= 2U;
    #line 2085 
    break;
    #line 2086 
    case (unsigned int)2: 
                          #line 2086 
    ;
    #line 2087 
    channel->curr_ier &= 4294967291U;
    #line 2087 
    channel->curr_ier |= 4U;
    #line 2088 
    break;
    #line 2089 
    case (unsigned int)3: 
                          #line 2089 
    ;
    #line 2090 
    channel->curr_ier &= 4294967231U;
    #line 2090 
    channel->curr_ier |= 64U;
    #line 2091 
    break;
    #line 2092 
    case (unsigned int)4: 
                          #line 2092 
    ;
    #line 2093 
    channel->curr_ier &= 4294967167U;
    #line 2093 
    channel->curr_ier |= 128U;
    #line 2094 
    break;
    #line 2095 
    case (unsigned int)5: 
                          #line 2095 
    ;
    #line 2096 
    channel->curr_ier &= 4294967039U;
    #line 2096 
    channel->curr_ier |= 256U;
    #line 2097 
    break;
    #line 2098 
    case (unsigned int)6: 
                          #line 2098 
    ;
    #line 2099 
    channel->curr_ier &= 4294967294U;
    #line 2099 
    channel->curr_ier |= 1U;
    #line 2100 
    channel->curr_ier &= 4294967231U;
    #line 2100 
    channel->curr_ier |= 64U;
    #line 2101 
    break;
    #line 2102 
    case (unsigned int)7: 
                          #line 2102 
    ;
    #line 2103 
    channel->curr_ier &= 4294963199U;
    #line 2103 
    channel->curr_ier |= 4096U;
    #line 2104 
    break;
    #line 2105 
    case (unsigned int)8: 
                          #line 2105 
    ;
    #line 2106 
    channel->curr_ier |= channel->saved_ier;
    #line 2107 
    break;
    #line 2108 
    default: 
             #line 2108 
    ;
    #line 2109 
    return -1;
  }
  #line 2112 
  iowrite32(channel->curr_ier,channel->dma_regs + 56U);
  #line 2114 
  return 0;
}

#line 2117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_disable_int(struct xgbe_channel *channel, enum xgbe_int int_id)
{
  #line 2120 
  switch ((unsigned int)int_id) {
    #line 2121 
    case (unsigned int)0: 
                          #line 2121 
    ;
    #line 2122 
    channel->curr_ier &= 4294967294U;
    #line 2122 
    channel->curr_ier = channel->curr_ier;
    #line 2123 
    break;
    #line 2124 
    case (unsigned int)1: 
                          #line 2124 
    ;
    #line 2125 
    channel->curr_ier &= 4294967293U;
    #line 2125 
    channel->curr_ier = channel->curr_ier;
    #line 2126 
    break;
    #line 2127 
    case (unsigned int)2: 
                          #line 2127 
    ;
    #line 2128 
    channel->curr_ier &= 4294967291U;
    #line 2128 
    channel->curr_ier = channel->curr_ier;
    #line 2129 
    break;
    #line 2130 
    case (unsigned int)3: 
                          #line 2130 
    ;
    #line 2131 
    channel->curr_ier &= 4294967231U;
    #line 2131 
    channel->curr_ier = channel->curr_ier;
    #line 2132 
    break;
    #line 2133 
    case (unsigned int)4: 
                          #line 2133 
    ;
    #line 2134 
    channel->curr_ier &= 4294967167U;
    #line 2134 
    channel->curr_ier = channel->curr_ier;
    #line 2135 
    break;
    #line 2136 
    case (unsigned int)5: 
                          #line 2136 
    ;
    #line 2137 
    channel->curr_ier &= 4294967039U;
    #line 2137 
    channel->curr_ier = channel->curr_ier;
    #line 2138 
    break;
    #line 2139 
    case (unsigned int)6: 
                          #line 2139 
    ;
    #line 2140 
    channel->curr_ier &= 4294967294U;
    #line 2140 
    channel->curr_ier = channel->curr_ier;
    #line 2141 
    channel->curr_ier &= 4294967231U;
    #line 2141 
    channel->curr_ier = channel->curr_ier;
    #line 2142 
    break;
    #line 2143 
    case (unsigned int)7: 
                          #line 2143 
    ;
    #line 2144 
    channel->curr_ier &= 4294963199U;
    #line 2144 
    channel->curr_ier = channel->curr_ier;
    #line 2145 
    break;
    #line 2146 
    case (unsigned int)8: 
                          #line 2146 
    ;
    #line 2147 
    channel->saved_ier = channel->curr_ier;
    #line 2148 
    channel->curr_ier = 0U;
    #line 2149 
    break;
    #line 2150 
    default: 
             #line 2150 
    ;
    #line 2151 
    return -1;
  }
  #line 2154 
  iowrite32(channel->curr_ier,channel->dma_regs + 56U);
  #line 2156 
  return 0;
}

#line 2159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int __xgbe_exit(struct xgbe_prv_data *pdata)
{
  #line 2161 
  unsigned int count = 2000U;
  {
    #line 2166 
    u32 reg_val = ioread32(pdata->xgmac_regs + 12288U);
    #line 2166 
    reg_val &= 4294967294U;
    #line 2166 
    reg_val |= 1U;
    #line 2166 
    iowrite32(reg_val,pdata->xgmac_regs + 12288U);
  }
  #line 2167 
  usleep_range(10UL,15UL);
  #line 2170 
  while (1) {
    #line 2170 
    count --;
    #line 2170 
    if (count != 0U) {
      #line 2170 
      if (! ((ioread32(pdata->xgmac_regs + 12288U) & 1U) != 0U)) 
                                                                 #line 2170 
                                                                 break;
    }
    else 
         #line 2170 
         break;
    #line 2171 
    usleep_range(500UL,600UL);
  }
  #line 2173 
  if (count == 0U) 
                   #line 2174 
                   return -16;
  #line 2178 
  return 0;
}

#line 2181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_exit(struct xgbe_prv_data *pdata)
{
  #line 2183 
  int ret;
  #line 2188 
  ret = __xgbe_exit(pdata);
  #line 2189 
  if (ret != 0) 
                #line 2190 
                return ret;
  #line 2192 
  return __xgbe_exit(pdata);
}

#line 2195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_flush_tx_queues(struct xgbe_prv_data *pdata)
{
  #line 2197 
  unsigned int i;
  #line 2197 
  unsigned int count;
  #line 2199 
  if ((pdata->hw_feat.version & 255U) <= 32U) 
                                              #line 2200 
                                              return 0;
  #line 2202 
  i = 0U;
  #line 2202 
  while (pdata->tx_q_count > i) {
    {
      #line 2203 
      u32 reg_val = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
      #line 2203 
      reg_val &= 4294967294U;
      #line 2203 
      reg_val |= 1U;
      #line 2203 
      iowrite32(reg_val,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
    }
    #line 2202 
    i ++;
  }
  #line 2206 
  i = 0U;
  #line 2206 
  while (pdata->tx_q_count > i) {
    #line 2207 
    count = 2000U;
    #line 2208 
    while (1) {
      #line 2208 
      count --;
      #line 2208 
      if (count != 0U) {
        #line 2208 
        if (! ((ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U)) & 1U) != 0U)) 
          #line 2208 
          break;
      }
      else 
           #line 2208 
           break;
      #line 2210 
      usleep_range(500UL,600UL);
    }
    #line 2212 
    if (count == 0U) 
                     #line 2213 
                     return -16;
    #line 2206 
    i ++;
  }
  #line 2216 
  return 0;
}

#line 2219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_dma_bus(struct xgbe_prv_data *pdata)
{
  #line 2221 
  unsigned int sbmr;
  #line 2223 
  sbmr = ioread32(pdata->xgmac_regs + 12292U);
  #line 2226 
  sbmr &= 4294965247U;
  #line 2226 
  sbmr |= 2048U;
  #line 2229 
  sbmr &= 4294967294U;
  #line 2229 
  sbmr |= 1U;
  #line 2230 
  sbmr &= 4294967041U;
  #line 2230 
  sbmr = (((pdata->blen >> 2) << 1) & 255U) | sbmr;
  #line 2231 
  sbmr &= 4294963199U;
  #line 2231 
  sbmr = ((pdata->aal << 12) & 4096U) | sbmr;
  #line 2232 
  sbmr &= 4290838527U;
  #line 2232 
  sbmr = (((pdata->rd_osr_limit + 4294967295U) << 16) & 4128768U) | sbmr;
  #line 2233 
  sbmr &= 3238002687U;
  #line 2233 
  sbmr = (((pdata->wr_osr_limit + 4294967295U) << 24) & 1056964608U) | sbmr;
  #line 2235 
  iowrite32(sbmr,pdata->xgmac_regs + 12292U);
  #line 2238 
  if ((pdata->vdata)->tx_desc_prefetch != 0U) {
    #line 2239 
    u32 reg_val = ioread32(pdata->xgmac_regs + 12352U);
    #line 2239 
    reg_val &= 4294967288U;
    #line 2239 
    reg_val = ((pdata->vdata)->tx_desc_prefetch & 7U) | reg_val;
    #line 2239 
    iowrite32(reg_val,pdata->xgmac_regs + 12352U);
  }
  #line 2242 
  if ((pdata->vdata)->rx_desc_prefetch != 0U) {
    #line 2243 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 12356U);
    #line 2243 
    reg_val_0 &= 4294967288U;
    #line 2243 
    reg_val_0 = ((pdata->vdata)->rx_desc_prefetch & 7U) | reg_val_0;
    #line 2243 
    iowrite32(reg_val_0,pdata->xgmac_regs + 12356U);
  }
  #line 2245 
  return;
}

#line 2247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_dma_cache(struct xgbe_prv_data *pdata)
{
  #line 2249 
  iowrite32(pdata->arcr,pdata->xgmac_regs + 12304U);
  #line 2250 
  iowrite32(pdata->awcr,pdata->xgmac_regs + 12312U);
  #line 2251 
  if (pdata->awarcr != 0U) 
                           #line 2252 
                           iowrite32(pdata->awarcr,pdata->xgmac_regs + 12316U);
  #line 2253 
  return;
}

#line 2255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_mtl_mode(struct xgbe_prv_data *pdata)
{
  #line 2257 
  unsigned int i;
  {
    #line 2260 
    u32 reg_val = ioread32(pdata->xgmac_regs + 4096U);
    #line 2260 
    reg_val &= 4294967199U;
    #line 2260 
    reg_val = reg_val;
    #line 2260 
    iowrite32(reg_val,pdata->xgmac_regs + 4096U);
  }
  #line 2263 
  i = 0U;
  #line 2263 
  while (pdata->hw_feat.tc_cnt > i) {
    {
      #line 2264 
      u32 reg_val_0 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4368U));
      #line 2264 
      reg_val_0 &= 4294967292U;
      #line 2264 
      reg_val_0 |= 2U;
      #line 2264 
      iowrite32(reg_val_0,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4368U));
    }
    {
      #line 2266 
      u32 reg_val_1 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4376U));
      #line 2266 
      reg_val_1 &= 4292870144U;
      #line 2266 
      reg_val_1 |= 1U;
      #line 2266 
      iowrite32(reg_val_1,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4376U));
    }
    #line 2263 
    i ++;
  }
  {
    #line 2270 
    u32 reg_val_2 = ioread32(pdata->xgmac_regs + 4096U);
    #line 2270 
    reg_val_2 &= 4294967291U;
    #line 2270 
    reg_val_2 = reg_val_2;
    #line 2270 
    iowrite32(reg_val_2,pdata->xgmac_regs + 4096U);
  }
  #line 2272 
  return;
}

#line 2273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_queue_flow_control_threshold(struct xgbe_prv_data *pdata, unsigned int queue, unsigned int q_fifo_size)
{
  #line 2277 
  unsigned int frame_fifo_size;
  #line 2278 
  unsigned int rfa;
  #line 2278 
  unsigned int rfd;
  #line 2280 
  frame_fifo_size = (xgbe_get_max_frame(pdata) + 511U) & 4294966784U;
  #line 2282 
  if (pdata->pfcq[queue] != 0U && pdata->pfc_rfa < q_fifo_size) {
    #line 2284 
    rfa = pdata->pfc_rfa;
    #line 2285 
    rfd = rfa + frame_fifo_size;
    #line 2286 
    if (rfd > 33280U) 
                      #line 2287 
                      rfd = 33280U;
    #line 2288 
    if (rfa > 33279U) 
                      #line 2289 
                      rfa = 32768U;
  }
  else {
    #line 2296 
    if (q_fifo_size <= 2048U) {
      #line 2298 
      pdata->rx_rfa[queue] = 0U;
      #line 2299 
      pdata->rx_rfd[queue] = 0U;
      #line 2300 
      return;
    }
    #line 2303 
    if (q_fifo_size <= 4096U) {
      #line 2305 
      pdata->rx_rfa[queue] = 0U;
      #line 2306 
      pdata->rx_rfd[queue] = 1U;
      #line 2307 
      return;
    }
    #line 2310 
    if (q_fifo_size <= frame_fifo_size) {
      #line 2312 
      pdata->rx_rfa[queue] = 2U;
      #line 2313 
      pdata->rx_rfd[queue] = 5U;
      #line 2314 
      return;
    }
    #line 2317 
    if (frame_fifo_size * 3U >= q_fifo_size) {
      #line 2322 
      rfa = q_fifo_size - frame_fifo_size;
      #line 2323 
      rfd = frame_fifo_size / 2U + rfa;
    }
    else {
      #line 2328 
      rfa = frame_fifo_size * 2U;
      #line 2329 
      rfa += 512U;
      #line 2330 
      rfd = rfa + frame_fifo_size;
    }
  }
  #line 2334 
  if (rfa > 1023U) 
                   #line 2334 
                   pdata->rx_rfa[queue] = rfa / 512U + 4294967294U; else 
                                                                    #line 2334 
                                                                    pdata->rx_rfa[queue] = 0U;
  #line 2335 
  if (rfd > 1023U) 
                   #line 2335 
                   pdata->rx_rfd[queue] = rfd / 512U + 4294967294U; else 
                                                                    #line 2335 
                                                                    pdata->rx_rfd[queue] = 0U;
  #line 2336 
  return;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_calculate_flow_control_threshold(struct xgbe_prv_data *pdata, unsigned int *fifo)
{
  #line 2341 
  unsigned int q_fifo_size;
  #line 2342 
  unsigned int i;
  #line 2344 
  i = 0U;
  #line 2344 
  while (pdata->rx_q_count > i) {
    #line 2345 
    q_fifo_size = (*(fifo + (unsigned long)i) + 1U) * 256U;
    #line 2347 
    xgbe_queue_flow_control_threshold(pdata,i,q_fifo_size);
    #line 2344 
    i ++;
  }
  #line 2349 
  return;
}

#line 2351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_flow_control_threshold(struct xgbe_prv_data *pdata)
{
  #line 2353 
  unsigned int i;
  #line 2355 
  i = 0U;
  #line 2355 
  while (pdata->rx_q_count > i) {
    {
      #line 2356 
      u32 reg_val = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4432U));
      #line 2356 
      reg_val &= 4294967169U;
      #line 2356 
      reg_val = ((pdata->rx_rfa[i] << 1) & 126U) | reg_val;
      #line 2356 
      iowrite32(reg_val,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4432U));
    }
    {
      #line 2358 
      u32 reg_val_0 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4432U));
      #line 2358 
      reg_val_0 &= 4286709759U;
      #line 2358 
      reg_val_0 = ((pdata->rx_rfd[i] << 17) & 8257536U) | reg_val_0;
      #line 2358 
      iowrite32(reg_val_0,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4432U));
    }
    #line 2355 
    i ++;
  }
  #line 2361 
  return;
}

#line 2363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static unsigned int xgbe_get_tx_fifo_size(struct xgbe_prv_data *pdata)
{
  #line 2366 
  unsigned int __UNIQUE_ID___x458;
  #line 2366 
  unsigned int tmp;
  {
    #line 2366 
    __UNIQUE_ID___x458 = pdata->tx_max_fifo_size;
    #line 2366 
    unsigned int __UNIQUE_ID___y459 = pdata->hw_feat.tx_fifo_size;
    #line 2366 
    if (__UNIQUE_ID___x458 < __UNIQUE_ID___y459) 
                                                 #line 2366 
                                                 tmp = __UNIQUE_ID___x458; else 
                                                                    #line 2366 
                                                                    tmp = __UNIQUE_ID___y459;
    }
  #line 2366 
  return tmp;
}

#line 2370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static unsigned int xgbe_get_rx_fifo_size(struct xgbe_prv_data *pdata)
{
  #line 2373 
  unsigned int __UNIQUE_ID___x460;
  #line 2373 
  unsigned int tmp;
  {
    #line 2373 
    __UNIQUE_ID___x460 = pdata->rx_max_fifo_size;
    #line 2373 
    unsigned int __UNIQUE_ID___y461 = pdata->hw_feat.rx_fifo_size;
    #line 2373 
    if (__UNIQUE_ID___x460 < __UNIQUE_ID___y461) 
                                                 #line 2373 
                                                 tmp = __UNIQUE_ID___x460; else 
                                                                    #line 2373 
                                                                    tmp = __UNIQUE_ID___y461;
    }
  #line 2373 
  return tmp;
}

#line 2377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_calculate_equal_fifo(unsigned int fifo_size, unsigned int queue_count, unsigned int *fifo)
{
  #line 2381 
  unsigned int q_fifo_size;
  #line 2382 
  unsigned int p_fifo;
  #line 2383 
  unsigned int i;
  #line 2385 
  q_fifo_size = fifo_size / queue_count;
  #line 2391 
  p_fifo = q_fifo_size / 256U;
  #line 2392 
  if (p_fifo != 0U) 
                    #line 2393 
                    p_fifo --;
  #line 2396 
  i = 0U;
  #line 2396 
  while (i < queue_count) {
    #line 2397 
    *(fifo + (unsigned long)i) = p_fifo;
    #line 2396 
    i ++;
  }
  #line 2398 
  return;
}

#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static unsigned int xgbe_set_nonprio_fifos(unsigned int fifo_size, unsigned int queue_count, unsigned int *fifo)
{
  #line 2404 
  unsigned int i;
  #line 2408 
  if (queue_count <= 8U) 
                         #line 2409 
                         return fifo_size;
  #line 2415 
  i = 8U;
  #line 2415 
  while (i < queue_count) {
    #line 2416 
    *(fifo + (unsigned long)i) = 7U;
    #line 2417 
    fifo_size += 4294965248U;
    #line 2415 
    i ++;
  }
  #line 2420 
  return fifo_size;
}

#line 2423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static unsigned int xgbe_get_pfc_delay(struct xgbe_prv_data *pdata)
{
  #line 2425 
  unsigned int delay;
  #line 2428 
  if ((unsigned int)(pdata->pfc)->delay != 0U) 
                                               #line 2429 
                                               return (unsigned int)(pdata->pfc)->delay / 8U;
  #line 2432 
  delay = xgbe_get_max_frame(pdata);
  #line 2433 
  delay += 20U;
  #line 2434 
  delay *= 2U;
  #line 2437 
  delay += 46U;
  #line 2438 
  delay += 18U;
  #line 2439 
  delay += 20U;
  #line 2442 
  delay += 14000U;
  #line 2444 
  return delay;
}

#line 2447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static unsigned int xgbe_get_pfc_queues(struct xgbe_prv_data *pdata)
{
  #line 2456 
  unsigned int tmp;
  #line 2456 
  unsigned int __UNIQUE_ID___x462;
  #line 2449 
  unsigned int count;
  #line 2449 
  unsigned int prio_queues;
  #line 2450 
  unsigned int i;
  #line 2452 
  if ((unsigned int)(pdata->pfc)->pfc_en == 0U) 
                                                #line 2453 
                                                return 0U;
  #line 2455 
  count = 0U;
  {
    #line 2456 
    __UNIQUE_ID___x462 = 8U;
    #line 2456 
    unsigned int __UNIQUE_ID___y463 = pdata->rx_q_count;
    #line 2456 
    if (__UNIQUE_ID___x462 < __UNIQUE_ID___y463) 
                                                 #line 2456 
                                                 tmp = __UNIQUE_ID___x462; else 
                                                                    #line 2456 
                                                                    tmp = __UNIQUE_ID___y463;
    }
  #line 2456 
  prio_queues = tmp;
  #line 2457 
  i = 0U;
  #line 2457 
  while (i < prio_queues) {
    {
      #line 2458 
      if (! xgbe_is_pfc_queue(pdata,i)) 
                                        #line 2459 
                                        goto __Cont;
      #line 2461 
      pdata->pfcq[i] = 1U;
      #line 2462 
      count ++;
    }
    #line 2457 
    __Cont: 
            #line 2457 
    i ++;
  }
  #line 2465 
  return count;
}

#line 2468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_calculate_dcb_fifo(struct xgbe_prv_data *pdata, unsigned int fifo_size, unsigned int *fifo)
{
  #line 2478 
  unsigned int __UNIQUE_ID___x464;
  #line 2478 
  unsigned int tmp_0;
  #line 2472 
  unsigned int q_fifo_size;
  #line 2472 
  unsigned int rem_fifo;
  #line 2472 
  unsigned int addn_fifo;
  #line 2473 
  unsigned int prio_queues;
  #line 2474 
  unsigned int pfc_count;
  #line 2475 
  unsigned int i;
  #line 2477 
  q_fifo_size = (xgbe_get_max_frame(pdata) + 255U) & 4294967040U;
  {
    #line 2478 
    __UNIQUE_ID___x464 = 8U;
    #line 2478 
    unsigned int __UNIQUE_ID___y465 = pdata->rx_q_count;
    #line 2478 
    if (__UNIQUE_ID___x464 < __UNIQUE_ID___y465) 
                                                 #line 2478 
                                                 tmp_0 = __UNIQUE_ID___x464; else 
                                                                    #line 2478 
                                                                    tmp_0 = __UNIQUE_ID___y465;
    }
  #line 2478 
  prio_queues = tmp_0;
  #line 2479 
  pfc_count = xgbe_get_pfc_queues(pdata);
  #line 2481 
  if (pfc_count == 0U || q_fifo_size * prio_queues > fifo_size) {
    #line 2483 
    xgbe_calculate_equal_fifo(fifo_size,prio_queues,fifo);
    #line 2484 
    return;
  }
  #line 2488 
  rem_fifo = fifo_size - q_fifo_size * prio_queues;
  #line 2493 
  pdata->pfc_rfa = xgbe_get_pfc_delay(pdata);
  #line 2494 
  pdata->pfc_rfa = (pdata->pfc_rfa + 511U) & 4294966784U;
  #line 2496 
  if (pdata->pfc_rfa > q_fifo_size) {
    #line 2497 
    addn_fifo = pdata->pfc_rfa - q_fifo_size;
    #line 2498 
    addn_fifo = (addn_fifo + 255U) & 4294967040U;
  }
  else 
       #line 2500 
       addn_fifo = 0U;
  #line 2508 
  i = prio_queues;
  #line 2509 
  while (i != 0U) {
    #line 2510 
    i --;
    #line 2512 
    *(fifo + (unsigned long)i) = q_fifo_size / 256U + 4294967295U;
    #line 2514 
    if (pdata->pfcq[i] == 0U || addn_fifo == 0U) 
                                                 #line 2515 
                                                 continue;
    #line 2517 
    if (addn_fifo > rem_fifo) {
      #line 2518 
      netdev_warn(pdata->netdev,(char *)"RXq%u cannot set needed fifo size\n",i);
      #line 2520 
      if (rem_fifo == 0U) 
                          #line 2521 
                          continue;
      #line 2523 
      addn_fifo = rem_fifo;
    }
    #line 2526 
    *(fifo + (unsigned long)i) += addn_fifo / 256U;
    #line 2527 
    rem_fifo -= addn_fifo;
  }
  #line 2530 
  if (rem_fifo != 0U) {
    #line 2531 
    unsigned int inc_fifo = rem_fifo / prio_queues;
    #line 2534 
    i = 0U;
    #line 2534 
    while (i < prio_queues) {
      #line 2535 
      *(fifo + (unsigned long)i) += inc_fifo / 256U;
      #line 2534 
      i ++;
    }
  }
  #line 2537 
  return;
}

#line 2539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_tx_fifo_size(struct xgbe_prv_data *pdata)
{
  #line 2541 
  unsigned int fifo_size;
  #line 2542 
  unsigned int fifo[16U];
  #line 2543 
  unsigned int i;
  #line 2545 
  fifo_size = xgbe_get_tx_fifo_size(pdata);
  #line 2547 
  xgbe_calculate_equal_fifo(fifo_size,pdata->tx_q_count,(unsigned int *)(& fifo));
  #line 2549 
  i = 0U;
  #line 2549 
  while (pdata->tx_q_count > i) {
    {
      #line 2550 
      u32 reg_val = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
      #line 2550 
      reg_val &= 4227923967U;
      #line 2550 
      reg_val = ((fifo[i] << 16) & 67043328U) | reg_val;
      #line 2550 
      iowrite32(reg_val,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
    }
    #line 2549 
    i ++;
  }
  #line 2552 
  if ((pdata->msg_enable & 1U) != 0U) 
                                      #line 2552 
                                      netdev_info(pdata->netdev,(char *)"%d Tx hardware queues, %d byte fifo per queue\n",pdata->tx_q_count,(fifo[0] + 1U) * 256U);
  #line 2553 
  return;
}

#line 2557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_rx_fifo_size(struct xgbe_prv_data *pdata)
{
  #line 2569 
  unsigned int __UNIQUE_ID___x466;
  #line 2569 
  unsigned int tmp;
  #line 2559 
  unsigned int fifo_size;
  #line 2560 
  unsigned int fifo[16U];
  #line 2561 
  unsigned int prio_queues;
  #line 2562 
  unsigned int i;
  #line 2565 
  memset((void *)(& pdata->pfcq),0,64UL);
  #line 2566 
  pdata->pfc_rfa = 0U;
  #line 2568 
  fifo_size = xgbe_get_rx_fifo_size(pdata);
  {
    #line 2569 
    __UNIQUE_ID___x466 = 8U;
    #line 2569 
    unsigned int __UNIQUE_ID___y467 = pdata->rx_q_count;
    #line 2569 
    if (__UNIQUE_ID___x466 < __UNIQUE_ID___y467) 
                                                 #line 2569 
                                                 tmp = __UNIQUE_ID___x466; else 
                                                                    #line 2569 
                                                                    tmp = __UNIQUE_ID___y467;
    }
  #line 2569 
  prio_queues = tmp;
  #line 2572 
  fifo_size = xgbe_set_nonprio_fifos(fifo_size,pdata->rx_q_count,(unsigned int *)(& fifo));
  #line 2574 
  if (pdata->pfc != (struct ieee_pfc *)0 && pdata->ets != (struct ieee_ets *)0) 
    #line 2575 
    xgbe_calculate_dcb_fifo(pdata,fifo_size,(unsigned int *)(& fifo)); else 
                                                                    #line 2577 
                                                                    xgbe_calculate_equal_fifo(fifo_size,prio_queues,(unsigned int *)(& fifo));
  #line 2579 
  i = 0U;
  #line 2579 
  while (pdata->rx_q_count > i) {
    {
      #line 2580 
      u32 reg_val = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
      #line 2580 
      reg_val &= 4261478399U;
      #line 2580 
      reg_val = ((fifo[i] << 16) & 33488896U) | reg_val;
      #line 2580 
      iowrite32(reg_val,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4416U));
    }
    #line 2579 
    i ++;
  }
  #line 2582 
  xgbe_calculate_flow_control_threshold(pdata,(unsigned int *)(& fifo));
  #line 2583 
  xgbe_config_flow_control_threshold(pdata);
  #line 2585 
  if ((pdata->pfc != (struct ieee_pfc *)0 && pdata->ets != (struct ieee_ets *)0) && (unsigned int)(pdata->pfc)->pfc_en != 0U) {
    #line 2586 
    if ((pdata->msg_enable & 1U) != 0U) 
                                        #line 2586 
                                        netdev_info(pdata->netdev,(char *)"%u Rx hardware queues\n",pdata->rx_q_count);
    #line 2588 
    i = 0U;
    #line 2588 
    while (pdata->rx_q_count > i) {
      #line 2589 
      if ((pdata->msg_enable & 1U) != 0U) 
                                          #line 2589 
                                          netdev_info(pdata->netdev,(char *)"RxQ%u, %u byte fifo queue\n",i,(fifo[i] + 1U) * 256U);
      #line 2588 
      i ++;
    }
  }
  else 
    #line 2593 
    if ((pdata->msg_enable & 1U) != 0U) 
                                        #line 2593 
                                        netdev_info(pdata->netdev,(char *)"%u Rx hardware queues, %u byte fifo per queue\n",pdata->rx_q_count,(fifo[0] + 1U) * 256U);
  #line 2594 
  return;
}

#line 2600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_queue_mapping(struct xgbe_prv_data *pdata)
{
  #line 2633 
  unsigned int __UNIQUE_ID___x470;
  #line 2633 
  unsigned int tmp_5;
  #line 2602 
  unsigned int qptc;
  #line 2602 
  unsigned int qptc_extra;
  #line 2602 
  unsigned int queue;
  #line 2603 
  unsigned int prio_queues;
  #line 2604 
  unsigned int ppq;
  #line 2604 
  unsigned int ppq_extra;
  #line 2604 
  unsigned int prio;
  #line 2605 
  unsigned int mask;
  #line 2606 
  unsigned int i;
  #line 2606 
  unsigned int j;
  #line 2606 
  unsigned int reg;
  #line 2606 
  unsigned int reg_val;
  #line 2611 
  qptc = pdata->tx_q_count / pdata->hw_feat.tc_cnt;
  #line 2612 
  qptc_extra = pdata->tx_q_count % pdata->hw_feat.tc_cnt;
  #line 2614 
  i = 0U;
  #line 2614 
  queue = 0U;
  #line 2614 
  while (pdata->hw_feat.tc_cnt > i) {
    #line 2615 
    j = 0U;
    #line 2615 
    while (j < qptc) {
      {
        #line 2620 
        unsigned int tmp_1;
        #line 2616 
        if ((pdata->msg_enable & 1U) != 0U) {
          #line 2616 
          bool branch;
          #line 2616 
          struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_queue_mapping", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"TXq%u mapped to TC%u\n", .lineno = (unsigned int)2616U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2616 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
          #line 2616 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 2616 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug468,pdata->netdev,(char *)"TXq%u mapped to TC%u\n",queue,i);
        }
        {
          #line 2618 
          u32 reg_val_0 = ioread32(pdata->xgmac_regs + ((unsigned long)(queue * 128U) + (unsigned long)4352U));
          #line 2618 
          reg_val_0 &= 4294965503U;
          #line 2618 
          reg_val_0 = ((i << 8) & 1792U) | reg_val_0;
          #line 2618 
          iowrite32(reg_val_0,pdata->xgmac_regs + ((unsigned long)(queue * 128U) + (unsigned long)4352U));
        }
        #line 2620 
        tmp_1 = queue;
        #line 2620 
        queue ++;
        #line 2620 
        pdata->q2tc_map[tmp_1] = i;
      }
      #line 2615 
      j ++;
    }
    #line 2623 
    if (i < qptc_extra) {
      #line 2628 
      unsigned int tmp_4;
      #line 2624 
      if ((pdata->msg_enable & 1U) != 0U) {
        #line 2624 
        bool branch_0;
        #line 2624 
        struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_queue_mapping", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"TXq%u mapped to TC%u\n", .lineno = (unsigned int)2624U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2624 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
        #line 2624 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 2624 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug469,pdata->netdev,(char *)"TXq%u mapped to TC%u\n",queue,i);
      }
      {
        #line 2626 
        u32 reg_val_1 = ioread32(pdata->xgmac_regs + ((unsigned long)(queue * 128U) + (unsigned long)4352U));
        #line 2626 
        reg_val_1 &= 4294965503U;
        #line 2626 
        reg_val_1 = ((i << 8) & 1792U) | reg_val_1;
        #line 2626 
        iowrite32(reg_val_1,pdata->xgmac_regs + ((unsigned long)(queue * 128U) + (unsigned long)4352U));
      }
      #line 2628 
      tmp_4 = queue;
      #line 2628 
      queue ++;
      #line 2628 
      pdata->q2tc_map[tmp_4] = i;
    }
    #line 2614 
    i ++;
  }
  {
    #line 2633 
    __UNIQUE_ID___x470 = 8U;
    #line 2633 
    unsigned int __UNIQUE_ID___y471 = pdata->rx_q_count;
    #line 2633 
    if (__UNIQUE_ID___x470 < __UNIQUE_ID___y471) 
                                                 #line 2633 
                                                 tmp_5 = __UNIQUE_ID___x470; else 
                                                                    #line 2633 
                                                                    tmp_5 = __UNIQUE_ID___y471;
    }
  #line 2633 
  prio_queues = tmp_5;
  #line 2634 
  ppq = 8U / prio_queues;
  #line 2635 
  ppq_extra = 8U % prio_queues;
  #line 2637 
  reg = 168U;
  #line 2638 
  reg_val = 0U;
  #line 2639 
  i = 0U;
  #line 2639 
  prio = 0U;
  #line 2639 
  while (i < prio_queues) {
    {
      #line 2655 
      unsigned int tmp_11;
      #line 2640 
      mask = 0U;
      #line 2641 
      j = 0U;
      #line 2641 
      while (j < ppq) {
        {
          #line 2645 
          unsigned int tmp_8;
          #line 2642 
          if ((pdata->msg_enable & 1U) != 0U) {
            #line 2642 
            bool branch_1;
            #line 2642 
            struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_queue_mapping", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"PRIO%u mapped to RXq%u\n", .lineno = (unsigned int)2642U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 2642 
            branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
            #line 2642 
            if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                          #line 2642 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug472,pdata->netdev,(char *)"PRIO%u mapped to RXq%u\n",prio,i);
          }
          #line 2644 
          mask = (unsigned int)(1 << prio) | mask;
          #line 2645 
          tmp_8 = prio;
          #line 2645 
          prio ++;
          #line 2645 
          pdata->prio2q_map[tmp_8] = i;
        }
        #line 2641 
        j ++;
      }
      #line 2648 
      if (i < ppq_extra) {
        #line 2652 
        unsigned int tmp_10;
        #line 2649 
        if ((pdata->msg_enable & 1U) != 0U) {
          #line 2649 
          bool branch_2;
          #line 2649 
          struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_queue_mapping", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"PRIO%u mapped to RXq%u\n", .lineno = (unsigned int)2649U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2649 
          branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
          #line 2649 
          if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                        #line 2649 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug473,pdata->netdev,(char *)"PRIO%u mapped to RXq%u\n",prio,i);
        }
        #line 2651 
        mask = (unsigned int)(1 << prio) | mask;
        #line 2652 
        tmp_10 = prio;
        #line 2652 
        prio ++;
        #line 2652 
        pdata->prio2q_map[tmp_10] = i;
      }
      #line 2655 
      tmp_11 = i;
      #line 2655 
      i ++;
      #line 2655 
      reg_val = (mask << ((tmp_11 << 3) & 24U)) | reg_val;
      #line 2657 
      if ((i & 3U) != 0U && i != prio_queues) 
                                              #line 2658 
                                              goto __Cont;
      #line 2660 
      iowrite32(reg_val,pdata->xgmac_regs + (unsigned long)reg);
      #line 2661 
      reg += 4U;
      #line 2662 
      reg_val = 0U;
    }
    #line 2639 
    __Cont: 
            #line 2639 
    ;
  }
  #line 2666 
  reg = 4144U;
  #line 2667 
  reg_val = 0U;
  #line 2668 
  i = 0U;
  #line 2668 
  while (pdata->rx_q_count > i) {
    {
      #line 2669 
      unsigned int tmp_12;
      #line 2669 
      tmp_12 = i;
      #line 2669 
      i ++;
      #line 2669 
      reg_val = (unsigned int)(128 << ((tmp_12 << 3) & 24U)) | reg_val;
      #line 2671 
      if ((i & 3U) != 0U && pdata->rx_q_count != i) 
                                                    #line 2672 
                                                    goto __Cont_0;
      #line 2674 
      iowrite32(reg_val,pdata->xgmac_regs + (unsigned long)reg);
      #line 2676 
      reg += 4U;
      #line 2677 
      reg_val = 0U;
    }
    #line 2668 
    __Cont_0: 
              #line 2668 
    ;
  }
  #line 2679 
  return;
}

#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_tc(struct xgbe_prv_data *pdata)
{
  #line 2683 
  unsigned int offset;
  #line 2683 
  unsigned int queue;
  #line 2683 
  unsigned int prio;
  #line 2684 
  u8 i;
  #line 2686 
  netdev_reset_tc(pdata->netdev);
  #line 2687 
  if ((unsigned int)pdata->num_tcs == 0U) 
                                          #line 2688 
                                          return;
  #line 2690 
  netdev_set_num_tc(pdata->netdev,(unsigned char)((int)pdata->num_tcs));
  #line 2692 
  i = (unsigned char)0U;
  #line 2692 
  queue = 0U;
  #line 2692 
  offset = 0U;
  #line 2692 
  while ((int)pdata->num_tcs > (int)i) {
    #line 2693 
    while (pdata->tx_q_count > queue && pdata->q2tc_map[queue] == (unsigned int)i) 
      #line 2695 
      queue ++;
    #line 2697 
    if ((pdata->msg_enable & 1U) != 0U) {
      #line 2697 
      bool branch;
      #line 2697 
      struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_tc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"TC%u using TXq%u-%u\n", .lineno = (unsigned int)2697U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2697 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
      #line 2697 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2697 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug474,pdata->netdev,(char *)"TC%u using TXq%u-%u\n",(int)i,offset,queue + 4294967295U);
    }
    #line 2699 
    netdev_set_tc_queue(pdata->netdev,(unsigned char)((int)i),(unsigned short)((int)((unsigned short)queue) - (int)((unsigned short)offset)),(unsigned short)((int)((unsigned short)offset)));
    #line 2700 
    offset = queue;
    #line 2692 
    i = (u8)((int)i + 1);
  }
  #line 2703 
  if (pdata->ets == (struct ieee_ets *)0) 
                                          #line 2704 
                                          return;
  #line 2706 
  prio = 0U;
  #line 2706 
  while (prio <= 7U) {
    #line 2707 
    netdev_set_prio_tc_map(pdata->netdev,(unsigned char)((int)((unsigned char)prio)),(unsigned char)((int)(pdata->ets)->prio_tc[prio]));
    #line 2706 
    prio ++;
  }
  #line 2709 
  return;
}

#line 2711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_dcb_tc(struct xgbe_prv_data *pdata)
{
  #line 2714 
  unsigned int total_weight;
  #line 2714 
  unsigned int min_weight;
  #line 2714 
  unsigned int weight;
  #line 2715 
  unsigned int mask;
  #line 2715 
  unsigned int reg;
  #line 2715 
  unsigned int reg_val;
  #line 2716 
  unsigned int i;
  #line 2716 
  unsigned int prio;
  #line 2713 
  struct ieee_ets *ets = pdata->ets;
  #line 2718 
  if (ets == (struct ieee_ets *)0) 
                                   #line 2719 
                                   return;
  {
    #line 2724 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 4096U);
    #line 2724 
    reg_val_0 &= 4294967199U;
    #line 2724 
    reg_val_0 |= 64U;
    #line 2724 
    iowrite32(reg_val_0,pdata->xgmac_regs + 4096U);
  }
  #line 2727 
  total_weight = (pdata->netdev)->mtu * pdata->hw_feat.tc_cnt;
  #line 2728 
  min_weight = total_weight / 100U;
  #line 2729 
  if (min_weight == 0U) 
                        #line 2730 
                        min_weight = 1U;
  #line 2732 
  i = 0U;
  #line 2732 
  while (pdata->hw_feat.tc_cnt > i) {
    #line 2734 
    mask = 0U;
    #line 2735 
    prio = 0U;
    #line 2735 
    while (prio <= 7U) {
      #line 2736 
      if ((unsigned int)ets->prio_tc[prio] == i) 
                                                 #line 2737 
                                                 mask = (unsigned int)(1 << prio) | mask;
      #line 2735 
      prio ++;
    }
    #line 2739 
    mask &= 255U;
    #line 2741 
    if ((pdata->msg_enable & 1U) != 0U) {
      #line 2741 
      bool branch;
      #line 2741 
      struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_dcb_tc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"TC%u PRIO mask=%#x\n", .lineno = (unsigned int)2741U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2741 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
      #line 2741 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2741 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug475,pdata->netdev,(char *)"TC%u PRIO mask=%#x\n",i,mask);
    }
    #line 2743 
    reg = (i & 4294967292U) + 4160U;
    #line 2744 
    reg_val = ioread32(pdata->xgmac_regs + (unsigned long)reg);
    #line 2746 
    reg_val = (unsigned int)(~ (255 << ((i << 3) & 24U))) & reg_val;
    #line 2747 
    reg_val = (mask << ((i << 3) & 24U)) | reg_val;
    #line 2749 
    iowrite32(reg_val,pdata->xgmac_regs + (unsigned long)reg);
    #line 2752 
    switch ((int)ets->tc_tsa[i]) {
      #line 2761 
      unsigned int tmp_5;
      #line 2761 
      unsigned int __UNIQUE_ID___x479;
      #line 2753 
      case 0: 
              #line 2753 
      ;
      #line 2754 
      if ((pdata->msg_enable & 1U) != 0U) {
        #line 2754 
        bool branch_0;
        #line 2754 
        struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_dcb_tc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"TC%u using SP\n", .lineno = (unsigned int)2754U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2754 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
        #line 2754 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 2754 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug476,pdata->netdev,(char *)"TC%u using SP\n",i);
      }
      {
        #line 2756 
        u32 reg_val_1 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4368U));
        #line 2756 
        reg_val_1 &= 4294967292U;
        #line 2756 
        reg_val_1 = reg_val_1;
        #line 2756 
        iowrite32(reg_val_1,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4368U));
      }
      #line 2758 
      break;
      #line 2759 
      case 2: 
              #line 2759 
      ;
      #line 2760 
      weight = ((unsigned int)ets->tc_tx_bw[i] * total_weight) / 100U;
      {
        #line 2761 
        unsigned int tmp_3;
        #line 2761 
        unsigned int __UNIQUE_ID___x477;
        {
          #line 2761 
          __UNIQUE_ID___x477 = weight;
          #line 2761 
          unsigned int __UNIQUE_ID___y478 = min_weight;
          #line 2761 
          if (__UNIQUE_ID___x477 > __UNIQUE_ID___y478) 
                                                       #line 2761 
                                                       tmp_3 = __UNIQUE_ID___x477; else 
                                                                    #line 2761 
                                                                    tmp_3 = __UNIQUE_ID___y478;
          }
        #line 2761 
        __UNIQUE_ID___x479 = tmp_3;
        #line 2761 
        unsigned int __UNIQUE_ID___y480 = total_weight;
        #line 2761 
        if (__UNIQUE_ID___x479 < __UNIQUE_ID___y480) 
                                                     #line 2761 
                                                     tmp_5 = __UNIQUE_ID___x479; else 
                                                                    #line 2761 
                                                                    tmp_5 = __UNIQUE_ID___y480;
        }
      #line 2761 
      weight = tmp_5;
      #line 2763 
      if ((pdata->msg_enable & 1U) != 0U) {
        #line 2763 
        bool branch_1;
        #line 2763 
        struct _ddebug __UNIQUE_ID_ddebug481 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_dcb_tc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c", .format = (char *)"TC%u using DWRR (weight %u)\n", .lineno = (unsigned int)2763U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2763 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug481.key.dd_key_false.key,(_Bool)0);
        #line 2763 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 2763 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug481,pdata->netdev,(char *)"TC%u using DWRR (weight %u)\n",i,weight);
      }
      {
        #line 2765 
        u32 reg_val_2 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4368U));
        #line 2765 
        reg_val_2 &= 4294967292U;
        #line 2765 
        reg_val_2 |= 2U;
        #line 2765 
        iowrite32(reg_val_2,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4368U));
      }
      {
        #line 2767 
        u32 reg_val_3 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4376U));
        #line 2767 
        reg_val_3 &= 4292870144U;
        #line 2767 
        reg_val_3 = (weight & 2097151U) | reg_val_3;
        #line 2767 
        iowrite32(reg_val_3,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4376U));
      }
      #line 2769 
      break;
    }
    #line 2732 
    i ++;
  }
  #line 2773 
  xgbe_config_tc(pdata);
  #line 2774 
  return;
}

#line 2776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_dcb_pfc(struct xgbe_prv_data *pdata)
{
  #line 2778 
  if (! test_bit(0L,& pdata->dev_state)) {
    #line 2780 
    netif_tx_stop_all_queues(pdata->netdev);
    #line 2783 
    (*(pdata->hw_if.disable_rx))(pdata);
  }
  #line 2786 
  xgbe_config_rx_fifo_size(pdata);
  #line 2787 
  xgbe_config_flow_control(pdata);
  #line 2789 
  if (! test_bit(0L,& pdata->dev_state)) {
    #line 2791 
    (*(pdata->hw_if.enable_rx))(pdata);
    #line 2794 
    netif_tx_start_all_queues_0(pdata->netdev);
  }
  #line 2796 
  return;
}

#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_mac_address(struct xgbe_prv_data *pdata)
{
  #line 2800 
  xgbe_set_mac_address_0(pdata,(pdata->netdev)->dev_addr);
  #line 2803 
  if (pdata->hw_feat.hash_table_size != 0U) {
    {
      #line 2804 
      u32 reg_val = ioread32(pdata->xgmac_regs + 8U);
      #line 2804 
      reg_val &= 4294966271U;
      #line 2804 
      reg_val |= 1024U;
      #line 2804 
      iowrite32(reg_val,pdata->xgmac_regs + 8U);
    }
    {
      #line 2805 
      u32 reg_val_0 = ioread32(pdata->xgmac_regs + 8U);
      #line 2805 
      reg_val_0 &= 4294967293U;
      #line 2805 
      reg_val_0 |= 2U;
      #line 2805 
      iowrite32(reg_val_0,pdata->xgmac_regs + 8U);
    }
    {
      #line 2806 
      u32 reg_val_1 = ioread32(pdata->xgmac_regs + 8U);
      #line 2806 
      reg_val_1 &= 4294967291U;
      #line 2806 
      reg_val_1 |= 4U;
      #line 2806 
      iowrite32(reg_val_1,pdata->xgmac_regs + 8U);
    }
  }
  #line 2809 
  return;
}

#line 2810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_jumbo_enable(struct xgbe_prv_data *pdata)
{
  #line 2812 
  unsigned int val;
  #line 2814 
  val = (unsigned int)((pdata->netdev)->mtu > 1500U);
  {
    #line 2816 
    u32 reg_val = ioread32(pdata->xgmac_regs + 4U);
    #line 2816 
    reg_val &= 4294967039U;
    #line 2816 
    reg_val = ((val << 8) & 256U) | reg_val;
    #line 2816 
    iowrite32(reg_val,pdata->xgmac_regs + 4U);
  }
  #line 2818 
  return;
}

#line 2819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_mac_speed(struct xgbe_prv_data *pdata)
{
  #line 2821 
  xgbe_set_speed(pdata,pdata->phy_speed);
  #line 2822 
  return;
}

#line 2824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_checksum_offload(struct xgbe_prv_data *pdata)
{
  #line 2826 
  if (((pdata->netdev)->features & 549755813888ULL) != 0ULL) 
                                                             #line 2827 
                                                             xgbe_enable_rx_csum(pdata); else 
                                                                    #line 2829 
                                                                    xgbe_disable_rx_csum(pdata);
  #line 2830 
  return;
}

#line 2832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_vlan_support(struct xgbe_prv_data *pdata)
{
  {
    #line 2835 
    u32 reg_val = ioread32(pdata->xgmac_regs + 96U);
    #line 2835 
    reg_val &= 4294443007U;
    #line 2835 
    reg_val = reg_val;
    #line 2835 
    iowrite32(reg_val,pdata->xgmac_regs + 96U);
  }
  {
    #line 2836 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 96U);
    #line 2836 
    reg_val_0 &= 4293918719U;
    #line 2836 
    reg_val_0 |= 1048576U;
    #line 2836 
    iowrite32(reg_val_0,pdata->xgmac_regs + 96U);
  }
  #line 2839 
  xgbe_update_vlan_hash_table(pdata);
  #line 2841 
  if (((pdata->netdev)->features & 512ULL) != 0ULL) 
                                                    #line 2842 
                                                    xgbe_enable_rx_vlan_filtering(pdata); else 
                                                                    #line 2844 
                                                                    xgbe_disable_rx_vlan_filtering(pdata);
  #line 2846 
  if (((pdata->netdev)->features & 256ULL) != 0ULL) 
                                                    #line 2847 
                                                    xgbe_enable_rx_vlan_stripping(pdata); else 
                                                                    #line 2849 
                                                                    xgbe_disable_rx_vlan_stripping(pdata);
  #line 2850 
  return;
}

#line 2852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static u64 xgbe_mmc_read(struct xgbe_prv_data *pdata, unsigned int reg_lo)
{
  #line 2854 
  bool read_hi;
  #line 2855 
  u64 val;
  #line 2857 
  if ((pdata->vdata)->mmc_64bit != 0U) 
    #line 2858 
    switch (reg_lo) {
      #line 2860 
      case (unsigned int)2352: 
                               #line 2860 
      ;
      #line 2861 
      case (unsigned int)2356: 
                               #line 2861 
      ;
      #line 2862 
      case (unsigned int)2360: 
                               #line 2862 
      ;
      #line 2863 
      case (unsigned int)2364: 
                               #line 2863 
      ;
      #line 2864 
      case (unsigned int)2464: 
                               #line 2864 
      ;
      #line 2865 
      read_hi = (_Bool)0;
      #line 2866 
      break;
      #line 2868 
      default: 
               #line 2868 
      ;
      #line 2869 
      read_hi = (_Bool)1;
    }
  else 
    #line 2872 
    switch (reg_lo) {
      #line 2874 
      case (unsigned int)2068: 
                               #line 2874 
      ;
      #line 2875 
      case (unsigned int)2180: 
                               #line 2875 
      ;
      #line 2876 
      case (unsigned int)2312: 
                               #line 2876 
      ;
      #line 2877 
      case (unsigned int)2320: 
                               #line 2877 
      ;
      #line 2878 
      read_hi = (_Bool)1;
      #line 2879 
      break;
      #line 2881 
      default: 
               #line 2881 
      ;
      #line 2882 
      read_hi = (_Bool)0;
    }
  #line 2886 
  val = (unsigned long long)ioread32(pdata->xgmac_regs + (unsigned long)reg_lo);
  #line 2888 
  if ((int)read_hi != 0) {
    #line 2889 
    val = ((unsigned long long)ioread32(pdata->xgmac_regs + ((unsigned long)reg_lo + (unsigned long)4U)) << 32) | val;
  }
  #line 2891 
  return val;
}

#line 2894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_tx_mmc_int(struct xgbe_prv_data *pdata)
{
  #line 2896 
  struct xgbe_mmc_stats *stats = & pdata->mmc_stats;
  #line 2897 
  unsigned int mmc_isr = ioread32(pdata->xgmac_regs + 2056U);
  #line 2899 
  if ((mmc_isr & 1U) != 0U) {
    #line 2901 
    stats->txoctetcount_gb += xgbe_mmc_read(pdata,2068U);
  }
  #line 2903 
  if ((mmc_isr & 2U) != 0U) {
    #line 2905 
    stats->txframecount_gb += xgbe_mmc_read(pdata,2076U);
  }
  #line 2907 
  if ((mmc_isr & 4U) != 0U) {
    #line 2909 
    stats->txbroadcastframes_g += xgbe_mmc_read(pdata,2084U);
  }
  #line 2911 
  if ((mmc_isr & 8U) != 0U) {
    #line 2913 
    stats->txmulticastframes_g += xgbe_mmc_read(pdata,2092U);
  }
  #line 2915 
  if ((mmc_isr & 16U) != 0U) {
    #line 2917 
    stats->tx64octets_gb += xgbe_mmc_read(pdata,2100U);
  }
  #line 2919 
  if ((mmc_isr & 32U) != 0U) {
    #line 2921 
    stats->tx65to127octets_gb += xgbe_mmc_read(pdata,2108U);
  }
  #line 2923 
  if ((mmc_isr & 64U) != 0U) {
    #line 2925 
    stats->tx128to255octets_gb += xgbe_mmc_read(pdata,2116U);
  }
  #line 2927 
  if ((mmc_isr & 128U) != 0U) {
    #line 2929 
    stats->tx256to511octets_gb += xgbe_mmc_read(pdata,2124U);
  }
  #line 2931 
  if ((mmc_isr & 256U) != 0U) {
    #line 2933 
    stats->tx512to1023octets_gb += xgbe_mmc_read(pdata,2132U);
  }
  #line 2935 
  if ((mmc_isr & 512U) != 0U) {
    #line 2937 
    stats->tx1024tomaxoctets_gb += xgbe_mmc_read(pdata,2140U);
  }
  #line 2939 
  if ((mmc_isr & 1024U) != 0U) {
    #line 2941 
    stats->txunicastframes_gb += xgbe_mmc_read(pdata,2148U);
  }
  #line 2943 
  if ((mmc_isr & 2048U) != 0U) {
    #line 2945 
    stats->txmulticastframes_gb += xgbe_mmc_read(pdata,2156U);
  }
  #line 2947 
  if ((mmc_isr & 4096U) != 0U) {
    #line 2949 
    stats->txbroadcastframes_g += xgbe_mmc_read(pdata,2164U);
  }
  #line 2951 
  if ((mmc_isr & 8192U) != 0U) {
    #line 2953 
    stats->txunderflowerror += xgbe_mmc_read(pdata,2172U);
  }
  #line 2955 
  if ((mmc_isr & 16384U) != 0U) {
    #line 2957 
    stats->txoctetcount_g += xgbe_mmc_read(pdata,2180U);
  }
  #line 2959 
  if ((mmc_isr & 32768U) != 0U) {
    #line 2961 
    stats->txframecount_g += xgbe_mmc_read(pdata,2188U);
  }
  #line 2963 
  if ((mmc_isr & 65536U) != 0U) {
    #line 2965 
    stats->txpauseframes += xgbe_mmc_read(pdata,2196U);
  }
  #line 2967 
  if ((mmc_isr & 131072U) != 0U) {
    #line 2969 
    stats->txvlanframes_g += xgbe_mmc_read(pdata,2204U);
  }
  #line 2970 
  return;
}

#line 2972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_rx_mmc_int(struct xgbe_prv_data *pdata)
{
  #line 2974 
  struct xgbe_mmc_stats *stats = & pdata->mmc_stats;
  #line 2975 
  unsigned int mmc_isr = ioread32(pdata->xgmac_regs + 2052U);
  #line 2977 
  if ((mmc_isr & 1U) != 0U) {
    #line 2979 
    stats->rxframecount_gb += xgbe_mmc_read(pdata,2304U);
  }
  #line 2981 
  if ((mmc_isr & 2U) != 0U) {
    #line 2983 
    stats->rxoctetcount_gb += xgbe_mmc_read(pdata,2312U);
  }
  #line 2985 
  if ((mmc_isr & 4U) != 0U) {
    #line 2987 
    stats->rxoctetcount_g += xgbe_mmc_read(pdata,2320U);
  }
  #line 2989 
  if ((mmc_isr & 8U) != 0U) {
    #line 2991 
    stats->rxbroadcastframes_g += xgbe_mmc_read(pdata,2328U);
  }
  #line 2993 
  if ((mmc_isr & 16U) != 0U) {
    #line 2995 
    stats->rxmulticastframes_g += xgbe_mmc_read(pdata,2336U);
  }
  #line 2997 
  if ((mmc_isr & 32U) != 0U) {
    #line 2999 
    stats->rxcrcerror += xgbe_mmc_read(pdata,2344U);
  }
  #line 3001 
  if ((mmc_isr & 64U) != 0U) {
    #line 3003 
    stats->rxrunterror += xgbe_mmc_read(pdata,2352U);
  }
  #line 3005 
  if ((mmc_isr & 128U) != 0U) {
    #line 3007 
    stats->rxjabbererror += xgbe_mmc_read(pdata,2356U);
  }
  #line 3009 
  if ((mmc_isr & 256U) != 0U) {
    #line 3011 
    stats->rxundersize_g += xgbe_mmc_read(pdata,2360U);
  }
  #line 3013 
  if ((mmc_isr & 512U) != 0U) {
    #line 3015 
    stats->rxoversize_g += xgbe_mmc_read(pdata,2364U);
  }
  #line 3017 
  if ((mmc_isr & 1024U) != 0U) {
    #line 3019 
    stats->rx64octets_gb += xgbe_mmc_read(pdata,2368U);
  }
  #line 3021 
  if ((mmc_isr & 2048U) != 0U) {
    #line 3023 
    stats->rx65to127octets_gb += xgbe_mmc_read(pdata,2376U);
  }
  #line 3025 
  if ((mmc_isr & 4096U) != 0U) {
    #line 3027 
    stats->rx128to255octets_gb += xgbe_mmc_read(pdata,2384U);
  }
  #line 3029 
  if ((mmc_isr & 8192U) != 0U) {
    #line 3031 
    stats->rx256to511octets_gb += xgbe_mmc_read(pdata,2392U);
  }
  #line 3033 
  if ((mmc_isr & 16384U) != 0U) {
    #line 3035 
    stats->rx512to1023octets_gb += xgbe_mmc_read(pdata,2400U);
  }
  #line 3037 
  if ((mmc_isr & 32768U) != 0U) {
    #line 3039 
    stats->rx1024tomaxoctets_gb += xgbe_mmc_read(pdata,2408U);
  }
  #line 3041 
  if ((mmc_isr & 65536U) != 0U) {
    #line 3043 
    stats->rxunicastframes_g += xgbe_mmc_read(pdata,2416U);
  }
  #line 3045 
  if ((mmc_isr & 131072U) != 0U) {
    #line 3047 
    stats->rxlengtherror += xgbe_mmc_read(pdata,2424U);
  }
  #line 3049 
  if ((mmc_isr & 262144U) != 0U) {
    #line 3051 
    stats->rxoutofrangetype += xgbe_mmc_read(pdata,2432U);
  }
  #line 3053 
  if ((mmc_isr & 524288U) != 0U) {
    #line 3055 
    stats->rxpauseframes += xgbe_mmc_read(pdata,2440U);
  }
  #line 3057 
  if ((mmc_isr & 1048576U) != 0U) {
    #line 3059 
    stats->rxfifooverflow += xgbe_mmc_read(pdata,2448U);
  }
  #line 3061 
  if ((mmc_isr & 2097152U) != 0U) {
    #line 3063 
    stats->rxvlanframes_gb += xgbe_mmc_read(pdata,2456U);
  }
  #line 3065 
  if ((mmc_isr & 4194304U) != 0U) {
    #line 3067 
    stats->rxwatchdogerror += xgbe_mmc_read(pdata,2464U);
  }
  #line 3068 
  return;
}

#line 3070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_read_mmc_stats(struct xgbe_prv_data *pdata)
{
  #line 3072 
  struct xgbe_mmc_stats *stats = & pdata->mmc_stats;
  {
    #line 3075 
    u32 reg_val = ioread32(pdata->xgmac_regs + 2048U);
    #line 3075 
    reg_val &= 4294967287U;
    #line 3075 
    reg_val |= 8U;
    #line 3075 
    iowrite32(reg_val,pdata->xgmac_regs + 2048U);
  }
  #line 3078 
  stats->txoctetcount_gb += xgbe_mmc_read(pdata,2068U);
  #line 3081 
  stats->txframecount_gb += xgbe_mmc_read(pdata,2076U);
  #line 3084 
  stats->txbroadcastframes_g += xgbe_mmc_read(pdata,2084U);
  #line 3087 
  stats->txmulticastframes_g += xgbe_mmc_read(pdata,2092U);
  #line 3090 
  stats->tx64octets_gb += xgbe_mmc_read(pdata,2100U);
  #line 3093 
  stats->tx65to127octets_gb += xgbe_mmc_read(pdata,2108U);
  #line 3096 
  stats->tx128to255octets_gb += xgbe_mmc_read(pdata,2116U);
  #line 3099 
  stats->tx256to511octets_gb += xgbe_mmc_read(pdata,2124U);
  #line 3102 
  stats->tx512to1023octets_gb += xgbe_mmc_read(pdata,2132U);
  #line 3105 
  stats->tx1024tomaxoctets_gb += xgbe_mmc_read(pdata,2140U);
  #line 3108 
  stats->txunicastframes_gb += xgbe_mmc_read(pdata,2148U);
  #line 3111 
  stats->txmulticastframes_gb += xgbe_mmc_read(pdata,2156U);
  #line 3114 
  stats->txbroadcastframes_g += xgbe_mmc_read(pdata,2164U);
  #line 3117 
  stats->txunderflowerror += xgbe_mmc_read(pdata,2172U);
  #line 3120 
  stats->txoctetcount_g += xgbe_mmc_read(pdata,2180U);
  #line 3123 
  stats->txframecount_g += xgbe_mmc_read(pdata,2188U);
  #line 3126 
  stats->txpauseframes += xgbe_mmc_read(pdata,2196U);
  #line 3129 
  stats->txvlanframes_g += xgbe_mmc_read(pdata,2204U);
  #line 3132 
  stats->rxframecount_gb += xgbe_mmc_read(pdata,2304U);
  #line 3135 
  stats->rxoctetcount_gb += xgbe_mmc_read(pdata,2312U);
  #line 3138 
  stats->rxoctetcount_g += xgbe_mmc_read(pdata,2320U);
  #line 3141 
  stats->rxbroadcastframes_g += xgbe_mmc_read(pdata,2328U);
  #line 3144 
  stats->rxmulticastframes_g += xgbe_mmc_read(pdata,2336U);
  #line 3147 
  stats->rxcrcerror += xgbe_mmc_read(pdata,2344U);
  #line 3150 
  stats->rxrunterror += xgbe_mmc_read(pdata,2352U);
  #line 3153 
  stats->rxjabbererror += xgbe_mmc_read(pdata,2356U);
  #line 3156 
  stats->rxundersize_g += xgbe_mmc_read(pdata,2360U);
  #line 3159 
  stats->rxoversize_g += xgbe_mmc_read(pdata,2364U);
  #line 3162 
  stats->rx64octets_gb += xgbe_mmc_read(pdata,2368U);
  #line 3165 
  stats->rx65to127octets_gb += xgbe_mmc_read(pdata,2376U);
  #line 3168 
  stats->rx128to255octets_gb += xgbe_mmc_read(pdata,2384U);
  #line 3171 
  stats->rx256to511octets_gb += xgbe_mmc_read(pdata,2392U);
  #line 3174 
  stats->rx512to1023octets_gb += xgbe_mmc_read(pdata,2400U);
  #line 3177 
  stats->rx1024tomaxoctets_gb += xgbe_mmc_read(pdata,2408U);
  #line 3180 
  stats->rxunicastframes_g += xgbe_mmc_read(pdata,2416U);
  #line 3183 
  stats->rxlengtherror += xgbe_mmc_read(pdata,2424U);
  #line 3186 
  stats->rxoutofrangetype += xgbe_mmc_read(pdata,2432U);
  #line 3189 
  stats->rxpauseframes += xgbe_mmc_read(pdata,2440U);
  #line 3192 
  stats->rxfifooverflow += xgbe_mmc_read(pdata,2448U);
  #line 3195 
  stats->rxvlanframes_gb += xgbe_mmc_read(pdata,2456U);
  #line 3198 
  stats->rxwatchdogerror += xgbe_mmc_read(pdata,2464U);
  {
    #line 3201 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 2048U);
    #line 3201 
    reg_val_0 &= 4294967287U;
    #line 3201 
    reg_val_0 = reg_val_0;
    #line 3201 
    iowrite32(reg_val_0,pdata->xgmac_regs + 2048U);
  }
  #line 3203 
  return;
}

#line 3204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_config_mmc(struct xgbe_prv_data *pdata)
{
  {
    #line 3207 
    u32 reg_val = ioread32(pdata->xgmac_regs + 2048U);
    #line 3207 
    reg_val &= 4294967291U;
    #line 3207 
    reg_val |= 4U;
    #line 3207 
    iowrite32(reg_val,pdata->xgmac_regs + 2048U);
  }
  {
    #line 3210 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 2048U);
    #line 3210 
    reg_val_0 &= 4294967294U;
    #line 3210 
    reg_val_0 |= 1U;
    #line 3210 
    iowrite32(reg_val_0,pdata->xgmac_regs + 2048U);
  }
  #line 3212 
  return;
}

#line 3213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_txq_prepare_tx_stop(struct xgbe_prv_data *pdata, unsigned int queue)
{
  #line 3216 
  unsigned int tx_status;
  #line 3217 
  unsigned long tx_timeout;
  #line 3223 
  tx_timeout = jiffies + 250UL;
  #line 3224 
  while (1) {
    {
      #line 3224 
      unsigned long __dummy;
      #line 3224 
      unsigned long __dummy2;
      }
    #line 3224 
    if (1 != 0) {
      {
        #line 3224 
        unsigned long __dummy_0;
        #line 3224 
        unsigned long __dummy2_0;
        }
      #line 3224 
      if (1 != 0) {
        #line 3224 
        if (! ((long)(jiffies - tx_timeout) < 0L)) 
                                                   #line 3224 
                                                   break;
      }
      else 
           #line 3224 
           break;
    }
    else 
         #line 3224 
         break;
    #line 3225 
    tx_status = ioread32(pdata->xgmac_regs + ((unsigned long)(queue * 128U) + (unsigned long)4360U));
    #line 3226 
    if (((tx_status >> 1) & 3U) != 1U && (tx_status & 16U) == 0U) 
                                                                  #line 3228 
                                                                  break;
    #line 3230 
    usleep_range(500UL,1000UL);
  }
  {
    #line 3233 
    unsigned long __dummy_1;
    #line 3233 
    unsigned long __dummy2_1;
    }
  #line 3233 
  if (1 == 0) 
              #line 3234 
              netdev_info(pdata->netdev,(char *)"timed out waiting for Tx queue %u to empty\n",queue);
  else {
    {
      #line 3233 
      unsigned long __dummy_2;
      #line 3233 
      unsigned long __dummy2_2;
      }
    #line 3233 
    if (1 == 0) 
                #line 3234 
                netdev_info(pdata->netdev,(char *)"timed out waiting for Tx queue %u to empty\n",queue);
    else 
      #line 3233 
      if ((long)(jiffies - tx_timeout) >= 0L) 
                                              #line 3234 
                                              netdev_info(pdata->netdev,(char *)"timed out waiting for Tx queue %u to empty\n",queue);
  }
  #line 3236 
  return;
}

#line 3239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_prepare_tx_stop(struct xgbe_prv_data *pdata, unsigned int queue)
{
  #line 3242 
  unsigned int tx_dsr;
  #line 3242 
  unsigned int tx_pos;
  #line 3242 
  unsigned int tx_qidx;
  #line 3243 
  unsigned int tx_status;
  #line 3244 
  unsigned long tx_timeout;
  #line 3246 
  if ((pdata->hw_feat.version & 255U) > 32U) 
                                             #line 3247 
                                             xgbe_txq_prepare_tx_stop(pdata,queue);
  #line 3250 
  if (queue <= 2U) {
    #line 3251 
    tx_dsr = 12320U;
    #line 3252 
    tx_pos = queue * 8U + 12U;
  }
  else {
    #line 3254 
    tx_qidx = queue + 4294967293U;
    #line 3256 
    tx_dsr = (tx_qidx & 4294967292U) + 12324U;
    #line 3257 
    tx_pos = (tx_qidx & 3U) * 8U + 4U;
  }
  #line 3265 
  tx_timeout = jiffies + 250UL;
  #line 3266 
  while (1) {
    {
      #line 3266 
      unsigned long __dummy;
      #line 3266 
      unsigned long __dummy2;
      }
    #line 3266 
    if (1 != 0) {
      {
        #line 3266 
        unsigned long __dummy_0;
        #line 3266 
        unsigned long __dummy2_0;
        }
      #line 3266 
      if (1 != 0) {
        #line 3266 
        if (! ((long)(jiffies - tx_timeout) < 0L)) 
                                                   #line 3266 
                                                   break;
      }
      else 
           #line 3266 
           break;
    }
    else 
         #line 3266 
         break;
    #line 3267 
    tx_status = ioread32(pdata->xgmac_regs + (unsigned long)tx_dsr);
    #line 3268 
    tx_status = (tx_status >> tx_pos) & 15U;
    #line 3269 
    if (tx_status == 0U || tx_status == 6U) 
                                            #line 3271 
                                            break;
    #line 3273 
    usleep_range(500UL,1000UL);
  }
  {
    #line 3276 
    unsigned long __dummy_1;
    #line 3276 
    unsigned long __dummy2_1;
    }
  #line 3276 
  if (1 == 0) 
              #line 3277 
              netdev_info(pdata->netdev,(char *)"timed out waiting for Tx DMA channel %u to stop\n",queue);
  else {
    {
      #line 3276 
      unsigned long __dummy_2;
      #line 3276 
      unsigned long __dummy2_2;
      }
    #line 3276 
    if (1 == 0) 
                #line 3277 
                netdev_info(pdata->netdev,(char *)"timed out waiting for Tx DMA channel %u to stop\n",queue);
    else 
      #line 3276 
      if ((long)(jiffies - tx_timeout) >= 0L) 
                                              #line 3277 
                                              netdev_info(pdata->netdev,(char *)"timed out waiting for Tx DMA channel %u to stop\n",queue);
  }
  #line 3279 
  return;
}

#line 3282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_enable_tx(struct xgbe_prv_data *pdata)
{
  #line 3284 
  unsigned int i;
  #line 3287 
  i = 0U;
  #line 3287 
  while (pdata->channel_count > i) {
    #line 3288 
    if ((pdata->channel[i])->tx_ring == (struct xgbe_ring *)0) 
                                                               #line 3289 
                                                               break;
    {
      #line 3291 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs + 4U);
      #line 3291 
      reg_val &= 4294967294U;
      #line 3291 
      reg_val |= 1U;
      #line 3291 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs + 4U);
    }
    #line 3287 
    i ++;
  }
  #line 3295 
  i = 0U;
  #line 3295 
  while (pdata->tx_q_count > i) {
    {
      #line 3296 
      u32 reg_val_0 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
      #line 3296 
      reg_val_0 &= 4294967283U;
      #line 3296 
      reg_val_0 |= 8U;
      #line 3296 
      iowrite32(reg_val_0,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
    }
    #line 3295 
    i ++;
  }
  {
    #line 3300 
    u32 reg_val_1 = ioread32(pdata->xgmac_regs);
    #line 3300 
    reg_val_1 &= 4294967294U;
    #line 3300 
    reg_val_1 |= 1U;
    #line 3300 
    iowrite32(reg_val_1,pdata->xgmac_regs);
  }
  #line 3302 
  return;
}

#line 3303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_disable_tx(struct xgbe_prv_data *pdata)
{
  #line 3305 
  unsigned int i;
  #line 3308 
  i = 0U;
  #line 3308 
  while (pdata->tx_q_count > i) {
    #line 3309 
    xgbe_prepare_tx_stop(pdata,i);
    #line 3308 
    i ++;
  }
  {
    #line 3312 
    u32 reg_val = ioread32(pdata->xgmac_regs);
    #line 3312 
    reg_val &= 4294967294U;
    #line 3312 
    reg_val = reg_val;
    #line 3312 
    iowrite32(reg_val,pdata->xgmac_regs);
  }
  #line 3315 
  i = 0U;
  #line 3315 
  while (pdata->tx_q_count > i) {
    {
      #line 3316 
      u32 reg_val_0 = ioread32(pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
      #line 3316 
      reg_val_0 &= 4294967283U;
      #line 3316 
      reg_val_0 = reg_val_0;
      #line 3316 
      iowrite32(reg_val_0,pdata->xgmac_regs + ((unsigned long)(i * 128U) + (unsigned long)4352U));
    }
    #line 3315 
    i ++;
  }
  #line 3319 
  i = 0U;
  #line 3319 
  while (pdata->channel_count > i) {
    #line 3320 
    if ((pdata->channel[i])->tx_ring == (struct xgbe_ring *)0) 
                                                               #line 3321 
                                                               break;
    {
      #line 3323 
      u32 reg_val_1 = ioread32((pdata->channel[i])->dma_regs + 4U);
      #line 3323 
      reg_val_1 &= 4294967294U;
      #line 3323 
      reg_val_1 = reg_val_1;
      #line 3323 
      iowrite32(reg_val_1,(pdata->channel[i])->dma_regs + 4U);
    }
    #line 3319 
    i ++;
  }
  #line 3326 
  return;
}

#line 3327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_prepare_rx_stop(struct xgbe_prv_data *pdata, unsigned int queue)
{
  #line 3330 
  unsigned int rx_status;
  #line 3331 
  unsigned long rx_timeout;
  #line 3337 
  rx_timeout = jiffies + 250UL;
  #line 3338 
  while (1) {
    {
      #line 3338 
      unsigned long __dummy;
      #line 3338 
      unsigned long __dummy2;
      }
    #line 3338 
    if (1 != 0) {
      {
        #line 3338 
        unsigned long __dummy_0;
        #line 3338 
        unsigned long __dummy2_0;
        }
      #line 3338 
      if (1 != 0) {
        #line 3338 
        if (! ((long)(jiffies - rx_timeout) < 0L)) 
                                                   #line 3338 
                                                   break;
      }
      else 
           #line 3338 
           break;
    }
    else 
         #line 3338 
         break;
    #line 3339 
    rx_status = ioread32(pdata->xgmac_regs + ((unsigned long)(queue * 128U) + (unsigned long)4424U));
    #line 3340 
    if (((rx_status >> 16) & 16383U) == 0U && ((rx_status >> 4) & 3U) == 0U) 
      #line 3342 
      break;
    #line 3344 
    usleep_range(500UL,1000UL);
  }
  {
    #line 3347 
    unsigned long __dummy_1;
    #line 3347 
    unsigned long __dummy2_1;
    }
  #line 3347 
  if (1 == 0) 
              #line 3348 
              netdev_info(pdata->netdev,(char *)"timed out waiting for Rx queue %u to empty\n",queue);
  else {
    {
      #line 3347 
      unsigned long __dummy_2;
      #line 3347 
      unsigned long __dummy2_2;
      }
    #line 3347 
    if (1 == 0) 
                #line 3348 
                netdev_info(pdata->netdev,(char *)"timed out waiting for Rx queue %u to empty\n",queue);
    else 
      #line 3347 
      if ((long)(jiffies - rx_timeout) >= 0L) 
                                              #line 3348 
                                              netdev_info(pdata->netdev,(char *)"timed out waiting for Rx queue %u to empty\n",queue);
  }
  #line 3350 
  return;
}

#line 3353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_enable_rx(struct xgbe_prv_data *pdata)
{
  #line 3355 
  unsigned int reg_val;
  #line 3355 
  unsigned int i;
  #line 3358 
  i = 0U;
  #line 3358 
  while (pdata->channel_count > i) {
    #line 3359 
    if ((pdata->channel[i])->rx_ring == (struct xgbe_ring *)0) 
                                                               #line 3360 
                                                               break;
    {
      #line 3362 
      u32 reg_val_0 = ioread32((pdata->channel[i])->dma_regs + 8U);
      #line 3362 
      reg_val_0 &= 4294967294U;
      #line 3362 
      reg_val_0 |= 1U;
      #line 3362 
      iowrite32(reg_val_0,(pdata->channel[i])->dma_regs + 8U);
    }
    #line 3358 
    i ++;
  }
  #line 3366 
  reg_val = 0U;
  #line 3367 
  i = 0U;
  #line 3367 
  while (pdata->rx_q_count > i) {
    #line 3368 
    reg_val = (unsigned int)(2 << (i << 1)) | reg_val;
    #line 3367 
    i ++;
  }
  #line 3369 
  iowrite32(reg_val,pdata->xgmac_regs + 160U);
  {
    #line 3372 
    u32 reg_val_1 = ioread32(pdata->xgmac_regs + 4U);
    #line 3372 
    reg_val_1 &= 4294967287U;
    #line 3372 
    reg_val_1 |= 8U;
    #line 3372 
    iowrite32(reg_val_1,pdata->xgmac_regs + 4U);
  }
  {
    #line 3373 
    u32 reg_val_2 = ioread32(pdata->xgmac_regs + 4U);
    #line 3373 
    reg_val_2 &= 4294967291U;
    #line 3373 
    reg_val_2 |= 4U;
    #line 3373 
    iowrite32(reg_val_2,pdata->xgmac_regs + 4U);
  }
  {
    #line 3374 
    u32 reg_val_3 = ioread32(pdata->xgmac_regs + 4U);
    #line 3374 
    reg_val_3 &= 4294967293U;
    #line 3374 
    reg_val_3 |= 2U;
    #line 3374 
    iowrite32(reg_val_3,pdata->xgmac_regs + 4U);
  }
  {
    #line 3375 
    u32 reg_val_4 = ioread32(pdata->xgmac_regs + 4U);
    #line 3375 
    reg_val_4 &= 4294967294U;
    #line 3375 
    reg_val_4 |= 1U;
    #line 3375 
    iowrite32(reg_val_4,pdata->xgmac_regs + 4U);
  }
  #line 3377 
  return;
}

#line 3378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_disable_rx(struct xgbe_prv_data *pdata)
{
  #line 3380 
  unsigned int i;
  {
    #line 3383 
    u32 reg_val = ioread32(pdata->xgmac_regs + 4U);
    #line 3383 
    reg_val &= 4294967287U;
    #line 3383 
    reg_val = reg_val;
    #line 3383 
    iowrite32(reg_val,pdata->xgmac_regs + 4U);
  }
  {
    #line 3384 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs + 4U);
    #line 3384 
    reg_val_0 &= 4294967291U;
    #line 3384 
    reg_val_0 = reg_val_0;
    #line 3384 
    iowrite32(reg_val_0,pdata->xgmac_regs + 4U);
  }
  {
    #line 3385 
    u32 reg_val_1 = ioread32(pdata->xgmac_regs + 4U);
    #line 3385 
    reg_val_1 &= 4294967293U;
    #line 3385 
    reg_val_1 = reg_val_1;
    #line 3385 
    iowrite32(reg_val_1,pdata->xgmac_regs + 4U);
  }
  {
    #line 3386 
    u32 reg_val_2 = ioread32(pdata->xgmac_regs + 4U);
    #line 3386 
    reg_val_2 &= 4294967294U;
    #line 3386 
    reg_val_2 = reg_val_2;
    #line 3386 
    iowrite32(reg_val_2,pdata->xgmac_regs + 4U);
  }
  #line 3389 
  i = 0U;
  #line 3389 
  while (pdata->rx_q_count > i) {
    #line 3390 
    xgbe_prepare_rx_stop(pdata,i);
    #line 3389 
    i ++;
  }
  #line 3393 
  iowrite32(0U,pdata->xgmac_regs + 160U);
  #line 3396 
  i = 0U;
  #line 3396 
  while (pdata->channel_count > i) {
    #line 3397 
    if ((pdata->channel[i])->rx_ring == (struct xgbe_ring *)0) 
                                                               #line 3398 
                                                               break;
    {
      #line 3400 
      u32 reg_val_3 = ioread32((pdata->channel[i])->dma_regs + 8U);
      #line 3400 
      reg_val_3 &= 4294967294U;
      #line 3400 
      reg_val_3 = reg_val_3;
      #line 3400 
      iowrite32(reg_val_3,(pdata->channel[i])->dma_regs + 8U);
    }
    #line 3396 
    i ++;
  }
  #line 3403 
  return;
}

#line 3404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_powerup_tx(struct xgbe_prv_data *pdata)
{
  #line 3406 
  unsigned int i;
  #line 3409 
  i = 0U;
  #line 3409 
  while (pdata->channel_count > i) {
    #line 3410 
    if ((pdata->channel[i])->tx_ring == (struct xgbe_ring *)0) 
                                                               #line 3411 
                                                               break;
    {
      #line 3413 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs + 4U);
      #line 3413 
      reg_val &= 4294967294U;
      #line 3413 
      reg_val |= 1U;
      #line 3413 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs + 4U);
    }
    #line 3409 
    i ++;
  }
  {
    #line 3417 
    u32 reg_val_0 = ioread32(pdata->xgmac_regs);
    #line 3417 
    reg_val_0 &= 4294967294U;
    #line 3417 
    reg_val_0 |= 1U;
    #line 3417 
    iowrite32(reg_val_0,pdata->xgmac_regs);
  }
  #line 3419 
  return;
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_powerdown_tx(struct xgbe_prv_data *pdata)
{
  #line 3422 
  unsigned int i;
  #line 3425 
  i = 0U;
  #line 3425 
  while (pdata->tx_q_count > i) {
    #line 3426 
    xgbe_prepare_tx_stop(pdata,i);
    #line 3425 
    i ++;
  }
  {
    #line 3429 
    u32 reg_val = ioread32(pdata->xgmac_regs);
    #line 3429 
    reg_val &= 4294967294U;
    #line 3429 
    reg_val = reg_val;
    #line 3429 
    iowrite32(reg_val,pdata->xgmac_regs);
  }
  #line 3432 
  i = 0U;
  #line 3432 
  while (pdata->channel_count > i) {
    #line 3433 
    if ((pdata->channel[i])->tx_ring == (struct xgbe_ring *)0) 
                                                               #line 3434 
                                                               break;
    {
      #line 3436 
      u32 reg_val_0 = ioread32((pdata->channel[i])->dma_regs + 4U);
      #line 3436 
      reg_val_0 &= 4294967294U;
      #line 3436 
      reg_val_0 = reg_val_0;
      #line 3436 
      iowrite32(reg_val_0,(pdata->channel[i])->dma_regs + 4U);
    }
    #line 3432 
    i ++;
  }
  #line 3439 
  return;
}

#line 3440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_powerup_rx(struct xgbe_prv_data *pdata)
{
  #line 3442 
  unsigned int i;
  #line 3445 
  i = 0U;
  #line 3445 
  while (pdata->channel_count > i) {
    #line 3446 
    if ((pdata->channel[i])->rx_ring == (struct xgbe_ring *)0) 
                                                               #line 3447 
                                                               break;
    {
      #line 3449 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs + 8U);
      #line 3449 
      reg_val &= 4294967294U;
      #line 3449 
      reg_val |= 1U;
      #line 3449 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs + 8U);
    }
    #line 3445 
    i ++;
  }
  #line 3452 
  return;
}

#line 3453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static void xgbe_powerdown_rx(struct xgbe_prv_data *pdata)
{
  #line 3455 
  unsigned int i;
  #line 3458 
  i = 0U;
  #line 3458 
  while (pdata->channel_count > i) {
    #line 3459 
    if ((pdata->channel[i])->rx_ring == (struct xgbe_ring *)0) 
                                                               #line 3460 
                                                               break;
    {
      #line 3462 
      u32 reg_val = ioread32((pdata->channel[i])->dma_regs + 8U);
      #line 3462 
      reg_val &= 4294967294U;
      #line 3462 
      reg_val = reg_val;
      #line 3462 
      iowrite32(reg_val,(pdata->channel[i])->dma_regs + 8U);
    }
    #line 3458 
    i ++;
  }
  #line 3465 
  return;
}

#line 3466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
static int xgbe_init(struct xgbe_prv_data *pdata)
{
  #line 3469 
  int ret;
  #line 3468 
  struct xgbe_desc_if *desc_if = & pdata->desc_if;
  #line 3474 
  ret = xgbe_flush_tx_queues(pdata);
  #line 3475 
  if (ret != 0) {
    #line 3476 
    netdev_err(pdata->netdev,(char *)"error flushing TX queues\n");
    #line 3477 
    return ret;
  }
  #line 3483 
  xgbe_config_dma_bus(pdata);
  #line 3484 
  xgbe_config_dma_cache(pdata);
  #line 3485 
  xgbe_config_osp_mode(pdata);
  #line 3486 
  xgbe_config_pbl_val(pdata);
  #line 3487 
  xgbe_config_rx_coalesce(pdata);
  #line 3488 
  xgbe_config_tx_coalesce(pdata);
  #line 3489 
  xgbe_config_rx_buffer_size(pdata);
  #line 3490 
  xgbe_config_tso_mode(pdata);
  #line 3491 
  xgbe_config_sph_mode(pdata);
  #line 3492 
  xgbe_config_rss(pdata);
  #line 3493 
  (*(desc_if->wrapper_tx_desc_init))(pdata);
  #line 3494 
  (*(desc_if->wrapper_rx_desc_init))(pdata);
  #line 3495 
  xgbe_enable_dma_interrupts(pdata);
  #line 3500 
  xgbe_config_mtl_mode(pdata);
  #line 3501 
  xgbe_config_queue_mapping(pdata);
  #line 3502 
  xgbe_config_tsf_mode(pdata,pdata->tx_sf_mode);
  #line 3503 
  xgbe_config_rsf_mode(pdata,pdata->rx_sf_mode);
  #line 3504 
  xgbe_config_tx_threshold(pdata,pdata->tx_threshold);
  #line 3505 
  xgbe_config_rx_threshold(pdata,pdata->rx_threshold);
  #line 3506 
  xgbe_config_tx_fifo_size(pdata);
  #line 3507 
  xgbe_config_rx_fifo_size(pdata);
  #line 3511 
  xgbe_config_dcb_tc(pdata);
  #line 3512 
  xgbe_enable_mtl_interrupts(pdata);
  #line 3517 
  xgbe_config_mac_address(pdata);
  #line 3518 
  xgbe_config_rx_mode(pdata);
  #line 3519 
  xgbe_config_jumbo_enable(pdata);
  #line 3520 
  xgbe_config_flow_control(pdata);
  #line 3521 
  xgbe_config_mac_speed(pdata);
  #line 3522 
  xgbe_config_checksum_offload(pdata);
  #line 3523 
  xgbe_config_vlan_support(pdata);
  #line 3524 
  xgbe_config_mmc(pdata);
  #line 3525 
  xgbe_enable_mac_interrupts(pdata);
  #line 3530 
  xgbe_enable_ecc_interrupts(pdata);
  #line 3534 
  return 0;
}

#line 3537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dev.c"
void xgbe_init_function_ptrs_dev(struct xgbe_hw_if *hw_if)
{
  #line 3541 
  hw_if->tx_complete = & xgbe_tx_complete;
  #line 3543 
  hw_if->set_mac_address = & xgbe_set_mac_address_0;
  #line 3544 
  hw_if->config_rx_mode = & xgbe_config_rx_mode;
  #line 3546 
  hw_if->enable_rx_csum = & xgbe_enable_rx_csum;
  #line 3547 
  hw_if->disable_rx_csum = & xgbe_disable_rx_csum;
  #line 3549 
  hw_if->enable_rx_vlan_stripping = & xgbe_enable_rx_vlan_stripping;
  #line 3550 
  hw_if->disable_rx_vlan_stripping = & xgbe_disable_rx_vlan_stripping;
  #line 3551 
  hw_if->enable_rx_vlan_filtering = & xgbe_enable_rx_vlan_filtering;
  #line 3552 
  hw_if->disable_rx_vlan_filtering = & xgbe_disable_rx_vlan_filtering;
  #line 3553 
  hw_if->update_vlan_hash_table = & xgbe_update_vlan_hash_table;
  #line 3555 
  hw_if->read_mmd_regs = & xgbe_read_mmd_regs;
  #line 3556 
  hw_if->write_mmd_regs = & xgbe_write_mmd_regs;
  #line 3558 
  hw_if->set_speed = & xgbe_set_speed;
  #line 3560 
  hw_if->set_ext_mii_mode = & xgbe_set_ext_mii_mode;
  #line 3561 
  hw_if->read_ext_mii_regs = & xgbe_read_ext_mii_regs;
  #line 3562 
  hw_if->write_ext_mii_regs = & xgbe_write_ext_mii_regs;
  #line 3564 
  hw_if->set_gpio = & xgbe_set_gpio;
  #line 3565 
  hw_if->clr_gpio = & xgbe_clr_gpio;
  #line 3567 
  hw_if->enable_tx = & xgbe_enable_tx;
  #line 3568 
  hw_if->disable_tx = & xgbe_disable_tx;
  #line 3569 
  hw_if->enable_rx = & xgbe_enable_rx;
  #line 3570 
  hw_if->disable_rx = & xgbe_disable_rx;
  #line 3572 
  hw_if->powerup_tx = & xgbe_powerup_tx;
  #line 3573 
  hw_if->powerdown_tx = & xgbe_powerdown_tx;
  #line 3574 
  hw_if->powerup_rx = & xgbe_powerup_rx;
  #line 3575 
  hw_if->powerdown_rx = & xgbe_powerdown_rx;
  #line 3577 
  hw_if->dev_xmit = & xgbe_dev_xmit;
  #line 3578 
  hw_if->dev_read = & xgbe_dev_read;
  #line 3579 
  hw_if->enable_int = & xgbe_enable_int;
  #line 3580 
  hw_if->disable_int = & xgbe_disable_int;
  #line 3581 
  hw_if->init = & xgbe_init;
  #line 3582 
  hw_if->exit = & xgbe_exit;
  #line 3585 
  hw_if->tx_desc_init = & xgbe_tx_desc_init;
  #line 3586 
  hw_if->rx_desc_init = & xgbe_rx_desc_init;
  #line 3587 
  hw_if->tx_desc_reset = & xgbe_tx_desc_reset;
  #line 3588 
  hw_if->rx_desc_reset = & xgbe_rx_desc_reset;
  #line 3589 
  hw_if->is_last_desc = & xgbe_is_last_desc;
  #line 3590 
  hw_if->is_context_desc = & xgbe_is_context_desc;
  #line 3591 
  hw_if->tx_start_xmit = & xgbe_tx_start_xmit;
  #line 3594 
  hw_if->config_tx_flow_control = & xgbe_config_tx_flow_control;
  #line 3595 
  hw_if->config_rx_flow_control = & xgbe_config_rx_flow_control;
  #line 3598 
  hw_if->config_rx_coalesce = & xgbe_config_rx_coalesce;
  #line 3599 
  hw_if->config_tx_coalesce = & xgbe_config_tx_coalesce;
  #line 3600 
  hw_if->usec_to_riwt = & xgbe_usec_to_riwt;
  #line 3601 
  hw_if->riwt_to_usec = & xgbe_riwt_to_usec;
  #line 3604 
  hw_if->config_rx_threshold = & xgbe_config_rx_threshold;
  #line 3605 
  hw_if->config_tx_threshold = & xgbe_config_tx_threshold;
  #line 3608 
  hw_if->config_rsf_mode = & xgbe_config_rsf_mode;
  #line 3609 
  hw_if->config_tsf_mode = & xgbe_config_tsf_mode;
  #line 3612 
  hw_if->config_osp_mode = & xgbe_config_osp_mode;
  #line 3615 
  hw_if->tx_mmc_int = & xgbe_tx_mmc_int;
  #line 3616 
  hw_if->rx_mmc_int = & xgbe_rx_mmc_int;
  #line 3617 
  hw_if->read_mmc_stats = & xgbe_read_mmc_stats;
  #line 3620 
  hw_if->config_tstamp = & xgbe_config_tstamp;
  #line 3621 
  hw_if->update_tstamp_addend = & xgbe_update_tstamp_addend;
  #line 3622 
  hw_if->set_tstamp_time = & xgbe_set_tstamp_time;
  #line 3623 
  hw_if->get_tstamp_time = & xgbe_get_tstamp_time;
  #line 3624 
  hw_if->get_tx_tstamp = & xgbe_get_tx_tstamp;
  #line 3627 
  hw_if->config_tc = & xgbe_config_tc;
  #line 3628 
  hw_if->config_dcb_tc = & xgbe_config_dcb_tc;
  #line 3629 
  hw_if->config_dcb_pfc = & xgbe_config_dcb_pfc;
  #line 3632 
  hw_if->enable_rss = & xgbe_enable_rss;
  #line 3633 
  hw_if->disable_rss = & xgbe_disable_rss;
  #line 3634 
  hw_if->set_rss_hash_key = & xgbe_set_rss_hash_key;
  #line 3635 
  hw_if->set_rss_lookup_table = & xgbe_set_rss_lookup_table;
  #line 3638 
  hw_if->disable_ecc_ded = & xgbe_disable_ecc_ded;
  #line 3639 
  hw_if->disable_ecc_sec = & xgbe_disable_ecc_sec;
  #line 3642 
  hw_if->enable_vxlan = & xgbe_enable_vxlan;
  #line 3643 
  hw_if->disable_vxlan = & xgbe_disable_vxlan;
  #line 3644 
  hw_if->set_vxlan_id = & xgbe_set_vxlan_id;
  #line 3649 
  return;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 117 
  return ldv_find_next_bit(addr,size,offset);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 159 
  return ldv_find_first_bit(addr,size);
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static void cif_mutex_lock_rss_mutex_of_xgbe_prv_data(struct mutex *lock)
{
  #line 690 
  ldv_mutex_model_lock(lock,(char *)"rss_mutex_of_xgbe_prv_data");
  #line 691 
  return;
}

#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static void cif_mutex_unlock_rss_mutex_of_xgbe_prv_data(struct mutex *lock)
{
  #line 697 
  ldv_mutex_model_unlock(lock,(char *)"rss_mutex_of_xgbe_prv_data");
  #line 698 
  return;
}

#line 701  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static void cif___ldv_spin_lock_xpcs_lock_of_xgbe_prv_data(spinlock_t *lock)
{
  #line 704 
  ldv_spin_model_lock((char *)"xpcs_lock_of_xgbe_prv_data");
  #line 706 
  __ldv_spin_lock(lock);
  #line 707 
  return;
}

#line 710  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static void cif_spin_unlock_irqrestore_xpcs_lock_of_xgbe_prv_data(spinlock_t *lock, unsigned long flags)
{
  #line 713 
  ldv_spin_model_unlock((char *)"xpcs_lock_of_xgbe_prv_data");
  #line 715 
  spin_unlock_irqrestore_1(lock,flags);
  #line 716 
  return;
}

#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dev.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires)
{
  #line 723 
  return emg_mod_timer(timer,expires);
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dcb.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags);
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c"
static int xgbe_dcb_ieee_getets(struct net_device *netdev, struct ieee_ets *ets)
{
  #line 126 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 129 
  ets->ets_cap = (unsigned char)pdata->hw_feat.tc_cnt;
  #line 131 
  if (pdata->ets != (struct ieee_ets *)0) {
    #line 132 
    ets->cbs = (pdata->ets)->cbs;
    #line 133 
    memcpy((void *)(& ets->tc_tx_bw),(void *)(& (pdata->ets)->tc_tx_bw),8UL);
    #line 135 
    memcpy((void *)(& ets->tc_tsa),(void *)(& (pdata->ets)->tc_tsa),8UL);
    #line 137 
    memcpy((void *)(& ets->prio_tc),(void *)(& (pdata->ets)->prio_tc),8UL);
  }
  #line 141 
  return 0;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c"
static int xgbe_dcb_ieee_setets(struct net_device *netdev, struct ieee_ets *ets)
{
  #line 148 
  unsigned int i;
  #line 148 
  unsigned int tc_ets;
  #line 148 
  unsigned int tc_ets_weight;
  #line 147 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 149 
  u8 max_tc = (unsigned char)0U;
  #line 151 
  tc_ets = 0U;
  #line 152 
  tc_ets_weight = 0U;
  #line 153 
  i = 0U;
  #line 153 
  while (i <= 7U) {
    {
      #line 161 
      unsigned char __UNIQUE_ID___x443;
      #line 161 
      int tmp_2;
      #line 154 
      if ((pdata->msg_enable & 1U) != 0U) {
        #line 154 
        bool branch;
        #line 154 
        struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dcb_ieee_setets", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c", .format = (char *)"TC%u: tx_bw=%hhu, rx_bw=%hhu, tsa=%hhu\n", .lineno = (unsigned int)154U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 154 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
        #line 154 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 154 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,netdev,(char *)"TC%u: tx_bw=%hhu, rx_bw=%hhu, tsa=%hhu\n",i,(int)ets->tc_tx_bw[i],(int)ets->tc_rx_bw[i],(int)ets->tc_tsa[i]);
      }
      #line 158 
      if ((pdata->msg_enable & 1U) != 0U) {
        #line 158 
        bool branch_0;
        #line 158 
        struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dcb_ieee_setets", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c", .format = (char *)"PRIO%u: TC=%hhu\n", .lineno = (unsigned int)158U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 158 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
        #line 158 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 158 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,netdev,(char *)"PRIO%u: TC=%hhu\n",i,(int)ets->prio_tc[i]);
      }
      {
        #line 161 
        __UNIQUE_ID___x443 = max_tc;
        #line 161 
        unsigned char __UNIQUE_ID___y444 = ets->prio_tc[i];
        #line 161 
        if ((int)__UNIQUE_ID___x443 > (int)__UNIQUE_ID___y444) 
                                                               #line 161 
                                                               tmp_2 = (int)__UNIQUE_ID___x443; else 
                                                                    #line 161 
                                                                    tmp_2 = (int)__UNIQUE_ID___y444;
        }
      #line 161 
      max_tc = (unsigned char)tmp_2;
      #line 162 
      if ((unsigned int)ets->tc_tx_bw[i] != 0U || (unsigned int)ets->tc_tsa[i] != 0U) {
        #line 163 
        unsigned char __UNIQUE_ID___x445;
        #line 163 
        int tmp_4;
        {
          #line 163 
          __UNIQUE_ID___x445 = max_tc;
          #line 163 
          unsigned char __UNIQUE_ID___y446 = (unsigned char)i;
          #line 163 
          if ((int)__UNIQUE_ID___x445 > (int)__UNIQUE_ID___y446) 
                                                                 #line 163 
                                                                 tmp_4 = (int)__UNIQUE_ID___x445; else 
                                                                    #line 163 
                                                                    tmp_4 = (int)__UNIQUE_ID___y446;
          }
        #line 163 
        max_tc = (unsigned char)tmp_4;
      }
      #line 165 
      switch ((int)ets->tc_tsa[i]) {
        #line 166 
        case 0: 
                #line 166 
        ;
        #line 167 
        break;
        #line 168 
        case 2: 
                #line 168 
        ;
        #line 169 
        tc_ets = 1U;
        #line 170 
        tc_ets_weight = (unsigned int)ets->tc_tx_bw[i] + tc_ets_weight;
        #line 171 
        break;
        #line 172 
        default: 
                 #line 172 
        ;
        #line 173 
        if ((pdata->msg_enable & 1U) != 0U) 
                                            #line 173 
                                            netdev_err(netdev,(char *)"unsupported TSA algorithm (%hhu)\n",(int)ets->tc_tsa[i]);
        #line 176 
        return -22;
      }
    }
    #line 153 
    i ++;
  }
  #line 181 
  if ((unsigned int)max_tc >= pdata->hw_feat.tc_cnt) {
    #line 182 
    if ((pdata->msg_enable & 1U) != 0U) 
                                        #line 182 
                                        netdev_err(netdev,(char *)"exceeded number of supported traffic classes\n");
    #line 184 
    return -22;
  }
  #line 188 
  if (tc_ets != 0U && tc_ets_weight != 100U) {
    #line 189 
    if ((pdata->msg_enable & 1U) != 0U) 
                                        #line 189 
                                        netdev_err(netdev,(char *)"sum of ETS algorithm weights is not 100 (%u)\n",tc_ets_weight);
    #line 192 
    return -22;
  }
  #line 195 
  if (pdata->ets == (struct ieee_ets *)0) {
    #line 196 
    pdata->ets = (struct ieee_ets *)cif_devm_kzalloc_1(pdata->dev,59UL,3264U);
    #line 198 
    if (pdata->ets == (struct ieee_ets *)0) 
                                            #line 199 
                                            return -12;
  }
  #line 202 
  pdata->num_tcs = (unsigned char)((unsigned int)max_tc + 1U);
  #line 203 
  memcpy((void *)pdata->ets,(void *)ets,59UL);
  #line 205 
  (*(pdata->hw_if.config_dcb_tc))(pdata);
  #line 207 
  return 0;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c"
static int xgbe_dcb_ieee_getpfc(struct net_device *netdev, struct ieee_pfc *pfc)
{
  #line 213 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 216 
  pfc->pfc_cap = (unsigned char)pdata->hw_feat.tc_cnt;
  #line 218 
  if (pdata->pfc != (struct ieee_pfc *)0) {
    #line 219 
    pfc->pfc_en = (pdata->pfc)->pfc_en;
    #line 220 
    pfc->mbc = (pdata->pfc)->mbc;
    #line 221 
    pfc->delay = (pdata->pfc)->delay;
  }
  #line 224 
  return 0;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c"
static int xgbe_dcb_ieee_setpfc(struct net_device *netdev, struct ieee_pfc *pfc)
{
  #line 230 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 232 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 232 
    bool branch;
    #line 232 
    struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dcb_ieee_setpfc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c", .format = (char *)"cap=%hhu, en=%#hhx, mbc=%hhu, delay=%hhu\n", .lineno = (unsigned int)232U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 232 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
    #line 232 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 232 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,netdev,(char *)"cap=%hhu, en=%#hhx, mbc=%hhu, delay=%hhu\n",(int)pfc->pfc_cap,(int)pfc->pfc_en,(int)pfc->mbc,(int)pfc->delay);
  }
  #line 237 
  if (((int)pfc->pfc_en & - (1 << pdata->hw_feat.tc_cnt)) != 0) {
    #line 238 
    if ((pdata->msg_enable & 1U) != 0U) 
                                        #line 238 
                                        netdev_err(netdev,(char *)"PFC requested for unsupported traffic class\n");
    #line 240 
    return -22;
  }
  #line 243 
  if (pdata->pfc == (struct ieee_pfc *)0) {
    #line 244 
    pdata->pfc = (struct ieee_pfc *)cif_devm_kzalloc_1(pdata->dev,136UL,3264U);
    #line 246 
    if (pdata->pfc == (struct ieee_pfc *)0) 
                                            #line 247 
                                            return -12;
  }
  #line 250 
  memcpy((void *)pdata->pfc,(void *)pfc,136UL);
  #line 252 
  (*(pdata->hw_if.config_dcb_pfc))(pdata);
  #line 254 
  return 0;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c"
static u8 xgbe_dcb_getdcbx(struct net_device *netdev)
{
  #line 259 
  return (unsigned char)9U;
}

#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c"
static u8 xgbe_dcb_setdcbx(struct net_device *netdev, u8 dcbx)
{
  #line 264 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 265 
  u8 support = xgbe_dcb_getdcbx(netdev);
  #line 267 
  if ((pdata->msg_enable & 1U) != 0U) {
    #line 267 
    bool branch;
    #line 267 
    struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_dcb_setdcbx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c", .format = (char *)"DCBX=%#hhx\n", .lineno = (unsigned int)267U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 267 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
    #line 267 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 267 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,netdev,(char *)"DCBX=%#hhx\n",(int)dcbx);
  }
  #line 269 
  if (((int)dcbx & ~ ((int)support)) != 0) 
                                           #line 270 
                                           return (unsigned char)1U;
  #line 272 
  if (((int)dcbx & (int)support) != (int)support) 
                                                  #line 273 
                                                  return (unsigned char)1U;
  #line 275 
  return (unsigned char)0U;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c"
static struct dcbnl_rtnl_ops xgbe_dcbnl_ops = {.ieee_getets = & xgbe_dcb_ieee_getets, .ieee_setets = & xgbe_dcb_ieee_setets, .ieee_getpfc = & xgbe_dcb_ieee_getpfc, .ieee_setpfc = & xgbe_dcb_ieee_setpfc, .getdcbx = & xgbe_dcb_getdcbx, .setdcbx = & xgbe_dcb_setdcbx};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-dcb.c"
struct dcbnl_rtnl_ops *xgbe_get_dcbnl_ops(void)
{
  #line 292 
  return & xgbe_dcbnl_ops;
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-dcb.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags)
{
  #line 690 
  return ldv_devm_kzalloc(size,flags);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static long PTR_ERR_0(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static bool IS_ERR_2(void *ptr);
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 715  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static bool cif_schedule_work_1(struct work_struct *work);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1019 
void pci_dev_put(struct pci_dev *);
#line 1054 
#line 1054 
struct pci_dev *pci_get_domain_bus_and_slot(int, unsigned int, unsigned int);
#line 1135 
#line 1135 
int pcim_enable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1202 
#line 1202 
int pci_select_bars(struct pci_dev *, unsigned long);
#line 1346 
#line 723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 731  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1447 
int pci_alloc_irq_vectors_affinity(struct pci_dev *, unsigned int, unsigned int, unsigned int, struct irq_affinity *);
#line 1451 
#line 1451 
void pci_free_irq_vectors(struct pci_dev *);
#line 1452 
#line 1452 
int pci_irq_vector(struct pci_dev *, unsigned int);
#line 1768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs, unsigned int max_vecs, unsigned int flags)
{
  #line 1771 
  return pci_alloc_irq_vectors_affinity(dev,min_vecs,max_vecs,flags,
                                     (struct irq_affinity *)0);
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1972 
#line 1972 
void **pcim_iomap_table(struct pci_dev *);
#line 1973 
#line 1973 
int pcim_iomap_regions(struct pci_dev *, int, char *);
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static int xgbe_config_multi_msi(struct xgbe_prv_data *pdata)
{
  #line 132 
  unsigned int __UNIQUE_ID___x441;
  #line 132 
  unsigned int tmp;
  #line 127 
  unsigned int vector_count;
  #line 128 
  unsigned int i;
  #line 128 
  unsigned int j;
  #line 129 
  int ret;
  #line 131 
  vector_count = 4U;
  {
    #line 132 
    __UNIQUE_ID___x441 = pdata->rx_ring_count;
    #line 132 
    unsigned int __UNIQUE_ID___y442 = pdata->tx_ring_count;
    #line 132 
    if (__UNIQUE_ID___x441 > __UNIQUE_ID___y442) 
                                                 #line 132 
                                                 tmp = __UNIQUE_ID___x441; else 
                                                                    #line 132 
                                                                    tmp = __UNIQUE_ID___y442;
    }
  #line 133 
  vector_count = tmp + vector_count;
  #line 135 
  ret = pci_alloc_irq_vectors(pdata->pcidev,5U,vector_count,6U);
  #line 137 
  if (ret < 0) {
    #line 138 
    _dev_info(pdata->dev,(char *)"multi MSI/MSI-X enablement failed\n");
    #line 139 
    return ret;
  }
  #line 142 
  pdata->isr_as_tasklet = 1U;
  #line 143 
  pdata->irq_count = (unsigned int)ret;
  #line 145 
  pdata->dev_irq = pci_irq_vector(pdata->pcidev,0U);
  #line 146 
  pdata->ecc_irq = pci_irq_vector(pdata->pcidev,1U);
  #line 147 
  pdata->i2c_irq = pci_irq_vector(pdata->pcidev,2U);
  #line 148 
  pdata->an_irq = pci_irq_vector(pdata->pcidev,3U);
  #line 150 
  i = 4U;
  #line 150 
  j = 0U;
  #line 150 
  while (i < (unsigned int)ret) {
    #line 151 
    pdata->channel_irq[j] = pci_irq_vector(pdata->pcidev,i);
    #line 150 
    i ++;
    #line 150 
    j ++;
  }
  #line 152 
  pdata->channel_irq_count = j;
  #line 154 
  pdata->per_channel_irq = 1U;
  #line 155 
  pdata->channel_irq_mode = 1U;
  #line 157 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 158 
    bool branch;
    #line 158 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_multi_msi", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"multi %s interrupts enabled\n", .lineno = (unsigned int)158U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 158 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 158 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 158 
      char *tmp_1;
      #line 158 
      if ((unsigned int)(pdata->pcidev)->msix_enabled != 0U) 
                                                             #line 158 
                                                             tmp_1 = (char *)"MSI-X"; else 
                                                                    #line 158 
                                                                    tmp_1 = (char *)"MSI";
      #line 158 
      ;
      #line 158 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,pdata->dev,(char *)"multi %s interrupts enabled\n",tmp_1);
    }
  }
  #line 161 
  return 0;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static int xgbe_config_irqs(struct xgbe_prv_data *pdata)
{
  #line 166 
  int ret;
  #line 168 
  ret = xgbe_config_multi_msi(pdata);
  #line 169 
  if (ret == 0) 
                #line 170 
                goto out;
  #line 172 
  ret = pci_alloc_irq_vectors(pdata->pcidev,1U,1U,3U);
  #line 174 
  if (ret < 0) {
    #line 175 
    _dev_info(pdata->dev,(char *)"single IRQ enablement failed\n");
    #line 176 
    return ret;
  }
  #line 179 
  pdata->isr_as_tasklet = (unsigned int)((unsigned int)(pdata->pcidev)->msi_enabled != 0U);
  #line 180 
  pdata->irq_count = 1U;
  #line 181 
  pdata->channel_irq_count = 1U;
  #line 183 
  pdata->dev_irq = pci_irq_vector(pdata->pcidev,0U);
  #line 184 
  pdata->ecc_irq = pci_irq_vector(pdata->pcidev,0U);
  #line 185 
  pdata->i2c_irq = pci_irq_vector(pdata->pcidev,0U);
  #line 186 
  pdata->an_irq = pci_irq_vector(pdata->pcidev,0U);
  #line 188 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 189 
    bool branch;
    #line 189 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_irqs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"single %s interrupt enabled\n", .lineno = (unsigned int)189U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 189 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 189 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 189 
      char *tmp;
      #line 189 
      if ((unsigned int)(pdata->pcidev)->msi_enabled != 0U) 
                                                            #line 189 
                                                            tmp = (char *)"MSI"; else 
                                                                    #line 189 
                                                                    tmp = (char *)"legacy";
      #line 189 
      ;
      #line 189 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug444,pdata->dev,(char *)"single %s interrupt enabled\n",tmp);
    }
  }
  #line 192 
  out: 
       #line 192 
  ;
  #line 193 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 194 
    unsigned int i;
    {
      #line 196 
      bool branch_0;
      #line 196 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_irqs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)" dev irq=%d\n", .lineno = (unsigned int)196U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 196 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 196 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 196 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug445,pdata->dev,(char *)" dev irq=%d\n",pdata->dev_irq);
    }
    {
      #line 197 
      bool branch_1;
      #line 197 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_irqs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)" ecc irq=%d\n", .lineno = (unsigned int)197U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 197 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 197 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 197 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug446,pdata->dev,(char *)" ecc irq=%d\n",pdata->ecc_irq);
    }
    {
      #line 198 
      bool branch_2;
      #line 198 
      struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_irqs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)" i2c irq=%d\n", .lineno = (unsigned int)198U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 198 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
      #line 198 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 198 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug447,pdata->dev,(char *)" i2c irq=%d\n",pdata->i2c_irq);
    }
    {
      #line 199 
      bool branch_3;
      #line 199 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_irqs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"  an irq=%d\n", .lineno = (unsigned int)199U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 199 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 199 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 199 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug448,pdata->dev,(char *)"  an irq=%d\n",pdata->an_irq);
    }
    #line 200 
    i = 0U;
    #line 200 
    while (pdata->channel_irq_count > i) {
      {
        #line 201 
        bool branch_4;
        #line 201 
        struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_config_irqs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)" dma%u irq=%d\n", .lineno = (unsigned int)201U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 201 
        branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
        #line 201 
        if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                      #line 201 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug449,pdata->dev,(char *)" dma%u irq=%d\n",i,pdata->channel_irq[i]);
      }
      #line 200 
      i ++;
    }
  }
  #line 205 
  return 0;
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static int xgbe_pci_probe(struct pci_dev *pdev, struct pci_device_id *id)
{
  #line 376 
  unsigned int tmp_18;
  #line 381 
  unsigned int __UNIQUE_ID___x468;
  #line 381 
  unsigned int tmp_20;
  #line 376 
  unsigned int __UNIQUE_ID___x466;
  #line 210 
  struct xgbe_prv_data *pdata;
  #line 212 
  void **iomap_table;
  #line 213 
  struct pci_dev *rdev;
  #line 214 
  unsigned int ma_lo;
  #line 214 
  unsigned int ma_hi;
  #line 215 
  unsigned int reg;
  #line 216 
  int bar_mask;
  #line 217 
  int ret;
  #line 211 
  struct device *dev = & pdev->dev;
  #line 219 
  pdata = xgbe_alloc_pdata(dev);
  #line 220 
  if ((int)IS_ERR_2((void *)pdata) != 0) {
    #line 221 
    ret = (int)PTR_ERR_0((void *)pdata);
    #line 222 
    goto err_alloc;
  }
  #line 225 
  pdata->pcidev = pdev;
  #line 226 
  pci_set_drvdata(pdev,(void *)pdata);
  #line 229 
  pdata->vdata = (struct xgbe_version_data *)id->driver_data;
  #line 231 
  ret = pcim_enable_device(pdev);
  #line 232 
  if (ret != 0) {
    #line 233 
    _dev_err(dev,(char *)"pcim_enable_device failed\n");
    #line 234 
    goto err_pci_enable;
  }
  #line 238 
  bar_mask = pci_select_bars(pdev,512UL);
  #line 239 
  ret = pcim_iomap_regions(pdev,bar_mask,(char *)"amd-xgbe");
  #line 240 
  if (ret != 0) {
    #line 241 
    _dev_err(dev,(char *)"pcim_iomap_regions failed\n");
    #line 242 
    goto err_pci_enable;
  }
  #line 245 
  iomap_table = pcim_iomap_table(pdev);
  #line 246 
  if (iomap_table == (void **)0) {
    #line 247 
    _dev_err(dev,(char *)"pcim_iomap_table failed\n");
    #line 248 
    ret = -12;
    #line 249 
    goto err_pci_enable;
  }
  #line 252 
  pdata->xgmac_regs = *iomap_table;
  #line 253 
  if (pdata->xgmac_regs == (void *)0) {
    #line 254 
    _dev_err(dev,(char *)"xgmac ioremap failed\n");
    #line 255 
    ret = -12;
    #line 256 
    goto err_pci_enable;
  }
  #line 258 
  pdata->xprop_regs = pdata->xgmac_regs + 118784U;
  #line 259 
  pdata->xi2c_regs = pdata->xgmac_regs + 122880U;
  #line 260 
  if ((pdata->msg_enable & 2U) != 0U) {
    {
      #line 261 
      bool branch;
      #line 261 
      struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"xgmac_regs = %p\n", .lineno = (unsigned int)261U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 261 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
      #line 261 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 261 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug450,dev,(char *)"xgmac_regs = %p\n",pdata->xgmac_regs);
    }
    {
      #line 262 
      bool branch_0;
      #line 262 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"xprop_regs = %p\n", .lineno = (unsigned int)262U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 262 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 262 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 262 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug451,dev,(char *)"xprop_regs = %p\n",pdata->xprop_regs);
    }
    {
      #line 263 
      bool branch_1;
      #line 263 
      struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"xi2c_regs  = %p\n", .lineno = (unsigned int)263U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 263 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
      #line 263 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 263 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug452,dev,(char *)"xi2c_regs  = %p\n",pdata->xi2c_regs);
    }
  }
  #line 266 
  pdata->xpcs_regs = *(iomap_table + 1U);
  #line 267 
  if (pdata->xpcs_regs == (void *)0) {
    #line 268 
    _dev_err(dev,(char *)"xpcs ioremap failed\n");
    #line 269 
    ret = -12;
    #line 270 
    goto err_pci_enable;
  }
  #line 272 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 273 
    bool branch_2;
    #line 273 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"xpcs_regs  = %p\n", .lineno = (unsigned int)273U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 273 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 273 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 273 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug453,dev,(char *)"xpcs_regs  = %p\n",pdata->xpcs_regs);
  }
  #line 276 
  rdev = pci_get_domain_bus_and_slot(0,0U,0U);
  #line 277 
  if ((rdev != (struct pci_dev *)0 && (unsigned int)rdev->vendor == 4130U) && (unsigned int)rdev->device == 5584U) {
    #line 279 
    pdata->xpcs_window_def_reg = 4192U;
    #line 280 
    pdata->xpcs_window_sel_reg = 4196U;
  }
  else {
    #line 282 
    pdata->xpcs_window_def_reg = 36960U;
    #line 283 
    pdata->xpcs_window_sel_reg = 36964U;
  }
  #line 285 
  pci_dev_put(rdev);
  #line 288 
  reg = ioread32(pdata->xpcs_regs + (unsigned long)pdata->xpcs_window_def_reg);
  #line 289 
  pdata->xpcs_window = (reg >> 6) & 16383U;
  #line 290 
  pdata->xpcs_window <<= 6;
  #line 291 
  pdata->xpcs_window_size = (reg >> 2) & 15U;
  #line 292 
  pdata->xpcs_window_size = (unsigned int)(1 << (pdata->xpcs_window_size + 7U));
  #line 293 
  pdata->xpcs_window_mask = pdata->xpcs_window_size + 4294967295U;
  #line 294 
  if ((pdata->msg_enable & 2U) != 0U) {
    {
      #line 295 
      bool branch_3;
      #line 295 
      struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"xpcs window def  = %#010x\n", .lineno = (unsigned int)295U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 295 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
      #line 295 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 295 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug454,dev,(char *)"xpcs window def  = %#010x\n",pdata->xpcs_window_def_reg);
    }
    {
      #line 297 
      bool branch_4;
      #line 297 
      struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"xpcs window sel  = %#010x\n", .lineno = (unsigned int)297U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 297 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
      #line 297 
      if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                    #line 297 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug455,dev,(char *)"xpcs window sel  = %#010x\n",pdata->xpcs_window_sel_reg);
    }
    {
      #line 299 
      bool branch_5;
      #line 299 
      struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"xpcs window      = %#010x\n", .lineno = (unsigned int)299U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 299 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
      #line 299 
      if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                    #line 299 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug456,dev,(char *)"xpcs window      = %#010x\n",pdata->xpcs_window);
    }
    {
      #line 301 
      bool branch_6;
      #line 301 
      struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"xpcs window size = %#010x\n", .lineno = (unsigned int)301U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 301 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
      #line 301 
      if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                    #line 301 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug457,dev,(char *)"xpcs window size = %#010x\n",pdata->xpcs_window_size);
    }
    {
      #line 303 
      bool branch_7;
      #line 303 
      struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"xpcs window mask = %#010x\n", .lineno = (unsigned int)303U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 303 
      branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
      #line 303 
      if ((long)((long)((int)branch_7 != 0)) != 0L) 
                                                    #line 303 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug458,dev,(char *)"xpcs window mask = %#010x\n",pdata->xpcs_window_mask);
    }
  }
  #line 307 
  pci_set_master(pdev);
  #line 310 
  iowrite32(2097151U,pdata->xprop_regs + 120U);
  #line 313 
  ma_lo = ioread32(pdata->xprop_regs + 32U);
  #line 314 
  ma_hi = ioread32(pdata->xprop_regs + 36U);
  #line 315 
  pdata->mac_addr[0] = (unsigned char)ma_lo;
  #line 316 
  pdata->mac_addr[1] = (unsigned char)(ma_lo >> 8);
  #line 317 
  pdata->mac_addr[2] = (unsigned char)(ma_lo >> 16);
  #line 318 
  pdata->mac_addr[3] = (unsigned char)(ma_lo >> 24);
  #line 319 
  pdata->mac_addr[4] = (unsigned char)ma_hi;
  #line 320 
  pdata->mac_addr[5] = (unsigned char)(ma_hi >> 8);
  #line 321 
  if (ma_hi >= (unsigned int)0) 
                                #line 321 
                                goto _LOR;
  else {
    #line 322 
    if (! is_valid_ether_addr((u8 *)(& pdata->mac_addr))) {
      #line 321 
      _LOR: {
              #line 323 
              _dev_err(dev,(char *)"invalid mac address\n");
              #line 324 
              ret = -22;
              #line 325 
              goto err_pci_enable;
            }
    }
  }
  #line 329 
  pdata->sysclk_rate = 500000000UL;
  #line 330 
  pdata->ptpclk_rate = 125000000UL;
  #line 333 
  pdata->coherent = 1U;
  #line 334 
  pdata->arcr = 3U;
  #line 335 
  pdata->awcr = 320017171U;
  #line 336 
  pdata->awarcr = 787U;
  #line 339 
  pdata->pp0 = ioread32(pdata->xprop_regs);
  #line 340 
  pdata->pp1 = ioread32(pdata->xprop_regs + 4U);
  #line 341 
  pdata->pp2 = ioread32(pdata->xprop_regs + 8U);
  #line 342 
  pdata->pp3 = ioread32(pdata->xprop_regs + 12U);
  #line 343 
  pdata->pp4 = ioread32(pdata->xprop_regs + 16U);
  #line 344 
  if ((pdata->msg_enable & 2U) != 0U) {
    {
      #line 345 
      bool branch_8;
      #line 345 
      struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"port property 0 = %#010x\n", .lineno = (unsigned int)345U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 345 
      branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
      #line 345 
      if ((long)((long)((int)branch_8 != 0)) != 0L) 
                                                    #line 345 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug459,dev,(char *)"port property 0 = %#010x\n",pdata->pp0);
    }
    {
      #line 346 
      bool branch_9;
      #line 346 
      struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"port property 1 = %#010x\n", .lineno = (unsigned int)346U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 346 
      branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
      #line 346 
      if ((long)((long)((int)branch_9 != 0)) != 0L) 
                                                    #line 346 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug460,dev,(char *)"port property 1 = %#010x\n",pdata->pp1);
    }
    {
      #line 347 
      bool branch_10;
      #line 347 
      struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"port property 2 = %#010x\n", .lineno = (unsigned int)347U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 347 
      branch_10 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
      #line 347 
      if ((long)((long)((int)branch_10 != 0)) != 0L) 
                                                     #line 347 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug461,dev,(char *)"port property 2 = %#010x\n",pdata->pp2);
    }
    {
      #line 348 
      bool branch_11;
      #line 348 
      struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"port property 3 = %#010x\n", .lineno = (unsigned int)348U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 348 
      branch_11 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
      #line 348 
      if ((long)((long)((int)branch_11 != 0)) != 0L) 
                                                     #line 348 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug462,dev,(char *)"port property 3 = %#010x\n",pdata->pp3);
    }
    {
      #line 349 
      bool branch_12;
      #line 349 
      struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"port property 4 = %#010x\n", .lineno = (unsigned int)349U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 349 
      branch_12 = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
      #line 349 
      if ((long)((long)((int)branch_12 != 0)) != 0L) 
                                                     #line 349 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug463,dev,(char *)"port property 4 = %#010x\n",pdata->pp4);
    }
  }
  #line 353 
  pdata->tx_max_channel_count = (pdata->pp1 >> 16) & 31U;
  #line 355 
  pdata->rx_max_channel_count = (pdata->pp1 >> 24) & 31U;
  #line 357 
  pdata->tx_max_q_count = pdata->pp1 & 31U;
  #line 359 
  pdata->rx_max_q_count = (pdata->pp1 >> 8) & 31U;
  #line 361 
  if ((pdata->msg_enable & 2U) != 0U) {
    {
      #line 362 
      bool branch_13;
      #line 362 
      struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"max tx/rx channel count = %u/%u\n", .lineno = (unsigned int)362U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 362 
      branch_13 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
      #line 362 
      if ((long)((long)((int)branch_13 != 0)) != 0L) 
                                                     #line 362 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug464,dev,(char *)"max tx/rx channel count = %u/%u\n",pdata->tx_max_channel_count,pdata->rx_max_channel_count);
    }
    {
      #line 365 
      bool branch_14;
      #line 365 
      struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"max tx/rx hw queue count = %u/%u\n", .lineno = (unsigned int)365U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 365 
      branch_14 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
      #line 365 
      if ((long)((long)((int)branch_14 != 0)) != 0L) 
                                                     #line 365 
                                                     __dynamic_dev_dbg(& __UNIQUE_ID_ddebug465,dev,(char *)"max tx/rx hw queue count = %u/%u\n",pdata->tx_max_q_count,pdata->rx_max_q_count);
    }
  }
  #line 370 
  xgbe_set_counts(pdata);
  #line 373 
  pdata->tx_max_fifo_size = pdata->pp2 & 65535U;
  #line 375 
  pdata->tx_max_fifo_size *= 16384U;
  {
    #line 376 
    __UNIQUE_ID___x466 = pdata->tx_max_fifo_size;
    #line 376 
    unsigned int __UNIQUE_ID___y467 = (pdata->vdata)->tx_max_fifo_size;
    #line 376 
    if (__UNIQUE_ID___x466 < __UNIQUE_ID___y467) 
                                                 #line 376 
                                                 tmp_18 = __UNIQUE_ID___x466; else 
                                                                    #line 376 
                                                                    tmp_18 = __UNIQUE_ID___y467;
    }
  #line 376 
  pdata->tx_max_fifo_size = tmp_18;
  #line 378 
  pdata->rx_max_fifo_size = pdata->pp2 >> 16;
  #line 380 
  pdata->rx_max_fifo_size *= 16384U;
  {
    #line 381 
    __UNIQUE_ID___x468 = pdata->rx_max_fifo_size;
    #line 381 
    unsigned int __UNIQUE_ID___y469 = (pdata->vdata)->rx_max_fifo_size;
    #line 381 
    if (__UNIQUE_ID___x468 < __UNIQUE_ID___y469) 
                                                 #line 381 
                                                 tmp_20 = __UNIQUE_ID___x468; else 
                                                                    #line 381 
                                                                    tmp_20 = __UNIQUE_ID___y469;
    }
  #line 381 
  pdata->rx_max_fifo_size = tmp_20;
  #line 383 
  if ((pdata->msg_enable & 2U) != 0U) {
    #line 384 
    bool branch_15;
    #line 384 
    struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c", .format = (char *)"max tx/rx max fifo size = %u/%u\n", .lineno = (unsigned int)384U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 384 
    branch_15 = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
    #line 384 
    if ((long)((long)((int)branch_15 != 0)) != 0L) 
                                                   #line 384 
                                                   __dynamic_dev_dbg(& __UNIQUE_ID_ddebug470,dev,(char *)"max tx/rx max fifo size = %u/%u\n",pdata->tx_max_fifo_size,pdata->rx_max_fifo_size);
  }
  #line 388 
  ret = xgbe_config_irqs(pdata);
  #line 389 
  if (ret != 0) 
                #line 390 
                goto err_pci_enable;
  #line 393 
  ret = xgbe_config_netdev(pdata);
  #line 394 
  if (ret != 0) 
                #line 395 
                goto err_irq_vectors;
  #line 397 
  netdev_notice(pdata->netdev,(char *)"net device enabled\n");
  #line 399 
  return 0;
  #line 401 
  err_irq_vectors: 
                   #line 401 
  ;
  #line 402 
  pci_free_irq_vectors(pdata->pcidev);
  #line 404 
  err_pci_enable: 
                  #line 404 
  ;
  #line 405 
  xgbe_free_pdata(pdata);
  #line 407 
  err_alloc: 
             #line 407 
  ;
  #line 408 
  _dev_notice(dev,(char *)"net device not enabled\n");
  #line 410 
  return ret;
}

#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static void xgbe_pci_remove(struct pci_dev *pdev)
{
  #line 415 
  struct xgbe_prv_data *pdata = pci_get_drvdata(pdev);
  #line 417 
  xgbe_deconfig_netdev(pdata);
  #line 419 
  pci_free_irq_vectors(pdata->pcidev);
  #line 421 
  xgbe_free_pdata(pdata);
  #line 422 
  return;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static int xgbe_pci_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 427 
  struct xgbe_prv_data *pdata = pci_get_drvdata(pdev);
  #line 428 
  struct net_device *netdev = pdata->netdev;
  #line 429 
  int ret = 0;
  #line 431 
  if ((int)netif_running(netdev) != 0) 
                                       #line 432 
                                       ret = xgbe_powerdown(netdev,1U);
  #line 434 
  pdata->lpm_ctrl = (unsigned int)(*(pdata->hw_if.read_mmd_regs))(pdata,0,1073938432);
  #line 435 
  pdata->lpm_ctrl |= 2048U;
  #line 436 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)pdata->lpm_ctrl);
  #line 438 
  return ret;
}

#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static int xgbe_pci_resume(struct pci_dev *pdev)
{
  #line 443 
  struct xgbe_prv_data *pdata = pci_get_drvdata(pdev);
  #line 444 
  struct net_device *netdev = pdata->netdev;
  #line 445 
  int ret = 0;
  #line 447 
  iowrite32(2097151U,pdata->xprop_regs + 120U);
  #line 449 
  pdata->lpm_ctrl &= 4294965247U;
  #line 450 
  (*(pdata->hw_if.write_mmd_regs))(pdata,0,1073938432,(int)pdata->lpm_ctrl);
  #line 452 
  if ((int)netif_running(netdev) != 0) {
    #line 453 
    ret = xgbe_powerup(netdev,1U);
    #line 458 
    cif_schedule_work_1(& pdata->restart_work);
  }
  #line 461 
  return ret;
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static struct xgbe_version_data xgbe_v2a = {.init_function_ptrs_phy_impl = & xgbe_init_function_ptrs_phy_v2, .xpcs_access = XGBE_XPCS_ACCESS_V2, .mmc_64bit = 1U, .tx_max_fifo_size = 229376U, .rx_max_fifo_size = 229376U, .tx_tstamp_workaround = 1U, .ecc_support = 1U, .i2c_support = 1U, .irq_reissue_support = 1U, .tx_desc_prefetch = 5U, .rx_desc_prefetch = 5U, .an_cdr_workaround = 1U};
#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static struct xgbe_version_data xgbe_v2b = {.init_function_ptrs_phy_impl = & xgbe_init_function_ptrs_phy_v2, .xpcs_access = XGBE_XPCS_ACCESS_V2, .mmc_64bit = 1U, .tx_max_fifo_size = 65536U, .rx_max_fifo_size = 65536U, .tx_tstamp_workaround = 1U, .ecc_support = 1U, .i2c_support = 1U, .irq_reissue_support = 1U, .tx_desc_prefetch = 5U, .rx_desc_prefetch = 5U, .an_cdr_workaround = 1U};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static struct pci_device_id xgbe_pci_table[3U] = {{.vendor = 4130U, .device = 5208U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = (unsigned long)(& xgbe_v2a)}, {.vendor = 4130U, .device = 5209U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = (unsigned long)(& xgbe_v2b)}};
#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
struct pci_device_id __mod_pci__xgbe_pci_table_device_table[3U];
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
static struct pci_driver xgbe_driver_0 = {.name = (char *)"amd-xgbe", .id_table = (struct pci_device_id *)(& xgbe_pci_table), .probe = & xgbe_pci_probe, .remove = & xgbe_pci_remove, .suspend = & xgbe_pci_suspend, .resume = & xgbe_pci_resume};
#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
int xgbe_pci_init(void)
{
  #line 518 
  return cif___pci_register_driver(& xgbe_driver_0,& __this_module,
                                (char *)"amd_xgbe");
}

#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-pci.c"
void xgbe_pci_exit(void)
{
  #line 523 
  cif_pci_unregister_driver(& xgbe_driver_0);
  #line 524 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
struct pci_driver *emg_alias_xgbe_driver_0 = & xgbe_driver_0;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
struct pci_device_id (*emg_alias_xgbe_pci_table)[3U] = & xgbe_pci_table;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 104 
#line 104 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
int emg_wrapper_xgbe_pci_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 115 
  return xgbe_pci_probe(arg0,arg1);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
void emg_wrapper_xgbe_pci_remove(struct pci_dev *arg0)
{
  #line 120 
  xgbe_pci_remove(arg0);
  #line 121 
  return;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
int emg_wrapper_xgbe_pci_resume(struct pci_dev *arg0)
{
  #line 125 
  return xgbe_pci_resume(arg0);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
int emg_wrapper_xgbe_pci_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 130 
  return xgbe_pci_suspend(arg0,arg1);
}

#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static long PTR_ERR_0(void *ptr)
{
  #line 243 
  return ldv_ptr_err(ptr);
}

#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static bool IS_ERR_2(void *ptr)
{
  #line 250 
  return ldv_is_err(ptr);
}

#line 715  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static bool cif_schedule_work_1(struct work_struct *work)
{
  #line 719 
  return emg_schedule_work(work);
}

#line 723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 727 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 731  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-pci.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 735 
  emg_pci_unregister_driver(dev);
  #line 736 
  return;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 278  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
static unsigned long cif_find_first_bit_0(unsigned long *addr, unsigned long size);
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __rounddown_pow_of_two(unsigned long n)
{
  #line 67 
  return 1UL << (fls_long(n) + 4294967295U);
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_empty(unsigned long *src, unsigned int nbits)
{
  #line 374 
  if (0 != 0 && nbits + 4294967295U <= 63U) 
                                            #line 375 
                                            return (*src & (18446744073709551615UL >> (- nbits & 63U))) == 0UL;
  #line 377 
  ;
  #line 377 
  return cif_find_first_bit_0(src,(unsigned long)nbits) == (unsigned long)nbits;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 213 
int ptp_clock_index(struct ptp_clock *);
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static struct xgbe_stats xgbe_gstring_stats[43U] = {{.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .stat_size = 8, .stat_offset = 3736}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3744}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3816}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3832}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3824}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3872}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'v', (char)'x', (char)'l', (char)'a', (char)'n', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 4600}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'s', (char)'o', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 4064}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3768}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3776}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3784}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3792}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3800}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3808}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stat_size = 8, .stat_offset = 3840}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .stat_size = 8, .stat_offset = 3864}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .stat_size = 8, .stat_offset = 3888}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3880}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 4008}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3904}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3912}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 4048}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'v', (char)'x', (char)'l', (char)'a', (char)'n', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 4608}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3960}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3968}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3976}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3984}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3992}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 4000}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3944}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3952}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stat_size = 8, .stat_offset = 3920}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'_', (char)'s', (char)'m', (char)'a', (char)'l', (char)'l', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3928}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'_', (char)'g', (char)'i', (char)'a', (char)'n', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 3936}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stat_size = 8, .stat_offset = 4016}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'o', (char)'f', (char)'_', (char)'r', (char)'a', (char)'n', (char)'g', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stat_size = 8, .stat_offset = 4024}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stat_size = 8, .stat_offset = 4040}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'w', (char)'a', (char)'t', (char)'c', (char)'h', (char)'d', (char)'o', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stat_size = 8, .stat_offset = 4056}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stat_size = 8, .stat_offset = 4616}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'v', (char)'x', (char)'l', (char)'a', (char)'n', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stat_size = 8, .stat_offset = 4624}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .stat_size = 8, .stat_offset = 4032}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'p', (char)'l', (char)'i', (char)'t', (char)'_', (char)'h', (char)'e', (char)'a', (char)'d', (char)'e', (char)'r', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stat_size = 8, .stat_offset = 4072}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'u', (char)'n', (char)'a', (char)'v', (char)'a', (char)'i', (char)'l', (char)'a', (char)'b', (char)'l', (char)'e'}, .stat_size = 8, .stat_offset = 4080}};
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static void xgbe_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 194 
  int i;
  #line 193 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 196 
  switch (stringset) {
    #line 197 
    case (u32)1: 
                 #line 197 
    ;
    #line 198 
    i = 0;
    #line 198 
    while ((unsigned int)i <= 42U) {
      #line 199 
      memcpy((void *)data,(void *)(& xgbe_gstring_stats[i].stat_string),32UL);
      #line 201 
      data += 32U;
      #line 198 
      i ++;
    }
    #line 203 
    i = 0;
    #line 203 
    while (pdata->tx_ring_count > (unsigned int)i) {
      #line 204 
      sprintf((char *)data,(char *)"txq_%u_packets",i);
      #line 205 
      data += 32U;
      #line 206 
      sprintf((char *)data,(char *)"txq_%u_bytes",i);
      #line 207 
      data += 32U;
      #line 203 
      i ++;
    }
    #line 209 
    i = 0;
    #line 209 
    while (pdata->rx_ring_count > (unsigned int)i) {
      #line 210 
      sprintf((char *)data,(char *)"rxq_%u_packets",i);
      #line 211 
      data += 32U;
      #line 212 
      sprintf((char *)data,(char *)"rxq_%u_bytes",i);
      #line 213 
      data += 32U;
      #line 209 
      i ++;
    }
    #line 215 
    break;
  }
  #line 217 
  return;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static void xgbe_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 223 
  u8 *stat;
  #line 224 
  int i;
  #line 222 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 226 
  (*(pdata->hw_if.read_mmc_stats))(pdata);
  #line 227 
  i = 0;
  #line 227 
  while ((unsigned int)i <= 42U) {
    {
      #line 229 
      u64 *tmp_0;
      #line 228 
      stat = (u8 *)pdata + (unsigned long)xgbe_gstring_stats[i].stat_offset;
      #line 229 
      tmp_0 = data;
      #line 229 
      data ++;
      #line 229 
      *tmp_0 = *((u64 *)stat);
    }
    #line 227 
    i ++;
  }
  #line 231 
  i = 0;
  #line 231 
  while (pdata->tx_ring_count > (unsigned int)i) {
    {
      #line 232 
      u64 *tmp_1;
      #line 233 
      u64 *tmp_2;
      #line 232 
      tmp_1 = data;
      #line 232 
      data ++;
      #line 232 
      *tmp_1 = pdata->ext_stats.txq_packets[i];
      #line 233 
      tmp_2 = data;
      #line 233 
      data ++;
      #line 233 
      *tmp_2 = pdata->ext_stats.txq_bytes[i];
    }
    #line 231 
    i ++;
  }
  #line 235 
  i = 0;
  #line 235 
  while (pdata->rx_ring_count > (unsigned int)i) {
    {
      #line 236 
      u64 *tmp_3;
      #line 237 
      u64 *tmp_4;
      #line 236 
      tmp_3 = data;
      #line 236 
      data ++;
      #line 236 
      *tmp_3 = pdata->ext_stats.rxq_packets[i];
      #line 237 
      tmp_4 = data;
      #line 237 
      data ++;
      #line 237 
      *tmp_4 = pdata->ext_stats.rxq_bytes[i];
    }
    #line 235 
    i ++;
  }
  #line 239 
  return;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_get_sset_count(struct net_device *netdev, int stringset)
{
  #line 244 
  int ret;
  #line 243 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 246 
  switch (stringset) {
    #line 247 
    case 1: 
            #line 247 
    ;
    #line 248 
    ret = (int)((pdata->tx_ring_count + pdata->rx_ring_count) * 2U + 43U);
    #line 251 
    break;
    #line 253 
    default: 
             #line 253 
    ;
    #line 254 
    ret = -95;
  }
  #line 257 
  return ret;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static void xgbe_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 263 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 265 
  pause->autoneg = (unsigned int)pdata->phy.pause_autoneg;
  #line 266 
  pause->tx_pause = (unsigned int)pdata->phy.tx_pause;
  #line 267 
  pause->rx_pause = (unsigned int)pdata->phy.rx_pause;
  #line 268 
  return;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 273 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 274 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 275 
  int ret = 0;
  #line 277 
  if (pause->autoneg != 0U && pdata->phy.autoneg != 1) {
    #line 278 
    netdev_err(netdev,(char *)"autoneg disabled, pause autoneg not available\n");
    #line 280 
    return -22;
  }
  #line 283 
  pdata->phy.pause_autoneg = (int)pause->autoneg;
  #line 284 
  pdata->phy.tx_pause = (int)pause->tx_pause;
  #line 285 
  pdata->phy.rx_pause = (int)pause->rx_pause;
  #line 287 
  __set_bit(13L,(unsigned long *)(& lks->link_modes.advertising));
  #line 288 
  __set_bit(14L,(unsigned long *)(& lks->link_modes.advertising));
  #line 290 
  if (pause->rx_pause != 0U) {
    #line 291 
    __set_bit(13L,(unsigned long *)(& lks->link_modes.advertising));
    #line 292 
    __set_bit(14L,(unsigned long *)(& lks->link_modes.advertising));
  }
  #line 295 
  if (pause->tx_pause != 0U) {
    #line 297 
    if ((int)test_bit(14L,(unsigned long *)(& lks->link_modes.advertising)) != 0) 
      #line 298 
      __set_bit(14L,(unsigned long *)(& lks->link_modes.advertising)); else 
                                                                    #line 300 
                                                                    __set_bit(14L,(unsigned long *)(& lks->link_modes.advertising));
  }
  #line 303 
  if ((int)netif_running(netdev) != 0) 
                                       #line 304 
                                       ret = (*(pdata->phy_if.phy_config_aneg))(pdata);
  #line 306 
  return ret;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 312 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 313 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 315 
  cmd->base.phy_address = (unsigned char)pdata->phy.address;
  #line 317 
  cmd->base.autoneg = (unsigned char)pdata->phy.autoneg;
  #line 318 
  cmd->base.speed = (unsigned int)pdata->phy.speed;
  #line 319 
  cmd->base.duplex = (unsigned char)pdata->phy.duplex;
  #line 321 
  cmd->base.port = (unsigned char)239U;
  #line 323 
  bitmap_copy((unsigned long *)(& cmd->link_modes.supported),(unsigned long *)(& lks->link_modes.supported),74U);
  #line 324 
  bitmap_copy((unsigned long *)(& cmd->link_modes.advertising),(unsigned long *)(& lks->link_modes.advertising),74U);
  #line 325 
  bitmap_copy((unsigned long *)(& cmd->link_modes.lp_advertising),(unsigned long *)(& lks->link_modes.lp_advertising),74U);
  #line 327 
  return 0;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 335 
  unsigned long advertising[2U];
  #line 336 
  u32 speed;
  #line 337 
  int ret;
  #line 333 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 334 
  struct ethtool_link_ksettings *lks = & pdata->phy.lks;
  #line 339 
  speed = cmd->base.speed;
  #line 341 
  if ((int)cmd->base.phy_address != pdata->phy.address) {
    #line 342 
    netdev_err(netdev,(char *)"invalid phy address %hhu\n",(int)cmd->base.phy_address);
    #line 344 
    return -22;
  }
  #line 347 
  if ((unsigned int)cmd->base.autoneg > 1U) {
    #line 349 
    netdev_err(netdev,(char *)"unsupported autoneg %hhu\n",(int)cmd->base.autoneg);
    #line 351 
    return -22;
  }
  #line 354 
  if ((unsigned int)cmd->base.autoneg == 0U) {
    #line 355 
    if (! (*(pdata->phy_if.phy_valid_speed))(pdata,(int)speed)) {
      #line 356 
      netdev_err(netdev,(char *)"unsupported speed %u\n",speed);
      #line 357 
      return -22;
    }
    #line 360 
    if ((unsigned int)cmd->base.duplex != 1U) {
      #line 361 
      netdev_err(netdev,(char *)"unsupported duplex %hhu\n",(int)cmd->base.duplex);
      #line 363 
      return -22;
    }
  }
  #line 367 
  if ((pdata->msg_enable & 4U) != 0U) {
    #line 367 
    bool branch;
    #line 367 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"amd_xgbe", .function = (char *)"xgbe_set_link_ksettings", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c", .format = (char *)"requested advertisement 0x%*pb, phy supported 0x%*pb\n", .lineno = (unsigned int)367U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 367 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 367 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 367 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,netdev,(char *)"requested advertisement 0x%*pb, phy supported 0x%*pb\n",74,(unsigned long *)(& cmd->link_modes.advertising),74,(unsigned long *)(& lks->link_modes.supported));
  }
  #line 372 
  bitmap_and((unsigned long *)(& advertising),(unsigned long *)(& cmd->link_modes.advertising),(unsigned long *)(& lks->link_modes.supported),74U);
  #line 376 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 376 
    if (bitmap_empty((unsigned long *)(& advertising),74U) != 0) {
      #line 378 
      netdev_err(netdev,(char *)"unsupported requested advertisement\n");
      #line 380 
      return -22;
    }
  }
  #line 383 
  ret = 0;
  #line 384 
  pdata->phy.autoneg = (int)cmd->base.autoneg;
  #line 385 
  pdata->phy.speed = (int)speed;
  #line 386 
  pdata->phy.duplex = (int)cmd->base.duplex;
  #line 387 
  bitmap_copy((unsigned long *)(& lks->link_modes.advertising),(unsigned long *)(& advertising),74U);
  #line 390 
  if ((unsigned int)cmd->base.autoneg == 1U) 
                                             #line 391 
                                             __set_bit(6L,(unsigned long *)(& lks->link_modes.advertising)); else 
                                                                    #line 393 
                                                                    __set_bit(6L,(unsigned long *)(& lks->link_modes.advertising));
  #line 395 
  if ((int)netif_running(netdev) != 0) 
                                       #line 396 
                                       ret = (*(pdata->phy_if.phy_config_aneg))(pdata);
  #line 398 
  return ret;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static void xgbe_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 404 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 405 
  struct xgbe_hw_features *hw_feat = & pdata->hw_feat;
  #line 407 
  strlcpy((char *)(& drvinfo->driver),(char *)"amd-xgbe",32UL);
  #line 408 
  strlcpy((char *)(& drvinfo->version),(char *)"1.0.3",32UL);
  #line 409 
  ;
  #line 409 
  strlcpy((char *)(& drvinfo->bus_info),dev_name(pdata->dev),32UL);
  #line 411 
  snprintf((char *)(& drvinfo->fw_version),32UL,(char *)"%d.%d.%d",(hw_feat->version >> 16) & 255U,(hw_feat->version >> 8) & 255U,hw_feat->version & 255U);
  #line 415 
  return;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static u32 xgbe_get_msglevel(struct net_device *netdev)
{
  #line 419 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 421 
  return pdata->msg_enable;
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static void xgbe_set_msglevel(struct net_device *netdev, u32 msglevel)
{
  #line 426 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 428 
  pdata->msg_enable = msglevel;
  #line 429 
  return;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 434 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 436 
  memset((void *)ec,0,92UL);
  #line 438 
  ec->rx_coalesce_usecs = pdata->rx_usecs;
  #line 439 
  ec->rx_max_coalesced_frames = pdata->rx_frames;
  #line 441 
  ec->tx_max_coalesced_frames = pdata->tx_frames;
  #line 443 
  return 0;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 451 
  unsigned int rx_frames;
  #line 451 
  unsigned int rx_riwt;
  #line 451 
  unsigned int rx_usecs;
  #line 452 
  unsigned int tx_frames;
  #line 449 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 450 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 455 
  if ((((((((((((((((((ec->rx_coalesce_usecs_irq != 0U || ec->rx_max_coalesced_frames_irq != 0U) || ec->tx_coalesce_usecs != 0U) || ec->tx_coalesce_usecs_irq != 0U) || ec->tx_max_coalesced_frames_irq != 0U) || ec->stats_block_coalesce_usecs != 0U) || ec->use_adaptive_rx_coalesce != 0U) || ec->use_adaptive_tx_coalesce != 0U) || ec->pkt_rate_low != 0U) || ec->rx_coalesce_usecs_low != 0U) || ec->rx_max_coalesced_frames_low != 0U) || ec->tx_coalesce_usecs_low != 0U) || ec->tx_max_coalesced_frames_low != 0U) || ec->pkt_rate_high != 0U) || ec->rx_coalesce_usecs_high != 0U) || ec->rx_max_coalesced_frames_high != 0U) || ec->tx_coalesce_usecs_high != 0U) || ec->tx_max_coalesced_frames_high != 0U) || ec->rate_sample_interval != 0U) {
    #line 474 
    netdev_err(netdev,(char *)"unsupported coalescing parameter\n");
    #line 475 
    return -95;
  }
  #line 478 
  rx_riwt = (*(hw_if->usec_to_riwt))(pdata,ec->rx_coalesce_usecs);
  #line 479 
  rx_usecs = ec->rx_coalesce_usecs;
  #line 480 
  rx_frames = ec->rx_max_coalesced_frames;
  #line 483 
  if (rx_usecs != 0U && rx_riwt == 0U) 
                                       #line 484 
                                       rx_riwt = 1U;
  #line 487 
  if (rx_riwt > 255U) {
    #line 488 
    ;
    #line 488 
    netdev_err(netdev,(char *)"rx-usec is limited to %d usecs\n",(*(hw_if->riwt_to_usec))(pdata,255U));
    #line 490 
    return -22;
  }
  #line 492 
  if (pdata->rx_desc_count < rx_frames) {
    #line 493 
    netdev_err(netdev,(char *)"rx-frames is limited to %d frames\n",pdata->rx_desc_count);
    #line 495 
    return -22;
  }
  #line 498 
  tx_frames = ec->tx_max_coalesced_frames;
  #line 501 
  if (pdata->tx_desc_count < tx_frames) {
    #line 502 
    netdev_err(netdev,(char *)"tx-frames is limited to %d frames\n",pdata->tx_desc_count);
    #line 504 
    return -22;
  }
  #line 507 
  pdata->rx_riwt = rx_riwt;
  #line 508 
  pdata->rx_usecs = rx_usecs;
  #line 509 
  pdata->rx_frames = rx_frames;
  #line 510 
  (*(hw_if->config_rx_coalesce))(pdata);
  #line 512 
  pdata->tx_frames = tx_frames;
  #line 513 
  (*(hw_if->config_tx_coalesce))(pdata);
  #line 515 
  return 0;
}

#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *rxnfc, u32 *rule_locs)
{
  #line 521 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 523 
  switch (rxnfc->cmd) {
    #line 524 
    case (__u32)45: 
                    #line 524 
    ;
    #line 525 
    rxnfc->data = (unsigned long long)pdata->rx_ring_count;
    #line 526 
    break;
    #line 527 
    default: 
             #line 527 
    ;
    #line 528 
    return -95;
  }
  #line 531 
  return 0;
}

#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static u32 xgbe_get_rxfh_key_size(struct net_device *netdev)
{
  #line 536 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 538 
  return 40U;
}

#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static u32 xgbe_get_rxfh_indir_size(struct net_device *netdev)
{
  #line 543 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 545 
  return 256U;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 552 
  unsigned int i;
  #line 551 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 554 
  if (indir != (u32 *)0U) {
    #line 555 
    i = 0U;
    #line 555 
    while (i <= 255U) {
      #line 556 
      *(indir + (unsigned long)i) = pdata->rss_table[i] & 15U;
      #line 555 
      i ++;
    }
  }
  #line 560 
  if (key != (u8 *)0U) 
                       #line 561 
                       memcpy((void *)key,(void *)(& pdata->rss_key),40UL);
  #line 563 
  if (hfunc != (u8 *)0U) 
                         #line 564 
                         *hfunc = (unsigned char)1U;
  #line 566 
  return 0;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_set_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 574 
  unsigned int ret;
  #line 572 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 573 
  struct xgbe_hw_if *hw_if = & pdata->hw_if;
  #line 576 
  if ((unsigned int)hfunc > 1U) {
    #line 577 
    netdev_err(netdev,(char *)"unsupported hash function\n");
    #line 578 
    return -95;
  }
  #line 581 
  if (indir != (u32 *)0U) {
    #line 582 
    ret = (unsigned int)(*(hw_if->set_rss_lookup_table))(pdata,indir);
    #line 583 
    if (ret != 0U) 
                   #line 584 
                   return (int)ret;
  }
  #line 587 
  if (key != (u8 *)0U) {
    #line 588 
    ret = (unsigned int)(*(hw_if->set_rss_hash_key))(pdata,key);
    #line 589 
    if (ret != 0U) 
                   #line 590 
                   return (int)ret;
  }
  #line 593 
  return 0;
}

#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_get_ts_info(struct net_device *netdev, struct ethtool_ts_info *ts_info)
{
  #line 599 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 601 
  ts_info->so_timestamping = 95U;
  #line 608 
  if (pdata->ptp_clock != (struct ptp_clock *)0) 
                                                 #line 609 
                                                 ts_info->phc_index = ptp_clock_index(pdata->ptp_clock); else 
                                                                    #line 611 
                                                                    ts_info->phc_index = -1;
  #line 613 
  ts_info->tx_types = 3U;
  #line 614 
  ts_info->rx_filters = 29179U;
  #line 626 
  return 0;
}

#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_get_module_info(struct net_device *netdev, struct ethtool_modinfo *modinfo)
{
  #line 632 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 634 
  return (*(pdata->phy_if.module_info))(pdata,modinfo);
}

#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_get_module_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 640 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 642 
  return (*(pdata->phy_if.module_eeprom))(pdata,eeprom,data);
}

#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static void xgbe_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ringparam)
{
  #line 648 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 650 
  ringparam->rx_max_pending = 4096U;
  #line 651 
  ringparam->tx_max_pending = 4096U;
  #line 652 
  ringparam->rx_pending = pdata->rx_desc_count;
  #line 653 
  ringparam->tx_pending = pdata->tx_desc_count;
  #line 654 
  return;
}

#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ringparam)
{
  #line 660 
  unsigned int rx;
  #line 660 
  unsigned int tx;
  #line 659 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  #line 662 
  if (ringparam->rx_mini_pending != 0U || ringparam->rx_jumbo_pending != 0U) {
    #line 663 
    netdev_err(netdev,(char *)"unsupported ring parameter\n");
    #line 664 
    return -22;
  }
  #line 667 
  if (ringparam->rx_pending + 4294967232U > 4032U) {
    #line 669 
    netdev_err(netdev,(char *)"rx ring parameter must be between %u and %u\n",64,4096);
    #line 672 
    return -22;
  }
  #line 675 
  if (ringparam->tx_pending + 4294967232U > 4032U) {
    #line 677 
    netdev_err(netdev,(char *)"tx ring parameter must be between %u and %u\n",64,4096);
    #line 680 
    return -22;
  }
  #line 683 
  rx = (unsigned int)__rounddown_pow_of_two((unsigned long)ringparam->rx_pending);
  #line 684 
  if (ringparam->rx_pending != rx) 
                                   #line 685 
                                   netdev_notice(netdev,(char *)"rx ring parameter rounded to power of two: %u\n",rx);
  #line 689 
  tx = (unsigned int)__rounddown_pow_of_two((unsigned long)ringparam->tx_pending);
  #line 690 
  if (ringparam->tx_pending != tx) 
                                   #line 691 
                                   netdev_notice(netdev,(char *)"tx ring parameter rounded to power of two: %u\n",tx);
  #line 695 
  if (pdata->rx_desc_count == rx && pdata->tx_desc_count == tx) 
                                                                #line 697 
                                                                goto out;
  #line 699 
  pdata->rx_desc_count = rx;
  #line 700 
  pdata->tx_desc_count = tx;
  #line 702 
  xgbe_restart_dev(pdata);
  #line 704 
  out: 
       #line 704 
  ;
  #line 705 
  return 0;
}

#line 708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static void xgbe_get_channels(struct net_device *netdev, struct ethtool_channels *channels)
{
  #line 724 
  unsigned int tmp_8;
  #line 720 
  unsigned int tmp_0;
  #line 726 
  unsigned int __UNIQUE_ID___x452;
  #line 721 
  unsigned int __UNIQUE_ID___x444;
  #line 726 
  unsigned int tmp_10;
  #line 721 
  unsigned int tmp_2;
  #line 722 
  unsigned int __UNIQUE_ID___x446;
  #line 736 
  unsigned int __UNIQUE_ID___x454;
  #line 722 
  unsigned int tmp_4;
  #line 736 
  unsigned int tmp_14;
  #line 723 
  unsigned int __UNIQUE_ID___x448;
  #line 723 
  unsigned int tmp_6;
  #line 724 
  unsigned int __UNIQUE_ID___x450;
  #line 720 
  unsigned int __UNIQUE_ID___x442;
  #line 712 
  unsigned int rx;
  #line 712 
  unsigned int tx;
  #line 712 
  unsigned int combined;
  #line 733 
  unsigned int tmp_12;
  #line 734 
  unsigned int tmp_13;
  #line 711 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  {
    #line 720 
    __UNIQUE_ID___x442 = pdata->hw_feat.rx_ch_cnt;
    #line 720 
    unsigned int __UNIQUE_ID___y443 = pdata->rx_max_channel_count;
    #line 720 
    if (__UNIQUE_ID___x442 < __UNIQUE_ID___y443) 
                                                 #line 720 
                                                 tmp_0 = __UNIQUE_ID___x442; else 
                                                                    #line 720 
                                                                    tmp_0 = __UNIQUE_ID___y443;
    }
  #line 720 
  rx = tmp_0;
  {
    #line 721 
    __UNIQUE_ID___x444 = rx;
    #line 721 
    unsigned int __UNIQUE_ID___y445 = pdata->channel_irq_count;
    #line 721 
    if (__UNIQUE_ID___x444 < __UNIQUE_ID___y445) 
                                                 #line 721 
                                                 tmp_2 = __UNIQUE_ID___x444; else 
                                                                    #line 721 
                                                                    tmp_2 = __UNIQUE_ID___y445;
    }
  #line 721 
  rx = tmp_2;
  {
    #line 722 
    __UNIQUE_ID___x446 = pdata->hw_feat.tx_ch_cnt;
    #line 722 
    unsigned int __UNIQUE_ID___y447 = pdata->tx_max_channel_count;
    #line 722 
    if (__UNIQUE_ID___x446 < __UNIQUE_ID___y447) 
                                                 #line 722 
                                                 tmp_4 = __UNIQUE_ID___x446; else 
                                                                    #line 722 
                                                                    tmp_4 = __UNIQUE_ID___y447;
    }
  #line 722 
  tx = tmp_4;
  {
    #line 723 
    __UNIQUE_ID___x448 = tx;
    #line 723 
    unsigned int __UNIQUE_ID___y449 = pdata->channel_irq_count;
    #line 723 
    if (__UNIQUE_ID___x448 < __UNIQUE_ID___y449) 
                                                 #line 723 
                                                 tmp_6 = __UNIQUE_ID___x448; else 
                                                                    #line 723 
                                                                    tmp_6 = __UNIQUE_ID___y449;
    }
  #line 723 
  tx = tmp_6;
  {
    #line 724 
    __UNIQUE_ID___x450 = tx;
    #line 724 
    unsigned int __UNIQUE_ID___y451 = pdata->tx_max_q_count;
    #line 724 
    if (__UNIQUE_ID___x450 < __UNIQUE_ID___y451) 
                                                 #line 724 
                                                 tmp_8 = __UNIQUE_ID___x450; else 
                                                                    #line 724 
                                                                    tmp_8 = __UNIQUE_ID___y451;
    }
  #line 724 
  tx = tmp_8;
  {
    #line 726 
    __UNIQUE_ID___x452 = rx;
    #line 726 
    unsigned int __UNIQUE_ID___y453 = tx;
    #line 726 
    if (__UNIQUE_ID___x452 < __UNIQUE_ID___y453) 
                                                 #line 726 
                                                 tmp_10 = __UNIQUE_ID___x452; else 
                                                                    #line 726 
                                                                    tmp_10 = __UNIQUE_ID___y453;
    }
  #line 726 
  combined = tmp_10;
  #line 728 
  channels->max_combined = combined;
  #line 729 
  if (rx != 0U) 
                #line 729 
                channels->max_rx = rx + 4294967295U; else 
                                                          #line 729 
                                                          channels->max_rx = 0U;
  #line 730 
  if (tx != 0U) 
                #line 730 
                channels->max_tx = tx + 4294967295U; else 
                                                          #line 730 
                                                          channels->max_tx = 0U;
  #line 733 
  tmp_12 = (unsigned int)(pdata->new_rx_ring_count != 0U);
  #line 733 
  if (! tmp_12) 
                #line 733 
                tmp_12 = pdata->rx_ring_count;
  #line 733 
  rx = tmp_12;
  #line 734 
  tmp_13 = (unsigned int)(pdata->new_tx_ring_count != 0U);
  #line 734 
  if (! tmp_13) 
                #line 734 
                tmp_13 = pdata->tx_ring_count;
  #line 734 
  tx = tmp_13;
  {
    #line 736 
    __UNIQUE_ID___x454 = rx;
    #line 736 
    unsigned int __UNIQUE_ID___y455 = tx;
    #line 736 
    if (__UNIQUE_ID___x454 < __UNIQUE_ID___y455) 
                                                 #line 736 
                                                 tmp_14 = __UNIQUE_ID___x454; else 
                                                                    #line 736 
                                                                    tmp_14 = __UNIQUE_ID___y455;
    }
  #line 736 
  combined = tmp_14;
  #line 737 
  rx -= combined;
  #line 738 
  tx -= combined;
  #line 740 
  channels->combined_count = combined;
  #line 741 
  channels->rx_count = rx;
  #line 742 
  channels->tx_count = tx;
  #line 743 
  return;
}

#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static void xgbe_print_set_channels_input(struct net_device *netdev, struct ethtool_channels *channels)
{
  #line 748 
  netdev_err(netdev,(char *)"channel inputs: combined=%u, rx-only=%u, tx-only=%u\n",channels->combined_count,channels->rx_count,channels->tx_count);
  #line 751 
  return;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static int xgbe_set_channels(struct net_device *netdev, struct ethtool_channels *channels)
{
  #line 769 
  unsigned int tmp_8;
  #line 765 
  unsigned int tmp_0;
  #line 771 
  unsigned int __UNIQUE_ID___x466;
  #line 766 
  unsigned int __UNIQUE_ID___x458;
  #line 771 
  unsigned int tmp_10;
  #line 766 
  unsigned int tmp_2;
  #line 767 
  unsigned int __UNIQUE_ID___x460;
  #line 767 
  unsigned int tmp_4;
  #line 768 
  unsigned int __UNIQUE_ID___x462;
  #line 768 
  unsigned int tmp_6;
  #line 769 
  unsigned int __UNIQUE_ID___x464;
  #line 765 
  unsigned int __UNIQUE_ID___x456;
  #line 757 
  unsigned int rx;
  #line 757 
  unsigned int rx_curr;
  #line 757 
  unsigned int tx;
  #line 757 
  unsigned int tx_curr;
  #line 757 
  unsigned int combined;
  #line 825 
  unsigned int tmp_12;
  #line 826 
  unsigned int tmp_13;
  #line 756 
  struct xgbe_prv_data *pdata = netdev_priv(netdev);
  {
    #line 765 
    __UNIQUE_ID___x456 = pdata->hw_feat.rx_ch_cnt;
    #line 765 
    unsigned int __UNIQUE_ID___y457 = pdata->rx_max_channel_count;
    #line 765 
    if (__UNIQUE_ID___x456 < __UNIQUE_ID___y457) 
                                                 #line 765 
                                                 tmp_0 = __UNIQUE_ID___x456; else 
                                                                    #line 765 
                                                                    tmp_0 = __UNIQUE_ID___y457;
    }
  #line 765 
  rx = tmp_0;
  {
    #line 766 
    __UNIQUE_ID___x458 = rx;
    #line 766 
    unsigned int __UNIQUE_ID___y459 = pdata->channel_irq_count;
    #line 766 
    if (__UNIQUE_ID___x458 < __UNIQUE_ID___y459) 
                                                 #line 766 
                                                 tmp_2 = __UNIQUE_ID___x458; else 
                                                                    #line 766 
                                                                    tmp_2 = __UNIQUE_ID___y459;
    }
  #line 766 
  rx = tmp_2;
  {
    #line 767 
    __UNIQUE_ID___x460 = pdata->hw_feat.tx_ch_cnt;
    #line 767 
    unsigned int __UNIQUE_ID___y461 = pdata->tx_max_channel_count;
    #line 767 
    if (__UNIQUE_ID___x460 < __UNIQUE_ID___y461) 
                                                 #line 767 
                                                 tmp_4 = __UNIQUE_ID___x460; else 
                                                                    #line 767 
                                                                    tmp_4 = __UNIQUE_ID___y461;
    }
  #line 767 
  tx = tmp_4;
  {
    #line 768 
    __UNIQUE_ID___x462 = tx;
    #line 768 
    unsigned int __UNIQUE_ID___y463 = pdata->tx_max_q_count;
    #line 768 
    if (__UNIQUE_ID___x462 < __UNIQUE_ID___y463) 
                                                 #line 768 
                                                 tmp_6 = __UNIQUE_ID___x462; else 
                                                                    #line 768 
                                                                    tmp_6 = __UNIQUE_ID___y463;
    }
  #line 768 
  tx = tmp_6;
  {
    #line 769 
    __UNIQUE_ID___x464 = tx;
    #line 769 
    unsigned int __UNIQUE_ID___y465 = pdata->channel_irq_count;
    #line 769 
    if (__UNIQUE_ID___x464 < __UNIQUE_ID___y465) 
                                                 #line 769 
                                                 tmp_8 = __UNIQUE_ID___x464; else 
                                                                    #line 769 
                                                                    tmp_8 = __UNIQUE_ID___y465;
    }
  #line 769 
  tx = tmp_8;
  {
    #line 771 
    __UNIQUE_ID___x466 = rx;
    #line 771 
    unsigned int __UNIQUE_ID___y467 = tx;
    #line 771 
    if (__UNIQUE_ID___x466 < __UNIQUE_ID___y467) 
                                                 #line 771 
                                                 tmp_10 = __UNIQUE_ID___x466; else 
                                                                    #line 771 
                                                                    tmp_10 = __UNIQUE_ID___y467;
    }
  #line 771 
  combined = tmp_10;
  #line 774 
  if (channels->other_count != 0U) {
    #line 775 
    netdev_err(netdev,(char *)"other channel count must be zero\n");
    #line 777 
    return -22;
  }
  #line 781 
  if (channels->combined_count == 0U) {
    #line 782 
    netdev_err(netdev,(char *)"at least one combined Rx/Tx channel is required\n");
    #line 784 
    xgbe_print_set_channels_input(netdev,channels);
    #line 785 
    return -22;
  }
  #line 789 
  if (channels->combined_count > combined) {
    #line 790 
    netdev_err(netdev,(char *)"combined channel count cannot exceed %u\n",combined);
    #line 793 
    xgbe_print_set_channels_input(netdev,channels);
    #line 794 
    return -22;
  }
  #line 798 
  if (channels->rx_count != 0U && channels->tx_count != 0U) {
    #line 799 
    netdev_err(netdev,(char *)"cannot specify both Rx-only and Tx-only channels\n");
    #line 801 
    xgbe_print_set_channels_input(netdev,channels);
    #line 802 
    return -22;
  }
  #line 806 
  if (channels->combined_count + channels->rx_count > rx) {
    #line 807 
    netdev_err(netdev,(char *)"total Rx channels (%u) requested exceeds maximum available (%u)\n",channels->combined_count + channels->rx_count,rx);
    #line 810 
    xgbe_print_set_channels_input(netdev,channels);
    #line 811 
    return -22;
  }
  #line 814 
  if (channels->combined_count + channels->tx_count > tx) {
    #line 815 
    netdev_err(netdev,(char *)"total Tx channels (%u) requested exceeds maximum available (%u)\n",channels->combined_count + channels->tx_count,tx);
    #line 818 
    xgbe_print_set_channels_input(netdev,channels);
    #line 819 
    return -22;
  }
  #line 822 
  rx = channels->combined_count + channels->rx_count;
  #line 823 
  tx = channels->combined_count + channels->tx_count;
  #line 825 
  tmp_12 = (unsigned int)(pdata->new_rx_ring_count != 0U);
  #line 825 
  if (! tmp_12) 
                #line 825 
                tmp_12 = pdata->rx_ring_count;
  #line 825 
  rx_curr = tmp_12;
  #line 826 
  tmp_13 = (unsigned int)(pdata->new_tx_ring_count != 0U);
  #line 826 
  if (! tmp_13) 
                #line 826 
                tmp_13 = pdata->tx_ring_count;
  #line 826 
  tx_curr = tmp_13;
  #line 828 
  if (rx == rx_curr && tx == tx_curr) 
                                      #line 829 
                                      goto out;
  #line 831 
  pdata->new_rx_ring_count = rx;
  #line 832 
  pdata->new_tx_ring_count = tx;
  #line 834 
  xgbe_full_restart_dev(pdata);
  #line 836 
  out: 
       #line 836 
  ;
  #line 837 
  return 0;
}

#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
static struct ethtool_ops xgbe_ethtool_ops = {.get_drvinfo = & xgbe_get_drvinfo, .get_msglevel = & xgbe_get_msglevel, .set_msglevel = & xgbe_set_msglevel, .get_link = & ethtool_op_get_link, .get_coalesce = & xgbe_get_coalesce, .set_coalesce = & xgbe_set_coalesce, .get_ringparam = & xgbe_get_ringparam, .set_ringparam = & xgbe_set_ringparam, .get_pauseparam = & xgbe_get_pauseparam, .set_pauseparam = & xgbe_set_pauseparam, .get_strings = & xgbe_get_strings, .get_ethtool_stats = & xgbe_get_ethtool_stats, .get_sset_count = & xgbe_get_sset_count, .get_rxnfc = & xgbe_get_rxnfc, .get_rxfh_key_size = & xgbe_get_rxfh_key_size, .get_rxfh_indir_size = & xgbe_get_rxfh_indir_size, .get_rxfh = & xgbe_get_rxfh, .set_rxfh = & xgbe_set_rxfh, .get_channels = & xgbe_get_channels, .set_channels = & xgbe_set_channels, .get_ts_info = & xgbe_get_ts_info, .get_module_info = & xgbe_get_module_info, .get_module_eeprom = & xgbe_get_module_eeprom, .get_link_ksettings = & xgbe_get_link_ksettings, .set_link_ksettings = & xgbe_set_link_ksettings};
#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c"
struct ethtool_ops *xgbe_get_ethtool_ops(void)
{
  #line 870 
  return & xgbe_ethtool_ops;
}

#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
void emg_wrapper_xgbe_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 109 
  xgbe_get_channels(arg0,arg1);
  #line 110 
  return;
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 114 
  return xgbe_get_coalesce(arg0,arg1);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
void emg_wrapper_xgbe_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 119 
  xgbe_get_drvinfo(arg0,arg1);
  #line 120 
  return;
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
void emg_wrapper_xgbe_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 124 
  xgbe_get_ethtool_stats(arg0,arg1,arg2);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 129 
  return xgbe_get_link_ksettings(arg0,arg1);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_get_module_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 134 
  return xgbe_get_module_eeprom(arg0,arg1,arg2);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_get_module_info(struct net_device *arg0, struct ethtool_modinfo *arg1)
{
  #line 139 
  return xgbe_get_module_info(arg0,arg1);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
unsigned int emg_wrapper_xgbe_get_msglevel(struct net_device *arg0)
{
  #line 144 
  return xgbe_get_msglevel(arg0);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
void emg_wrapper_xgbe_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 149 
  xgbe_get_pauseparam(arg0,arg1);
  #line 150 
  return;
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
void emg_wrapper_xgbe_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 154 
  xgbe_get_ringparam(arg0,arg1);
  #line 155 
  return;
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 159 
  return xgbe_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
unsigned int emg_wrapper_xgbe_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 164 
  return xgbe_get_rxfh_indir_size(arg0);
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
unsigned int emg_wrapper_xgbe_get_rxfh_key_size(struct net_device *arg0)
{
  #line 169 
  return xgbe_get_rxfh_key_size(arg0);
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 174 
  return xgbe_get_rxnfc(arg0,arg1,arg2);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 179 
  return xgbe_get_sset_count(arg0,arg1);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
void emg_wrapper_xgbe_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 184 
  xgbe_get_strings(arg0,arg1,arg2);
  #line 185 
  return;
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 189 
  return xgbe_get_ts_info(arg0,arg1);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 194 
  return xgbe_set_channels(arg0,arg1);
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 199 
  return xgbe_set_coalesce(arg0,arg1);
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 204 
  return xgbe_set_link_ksettings(arg0,arg1);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
void emg_wrapper_xgbe_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 209 
  xgbe_set_msglevel(arg0,arg1);
  #line 210 
  return;
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 214 
  return xgbe_set_pauseparam(arg0,arg1);
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 219 
  return xgbe_set_ringparam(arg0,arg1);
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
int emg_wrapper_xgbe_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 224 
  return xgbe_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 278  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/0/concurrency safety/weaver/xgbe-ethtool.i.aux"
static unsigned long cif_find_first_bit_0(unsigned long *addr, unsigned long size)
{
  #line 281 
  return ldv_find_first_bit(addr,size);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR_0(long error)
{
  #line 26 
  return (void *)error;
}

#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 146 
#line 345 
void emg_dispatch_deregister_12(struct pci_driver *arg0);
#line 147 
#line 354 
void emg_dispatch_deregister_13(struct platform_driver *arg0);
#line 148 
#line 374 
void emg_dispatch_deregister_19(struct net_device *arg0);
#line 149 
#line 325 
void emg_dispatch_instance_deregister_7(struct timer_list *arg0);
#line 150 
#line 334 
void emg_dispatch_instance_register_11(struct timer_list *arg0);
#line 151 
#line 203 
void emg_dispatch_pm_deregister_31(void);
#line 152 
#line 212 
void emg_dispatch_pm_register_31(void);
#line 153 
#line 363 
void emg_dispatch_register_15(struct net_device *arg0);
#line 154 
#line 222 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 155 
#line 233 
void emg_dispatch_register_3(struct platform_driver *arg0);
#line 156 
#line 244 
void emg_dispatch_register_6(struct file_operations *arg0);
#line 157 
#line 4266 
void *emg_entry_point_insmod(void *arg0);
#line 158 
#line 383 
void *emg_file_operations_character_driver_scenario_xgmac_reg_addr_fops(void *arg0);
#line 159 
#line 546 
void *emg_file_operations_character_driver_scenario_xgmac_reg_value_fops(void *arg0);
#line 160 
#line 709 
void *emg_file_operations_character_driver_scenario_xi2c_reg_addr_fops(void *arg0);
#line 161 
#line 872 
void *emg_file_operations_character_driver_scenario_xi2c_reg_value_fops(void *arg0);
#line 162 
#line 1035 
void *emg_file_operations_character_driver_scenario_xpcs_mmd_fops(void *arg0);
#line 163 
#line 1198 
void *emg_file_operations_character_driver_scenario_xpcs_reg_addr_fops(void *arg0);
#line 164 
#line 1361 
void *emg_file_operations_character_driver_scenario_xpcs_reg_value_fops(void *arg0);
#line 165 
#line 1524 
void *emg_file_operations_character_driver_scenario_xprop_reg_addr_fops(void *arg0);
#line 166 
#line 1687 
void *emg_file_operations_character_driver_scenario_xprop_reg_value_fops(void *arg0);
#line 170 
#line 1850 
void *emg_net_random_allocationless_scenario_xgbe_get_channels(void *arg0);
#line 171 
#line 2430 
void *emg_pci_pci_scenario_xgbe_driver(void *arg0);
#line 174 
#line 2602 
void *emg_platform_platform_instance_xgbe_driver(void *arg0);
#line 175 
#line 2779 
void *emg_pm_pm_ops_scenario_xgbe_platform_pm_ops(void *arg0);
#line 181 
#line 3774 
void *emg_timer_timer_scenario_13(void *arg0);
#line 183 
#line 4295 
int main(void);
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_28;
#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_29;
#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_30;
#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_31;
#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_32;
#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_33;
#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_pm_deregister_31(void)
{
  #line 204 
  int ret;
  #line 205 
  struct emg_struct_platform_instance_xgbe_driver_31 *cf_arg_32;
  #line 206 
  ret = pthread_join(emg_thread_32,(void **)0);
  #line 207 
  __VERIFIER_assume(ret == 0);
  #line 208 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_pm_register_31(void)
{
  #line 213 
  int ret;
  #line 214 
  struct emg_struct_platform_instance_xgbe_driver_31 *cf_arg_32;
  #line 215 
  cf_arg_32 = (struct emg_struct_platform_instance_xgbe_driver_31 *)ldv_xmalloc(16UL);
  #line 216 
  ret = pthread_create(& emg_thread_32,(pthread_attr_t *)0,& emg_pm_pm_ops_scenario_xgbe_platform_pm_ops,(void *)cf_arg_32);
  #line 217 
  __VERIFIER_assume(ret == 0);
  #line 218 
  return;
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 223 
  int ret;
  #line 224 
  struct emg_struct_pci_scenario_xgbe_driver_30 *cf_arg_30;
  #line 225 
  cf_arg_30 = (struct emg_struct_pci_scenario_xgbe_driver_30 *)ldv_xmalloc(16UL);
  #line 226 
  cf_arg_30->arg0 = arg0;
  #line 227 
  ret = pthread_create(& emg_thread_30,(pthread_attr_t *)0,& emg_pci_pci_scenario_xgbe_driver,(void *)cf_arg_30);
  #line 228 
  __VERIFIER_assume(ret == 0);
  #line 229 
  return;
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_3(struct platform_driver *arg0)
{
  #line 234 
  int ret;
  #line 235 
  struct emg_struct_platform_instance_xgbe_driver_31 *cf_arg_31;
  #line 236 
  cf_arg_31 = (struct emg_struct_platform_instance_xgbe_driver_31 *)ldv_xmalloc(16UL);
  #line 237 
  cf_arg_31->arg0 = arg0;
  #line 238 
  ret = pthread_create(& emg_thread_31,(pthread_attr_t *)0,& emg_platform_platform_instance_xgbe_driver,(void *)cf_arg_31);
  #line 239 
  __VERIFIER_assume(ret == 0);
  #line 240 
  return;
}

#line 244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_6(struct file_operations *arg0)
{
  #line 245 
  int ret;
  #line 246 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *cf_arg_20;
  #line 247 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *cf_arg_21;
  #line 248 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *cf_arg_22;
  #line 249 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *cf_arg_23;
  #line 250 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *cf_arg_24;
  #line 251 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *cf_arg_25;
  #line 252 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *cf_arg_26;
  #line 253 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *cf_arg_27;
  #line 254 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *cf_arg_28;
  #line 255 
  switch (ldv_undef_int()) {
    #line 256 
    case 0: 
            #line 256 
    ;
    #line 257 
    cf_arg_20 = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)ldv_xmalloc(16UL);
    #line 258 
    cf_arg_20->arg0 = arg0;
    #line 259 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_xgmac_reg_addr_fops,(void *)cf_arg_20);
    #line 260 
    __VERIFIER_assume(ret == 0);
    #line 261 
    break;
    #line 263 
    case 1: 
            #line 263 
    ;
    #line 264 
    cf_arg_21 = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)ldv_xmalloc(16UL);
    #line 265 
    cf_arg_21->arg0 = arg0;
    #line 266 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_xgmac_reg_value_fops,(void *)cf_arg_21);
    #line 267 
    __VERIFIER_assume(ret == 0);
    #line 268 
    break;
    #line 270 
    case 2: 
            #line 270 
    ;
    #line 271 
    cf_arg_22 = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)ldv_xmalloc(16UL);
    #line 272 
    cf_arg_22->arg0 = arg0;
    #line 273 
    ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_xi2c_reg_addr_fops,(void *)cf_arg_22);
    #line 274 
    __VERIFIER_assume(ret == 0);
    #line 275 
    break;
    #line 277 
    case 3: 
            #line 277 
    ;
    #line 278 
    cf_arg_23 = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)ldv_xmalloc(16UL);
    #line 279 
    cf_arg_23->arg0 = arg0;
    #line 280 
    ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_xi2c_reg_value_fops,(void *)cf_arg_23);
    #line 281 
    __VERIFIER_assume(ret == 0);
    #line 282 
    break;
    #line 284 
    case 4: 
            #line 284 
    ;
    #line 285 
    cf_arg_24 = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)ldv_xmalloc(16UL);
    #line 286 
    cf_arg_24->arg0 = arg0;
    #line 287 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_xpcs_mmd_fops,(void *)cf_arg_24);
    #line 288 
    __VERIFIER_assume(ret == 0);
    #line 289 
    break;
    #line 291 
    case 5: 
            #line 291 
    ;
    #line 292 
    cf_arg_25 = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)ldv_xmalloc(16UL);
    #line 293 
    cf_arg_25->arg0 = arg0;
    #line 294 
    ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_xpcs_reg_addr_fops,(void *)cf_arg_25);
    #line 295 
    __VERIFIER_assume(ret == 0);
    #line 296 
    break;
    #line 298 
    case 6: 
            #line 298 
    ;
    #line 299 
    cf_arg_26 = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)ldv_xmalloc(16UL);
    #line 300 
    cf_arg_26->arg0 = arg0;
    #line 301 
    ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_xpcs_reg_value_fops,(void *)cf_arg_26);
    #line 302 
    __VERIFIER_assume(ret == 0);
    #line 303 
    break;
    #line 305 
    case 7: 
            #line 305 
    ;
    #line 306 
    cf_arg_27 = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)ldv_xmalloc(16UL);
    #line 307 
    cf_arg_27->arg0 = arg0;
    #line 308 
    ret = pthread_create(& emg_thread_27,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_xprop_reg_addr_fops,(void *)cf_arg_27);
    #line 309 
    __VERIFIER_assume(ret == 0);
    #line 310 
    break;
    #line 312 
    case 8: 
            #line 312 
    ;
    #line 313 
    cf_arg_28 = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)ldv_xmalloc(16UL);
    #line 314 
    cf_arg_28->arg0 = arg0;
    #line 315 
    ret = pthread_create(& emg_thread_28,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_xprop_reg_value_fops,(void *)cf_arg_28);
    #line 316 
    __VERIFIER_assume(ret == 0);
    #line 317 
    break;
    #line 319 
    default: 
             #line 319 
    ;
    #line 319 
    __VERIFIER_assume(0);
  }
  #line 321 
  return;
}

#line 325  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_7(struct timer_list *arg0)
{
  #line 326 
  int ret;
  #line 327 
  struct emg_struct_timer_scenario_13_33 *cf_arg_33;
  #line 328 
  ret = pthread_join(emg_thread_33,(void **)0);
  #line 329 
  __VERIFIER_assume(ret == 0);
  #line 330 
  return;
}

#line 334  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_11(struct timer_list *arg0)
{
  #line 335 
  int ret;
  #line 336 
  struct emg_struct_timer_scenario_13_33 *cf_arg_33;
  #line 337 
  cf_arg_33 = (struct emg_struct_timer_scenario_13_33 *)ldv_xmalloc(16UL);
  #line 338 
  cf_arg_33->arg0 = arg0;
  #line 339 
  ret = pthread_create(& emg_thread_33,(pthread_attr_t *)0,& emg_timer_timer_scenario_13,(void *)cf_arg_33);
  #line 340 
  __VERIFIER_assume(ret == 0);
  #line 341 
  return;
}

#line 345  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct pci_driver *arg0)
{
  #line 346 
  int ret;
  #line 347 
  struct emg_struct_pci_scenario_xgbe_driver_30 *cf_arg_30;
  #line 348 
  ret = pthread_join(emg_thread_30,(void **)0);
  #line 349 
  __VERIFIER_assume(ret == 0);
  #line 350 
  return;
}

#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_13(struct platform_driver *arg0)
{
  #line 355 
  int ret;
  #line 356 
  struct emg_struct_platform_instance_xgbe_driver_31 *cf_arg_31;
  #line 357 
  ret = pthread_join(emg_thread_31,(void **)0);
  #line 358 
  __VERIFIER_assume(ret == 0);
  #line 359 
  return;
}

#line 363  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_15(struct net_device *arg0)
{
  #line 364 
  int ret;
  #line 365 
  struct emg_struct_random_allocationless_scenario_xgbe_get_channels_29 *cf_arg_29;
  #line 366 
  cf_arg_29 = (struct emg_struct_random_allocationless_scenario_xgbe_get_channels_29 *)ldv_xmalloc(16UL);
  #line 367 
  cf_arg_29->arg0 = arg0;
  #line 368 
  ret = pthread_create(& emg_thread_29,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_xgbe_get_channels,(void *)cf_arg_29);
  #line 369 
  __VERIFIER_assume(ret == 0);
  #line 370 
  return;
}

#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_19(struct net_device *arg0)
{
  #line 375 
  int ret;
  #line 376 
  struct emg_struct_random_allocationless_scenario_xgbe_get_channels_29 *cf_arg_29;
  #line 377 
  ret = pthread_join(emg_thread_29,(void **)0);
  #line 378 
  __VERIFIER_assume(ret == 0);
  #line 379 
  return;
}

#line 383  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_xgmac_reg_addr_fops(void *arg0)
{
  #line 386 
  struct file_operations *emg_20_container;
  #line 387 
  char *emg_20_emg_param_1_0;
  #line 388 
  char *emg_20_emg_param_1_2;
  #line 389 
  long long *emg_20_emg_param_3_1;
  #line 390 
  long long *emg_20_emg_param_3_3;
  #line 391 
  struct file *emg_20_resource_0;
  #line 392 
  struct inode *emg_20_resource_1;
  #line 393 
  int emg_20_ret;
  #line 394 
  unsigned long emg_20_size_cnt;
  #line 395 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 396 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 397 
  int emg_repeat_cnt_call_20 = 1;
  #line 399 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *data = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)arg0;
  #line 403 
  emg_20_ret = ldv_undef_int();
  #line 404 
  emg_20_container = emg_alias_xgmac_reg_addr_fops;
  #line 405 
  emg_20_ret = ldv_undef_int();
  #line 407 
  __VERIFIER_assume(data->arg0 == emg_alias_xgmac_reg_addr_fops);
  #line 409 
  if (data != (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)0) {
    #line 410 
    emg_20_container = data->arg0;
    #line 411 
    ldv_free((void *)data);
  }
  #line 416 
  emg_20_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 417 
  emg_20_size_cnt = (unsigned long)ldv_undef_int();
  #line 421 
  goto emg_main_20;
  #line 425 
  return (void *)0;
  #line 428 
  emg_call_20: 
               #line 428 
  ;
  #line 429 
  if (ldv_undef_int() != 0) {
    #line 430 
    if (ldv_undef_int() != 0) {
      #line 432 
      emg_20_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 432 
      emg_20_emg_param_1_0 = emg_20_emg_param_1_0;
      #line 433 
      emg_20_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 433 
      emg_20_emg_param_3_1 = emg_20_emg_param_3_1;
      #line 437 
      emg_wrapper_xgmac_reg_addr_read(emg_20_resource_0,emg_20_emg_param_1_0,emg_20_size_cnt,emg_20_emg_param_3_1);
      #line 441 
      ldv_free((void *)emg_20_emg_param_1_0);
      #line 442 
      ldv_free((void *)emg_20_emg_param_3_1);
    }
    else {
      #line 451 
      __VERIFIER_assume(emg_20_size_cnt <= 2147479552UL);
      #line 452 
      emg_20_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 452 
      emg_20_emg_param_1_2 = emg_20_emg_param_1_2;
      #line 453 
      emg_20_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 453 
      emg_20_emg_param_3_3 = emg_20_emg_param_3_3;
      #line 457 
      emg_wrapper_xgmac_reg_addr_write(emg_20_resource_0,emg_20_emg_param_1_2,emg_20_size_cnt,emg_20_emg_param_3_3);
      #line 461 
      ldv_free((void *)emg_20_emg_param_1_2);
      #line 462 
      ldv_free((void *)emg_20_emg_param_3_3);
    }
    #line 466 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 467 
      emg_repeat_cnt_call_20 --;
      #line 469 
      goto emg_call_20;
    }
    else 
         #line 471 
         __VERIFIER_assume(0);
  }
  else {
    #line 477 
    if (emg_20_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 478 
      (*(emg_20_container->release))(emg_20_resource_1,emg_20_resource_0);
    #line 482 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 483 
      emg_repeat_cnt_main_20_0 --;
      #line 485 
      goto emg_main_20;
    }
    else 
         #line 487 
         __VERIFIER_assume(0);
  }
  #line 493 
  return (void *)0;
  #line 496 
  emg_main_20: 
               #line 496 
  ;
  #line 497 
  if (ldv_undef_int() != 0) {
    #line 499 
    emg_20_ret = simple_open(emg_20_resource_1,emg_20_resource_0);
    #line 504 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 507 
    if (ldv_undef_int() != 0) {
      #line 509 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 513 
      goto emg_call_20;
    }
    else {
      #line 518 
      __VERIFIER_assume(emg_20_ret != 0);
      #line 521 
      if (emg_repeat_cnt_main_20_1 > 0) {
        #line 522 
        emg_repeat_cnt_main_20_1 --;
        #line 524 
        goto emg_main_20;
      }
      else 
           #line 526 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 533 
       ldv_free((void *)emg_20_resource_0);
  #line 541 
  return (void *)0;
}

#line 546  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_xgmac_reg_value_fops(void *arg0)
{
  #line 549 
  struct file_operations *emg_21_container;
  #line 550 
  char *emg_21_emg_param_1_0;
  #line 551 
  char *emg_21_emg_param_1_2;
  #line 552 
  long long *emg_21_emg_param_3_1;
  #line 553 
  long long *emg_21_emg_param_3_3;
  #line 554 
  struct file *emg_21_resource_0;
  #line 555 
  struct inode *emg_21_resource_1;
  #line 556 
  int emg_21_ret;
  #line 557 
  unsigned long emg_21_size_cnt;
  #line 558 
  int emg_repeat_cnt_main_21_1 = 1;
  #line 559 
  int emg_repeat_cnt_main_21_0 = 1;
  #line 560 
  int emg_repeat_cnt_call_21 = 1;
  #line 562 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *data = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)arg0;
  #line 566 
  emg_21_ret = ldv_undef_int();
  #line 567 
  emg_21_container = emg_alias_xgmac_reg_value_fops;
  #line 568 
  emg_21_ret = ldv_undef_int();
  #line 570 
  __VERIFIER_assume(data->arg0 == emg_alias_xgmac_reg_value_fops);
  #line 572 
  if (data != (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)0) {
    #line 573 
    emg_21_container = data->arg0;
    #line 574 
    ldv_free((void *)data);
  }
  #line 579 
  emg_21_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 580 
  emg_21_size_cnt = (unsigned long)ldv_undef_int();
  #line 584 
  goto emg_main_21;
  #line 588 
  return (void *)0;
  #line 591 
  emg_call_21: 
               #line 591 
  ;
  #line 592 
  if (ldv_undef_int() != 0) {
    #line 593 
    if (ldv_undef_int() != 0) {
      #line 595 
      emg_21_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 595 
      emg_21_emg_param_1_0 = emg_21_emg_param_1_0;
      #line 596 
      emg_21_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 596 
      emg_21_emg_param_3_1 = emg_21_emg_param_3_1;
      #line 600 
      emg_wrapper_xgmac_reg_value_read(emg_21_resource_0,emg_21_emg_param_1_0,emg_21_size_cnt,emg_21_emg_param_3_1);
      #line 604 
      ldv_free((void *)emg_21_emg_param_1_0);
      #line 605 
      ldv_free((void *)emg_21_emg_param_3_1);
    }
    else {
      #line 614 
      __VERIFIER_assume(emg_21_size_cnt <= 2147479552UL);
      #line 615 
      emg_21_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 615 
      emg_21_emg_param_1_2 = emg_21_emg_param_1_2;
      #line 616 
      emg_21_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 616 
      emg_21_emg_param_3_3 = emg_21_emg_param_3_3;
      #line 620 
      emg_wrapper_xgmac_reg_value_write(emg_21_resource_0,emg_21_emg_param_1_2,emg_21_size_cnt,emg_21_emg_param_3_3);
      #line 624 
      ldv_free((void *)emg_21_emg_param_1_2);
      #line 625 
      ldv_free((void *)emg_21_emg_param_3_3);
    }
    #line 629 
    if (emg_repeat_cnt_call_21 > 0) {
      #line 630 
      emg_repeat_cnt_call_21 --;
      #line 632 
      goto emg_call_21;
    }
    else 
         #line 634 
         __VERIFIER_assume(0);
  }
  else {
    #line 640 
    if (emg_21_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 641 
      (*(emg_21_container->release))(emg_21_resource_1,emg_21_resource_0);
    #line 645 
    if (emg_repeat_cnt_main_21_0 > 0) {
      #line 646 
      emg_repeat_cnt_main_21_0 --;
      #line 648 
      goto emg_main_21;
    }
    else 
         #line 650 
         __VERIFIER_assume(0);
  }
  #line 656 
  return (void *)0;
  #line 659 
  emg_main_21: 
               #line 659 
  ;
  #line 660 
  if (ldv_undef_int() != 0) {
    #line 662 
    emg_21_ret = simple_open(emg_21_resource_1,emg_21_resource_0);
    #line 667 
    emg_21_ret = ldv_filter_err_code(emg_21_ret);
    #line 670 
    if (ldv_undef_int() != 0) {
      #line 672 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 676 
      goto emg_call_21;
    }
    else {
      #line 681 
      __VERIFIER_assume(emg_21_ret != 0);
      #line 684 
      if (emg_repeat_cnt_main_21_1 > 0) {
        #line 685 
        emg_repeat_cnt_main_21_1 --;
        #line 687 
        goto emg_main_21;
      }
      else 
           #line 689 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 696 
       ldv_free((void *)emg_21_resource_0);
  #line 704 
  return (void *)0;
}

#line 709  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_xi2c_reg_addr_fops(void *arg0)
{
  #line 712 
  struct file_operations *emg_22_container;
  #line 713 
  char *emg_22_emg_param_1_0;
  #line 714 
  char *emg_22_emg_param_1_2;
  #line 715 
  long long *emg_22_emg_param_3_1;
  #line 716 
  long long *emg_22_emg_param_3_3;
  #line 717 
  struct file *emg_22_resource_0;
  #line 718 
  struct inode *emg_22_resource_1;
  #line 719 
  int emg_22_ret;
  #line 720 
  unsigned long emg_22_size_cnt;
  #line 721 
  int emg_repeat_cnt_main_22_1 = 1;
  #line 722 
  int emg_repeat_cnt_main_22_0 = 1;
  #line 723 
  int emg_repeat_cnt_call_22 = 1;
  #line 725 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *data = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)arg0;
  #line 729 
  emg_22_ret = ldv_undef_int();
  #line 730 
  emg_22_container = emg_alias_xi2c_reg_addr_fops;
  #line 731 
  emg_22_ret = ldv_undef_int();
  #line 733 
  __VERIFIER_assume(data->arg0 == emg_alias_xi2c_reg_addr_fops);
  #line 735 
  if (data != (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)0) {
    #line 736 
    emg_22_container = data->arg0;
    #line 737 
    ldv_free((void *)data);
  }
  #line 742 
  emg_22_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 743 
  emg_22_size_cnt = (unsigned long)ldv_undef_int();
  #line 747 
  goto emg_main_22;
  #line 751 
  return (void *)0;
  #line 754 
  emg_call_22: 
               #line 754 
  ;
  #line 755 
  if (ldv_undef_int() != 0) {
    #line 756 
    if (ldv_undef_int() != 0) {
      #line 758 
      emg_22_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 758 
      emg_22_emg_param_1_0 = emg_22_emg_param_1_0;
      #line 759 
      emg_22_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 759 
      emg_22_emg_param_3_1 = emg_22_emg_param_3_1;
      #line 763 
      emg_wrapper_xi2c_reg_addr_read(emg_22_resource_0,emg_22_emg_param_1_0,emg_22_size_cnt,emg_22_emg_param_3_1);
      #line 767 
      ldv_free((void *)emg_22_emg_param_1_0);
      #line 768 
      ldv_free((void *)emg_22_emg_param_3_1);
    }
    else {
      #line 777 
      __VERIFIER_assume(emg_22_size_cnt <= 2147479552UL);
      #line 778 
      emg_22_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 778 
      emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
      #line 779 
      emg_22_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 779 
      emg_22_emg_param_3_3 = emg_22_emg_param_3_3;
      #line 783 
      emg_wrapper_xi2c_reg_addr_write(emg_22_resource_0,emg_22_emg_param_1_2,emg_22_size_cnt,emg_22_emg_param_3_3);
      #line 787 
      ldv_free((void *)emg_22_emg_param_1_2);
      #line 788 
      ldv_free((void *)emg_22_emg_param_3_3);
    }
    #line 792 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 793 
      emg_repeat_cnt_call_22 --;
      #line 795 
      goto emg_call_22;
    }
    else 
         #line 797 
         __VERIFIER_assume(0);
  }
  else {
    #line 803 
    if (emg_22_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 804 
      (*(emg_22_container->release))(emg_22_resource_1,emg_22_resource_0);
    #line 808 
    if (emg_repeat_cnt_main_22_0 > 0) {
      #line 809 
      emg_repeat_cnt_main_22_0 --;
      #line 811 
      goto emg_main_22;
    }
    else 
         #line 813 
         __VERIFIER_assume(0);
  }
  #line 819 
  return (void *)0;
  #line 822 
  emg_main_22: 
               #line 822 
  ;
  #line 823 
  if (ldv_undef_int() != 0) {
    #line 825 
    emg_22_ret = simple_open(emg_22_resource_1,emg_22_resource_0);
    #line 830 
    emg_22_ret = ldv_filter_err_code(emg_22_ret);
    #line 833 
    if (ldv_undef_int() != 0) {
      #line 835 
      __VERIFIER_assume(emg_22_ret == 0);
      #line 839 
      goto emg_call_22;
    }
    else {
      #line 844 
      __VERIFIER_assume(emg_22_ret != 0);
      #line 847 
      if (emg_repeat_cnt_main_22_1 > 0) {
        #line 848 
        emg_repeat_cnt_main_22_1 --;
        #line 850 
        goto emg_main_22;
      }
      else 
           #line 852 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 859 
       ldv_free((void *)emg_22_resource_0);
  #line 867 
  return (void *)0;
}

#line 872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_xi2c_reg_value_fops(void *arg0)
{
  #line 875 
  struct file_operations *emg_23_container;
  #line 876 
  char *emg_23_emg_param_1_0;
  #line 877 
  char *emg_23_emg_param_1_2;
  #line 878 
  long long *emg_23_emg_param_3_1;
  #line 879 
  long long *emg_23_emg_param_3_3;
  #line 880 
  struct file *emg_23_resource_0;
  #line 881 
  struct inode *emg_23_resource_1;
  #line 882 
  int emg_23_ret;
  #line 883 
  unsigned long emg_23_size_cnt;
  #line 884 
  int emg_repeat_cnt_main_23_0 = 1;
  #line 885 
  int emg_repeat_cnt_main_23_1 = 1;
  #line 886 
  int emg_repeat_cnt_call_23 = 1;
  #line 888 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *data = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)arg0;
  #line 892 
  emg_23_ret = ldv_undef_int();
  #line 893 
  emg_23_container = emg_alias_xi2c_reg_value_fops;
  #line 894 
  emg_23_ret = ldv_undef_int();
  #line 896 
  __VERIFIER_assume(data->arg0 == emg_alias_xi2c_reg_value_fops);
  #line 898 
  if (data != (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)0) {
    #line 899 
    emg_23_container = data->arg0;
    #line 900 
    ldv_free((void *)data);
  }
  #line 905 
  emg_23_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 906 
  emg_23_size_cnt = (unsigned long)ldv_undef_int();
  #line 910 
  goto emg_main_23;
  #line 914 
  return (void *)0;
  #line 917 
  emg_call_23: 
               #line 917 
  ;
  #line 918 
  if (ldv_undef_int() != 0) {
    #line 919 
    if (ldv_undef_int() != 0) {
      #line 921 
      emg_23_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 921 
      emg_23_emg_param_1_0 = emg_23_emg_param_1_0;
      #line 922 
      emg_23_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 922 
      emg_23_emg_param_3_1 = emg_23_emg_param_3_1;
      #line 926 
      emg_wrapper_xi2c_reg_value_read(emg_23_resource_0,emg_23_emg_param_1_0,emg_23_size_cnt,emg_23_emg_param_3_1);
      #line 930 
      ldv_free((void *)emg_23_emg_param_1_0);
      #line 931 
      ldv_free((void *)emg_23_emg_param_3_1);
    }
    else {
      #line 940 
      __VERIFIER_assume(emg_23_size_cnt <= 2147479552UL);
      #line 941 
      emg_23_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 941 
      emg_23_emg_param_1_2 = emg_23_emg_param_1_2;
      #line 942 
      emg_23_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 942 
      emg_23_emg_param_3_3 = emg_23_emg_param_3_3;
      #line 946 
      emg_wrapper_xi2c_reg_value_write(emg_23_resource_0,emg_23_emg_param_1_2,emg_23_size_cnt,emg_23_emg_param_3_3);
      #line 950 
      ldv_free((void *)emg_23_emg_param_1_2);
      #line 951 
      ldv_free((void *)emg_23_emg_param_3_3);
    }
    #line 955 
    if (emg_repeat_cnt_call_23 > 0) {
      #line 956 
      emg_repeat_cnt_call_23 --;
      #line 958 
      goto emg_call_23;
    }
    else 
         #line 960 
         __VERIFIER_assume(0);
  }
  else {
    #line 966 
    if (emg_23_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 967 
      (*(emg_23_container->release))(emg_23_resource_1,emg_23_resource_0);
    #line 971 
    if (emg_repeat_cnt_main_23_0 > 0) {
      #line 972 
      emg_repeat_cnt_main_23_0 --;
      #line 974 
      goto emg_main_23;
    }
    else 
         #line 976 
         __VERIFIER_assume(0);
  }
  #line 982 
  return (void *)0;
  #line 985 
  emg_main_23: 
               #line 985 
  ;
  #line 986 
  if (ldv_undef_int() != 0) {
    #line 988 
    emg_23_ret = simple_open(emg_23_resource_1,emg_23_resource_0);
    #line 993 
    emg_23_ret = ldv_filter_err_code(emg_23_ret);
    #line 996 
    if (ldv_undef_int() != 0) {
      #line 998 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 1002 
      goto emg_call_23;
    }
    else {
      #line 1007 
      __VERIFIER_assume(emg_23_ret != 0);
      #line 1010 
      if (emg_repeat_cnt_main_23_1 > 0) {
        #line 1011 
        emg_repeat_cnt_main_23_1 --;
        #line 1013 
        goto emg_main_23;
      }
      else 
           #line 1015 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1022 
       ldv_free((void *)emg_23_resource_0);
  #line 1030 
  return (void *)0;
}

#line 1035  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_xpcs_mmd_fops(void *arg0)
{
  #line 1038 
  struct file_operations *emg_24_container;
  #line 1039 
  char *emg_24_emg_param_1_0;
  #line 1040 
  char *emg_24_emg_param_1_2;
  #line 1041 
  long long *emg_24_emg_param_3_1;
  #line 1042 
  long long *emg_24_emg_param_3_3;
  #line 1043 
  struct file *emg_24_resource_0;
  #line 1044 
  struct inode *emg_24_resource_1;
  #line 1045 
  int emg_24_ret;
  #line 1046 
  unsigned long emg_24_size_cnt;
  #line 1047 
  int emg_repeat_cnt_main_24_0 = 1;
  #line 1048 
  int emg_repeat_cnt_main_24_1 = 1;
  #line 1049 
  int emg_repeat_cnt_call_24 = 1;
  #line 1051 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *data = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)arg0;
  #line 1055 
  emg_24_ret = ldv_undef_int();
  #line 1056 
  emg_24_container = emg_alias_xpcs_mmd_fops;
  #line 1057 
  emg_24_ret = ldv_undef_int();
  #line 1059 
  __VERIFIER_assume(data->arg0 == emg_alias_xpcs_mmd_fops);
  #line 1061 
  if (data != (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)0) {
    #line 1062 
    emg_24_container = data->arg0;
    #line 1063 
    ldv_free((void *)data);
  }
  #line 1068 
  emg_24_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1069 
  emg_24_size_cnt = (unsigned long)ldv_undef_int();
  #line 1073 
  goto emg_main_24;
  #line 1077 
  return (void *)0;
  #line 1080 
  emg_call_24: 
               #line 1080 
  ;
  #line 1081 
  if (ldv_undef_int() != 0) {
    #line 1082 
    if (ldv_undef_int() != 0) {
      #line 1084 
      emg_24_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1084 
      emg_24_emg_param_1_0 = emg_24_emg_param_1_0;
      #line 1085 
      emg_24_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1085 
      emg_24_emg_param_3_1 = emg_24_emg_param_3_1;
      #line 1089 
      emg_wrapper_xpcs_mmd_read(emg_24_resource_0,emg_24_emg_param_1_0,emg_24_size_cnt,emg_24_emg_param_3_1);
      #line 1093 
      ldv_free((void *)emg_24_emg_param_1_0);
      #line 1094 
      ldv_free((void *)emg_24_emg_param_3_1);
    }
    else {
      #line 1103 
      __VERIFIER_assume(emg_24_size_cnt <= 2147479552UL);
      #line 1104 
      emg_24_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1104 
      emg_24_emg_param_1_2 = emg_24_emg_param_1_2;
      #line 1105 
      emg_24_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1105 
      emg_24_emg_param_3_3 = emg_24_emg_param_3_3;
      #line 1109 
      emg_wrapper_xpcs_mmd_write(emg_24_resource_0,emg_24_emg_param_1_2,emg_24_size_cnt,emg_24_emg_param_3_3);
      #line 1113 
      ldv_free((void *)emg_24_emg_param_1_2);
      #line 1114 
      ldv_free((void *)emg_24_emg_param_3_3);
    }
    #line 1118 
    if (emg_repeat_cnt_call_24 > 0) {
      #line 1119 
      emg_repeat_cnt_call_24 --;
      #line 1121 
      goto emg_call_24;
    }
    else 
         #line 1123 
         __VERIFIER_assume(0);
  }
  else {
    #line 1129 
    if (emg_24_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1130 
      (*(emg_24_container->release))(emg_24_resource_1,emg_24_resource_0);
    #line 1134 
    if (emg_repeat_cnt_main_24_1 > 0) {
      #line 1135 
      emg_repeat_cnt_main_24_1 --;
      #line 1137 
      goto emg_main_24;
    }
    else 
         #line 1139 
         __VERIFIER_assume(0);
  }
  #line 1145 
  return (void *)0;
  #line 1148 
  emg_main_24: 
               #line 1148 
  ;
  #line 1149 
  if (ldv_undef_int() != 0) {
    #line 1151 
    emg_24_ret = simple_open(emg_24_resource_1,emg_24_resource_0);
    #line 1156 
    emg_24_ret = ldv_filter_err_code(emg_24_ret);
    #line 1159 
    if (ldv_undef_int() != 0) {
      #line 1161 
      __VERIFIER_assume(emg_24_ret == 0);
      #line 1165 
      goto emg_call_24;
    }
    else {
      #line 1170 
      __VERIFIER_assume(emg_24_ret != 0);
      #line 1173 
      if (emg_repeat_cnt_main_24_0 > 0) {
        #line 1174 
        emg_repeat_cnt_main_24_0 --;
        #line 1176 
        goto emg_main_24;
      }
      else 
           #line 1178 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1185 
       ldv_free((void *)emg_24_resource_0);
  #line 1193 
  return (void *)0;
}

#line 1198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_xpcs_reg_addr_fops(void *arg0)
{
  #line 1201 
  struct file_operations *emg_25_container;
  #line 1202 
  char *emg_25_emg_param_1_0;
  #line 1203 
  char *emg_25_emg_param_1_2;
  #line 1204 
  long long *emg_25_emg_param_3_1;
  #line 1205 
  long long *emg_25_emg_param_3_3;
  #line 1206 
  struct file *emg_25_resource_0;
  #line 1207 
  struct inode *emg_25_resource_1;
  #line 1208 
  int emg_25_ret;
  #line 1209 
  unsigned long emg_25_size_cnt;
  #line 1210 
  int emg_repeat_cnt_call_25 = 1;
  #line 1211 
  int emg_repeat_cnt_main_25_0 = 1;
  #line 1212 
  int emg_repeat_cnt_main_25_1 = 1;
  #line 1214 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *data = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)arg0;
  #line 1218 
  emg_25_ret = ldv_undef_int();
  #line 1219 
  emg_25_container = emg_alias_xpcs_reg_addr_fops;
  #line 1220 
  emg_25_ret = ldv_undef_int();
  #line 1222 
  __VERIFIER_assume(data->arg0 == emg_alias_xpcs_reg_addr_fops);
  #line 1224 
  if (data != (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)0) {
    #line 1225 
    emg_25_container = data->arg0;
    #line 1226 
    ldv_free((void *)data);
  }
  #line 1231 
  emg_25_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1232 
  emg_25_size_cnt = (unsigned long)ldv_undef_int();
  #line 1236 
  goto emg_main_25;
  #line 1240 
  return (void *)0;
  #line 1243 
  emg_call_25: 
               #line 1243 
  ;
  #line 1244 
  if (ldv_undef_int() != 0) {
    #line 1245 
    if (ldv_undef_int() != 0) {
      #line 1247 
      emg_25_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1247 
      emg_25_emg_param_1_0 = emg_25_emg_param_1_0;
      #line 1248 
      emg_25_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1248 
      emg_25_emg_param_3_1 = emg_25_emg_param_3_1;
      #line 1252 
      emg_wrapper_xpcs_reg_addr_read(emg_25_resource_0,emg_25_emg_param_1_0,emg_25_size_cnt,emg_25_emg_param_3_1);
      #line 1256 
      ldv_free((void *)emg_25_emg_param_1_0);
      #line 1257 
      ldv_free((void *)emg_25_emg_param_3_1);
    }
    else {
      #line 1266 
      __VERIFIER_assume(emg_25_size_cnt <= 2147479552UL);
      #line 1267 
      emg_25_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1267 
      emg_25_emg_param_1_2 = emg_25_emg_param_1_2;
      #line 1268 
      emg_25_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1268 
      emg_25_emg_param_3_3 = emg_25_emg_param_3_3;
      #line 1272 
      emg_wrapper_xpcs_reg_addr_write(emg_25_resource_0,emg_25_emg_param_1_2,emg_25_size_cnt,emg_25_emg_param_3_3);
      #line 1276 
      ldv_free((void *)emg_25_emg_param_1_2);
      #line 1277 
      ldv_free((void *)emg_25_emg_param_3_3);
    }
    #line 1281 
    if (emg_repeat_cnt_call_25 > 0) {
      #line 1282 
      emg_repeat_cnt_call_25 --;
      #line 1284 
      goto emg_call_25;
    }
    else 
         #line 1286 
         __VERIFIER_assume(0);
  }
  else {
    #line 1292 
    if (emg_25_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1293 
      (*(emg_25_container->release))(emg_25_resource_1,emg_25_resource_0);
    #line 1297 
    if (emg_repeat_cnt_main_25_0 > 0) {
      #line 1298 
      emg_repeat_cnt_main_25_0 --;
      #line 1300 
      goto emg_main_25;
    }
    else 
         #line 1302 
         __VERIFIER_assume(0);
  }
  #line 1308 
  return (void *)0;
  #line 1311 
  emg_main_25: 
               #line 1311 
  ;
  #line 1312 
  if (ldv_undef_int() != 0) {
    #line 1314 
    emg_25_ret = simple_open(emg_25_resource_1,emg_25_resource_0);
    #line 1319 
    emg_25_ret = ldv_filter_err_code(emg_25_ret);
    #line 1322 
    if (ldv_undef_int() != 0) {
      #line 1324 
      __VERIFIER_assume(emg_25_ret == 0);
      #line 1328 
      goto emg_call_25;
    }
    else {
      #line 1333 
      __VERIFIER_assume(emg_25_ret != 0);
      #line 1336 
      if (emg_repeat_cnt_main_25_1 > 0) {
        #line 1337 
        emg_repeat_cnt_main_25_1 --;
        #line 1339 
        goto emg_main_25;
      }
      else 
           #line 1341 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1348 
       ldv_free((void *)emg_25_resource_0);
  #line 1356 
  return (void *)0;
}

#line 1361  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_xpcs_reg_value_fops(void *arg0)
{
  #line 1364 
  struct file_operations *emg_26_container;
  #line 1365 
  char *emg_26_emg_param_1_0;
  #line 1366 
  char *emg_26_emg_param_1_2;
  #line 1367 
  long long *emg_26_emg_param_3_1;
  #line 1368 
  long long *emg_26_emg_param_3_3;
  #line 1369 
  struct file *emg_26_resource_0;
  #line 1370 
  struct inode *emg_26_resource_1;
  #line 1371 
  int emg_26_ret;
  #line 1372 
  unsigned long emg_26_size_cnt;
  #line 1373 
  int emg_repeat_cnt_main_26_1 = 1;
  #line 1374 
  int emg_repeat_cnt_main_26_0 = 1;
  #line 1375 
  int emg_repeat_cnt_call_26 = 1;
  #line 1377 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *data = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)arg0;
  #line 1381 
  emg_26_ret = ldv_undef_int();
  #line 1382 
  emg_26_container = emg_alias_xpcs_reg_value_fops;
  #line 1383 
  emg_26_ret = ldv_undef_int();
  #line 1385 
  __VERIFIER_assume(data->arg0 == emg_alias_xpcs_reg_value_fops);
  #line 1387 
  if (data != (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)0) {
    #line 1388 
    emg_26_container = data->arg0;
    #line 1389 
    ldv_free((void *)data);
  }
  #line 1394 
  emg_26_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1395 
  emg_26_size_cnt = (unsigned long)ldv_undef_int();
  #line 1399 
  goto emg_main_26;
  #line 1403 
  return (void *)0;
  #line 1406 
  emg_call_26: 
               #line 1406 
  ;
  #line 1407 
  if (ldv_undef_int() != 0) {
    #line 1408 
    if (ldv_undef_int() != 0) {
      #line 1410 
      emg_26_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1410 
      emg_26_emg_param_1_0 = emg_26_emg_param_1_0;
      #line 1411 
      emg_26_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1411 
      emg_26_emg_param_3_1 = emg_26_emg_param_3_1;
      #line 1415 
      emg_wrapper_xpcs_reg_value_read(emg_26_resource_0,emg_26_emg_param_1_0,emg_26_size_cnt,emg_26_emg_param_3_1);
      #line 1419 
      ldv_free((void *)emg_26_emg_param_1_0);
      #line 1420 
      ldv_free((void *)emg_26_emg_param_3_1);
    }
    else {
      #line 1429 
      __VERIFIER_assume(emg_26_size_cnt <= 2147479552UL);
      #line 1430 
      emg_26_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1430 
      emg_26_emg_param_1_2 = emg_26_emg_param_1_2;
      #line 1431 
      emg_26_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1431 
      emg_26_emg_param_3_3 = emg_26_emg_param_3_3;
      #line 1435 
      emg_wrapper_xpcs_reg_value_write(emg_26_resource_0,emg_26_emg_param_1_2,emg_26_size_cnt,emg_26_emg_param_3_3);
      #line 1439 
      ldv_free((void *)emg_26_emg_param_1_2);
      #line 1440 
      ldv_free((void *)emg_26_emg_param_3_3);
    }
    #line 1444 
    if (emg_repeat_cnt_call_26 > 0) {
      #line 1445 
      emg_repeat_cnt_call_26 --;
      #line 1447 
      goto emg_call_26;
    }
    else 
         #line 1449 
         __VERIFIER_assume(0);
  }
  else {
    #line 1455 
    if (emg_26_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1456 
      (*(emg_26_container->release))(emg_26_resource_1,emg_26_resource_0);
    #line 1460 
    if (emg_repeat_cnt_main_26_0 > 0) {
      #line 1461 
      emg_repeat_cnt_main_26_0 --;
      #line 1463 
      goto emg_main_26;
    }
    else 
         #line 1465 
         __VERIFIER_assume(0);
  }
  #line 1471 
  return (void *)0;
  #line 1474 
  emg_main_26: 
               #line 1474 
  ;
  #line 1475 
  if (ldv_undef_int() != 0) {
    #line 1477 
    emg_26_ret = simple_open(emg_26_resource_1,emg_26_resource_0);
    #line 1482 
    emg_26_ret = ldv_filter_err_code(emg_26_ret);
    #line 1485 
    if (ldv_undef_int() != 0) {
      #line 1487 
      __VERIFIER_assume(emg_26_ret == 0);
      #line 1491 
      goto emg_call_26;
    }
    else {
      #line 1496 
      __VERIFIER_assume(emg_26_ret != 0);
      #line 1499 
      if (emg_repeat_cnt_main_26_1 > 0) {
        #line 1500 
        emg_repeat_cnt_main_26_1 --;
        #line 1502 
        goto emg_main_26;
      }
      else 
           #line 1504 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1511 
       ldv_free((void *)emg_26_resource_0);
  #line 1519 
  return (void *)0;
}

#line 1524  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_xprop_reg_addr_fops(void *arg0)
{
  #line 1527 
  struct file_operations *emg_27_container;
  #line 1528 
  char *emg_27_emg_param_1_0;
  #line 1529 
  char *emg_27_emg_param_1_2;
  #line 1530 
  long long *emg_27_emg_param_3_1;
  #line 1531 
  long long *emg_27_emg_param_3_3;
  #line 1532 
  struct file *emg_27_resource_0;
  #line 1533 
  struct inode *emg_27_resource_1;
  #line 1534 
  int emg_27_ret;
  #line 1535 
  unsigned long emg_27_size_cnt;
  #line 1536 
  int emg_repeat_cnt_main_27_1 = 1;
  #line 1537 
  int emg_repeat_cnt_call_27 = 1;
  #line 1538 
  int emg_repeat_cnt_main_27_0 = 1;
  #line 1540 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *data = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)arg0;
  #line 1544 
  emg_27_ret = ldv_undef_int();
  #line 1545 
  emg_27_container = emg_alias_xprop_reg_addr_fops;
  #line 1546 
  emg_27_ret = ldv_undef_int();
  #line 1548 
  __VERIFIER_assume(data->arg0 == emg_alias_xprop_reg_addr_fops);
  #line 1550 
  if (data != (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)0) {
    #line 1551 
    emg_27_container = data->arg0;
    #line 1552 
    ldv_free((void *)data);
  }
  #line 1557 
  emg_27_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1558 
  emg_27_size_cnt = (unsigned long)ldv_undef_int();
  #line 1562 
  goto emg_main_27;
  #line 1566 
  return (void *)0;
  #line 1569 
  emg_call_27: 
               #line 1569 
  ;
  #line 1570 
  if (ldv_undef_int() != 0) {
    #line 1571 
    if (ldv_undef_int() != 0) {
      #line 1573 
      emg_27_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1573 
      emg_27_emg_param_1_0 = emg_27_emg_param_1_0;
      #line 1574 
      emg_27_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1574 
      emg_27_emg_param_3_1 = emg_27_emg_param_3_1;
      #line 1578 
      emg_wrapper_xprop_reg_addr_read(emg_27_resource_0,emg_27_emg_param_1_0,emg_27_size_cnt,emg_27_emg_param_3_1);
      #line 1582 
      ldv_free((void *)emg_27_emg_param_1_0);
      #line 1583 
      ldv_free((void *)emg_27_emg_param_3_1);
    }
    else {
      #line 1592 
      __VERIFIER_assume(emg_27_size_cnt <= 2147479552UL);
      #line 1593 
      emg_27_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1593 
      emg_27_emg_param_1_2 = emg_27_emg_param_1_2;
      #line 1594 
      emg_27_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1594 
      emg_27_emg_param_3_3 = emg_27_emg_param_3_3;
      #line 1598 
      emg_wrapper_xprop_reg_addr_write(emg_27_resource_0,emg_27_emg_param_1_2,emg_27_size_cnt,emg_27_emg_param_3_3);
      #line 1602 
      ldv_free((void *)emg_27_emg_param_1_2);
      #line 1603 
      ldv_free((void *)emg_27_emg_param_3_3);
    }
    #line 1607 
    if (emg_repeat_cnt_call_27 > 0) {
      #line 1608 
      emg_repeat_cnt_call_27 --;
      #line 1610 
      goto emg_call_27;
    }
    else 
         #line 1612 
         __VERIFIER_assume(0);
  }
  else {
    #line 1618 
    if (emg_27_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1619 
      (*(emg_27_container->release))(emg_27_resource_1,emg_27_resource_0);
    #line 1623 
    if (emg_repeat_cnt_main_27_0 > 0) {
      #line 1624 
      emg_repeat_cnt_main_27_0 --;
      #line 1626 
      goto emg_main_27;
    }
    else 
         #line 1628 
         __VERIFIER_assume(0);
  }
  #line 1634 
  return (void *)0;
  #line 1637 
  emg_main_27: 
               #line 1637 
  ;
  #line 1638 
  if (ldv_undef_int() != 0) {
    #line 1640 
    emg_27_ret = simple_open(emg_27_resource_1,emg_27_resource_0);
    #line 1645 
    emg_27_ret = ldv_filter_err_code(emg_27_ret);
    #line 1648 
    if (ldv_undef_int() != 0) {
      #line 1650 
      __VERIFIER_assume(emg_27_ret == 0);
      #line 1654 
      goto emg_call_27;
    }
    else {
      #line 1659 
      __VERIFIER_assume(emg_27_ret != 0);
      #line 1662 
      if (emg_repeat_cnt_main_27_1 > 0) {
        #line 1663 
        emg_repeat_cnt_main_27_1 --;
        #line 1665 
        goto emg_main_27;
      }
      else 
           #line 1667 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1674 
       ldv_free((void *)emg_27_resource_0);
  #line 1682 
  return (void *)0;
}

#line 1687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_xprop_reg_value_fops(void *arg0)
{
  #line 1690 
  struct file_operations *emg_28_container;
  #line 1691 
  char *emg_28_emg_param_1_0;
  #line 1692 
  char *emg_28_emg_param_1_2;
  #line 1693 
  long long *emg_28_emg_param_3_1;
  #line 1694 
  long long *emg_28_emg_param_3_3;
  #line 1695 
  struct file *emg_28_resource_0;
  #line 1696 
  struct inode *emg_28_resource_1;
  #line 1697 
  int emg_28_ret;
  #line 1698 
  unsigned long emg_28_size_cnt;
  #line 1699 
  int emg_repeat_cnt_call_28 = 1;
  #line 1700 
  int emg_repeat_cnt_main_28_1 = 1;
  #line 1701 
  int emg_repeat_cnt_main_28_0 = 1;
  #line 1703 
  struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *data = (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)arg0;
  #line 1707 
  emg_28_ret = ldv_undef_int();
  #line 1708 
  emg_28_container = emg_alias_xprop_reg_value_fops;
  #line 1709 
  emg_28_ret = ldv_undef_int();
  #line 1711 
  __VERIFIER_assume(data->arg0 == emg_alias_xprop_reg_value_fops);
  #line 1713 
  if (data != (struct emg_struct_character_driver_scenario_xgmac_reg_addr_fops_20 *)0) {
    #line 1714 
    emg_28_container = data->arg0;
    #line 1715 
    ldv_free((void *)data);
  }
  #line 1720 
  emg_28_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1721 
  emg_28_size_cnt = (unsigned long)ldv_undef_int();
  #line 1725 
  goto emg_main_28;
  #line 1729 
  return (void *)0;
  #line 1732 
  emg_call_28: 
               #line 1732 
  ;
  #line 1733 
  if (ldv_undef_int() != 0) {
    #line 1734 
    if (ldv_undef_int() != 0) {
      #line 1736 
      emg_28_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1736 
      emg_28_emg_param_1_0 = emg_28_emg_param_1_0;
      #line 1737 
      emg_28_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1737 
      emg_28_emg_param_3_1 = emg_28_emg_param_3_1;
      #line 1741 
      emg_wrapper_xprop_reg_value_read(emg_28_resource_0,emg_28_emg_param_1_0,emg_28_size_cnt,emg_28_emg_param_3_1);
      #line 1745 
      ldv_free((void *)emg_28_emg_param_1_0);
      #line 1746 
      ldv_free((void *)emg_28_emg_param_3_1);
    }
    else {
      #line 1755 
      __VERIFIER_assume(emg_28_size_cnt <= 2147479552UL);
      #line 1756 
      emg_28_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1756 
      emg_28_emg_param_1_2 = emg_28_emg_param_1_2;
      #line 1757 
      emg_28_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1757 
      emg_28_emg_param_3_3 = emg_28_emg_param_3_3;
      #line 1761 
      emg_wrapper_xprop_reg_value_write(emg_28_resource_0,emg_28_emg_param_1_2,emg_28_size_cnt,emg_28_emg_param_3_3);
      #line 1765 
      ldv_free((void *)emg_28_emg_param_1_2);
      #line 1766 
      ldv_free((void *)emg_28_emg_param_3_3);
    }
    #line 1770 
    if (emg_repeat_cnt_call_28 > 0) {
      #line 1771 
      emg_repeat_cnt_call_28 --;
      #line 1773 
      goto emg_call_28;
    }
    else 
         #line 1775 
         __VERIFIER_assume(0);
  }
  else {
    #line 1781 
    if (emg_28_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1782 
      (*(emg_28_container->release))(emg_28_resource_1,emg_28_resource_0);
    #line 1786 
    if (emg_repeat_cnt_main_28_0 > 0) {
      #line 1787 
      emg_repeat_cnt_main_28_0 --;
      #line 1789 
      goto emg_main_28;
    }
    else 
         #line 1791 
         __VERIFIER_assume(0);
  }
  #line 1797 
  return (void *)0;
  #line 1800 
  emg_main_28: 
               #line 1800 
  ;
  #line 1801 
  if (ldv_undef_int() != 0) {
    #line 1803 
    emg_28_ret = simple_open(emg_28_resource_1,emg_28_resource_0);
    #line 1808 
    emg_28_ret = ldv_filter_err_code(emg_28_ret);
    #line 1811 
    if (ldv_undef_int() != 0) {
      #line 1813 
      __VERIFIER_assume(emg_28_ret == 0);
      #line 1817 
      goto emg_call_28;
    }
    else {
      #line 1822 
      __VERIFIER_assume(emg_28_ret != 0);
      #line 1825 
      if (emg_repeat_cnt_main_28_1 > 0) {
        #line 1826 
        emg_repeat_cnt_main_28_1 --;
        #line 1828 
        goto emg_main_28;
      }
      else 
           #line 1830 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1837 
       ldv_free((void *)emg_28_resource_0);
  #line 1845 
  return (void *)0;
}

#line 1850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_xgbe_get_channels(void *arg0)
{
  #line 1853 
  struct net_device *emg_29_container;
  #line 1854 
  struct sk_buff *emg_29_emg_param_0_23;
  #line 1855 
  struct sk_buff *emg_29_emg_param_0_31;
  #line 1856 
  struct ethtool_channels *emg_29_emg_param_1_0;
  #line 1857 
  struct ethtool_coalesce *emg_29_emg_param_1_1;
  #line 1858 
  struct ethtool_ringparam *emg_29_emg_param_1_10;
  #line 1859 
  unsigned int *emg_29_emg_param_1_11;
  #line 1860 
  struct ethtool_rxnfc *emg_29_emg_param_1_14;
  #line 1861 
  int emg_29_emg_param_1_16;
  #line 1862 
  unsigned int emg_29_emg_param_1_17;
  #line 1863 
  struct ethtool_ts_info *emg_29_emg_param_1_19;
  #line 1864 
  struct ethtool_drvinfo *emg_29_emg_param_1_2;
  #line 1865 
  int emg_29_emg_param_1_20;
  #line 1866 
  struct ifreq *emg_29_emg_param_1_21;
  #line 1867 
  unsigned long long emg_29_emg_param_1_25;
  #line 1868 
  struct rtnl_link_stats64 *emg_29_emg_param_1_26;
  #line 1869 
  unsigned long long emg_29_emg_param_1_27;
  #line 1870 
  void *emg_29_emg_param_1_28;
  #line 1871 
  enum tc_setup_type *emg_29_emg_param_1_29;
  #line 1872 
  struct ethtool_stats *emg_29_emg_param_1_3;
  #line 1873 
  struct udp_tunnel_info *emg_29_emg_param_1_32;
  #line 1874 
  struct udp_tunnel_info *emg_29_emg_param_1_33;
  #line 1875 
  unsigned short emg_29_emg_param_1_34;
  #line 1876 
  unsigned short emg_29_emg_param_1_36;
  #line 1877 
  struct ethtool_channels *emg_29_emg_param_1_38;
  #line 1878 
  struct ethtool_coalesce *emg_29_emg_param_1_39;
  #line 1879 
  struct ethtool_link_ksettings *emg_29_emg_param_1_40;
  #line 1880 
  unsigned int emg_29_emg_param_1_41;
  #line 1881 
  struct ethtool_pauseparam *emg_29_emg_param_1_42;
  #line 1882 
  struct ethtool_ringparam *emg_29_emg_param_1_43;
  #line 1883 
  unsigned int *emg_29_emg_param_1_44;
  #line 1884 
  struct ethtool_link_ksettings *emg_29_emg_param_1_5;
  #line 1885 
  struct ethtool_eeprom *emg_29_emg_param_1_6;
  #line 1886 
  struct ethtool_modinfo *emg_29_emg_param_1_8;
  #line 1887 
  struct ethtool_pauseparam *emg_29_emg_param_1_9;
  #line 1888 
  unsigned char *emg_29_emg_param_2_12;
  #line 1889 
  unsigned int *emg_29_emg_param_2_15;
  #line 1890 
  unsigned char *emg_29_emg_param_2_18;
  #line 1891 
  int emg_29_emg_param_2_22;
  #line 1892 
  unsigned long long emg_29_emg_param_2_24;
  #line 1893 
  void *emg_29_emg_param_2_30;
  #line 1894 
  unsigned short emg_29_emg_param_2_35;
  #line 1895 
  unsigned short emg_29_emg_param_2_37;
  #line 1896 
  unsigned long long *emg_29_emg_param_2_4;
  #line 1897 
  unsigned char *emg_29_emg_param_2_45;
  #line 1898 
  unsigned char *emg_29_emg_param_2_7;
  #line 1899 
  unsigned char *emg_29_emg_param_3_13;
  #line 1900 
  unsigned char emg_29_emg_param_3_46;
  #line 1901 
  int emg_repeat_cnt_call_29 = 1;
  #line 1903 
  struct emg_struct_random_allocationless_scenario_xgbe_get_channels_29 *data = (struct emg_struct_random_allocationless_scenario_xgbe_get_channels_29 *)arg0;
  #line 1908 
  if (data != (struct emg_struct_random_allocationless_scenario_xgbe_get_channels_29 *)0) {
    #line 1909 
    emg_29_container = data->arg0;
    #line 1910 
    ldv_free((void *)data);
  }
  #line 1915 
  goto emg_call_29;
  #line 1919 
  return (void *)0;
  #line 1922 
  emg_call_29: 
               #line 1922 
  ;
  #line 1923 
  switch (ldv_undef_int()) {
    #line 1924 
    case 0: 
            #line 1924 
    ;
    #line 1926 
    emg_29_emg_param_1_44 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1926 
    emg_29_emg_param_1_44 = emg_29_emg_param_1_44;
    #line 1927 
    emg_29_emg_param_2_45 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1927 
    emg_29_emg_param_2_45 = emg_29_emg_param_2_45;
    #line 1931 
    emg_wrapper_xgbe_set_rxfh(emg_29_container,emg_29_emg_param_1_44,emg_29_emg_param_2_45,(unsigned char)((int)emg_29_emg_param_3_46));
    #line 1935 
    ldv_free((void *)emg_29_emg_param_1_44);
    #line 1936 
    ldv_free((void *)emg_29_emg_param_2_45);
    #line 1938 
    break;
    #line 1940 
    case 1: 
            #line 1940 
    ;
    #line 1942 
    emg_29_emg_param_1_43 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1942 
    emg_29_emg_param_1_43 = emg_29_emg_param_1_43;
    #line 1946 
    emg_wrapper_xgbe_set_ringparam(emg_29_container,emg_29_emg_param_1_43);
    #line 1950 
    ldv_free((void *)emg_29_emg_param_1_43);
    #line 1952 
    break;
    #line 1954 
    case 2: 
            #line 1954 
    ;
    #line 1956 
    emg_29_emg_param_1_42 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1956 
    emg_29_emg_param_1_42 = emg_29_emg_param_1_42;
    #line 1960 
    emg_wrapper_xgbe_set_pauseparam(emg_29_container,emg_29_emg_param_1_42);
    #line 1964 
    ldv_free((void *)emg_29_emg_param_1_42);
    #line 1966 
    break;
    #line 1968 
    case 3: 
            #line 1968 
    ;
    #line 1970 
    emg_wrapper_xgbe_set_msglevel(emg_29_container,emg_29_emg_param_1_41);
    #line 1972 
    break;
    #line 1974 
    case 4: 
            #line 1974 
    ;
    #line 1976 
    emg_29_emg_param_1_40 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1976 
    emg_29_emg_param_1_40 = emg_29_emg_param_1_40;
    #line 1980 
    emg_wrapper_xgbe_set_link_ksettings(emg_29_container,emg_29_emg_param_1_40);
    #line 1984 
    ldv_free((void *)emg_29_emg_param_1_40);
    #line 1986 
    break;
    #line 1988 
    case 5: 
            #line 1988 
    ;
    #line 1990 
    emg_29_emg_param_1_39 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1990 
    emg_29_emg_param_1_39 = emg_29_emg_param_1_39;
    #line 1994 
    emg_wrapper_xgbe_set_coalesce(emg_29_container,emg_29_emg_param_1_39);
    #line 1998 
    ldv_free((void *)emg_29_emg_param_1_39);
    #line 2000 
    break;
    #line 2002 
    case 6: 
            #line 2002 
    ;
    #line 2004 
    emg_29_emg_param_1_38 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 2004 
    emg_29_emg_param_1_38 = emg_29_emg_param_1_38;
    #line 2008 
    emg_wrapper_xgbe_set_channels(emg_29_container,emg_29_emg_param_1_38);
    #line 2012 
    ldv_free((void *)emg_29_emg_param_1_38);
    #line 2014 
    break;
    #line 2016 
    case 7: 
            #line 2016 
    ;
    #line 2018 
    emg_wrapper_xgbe_vlan_rx_kill_vid(emg_29_container,(unsigned short)((int)emg_29_emg_param_1_36),(unsigned short)((int)emg_29_emg_param_2_37));
    #line 2020 
    break;
    #line 2022 
    case 8: 
            #line 2022 
    ;
    #line 2024 
    emg_wrapper_xgbe_vlan_rx_add_vid(emg_29_container,(unsigned short)((int)emg_29_emg_param_1_34),(unsigned short)((int)emg_29_emg_param_2_35));
    #line 2026 
    break;
    #line 2028 
    case 9: 
            #line 2028 
    ;
    #line 2030 
    eth_validate_addr(emg_29_container);
    #line 2032 
    break;
    #line 2034 
    case 10: 
             #line 2034 
    ;
    #line 2036 
    emg_29_emg_param_1_33 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 2036 
    emg_29_emg_param_1_33 = emg_29_emg_param_1_33;
    #line 2040 
    emg_wrapper_xgbe_udp_tunnel_del(emg_29_container,emg_29_emg_param_1_33);
    #line 2044 
    ldv_free((void *)emg_29_emg_param_1_33);
    #line 2046 
    break;
    #line 2048 
    case 11: 
             #line 2048 
    ;
    #line 2050 
    emg_29_emg_param_1_32 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 2050 
    emg_29_emg_param_1_32 = emg_29_emg_param_1_32;
    #line 2054 
    emg_wrapper_xgbe_udp_tunnel_add(emg_29_container,emg_29_emg_param_1_32);
    #line 2058 
    ldv_free((void *)emg_29_emg_param_1_32);
    #line 2060 
    break;
    #line 2062 
    case 12: 
             #line 2062 
    ;
    #line 2064 
    emg_wrapper_xgbe_tx_timeout(emg_29_container);
    #line 2066 
    break;
    #line 2068 
    case 13: 
             #line 2068 
    ;
    #line 2070 
    emg_29_emg_param_0_31 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 2070 
    emg_29_emg_param_0_31 = emg_29_emg_param_0_31;
    #line 2074 
    emg_wrapper_xgbe_xmit(emg_29_emg_param_0_31,emg_29_container);
    #line 2078 
    ldv_free((void *)emg_29_emg_param_0_31);
    #line 2080 
    break;
    #line 2082 
    case 14: 
             #line 2082 
    ;
    #line 2084 
    emg_29_emg_param_1_29 = (enum tc_setup_type *)ldv_xmalloc_unknown_size(0UL);
    #line 2084 
    emg_29_emg_param_1_29 = emg_29_emg_param_1_29;
    #line 2085 
    emg_29_emg_param_2_30 = ldv_xmalloc_unknown_size(0UL);
    #line 2085 
    emg_29_emg_param_2_30 = emg_29_emg_param_2_30;
    #line 2089 
    emg_wrapper_xgbe_setup_tc(emg_29_container,*emg_29_emg_param_1_29,emg_29_emg_param_2_30);
    #line 2093 
    ldv_free((void *)emg_29_emg_param_1_29);
    #line 2094 
    ldv_free(emg_29_emg_param_2_30);
    #line 2096 
    break;
    #line 2098 
    case 15: 
             #line 2098 
    ;
    #line 2100 
    emg_wrapper_xgbe_set_rx_mode(emg_29_container);
    #line 2102 
    break;
    #line 2104 
    case 16: 
             #line 2104 
    ;
    #line 2106 
    emg_29_emg_param_1_28 = ldv_xmalloc_unknown_size(0UL);
    #line 2106 
    emg_29_emg_param_1_28 = emg_29_emg_param_1_28;
    #line 2110 
    emg_wrapper_xgbe_set_mac_address(emg_29_container,emg_29_emg_param_1_28);
    #line 2114 
    ldv_free(emg_29_emg_param_1_28);
    #line 2116 
    break;
    #line 2118 
    case 17: 
             #line 2118 
    ;
    #line 2120 
    emg_wrapper_xgbe_set_features(emg_29_container,emg_29_emg_param_1_27);
    #line 2122 
    break;
    #line 2124 
    case 18: 
             #line 2124 
    ;
    #line 2126 
    emg_wrapper_xgbe_poll_controller(emg_29_container);
    #line 2128 
    break;
    #line 2130 
    case 19: 
             #line 2130 
    ;
    #line 2132 
    emg_29_emg_param_1_26 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 2132 
    emg_29_emg_param_1_26 = emg_29_emg_param_1_26;
    #line 2136 
    emg_wrapper_xgbe_get_stats64(emg_29_container,emg_29_emg_param_1_26);
    #line 2140 
    ldv_free((void *)emg_29_emg_param_1_26);
    #line 2142 
    break;
    #line 2144 
    case 20: 
             #line 2144 
    ;
    #line 2146 
    emg_wrapper_xgbe_fix_features(emg_29_container,emg_29_emg_param_1_25);
    #line 2148 
    break;
    #line 2150 
    case 21: 
             #line 2150 
    ;
    #line 2152 
    emg_29_emg_param_0_23 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 2152 
    emg_29_emg_param_0_23 = emg_29_emg_param_0_23;
    #line 2156 
    emg_wrapper_xgbe_features_check(emg_29_emg_param_0_23,emg_29_container,emg_29_emg_param_2_24);
    #line 2160 
    ldv_free((void *)emg_29_emg_param_0_23);
    #line 2162 
    break;
    #line 2164 
    case 22: 
             #line 2164 
    ;
    #line 2166 
    emg_29_emg_param_1_21 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 2166 
    emg_29_emg_param_1_21 = emg_29_emg_param_1_21;
    #line 2170 
    emg_wrapper_xgbe_ioctl(emg_29_container,emg_29_emg_param_1_21,emg_29_emg_param_2_22);
    #line 2174 
    ldv_free((void *)emg_29_emg_param_1_21);
    #line 2176 
    break;
    #line 2178 
    case 23: 
             #line 2178 
    ;
    #line 2180 
    emg_wrapper_xgbe_change_mtu(emg_29_container,emg_29_emg_param_1_20);
    #line 2182 
    break;
    #line 2184 
    case 24: 
             #line 2184 
    ;
    #line 2186 
    emg_29_emg_param_1_19 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 2186 
    emg_29_emg_param_1_19 = emg_29_emg_param_1_19;
    #line 2190 
    emg_wrapper_xgbe_get_ts_info(emg_29_container,emg_29_emg_param_1_19);
    #line 2194 
    ldv_free((void *)emg_29_emg_param_1_19);
    #line 2196 
    break;
    #line 2198 
    case 25: 
             #line 2198 
    ;
    #line 2200 
    emg_29_emg_param_2_18 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 2200 
    emg_29_emg_param_2_18 = emg_29_emg_param_2_18;
    #line 2204 
    emg_wrapper_xgbe_get_strings(emg_29_container,emg_29_emg_param_1_17,emg_29_emg_param_2_18);
    #line 2208 
    ldv_free((void *)emg_29_emg_param_2_18);
    #line 2210 
    break;
    #line 2212 
    case 26: 
             #line 2212 
    ;
    #line 2214 
    emg_wrapper_xgbe_get_sset_count(emg_29_container,emg_29_emg_param_1_16);
    #line 2216 
    break;
    #line 2218 
    case 27: 
             #line 2218 
    ;
    #line 2220 
    emg_29_emg_param_1_14 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 2220 
    emg_29_emg_param_1_14 = emg_29_emg_param_1_14;
    #line 2221 
    emg_29_emg_param_2_15 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 2221 
    emg_29_emg_param_2_15 = emg_29_emg_param_2_15;
    #line 2225 
    emg_wrapper_xgbe_get_rxnfc(emg_29_container,emg_29_emg_param_1_14,emg_29_emg_param_2_15);
    #line 2229 
    ldv_free((void *)emg_29_emg_param_1_14);
    #line 2230 
    ldv_free((void *)emg_29_emg_param_2_15);
    #line 2232 
    break;
    #line 2234 
    case 28: 
             #line 2234 
    ;
    #line 2236 
    emg_wrapper_xgbe_get_rxfh_key_size(emg_29_container);
    #line 2238 
    break;
    #line 2240 
    case 29: 
             #line 2240 
    ;
    #line 2242 
    emg_wrapper_xgbe_get_rxfh_indir_size(emg_29_container);
    #line 2244 
    break;
    #line 2246 
    case 30: 
             #line 2246 
    ;
    #line 2248 
    emg_29_emg_param_1_11 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 2248 
    emg_29_emg_param_1_11 = emg_29_emg_param_1_11;
    #line 2249 
    emg_29_emg_param_2_12 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 2249 
    emg_29_emg_param_2_12 = emg_29_emg_param_2_12;
    #line 2250 
    emg_29_emg_param_3_13 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 2250 
    emg_29_emg_param_3_13 = emg_29_emg_param_3_13;
    #line 2254 
    emg_wrapper_xgbe_get_rxfh(emg_29_container,emg_29_emg_param_1_11,emg_29_emg_param_2_12,emg_29_emg_param_3_13);
    #line 2258 
    ldv_free((void *)emg_29_emg_param_1_11);
    #line 2259 
    ldv_free((void *)emg_29_emg_param_2_12);
    #line 2260 
    ldv_free((void *)emg_29_emg_param_3_13);
    #line 2262 
    break;
    #line 2264 
    case 31: 
             #line 2264 
    ;
    #line 2266 
    emg_29_emg_param_1_10 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 2266 
    emg_29_emg_param_1_10 = emg_29_emg_param_1_10;
    #line 2270 
    emg_wrapper_xgbe_get_ringparam(emg_29_container,emg_29_emg_param_1_10);
    #line 2274 
    ldv_free((void *)emg_29_emg_param_1_10);
    #line 2276 
    break;
    #line 2278 
    case 32: 
             #line 2278 
    ;
    #line 2280 
    emg_29_emg_param_1_9 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 2280 
    emg_29_emg_param_1_9 = emg_29_emg_param_1_9;
    #line 2284 
    emg_wrapper_xgbe_get_pauseparam(emg_29_container,emg_29_emg_param_1_9);
    #line 2288 
    ldv_free((void *)emg_29_emg_param_1_9);
    #line 2290 
    break;
    #line 2292 
    case 33: 
             #line 2292 
    ;
    #line 2294 
    emg_wrapper_xgbe_get_msglevel(emg_29_container);
    #line 2296 
    break;
    #line 2298 
    case 34: 
             #line 2298 
    ;
    #line 2300 
    emg_29_emg_param_1_8 = (struct ethtool_modinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 2300 
    emg_29_emg_param_1_8 = emg_29_emg_param_1_8;
    #line 2304 
    emg_wrapper_xgbe_get_module_info(emg_29_container,emg_29_emg_param_1_8);
    #line 2308 
    ldv_free((void *)emg_29_emg_param_1_8);
    #line 2310 
    break;
    #line 2312 
    case 35: 
             #line 2312 
    ;
    #line 2314 
    emg_29_emg_param_1_6 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 2314 
    emg_29_emg_param_1_6 = emg_29_emg_param_1_6;
    #line 2315 
    emg_29_emg_param_2_7 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 2315 
    emg_29_emg_param_2_7 = emg_29_emg_param_2_7;
    #line 2319 
    emg_wrapper_xgbe_get_module_eeprom(emg_29_container,emg_29_emg_param_1_6,emg_29_emg_param_2_7);
    #line 2323 
    ldv_free((void *)emg_29_emg_param_1_6);
    #line 2324 
    ldv_free((void *)emg_29_emg_param_2_7);
    #line 2326 
    break;
    #line 2328 
    case 36: 
             #line 2328 
    ;
    #line 2330 
    emg_29_emg_param_1_5 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 2330 
    emg_29_emg_param_1_5 = emg_29_emg_param_1_5;
    #line 2334 
    emg_wrapper_xgbe_get_link_ksettings(emg_29_container,emg_29_emg_param_1_5);
    #line 2338 
    ldv_free((void *)emg_29_emg_param_1_5);
    #line 2340 
    break;
    #line 2342 
    case 37: 
             #line 2342 
    ;
    #line 2344 
    ethtool_op_get_link(emg_29_container);
    #line 2346 
    break;
    #line 2348 
    case 38: 
             #line 2348 
    ;
    #line 2350 
    emg_29_emg_param_1_3 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 2350 
    emg_29_emg_param_1_3 = emg_29_emg_param_1_3;
    #line 2351 
    emg_29_emg_param_2_4 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 2351 
    emg_29_emg_param_2_4 = emg_29_emg_param_2_4;
    #line 2355 
    emg_wrapper_xgbe_get_ethtool_stats(emg_29_container,emg_29_emg_param_1_3,emg_29_emg_param_2_4);
    #line 2359 
    ldv_free((void *)emg_29_emg_param_1_3);
    #line 2360 
    ldv_free((void *)emg_29_emg_param_2_4);
    #line 2362 
    break;
    #line 2364 
    case 39: 
             #line 2364 
    ;
    #line 2366 
    emg_29_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 2366 
    emg_29_emg_param_1_2 = emg_29_emg_param_1_2;
    #line 2370 
    emg_wrapper_xgbe_get_drvinfo(emg_29_container,emg_29_emg_param_1_2);
    #line 2374 
    ldv_free((void *)emg_29_emg_param_1_2);
    #line 2376 
    break;
    #line 2378 
    case 40: 
             #line 2378 
    ;
    #line 2380 
    emg_29_emg_param_1_1 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 2380 
    emg_29_emg_param_1_1 = emg_29_emg_param_1_1;
    #line 2384 
    emg_wrapper_xgbe_get_coalesce(emg_29_container,emg_29_emg_param_1_1);
    #line 2388 
    ldv_free((void *)emg_29_emg_param_1_1);
    #line 2390 
    break;
    #line 2392 
    case 41: 
             #line 2392 
    ;
    #line 2394 
    emg_29_emg_param_1_0 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 2394 
    emg_29_emg_param_1_0 = emg_29_emg_param_1_0;
    #line 2398 
    emg_wrapper_xgbe_get_channels(emg_29_container,emg_29_emg_param_1_0);
    #line 2402 
    ldv_free((void *)emg_29_emg_param_1_0);
    #line 2405 
    if (emg_repeat_cnt_call_29 > 0) {
      #line 2406 
      emg_repeat_cnt_call_29 --;
      #line 2408 
      goto emg_call_29;
    }
    else 
         #line 2410 
         __VERIFIER_assume(0);
    #line 2414 
    break;
    #line 2416 
    case 42: 
             #line 2416 
    ;
    #line 2420 
    break;
    #line 2422 
    default: 
             #line 2422 
    ;
    #line 2422 
    __VERIFIER_assume(0);
  }
  #line 2425 
  return (void *)0;
}

#line 2430  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_xgbe_driver(void *arg0)
{
  #line 2433 
  int emg_30_choice;
  #line 2434 
  struct pci_driver *emg_30_container;
  #line 2435 
  struct pci_device_id *emg_30_device_id;
  #line 2436 
  struct pci_dev *emg_30_resource_0;
  #line 2437 
  struct pm_message emg_30_resource_1;
  #line 2438 
  int emg_30_ret;
  #line 2439 
  int emg_repeat_cnt_call_30_1 = 1;
  #line 2440 
  int emg_repeat_cnt_call_30_0 = 1;
  #line 2441 
  int emg_repeat_cnt_main_30_0 = 1;
  #line 2442 
  int emg_repeat_cnt_main_30_1 = 1;
  #line 2444 
  struct emg_struct_pci_scenario_xgbe_driver_30 *data = (struct emg_struct_pci_scenario_xgbe_driver_30 *)arg0;
  #line 2448 
  emg_30_choice = 0;
  #line 2449 
  emg_30_ret = ldv_undef_int();
  #line 2450 
  emg_30_choice = 0;
  #line 2451 
  emg_30_container = emg_alias_xgbe_driver_0;
  #line 2452 
  emg_30_ret = ldv_undef_int();
  #line 2454 
  __VERIFIER_assume(data->arg0 == emg_alias_xgbe_driver_0);
  #line 2456 
  if (data != (struct emg_struct_pci_scenario_xgbe_driver_30 *)0) {
    #line 2457 
    emg_30_container = data->arg0;
    #line 2458 
    ldv_free((void *)data);
  }
  #line 2463 
  emg_30_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 2464 
  emg_30_choice = __ldv_undef_int_range(0,2);
  #line 2465 
  emg_30_device_id = emg_30_container->id_table + (unsigned long)emg_30_choice;
  #line 2469 
  goto emg_main_30;
  #line 2473 
  return (void *)0;
  #line 2476 
  emg_call_30: 
               #line 2476 
  ;
  #line 2477 
  switch (ldv_undef_int()) {
    #line 2478 
    case 0: 
            #line 2478 
    ;
    #line 2483 
    if (emg_repeat_cnt_call_30_1 > 0) {
      #line 2484 
      emg_repeat_cnt_call_30_1 --;
      #line 2486 
      goto emg_call_30;
    }
    else 
         #line 2488 
         __VERIFIER_assume(0);
    #line 2492 
    break;
    #line 2494 
    case 1: 
            #line 2494 
    ;
    #line 2496 
    emg_30_ret = emg_wrapper_xgbe_pci_suspend(emg_30_resource_0,emg_30_resource_1);
    #line 2501 
    emg_30_ret = ldv_filter_err_code(emg_30_ret);
    #line 2505 
    emg_wrapper_xgbe_pci_resume(emg_30_resource_0);
    #line 2508 
    if (emg_repeat_cnt_call_30_0 > 0) {
      #line 2509 
      emg_repeat_cnt_call_30_0 --;
      #line 2511 
      goto emg_call_30;
    }
    else 
         #line 2513 
         __VERIFIER_assume(0);
    #line 2517 
    break;
    #line 2519 
    case 2: 
            #line 2519 
    ;
    #line 2521 
    if (emg_30_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 2522 
      (*(emg_30_container->shutdown))(emg_30_resource_0);
    #line 2527 
    emg_wrapper_xgbe_pci_remove(emg_30_resource_0);
    #line 2530 
    if (emg_repeat_cnt_main_30_1 > 0) {
      #line 2531 
      emg_repeat_cnt_main_30_1 --;
      #line 2533 
      goto emg_main_30;
    }
    else 
         #line 2535 
         __VERIFIER_assume(0);
    #line 2539 
    break;
    #line 2541 
    default: 
             #line 2541 
    ;
    #line 2541 
    __VERIFIER_assume(0);
  }
  #line 2544 
  return (void *)0;
  #line 2547 
  emg_main_30: 
               #line 2547 
  ;
  #line 2548 
  if (ldv_undef_int() != 0) {
    #line 2551 
    ldv_pre_probe();
    #line 2555 
    emg_30_ret = emg_wrapper_xgbe_pci_probe(emg_30_resource_0,emg_30_device_id);
    #line 2560 
    emg_30_ret = ldv_post_probe(emg_30_ret);
    #line 2563 
    if (ldv_undef_int() != 0) {
      #line 2565 
      __VERIFIER_assume(emg_30_ret == 0);
      #line 2569 
      goto emg_call_30;
    }
    else 
         #line 2574 
         __VERIFIER_assume(emg_30_ret != 0);
    #line 2578 
    if (emg_repeat_cnt_main_30_0 > 0) {
      #line 2579 
      emg_repeat_cnt_main_30_0 --;
      #line 2581 
      goto emg_main_30;
    }
    else 
         #line 2583 
         __VERIFIER_assume(0);
  }
  else 
       #line 2589 
       ldv_free((void *)emg_30_resource_0);
  #line 2597 
  return (void *)0;
}

#line 2602  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_platform_platform_instance_xgbe_driver(void *arg0)
{
  #line 2605 
  struct platform_driver *emg_31_container;
  #line 2606 
  struct pm_message *emg_31_emg_param_1_0;
  #line 2607 
  int emg_31_probed;
  #line 2608 
  struct platform_device *emg_31_resource;
  #line 2609 
  int emg_repeat_cnt_main_31_1 = 1;
  #line 2610 
  int emg_repeat_cnt_main_31_0 = 1;
  #line 2611 
  int emg_repeat_cnt_call_31 = 1;
  #line 2613 
  struct emg_struct_platform_instance_xgbe_driver_31 *data = (struct emg_struct_platform_instance_xgbe_driver_31 *)arg0;
  #line 2617 
  emg_31_probed = 1;
  #line 2618 
  emg_31_container = emg_alias_xgbe_driver_1;
  #line 2619 
  emg_31_probed = 1;
  #line 2621 
  __VERIFIER_assume(data->arg0 == emg_alias_xgbe_driver_1);
  #line 2623 
  if (data != (struct emg_struct_platform_instance_xgbe_driver_31 *)0) {
    #line 2624 
    emg_31_container = data->arg0;
    #line 2625 
    ldv_free((void *)data);
  }
  #line 2630 
  emg_31_resource = (struct platform_device *)ldv_xmalloc(1632UL);
  #line 2631 
  emg_31_resource->id_entry = emg_31_container->id_table;
  #line 2632 
  emg_31_resource->dev.platform_data = ldv_xmalloc_unknown_size(0UL);
  #line 2636 
  goto emg_main_31;
  #line 2640 
  return (void *)0;
  #line 2643 
  emg_call_31: 
               #line 2643 
  ;
  #line 2644 
  if (ldv_undef_int() != 0) {
    #line 2645 
    switch (ldv_undef_int()) {
      #line 2646 
      case 0: 
              #line 2646 
      ;
      #line 2648 
      emg_31_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
      #line 2648 
      emg_31_emg_param_1_0 = emg_31_emg_param_1_0;
      #line 2652 
      if (emg_31_container->suspend != (int (*)(struct platform_device *, pm_message_t ))0) 
        #line 2653 
        (*(emg_31_container->suspend))(emg_31_resource,*emg_31_emg_param_1_0);
      #line 2658 
      ldv_free((void *)emg_31_emg_param_1_0);
      #line 2662 
      if (emg_31_container->resume != (int (*)(struct platform_device *))0) 
        #line 2663 
        (*(emg_31_container->resume))(emg_31_resource);
      #line 2666 
      break;
      #line 2668 
      case 1: 
              #line 2668 
      ;
      #line 2670 
      emg_dispatch_pm_register_31();
      #line 2674 
      emg_dispatch_pm_deregister_31();
      #line 2676 
      break;
      #line 2678 
      case 2: 
              #line 2678 
      ;
      #line 2681 
      break;
      #line 2683 
      default: 
               #line 2683 
      ;
      #line 2683 
      __VERIFIER_assume(0);
    }
    #line 2686 
    if (emg_repeat_cnt_call_31 > 0) {
      #line 2687 
      emg_repeat_cnt_call_31 --;
      #line 2689 
      goto emg_call_31;
    }
    else 
         #line 2691 
         __VERIFIER_assume(0);
  }
  else {
    #line 2697 
    if (emg_31_container->shutdown != (void (*)(struct platform_device *))0) 
      #line 2698 
      (*(emg_31_container->shutdown))(emg_31_resource);
    #line 2703 
    emg_wrapper_xgbe_platform_remove(emg_31_resource);
    #line 2707 
    emg_31_probed = 1;
    #line 2710 
    if (emg_repeat_cnt_main_31_0 > 0) {
      #line 2711 
      emg_repeat_cnt_main_31_0 --;
      #line 2713 
      goto emg_main_31;
    }
    else 
         #line 2715 
         __VERIFIER_assume(0);
  }
  #line 2721 
  return (void *)0;
  #line 2724 
  emg_main_31: 
               #line 2724 
  ;
  #line 2725 
  if (ldv_undef_int() != 0) {
    #line 2728 
    ldv_pre_probe();
    #line 2732 
    emg_31_probed = emg_wrapper_xgbe_platform_probe(emg_31_resource);
    #line 2737 
    emg_31_probed = ldv_post_probe(emg_31_probed);
    #line 2740 
    if (ldv_undef_int() != 0) {
      #line 2742 
      __VERIFIER_assume(emg_31_probed == 0);
      #line 2746 
      goto emg_call_31;
    }
    else {
      #line 2751 
      __VERIFIER_assume(emg_31_probed != 0);
      #line 2754 
      if (emg_repeat_cnt_main_31_1 > 0) {
        #line 2755 
        emg_repeat_cnt_main_31_1 --;
        #line 2757 
        goto emg_main_31;
      }
      else 
           #line 2759 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2766 
       ldv_free((void *)emg_31_resource);
  #line 2774 
  return (void *)0;
}

#line 2779  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_xgbe_platform_pm_ops(void *arg0)
{
  #line 2782 
  struct device *emg_32_device;
  #line 2783 
  struct dev_pm_ops *emg_32_pm_ops;
  #line 2784 
  int emg_32_ret;
  #line 2785 
  int emg_repeat_cnt_restnoirq_32 = 1;
  #line 2786 
  int emg_repeat_cnt_plate_32 = 1;
  #line 2787 
  int emg_repeat_cnt_run_resume_32 = 1;
  #line 2788 
  int emg_repeat_cnt_rest_32 = 1;
  #line 2789 
  int emg_repeat_cnt_tnoirq_32 = 1;
  #line 2790 
  int emg_repeat_cnt_reste_32 = 1;
  #line 2791 
  int emg_repeat_cnt_res_32 = 1;
  #line 2792 
  int emg_repeat_cnt_th_32 = 1;
  #line 2793 
  int emg_repeat_cnt_fnoirq_32 = 1;
  #line 2794 
  int emg_repeat_cnt_resnoirq_32 = 1;
  #line 2795 
  int emg_repeat_cnt_fr_32 = 1;
  #line 2796 
  int emg_repeat_cnt_sus_32 = 1;
  #line 2797 
  int emg_repeat_cnt_pno_irq_32 = 1;
  #line 2798 
  int emg_repeat_cnt_slate_32 = 1;
  #line 2799 
  int emg_repeat_cnt_reslate_32 = 1;
  #line 2800 
  int emg_repeat_cnt_poff_32 = 1;
  #line 2801 
  int emg_repeat_cnt_thlate_32 = 1;
  #line 2802 
  int emg_repeat_cnt_no_irq_32 = 1;
  #line 2803 
  int emg_repeat_cnt_flate_32 = 1;
  #line 2806 
  emg_32_ret = ldv_undef_int();
  #line 2807 
  emg_32_pm_ops = emg_alias_xgbe_platform_pm_ops;
  #line 2808 
  emg_32_ret = ldv_undef_int();
  #line 2810 
  ldv_free(arg0);
  #line 2814 
  goto emg_do_32;
  #line 2818 
  return (void *)0;
  #line 2821 
  emg_compl_32: 
                #line 2821 
  ;
  #line 2823 
  if (emg_32_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 2824 
                                                               (*(emg_32_pm_ops->complete))(emg_32_device);
  #line 2832 
  return (void *)0;
  #line 2835 
  emg_do_32: 
             #line 2835 
  ;
  #line 2836 
  switch (ldv_undef_int()) {
    #line 2837 
    case 0: 
            #line 2837 
    ;
    #line 2839 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 2843 
    goto emg_runt_32;
    #line 2848 
    case 1: 
            #line 2848 
    ;
    #line 2850 
    goto emg_normal_32;
    #line 2855 
    case 2: 
            #line 2855 
    ;
    #line 2859 
    break;
    #line 2861 
    default: 
             #line 2861 
    ;
    #line 2861 
    __VERIFIER_assume(0);
  }
  #line 2864 
  return (void *)0;
  #line 2867 
  emg_flate_32: 
                #line 2867 
  ;
  #line 2869 
  if (emg_32_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 2870 
                                                                 emg_32_ret = (*(emg_32_pm_ops->freeze_late))(emg_32_device); else 
                                                                    #line 2872 
                                                                    emg_32_ret = ldv_undef_int();
  #line 2878 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 2881 
  if (ldv_undef_int() != 0) {
    #line 2883 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 2887 
    goto emg_thlate_32;
  }
  else 
       #line 2892 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 2896 
  if (emg_repeat_cnt_flate_32 > 0) {
    #line 2897 
    emg_repeat_cnt_flate_32 --;
    #line 2899 
    goto emg_flate_32;
  }
  else 
       #line 2901 
       __VERIFIER_assume(0);
  #line 2906 
  return (void *)0;
  #line 2909 
  emg_fnoirq_32: 
                 #line 2909 
  ;
  #line 2911 
  if (emg_32_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 2912 
                                                                  emg_32_ret = (*(emg_32_pm_ops->freeze_noirq))(emg_32_device); else 
                                                                    #line 2914 
                                                                    emg_32_ret = ldv_undef_int();
  #line 2920 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 2923 
  if (ldv_undef_int() != 0) {
    #line 2925 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 2929 
    goto emg_tnoirq_32;
  }
  else 
       #line 2934 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 2938 
  if (emg_repeat_cnt_fnoirq_32 > 0) {
    #line 2939 
    emg_repeat_cnt_fnoirq_32 --;
    #line 2941 
    goto emg_fnoirq_32;
  }
  else 
       #line 2943 
       __VERIFIER_assume(0);
  #line 2948 
  return (void *)0;
  #line 2951 
  emg_fr_32: 
             #line 2951 
  ;
  #line 2953 
  emg_32_ret = emg_wrapper_xgbe_platform_suspend(emg_32_device);
  #line 2958 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 2961 
  if (ldv_undef_int() != 0) {
    #line 2963 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 2966 
    if (ldv_undef_int() != 0) 
                              #line 2968 
                              goto emg_fnoirq_32; else 
                                                       #line 2973 
                                                       goto emg_flate_32;
  }
  else {
    #line 2979 
    __VERIFIER_assume(emg_32_ret != 0);
    #line 2982 
    if (emg_repeat_cnt_fr_32 > 0) {
      #line 2983 
      emg_repeat_cnt_fr_32 --;
      #line 2985 
      goto emg_fr_32;
    }
    else 
         #line 2987 
         __VERIFIER_assume(0);
  }
  #line 2993 
  return (void *)0;
  #line 2996 
  emg_no_irq_32: 
                 #line 2996 
  ;
  #line 2998 
  if (emg_32_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 2999 
                                                                   emg_32_ret = (*(emg_32_pm_ops->suspend_noirq))(emg_32_device); else 
                                                                    #line 3001 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3007 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3010 
  if (ldv_undef_int() != 0) {
    #line 3012 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3016 
    goto emg_resnoirq_32;
  }
  else 
       #line 3021 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3025 
  if (emg_repeat_cnt_no_irq_32 > 0) {
    #line 3026 
    emg_repeat_cnt_no_irq_32 --;
    #line 3028 
    goto emg_no_irq_32;
  }
  else 
       #line 3030 
       __VERIFIER_assume(0);
  #line 3035 
  return (void *)0;
  #line 3038 
  emg_normal_32: 
                 #line 3038 
  ;
  #line 3040 
  if (emg_32_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 3041 
                                                             emg_32_ret = (*(emg_32_pm_ops->prepare))(emg_32_device); else 
                                                                    #line 3043 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3049 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3052 
  if (ldv_undef_int() != 0) {
    #line 3054 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3057 
    switch (ldv_undef_int()) {
      #line 3058 
      case 0: 
              #line 3058 
      ;
      #line 3060 
      goto emg_sus_32;
      #line 3065 
      case 1: 
              #line 3065 
      ;
      #line 3067 
      goto emg_fr_32;
      #line 3072 
      case 2: 
              #line 3072 
      ;
      #line 3074 
      goto emg_poff_32;
      #line 3079 
      default: 
               #line 3079 
      ;
      #line 3079 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 3083 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3091 
  return (void *)0;
  #line 3094 
  emg_plate_32: 
                #line 3094 
  ;
  #line 3096 
  if (emg_32_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 3097 
                                                                   emg_32_ret = (*(emg_32_pm_ops->poweroff_late))(emg_32_device); else 
                                                                    #line 3099 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3105 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3108 
  if (ldv_undef_int() != 0) {
    #line 3110 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3114 
    goto emg_reste_32;
  }
  else 
       #line 3119 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3123 
  if (emg_repeat_cnt_plate_32 > 0) {
    #line 3124 
    emg_repeat_cnt_plate_32 --;
    #line 3126 
    goto emg_plate_32;
  }
  else 
       #line 3128 
       __VERIFIER_assume(0);
  #line 3133 
  return (void *)0;
  #line 3136 
  emg_pno_irq_32: 
                  #line 3136 
  ;
  #line 3138 
  if (emg_32_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 3139 
                                                                    emg_32_ret = (*(emg_32_pm_ops->poweroff_noirq))(emg_32_device); else 
                                                                    #line 3141 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3147 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3150 
  if (ldv_undef_int() != 0) {
    #line 3152 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3156 
    goto emg_restnoirq_32;
  }
  else 
       #line 3161 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3165 
  if (emg_repeat_cnt_pno_irq_32 > 0) {
    #line 3166 
    emg_repeat_cnt_pno_irq_32 --;
    #line 3168 
    goto emg_pno_irq_32;
  }
  else 
       #line 3170 
       __VERIFIER_assume(0);
  #line 3175 
  return (void *)0;
  #line 3178 
  emg_poff_32: 
               #line 3178 
  ;
  #line 3180 
  emg_32_ret = emg_wrapper_xgbe_platform_suspend(emg_32_device);
  #line 3185 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3188 
  if (ldv_undef_int() != 0) {
    #line 3190 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3193 
    if (ldv_undef_int() != 0) 
                              #line 3195 
                              goto emg_pno_irq_32; else 
                                                        #line 3200 
                                                        goto emg_plate_32;
  }
  else {
    #line 3206 
    __VERIFIER_assume(emg_32_ret != 0);
    #line 3209 
    if (emg_repeat_cnt_poff_32 > 0) {
      #line 3210 
      emg_repeat_cnt_poff_32 --;
      #line 3212 
      goto emg_poff_32;
    }
    else 
         #line 3214 
         __VERIFIER_assume(0);
  }
  #line 3220 
  return (void *)0;
  #line 3223 
  emg_res_32: 
              #line 3223 
  ;
  #line 3225 
  emg_32_ret = emg_wrapper_xgbe_platform_resume(emg_32_device);
  #line 3230 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3233 
  if (ldv_undef_int() != 0) {
    #line 3235 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3239 
    goto emg_compl_32;
  }
  else {
    #line 3244 
    __VERIFIER_assume(emg_32_ret != 0);
    #line 3247 
    if (emg_repeat_cnt_res_32 > 0) {
      #line 3248 
      emg_repeat_cnt_res_32 --;
      #line 3250 
      goto emg_res_32;
    }
    else 
         #line 3252 
         __VERIFIER_assume(0);
  }
  #line 3258 
  return (void *)0;
  #line 3261 
  emg_reslate_32: 
                  #line 3261 
  ;
  #line 3263 
  if (emg_32_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 3264 
                                                                  emg_32_ret = (*(emg_32_pm_ops->resume_early))(emg_32_device); else 
                                                                    #line 3266 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3272 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3275 
  if (ldv_undef_int() != 0) {
    #line 3277 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3281 
    goto emg_res_32;
  }
  else 
       #line 3286 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3290 
  if (emg_repeat_cnt_reslate_32 > 0) {
    #line 3291 
    emg_repeat_cnt_reslate_32 --;
    #line 3293 
    goto emg_reslate_32;
  }
  else 
       #line 3295 
       __VERIFIER_assume(0);
  #line 3300 
  return (void *)0;
  #line 3303 
  emg_resnoirq_32: 
                   #line 3303 
  ;
  #line 3305 
  if (emg_32_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 3306 
                                                                  emg_32_ret = (*(emg_32_pm_ops->resume_noirq))(emg_32_device); else 
                                                                    #line 3308 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3314 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3317 
  if (ldv_undef_int() != 0) {
    #line 3319 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3323 
    goto emg_res_32;
  }
  else 
       #line 3328 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3332 
  if (emg_repeat_cnt_resnoirq_32 > 0) {
    #line 3333 
    emg_repeat_cnt_resnoirq_32 --;
    #line 3335 
    goto emg_resnoirq_32;
  }
  else 
       #line 3337 
       __VERIFIER_assume(0);
  #line 3342 
  return (void *)0;
  #line 3345 
  emg_rest_32: 
               #line 3345 
  ;
  #line 3347 
  emg_32_ret = emg_wrapper_xgbe_platform_resume(emg_32_device);
  #line 3352 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3355 
  if (ldv_undef_int() != 0) {
    #line 3357 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3361 
    goto emg_compl_32;
  }
  else {
    #line 3366 
    __VERIFIER_assume(emg_32_ret != 0);
    #line 3369 
    if (emg_repeat_cnt_rest_32 > 0) {
      #line 3370 
      emg_repeat_cnt_rest_32 --;
      #line 3372 
      goto emg_rest_32;
    }
    else 
         #line 3374 
         __VERIFIER_assume(0);
  }
  #line 3380 
  return (void *)0;
  #line 3383 
  emg_reste_32: 
                #line 3383 
  ;
  #line 3385 
  if (emg_32_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 3386 
                                                                   emg_32_ret = (*(emg_32_pm_ops->restore_early))(emg_32_device); else 
                                                                    #line 3388 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3394 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3397 
  if (ldv_undef_int() != 0) {
    #line 3399 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3403 
    goto emg_rest_32;
  }
  else 
       #line 3408 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3412 
  if (emg_repeat_cnt_reste_32 > 0) {
    #line 3413 
    emg_repeat_cnt_reste_32 --;
    #line 3415 
    goto emg_reste_32;
  }
  else 
       #line 3417 
       __VERIFIER_assume(0);
  #line 3422 
  return (void *)0;
  #line 3425 
  emg_restnoirq_32: 
                    #line 3425 
  ;
  #line 3427 
  if (emg_32_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 3428 
                                                                   emg_32_ret = (*(emg_32_pm_ops->restore_noirq))(emg_32_device); else 
                                                                    #line 3430 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3436 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3439 
  if (ldv_undef_int() != 0) {
    #line 3441 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3445 
    goto emg_rest_32;
  }
  else 
       #line 3450 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3454 
  if (emg_repeat_cnt_restnoirq_32 > 0) {
    #line 3455 
    emg_repeat_cnt_restnoirq_32 --;
    #line 3457 
    goto emg_restnoirq_32;
  }
  else 
       #line 3459 
       __VERIFIER_assume(0);
  #line 3464 
  return (void *)0;
  #line 3467 
  emg_run_resume_32: 
                     #line 3467 
  ;
  #line 3469 
  if (emg_32_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 3470 
                                                                    emg_32_ret = (*(emg_32_pm_ops->runtime_resume))(emg_32_device); else 
                                                                    #line 3472 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3478 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3479 
  if (emg_32_ret != 0) 
                       #line 3480 
                       emg_runtime_lowpower = 0;
  #line 3483 
  if (ldv_undef_int() != 0) 
                            #line 3485 
                            __VERIFIER_assume(emg_32_ret == 0);
  else {
    #line 3489 
    __VERIFIER_assume(emg_32_ret != 0);
    #line 3492 
    if (emg_repeat_cnt_run_resume_32 > 0) {
      #line 3493 
      emg_repeat_cnt_run_resume_32 --;
      #line 3495 
      goto emg_run_resume_32;
    }
    else 
         #line 3497 
         __VERIFIER_assume(0);
  }
  #line 3507 
  return (void *)0;
  #line 3510 
  emg_runt_32: 
               #line 3510 
  ;
  #line 3511 
  if (ldv_undef_int() != 0) {
    #line 3513 
    if (emg_32_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 3514 
                                                                    emg_32_ret = (*(emg_32_pm_ops->runtime_idle))(emg_32_device); else 
                                                                    #line 3516 
                                                                    emg_32_ret = ldv_undef_int();
    #line 3522 
    emg_32_ret = ldv_post_probe(emg_32_ret);
  }
  else {
    #line 3526 
    if (emg_32_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 3527 
      emg_32_ret = (*(emg_32_pm_ops->runtime_suspend))(emg_32_device); else 
                                                                    #line 3529 
                                                                    emg_32_ret = ldv_undef_int();
    #line 3535 
    emg_32_ret = ldv_post_probe(emg_32_ret);
    #line 3536 
    if (emg_32_ret != 0) 
                         #line 3537 
                         emg_runtime_lowpower = 1;
    #line 3540 
    if (ldv_undef_int() != 0) {
      #line 3542 
      __VERIFIER_assume(emg_32_ret == 0);
      #line 3546 
      goto emg_run_resume_32;
    }
    else 
         #line 3551 
         __VERIFIER_assume(emg_32_ret != 0);
  }
  #line 3560 
  return (void *)0;
  #line 3563 
  emg_slate_32: 
                #line 3563 
  ;
  #line 3565 
  if (emg_32_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 3566 
                                                                  emg_32_ret = (*(emg_32_pm_ops->suspend_late))(emg_32_device); else 
                                                                    #line 3568 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3574 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3577 
  if (ldv_undef_int() != 0) {
    #line 3579 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3583 
    goto emg_reslate_32;
  }
  else 
       #line 3588 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3592 
  if (emg_repeat_cnt_slate_32 > 0) {
    #line 3593 
    emg_repeat_cnt_slate_32 --;
    #line 3595 
    goto emg_slate_32;
  }
  else 
       #line 3597 
       __VERIFIER_assume(0);
  #line 3602 
  return (void *)0;
  #line 3605 
  emg_sus_32: 
              #line 3605 
  ;
  #line 3607 
  emg_32_ret = emg_wrapper_xgbe_platform_suspend(emg_32_device);
  #line 3612 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3615 
  if (ldv_undef_int() != 0) {
    #line 3617 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3620 
    if (ldv_undef_int() != 0) 
                              #line 3622 
                              goto emg_no_irq_32; else 
                                                       #line 3627 
                                                       goto emg_slate_32;
  }
  else {
    #line 3633 
    __VERIFIER_assume(emg_32_ret != 0);
    #line 3636 
    if (emg_repeat_cnt_sus_32 > 0) {
      #line 3637 
      emg_repeat_cnt_sus_32 --;
      #line 3639 
      goto emg_sus_32;
    }
    else 
         #line 3641 
         __VERIFIER_assume(0);
  }
  #line 3647 
  return (void *)0;
  #line 3650 
  emg_th_32: 
             #line 3650 
  ;
  #line 3652 
  emg_32_ret = emg_wrapper_xgbe_platform_resume(emg_32_device);
  #line 3657 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3660 
  if (ldv_undef_int() != 0) {
    #line 3662 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3666 
    goto emg_compl_32;
  }
  else {
    #line 3671 
    __VERIFIER_assume(emg_32_ret != 0);
    #line 3674 
    if (emg_repeat_cnt_th_32 > 0) {
      #line 3675 
      emg_repeat_cnt_th_32 --;
      #line 3677 
      goto emg_th_32;
    }
    else 
         #line 3679 
         __VERIFIER_assume(0);
  }
  #line 3685 
  return (void *)0;
  #line 3688 
  emg_thlate_32: 
                 #line 3688 
  ;
  #line 3690 
  if (emg_32_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 3691 
                                                                emg_32_ret = (*(emg_32_pm_ops->thaw_early))(emg_32_device); else 
                                                                    #line 3693 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3699 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3702 
  if (ldv_undef_int() != 0) {
    #line 3704 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3708 
    goto emg_th_32;
  }
  else 
       #line 3713 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3717 
  if (emg_repeat_cnt_thlate_32 > 0) {
    #line 3718 
    emg_repeat_cnt_thlate_32 --;
    #line 3720 
    goto emg_thlate_32;
  }
  else 
       #line 3722 
       __VERIFIER_assume(0);
  #line 3727 
  return (void *)0;
  #line 3730 
  emg_tnoirq_32: 
                 #line 3730 
  ;
  #line 3732 
  if (emg_32_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 3733 
                                                                emg_32_ret = (*(emg_32_pm_ops->thaw_noirq))(emg_32_device); else 
                                                                    #line 3735 
                                                                    emg_32_ret = ldv_undef_int();
  #line 3741 
  emg_32_ret = ldv_post_probe(emg_32_ret);
  #line 3744 
  if (ldv_undef_int() != 0) {
    #line 3746 
    __VERIFIER_assume(emg_32_ret == 0);
    #line 3750 
    goto emg_th_32;
  }
  else 
       #line 3755 
       __VERIFIER_assume(emg_32_ret != 0);
  #line 3759 
  if (emg_repeat_cnt_tnoirq_32 > 0) {
    #line 3760 
    emg_repeat_cnt_tnoirq_32 --;
    #line 3762 
    goto emg_tnoirq_32;
  }
  else 
       #line 3764 
       __VERIFIER_assume(0);
  #line 3769 
  return (void *)0;
}

#line 3774  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_13(void *arg0)
{
  #line 3777 
  struct timer_list *emg_33_container;
  #line 3778 
  unsigned long emg_33_emg_param_0_0;
  #line 3780 
  struct emg_struct_timer_scenario_13_33 *data = (struct emg_struct_timer_scenario_13_33 *)arg0;
  #line 3785 
  if (data != (struct emg_struct_timer_scenario_13_33 *)0) {
    #line 3786 
    emg_33_container = data->arg0;
    #line 3787 
    ldv_free((void *)data);
  }
  #line 3793 
  ldv_switch_to_interrupt_context();
  #line 3797 
  if (emg_33_container->function != (void (*)(struct timer_list *))0) 
    #line 3798 
    (*(emg_33_container->function))((struct timer_list *)emg_33_emg_param_0_0);
  #line 3804 
  ldv_switch_to_process_context();
  #line 3811 
  return (void *)0;
}

#line 3816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 3819 
  struct pci_driver *emg_2_pci_driver;
  #line 3821 
  emg_2_pci_driver = emg_alias_xgbe_driver_0;
  #line 3822 
  if (ldv_undef_int() != 0) {
    #line 3824 
    emg_2_pci_driver = arg0;
    #line 3828 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 3832 
    return 0;
  }
  else {
    #line 3836 
    return ldv_undef_int_negative();
  }
}

#line 3844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1)
{
  #line 3847 
  struct platform_driver *emg_3_platform_driver;
  #line 3849 
  emg_3_platform_driver = emg_alias_xgbe_driver_1;
  #line 3850 
  if (ldv_undef_int() != 0) {
    #line 3852 
    emg_3_platform_driver = arg0;
    #line 3856 
    emg_dispatch_register_3(emg_3_platform_driver);
    #line 3860 
    return 0;
  }
  else {
    #line 3864 
    return ldv_undef_int_negative();
  }
}

#line 3872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 3875 
  struct net_device *emg_4_netdev;
  #line 3877 
  if (ldv_undef_int() != 0) {
    #line 3879 
    emg_4_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 3883 
    return emg_4_netdev;
  }
  else 
       #line 3887 
       return (struct net_device *)0;
}

#line 3895  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 3898 
  struct dentry *emg_5_dentry;
  #line 3899 
  struct inode *emg_5_inode;
  #line 3901 
  if (ldv_undef_int() != 0) {
    #line 3903 
    emg_5_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 3904 
    emg_5_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 3905 
    emg_5_inode->i_mode = (unsigned short)16877U;
    #line 3906 
    emg_5_dentry->d_parent = arg1;
    #line 3907 
    emg_5_dentry->d_inode = emg_5_inode;
    #line 3908 
    return emg_5_dentry;
  }
  else {
    #line 3912 
    return (struct dentry *)ERR_PTR_0(-19L);
  }
}

#line 3920  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 3923 
  struct dentry *emg_6_dentry;
  #line 3924 
  struct file_operations *emg_6_file_operations;
  #line 3925 
  struct inode *emg_6_inode;
  #line 3927 
  if (ldv_undef_int() != 0) {
    #line 3929 
    emg_6_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 3930 
    emg_6_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 3931 
    emg_6_inode->i_mode = arg1;
    #line 3932 
    emg_6_dentry->d_parent = arg2;
    #line 3933 
    emg_6_inode->i_private = arg3;
    #line 3934 
    emg_6_file_operations = arg4;
    #line 3935 
    emg_6_dentry->d_inode = emg_6_inode;
    #line 3936 
    ldv_save_allocated_memory_to_list((void *)emg_6_dentry);
    #line 3940 
    emg_dispatch_register_6(emg_6_file_operations);
    #line 3944 
    return emg_6_dentry;
  }
  else {
    #line 3948 
    return (struct dentry *)ERR_PTR_0(-19L);
  }
}

#line 3956  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 3959 
  struct timer_list *emg_7_timer_list;
  #line 3962 
  emg_7_timer_list = arg0;
  #line 3966 
  emg_dispatch_instance_deregister_7(emg_7_timer_list);
  #line 3967 
  ;
  #line 3967 
  return 0;
}

#line 3973  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_devm_free_irq(struct device *arg0, unsigned int arg1, void *arg2)
{
  #line 3976 
  int emg_8_line;
  #line 3979 
  emg_8_line = (int)((long)arg0);
  #line 3986 
  return;
}

#line 3991  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_flush_work(struct work_struct *arg0)
{
  #line 3994 
  struct work_struct *emg_9_work_struct;
  #line 3996 
  if (ldv_undef_int() != 0) {
    #line 3998 
    emg_9_work_struct = arg0;
    #line 4002 
    if (emg_9_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 4003 
      (*(emg_9_work_struct->func))(emg_9_work_struct);
    #line 4008 
    return (_Bool)1;
  }
  else 
       #line 4012 
       return (_Bool)0;
}

#line 4020  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 4023 
  struct net_device *emg_10_netdev;
  #line 4026 
  emg_10_netdev = arg0;
  #line 4027 
  ldv_free((void *)emg_10_netdev);
  #line 4030 
  return;
}

#line 4035  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 4038 
  struct timer_list *emg_11_timer_list;
  #line 4040 
  if (ldv_undef_int() != 0) {
    #line 4042 
    emg_11_timer_list = arg0;
    #line 4046 
    emg_dispatch_instance_register_11(emg_11_timer_list);
    #line 4050 
    return 1;
  }
  else 
       #line 4054 
       return 0;
}

#line 4062  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 4065 
  struct pci_driver *emg_12_pci_driver;
  #line 4067 
  emg_12_pci_driver = emg_alias_xgbe_driver_0;
  #line 4069 
  emg_12_pci_driver = arg0;
  #line 4073 
  emg_dispatch_deregister_12(emg_12_pci_driver);
  #line 4076 
  return;
}

#line 4081  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_platform_driver_unregister(struct platform_driver *arg0)
{
  #line 4084 
  struct platform_driver *emg_13_platform_driver;
  #line 4086 
  emg_13_platform_driver = emg_alias_xgbe_driver_1;
  #line 4088 
  emg_13_platform_driver = arg0;
  #line 4092 
  emg_dispatch_deregister_13(emg_13_platform_driver);
  #line 4095 
  return;
}

#line 4100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 4103 
  struct work_struct *emg_14_work_struct;
  #line 4105 
  if (ldv_undef_int() != 0) {
    #line 4107 
    emg_14_work_struct = arg1;
    #line 4111 
    if (emg_14_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 4112 
      (*(emg_14_work_struct->func))(emg_14_work_struct);
    #line 4117 
    return (_Bool)1;
  }
  else 
       #line 4121 
       return (_Bool)0;
}

#line 4129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 4132 
  struct net_device *emg_15_netdev;
  #line 4133 
  int emg_15_ret;
  #line 4136 
  emg_15_ret = ldv_undef_int();
  #line 4137 
  emg_15_ret = ldv_undef_int();
  #line 4138 
  if (ldv_undef_int() != 0) {
    #line 4140 
    emg_15_netdev = arg0;
    #line 4144 
    emg_15_ret = emg_wrapper_xgbe_open(emg_15_netdev);
    #line 4147 
    if (ldv_undef_int() != 0) {
      #line 4149 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 4153 
      emg_dispatch_register_15(emg_15_netdev);
      #line 4157 
      return 0;
    }
    else {
      #line 4161 
      __VERIFIER_assume(emg_15_ret != 0);
      #line 4162 
      ldv_failed_register_netdev();
      #line 4163 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 4168 
    ldv_failed_register_netdev();
    #line 4169 
    return ldv_undef_int_negative();
  }
}

#line 4177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 4180 
  struct work_struct *emg_16_work_struct;
  #line 4182 
  if (ldv_undef_int() != 0) {
    #line 4184 
    emg_16_work_struct = arg0;
    #line 4188 
    if (emg_16_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 4189 
      (*(emg_16_work_struct->func))(emg_16_work_struct);
    #line 4194 
    return (_Bool)1;
  }
  else 
       #line 4198 
       return (_Bool)0;
}

#line 4206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  #line 4211 
  arg0->func = arg1;
  #line 4212 
  arg0->data = arg2;
  #line 4213 
  arg0->count.counter = 0;
  #line 4216 
  return;
}

#line 4221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 4224 
  unsigned long emg_18_emg_param_0_0;
  #line 4225 
  struct tasklet_struct *emg_18_tasklet_struct;
  #line 4228 
  emg_18_tasklet_struct = arg0;
  #line 4232 
  if (emg_18_tasklet_struct->count.counter == 0) 
    #line 4233 
    if (emg_18_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                    #line 4234 
                                                                    (*(emg_18_tasklet_struct->func))(emg_18_emg_param_0_0);
  #line 4239 
  return;
}

#line 4244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 4247 
  struct net_device *emg_19_netdev;
  #line 4250 
  emg_19_netdev = arg0;
  #line 4254 
  emg_wrapper_xgbe_close(emg_19_netdev);
  #line 4258 
  emg_dispatch_deregister_19(emg_19_netdev);
  #line 4261 
  return;
}

#line 4266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 4269 
  int emg_1_ret;
  #line 4272 
  emg_1_ret = emg_xgbe_mod_init();
  #line 4273 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 4276 
  if (ldv_undef_int() != 0) {
    #line 4278 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 4282 
    emg_xgbe_mod_exit();
  }
  else 
       #line 4286 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 4290 
  return (void *)0;
}

#line 4295  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amd/xgbe/amd-xgbe.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 4297 
  ldv_initialize();
  #line 4299 
  emg_entry_point_insmod((void *)0);
  #line 4301 
  return 0;
}

