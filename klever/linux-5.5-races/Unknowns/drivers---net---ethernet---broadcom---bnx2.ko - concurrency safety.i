/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long uintptr_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_SCHEDULING = 1,
    SYSTEM_RUNNING = 2,
    SYSTEM_HALT = 3,
    SYSTEM_POWER_OFF = 4,
    SYSTEM_RESTART = 5,
    SYSTEM_SUSPEND = 6
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_69 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_149 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 302 
struct percpu_ref;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_306 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_306 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_307 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_308 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_309 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_310 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_313 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_314 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_312 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_313 _addr_bnd ;
   struct __anonstruct__addr_pkey_314 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_311 {
   void *_addr ;
   union __anonunion_312 __anonCompField___anonstruct__sigfault_311_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_315 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_316 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_307 _kill ;
   struct __anonstruct__timer_308 _timer ;
   struct __anonstruct__rt_309 _rt ;
   struct __anonstruct__sigchld_310 _sigchld ;
   struct __anonstruct__sigfault_311 _sigfault ;
   struct __anonstruct__sigpoll_315 _sigpoll ;
   struct __anonstruct__sigsys_316 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_321 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_321 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_326 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_326 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_328 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_328 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
typedef enum irqreturn irqreturn_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_404 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_404 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_406 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_406 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_420 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_419 {
   struct __anonstruct_420 __anonCompField___anonunion_419_60 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_419 __anonCompField_lockref_61 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_422 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_421 {
   struct __anonstruct_422 __anonCompField___anonunion_421_62 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_421 __anonCompField_qstr_63 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_423 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_424 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_423 __anonCompField_dentry_64 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_424 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_431 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_432 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_431 __anonCompField_io_cq_65 ;
   union __anonunion_432 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_433 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_433 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_434 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_434 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_436 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_435 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_436 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_435 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_439 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_440 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_439 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_440 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_441 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_442 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_443 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_443 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_445 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_444 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_445 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_444 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_457 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_459 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_463 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_465 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_464 {
   unsigned long nr_segs ;
   struct __anonstruct_465 __anonCompField___anonunion_464_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_463 __anonCompField_iov_iter_72 ;
   union __anonunion_464 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_468 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_468 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_469 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_469 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_470 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_470 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_471 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_471 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_472 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_472 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_473 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_473 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_474 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_474 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_475 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_475 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_476 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_477 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_476 ifr_ifrn ;
   union __anonunion_ifr_ifru_477 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11221 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11221 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_512 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_512 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_513 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_513 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_524 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_525 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_526 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_527 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_524 ports ;
   struct __anonstruct_icmpt_525 icmpt ;
   struct __anonstruct_dnports_526 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_527 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_528 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_528 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_534 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_535 __anonCompField___anonstruct_534_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct __anonstruct_534 __anonCompField___anonunion_533_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_537 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   struct __anonstruct_539 __anonCompField___anonunion_538_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_541 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   __wsum csum ;
   struct __anonstruct_541 __anonCompField___anonunion_540_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_543 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_544 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_533 __anonCompField_sk_buff_92 ;
   union __anonunion_536 __anonCompField_sk_buff_93 ;
   union __anonunion_537 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_538 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_542 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_543 __anonCompField_sk_buff_100 ;
   union __anonunion_544 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_570 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_570 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_573 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_573 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_574 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_574 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_575 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_575 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_576 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_576 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_577 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_577 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_579 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_579 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_592 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct __anonstruct_592 __anonCompField___anonunion_591_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_591 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_594 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct keyring_index_key index_key ;
   struct __anonstruct_596 __anonCompField___anonunion_595_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   union key_payload payload ;
   struct __anonstruct_598 __anonCompField___anonunion_597_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_593 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_594 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_595 __anonCompField_key_109 ;
   union __anonunion_597 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_601 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_601 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_604 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_603 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_604 __anonCompField___anonunion_603_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_603 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_608 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_608 __anonCompField___anonstruct_607_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_612 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   union __anonunion_614 __anonCompField___anonstruct_613_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_615 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_616 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_617 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_619 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_606 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_610 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_612 test ;
   struct __anonstruct_613 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_615 info ;
   struct __anonstruct_query_616 query ;
   struct __anonstruct_raw_tracepoint_617 raw_tracepoint ;
   struct __anonstruct_618 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_619 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_646 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_646 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_648 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct __anonstruct_tail_call_648 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_647 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_649 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_651 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_651 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_653 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_652 {
   struct __anonstruct_653 __anonCompField___anonunion_652_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_652 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15272 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15273 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15272 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15273 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mii.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_703 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_703 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_704 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_704 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_707 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_708 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_710 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_711 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_709 {
   struct __anonstruct_elv_710 elv ;
   struct __anonstruct_flush_711 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_712 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_707 __anonCompField_request_164 ;
   union __anonunion_708 __anonCompField_request_165 ;
   union __anonunion_709 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_712 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_986 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_986 __anonCompField_ip_ra_chain_196 ;
   struct callback_head rcu ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_993 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_993 __anonCompField_inet_listen_hashbucket_197 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
struct fs_pin;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid_namespace.h"
struct pid_namespace {
   struct kref kref ;
   struct idr idr ;
   struct callback_head rcu ;
   unsigned int pid_allocated ;
   struct task_struct *child_reaper ;
   struct kmem_cache *pid_cachep ;
   unsigned int level ;
   struct pid_namespace *parent ;
   struct vfsmount *proc_mnt ;
   struct dentry *proc_self ;
   struct dentry *proc_thread_self ;
   struct fs_pin *bacct ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct work_struct proc_work ;
   kgid_t pid_gid ;
   int hide_pid ;
   int reboot ;
   struct ns_common ns ;
} __attribute__((__designated_init__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2x/bnx2x_mfw_req.h"
struct fcoe_capabilities {
   u32 capability1 ;
   u32 capability2 ;
   u32 capability3 ;
   u32 capability4 ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2x/bnx2x_mfw_req.h"
struct eth_stats_info {
   u8 version[12U] ;
   u8 mac_local[8U] ;
   u8 mac_add1[8U] ;
   u8 mac_add2[8U] ;
   u32 mtu_size ;
   u32 feature_flags ;
   u32 lso_max_size ;
   u32 lso_min_seg_cnt ;
   u32 ipv4_ofld_cnt ;
   u32 ipv6_ofld_cnt ;
   u32 promiscuous_mode ;
   u32 txq_size ;
   u32 rxq_size ;
   u32 txq_avg_depth ;
   u32 rxq_avg_depth ;
   u32 iov_offload ;
   u32 netq_cnt ;
   u32 vf_cnt ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2x/bnx2x_mfw_req.h"
struct fcoe_stats_info {
   u8 version[12U] ;
   u8 mac_local[8U] ;
   u8 mac_add1[8U] ;
   u8 mac_add2[8U] ;
   u32 qos_priority ;
   u32 txq_size ;
   u32 rxq_size ;
   u32 txq_avg_depth ;
   u32 rxq_avg_depth ;
   u32 rx_frames_lo ;
   u32 rx_frames_hi ;
   u32 rx_bytes_lo ;
   u32 rx_bytes_hi ;
   u32 tx_frames_lo ;
   u32 tx_frames_hi ;
   u32 tx_bytes_lo ;
   u32 tx_bytes_hi ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2x/bnx2x_mfw_req.h"
struct iscsi_stats_info {
   u8 version[12U] ;
   u8 mac_local[8U] ;
   u8 mac_add1[8U] ;
   u32 qos_priority ;
   u8 initiator_name[64U] ;
   u8 ww_port_name[64U] ;
   u8 boot_target_name[64U] ;
   u8 boot_target_ip[16U] ;
   u32 boot_target_portal ;
   u8 boot_init_ip[16U] ;
   u32 max_frame_size ;
   u32 txq_size ;
   u32 rxq_size ;
   u32 txq_avg_depth ;
   u32 rxq_avg_depth ;
   u32 rx_pdus_lo ;
   u32 rx_pdus_hi ;
   u32 rx_bytes_lo ;
   u32 rx_bytes_hi ;
   u32 tx_pdus_lo ;
   u32 tx_pdus_hi ;
   u32 tx_bytes_lo ;
   u32 tx_bytes_hi ;
   u32 pcp_prior_map_tbl ;
};
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2x/bnx2x_mfw_req.h"
union drv_info_to_mcp {
   struct eth_stats_info ether_stat ;
   struct fcoe_stats_info fcoe_stat ;
   struct iscsi_stats_info iscsi_stat ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct kwqe {
   u32 kwqe_op_flag ;
   u32 kwqe_info0 ;
   u32 kwqe_info1 ;
   u32 kwqe_info2 ;
   u32 kwqe_info3 ;
   u32 kwqe_info4 ;
   u32 kwqe_info5 ;
   u32 kwqe_info6 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct kwqe_16 {
   u32 kwqe_info0 ;
   u32 kwqe_info1 ;
   u32 kwqe_info2 ;
   u32 kwqe_info3 ;
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct cnic_ctl_completion {
   u32 cid ;
   u8 opcode ;
   u8 error ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
union __anonunion_data_1049 {
   struct cnic_ctl_completion comp ;
   char bytes[64U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct cnic_ctl_info {
   int cmd ;
   union __anonunion_data_1049 data ;
};
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct drv_ctl_spq_credit {
   u32 credit_count ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct drv_ctl_io {
   u32 cid_addr ;
   u32 offset ;
   u32 data ;
   dma_addr_t dma_addr ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct drv_ctl_l2_ring {
   u32 client_id ;
   u32 cid ;
};
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct drv_ctl_register_data {
   int ulp_type ;
   struct fcoe_capabilities fcoe_features ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
union __anonunion_data_1050 {
   struct drv_ctl_spq_credit credit ;
   struct drv_ctl_io io ;
   struct drv_ctl_l2_ring ring ;
   int ulp_type ;
   struct drv_ctl_register_data register_data ;
   char bytes[64U] ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct drv_ctl_info {
   int cmd ;
   int drv_state ;
   union __anonunion_data_1050 data ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct cnic_fc_npiv_tbl {
   u8 wwpn[64U][8U] ;
   u8 wwnn[64U][8U] ;
   u32 count ;
};
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct cnic_ops {
   struct module *cnic_owner ;
   int (*cnic_handler)(void *, void *) ;
   int (*cnic_ctl)(void *, struct cnic_ctl_info *) ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct cnic_irq {
   unsigned int vector ;
   void *status_blk ;
   u32 status_blk_num ;
   u32 status_blk_num2 ;
   u32 irq_flags ;
};
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/cnic_if.h"
struct cnic_eth_dev {
   struct module *drv_owner ;
   u32 drv_state ;
   u32 chip_id ;
   u32 max_kwqe_pending ;
   struct pci_dev *pdev ;
   void *io_base ;
   void *io_base2 ;
   void *iro_arr ;
   u32 ctx_tbl_offset ;
   u32 ctx_tbl_len ;
   int ctx_blk_size ;
   u32 starting_cid ;
   u32 max_iscsi_conn ;
   u32 max_fcoe_conn ;
   u32 max_rdma_conn ;
   u32 fcoe_init_cid ;
   u32 max_fcoe_exchanges ;
   u32 fcoe_wwn_port_name_hi ;
   u32 fcoe_wwn_port_name_lo ;
   u32 fcoe_wwn_node_name_hi ;
   u32 fcoe_wwn_node_name_lo ;
   u16 iscsi_l2_client_id ;
   u16 iscsi_l2_cid ;
   u8 iscsi_mac[6U] ;
   int num_irq ;
   struct cnic_irq irq_arr[8U] ;
   int (*drv_register_cnic)(struct net_device *, struct cnic_ops *, void *) ;
   int (*drv_unregister_cnic)(struct net_device *) ;
   int (*drv_submit_kwqes_32)(struct net_device *, struct kwqe **, u32 ) ;
   int (*drv_submit_kwqes_16)(struct net_device *, struct kwqe_16 **, u32 ) ;
   int (*drv_ctl)(struct net_device *, struct drv_ctl_info *) ;
   int (*drv_get_fc_npiv_tbl)(struct net_device *, struct cnic_fc_npiv_tbl *) ;
   unsigned long reserved1[2U] ;
   union drv_info_to_mcp *addr_drv_info_to_mcp ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_tx_bd {
   u32 tx_bd_haddr_hi ;
   u32 tx_bd_haddr_lo ;
   u32 tx_bd_mss_nbytes ;
   u32 tx_bd_vlan_tag_flags ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_rx_bd {
   u32 rx_bd_haddr_hi ;
   u32 rx_bd_haddr_lo ;
   u32 rx_bd_len ;
   u32 rx_bd_flags ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct status_block {
   u32 status_attn_bits ;
   u32 status_attn_bits_ack ;
   u16 status_tx_quick_consumer_index1 ;
   u16 status_tx_quick_consumer_index0 ;
   u16 status_tx_quick_consumer_index3 ;
   u16 status_tx_quick_consumer_index2 ;
   u16 status_rx_quick_consumer_index1 ;
   u16 status_rx_quick_consumer_index0 ;
   u16 status_rx_quick_consumer_index3 ;
   u16 status_rx_quick_consumer_index2 ;
   u16 status_rx_quick_consumer_index5 ;
   u16 status_rx_quick_consumer_index4 ;
   u16 status_rx_quick_consumer_index7 ;
   u16 status_rx_quick_consumer_index6 ;
   u16 status_rx_quick_consumer_index9 ;
   u16 status_rx_quick_consumer_index8 ;
   u16 status_rx_quick_consumer_index11 ;
   u16 status_rx_quick_consumer_index10 ;
   u16 status_rx_quick_consumer_index13 ;
   u16 status_rx_quick_consumer_index12 ;
   u16 status_rx_quick_consumer_index15 ;
   u16 status_rx_quick_consumer_index14 ;
   u16 status_cmd_consumer_index ;
   u16 status_completion_producer_index ;
   u8 status_blk_num ;
   u8 status_unused ;
   u16 status_idx ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct status_block_msix {
   u16 status_rx_quick_consumer_index ;
   u16 status_tx_quick_consumer_index ;
   u16 status_cmd_consumer_index ;
   u16 status_completion_producer_index ;
   u32 status_unused ;
   u8 status_blk_num ;
   u8 status_unused2 ;
   u16 status_idx ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct statistics_block {
   u32 stat_IfHCInOctets_hi ;
   u32 stat_IfHCInOctets_lo ;
   u32 stat_IfHCInBadOctets_hi ;
   u32 stat_IfHCInBadOctets_lo ;
   u32 stat_IfHCOutOctets_hi ;
   u32 stat_IfHCOutOctets_lo ;
   u32 stat_IfHCOutBadOctets_hi ;
   u32 stat_IfHCOutBadOctets_lo ;
   u32 stat_IfHCInUcastPkts_hi ;
   u32 stat_IfHCInUcastPkts_lo ;
   u32 stat_IfHCInMulticastPkts_hi ;
   u32 stat_IfHCInMulticastPkts_lo ;
   u32 stat_IfHCInBroadcastPkts_hi ;
   u32 stat_IfHCInBroadcastPkts_lo ;
   u32 stat_IfHCOutUcastPkts_hi ;
   u32 stat_IfHCOutUcastPkts_lo ;
   u32 stat_IfHCOutMulticastPkts_hi ;
   u32 stat_IfHCOutMulticastPkts_lo ;
   u32 stat_IfHCOutBroadcastPkts_hi ;
   u32 stat_IfHCOutBroadcastPkts_lo ;
   u32 stat_emac_tx_stat_dot3statsinternalmactransmiterrors ;
   u32 stat_Dot3StatsCarrierSenseErrors ;
   u32 stat_Dot3StatsFCSErrors ;
   u32 stat_Dot3StatsAlignmentErrors ;
   u32 stat_Dot3StatsSingleCollisionFrames ;
   u32 stat_Dot3StatsMultipleCollisionFrames ;
   u32 stat_Dot3StatsDeferredTransmissions ;
   u32 stat_Dot3StatsExcessiveCollisions ;
   u32 stat_Dot3StatsLateCollisions ;
   u32 stat_EtherStatsCollisions ;
   u32 stat_EtherStatsFragments ;
   u32 stat_EtherStatsJabbers ;
   u32 stat_EtherStatsUndersizePkts ;
   u32 stat_EtherStatsOverrsizePkts ;
   u32 stat_EtherStatsPktsRx64Octets ;
   u32 stat_EtherStatsPktsRx65Octetsto127Octets ;
   u32 stat_EtherStatsPktsRx128Octetsto255Octets ;
   u32 stat_EtherStatsPktsRx256Octetsto511Octets ;
   u32 stat_EtherStatsPktsRx512Octetsto1023Octets ;
   u32 stat_EtherStatsPktsRx1024Octetsto1522Octets ;
   u32 stat_EtherStatsPktsRx1523Octetsto9022Octets ;
   u32 stat_EtherStatsPktsTx64Octets ;
   u32 stat_EtherStatsPktsTx65Octetsto127Octets ;
   u32 stat_EtherStatsPktsTx128Octetsto255Octets ;
   u32 stat_EtherStatsPktsTx256Octetsto511Octets ;
   u32 stat_EtherStatsPktsTx512Octetsto1023Octets ;
   u32 stat_EtherStatsPktsTx1024Octetsto1522Octets ;
   u32 stat_EtherStatsPktsTx1523Octetsto9022Octets ;
   u32 stat_XonPauseFramesReceived ;
   u32 stat_XoffPauseFramesReceived ;
   u32 stat_OutXonSent ;
   u32 stat_OutXoffSent ;
   u32 stat_FlowControlDone ;
   u32 stat_MacControlFramesReceived ;
   u32 stat_XoffStateEntered ;
   u32 stat_IfInFramesL2FilterDiscards ;
   u32 stat_IfInRuleCheckerDiscards ;
   u32 stat_IfInFTQDiscards ;
   u32 stat_IfInMBUFDiscards ;
   u32 stat_IfInRuleCheckerP4Hit ;
   u32 stat_CatchupInRuleCheckerDiscards ;
   u32 stat_CatchupInFTQDiscards ;
   u32 stat_CatchupInMBUFDiscards ;
   u32 stat_CatchupInRuleCheckerP4Hit ;
   u32 stat_GenStat00 ;
   u32 stat_GenStat01 ;
   u32 stat_GenStat02 ;
   u32 stat_GenStat03 ;
   u32 stat_GenStat04 ;
   u32 stat_GenStat05 ;
   u32 stat_GenStat06 ;
   u32 stat_GenStat07 ;
   u32 stat_GenStat08 ;
   u32 stat_GenStat09 ;
   u32 stat_GenStat10 ;
   u32 stat_GenStat11 ;
   u32 stat_GenStat12 ;
   u32 stat_GenStat13 ;
   u32 stat_GenStat14 ;
   u32 stat_GenStat15 ;
   u32 stat_FwRxDrop ;
};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct l2_fhdr {
   u32 l2_fhdr_status ;
   u32 l2_fhdr_hash ;
   u16 l2_fhdr_vlan_tag ;
   u16 l2_fhdr_pkt_len ;
   u16 l2_fhdr_tcp_udp_xsum ;
   u16 l2_fhdr_ip_xsum ;
};
#line 6623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_sw_bd {
   u8 *data ;
   dma_addr_t mapping ;
};
#line 6637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_sw_pg {
   struct page *page ;
   dma_addr_t mapping ;
};
#line 6642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_sw_tx_bd {
   struct sk_buff *skb ;
   dma_addr_t mapping ;
   unsigned short is_gso ;
   unsigned short nr_frags ;
};
#line 6695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct flash_spec {
   u32 strapping ;
   u32 config1 ;
   u32 config2 ;
   u32 config3 ;
   u32 write1 ;
   u32 flags ;
   u32 page_bits ;
   u32 page_size ;
   u32 addr_mask ;
   u32 total_size ;
   u8 *name ;
};
#line 6721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_irq {
   irqreturn_t (*handler)(int , void *) ;
   unsigned int vector ;
   u8 requested ;
   char name[18U] ;
};
#line 6728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_tx_ring_info {
   u32 tx_prod_bseq ;
   u16 tx_prod ;
   u32 tx_bidx_addr ;
   u32 tx_bseq_addr ;
   struct bnx2_tx_bd *tx_desc_ring ;
   struct bnx2_sw_tx_bd *tx_buf_ring ;
   u16 tx_cons ;
   u16 hw_tx_cons ;
   dma_addr_t tx_desc_mapping ;
};
#line 6743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_rx_ring_info {
   u32 rx_prod_bseq ;
   u16 rx_prod ;
   u16 rx_cons ;
   u32 rx_bidx_addr ;
   u32 rx_bseq_addr ;
   u32 rx_pg_bidx_addr ;
   u16 rx_pg_prod ;
   u16 rx_pg_cons ;
   struct bnx2_sw_bd *rx_buf_ring ;
   struct bnx2_rx_bd *rx_desc_ring[8U] ;
   struct bnx2_sw_pg *rx_pg_ring ;
   struct bnx2_rx_bd *rx_pg_desc_ring[32U] ;
   dma_addr_t rx_desc_mapping[8U] ;
   dma_addr_t rx_pg_desc_mapping[32U] ;
};
#line 6764 
struct bnx2;
#line 6764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
union __anonunion_status_blk_1053 {
   struct status_block *msi ;
   struct status_block_msix *msix ;
};
#line 6764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_napi {
   struct napi_struct napi ;
   struct bnx2 *bp ;
   union __anonunion_status_blk_1053 status_blk ;
   u16 *hw_tx_cons_ptr ;
   u16 *hw_rx_cons_ptr ;
   u32 last_status_idx ;
   u32 int_num ;
   u32 cnic_tag ;
   int cnic_present ;
   struct bnx2_rx_ring_info rx_ring ;
   struct bnx2_tx_ring_info tx_ring ;
};
#line 6785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2 {
   void *regview ;
   struct net_device *dev ;
   struct pci_dev *pdev ;
   atomic_t intr_sem ;
   u32 flags ;
   struct bnx2_napi bnx2_napi[9U] ;
   u32 rx_buf_use_size ;
   u32 rx_buf_size ;
   u32 rx_copy_thresh ;
   u32 rx_jumbo_thresh ;
   u32 rx_max_ring_idx ;
   u32 rx_max_pg_ring_idx ;
   int tx_ring_size ;
   u32 tx_wake_thresh ;
   struct cnic_ops *cnic_ops ;
   void *cnic_data ;
   unsigned int current_interval ;
   struct timer_list timer ;
   struct work_struct reset_task ;
   spinlock_t phy_lock ;
   spinlock_t indirect_lock ;
   u32 phy_flags ;
   u32 mii_bmcr ;
   u32 mii_bmsr ;
   u32 mii_bmsr1 ;
   u32 mii_adv ;
   u32 mii_lpa ;
   u32 mii_up1 ;
   u32 chip_id ;
   u32 phy_addr ;
   u32 phy_id ;
   u16 bus_speed_mhz ;
   u8 wol ;
   u8 pad ;
   u16 fw_wr_seq ;
   u16 fw_drv_pulse_wr_seq ;
   u32 fw_last_msg ;
   int rx_max_ring ;
   int rx_ring_size ;
   int rx_max_pg_ring ;
   int rx_pg_ring_size ;
   u16 tx_quick_cons_trip ;
   u16 tx_quick_cons_trip_int ;
   u16 rx_quick_cons_trip ;
   u16 rx_quick_cons_trip_int ;
   u16 comp_prod_trip ;
   u16 comp_prod_trip_int ;
   u16 tx_ticks ;
   u16 tx_ticks_int ;
   u16 com_ticks ;
   u16 com_ticks_int ;
   u16 cmd_ticks ;
   u16 cmd_ticks_int ;
   u16 rx_ticks ;
   u16 rx_ticks_int ;
   u32 stats_ticks ;
   dma_addr_t status_blk_mapping ;
   void *status_blk ;
   struct statistics_block *stats_blk ;
   struct statistics_block *temp_stats_blk ;
   dma_addr_t stats_blk_mapping ;
   int ctx_pages ;
   void *ctx_blk[4U] ;
   dma_addr_t ctx_blk_mapping[4U] ;
   u32 hc_cmd ;
   u32 rx_mode ;
   u16 req_line_speed ;
   u8 req_duplex ;
   u8 phy_port ;
   u8 link_up ;
   u16 line_speed ;
   u8 duplex ;
   u8 flow_ctrl ;
   u32 advertising ;
   u8 req_flow_ctrl ;
   u8 autoneg ;
   u8 loopback ;
   u8 serdes_an_pending ;
   u8 mac_addr[8U] ;
   u32 shmem_base ;
   char fw_version[32U] ;
   int pm_cap ;
   int pcix_cap ;
   struct flash_spec *flash_info ;
   u32 flash_size ;
   int status_stats_size ;
   struct bnx2_irq irq_tbl[9U] ;
   int irq_nvecs ;
   u8 func ;
   u8 num_tx_rings ;
   u8 num_rx_rings ;
   int num_req_tx_rings ;
   int num_req_rx_rings ;
   u32 leds_save ;
   u32 idle_chk_status_idx ;
   struct mutex cnic_lock ;
   struct cnic_eth_dev cnic_eth_dev ;
   struct cnic_eth_dev *(*cnic_probe)(struct net_device *) ;
   struct firmware *mips_firmware ;
   struct firmware *rv2p_firmware ;
};
#line 7016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct cpu_reg {
   u32 mode ;
   u32 mode_value_halt ;
   u32 mode_value_sstep ;
   u32 state ;
   u32 state_value_clear ;
   u32 gpr0 ;
   u32 evmask ;
   u32 pc ;
   u32 inst ;
   u32 bp ;
   u32 spad_base ;
   u32 mips_view_base ;
};
#line 7035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_fw_file_section {
   __be32 addr ;
   __be32 len ;
   __be32 offset ;
};
#line 7041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_mips_fw_file_entry {
   __be32 start_addr ;
   struct bnx2_fw_file_section text ;
   struct bnx2_fw_file_section data ;
   struct bnx2_fw_file_section rodata ;
};
#line 7048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_rv2p_fw_file_entry {
   struct bnx2_fw_file_section rv2p ;
   __be32 fixup[8U] ;
};
#line 7053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_mips_fw_file {
   struct bnx2_mips_fw_file_entry com ;
   struct bnx2_mips_fw_file_entry cp ;
   struct bnx2_mips_fw_file_entry rxp ;
   struct bnx2_mips_fw_file_entry tpat ;
   struct bnx2_mips_fw_file_entry txp ;
};
#line 7061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
struct bnx2_rv2p_fw_file {
   struct bnx2_rv2p_fw_file_entry proc1 ;
   struct bnx2_rv2p_fw_file_entry proc2 ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
struct __anonstruct_board_info_1054 {
   char *name ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
union __anonunion___u_1056 {
   u16 __val ;
   char __c[1U] ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
union __anonunion___u_1058 {
   u16 __val ;
   char __c[1U] ;
};
#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
union __anonunion___u_1062 {
   struct cnic_ops *__val ;
   char __c[1U] ;
};
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
union __anonunion___u_1064 {
   struct cnic_ops *__val ;
   char __c[1U] ;
};
#line 2840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
union __anonunion___u_1066 {
   u16 __val ;
   char __c[1U] ;
};
#line 3140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
union __anonunion___u_1068 {
   u16 __val ;
   char __c[1U] ;
};
#line 3457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
union __anonunion___u_1070 {
   struct cnic_ops *__val ;
   char __c[1U] ;
};
#line 5578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
struct __anonstruct_reg_tbl_1073 {
   u16 offset ;
   u16 flags ;
   u32 rw_mask ;
   u32 ro_mask ;
};
#line 5766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
struct mem_entry {
   u32 offset ;
   u32 len ;
};
#line 6492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
struct ftq_reg {
   char *name ;
   u32 off ;
};
#line 7449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
struct __anonstruct_bnx2_stats_str_arr_1075 {
   char string[32U] ;
};
#line 7576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
struct __anonstruct_bnx2_tests_str_arr_1076 {
   char string[32U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2858 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_2858 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2859 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_2859 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2875 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_2875 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_2879 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_2879 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2880 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2881 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_2880 __anonCompField_media_link_90 ;
   union __anonunion_2881 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_2883 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_2882 {
   struct __anonstruct_dev_2883 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_2882 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_2897 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_2898 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_2896 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_2897 i2c ;
   struct __anonstruct_custom_2898 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_2896 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_3799 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_3799 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_0_13 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_bnx2_get_channels_14 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_bnx2_pci_driver_15 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_4_17 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 162 
  bool c;
  #line 163 
  ldv_inline_asm();
  #line 162 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 340  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 347  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 83 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 84 
  return arch_test_and_clear_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __rounddown_pow_of_two(unsigned long n)
{
  #line 67 
  return 1UL << (fls_long(n) + 4294967295U);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 570 
#line 570 
extern enum system_states system_state;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 63 
#line 63 
char *strcpy(char *, char *);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 88 
#line 368  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static size_t cif_strlen(char *s);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_69 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 237 
#line 403  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void atomic_inc(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 348 
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 357 
#line 357 
int lock_is_held_type(struct lockdep_map *, int);
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
__inline static int lock_is_held(struct lockdep_map *lock)
{
  #line 361 
  return lock_is_held_type(lock,-1);
}

#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 758  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_lock_indirect_lock_of_bnx2(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_lock_phy_lock_of_bnx2(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 1065  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_lock_bh_phy_lock_of_bnx2(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock_indirect_lock_of_bnx2(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock_phy_lock_of_bnx2(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 1074  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock_bh_phy_lock_of_bnx2(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 1042  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock_irqrestore_indirect_lock_of_bnx2(spinlock_t *lock, unsigned long flags);
#line 26 
#line 1051 
static void cif_mutex_lock_cnic_lock_of_bnx2(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 1033 
static void cif___ldv_spin_lock_indirect_lock_of_bnx2(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
#line 40 
void synchronize_rcu(void);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 221 
#line 221 
int rcu_read_lock_held(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 1058  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_mutex_unlock_cnic_lock_of_bnx2(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 1097  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 1171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 904  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_149 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_131_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val, void *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 107 
void pci_iounmap(struct pci_dev *, void *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/pci_iomap.h"
#line 13 
void *pci_iomap(struct pci_dev *, int, unsigned long);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 1090  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 1083  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_vfree(void *addr);
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 596  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 603  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 237 
void disable_irq(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
#line 106 
void device_set_wakeup_capable(struct device *, bool);
#line 108 
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1019 
void pci_dev_put(struct pci_dev *);
#line 1040 
#line 1040 
int pci_find_capability(struct pci_dev *, int);
#line 1048 
#line 1048 
struct pci_dev *pci_get_device(unsigned int, unsigned int, struct pci_dev *);
#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1085 
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1087 
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1237 
#line 1237 
int pci_enable_wake(struct pci_dev *, pci_power_t, bool);
#line 1238 
#line 1238 
int pci_wake_from_d3(struct pci_dev *, bool);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index == 18446744073709551615UL);
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  #line 2094 
  return (int)dev->pcie_cap;
}

#line 2103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  #line 2105 
  return (_Bool)(pci_pcie_cap(dev) != 0);
}

#line 2183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static u16 pci_vpd_lrdt_size(u8 *lrdt)
{
  #line 2185 
  return (unsigned short)((int)((unsigned short)*(lrdt + 1U)) + ((int)((unsigned short)*(lrdt + 2U)) << 8U));
}

#line 2227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static u8 pci_vpd_info_field_size(u8 *info_field)
{
  #line 2229 
  return *(info_field + 2U);
}

#line 2242 
#line 2242 
int pci_vpd_find_tag(u8 *, unsigned int, unsigned int, u8);
#line 2254 
#line 2254 
int pci_vpd_find_info_keyword(u8 *, unsigned int, unsigned int, char *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 60 
#line 60 
unsigned long msleep_interruptible(unsigned int);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_457 __u;
  #line 93 
  union __anonunion___u_459 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_sub(skb_frag_t *frag, int delta)
{
  #line 357 
  frag->bv_len -= (unsigned int)delta;
  #line 358 
  return;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1035 
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2138 
  __skb_fill_page_desc(skb,i,page,off,size);
  #line 2139 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  #line 2140 
  return;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_frag_set_page(skb_frag_t *frag, struct page *page)
{
  #line 3037 
  frag->bv_page = page;
  #line 3038 
  return;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2658 
#line 2658 
void dev_close(struct net_device *);
#line 2679 
#line 1195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_clear_bit(1L,& dev_queue->state) != 0) 
                                                           #line 3321 
                                                           netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3609 
#line 3609 
int netif_get_num_default_rss_queues(void);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 1187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  #line 53 
  return (struct mii_ioctl_data *)(& rq->ifr_ifru);
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 ethtool_adv_to_mii_adv_t(u32 ethadv)
{
  #line 117 
  u32 result = 0U;
  #line 119 
  if (((unsigned long)ethadv & 1UL) != 0UL) 
                                            #line 120 
                                            result |= 32U;
  #line 121 
  if (((unsigned long)ethadv & 2UL) != 0UL) 
                                            #line 122 
                                            result |= 64U;
  #line 123 
  if (((unsigned long)ethadv & 4UL) != 0UL) 
                                            #line 124 
                                            result |= 128U;
  #line 125 
  if (((unsigned long)ethadv & 8UL) != 0UL) 
                                            #line 126 
                                            result |= 256U;
  #line 127 
  if (((unsigned long)ethadv & 8192UL) != 0UL) 
                                               #line 128 
                                               result |= 1024U;
  #line 129 
  if (((unsigned long)ethadv & 16384UL) != 0UL) 
                                                #line 130 
                                                result |= 2048U;
  #line 132 
  return result;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 ethtool_adv_to_mii_ctrl1000_t(u32 ethadv)
{
  #line 200 
  u32 result = 0U;
  #line 202 
  if (((unsigned long)ethadv & 16UL) != 0UL) 
                                             #line 203 
                                             result |= 256U;
  #line 204 
  if (((unsigned long)ethadv & 32UL) != 0UL) 
                                             #line 205 
                                             result |= 512U;
  #line 207 
  return result;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_optlen(struct sk_buff *skb)
{
  #line 51 
  ;
  #line 51 
  return (unsigned int)(((int)tcp_hdr(skb)->doff + -5) * 4);
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crc32.h"
#line 11 
u32 crc32_le(u32, unsigned char *, size_t);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crash_dump.h"
#line 16 
extern unsigned long long elfcorehdr_addr;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crash_dump.h"
__inline static bool is_kdump_kernel(void)
{
  #line 66 
  return (_Bool)(elfcorehdr_addr != 18446744073709551615ULL);
}

#line 6631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.h"
__inline static struct l2_fhdr *get_l2_fhdr(u8 *data)
{
  #line 6633 
  return (struct l2_fhdr *)((((unsigned long)data + 15UL) & 18446744073709551600U) + (unsigned long)64U);
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2_fw.h"
static struct cpu_reg cpu_reg_com = {.mode = 1069056U, .mode_value_halt = 1024U, .mode_value_sstep = 2U, .state = 1069060U, .state_value_clear = 16777215U, .gpr0 = 1069568U, .evmask = 1069064U, .pc = 1069084U, .inst = 1069088U, .bp = 1069108U, .spad_base = 1179648U, .mips_view_base = 134217728U};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2_fw.h"
static struct cpu_reg cpu_reg_cp = {.mode = 1593344U, .mode_value_halt = 1024U, .mode_value_sstep = 2U, .state = 1593348U, .state_value_clear = 16777215U, .gpr0 = 1593856U, .evmask = 1593352U, .pc = 1593372U, .inst = 1593376U, .bp = 1593396U, .spad_base = 1703936U, .mips_view_base = 134217728U};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2_fw.h"
static struct cpu_reg cpu_reg_rxp = {.mode = 806912U, .mode_value_halt = 1024U, .mode_value_sstep = 2U, .state = 806916U, .state_value_clear = 16777215U, .gpr0 = 807424U, .evmask = 806920U, .pc = 806940U, .inst = 806944U, .bp = 806964U, .spad_base = 917504U, .mips_view_base = 134217728U};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2_fw.h"
static struct cpu_reg cpu_reg_tpat = {.mode = 544768U, .mode_value_halt = 1024U, .mode_value_sstep = 2U, .state = 544772U, .state_value_clear = 16777215U, .gpr0 = 545280U, .evmask = 544776U, .pc = 544796U, .inst = 544800U, .bp = 544820U, .spad_base = 655360U, .mips_view_base = 134217728U};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2_fw.h"
static struct cpu_reg cpu_reg_txp = {.mode = 282624U, .mode_value_halt = 1024U, .mode_value_sstep = 2U, .state = 282628U, .state_value_clear = 16777215U, .gpr0 = 283136U, .evmask = 282632U, .pc = 282652U, .inst = 282656U, .bp = 282676U, .spad_base = 393216U, .mips_view_base = 134217728U};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static char version[63U] = {(char)'Q', (char)'L', (char)'o', (char)'g', (char)'i', (char)'c', (char)' '};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int disable_msi = 0;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct __anonstruct_board_info_1054 board_info[11U] = {{.name = (char *)"Broadcom NetXtreme II BCM5706 1000Base-T"}, {.name = (char *)"HP NC370T Multifunction Gigabit Server Adapter"}, {.name = (char *)"HP NC370i Multifunction Gigabit Server Adapter"}, {.name = (char *)"Broadcom NetXtreme II BCM5706 1000Base-SX"}, {.name = (char *)"HP NC370F Multifunction Gigabit Server Adapter"}, {.name = (char *)"Broadcom NetXtreme II BCM5708 1000Base-T"}, {.name = (char *)"Broadcom NetXtreme II BCM5708 1000Base-SX"}, {.name = (char *)"Broadcom NetXtreme II BCM5709 1000Base-T"}, {.name = (char *)"Broadcom NetXtreme II BCM5709 1000Base-SX"}, {.name = (char *)"Broadcom NetXtreme II BCM5716 1000Base-T"}, {.name = (char *)"Broadcom NetXtreme II BCM5716 1000Base-SX"}};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct pci_device_id bnx2_pci_tbl[12U] = {{.vendor = 5348U, .device = 5706U, .subvendor = 4156U, .subdevice = 12545U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5706U, .subvendor = 4156U, .subdevice = 12550U, .driver_data = 2UL}, {.vendor = 5348U, .device = 5706U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5708U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 5UL}, {.vendor = 5348U, .device = 5802U, .subvendor = 4156U, .subdevice = 12546U, .driver_data = 4UL}, {.vendor = 5348U, .device = 5802U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 5348U, .device = 5804U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 5348U, .device = 5689U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 5348U, .device = 5690U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 8UL}, {.vendor = 5348U, .device = 5691U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 9UL}, {.vendor = 5348U, .device = 5692U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 10UL}};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct flash_spec flash_table[16U] = {{.config1 = 1082327936U, .config2 = 10420353U, .config3 = 2709823571U, .write1 = 2936013824U, .flags = 3U, .page_bits = 2U, .page_size = 4U, .addr_mask = 3U, .total_size = 65536U, .name = (u8 *)"EEPROM - slow"}, {.strapping = 134217730U, .config1 = 1266713089U, .config2 = 327809U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .name = (u8 *)"Entry 0001"}, {.strapping = 67108865U, .config1 = 1199604225U, .config2 = 327809U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .total_size = 131072U, .name = (u8 *)"Non-buffered flash (128kB)"}, {.strapping = 201326595U, .config1 = 1333821953U, .config2 = 327809U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .total_size = 262144U, .name = (u8 *)"Non-buffered flash (256kB)"}, {.strapping = 285212672U, .config1 = 1400930817U, .config2 = 327809U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .name = (u8 *)"Entry 0100"}, {.strapping = 419430402U, .config1 = 1535148545U, .config2 = 327899U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .total_size = 131072U, .name = (u8 *)"Entry 0101: ST M45PE10 (128kB non-bufferred)"}, {.strapping = 352321537U, .config1 = 1468039681U, .config2 = 327899U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .total_size = 262144U, .name = (u8 *)"Entry 0110: ST M45PE20 (256kB non-bufferred)"}, {.strapping = 486539267U, .config1 = 1602257409U, .config2 = 327809U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .total_size = 65536U, .name = (u8 *)"Non-buffered flash (64kB)"}, {.strapping = 570425344U, .config1 = 1652589440U, .config2 = 10420353U, .config3 = 2709823571U, .write1 = 2936013824U, .flags = 3U, .page_bits = 2U, .page_size = 4U, .addr_mask = 3U, .total_size = 65536U, .name = (u8 *)"EEPROM - fast"}, {.strapping = 704643074U, .config1 = 1803584001U, .config2 = 327809U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .name = (u8 *)"Entry 1001"}, {.strapping = 637534209U, .config1 = 1736475137U, .config2 = 327809U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .name = (u8 *)"Entry 1010"}, {.strapping = 771751939U, .config1 = 1853915763U, .config2 = 5701761U, .config3 = 1753514835U, .write1 = 2936013824U, .flags = 3U, .page_bits = 9U, .page_size = 264U, .addr_mask = 511U, .total_size = 135168U, .name = (u8 *)"Buffered flash (128kB)"}, {.strapping = 855638016U, .config1 = 1937801729U, .config2 = 327809U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .name = (u8 *)"Entry 1100"}, {.strapping = 989855746U, .config1 = 2072019457U, .config2 = 327809U, .config3 = 58982995U, .write1 = 2936144902U, .flags = 4U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .name = (u8 *)"Entry 1101"}, {.strapping = 922746881U, .config1 = 1988133491U, .config2 = 5701761U, .config3 = 1753514835U, .write1 = 2936013824U, .flags = 3U, .page_bits = 9U, .page_size = 264U, .addr_mask = 511U, .name = (u8 *)"Entry 1110 (Atmel)"}, {.strapping = 1056964611U, .config1 = 2122351219U, .config2 = 5701761U, .config3 = 1753514835U, .write1 = 2936013824U, .flags = 3U, .page_bits = 9U, .page_size = 264U, .addr_mask = 511U, .total_size = 270336U, .name = (u8 *)"Buffered flash (256kB)"}};
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct flash_spec flash_5709 = {.flags = 1U, .page_bits = 8U, .page_size = 256U, .addr_mask = 255U, .total_size = 270336U, .name = (u8 *)"5709 Buffered flash (256kB)"};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
struct pci_device_id __mod_pci__bnx2_pci_tbl_device_table[12U];
#line 250 
#line 8527 
static void bnx2_init_napi(struct bnx2 *bp);
#line 251 
#line 8518 
static void bnx2_del_napi(struct bnx2 *bp);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
__inline static u32 bnx2_tx_avail(struct bnx2 *bp, struct bnx2_tx_ring_info *txr)
{
  #line 261 
  union __anonunion___u_1056 __u;
  #line 261 
  union __anonunion___u_1058 __u_0;
  #line 255 
  u32 diff;
  #line 260 
  u16 tmp;
  #line 260 
  __read_once_size((void *)(& txr->tx_prod),(void *)(& __u.__c),2);
  #line 260 
  tmp = __u.__val;
  #line 260 
  __read_once_size((void *)(& txr->tx_cons),(void *)(& __u_0.__c),2);
  #line 260 
  diff = (unsigned int)((int)tmp - (int)(__u_0.__val));
  #line 261 
  if ((long)(diff > 255U) != 0L) {
    #line 262 
    diff &= 65535U;
    #line 263 
    if (diff == 256U) 
                      #line 264 
                      diff = 255U;
  }
  #line 266 
  return (unsigned int)bp->tx_ring_size - diff;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static u32 bnx2_reg_rd_ind(struct bnx2 *bp, u32 offset)
{
  #line 272 
  unsigned long flags;
  #line 273 
  u32 val;
  #line 275 
  cif___ldv_spin_lock_indirect_lock_of_bnx2(& bp->indirect_lock);
  #line 276 
  writel(offset,bp->regview + 120U);
  #line 277 
  val = readl(bp->regview + 128U);
  #line 278 
  cif_spin_unlock_irqrestore_indirect_lock_of_bnx2(& bp->indirect_lock,flags);
  #line 279 
  return val;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_reg_wr_ind(struct bnx2 *bp, u32 offset, u32 val)
{
  #line 285 
  unsigned long flags;
  #line 287 
  cif___ldv_spin_lock_indirect_lock_of_bnx2(& bp->indirect_lock);
  #line 288 
  writel(offset,bp->regview + 120U);
  #line 289 
  writel(val,bp->regview + 128U);
  #line 290 
  cif_spin_unlock_irqrestore_indirect_lock_of_bnx2(& bp->indirect_lock,flags);
  #line 291 
  return;
}

#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_shmem_wr(struct bnx2 *bp, u32 offset, u32 val)
{
  #line 296 
  bnx2_reg_wr_ind(bp,bp->shmem_base + offset,val);
  #line 297 
  return;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static u32 bnx2_shmem_rd(struct bnx2 *bp, u32 offset)
{
  #line 302 
  return bnx2_reg_rd_ind(bp,bp->shmem_base + offset);
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_ctx_wr(struct bnx2 *bp, u32 cid_addr, u32 offset, u32 val)
{
  #line 308 
  unsigned long flags;
  #line 310 
  offset += cid_addr;
  #line 311 
  cif___ldv_spin_lock_indirect_lock_of_bnx2(& bp->indirect_lock);
  #line 312 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 313 
    int i;
    #line 315 
    writel(val,bp->regview + 4128U);
    #line 316 
    writel(offset | 1073741824U,bp->regview + 4124U);
    #line 318 
    i = 0;
    #line 318 
    while (i <= 4) {
      #line 319 
      val = readl(bp->regview + 4124U);
      #line 320 
      if (((long)val & 1073741824L) == 0L) 
                                           #line 321 
                                           break;
      #line 322 
      __const_udelay(21475UL);
      #line 318 
      i ++;
    }
  }
  else {
    #line 325 
    writel(offset,bp->regview + 4112U);
    #line 326 
    writel(val,bp->regview + 4116U);
  }
  #line 328 
  cif_spin_unlock_irqrestore_indirect_lock_of_bnx2(& bp->indirect_lock,flags);
  #line 329 
  return;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_drv_ctl(struct net_device *dev, struct drv_ctl_info *info)
{
  #line 335 
  struct bnx2 *bp = netdev_priv(dev);
  #line 336 
  struct drv_ctl_io *io = & info->data.io;
  #line 338 
  switch (info->cmd) {
    #line 339 
    case 257: 
              #line 339 
    ;
    #line 340 
    bnx2_reg_wr_ind(bp,io->offset,io->data);
    #line 341 
    break;
    #line 342 
    case 258: 
              #line 342 
    ;
    #line 343 
    io->data = bnx2_reg_rd_ind(bp,io->offset);
    #line 344 
    break;
    #line 345 
    case 259: 
              #line 345 
    ;
    #line 346 
    bnx2_ctx_wr(bp,io->cid_addr,io->offset,io->data);
    #line 347 
    break;
    #line 348 
    default: 
             #line 348 
    ;
    #line 349 
    return -22;
  }
  #line 351 
  return 0;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_setup_cnic_irq_info(struct bnx2 *bp)
{
  #line 358 
  int sb_id;
  #line 356 
  struct cnic_eth_dev *cp = & bp->cnic_eth_dev;
  #line 357 
  struct bnx2_napi *bnapi = & bp->bnx2_napi[0];
  #line 360 
  if ((bp->flags & 1024U) != 0U) {
    #line 361 
    cp->drv_state |= 2U;
    #line 362 
    bnapi->cnic_present = 0;
    #line 363 
    sb_id = bp->irq_nvecs;
    #line 364 
    cp->irq_arr[0].irq_flags |= 1U;
  }
  else {
    #line 366 
    cp->drv_state &= 4294967293U;
    #line 367 
    bnapi->cnic_tag = bnapi->last_status_idx;
    #line 368 
    bnapi->cnic_present = 1;
    #line 369 
    sb_id = 0;
    #line 370 
    cp->irq_arr[0].irq_flags &= 4294967294U;
  }
  #line 373 
  cp->irq_arr[0].vector = bp->irq_tbl[sb_id].vector;
  #line 374 
  cp->irq_arr[0].status_blk = (void *)((unsigned long)bnapi->status_blk.msi + (unsigned long)(sb_id * 128));
  #line 377 
  cp->irq_arr[0].status_blk_num = (unsigned int)sb_id;
  #line 378 
  cp->num_irq = 1;
  #line 379 
  return;
}

#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_register_cnic(struct net_device *dev, struct cnic_ops *ops, void *data)
{
  #line 384 
  struct bnx2 *bp = netdev_priv(dev);
  #line 385 
  struct cnic_eth_dev *cp = & bp->cnic_eth_dev;
  #line 387 
  if (ops == (struct cnic_ops *)0) 
                                   #line 388 
                                   return -22;
  #line 390 
  if ((cp->drv_state & 1U) != 0U) 
                                  #line 391 
                                  return -16;
  #line 393 
  if (bnx2_reg_rd_ind(bp,1704064U) == 0U) 
                                          #line 394 
                                          return -19;
  #line 396 
  bp->cnic_data = data;
  {
    #line 397 
    uintptr_t _r_a_p__v = (unsigned long)ops;
    #line 399 
    ldv_inline_asm();
    {
      #line 398 
      union __anonunion___u_1062 __u = {.__val = (struct cnic_ops *)_r_a_p__v};
      #line 397 
      __write_once_size((void *)(& bp->cnic_ops),(void *)(& __u.__c),8);
      #line 397 
      struct cnic_ops *tmp_4 = __u.__val;
    }
  }
  #line 399 
  cp->num_irq = 0;
  #line 400 
  cp->drv_state = 1U;
  #line 402 
  bnx2_setup_cnic_irq_info(bp);
  #line 404 
  return 0;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_unregister_cnic(struct net_device *dev)
{
  #line 409 
  struct bnx2 *bp = netdev_priv(dev);
  #line 410 
  struct bnx2_napi *bnapi = & bp->bnx2_napi[0];
  #line 411 
  struct cnic_eth_dev *cp = & bp->cnic_eth_dev;
  #line 413 
  cif_mutex_lock_cnic_lock_of_bnx2(& bp->cnic_lock);
  #line 414 
  cp->drv_state = 0U;
  #line 415 
  bnapi->cnic_present = 0;
  {
    #line 417 
    union __anonunion___u_1064 __u = {.__val = (struct cnic_ops *)0};
    #line 416 
    __write_once_size((void *)(& bp->cnic_ops),(void *)(& __u.__c),8);
    #line 416 
    struct cnic_ops *tmp_2 = __u.__val;
  }
  #line 417 
  cif_mutex_unlock_cnic_lock_of_bnx2(& bp->cnic_lock);
  #line 418 
  synchronize_rcu();
  #line 419 
  return 0;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct cnic_eth_dev *bnx2_cnic_probe(struct net_device *dev)
{
  #line 424 
  struct bnx2 *bp = netdev_priv(dev);
  #line 425 
  struct cnic_eth_dev *cp = & bp->cnic_eth_dev;
  #line 427 
  if (cp->max_iscsi_conn == 0U) 
                                #line 428 
                                return (struct cnic_eth_dev *)0;
  #line 430 
  cp->drv_owner = & __this_module;
  #line 431 
  cp->chip_id = bp->chip_id;
  #line 432 
  cp->pdev = bp->pdev;
  #line 433 
  cp->io_base = bp->regview;
  #line 434 
  cp->drv_ctl = & bnx2_drv_ctl;
  #line 435 
  cp->drv_register_cnic = & bnx2_register_cnic;
  #line 436 
  cp->drv_unregister_cnic = & bnx2_unregister_cnic;
  #line 438 
  return cp;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_cnic_stop(struct bnx2 *bp)
{
  #line 444 
  struct cnic_ops *c_ops;
  #line 445 
  struct cnic_ctl_info info;
  #line 447 
  cif_mutex_lock_cnic_lock_of_bnx2(& bp->cnic_lock);
  {
    #line 448 
    bool __warned;
    #line 448 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 448 
      if (! __warned) {
        #line 448 
        if (lock_is_held(& bp->cnic_lock.dep_map) == 0) {
          #line 448 
          __warned = (_Bool)1;
          #line 448 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c",448,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 448 
  c_ops = bp->cnic_ops;
  #line 450 
  if (c_ops != (struct cnic_ops *)0) {
    #line 451 
    info.cmd = 1;
    #line 452 
    (*(c_ops->cnic_ctl))(bp->cnic_data,& info);
  }
  #line 454 
  cif_mutex_unlock_cnic_lock_of_bnx2(& bp->cnic_lock);
  #line 455 
  return;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_cnic_start(struct bnx2 *bp)
{
  #line 460 
  struct cnic_ops *c_ops;
  #line 461 
  struct cnic_ctl_info info;
  #line 463 
  cif_mutex_lock_cnic_lock_of_bnx2(& bp->cnic_lock);
  {
    #line 464 
    bool __warned;
    #line 464 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 464 
      if (! __warned) {
        #line 464 
        if (lock_is_held(& bp->cnic_lock.dep_map) == 0) {
          #line 464 
          __warned = (_Bool)1;
          #line 464 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c",464,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 464 
  c_ops = bp->cnic_ops;
  #line 466 
  if (c_ops != (struct cnic_ops *)0) {
    #line 467 
    if ((bp->flags & 1024U) == 0U) {
      #line 468 
      struct bnx2_napi *bnapi = & bp->bnx2_napi[0];
      #line 470 
      bnapi->cnic_tag = bnapi->last_status_idx;
    }
    #line 472 
    info.cmd = 2;
    #line 473 
    (*(c_ops->cnic_ctl))(bp->cnic_data,& info);
  }
  #line 475 
  cif_mutex_unlock_cnic_lock_of_bnx2(& bp->cnic_lock);
  #line 476 
  return;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_read_phy(struct bnx2 *bp, u32 reg, u32 *val)
{
  #line 495 
  u32 val1;
  #line 496 
  int i;
  #line 496 
  int ret;
  #line 498 
  if ((bp->phy_flags & 256U) != 0U) {
    #line 499 
    val1 = readl(bp->regview + 5300U);
    #line 500 
    val1 &= 4294967279U;
    #line 502 
    writel(val1,bp->regview + 5300U);
    #line 503 
    readl(bp->regview + 5300U);
    #line 505 
    __const_udelay(171800UL);
  }
  #line 508 
  val1 = ((bp->phy_addr << 21) | (reg << 16)) | 1744830464U;
  #line 511 
  writel(val1,bp->regview + 5292U);
  #line 513 
  i = 0;
  #line 513 
  while (i <= 49) {
    #line 514 
    __const_udelay(42950UL);
    #line 516 
    val1 = readl(bp->regview + 5292U);
    #line 517 
    if (((long)val1 & 536870912L) == 0L) {
      #line 518 
      __const_udelay(21475UL);
      #line 520 
      val1 = readl(bp->regview + 5292U);
      #line 521 
      val1 &= 65535U;
      #line 523 
      break;
    }
    #line 513 
    i ++;
  }
  #line 527 
  if (((long)val1 & 536870912L) != 0L) {
    #line 528 
    *val = 0U;
    #line 529 
    ret = -16;
  }
  else {
    #line 532 
    *val = val1;
    #line 533 
    ret = 0;
  }
  #line 536 
  if ((bp->phy_flags & 256U) != 0U) {
    #line 537 
    val1 = readl(bp->regview + 5300U);
    #line 538 
    val1 |= 16U;
    #line 540 
    writel(val1,bp->regview + 5300U);
    #line 541 
    readl(bp->regview + 5300U);
    #line 543 
    __const_udelay(171800UL);
  }
  #line 546 
  return ret;
}

#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_write_phy(struct bnx2 *bp, u32 reg, u32 val)
{
  #line 552 
  u32 val1;
  #line 553 
  int i;
  #line 553 
  int ret;
  #line 555 
  if ((bp->phy_flags & 256U) != 0U) {
    #line 556 
    val1 = readl(bp->regview + 5300U);
    #line 557 
    val1 &= 4294967279U;
    #line 559 
    writel(val1,bp->regview + 5300U);
    #line 560 
    readl(bp->regview + 5300U);
    #line 562 
    __const_udelay(171800UL);
  }
  #line 565 
  val1 = (((bp->phy_addr << 21) | (reg << 16)) | val) | 1677721600U;
  #line 568 
  writel(val1,bp->regview + 5292U);
  #line 570 
  i = 0;
  #line 570 
  while (i <= 49) {
    #line 571 
    __const_udelay(42950UL);
    #line 573 
    val1 = readl(bp->regview + 5292U);
    #line 574 
    if (((long)val1 & 536870912L) == 0L) {
      #line 575 
      __const_udelay(21475UL);
      #line 576 
      break;
    }
    #line 570 
    i ++;
  }
  #line 580 
  if (((long)val1 & 536870912L) != 0L) 
                                       #line 581 
                                       ret = -16; else 
                                                       #line 583 
                                                       ret = 0;
  #line 585 
  if ((bp->phy_flags & 256U) != 0U) {
    #line 586 
    val1 = readl(bp->regview + 5300U);
    #line 587 
    val1 |= 16U;
    #line 589 
    writel(val1,bp->regview + 5300U);
    #line 590 
    readl(bp->regview + 5300U);
    #line 592 
    __const_udelay(171800UL);
  }
  #line 595 
  return ret;
}

#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_disable_int(struct bnx2 *bp)
{
  #line 601 
  int i;
  #line 602 
  struct bnx2_napi *bnapi;
  #line 604 
  i = 0;
  #line 604 
  while (bp->irq_nvecs > i) {
    #line 605 
    bnapi = & bp->bnx2_napi[i];
    #line 606 
    writel(bnapi->int_num | 262144U,bp->regview + 132U);
    #line 604 
    i ++;
  }
  #line 609 
  readl(bp->regview + 132U);
  #line 610 
  return;
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_enable_int(struct bnx2 *bp)
{
  #line 615 
  int i;
  #line 616 
  struct bnx2_napi *bnapi;
  #line 618 
  i = 0;
  #line 618 
  while (bp->irq_nvecs > i) {
    #line 619 
    bnapi = & bp->bnx2_napi[i];
    #line 621 
    writel((bnapi->int_num | bnapi->last_status_idx) | 327680U,bp->regview + 132U);
    #line 626 
    writel((bnapi->int_num | bnapi->last_status_idx) | 65536U,bp->regview + 132U);
    #line 618 
    i ++;
  }
  #line 630 
  writel(bp->hc_cmd | 65536U,bp->regview + 26624U);
  #line 631 
  return;
}

#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_disable_int_sync(struct bnx2 *bp)
{
  #line 636 
  int i;
  #line 638 
  atomic_inc(& bp->intr_sem);
  #line 639 
  if (! netif_running(bp->dev)) 
                                #line 640 
                                return;
  #line 642 
  bnx2_disable_int(bp);
  #line 643 
  i = 0;
  #line 643 
  while (bp->irq_nvecs > i) {
    #line 644 
    synchronize_irq(bp->irq_tbl[i].vector);
    #line 643 
    i ++;
  }
  #line 645 
  return;
}

#line 648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_napi_disable(struct bnx2 *bp)
{
  #line 650 
  int i;
  #line 652 
  i = 0;
  #line 652 
  while (bp->irq_nvecs > i) {
    #line 653 
    napi_disable(& bp->bnx2_napi[i].napi);
    #line 652 
    i ++;
  }
  #line 654 
  return;
}

#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_napi_enable(struct bnx2 *bp)
{
  #line 659 
  int i;
  #line 661 
  i = 0;
  #line 661 
  while (bp->irq_nvecs > i) {
    #line 662 
    napi_enable(& bp->bnx2_napi[i].napi);
    #line 661 
    i ++;
  }
  #line 663 
  return;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_netif_stop(struct bnx2 *bp, bool stop_cnic)
{
  #line 668 
  if ((int)stop_cnic != 0) 
                           #line 669 
                           bnx2_cnic_stop(bp);
  #line 670 
  if ((int)netif_running(bp->dev) != 0) {
    #line 671 
    bnx2_napi_disable(bp);
    #line 672 
    netif_tx_disable(bp->dev);
  }
  #line 674 
  bnx2_disable_int_sync(bp);
  #line 675 
  netif_carrier_off(bp->dev);
  #line 676 
  return;
}

#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_netif_start(struct bnx2 *bp, bool start_cnic)
{
  #line 681 
  if ((int)atomic_dec_and_test(& bp->intr_sem) != 0) {
    #line 682 
    if ((int)netif_running(bp->dev) != 0) {
      #line 683 
      netif_tx_wake_all_queues(bp->dev);
      #line 684 
      cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
      #line 685 
      if ((unsigned int)bp->link_up != 0U) 
                                           #line 686 
                                           netif_carrier_on(bp->dev);
      #line 687 
      cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
      #line 688 
      bnx2_napi_enable(bp);
      #line 689 
      bnx2_enable_int(bp);
      #line 690 
      if ((int)start_cnic != 0) 
                                #line 691 
                                bnx2_cnic_start(bp);
    }
  }
  #line 693 
  return;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_free_tx_mem(struct bnx2 *bp)
{
  #line 699 
  int i;
  #line 701 
  i = 0;
  #line 701 
  while ((int)bp->num_tx_rings > i) {
    {
      #line 702 
      struct bnx2_napi *bnapi = & bp->bnx2_napi[i];
      #line 703 
      struct bnx2_tx_ring_info *txr = & bnapi->tx_ring;
      #line 705 
      if (txr->tx_desc_ring != (struct bnx2_tx_bd *)0) {
        #line 706 
        dma_free_coherent(& (bp->pdev)->dev,4096UL,(void *)txr->tx_desc_ring,txr->tx_desc_mapping);
        #line 709 
        txr->tx_desc_ring = (struct bnx2_tx_bd *)0;
      }
      #line 711 
      kfree((void *)txr->tx_buf_ring);
      #line 712 
      txr->tx_buf_ring = (struct bnx2_sw_tx_bd *)0;
    }
    #line 701 
    i ++;
  }
  #line 714 
  return;
}

#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_free_rx_mem(struct bnx2 *bp)
{
  #line 719 
  int i;
  #line 721 
  i = 0;
  #line 721 
  while ((int)bp->num_rx_rings > i) {
    {
      #line 724 
      int j;
      #line 722 
      struct bnx2_napi *bnapi = & bp->bnx2_napi[i];
      #line 723 
      struct bnx2_rx_ring_info *rxr = & bnapi->rx_ring;
      #line 726 
      j = 0;
      #line 726 
      while (bp->rx_max_ring > j) {
        #line 727 
        if (rxr->rx_desc_ring[j] != (struct bnx2_rx_bd *)0) 
                                                            #line 728 
                                                            dma_free_coherent(& (bp->pdev)->dev,4096UL,(void *)rxr->rx_desc_ring[j],rxr->rx_desc_mapping[j]);
        #line 731 
        rxr->rx_desc_ring[j] = (struct bnx2_rx_bd *)0;
        #line 726 
        j ++;
      }
      #line 733 
      cif_vfree((void *)rxr->rx_buf_ring);
      #line 734 
      rxr->rx_buf_ring = (struct bnx2_sw_bd *)0;
      #line 736 
      j = 0;
      #line 736 
      while (bp->rx_max_pg_ring > j) {
        #line 737 
        if (rxr->rx_pg_desc_ring[j] != (struct bnx2_rx_bd *)0) 
                                                               #line 738 
                                                               dma_free_coherent(& (bp->pdev)->dev,4096UL,(void *)rxr->rx_pg_desc_ring[j],rxr->rx_pg_desc_mapping[j]);
        #line 741 
        rxr->rx_pg_desc_ring[j] = (struct bnx2_rx_bd *)0;
        #line 736 
        j ++;
      }
      #line 743 
      cif_vfree((void *)rxr->rx_pg_ring);
      #line 744 
      rxr->rx_pg_ring = (struct bnx2_sw_pg *)0;
    }
    #line 721 
    i ++;
  }
  #line 746 
  return;
}

#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_alloc_tx_mem(struct bnx2 *bp)
{
  #line 751 
  int i;
  #line 753 
  i = 0;
  #line 753 
  while ((int)bp->num_tx_rings > i) {
    {
      #line 754 
      struct bnx2_napi *bnapi = & bp->bnx2_napi[i];
      #line 755 
      struct bnx2_tx_ring_info *txr = & bnapi->tx_ring;
      #line 757 
      txr->tx_buf_ring = (struct bnx2_sw_tx_bd *)kzalloc(6144UL,3264U);
      #line 758 
      if (txr->tx_buf_ring == (struct bnx2_sw_tx_bd *)0) 
                                                         #line 759 
                                                         return -12;
      #line 762 
      txr->tx_desc_ring = (struct bnx2_tx_bd *)dma_alloc_coherent(& (bp->pdev)->dev,4096UL,& txr->tx_desc_mapping,3264U);
      #line 764 
      if (txr->tx_desc_ring == (struct bnx2_tx_bd *)0) 
                                                       #line 765 
                                                       return -12;
    }
    #line 753 
    i ++;
  }
  #line 767 
  return 0;
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_alloc_rx_mem(struct bnx2 *bp)
{
  #line 773 
  int i;
  #line 775 
  i = 0;
  #line 775 
  while ((int)bp->num_rx_rings > i) {
    {
      #line 778 
      int j;
      #line 776 
      struct bnx2_napi *bnapi = & bp->bnx2_napi[i];
      #line 777 
      struct bnx2_rx_ring_info *rxr = & bnapi->rx_ring;
      #line 780 
      rxr->rx_buf_ring = (struct bnx2_sw_bd *)cif_vzalloc(array_size(4096UL,(unsigned long)bp->rx_max_ring));
      #line 782 
      if (rxr->rx_buf_ring == (struct bnx2_sw_bd *)0) 
                                                      #line 783 
                                                      return -12;
      #line 785 
      j = 0;
      #line 785 
      while (bp->rx_max_ring > j) {
        #line 787 
        rxr->rx_desc_ring[j] = (struct bnx2_rx_bd *)dma_alloc_coherent(& (bp->pdev)->dev,4096UL,& rxr->rx_desc_mapping[j],3264U);
        #line 791 
        if (rxr->rx_desc_ring[j] == (struct bnx2_rx_bd *)0) 
                                                            #line 792 
                                                            return -12;
        #line 785 
        j ++;
      }
      #line 796 
      if (bp->rx_pg_ring_size != 0) {
        #line 797 
        rxr->rx_pg_ring = (struct bnx2_sw_pg *)cif_vzalloc(array_size(4096UL,(unsigned long)bp->rx_max_pg_ring));
        #line 800 
        if (rxr->rx_pg_ring == (struct bnx2_sw_pg *)0) 
                                                       #line 801 
                                                       return -12;
      }
      #line 805 
      j = 0;
      #line 805 
      while (bp->rx_max_pg_ring > j) {
        #line 807 
        rxr->rx_pg_desc_ring[j] = (struct bnx2_rx_bd *)dma_alloc_coherent(& (bp->pdev)->dev,4096UL,& rxr->rx_pg_desc_mapping[j],3264U);
        #line 811 
        if (rxr->rx_pg_desc_ring[j] == (struct bnx2_rx_bd *)0) 
                                                               #line 812 
                                                               return -12;
        #line 805 
        j ++;
      }
    }
    #line 775 
    i ++;
  }
  #line 816 
  return 0;
}

#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_free_stats_blk(struct net_device *dev)
{
  #line 822 
  struct bnx2 *bp = netdev_priv(dev);
  #line 824 
  if (bp->status_blk != (void *)0) {
    #line 825 
    dma_free_coherent(& (bp->pdev)->dev,(unsigned long)bp->status_stats_size,bp->status_blk,bp->status_blk_mapping);
    #line 828 
    bp->status_blk = (void *)0;
    #line 829 
    bp->stats_blk = (struct statistics_block *)0;
  }
  #line 831 
  return;
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_alloc_stats_blk(struct net_device *dev)
{
  #line 836 
  int status_blk_size;
  #line 837 
  void *status_blk;
  #line 838 
  struct bnx2 *bp = netdev_priv(dev);
  #line 841 
  status_blk_size = 64;
  #line 842 
  if ((bp->flags & 4U) != 0U) 
                              #line 843 
                              status_blk_size = 1152;
  #line 845 
  bp->status_stats_size = (int)((unsigned int)status_blk_size + 324U);
  #line 847 
  status_blk = dma_alloc_coherent(& (bp->pdev)->dev,(unsigned long)bp->status_stats_size,& bp->status_blk_mapping,3264U);
  #line 849 
  if (status_blk == (void *)0) 
                               #line 850 
                               return -12;
  #line 852 
  bp->status_blk = status_blk;
  #line 853 
  bp->stats_blk = (struct statistics_block *)(status_blk + (unsigned long)status_blk_size);
  #line 854 
  bp->stats_blk_mapping = bp->status_blk_mapping + (unsigned long long)status_blk_size;
  #line 856 
  return 0;
}

#line 860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_free_mem(struct bnx2 *bp)
{
  #line 862 
  int i;
  #line 863 
  struct bnx2_napi *bnapi = & bp->bnx2_napi[0];
  #line 865 
  bnx2_free_tx_mem(bp);
  #line 866 
  bnx2_free_rx_mem(bp);
  #line 868 
  i = 0;
  #line 868 
  while (bp->ctx_pages > i) {
    #line 869 
    if (bp->ctx_blk[i] != (void *)0) {
      #line 870 
      dma_free_coherent(& (bp->pdev)->dev,4096UL,bp->ctx_blk[i],bp->ctx_blk_mapping[i]);
      #line 873 
      bp->ctx_blk[i] = (void *)0;
    }
    #line 868 
    i ++;
  }
  #line 877 
  if (bnapi->status_blk.msi != (struct status_block *)0) 
                                                         #line 878 
                                                         bnapi->status_blk.msi = (struct status_block *)0;
  #line 879 
  return;
}

#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_alloc_mem(struct bnx2 *bp)
{
  #line 884 
  int i;
  #line 884 
  int err;
  #line 885 
  struct bnx2_napi *bnapi;
  #line 887 
  bnapi = & bp->bnx2_napi[0];
  #line 888 
  bnapi->status_blk.msi = (struct status_block *)bp->status_blk;
  #line 889 
  bnapi->hw_tx_cons_ptr = & (bnapi->status_blk.msi)->status_tx_quick_consumer_index0;
  #line 891 
  bnapi->hw_rx_cons_ptr = & (bnapi->status_blk.msi)->status_rx_quick_consumer_index0;
  #line 893 
  if ((bp->flags & 4U) != 0U) {
    #line 894 
    i = 1;
    #line 894 
    while (bp->irq_nvecs > i) {
      {
        #line 895 
        struct status_block_msix *sblk;
        #line 897 
        bnapi = & bp->bnx2_napi[i];
        #line 899 
        sblk = (struct status_block_msix *)(bp->status_blk + (unsigned long)(i * 128));
        #line 900 
        bnapi->status_blk.msix = sblk;
        #line 901 
        bnapi->hw_tx_cons_ptr = & sblk->status_tx_quick_consumer_index;
        #line 903 
        bnapi->hw_rx_cons_ptr = & sblk->status_rx_quick_consumer_index;
        #line 905 
        bnapi->int_num = (unsigned int)(i << 24);
      }
      #line 894 
      i ++;
    }
  }
  #line 909 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 910 
    bp->ctx_pages = 2;
    #line 911 
    if (bp->ctx_pages == 0) 
                            #line 912 
                            bp->ctx_pages = 1;
    #line 913 
    i = 0;
    #line 913 
    while (bp->ctx_pages > i) {
      #line 914 
      bp->ctx_blk[i] = dma_alloc_coherent(& (bp->pdev)->dev,4096UL,& bp->ctx_blk_mapping[i],3264U);
      #line 918 
      if (bp->ctx_blk[i] == (void *)0) 
                                       #line 919 
                                       goto alloc_mem_err;
      #line 913 
      i ++;
    }
  }
  #line 923 
  err = bnx2_alloc_rx_mem(bp);
  #line 924 
  if (err != 0) 
                #line 925 
                goto alloc_mem_err;
  #line 927 
  err = bnx2_alloc_tx_mem(bp);
  #line 928 
  if (err != 0) 
                #line 929 
                goto alloc_mem_err;
  #line 931 
  return 0;
  #line 933 
  alloc_mem_err: 
                 #line 933 
  ;
  #line 934 
  bnx2_free_mem(bp);
  #line 935 
  return -12;
}

#line 939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_report_fw_link(struct bnx2 *bp)
{
  #line 941 
  u32 fw_link_status = 0U;
  #line 943 
  if ((bp->phy_flags & 2048U) != 0U) 
                                     #line 944 
                                     return;
  #line 946 
  if ((unsigned int)bp->link_up != 0U) {
    #line 947 
    u32 bmsr;
    #line 949 
    switch ((int)bp->line_speed) {
      #line 950 
      case 10: 
               #line 950 
      ;
      #line 951 
      if ((unsigned int)bp->duplex == 0U) 
                                          #line 952 
                                          fw_link_status = 2U; else 
                                                                    #line 954 
                                                                    fw_link_status = 4U;
      #line 955 
      break;
      #line 956 
      case 100: 
                #line 956 
      ;
      #line 957 
      if ((unsigned int)bp->duplex == 0U) 
                                          #line 958 
                                          fw_link_status = 6U; else 
                                                                    #line 960 
                                                                    fw_link_status = 10U;
      #line 961 
      break;
      #line 962 
      case 1000: 
                 #line 962 
      ;
      #line 963 
      if ((unsigned int)bp->duplex == 0U) 
                                          #line 964 
                                          fw_link_status = 12U; else 
                                                                  #line 966 
                                                                  fw_link_status = 14U;
      #line 967 
      break;
      #line 968 
      case 2500: 
                 #line 968 
      ;
      #line 969 
      if ((unsigned int)bp->duplex == 0U) 
                                          #line 970 
                                          fw_link_status = 16U; else 
                                                                  #line 972 
                                                                  fw_link_status = 18U;
      #line 973 
      break;
    }
    #line 976 
    fw_link_status |= 1U;
    #line 978 
    if ((unsigned int)bp->autoneg != 0U) {
      #line 979 
      fw_link_status |= 32U;
      #line 981 
      bnx2_read_phy(bp,bp->mii_bmsr,& bmsr);
      #line 982 
      bnx2_read_phy(bp,bp->mii_bmsr,& bmsr);
      #line 984 
      if ((bmsr & 32U) == 0U || (bp->phy_flags & 4U) != 0U) 
                                                            #line 986 
                                                            fw_link_status |= 128U; else 
                                                                    #line 988 
                                                                    fw_link_status |= 64U;
    }
  }
  else 
       #line 992 
       fw_link_status = 0U;
  #line 994 
  bnx2_shmem_wr(bp,12U,fw_link_status);
  #line 995 
  return;
}

#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static char *bnx2_xceiver_str(struct bnx2 *bp)
{
  #line 1000 
  char *tmp;
  #line 1000 
  char *tmp_0;
  #line 1000 
  if ((unsigned int)bp->phy_port != 3U) {
    #line 1000 
    if ((bp->phy_flags & 1U) != 0U) 
                                    #line 1000 
                                    tmp = (char *)"Remote Copper"; else 
                                                                    #line 1000 
                                                                    tmp = (char *)"Copper";
    #line 1000 
    tmp_0 = tmp;
  }
  else 
       #line 1000 
       tmp_0 = (char *)"SerDes";
  #line 1000 
  return tmp_0;
}

#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_report_link(struct bnx2 *bp)
{
  #line 1008 
  if ((unsigned int)bp->link_up != 0U) {
    #line 1012 
    char *tmp;
    #line 1009 
    netif_carrier_on(bp->dev);
    #line 1012 
    if ((unsigned int)bp->duplex == 1U) 
                                        #line 1012 
                                        tmp = (char *)"full"; else 
                                                                   #line 1012 
                                                                   tmp = (char *)"half";
    #line 1010 
    ;
    #line 1010 
    ;
    #line 1010 
    netdev_info(bp->dev,(char *)"NIC %s Link is Up, %d Mbps %s duplex",bnx2_xceiver_str(bp),(int)bp->line_speed,tmp);
    #line 1015 
    if ((unsigned int)bp->flow_ctrl != 0U) {
      #line 1016 
      if (((int)bp->flow_ctrl & 2) != 0) {
        #line 1017 
        printk((char *)"\001");
        #line 1018 
        if (((int)bp->flow_ctrl & 1) != 0) 
                                           #line 1019 
                                           printk((char *)"\001");
      }
      else 
           #line 1022 
           printk((char *)"\001");
      #line 1024 
      printk((char *)"\001");
    }
    #line 1026 
    printk((char *)"\001");
  }
  else {
    #line 1028 
    netif_carrier_off(bp->dev);
    #line 1029 
    ;
    #line 1029 
    netdev_err(bp->dev,(char *)"NIC %s Link is Down\n",bnx2_xceiver_str(bp));
  }
  #line 1033 
  bnx2_report_fw_link(bp);
  #line 1034 
  return;
}

#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_resolve_flow_ctrl(struct bnx2 *bp)
{
  #line 1039 
  u32 local_adv;
  #line 1039 
  u32 remote_adv;
  #line 1041 
  bp->flow_ctrl = (unsigned char)0U;
  #line 1042 
  if (((int)bp->autoneg & 3) != 3) {
    #line 1045 
    if ((unsigned int)bp->duplex == 1U) 
                                        #line 1046 
                                        bp->flow_ctrl = bp->req_flow_ctrl;
    #line 1048 
    return;
  }
  #line 1051 
  if ((unsigned int)bp->duplex != 1U) 
                                      #line 1052 
                                      return;
  #line 1055 
  if ((bp->phy_flags & 1U) != 0U && (bp->chip_id & 4294901760U) == 1460142080U) {
    #line 1057 
    u32 val;
    #line 1059 
    bnx2_read_phy(bp,20U,& val);
    #line 1060 
    if ((val & 32U) != 0U) 
                           #line 1061 
                           bp->flow_ctrl = (unsigned char)((unsigned int)bp->flow_ctrl | 1U);
    #line 1062 
    if ((val & 64U) != 0U) 
                           #line 1063 
                           bp->flow_ctrl = (unsigned char)((unsigned int)bp->flow_ctrl | 2U);
    #line 1064 
    return;
  }
  #line 1067 
  bnx2_read_phy(bp,bp->mii_adv,& local_adv);
  #line 1068 
  bnx2_read_phy(bp,bp->mii_lpa,& remote_adv);
  #line 1070 
  if ((bp->phy_flags & 1U) != 0U) {
    #line 1071 
    u32 new_local_adv = 0U;
    #line 1072 
    u32 new_remote_adv = 0U;
    #line 1074 
    if ((local_adv & 128U) != 0U) 
                                  #line 1075 
                                  new_local_adv |= 1024U;
    #line 1076 
    if ((local_adv & 256U) != 0U) 
                                  #line 1077 
                                  new_local_adv |= 2048U;
    #line 1078 
    if ((remote_adv & 128U) != 0U) 
                                   #line 1079 
                                   new_remote_adv |= 1024U;
    #line 1080 
    if ((remote_adv & 256U) != 0U) 
                                   #line 1081 
                                   new_remote_adv |= 2048U;
    #line 1083 
    local_adv = new_local_adv;
    #line 1084 
    remote_adv = new_remote_adv;
  }
  #line 1088 
  if ((local_adv & 1024U) != 0U) {
    #line 1089 
    if ((local_adv & 2048U) != 0U) {
      #line 1090 
      if ((remote_adv & 1024U) != 0U) 
                                      #line 1091 
                                      bp->flow_ctrl = (unsigned char)3U;
      else 
        #line 1093 
        if ((remote_adv & 2048U) != 0U) 
                                        #line 1094 
                                        bp->flow_ctrl = (unsigned char)2U;
    }
    else 
      #line 1098 
      if ((remote_adv & 1024U) != 0U) 
                                      #line 1099 
                                      bp->flow_ctrl = (unsigned char)3U;
  }
  else 
    #line 1103 
    if ((local_adv & 2048U) != 0U) 
      #line 1104 
      if ((remote_adv & 1024U) != 0U && (remote_adv & 2048U) != 0U) 
                                                                    #line 1107 
                                                                    bp->flow_ctrl = (unsigned char)1U;
  #line 1108 
  return;
}

#line 1113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_5709s_linkup(struct bnx2 *bp)
{
  #line 1115 
  u32 val;
  #line 1115 
  u32 speed;
  #line 1117 
  bp->link_up = (unsigned char)1U;
  #line 1119 
  bnx2_write_phy(bp,31U,33056U);
  #line 1120 
  bnx2_read_phy(bp,27U,& val);
  #line 1121 
  bnx2_write_phy(bp,31U,65504U);
  #line 1123 
  if (((int)bp->autoneg & 1) == 0) {
    #line 1124 
    bp->line_speed = bp->req_line_speed;
    #line 1125 
    bp->duplex = bp->req_duplex;
    #line 1126 
    return 0;
  }
  #line 1128 
  speed = val & 16128U;
  #line 1129 
  switch (speed) {
    #line 1130 
    case (u32)0: 
                 #line 1130 
    ;
    #line 1131 
    bp->line_speed = (unsigned short)10U;
    #line 1132 
    break;
    #line 1133 
    case (u32)256: 
                   #line 1133 
    ;
    #line 1134 
    bp->line_speed = (unsigned short)100U;
    #line 1135 
    break;
    #line 1136 
    case (u32)512: 
                   #line 1136 
    ;
    #line 1137 
    case (u32)3328: 
                    #line 1137 
    ;
    #line 1138 
    bp->line_speed = (unsigned short)1000U;
    #line 1139 
    break;
    #line 1140 
    case (u32)768: 
                   #line 1140 
    ;
    #line 1141 
    bp->line_speed = (unsigned short)2500U;
    #line 1142 
    break;
  }
  #line 1144 
  if ((val & 8U) != 0U) 
                        #line 1145 
                        bp->duplex = (unsigned char)1U; else 
                                                             #line 1147 
                                                             bp->duplex = (unsigned char)0U;
  #line 1148 
  return 0;
}

#line 1152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_5708s_linkup(struct bnx2 *bp)
{
  #line 1154 
  u32 val;
  #line 1156 
  bp->link_up = (unsigned char)1U;
  #line 1157 
  bnx2_read_phy(bp,20U,& val);
  #line 1158 
  switch (val & 24U) {
    #line 1159 
    case (unsigned int)0: 
                          #line 1159 
    ;
    #line 1160 
    bp->line_speed = (unsigned short)10U;
    #line 1161 
    break;
    #line 1162 
    case (unsigned int)8: 
                          #line 1162 
    ;
    #line 1163 
    bp->line_speed = (unsigned short)100U;
    #line 1164 
    break;
    #line 1165 
    case (unsigned int)16: 
                           #line 1165 
    ;
    #line 1166 
    bp->line_speed = (unsigned short)1000U;
    #line 1167 
    break;
    #line 1168 
    case (unsigned int)24: 
                           #line 1168 
    ;
    #line 1169 
    bp->line_speed = (unsigned short)2500U;
    #line 1170 
    break;
  }
  #line 1172 
  if ((val & 4U) != 0U) 
                        #line 1173 
                        bp->duplex = (unsigned char)1U; else 
                                                             #line 1175 
                                                             bp->duplex = (unsigned char)0U;
  #line 1177 
  return 0;
}

#line 1181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_5706s_linkup(struct bnx2 *bp)
{
  #line 1183 
  u32 bmcr;
  #line 1183 
  u32 local_adv;
  #line 1183 
  u32 remote_adv;
  #line 1183 
  u32 common;
  #line 1185 
  bp->link_up = (unsigned char)1U;
  #line 1186 
  bp->line_speed = (unsigned short)1000U;
  #line 1188 
  bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
  #line 1189 
  if ((bmcr & 256U) != 0U) 
                           #line 1190 
                           bp->duplex = (unsigned char)1U; else 
                                                                #line 1193 
                                                                bp->duplex = (unsigned char)0U;
  #line 1196 
  if ((bmcr & 4096U) == 0U) 
                            #line 1197 
                            return 0;
  #line 1200 
  bnx2_read_phy(bp,bp->mii_adv,& local_adv);
  #line 1201 
  bnx2_read_phy(bp,bp->mii_lpa,& remote_adv);
  #line 1203 
  common = local_adv & remote_adv;
  #line 1204 
  if ((common & 96U) != 0U) 
    #line 1206 
    if ((common & 32U) != 0U) 
                              #line 1207 
                              bp->duplex = (unsigned char)1U; else 
                                                                   #line 1210 
                                                                   bp->duplex = (unsigned char)0U;
  #line 1214 
  return 0;
}

#line 1218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_copper_linkup(struct bnx2 *bp)
{
  #line 1220 
  u32 bmcr;
  #line 1222 
  bp->phy_flags &= 4294950911U;
  #line 1224 
  bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
  #line 1225 
  if ((bmcr & 4096U) != 0U) {
    #line 1226 
    u32 local_adv;
    #line 1226 
    u32 remote_adv;
    #line 1226 
    u32 common;
    #line 1228 
    bnx2_read_phy(bp,9U,& local_adv);
    #line 1229 
    bnx2_read_phy(bp,10U,& remote_adv);
    #line 1231 
    common = (remote_adv >> 2) & local_adv;
    #line 1232 
    if ((common & 512U) != 0U) {
      #line 1233 
      bp->line_speed = (unsigned short)1000U;
      #line 1234 
      bp->duplex = (unsigned char)1U;
    }
    else 
      #line 1236 
      if ((common & 256U) != 0U) {
        #line 1237 
        bp->line_speed = (unsigned short)1000U;
        #line 1238 
        bp->duplex = (unsigned char)0U;
      }
      else {
        #line 1241 
        bnx2_read_phy(bp,bp->mii_adv,& local_adv);
        #line 1242 
        bnx2_read_phy(bp,bp->mii_lpa,& remote_adv);
        #line 1244 
        common = local_adv & remote_adv;
        #line 1245 
        if ((common & 256U) != 0U) {
          #line 1246 
          bp->line_speed = (unsigned short)100U;
          #line 1247 
          bp->duplex = (unsigned char)1U;
        }
        else 
          #line 1249 
          if ((common & 128U) != 0U) {
            #line 1250 
            bp->line_speed = (unsigned short)100U;
            #line 1251 
            bp->duplex = (unsigned char)0U;
          }
          else 
            #line 1253 
            if ((common & 64U) != 0U) {
              #line 1254 
              bp->line_speed = (unsigned short)10U;
              #line 1255 
              bp->duplex = (unsigned char)1U;
            }
            else 
              #line 1257 
              if ((common & 32U) != 0U) {
                #line 1258 
                bp->line_speed = (unsigned short)10U;
                #line 1259 
                bp->duplex = (unsigned char)0U;
              }
              else {
                #line 1262 
                bp->line_speed = (unsigned short)0U;
                #line 1263 
                bp->link_up = (unsigned char)0U;
              }
      }
  }
  else {
    #line 1268 
    if ((bmcr & 8192U) != 0U) 
                              #line 1269 
                              bp->line_speed = (unsigned short)100U; else 
                                                                    #line 1272 
                                                                    bp->line_speed = (unsigned short)10U;
    #line 1274 
    if ((bmcr & 256U) != 0U) 
                             #line 1275 
                             bp->duplex = (unsigned char)1U; else 
                                                                  #line 1278 
                                                                  bp->duplex = (unsigned char)0U;
  }
  #line 1282 
  if ((unsigned int)bp->link_up != 0U) {
    #line 1283 
    u32 ext_status;
    #line 1285 
    bnx2_read_phy(bp,17U,& ext_status);
    #line 1286 
    if ((ext_status & 8192U) != 0U) 
                                    #line 1287 
                                    bp->phy_flags |= 16384U;
  }
  #line 1290 
  return 0;
}

#line 1294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_rx_context(struct bnx2 *bp, u32 cid)
{
  #line 1296 
  u32 val;
  #line 1296 
  u32 rx_cid_addr = cid << 7;
  #line 1298 
  val = 268435456U;
  #line 1299 
  val |= 65536U;
  #line 1300 
  val |= 512U;
  #line 1302 
  if (((int)bp->flow_ctrl & 1) != 0) 
                                     #line 1303 
                                     val |= 255U;
  #line 1305 
  bnx2_ctx_wr(bp,rx_cid_addr,0U,val);
  #line 1306 
  return;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_all_rx_contexts(struct bnx2 *bp)
{
  #line 1311 
  int i;
  #line 1312 
  u32 cid;
  #line 1314 
  i = 0;
  #line 1314 
  cid = 0U;
  #line 1314 
  while ((int)bp->num_rx_rings > i) {
    #line 1315 
    if (i == 1) 
                #line 1316 
                cid = 4U;
    #line 1317 
    bnx2_init_rx_context(bp,cid);
    #line 1314 
    i ++;
    #line 1314 
    cid ++;
  }
  #line 1319 
  return;
}

#line 1322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_set_mac_link(struct bnx2 *bp)
{
  #line 1324 
  u32 val;
  #line 1326 
  writel(9760U,bp->regview + 5316U);
  #line 1327 
  if (((unsigned int)bp->link_up != 0U && (unsigned int)bp->line_speed == 1000U) && (unsigned int)bp->duplex == 0U) 
    #line 1329 
    writel(9983U,bp->regview + 5316U);
  #line 1333 
  val = readl(bp->regview + 5120U);
  #line 1335 
  val &= 4294965185U;
  #line 1339 
  if ((unsigned int)bp->link_up != 0U) 
    #line 1340 
    switch ((int)bp->line_speed) {
      #line 1341 
      case 10: 
               #line 1341 
      ;
      #line 1342 
      if ((bp->chip_id & 4294901760U) != 1460011008U) {
        #line 1343 
        val |= 12U;
        #line 1344 
        break;
      }
      #line 1347 
      case 100: 
                #line 1347 
      ;
      #line 1348 
      val |= 4U;
      #line 1349 
      break;
      #line 1350 
      case 2500: 
                 #line 1350 
      ;
      #line 1351 
      val |= 32U;
      #line 1353 
      case 1000: 
                 #line 1353 
      ;
      #line 1354 
      val |= 8U;
      #line 1355 
      break;
    }
  else 
       #line 1359 
       val |= 8U;
  #line 1363 
  if ((unsigned int)bp->duplex == 0U) 
                                      #line 1364 
                                      val |= 2U;
  #line 1365 
  writel(val,bp->regview + 5120U);
  #line 1368 
  bp->rx_mode &= 4294967291U;
  #line 1370 
  if (((int)bp->flow_ctrl & 2) != 0) 
                                     #line 1371 
                                     bp->rx_mode |= 4U;
  #line 1372 
  writel(bp->rx_mode,bp->regview + 5320U);
  #line 1375 
  val = readl(bp->regview + 5308U);
  #line 1376 
  val &= 4294967279U;
  #line 1378 
  if (((int)bp->flow_ctrl & 1) != 0) 
                                     #line 1379 
                                     val |= 16U;
  #line 1380 
  writel(val,bp->regview + 5308U);
  #line 1383 
  writel(4096U,bp->regview + 5124U);
  #line 1385 
  bnx2_init_all_rx_contexts(bp);
  #line 1386 
  return;
}

#line 1389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_enable_bmsr1(struct bnx2 *bp)
{
  #line 1391 
  if ((bp->phy_flags & 1U) != 0U && (bp->chip_id & 4294901760U) == 1460207616U) 
    #line 1393 
    bnx2_write_phy(bp,31U,33056U);
  #line 1394 
  return;
}

#line 1398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_disable_bmsr1(struct bnx2 *bp)
{
  #line 1400 
  if ((bp->phy_flags & 1U) != 0U && (bp->chip_id & 4294901760U) == 1460207616U) 
    #line 1402 
    bnx2_write_phy(bp,31U,65504U);
  #line 1403 
  return;
}

#line 1407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_test_and_enable_2g5(struct bnx2 *bp)
{
  #line 1409 
  u32 up1;
  #line 1410 
  int ret = 1;
  #line 1412 
  if ((bp->phy_flags & 8U) == 0U) 
                                  #line 1413 
                                  return 0;
  #line 1415 
  if (((int)bp->autoneg & 1) != 0) 
                                   #line 1416 
                                   bp->advertising |= 32768U;
  #line 1418 
  if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                  #line 1419 
                                                  bnx2_write_phy(bp,31U,33568U);
  #line 1421 
  bnx2_read_phy(bp,bp->mii_up1,& up1);
  #line 1422 
  if ((up1 & 1U) == 0U) {
    #line 1423 
    up1 |= 1U;
    #line 1424 
    bnx2_write_phy(bp,bp->mii_up1,up1);
    #line 1425 
    ret = 0;
  }
  #line 1428 
  if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                  #line 1429 
                                                  bnx2_write_phy(bp,31U,65504U);
  #line 1432 
  return ret;
}

#line 1436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_test_and_disable_2g5(struct bnx2 *bp)
{
  #line 1438 
  u32 up1;
  #line 1439 
  int ret = 0;
  #line 1441 
  if ((bp->phy_flags & 8U) == 0U) 
                                  #line 1442 
                                  return 0;
  #line 1444 
  if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                  #line 1445 
                                                  bnx2_write_phy(bp,31U,33568U);
  #line 1447 
  bnx2_read_phy(bp,bp->mii_up1,& up1);
  #line 1448 
  if ((up1 & 1U) != 0U) {
    #line 1449 
    up1 &= 4294967294U;
    #line 1450 
    bnx2_write_phy(bp,bp->mii_up1,up1);
    #line 1451 
    ret = 1;
  }
  #line 1454 
  if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                  #line 1455 
                                                  bnx2_write_phy(bp,31U,65504U);
  #line 1458 
  return ret;
}

#line 1462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_enable_forced_2g5(struct bnx2 *bp)
{
  #line 1465 
  int err;
  #line 1464 
  u32 bmcr = bmcr;
  #line 1467 
  if ((bp->phy_flags & 8U) == 0U) 
                                  #line 1468 
                                  return;
  #line 1470 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 1471 
    u32 val;
    #line 1473 
    bnx2_write_phy(bp,31U,33536U);
    #line 1475 
    if (bnx2_read_phy(bp,24U,& val) == 0) {
      #line 1476 
      val &= 4294967280U;
      #line 1477 
      val |= 16U;
      #line 1479 
      bnx2_write_phy(bp,24U,val);
    }
    #line 1482 
    bnx2_write_phy(bp,31U,65504U);
    #line 1484 
    err = bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
  }
  else 
    #line 1486 
    if ((bp->chip_id & 4294901760U) == 1460142080U) {
      #line 1487 
      err = bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
      #line 1488 
      if (err == 0) 
                    #line 1489 
                    bmcr |= 32U;
    }
    else 
         #line 1491 
         return;
  #line 1494 
  if (err != 0) 
                #line 1495 
                return;
  #line 1497 
  if (((int)bp->autoneg & 1) != 0) {
    #line 1498 
    bmcr &= 4294963199U;
    #line 1499 
    if ((unsigned int)bp->req_duplex == 1U) 
                                            #line 1500 
                                            bmcr |= 256U;
  }
  #line 1502 
  bnx2_write_phy(bp,bp->mii_bmcr,bmcr);
  #line 1503 
  return;
}

#line 1506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_disable_forced_2g5(struct bnx2 *bp)
{
  #line 1509 
  int err;
  #line 1508 
  u32 bmcr = bmcr;
  #line 1511 
  if ((bp->phy_flags & 8U) == 0U) 
                                  #line 1512 
                                  return;
  #line 1514 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 1515 
    u32 val;
    #line 1517 
    bnx2_write_phy(bp,31U,33536U);
    #line 1519 
    if (bnx2_read_phy(bp,24U,& val) == 0) {
      #line 1520 
      val &= 4294967279U;
      #line 1521 
      bnx2_write_phy(bp,24U,val);
    }
    #line 1524 
    bnx2_write_phy(bp,31U,65504U);
    #line 1526 
    err = bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
  }
  else 
    #line 1528 
    if ((bp->chip_id & 4294901760U) == 1460142080U) {
      #line 1529 
      err = bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
      #line 1530 
      if (err == 0) 
                    #line 1531 
                    bmcr &= 4294967263U;
    }
    else 
         #line 1533 
         return;
  #line 1536 
  if (err != 0) 
                #line 1537 
                return;
  #line 1539 
  if (((int)bp->autoneg & 1) != 0) 
                                   #line 1540 
                                   bmcr |= 4672U;
  #line 1541 
  bnx2_write_phy(bp,bp->mii_bmcr,bmcr);
  #line 1542 
  return;
}

#line 1545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_5706s_force_link_dn(struct bnx2 *bp, int start)
{
  #line 1547 
  u32 val;
  #line 1549 
  bnx2_write_phy(bp,23U,3843U);
  #line 1550 
  bnx2_read_phy(bp,21U,& val);
  #line 1551 
  if (start != 0) 
                  #line 1552 
                  bnx2_write_phy(bp,21U,val & 65295U); else 
                                                            #line 1554 
                                                            bnx2_write_phy(bp,21U,val | 192U);
  #line 1555 
  return;
}

#line 1558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_link(struct bnx2 *bp)
{
  #line 1560 
  u32 bmsr;
  #line 1561 
  u8 link_up;
  #line 1563 
  if ((unsigned int)bp->loopback + 255U <= 1U) {
    #line 1564 
    bp->link_up = (unsigned char)1U;
    #line 1565 
    return 0;
  }
  #line 1568 
  if ((bp->phy_flags & 2048U) != 0U) 
                                     #line 1569 
                                     return 0;
  #line 1571 
  link_up = bp->link_up;
  #line 1573 
  bnx2_enable_bmsr1(bp);
  #line 1574 
  bnx2_read_phy(bp,bp->mii_bmsr1,& bmsr);
  #line 1575 
  bnx2_read_phy(bp,bp->mii_bmsr1,& bmsr);
  #line 1576 
  bnx2_disable_bmsr1(bp);
  #line 1578 
  if ((bp->phy_flags & 1U) != 0U && (bp->chip_id & 4294901760U) == 1460011008U) {
    #line 1580 
    u32 val;
    #line 1580 
    u32 an_dbg;
    #line 1582 
    if ((bp->phy_flags & 4096U) != 0U) {
      #line 1583 
      bnx2_5706s_force_link_dn(bp,0);
      #line 1584 
      bp->phy_flags &= 4294963199U;
    }
    #line 1586 
    val = readl(bp->regview + 5124U);
    #line 1588 
    bnx2_write_phy(bp,28U,26624U);
    #line 1589 
    bnx2_read_phy(bp,28U,& an_dbg);
    #line 1590 
    bnx2_read_phy(bp,28U,& an_dbg);
    #line 1592 
    if (((long)val & 2048L) != 0L && (an_dbg & 2U) == 0U) 
                                                          #line 1594 
                                                          bmsr |= 4U; else 
                                                                    #line 1596 
                                                                    bmsr &= 4294967291U;
  }
  #line 1599 
  if ((bmsr & 4U) != 0U) {
    #line 1600 
    bp->link_up = (unsigned char)1U;
    #line 1602 
    if ((bp->phy_flags & 1U) != 0U) {
      #line 1603 
      if ((bp->chip_id & 4294901760U) == 1460011008U) 
                                                      #line 1604 
                                                      bnx2_5706s_linkup(bp);
      else 
        #line 1605 
        if ((bp->chip_id & 4294901760U) == 1460142080U) 
                                                        #line 1606 
                                                        bnx2_5708s_linkup(bp);
        else 
          #line 1607 
          if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                          #line 1608 
                                                          bnx2_5709s_linkup(bp);
    }
    else 
         #line 1611 
         bnx2_copper_linkup(bp);
    #line 1613 
    bnx2_resolve_flow_ctrl(bp);
  }
  else {
    #line 1616 
    if ((bp->phy_flags & 1U) != 0U && ((int)bp->autoneg & 1) != 0) 
                                                                   #line 1618 
                                                                   bnx2_disable_forced_2g5(bp);
    #line 1620 
    if ((bp->phy_flags & 4U) != 0U) {
      #line 1621 
      u32 bmcr;
      #line 1623 
      bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
      #line 1624 
      bmcr |= 4096U;
      #line 1625 
      bnx2_write_phy(bp,bp->mii_bmcr,bmcr);
      #line 1627 
      bp->phy_flags &= 4294967291U;
    }
    #line 1629 
    bp->link_up = (unsigned char)0U;
  }
  #line 1632 
  if ((int)bp->link_up != (int)link_up) 
                                        #line 1633 
                                        bnx2_report_link(bp);
  #line 1636 
  bnx2_set_mac_link(bp);
  #line 1638 
  return 0;
}

#line 1642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_reset_phy(struct bnx2 *bp)
{
  #line 1644 
  int i;
  #line 1645 
  u32 reg;
  #line 1647 
  bnx2_write_phy(bp,bp->mii_bmcr,32768U);
  #line 1650 
  i = 0;
  #line 1650 
  while (i <= 99) {
    #line 1651 
    __const_udelay(42950UL);
    #line 1653 
    bnx2_read_phy(bp,bp->mii_bmcr,& reg);
    #line 1654 
    if ((reg & 32768U) == 0U) {
      #line 1655 
      __const_udelay(85900UL);
      #line 1656 
      break;
    }
    #line 1650 
    i ++;
  }
  #line 1659 
  if (i == 100) 
                #line 1660 
                return -16;
  #line 1662 
  return 0;
}

#line 1666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static u32 bnx2_phy_get_pause_adv(struct bnx2 *bp)
{
  #line 1668 
  u32 adv = 0U;
  #line 1670 
  if (((int)bp->req_flow_ctrl & 3) == 3) 
    #line 1673 
    if ((bp->phy_flags & 1U) != 0U) 
                                    #line 1674 
                                    adv = 128U; else 
                                                     #line 1677 
                                                     adv = 1024U;
  else 
    #line 1680 
    if (((int)bp->req_flow_ctrl & 1) != 0) 
      #line 1681 
      if ((bp->phy_flags & 1U) != 0U) 
                                      #line 1682 
                                      adv = 256U; else 
                                                       #line 1685 
                                                       adv = 2048U;
    else 
      #line 1688 
      if (((int)bp->req_flow_ctrl & 2) != 0) 
        #line 1689 
        if ((bp->phy_flags & 1U) != 0U) 
                                        #line 1690 
                                        adv = 384U; else 
                                                         #line 1693 
                                                         adv = 3072U;
  #line 1696 
  return adv;
}

#line 1699 
#line 2526 
static int bnx2_fw_sync(struct bnx2 *bp, u32 msg_data, int ack, int silent);
#line 1702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_setup_remote_phy(struct bnx2 *bp, u8 port)
{
  #line 1706 
  u32 pause_adv;
  #line 1706 
  u32 speed_arg = 0U;
  #line 1708 
  pause_adv = bnx2_phy_get_pause_adv(bp);
  #line 1710 
  if (((int)bp->autoneg & 1) != 0) {
    #line 1711 
    speed_arg |= 1024U;
    #line 1712 
    if (((unsigned long)bp->advertising & 1UL) != 0UL) 
                                                       #line 1713 
                                                       speed_arg |= 1U;
    #line 1714 
    if (((unsigned long)bp->advertising & 2UL) != 0UL) 
                                                       #line 1715 
                                                       speed_arg |= 2U;
    #line 1716 
    if (((unsigned long)bp->advertising & 4UL) != 0UL) 
                                                       #line 1717 
                                                       speed_arg |= 4U;
    #line 1718 
    if (((unsigned long)bp->advertising & 8UL) != 0UL) 
                                                       #line 1719 
                                                       speed_arg |= 8U;
    #line 1720 
    if (((unsigned long)bp->advertising & 32UL) != 0UL) 
                                                        #line 1721 
                                                        speed_arg |= 32U;
    #line 1722 
    if (((unsigned long)bp->advertising & 32768UL) != 0UL) 
                                                           #line 1723 
                                                           speed_arg |= 128U;
  }
  else 
    #line 1725 
    if ((unsigned int)bp->req_line_speed == 2500U) 
                                                   #line 1726 
                                                   speed_arg = 128U;
    else 
      #line 1727 
      if ((unsigned int)bp->req_line_speed == 1000U) 
                                                     #line 1728 
                                                     speed_arg = 32U;
      else 
        #line 1729 
        if ((unsigned int)bp->req_line_speed == 100U) 
          #line 1730 
          if ((unsigned int)bp->req_duplex == 1U) 
                                                  #line 1731 
                                                  speed_arg = 8U; else 
                                                                    #line 1733 
                                                                    speed_arg = 4U;
        else 
          #line 1734 
          if ((unsigned int)bp->req_line_speed == 10U) 
            #line 1735 
            if ((unsigned int)bp->req_duplex == 1U) 
                                                    #line 1736 
                                                    speed_arg = 2U; else 
                                                                    #line 1738 
                                                                    speed_arg = 1U;
  #line 1742 
  if ((pause_adv & 1152U) != 0U) 
                                 #line 1743 
                                 speed_arg |= 4096U;
  #line 1744 
  if ((pause_adv & 2304U) != 0U) 
                                 #line 1745 
                                 speed_arg |= 8192U;
  #line 1747 
  if ((unsigned int)port == 0U) 
                                #line 1748 
                                speed_arg |= 18432U;
  #line 1751 
  bnx2_shmem_wr(bp,20U,speed_arg);
  #line 1753 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 1754 
  bnx2_fw_sync(bp,268435456U,1,0);
  #line 1755 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 1757 
  return 0;
}

#line 1761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_setup_serdes_phy(struct bnx2 *bp, u8 port)
{
  #line 1765 
  u32 adv;
  #line 1765 
  u32 bmcr;
  #line 1766 
  u32 new_adv = 0U;
  #line 1768 
  if ((bp->phy_flags & 2048U) != 0U) {
    #line 1769 
    return bnx2_setup_remote_phy(bp,(unsigned char)((int)port));
  }
  #line 1771 
  if (((int)bp->autoneg & 1) == 0) {
    #line 1772 
    u32 new_bmcr;
    #line 1773 
    int force_link_down = 0;
    #line 1775 
    if ((unsigned int)bp->req_line_speed == 2500U) {
      #line 1776 
      if (bnx2_test_and_enable_2g5(bp) == 0) 
                                             #line 1777 
                                             force_link_down = 1;
    }
    else 
      #line 1778 
      if ((unsigned int)bp->req_line_speed == 1000U) {
        #line 1779 
        if (bnx2_test_and_disable_2g5(bp) != 0) 
                                                #line 1780 
                                                force_link_down = 1;
      }
    #line 1782 
    bnx2_read_phy(bp,bp->mii_adv,& adv);
    #line 1783 
    adv &= 4294967199U;
    #line 1785 
    bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
    #line 1786 
    new_bmcr = bmcr & 4294963199U;
    #line 1787 
    new_bmcr |= 64U;
    #line 1789 
    if ((bp->chip_id & 4294901760U) == 1460207616U) {
      #line 1790 
      if ((unsigned int)bp->req_line_speed == 2500U) 
                                                     #line 1791 
                                                     bnx2_enable_forced_2g5(bp);
      else 
        #line 1792 
        if ((unsigned int)bp->req_line_speed == 1000U) {
          #line 1793 
          bnx2_disable_forced_2g5(bp);
          #line 1794 
          new_bmcr &= 4294959103U;
        }
    }
    else 
      #line 1797 
      if ((bp->chip_id & 4294901760U) == 1460142080U) 
        #line 1798 
        if ((unsigned int)bp->req_line_speed == 2500U) 
                                                       #line 1799 
                                                       new_bmcr |= 32U; else 
                                                                    #line 1801 
                                                                    new_bmcr = bmcr & 4294967263U;
    #line 1804 
    if ((unsigned int)bp->req_duplex == 1U) {
      #line 1805 
      adv |= 32U;
      #line 1806 
      new_bmcr |= 256U;
    }
    else {
      #line 1809 
      adv |= 64U;
      #line 1810 
      new_bmcr &= 4294967039U;
    }
    #line 1812 
    if (new_bmcr != bmcr || force_link_down != 0) {
      #line 1814 
      if ((unsigned int)bp->link_up != 0U) {
        #line 1815 
        bnx2_write_phy(bp,bp->mii_adv,adv & 4294967199U);
        #line 1818 
        bnx2_write_phy(bp,bp->mii_bmcr,bmcr | 4608U);
        #line 1821 
        bp->link_up = (unsigned char)0U;
        #line 1822 
        netif_carrier_off(bp->dev);
        #line 1823 
        bnx2_write_phy(bp,bp->mii_bmcr,new_bmcr);
        #line 1824 
        bnx2_report_link(bp);
      }
      #line 1826 
      bnx2_write_phy(bp,bp->mii_adv,adv);
      #line 1827 
      bnx2_write_phy(bp,bp->mii_bmcr,new_bmcr);
    }
    else {
      #line 1829 
      bnx2_resolve_flow_ctrl(bp);
      #line 1830 
      bnx2_set_mac_link(bp);
    }
    #line 1832 
    return 0;
  }
  #line 1835 
  bnx2_test_and_enable_2g5(bp);
  #line 1837 
  if (((unsigned long)bp->advertising & 32UL) != 0UL) 
                                                      #line 1838 
                                                      new_adv |= 32U;
  #line 1840 
  new_adv = bnx2_phy_get_pause_adv(bp) | new_adv;
  #line 1842 
  bnx2_read_phy(bp,bp->mii_adv,& adv);
  #line 1843 
  bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
  #line 1845 
  bp->serdes_an_pending = (unsigned char)0U;
  #line 1846 
  if (adv != new_adv || (bmcr & 4096U) == 0U) {
    #line 1848 
    if ((unsigned int)bp->link_up != 0U) {
      #line 1849 
      bnx2_write_phy(bp,bp->mii_bmcr,16384U);
      #line 1850 
      cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
      #line 1851 
      msleep(20U);
      #line 1852 
      cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
    }
    #line 1855 
    bnx2_write_phy(bp,bp->mii_adv,new_adv);
    #line 1856 
    bnx2_write_phy(bp,bp->mii_bmcr,bmcr | 4608U);
    #line 1866 
    bp->current_interval = 83U;
    #line 1867 
    bp->serdes_an_pending = (unsigned char)1U;
    #line 1868 
    cif_mod_timer(& bp->timer,(unsigned long)bp->current_interval + jiffies);
  }
  else {
    #line 1870 
    bnx2_resolve_flow_ctrl(bp);
    #line 1871 
    bnx2_set_mac_link(bp);
  }
  #line 1874 
  return 0;
}

#line 1893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_set_default_remote_link(struct bnx2 *bp)
{
  #line 1895 
  u32 link;
  #line 1897 
  if ((unsigned int)bp->phy_port == 0U) 
                                        #line 1898 
                                        link = bnx2_shmem_rd(bp,888U); else 
                                                                    #line 1900 
                                                                    link = bnx2_shmem_rd(bp,884U);
  #line 1902 
  if ((link & 1024U) != 0U) {
    #line 1903 
    bp->req_line_speed = (unsigned short)0U;
    #line 1904 
    bp->autoneg = (unsigned char)((unsigned int)bp->autoneg | 1U);
    #line 1905 
    bp->advertising = 64U;
    #line 1906 
    if ((link & 1U) != 0U) 
                           #line 1907 
                           bp->advertising |= 1U;
    #line 1908 
    if ((link & 2U) != 0U) 
                           #line 1909 
                           bp->advertising |= 2U;
    #line 1910 
    if ((link & 4U) != 0U) 
                           #line 1911 
                           bp->advertising |= 4U;
    #line 1912 
    if ((link & 8U) != 0U) 
                           #line 1913 
                           bp->advertising |= 8U;
    #line 1914 
    if ((link & 32U) != 0U) 
                            #line 1915 
                            bp->advertising |= 32U;
    #line 1916 
    if ((link & 128U) != 0U) 
                             #line 1917 
                             bp->advertising |= 32768U;
  }
  else {
    #line 1919 
    bp->autoneg = (unsigned char)0U;
    #line 1920 
    bp->advertising = 0U;
    #line 1921 
    bp->req_duplex = (unsigned char)1U;
    #line 1922 
    if ((link & 3U) != 0U) {
      #line 1923 
      bp->req_line_speed = (unsigned short)10U;
      #line 1924 
      if ((link & 1U) != 0U) 
                             #line 1925 
                             bp->req_duplex = (unsigned char)0U;
    }
    #line 1927 
    if ((link & 12U) != 0U) {
      #line 1928 
      bp->req_line_speed = (unsigned short)100U;
      #line 1929 
      if ((link & 4U) != 0U) 
                             #line 1930 
                             bp->req_duplex = (unsigned char)0U;
    }
    #line 1932 
    if ((link & 32U) != 0U) 
                            #line 1933 
                            bp->req_line_speed = (unsigned short)1000U;
    #line 1934 
    if ((link & 128U) != 0U) 
                             #line 1935 
                             bp->req_line_speed = (unsigned short)2500U;
  }
  #line 1937 
  return;
}

#line 1940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_set_default_link(struct bnx2 *bp)
{
  #line 1942 
  if ((bp->phy_flags & 2048U) != 0U) {
    #line 1943 
    bnx2_set_default_remote_link(bp);
    #line 1944 
    return;
  }
  #line 1947 
  bp->autoneg = (unsigned char)3U;
  #line 1948 
  bp->req_line_speed = (unsigned short)0U;
  #line 1949 
  if ((bp->phy_flags & 1U) != 0U) {
    #line 1950 
    u32 reg;
    #line 1952 
    if ((bp->phy_flags & 8U) != 0U) 
                                    #line 1952 
                                    bp->advertising = 32800U; else 
                                                                   #line 1952 
                                                                   bp->advertising = 96U;
    #line 1954 
    reg = bnx2_shmem_rd(bp,88U);
    #line 1955 
    reg &= 2031616U;
    #line 1956 
    if (reg == 196608U) {
      #line 1957 
      bp->autoneg = (unsigned char)0U;
      #line 1958 
      bp->line_speed = ((unsigned short)1000U);
      #line 1958 
      bp->req_line_speed = ((unsigned short)1000U);
      #line 1959 
      bp->req_duplex = (unsigned char)1U;
    }
  }
  else 
       #line 1962 
       bp->advertising = 111U;
  #line 1963 
  return;
}

#line 1966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_send_heart_beat(struct bnx2 *bp)
{
  #line 1968 
  u32 msg;
  #line 1969 
  u32 addr;
  #line 1971 
  cif_spin_lock_indirect_lock_of_bnx2(& bp->indirect_lock);
  #line 1972 
  bp->fw_drv_pulse_wr_seq = (u16)((int)bp->fw_drv_pulse_wr_seq + 1);
  #line 1972 
  msg = (unsigned int)bp->fw_drv_pulse_wr_seq & 32767U;
  #line 1973 
  addr = bp->shmem_base + 16U;
  #line 1974 
  writel(addr,bp->regview + 120U);
  #line 1975 
  writel(msg,bp->regview + 128U);
  #line 1976 
  cif_spin_unlock_indirect_lock_of_bnx2(& bp->indirect_lock);
  #line 1977 
  return;
}

#line 1980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_remote_phy_event(struct bnx2 *bp)
{
  #line 1982 
  u32 msg;
  #line 1984 
  u8 old_port;
  #line 1983 
  u8 link_up = bp->link_up;
  #line 1986 
  msg = bnx2_shmem_rd(bp,12U);
  #line 1988 
  if ((msg & 2147483648U) != 0U) 
                                 #line 1989 
                                 bnx2_send_heart_beat(bp);
  #line 1991 
  msg &= 2147483647U;
  #line 1993 
  if ((msg & 1U) == 0U) 
                        #line 1994 
                        bp->link_up = (unsigned char)0U;
  else {
    #line 1996 
    u32 speed;
    #line 1998 
    bp->link_up = (unsigned char)1U;
    #line 1999 
    speed = msg & 30U;
    #line 2000 
    bp->duplex = (unsigned char)1U;
    #line 2001 
    switch (speed) {
      #line 2002 
      case (u32)2: 
                   #line 2002 
      ;
      #line 2003 
      bp->duplex = (unsigned char)0U;
      #line 2005 
      case (u32)4: 
                   #line 2005 
      ;
      #line 2006 
      bp->line_speed = (unsigned short)10U;
      #line 2007 
      break;
      #line 2008 
      case (u32)6: 
                   #line 2008 
      ;
      #line 2009 
      bp->duplex = (unsigned char)0U;
      #line 2011 
      case (u32)8: 
                   #line 2011 
      ;
      #line 2012 
      case (u32)10: 
                    #line 2012 
      ;
      #line 2013 
      bp->line_speed = (unsigned short)100U;
      #line 2014 
      break;
      #line 2015 
      case (u32)12: 
                    #line 2015 
      ;
      #line 2016 
      bp->duplex = (unsigned char)0U;
      #line 2018 
      case (u32)14: 
                    #line 2018 
      ;
      #line 2019 
      bp->line_speed = (unsigned short)1000U;
      #line 2020 
      break;
      #line 2021 
      case (u32)16: 
                    #line 2021 
      ;
      #line 2022 
      bp->duplex = (unsigned char)0U;
      #line 2024 
      case (u32)18: 
                    #line 2024 
      ;
      #line 2025 
      bp->line_speed = (unsigned short)2500U;
      #line 2026 
      break;
      #line 2027 
      default: 
               #line 2027 
      ;
      #line 2028 
      bp->line_speed = (unsigned short)0U;
      #line 2029 
      break;
    }
    #line 2032 
    bp->flow_ctrl = (unsigned char)0U;
    #line 2033 
    if (((int)bp->autoneg & 3) != 3) {
      #line 2035 
      if ((unsigned int)bp->duplex == 1U) 
                                          #line 2036 
                                          bp->flow_ctrl = bp->req_flow_ctrl;
    }
    else {
      #line 2038 
      if ((msg & 65536U) != 0U) 
                                #line 2039 
                                bp->flow_ctrl = (unsigned char)((unsigned int)bp->flow_ctrl | 1U);
      #line 2040 
      if ((msg & 131072U) != 0U) 
                                 #line 2041 
                                 bp->flow_ctrl = (unsigned char)((unsigned int)bp->flow_ctrl | 2U);
    }
    #line 2044 
    old_port = bp->phy_port;
    #line 2045 
    if ((msg & 1048576U) != 0U) 
                                #line 2046 
                                bp->phy_port = (unsigned char)3U; else 
                                                                    #line 2048 
                                                                    bp->phy_port = (unsigned char)0U;
    #line 2050 
    if ((int)bp->phy_port != (int)old_port) 
                                            #line 2051 
                                            bnx2_set_default_link(bp);
  }
  #line 2054 
  if ((int)bp->link_up != (int)link_up) 
                                        #line 2055 
                                        bnx2_report_link(bp);
  #line 2057 
  bnx2_set_mac_link(bp);
  #line 2058 
  return;
}

#line 2061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_remote_link(struct bnx2 *bp)
{
  #line 2063 
  u32 evt_code;
  #line 2065 
  evt_code = bnx2_shmem_rd(bp,852U);
  #line 2066 
  switch (evt_code) {
    #line 2067 
    case (u32)1: 
                 #line 2067 
    ;
    #line 2068 
    bnx2_remote_phy_event(bp);
    #line 2069 
    break;
    #line 2070 
    case (u32)0: 
                 #line 2070 
    ;
    #line 2071 
    default: 
             #line 2071 
    ;
    #line 2072 
    bnx2_send_heart_beat(bp);
    #line 2073 
    break;
  }
  #line 2075 
  return 0;
}

#line 2079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_setup_copper_phy(struct bnx2 *bp)
{
  #line 2083 
  u32 bmcr;
  #line 2083 
  u32 adv_reg;
  #line 2084 
  u32 new_bmcr;
  #line 2083 
  u32 new_adv = 0U;
  #line 2086 
  bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
  #line 2088 
  bnx2_read_phy(bp,bp->mii_adv,& adv_reg);
  #line 2089 
  adv_reg &= 3553U;
  #line 2092 
  new_adv = ethtool_adv_to_mii_adv_t(bp->advertising) | 1U;
  #line 2094 
  if (((int)bp->autoneg & 1) != 0) {
    #line 2095 
    u32 adv1000_reg;
    #line 2096 
    u32 new_adv1000 = 0U;
    #line 2098 
    new_adv = bnx2_phy_get_pause_adv(bp) | new_adv;
    #line 2100 
    bnx2_read_phy(bp,9U,& adv1000_reg);
    #line 2101 
    adv1000_reg &= 768U;
    #line 2103 
    new_adv1000 = ethtool_adv_to_mii_ctrl1000_t(bp->advertising) | new_adv1000;
    #line 2104 
    if ((adv1000_reg != new_adv1000 || adv_reg != new_adv) || (bmcr & 4096U) == 0U) {
      #line 2108 
      bnx2_write_phy(bp,bp->mii_adv,new_adv);
      #line 2109 
      bnx2_write_phy(bp,9U,new_adv1000);
      #line 2110 
      bnx2_write_phy(bp,bp->mii_bmcr,4608U);
    }
    else 
      #line 2113 
      if ((unsigned int)bp->link_up != 0U) {
        #line 2117 
        bnx2_resolve_flow_ctrl(bp);
        #line 2118 
        bnx2_set_mac_link(bp);
      }
    #line 2120 
    return 0;
  }
  #line 2124 
  if (adv_reg != new_adv) 
                          #line 2125 
                          bnx2_write_phy(bp,bp->mii_adv,new_adv);
  #line 2127 
  new_bmcr = 0U;
  #line 2128 
  if ((unsigned int)bp->req_line_speed == 100U) 
                                                #line 2129 
                                                new_bmcr |= 8192U;
  #line 2131 
  if ((unsigned int)bp->req_duplex == 1U) 
                                          #line 2132 
                                          new_bmcr |= 256U;
  #line 2134 
  if (new_bmcr != bmcr) {
    #line 2135 
    u32 bmsr;
    #line 2137 
    bnx2_read_phy(bp,bp->mii_bmsr,& bmsr);
    #line 2138 
    bnx2_read_phy(bp,bp->mii_bmsr,& bmsr);
    #line 2140 
    if ((bmsr & 4U) != 0U) {
      #line 2142 
      bnx2_write_phy(bp,bp->mii_bmcr,16384U);
      #line 2143 
      cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
      #line 2144 
      msleep(50U);
      #line 2145 
      cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
      #line 2147 
      bnx2_read_phy(bp,bp->mii_bmsr,& bmsr);
      #line 2148 
      bnx2_read_phy(bp,bp->mii_bmsr,& bmsr);
    }
    #line 2151 
    bnx2_write_phy(bp,bp->mii_bmcr,new_bmcr);
    #line 2157 
    if ((bmsr & 4U) != 0U) {
      #line 2158 
      bp->line_speed = bp->req_line_speed;
      #line 2159 
      bp->duplex = bp->req_duplex;
      #line 2160 
      bnx2_resolve_flow_ctrl(bp);
      #line 2161 
      bnx2_set_mac_link(bp);
    }
  }
  else {
    #line 2164 
    bnx2_resolve_flow_ctrl(bp);
    #line 2165 
    bnx2_set_mac_link(bp);
  }
  #line 2167 
  return 0;
}

#line 2171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_setup_phy(struct bnx2 *bp, u8 port)
{
  #line 2175 
  if ((unsigned int)bp->loopback == 1U) 
                                        #line 2176 
                                        return 0;
  #line 2178 
  if ((bp->phy_flags & 1U) != 0U) {
    #line 2179 
    return bnx2_setup_serdes_phy(bp,(unsigned char)((int)port));
  }
  else {
    #line 2182 
    return bnx2_setup_copper_phy(bp);
  }
}

#line 2187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_5709s_phy(struct bnx2 *bp, int reset_phy)
{
  #line 2189 
  u32 val;
  #line 2191 
  bp->mii_bmcr = 16U;
  #line 2192 
  bp->mii_bmsr = 17U;
  #line 2193 
  bp->mii_bmsr1 = 27U;
  #line 2194 
  bp->mii_adv = 20U;
  #line 2195 
  bp->mii_lpa = 21U;
  #line 2196 
  bp->mii_up1 = 25U;
  #line 2198 
  bnx2_write_phy(bp,31U,65488U);
  #line 2199 
  bnx2_write_phy(bp,30U,14336U);
  #line 2201 
  bnx2_write_phy(bp,31U,65504U);
  #line 2202 
  if (reset_phy != 0) 
                      #line 2203 
                      bnx2_reset_phy(bp);
  #line 2205 
  bnx2_write_phy(bp,31U,33536U);
  #line 2207 
  bnx2_read_phy(bp,16U,& val);
  #line 2208 
  val &= 4294967279U;
  #line 2209 
  val |= 1U;
  #line 2210 
  bnx2_write_phy(bp,16U,val);
  #line 2212 
  bnx2_write_phy(bp,31U,33568U);
  #line 2213 
  bnx2_read_phy(bp,25U,& val);
  #line 2214 
  if ((bp->phy_flags & 8U) != 0U) 
                                  #line 2215 
                                  val |= 1U; else 
                                                  #line 2217 
                                                  val &= 4294967294U;
  #line 2218 
  bnx2_write_phy(bp,25U,val);
  #line 2220 
  bnx2_write_phy(bp,31U,33616U);
  #line 2221 
  bnx2_read_phy(bp,16U,& val);
  #line 2222 
  val |= 3U;
  #line 2223 
  bnx2_write_phy(bp,16U,val);
  #line 2225 
  bnx2_write_phy(bp,31U,33648U);
  #line 2227 
  val = 57344U;
  #line 2229 
  bnx2_write_phy(bp,18U,val);
  #line 2231 
  bnx2_write_phy(bp,31U,65504U);
  #line 2233 
  return 0;
}

#line 2237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_5708s_phy(struct bnx2 *bp, int reset_phy)
{
  #line 2239 
  u32 val;
  #line 2241 
  if (reset_phy != 0) 
                      #line 2242 
                      bnx2_reset_phy(bp);
  #line 2244 
  bp->mii_up1 = 11U;
  #line 2246 
  bnx2_write_phy(bp,31U,2U);
  #line 2247 
  bnx2_write_phy(bp,16U,1U);
  #line 2248 
  bnx2_write_phy(bp,31U,0U);
  #line 2250 
  bnx2_read_phy(bp,16U,& val);
  #line 2251 
  val |= 17U;
  #line 2252 
  bnx2_write_phy(bp,16U,val);
  #line 2254 
  bnx2_read_phy(bp,17U,& val);
  #line 2255 
  val |= 1U;
  #line 2256 
  bnx2_write_phy(bp,17U,val);
  #line 2258 
  if ((bp->phy_flags & 8U) != 0U) {
    #line 2259 
    bnx2_read_phy(bp,11U,& val);
    #line 2260 
    val |= 1U;
    #line 2261 
    bnx2_write_phy(bp,11U,val);
  }
  #line 2264 
  if (((bp->chip_id & 4294967280U) == 1460142080U || (bp->chip_id & 4294967280U) == 1460146176U) || (bp->chip_id & 4294967280U) == 1460146192U) {
    #line 2268 
    bnx2_write_phy(bp,31U,5U);
    #line 2270 
    bnx2_read_phy(bp,21U,& val);
    #line 2271 
    val &= 4294967247U;
    #line 2272 
    bnx2_write_phy(bp,21U,val);
    #line 2273 
    bnx2_write_phy(bp,31U,0U);
  }
  #line 2276 
  val = bnx2_shmem_rd(bp,88U) & 65535U;
  #line 2279 
  if (val != 0U) {
    #line 2280 
    u32 is_backplane;
    #line 2282 
    is_backplane = bnx2_shmem_rd(bp,60U);
    #line 2283 
    if ((is_backplane & 64U) != 0U) {
      #line 2284 
      bnx2_write_phy(bp,31U,5U);
      #line 2286 
      bnx2_write_phy(bp,23U,val);
      #line 2287 
      bnx2_write_phy(bp,31U,0U);
    }
  }
  #line 2291 
  return 0;
}

#line 2295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_5706s_phy(struct bnx2 *bp, int reset_phy)
{
  #line 2297 
  if (reset_phy != 0) 
                      #line 2298 
                      bnx2_reset_phy(bp);
  #line 2300 
  bp->phy_flags &= 4294967291U;
  #line 2302 
  if ((bp->chip_id & 4294901760U) == 1460011008U) 
                                                  #line 2303 
                                                  writel(768U,bp->regview + 2236U);
  #line 2305 
  if ((bp->dev)->mtu > 1500U) {
    #line 2306 
    u32 val;
    #line 2309 
    bnx2_write_phy(bp,24U,7U);
    #line 2310 
    bnx2_read_phy(bp,24U,& val);
    #line 2311 
    bnx2_write_phy(bp,24U,(val & 49144U) | 16384U);
    #line 2313 
    bnx2_write_phy(bp,28U,27648U);
    #line 2314 
    bnx2_read_phy(bp,28U,& val);
    #line 2315 
    bnx2_write_phy(bp,28U,(val & 1021U) | 60418U);
  }
  else {
    #line 2318 
    u32 val_0;
    #line 2320 
    bnx2_write_phy(bp,24U,7U);
    #line 2321 
    bnx2_read_phy(bp,24U,& val_0);
    #line 2322 
    bnx2_write_phy(bp,24U,val_0 & 4294950904U);
    #line 2324 
    bnx2_write_phy(bp,28U,27648U);
    #line 2325 
    bnx2_read_phy(bp,28U,& val_0);
    #line 2326 
    bnx2_write_phy(bp,28U,(val_0 & 1021U) | 60416U);
  }
  #line 2329 
  return 0;
}

#line 2333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_copper_phy(struct bnx2 *bp, int reset_phy)
{
  #line 2335 
  u32 val;
  #line 2337 
  if (reset_phy != 0) 
                      #line 2338 
                      bnx2_reset_phy(bp);
  #line 2340 
  if ((bp->phy_flags & 2U) != 0U) {
    #line 2341 
    bnx2_write_phy(bp,24U,3072U);
    #line 2342 
    bnx2_write_phy(bp,23U,10U);
    #line 2343 
    bnx2_write_phy(bp,21U,12555U);
    #line 2344 
    bnx2_write_phy(bp,23U,8223U);
    #line 2345 
    bnx2_write_phy(bp,21U,38150U);
    #line 2346 
    bnx2_write_phy(bp,23U,16415U);
    #line 2347 
    bnx2_write_phy(bp,21U,5346U);
    #line 2348 
    bnx2_write_phy(bp,24U,1024U);
  }
  #line 2351 
  if ((bp->phy_flags & 1024U) != 0U) {
    #line 2352 
    bnx2_write_phy(bp,23U,3848U);
    #line 2354 
    bnx2_read_phy(bp,21U,& val);
    #line 2355 
    val &= 4294967039U;
    #line 2356 
    bnx2_write_phy(bp,21U,val);
  }
  #line 2359 
  if ((bp->dev)->mtu > 1500U) {
    #line 2361 
    bnx2_write_phy(bp,24U,7U);
    #line 2362 
    bnx2_read_phy(bp,24U,& val);
    #line 2363 
    bnx2_write_phy(bp,24U,val | 16384U);
    #line 2365 
    bnx2_read_phy(bp,16U,& val);
    #line 2366 
    bnx2_write_phy(bp,16U,val | 1U);
  }
  else {
    #line 2369 
    bnx2_write_phy(bp,24U,7U);
    #line 2370 
    bnx2_read_phy(bp,24U,& val);
    #line 2371 
    bnx2_write_phy(bp,24U,val & 4294950904U);
    #line 2373 
    bnx2_read_phy(bp,16U,& val);
    #line 2374 
    bnx2_write_phy(bp,16U,val & 4294967294U);
  }
  #line 2378 
  bnx2_write_phy(bp,24U,28679U);
  #line 2379 
  bnx2_read_phy(bp,24U,& val);
  #line 2380 
  val |= 32784U;
  #line 2383 
  if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                  #line 2384 
                                                  val |= 512U;
  #line 2386 
  bnx2_write_phy(bp,24U,val);
  #line 2387 
  return 0;
}

#line 2392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_phy(struct bnx2 *bp, int reset_phy)
{
  #line 2396 
  u32 val;
  #line 2397 
  int rc = 0;
  #line 2399 
  bp->phy_flags &= 4294966527U;
  #line 2400 
  bp->phy_flags |= 512U;
  #line 2402 
  bp->mii_bmcr = 0U;
  #line 2403 
  bp->mii_bmsr = 1U;
  #line 2404 
  bp->mii_bmsr1 = 1U;
  #line 2405 
  bp->mii_adv = 4U;
  #line 2406 
  bp->mii_lpa = 5U;
  #line 2408 
  writel(2048U,bp->regview + 5128U);
  #line 2410 
  if ((bp->phy_flags & 2048U) != 0U) 
                                     #line 2411 
                                     goto setup_phy;
  #line 2413 
  bnx2_read_phy(bp,2U,& val);
  #line 2414 
  bp->phy_id = val << 16;
  #line 2415 
  bnx2_read_phy(bp,3U,& val);
  #line 2416 
  bp->phy_id |= val & 65535U;
  #line 2418 
  if ((bp->phy_flags & 1U) != 0U) {
    #line 2419 
    if ((bp->chip_id & 4294901760U) == 1460011008U) 
                                                    #line 2420 
                                                    rc = bnx2_init_5706s_phy(bp,reset_phy);
    else 
      #line 2421 
      if ((bp->chip_id & 4294901760U) == 1460142080U) 
                                                      #line 2422 
                                                      rc = bnx2_init_5708s_phy(bp,reset_phy);
      else 
        #line 2423 
        if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                        #line 2424 
                                                        rc = bnx2_init_5709s_phy(bp,reset_phy);
  }
  else 
       #line 2427 
       rc = bnx2_init_copper_phy(bp,reset_phy);
  #line 2430 
  setup_phy: 
             #line 2430 
  ;
  #line 2431 
  if (rc == 0) 
               #line 2432 
               rc = bnx2_setup_phy(bp,(unsigned char)((int)bp->phy_port));
  #line 2434 
  return rc;
}

#line 2438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_mac_loopback(struct bnx2 *bp)
{
  #line 2440 
  u32 mac_mode;
  #line 2442 
  mac_mode = readl(bp->regview + 5120U);
  #line 2443 
  mac_mode &= 4294967283U;
  #line 2444 
  mac_mode |= 2064U;
  #line 2445 
  writel(mac_mode,bp->regview + 5120U);
  #line 2446 
  bp->link_up = (unsigned char)1U;
  #line 2447 
  return 0;
}

#line 2450 
#line 6002 
static int bnx2_test_link(struct bnx2 *bp);
#line 2453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_phy_loopback(struct bnx2 *bp)
{
  #line 2455 
  u32 mac_mode;
  #line 2456 
  int rc;
  #line 2456 
  int i;
  #line 2458 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 2459 
  rc = bnx2_write_phy(bp,bp->mii_bmcr,16704U);
  #line 2461 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 2462 
  if (rc != 0) 
               #line 2463 
               return rc;
  #line 2465 
  i = 0;
  #line 2465 
  while (i <= 9) {
    {
      #line 2466 
      if (bnx2_test_link(bp) == 0) 
                                   #line 2467 
                                   break;
      #line 2468 
      msleep(100U);
    }
    #line 2465 
    i ++;
  }
  #line 2471 
  mac_mode = readl(bp->regview + 5120U);
  #line 2472 
  mac_mode &= 4294965185U;
  #line 2476 
  mac_mode |= 8U;
  #line 2477 
  writel(mac_mode,bp->regview + 5120U);
  #line 2478 
  bp->link_up = (unsigned char)1U;
  #line 2479 
  return 0;
}

#line 2483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_dump_mcp_state(struct bnx2 *bp)
{
  #line 2486 
  u32 mcp_p0;
  #line 2486 
  u32 mcp_p1;
  #line 2485 
  struct net_device *dev = bp->dev;
  #line 2488 
  netdev_err(dev,(char *)"<--- start MCP states dump --->\n");
  #line 2489 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 2490 
    mcp_p0 = 1506760U;
    #line 2491 
    mcp_p1 = 1505736U;
  }
  else {
    #line 2493 
    mcp_p0 = 1482184U;
    #line 2494 
    mcp_p1 = 1481160U;
  }
  #line 2496 
  ;
  #line 2496 
  netdev_err(dev,(char *)"DEBUG: MCP_STATE_P0[%08x] MCP_STATE_P1[%08x]\n",bnx2_reg_rd_ind(bp,mcp_p0),bnx2_reg_rd_ind(bp,mcp_p1));
  #line 2498 
  ;
  #line 2498 
  netdev_err(dev,(char *)"DEBUG: MCP mode[%08x] state[%08x] evt_mask[%08x]\n",bnx2_reg_rd_ind(bp,1331200U),bnx2_reg_rd_ind(bp,1331204U),bnx2_reg_rd_ind(bp,1331208U));
  #line 2502 
  ;
  #line 2502 
  netdev_err(dev,(char *)"DEBUG: pc[%08x] pc[%08x] instr[%08x]\n",bnx2_reg_rd_ind(bp,1331228U),bnx2_reg_rd_ind(bp,1331228U),bnx2_reg_rd_ind(bp,1331232U));
  #line 2506 
  netdev_err(dev,(char *)"DEBUG: shmem states:\n");
  #line 2507 
  ;
  #line 2507 
  netdev_err(dev,(char *)"DEBUG: drv_mb[%08x] fw_mb[%08x] link_status[%08x]",bnx2_shmem_rd(bp,4U),bnx2_shmem_rd(bp,8U),bnx2_shmem_rd(bp,12U));
  #line 2511 
  printk((char *)"\001",bnx2_shmem_rd(bp,16U));
  #line 2512 
  ;
  #line 2512 
  netdev_err(dev,(char *)"DEBUG: dev_info_signature[%08x] reset_type[%08x]",bnx2_shmem_rd(bp,32U),bnx2_shmem_rd(bp,448U));
  #line 2515 
  printk((char *)"\001",bnx2_shmem_rd(bp,456U));
  #line 2517 
  ;
  #line 2517 
  netdev_err(bp->dev,(char *)"DEBUG: %08x: %08x %08x %08x %08x\n",448,bnx2_shmem_rd(bp,448U),bnx2_shmem_rd(bp,452U),bnx2_shmem_rd(bp,456U),bnx2_shmem_rd(bp,460U));
  #line 2518 
  ;
  #line 2518 
  netdev_err(bp->dev,(char *)"DEBUG: %08x: %08x %08x %08x %08x\n",972,bnx2_shmem_rd(bp,972U),bnx2_shmem_rd(bp,976U),bnx2_shmem_rd(bp,980U),bnx2_shmem_rd(bp,984U));
  #line 2519 
  ;
  #line 2519 
  netdev_err(bp->dev,(char *)"DEBUG: %08x: %08x %08x %08x %08x\n",988,bnx2_shmem_rd(bp,988U),bnx2_shmem_rd(bp,992U),bnx2_shmem_rd(bp,996U),bnx2_shmem_rd(bp,1000U));
  #line 2520 
  ;
  #line 2520 
  netdev_err(bp->dev,(char *)"DEBUG: %08x: %08x %08x %08x %08x\n",1004,bnx2_shmem_rd(bp,1004U),bnx2_shmem_rd(bp,1008U),bnx2_shmem_rd(bp,1012U),bnx2_shmem_rd(bp,1016U));
  #line 2521 
  ;
  #line 2521 
  netdev_err(dev,(char *)"DEBUG: 0x3fc[%08x]\n",bnx2_shmem_rd(bp,1020U));
  #line 2522 
  netdev_err(dev,(char *)"<--- end MCP states dump --->\n");
  #line 2523 
  return;
}

#line 2526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_fw_sync(struct bnx2 *bp, u32 msg_data, int ack, int silent)
{
  #line 2528 
  int i;
  #line 2529 
  u32 val;
  #line 2531 
  bp->fw_wr_seq = (u16)((int)bp->fw_wr_seq + 1);
  #line 2532 
  msg_data = (unsigned int)bp->fw_wr_seq | msg_data;
  #line 2533 
  bp->fw_last_msg = msg_data;
  #line 2535 
  bnx2_shmem_wr(bp,4U,msg_data);
  #line 2537 
  if (ack == 0) 
                #line 2538 
                return 0;
  #line 2541 
  i = 0;
  #line 2541 
  while (i <= 99) {
    #line 2542 
    msleep(10U);
    #line 2544 
    val = bnx2_shmem_rd(bp,8U);
    #line 2546 
    if (((val ^ msg_data) & 65535U) == 0U) 
                                           #line 2547 
                                           break;
    #line 2541 
    i ++;
  }
  #line 2549 
  if ((msg_data & 16711680U) == 65536U) 
                                        #line 2550 
                                        return 0;
  #line 2553 
  if (((val ^ msg_data) & 65535U) != 0U) {
    #line 2554 
    msg_data &= 16777215U;
    #line 2555 
    msg_data |= 83886080U;
    #line 2557 
    bnx2_shmem_wr(bp,4U,msg_data);
    #line 2558 
    if (silent == 0) {
      #line 2559 
      printk((char *)"\001",msg_data);
      #line 2560 
      bnx2_dump_mcp_state(bp);
    }
    #line 2563 
    return -16;
  }
  #line 2566 
  if ((val & 16711680U) != 0U) 
                               #line 2567 
                               return -5;
  #line 2569 
  return 0;
}

#line 2573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_5709_context(struct bnx2 *bp)
{
  #line 2575 
  int i;
  #line 2576 
  u32 val;
  #line 2575 
  int ret = 0;
  #line 2578 
  val = 12289U;
  #line 2579 
  val |= 262144U;
  #line 2580 
  writel(val,bp->regview + 4096U);
  #line 2581 
  i = 0;
  #line 2581 
  while (i <= 9) {
    #line 2582 
    val = readl(bp->regview + 4096U);
    #line 2583 
    if (((long)val & 8192L) == 0L) 
                                   #line 2584 
                                   break;
    #line 2585 
    __const_udelay(8590UL);
    #line 2581 
    i ++;
  }
  #line 2587 
  if (((long)val & 8192L) != 0L) 
                                 #line 2588 
                                 return -16;
  #line 2590 
  i = 0;
  #line 2590 
  while (bp->ctx_pages > i) {
    {
      #line 2591 
      int j;
      #line 2593 
      if (bp->ctx_blk[i] != (void *)0) 
                                       #line 2594 
                                       memset(bp->ctx_blk[i],0,4096UL); else 
                                                                    #line 2596 
                                                                    return -12;
      #line 2598 
      writel((unsigned int)bp->ctx_blk_mapping[i] | 1U,bp->regview + 4300U);
      #line 2601 
      writel((unsigned int)(bp->ctx_blk_mapping[i] >> 32),bp->regview + 4304U);
      #line 2603 
      writel((unsigned int)(i | 1073741824),bp->regview + 4296U);
      #line 2605 
      j = 0;
      #line 2605 
      while (j <= 9) {
        #line 2607 
        val = readl(bp->regview + 4296U);
        #line 2608 
        if (((long)val & 1073741824L) == 0L) 
                                             #line 2609 
                                             break;
        #line 2610 
        __const_udelay(21475UL);
        #line 2605 
        j ++;
      }
      #line 2612 
      if (((long)val & 1073741824L) != 0L) {
        #line 2613 
        ret = -16;
        #line 2614 
        break;
      }
    }
    #line 2590 
    i ++;
  }
  #line 2617 
  return ret;
}

#line 2621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_context(struct bnx2 *bp)
{
  #line 2623 
  u32 vcid;
  #line 2625 
  vcid = 96U;
  #line 2626 
  while (vcid != 0U) {
    #line 2627 
    u32 vcid_addr;
    #line 2627 
    u32 pcid_addr;
    #line 2627 
    u32 offset;
    #line 2628 
    int i;
    #line 2630 
    vcid --;
    #line 2632 
    if ((bp->chip_id & 4294967280U) == 1460011008U) {
      #line 2633 
      u32 new_vcid;
      #line 2635 
      vcid_addr = vcid << 6;
      #line 2636 
      if ((vcid & 8U) != 0U) 
                             #line 2637 
                             new_vcid = (vcid & 247U) + 96U; else 
                                                                  #line 2640 
                                                                  new_vcid = vcid;
      #line 2642 
      pcid_addr = new_vcid << 6;
    }
    else {
      #line 2645 
      vcid_addr = vcid << 7;
      #line 2646 
      pcid_addr = vcid_addr;
    }
    #line 2649 
    i = 0;
    #line 2649 
    while (i <= 1) {
      #line 2650 
      vcid_addr = (unsigned int)(i << 6) + vcid_addr;
      #line 2651 
      pcid_addr = (unsigned int)(i << 6) + pcid_addr;
      #line 2653 
      writel(vcid_addr,bp->regview + 4104U);
      #line 2654 
      writel(pcid_addr,bp->regview + 4108U);
      #line 2657 
      offset = 0U;
      #line 2657 
      while (offset <= 63U) {
        #line 2658 
        bnx2_ctx_wr(bp,vcid_addr,offset,0U);
        #line 2657 
        offset += 4U;
      }
      #line 2649 
      i ++;
    }
  }
  #line 2661 
  return;
}

#line 2664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_alloc_bad_rbuf(struct bnx2 *bp)
{
  #line 2666 
  u16 *good_mbuf;
  #line 2667 
  u32 good_mbuf_cnt;
  #line 2668 
  u32 val;
  #line 2670 
  good_mbuf = (u16 *)kmalloc_array(512UL,2UL,3264U);
  #line 2671 
  if (good_mbuf == (u16 *)0U) 
                              #line 2672 
                              return -12;
  #line 2674 
  writel(4096U,bp->regview + 2064U);
  #line 2677 
  good_mbuf_cnt = 0U;
  #line 2680 
  val = bnx2_reg_rd_ind(bp,2097156U);
  #line 2681 
  while (((long)val & 1023L) != 0L) {
    #line 2682 
    bnx2_reg_wr_ind(bp,2097152U,32U);
    #line 2685 
    val = bnx2_reg_rd_ind(bp,2097168U);
    #line 2687 
    val &= 65408U;
    #line 2690 
    if ((val & 512U) == 0U) {
      #line 2691 
      *(good_mbuf + (unsigned long)good_mbuf_cnt) = (unsigned short)val;
      #line 2692 
      good_mbuf_cnt ++;
    }
    #line 2695 
    val = bnx2_reg_rd_ind(bp,2097156U);
  }
  #line 2700 
  while (good_mbuf_cnt != 0U) {
    #line 2701 
    good_mbuf_cnt --;
    #line 2703 
    val = (unsigned int)*(good_mbuf + (unsigned long)good_mbuf_cnt);
    #line 2704 
    val = ((val << 9) | val) | 1U;
    #line 2706 
    bnx2_reg_wr_ind(bp,2097172U,val);
  }
  #line 2708 
  kfree((void *)good_mbuf);
  #line 2709 
  return 0;
}

#line 2713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_set_mac_addr(struct bnx2 *bp, u8 *mac_addr, u32 pos)
{
  #line 2715 
  u32 val;
  #line 2717 
  val = (unsigned int)(((int)*mac_addr << 8) | (int)*(mac_addr + 1U));
  #line 2719 
  writel(val,bp->regview + ((unsigned long)(pos * 8U) + (unsigned long)5136U));
  #line 2721 
  val = (unsigned int)(((((int)*(mac_addr + 2U) << 24) | ((int)*(mac_addr + 3U) << 16)) | ((int)*(mac_addr + 4U) << 8)) | (int)*(mac_addr + 5U));
  #line 2724 
  writel(val,bp->regview + ((unsigned long)(pos * 8U) + (unsigned long)5140U));
  #line 2725 
  return;
}

#line 2728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
__inline static int bnx2_alloc_rx_page(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, u16 index, gfp_t gfp)
{
  #line 2730 
  dma_addr_t mapping;
  #line 2731 
  struct bnx2_sw_pg *rx_pg = rxr->rx_pg_ring + (unsigned long)index;
  #line 2732 
  struct bnx2_rx_bd *rxbd = rxr->rx_pg_desc_ring[(unsigned long)index >> 8] + ((unsigned long)index & 255UL);
  #line 2734 
  struct page *page = alloc_pages(gfp,0U);
  #line 2736 
  if (page == (struct page *)0) 
                                #line 2737 
                                return -12;
  #line 2738 
  mapping = dma_map_page_attrs(& (bp->pdev)->dev,page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 2740 
  if (dma_mapping_error(& (bp->pdev)->dev,mapping) != 0) {
    #line 2741 
    __free_pages(page,0U);
    #line 2742 
    return -5;
  }
  #line 2745 
  rx_pg->page = page;
  #line 2746 
  rx_pg->mapping = mapping;
  #line 2747 
  rxbd->rx_bd_haddr_hi = (unsigned int)(mapping >> 32);
  #line 2748 
  rxbd->rx_bd_haddr_lo = (unsigned int)mapping;
  #line 2749 
  return 0;
}

#line 2753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_free_rx_page(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, u16 index)
{
  #line 2755 
  struct bnx2_sw_pg *rx_pg = rxr->rx_pg_ring + (unsigned long)index;
  #line 2756 
  struct page *page = rx_pg->page;
  #line 2758 
  if (page == (struct page *)0) 
                                #line 2759 
                                return;
  #line 2761 
  dma_unmap_page_attrs(& (bp->pdev)->dev,rx_pg->mapping,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 2764 
  __free_pages(page,0U);
  #line 2765 
  rx_pg->page = (struct page *)0;
  #line 2766 
  return;
}

#line 2769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
__inline static int bnx2_alloc_rx_data(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, u16 index, gfp_t gfp)
{
  #line 2771 
  u8 *data;
  #line 2773 
  dma_addr_t mapping;
  #line 2772 
  struct bnx2_sw_bd *rx_buf = rxr->rx_buf_ring + (unsigned long)index;
  #line 2774 
  struct bnx2_rx_bd *rxbd = rxr->rx_desc_ring[(unsigned long)index >> 8] + ((unsigned long)index & 255UL);
  #line 2777 
  data = (u8 *)kmalloc((unsigned long)bp->rx_buf_size,gfp);
  #line 2778 
  if (data == (u8 *)0U) 
                        #line 2779 
                        return -12;
  #line 2781 
  ;
  #line 2781 
  ;
  #line 2781 
  mapping = dma_map_single_attrs(& (bp->pdev)->dev,(void *)get_l2_fhdr(data),(unsigned long)bp->rx_buf_use_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 2785 
  if (dma_mapping_error(& (bp->pdev)->dev,mapping) != 0) {
    #line 2786 
    kfree((void *)data);
    #line 2787 
    return -5;
  }
  #line 2790 
  rx_buf->data = data;
  #line 2791 
  rx_buf->mapping = mapping;
  #line 2793 
  rxbd->rx_bd_haddr_hi = (unsigned int)(mapping >> 32);
  #line 2794 
  rxbd->rx_bd_haddr_lo = (unsigned int)mapping;
  #line 2796 
  rxr->rx_prod_bseq += bp->rx_buf_use_size;
  #line 2798 
  return 0;
}

#line 2802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_phy_event_is_set(struct bnx2 *bp, struct bnx2_napi *bnapi, u32 event)
{
  #line 2805 
  u32 new_link_state;
  #line 2805 
  u32 old_link_state;
  #line 2804 
  struct status_block *sblk = bnapi->status_blk.msi;
  #line 2806 
  int is_set = 1;
  #line 2808 
  new_link_state = sblk->status_attn_bits & event;
  #line 2809 
  old_link_state = sblk->status_attn_bits_ack & event;
  #line 2810 
  if (new_link_state != old_link_state) 
    #line 2811 
    if (new_link_state != 0U) 
                              #line 2812 
                              writel(event,bp->regview + 136U); else 
                                                                  #line 2814 
                                                                  writel(event,bp->regview + 140U);
  else 
       #line 2816 
       is_set = 0;
  #line 2818 
  return is_set;
}

#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_phy_int(struct bnx2 *bp, struct bnx2_napi *bnapi)
{
  #line 2824 
  cif_spin_lock_phy_lock_of_bnx2(& bp->phy_lock);
  #line 2826 
  if (bnx2_phy_event_is_set(bp,bnapi,1U) != 0) 
                                               #line 2827 
                                               bnx2_set_link(bp);
  #line 2828 
  if (bnx2_phy_event_is_set(bp,bnapi,16777216U) != 0) 
                                                      #line 2829 
                                                      bnx2_set_remote_link(bp);
  #line 2831 
  cif_spin_unlock_phy_lock_of_bnx2(& bp->phy_lock);
  #line 2832 
  return;
}

#line 2836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
__inline static u16 bnx2_get_hw_tx_cons(struct bnx2_napi *bnapi)
{
  #line 2841 
  union __anonunion___u_1066 __u;
  #line 2838 
  u16 cons;
  #line 2840 
  __read_once_size((void *)bnapi->hw_tx_cons_ptr,(void *)(& __u.__c),2);
  #line 2840 
  cons = (__u.__val);
  #line 2842 
  if ((long)(((unsigned long)cons & 255UL) == 255UL) != 0L) 
                                                            #line 2843 
                                                            cons = (u16)((int)cons + 1);
  #line 2844 
  return cons;
}

#line 2848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_tx_int(struct bnx2 *bp, struct bnx2_napi *bnapi, int budget)
{
  #line 2851 
  u16 hw_cons;
  #line 2851 
  u16 sw_cons;
  #line 2851 
  u16 sw_ring_cons;
  #line 2852 
  int index;
  #line 2854 
  struct netdev_queue *txq;
  #line 2850 
  struct bnx2_tx_ring_info *txr = & bnapi->tx_ring;
  #line 2852 
  int tx_pkt = 0;
  #line 2853 
  unsigned int tx_bytes = 0U;
  #line 2856 
  index = (int)((bnapi - (struct bnx2_napi *)(& bp->bnx2_napi)) / 1216L);
  #line 2857 
  txq = netdev_get_tx_queue(bp->dev,(unsigned int)index);
  #line 2859 
  hw_cons = bnx2_get_hw_tx_cons(bnapi);
  #line 2860 
  sw_cons = txr->tx_cons;
  #line 2862 
  while ((int)sw_cons != (int)hw_cons) {
    #line 2863 
    struct bnx2_sw_tx_bd *tx_buf;
    #line 2864 
    struct sk_buff *skb;
    #line 2865 
    int i;
    #line 2865 
    int last;
    #line 2867 
    sw_ring_cons = (unsigned short)((unsigned int)sw_cons & 255U);
    #line 2869 
    tx_buf = txr->tx_buf_ring + (unsigned long)sw_ring_cons;
    #line 2870 
    skb = tx_buf->skb;
    #line 2873 
    __builtin_prefetch((void const *)((void *)(& skb->end)));
    #line 2876 
    if ((unsigned int)tx_buf->is_gso != 0U) {
      #line 2877 
      u16 last_idx;
      #line 2877 
      u16 last_ring_idx;
      #line 2879 
      last_idx = (unsigned short)((unsigned int)((int)tx_buf->nr_frags + (int)sw_cons) + 1U);
      #line 2880 
      last_ring_idx = (unsigned short)((unsigned int)((int)tx_buf->nr_frags + (int)sw_ring_cons) + 1U);
      #line 2881 
      if ((long)((unsigned int)last_ring_idx > 254U) != 0L) 
                                                            #line 2882 
                                                            last_idx = (u16)((int)last_idx + 1);
      #line 2884 
      if ((int)((short)((int)last_idx - (int)hw_cons)) > 0) 
                                                            #line 2885 
                                                            break;
    }
    #line 2889 
    ;
    #line 2889 
    ;
    #line 2889 
    dma_unmap_single_attrs(& (bp->pdev)->dev,tx_buf->mapping,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 2892 
    tx_buf->skb = (struct sk_buff *)0;
    #line 2893 
    last = (int)tx_buf->nr_frags;
    #line 2895 
    i = 0;
    #line 2895 
    while (i < last) {
      {
        #line 2896 
        struct bnx2_sw_tx_bd *tx_buf_0;
        #line 2898 
        if (((unsigned long)sw_cons & 254UL) == 254UL) 
                                                       #line 2898 
                                                       sw_cons = (unsigned short)((unsigned int)sw_cons + 2U); else 
                                                                    #line 2898 
                                                                    sw_cons = (unsigned short)((unsigned int)sw_cons + 1U);
        #line 2900 
        tx_buf_0 = txr->tx_buf_ring + ((unsigned long)sw_cons & 255UL);
        #line 2901 
        ;
        #line 2901 
        ;
        #line 2901 
        dma_unmap_page_attrs(& (bp->pdev)->dev,tx_buf_0->mapping,(unsigned long)skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      }
      #line 2895 
      i ++;
    }
    #line 2907 
    if (((unsigned long)sw_cons & 254UL) == 254UL) 
                                                   #line 2907 
                                                   sw_cons = (unsigned short)((unsigned int)sw_cons + 2U); else 
                                                                    #line 2907 
                                                                    sw_cons = (unsigned short)((unsigned int)sw_cons + 1U);
    #line 2909 
    tx_bytes = skb->len + tx_bytes;
    #line 2910 
    dev_kfree_skb_any(skb);
    #line 2911 
    tx_pkt ++;
    #line 2912 
    if (tx_pkt == budget) 
                          #line 2913 
                          break;
    #line 2915 
    if ((int)hw_cons == (int)sw_cons) 
                                      #line 2916 
                                      hw_cons = bnx2_get_hw_tx_cons(bnapi);
  }
  #line 2919 
  netdev_tx_completed_queue(txq,(unsigned int)tx_pkt,tx_bytes);
  #line 2920 
  txr->hw_tx_cons = hw_cons;
  #line 2921 
  txr->tx_cons = sw_cons;
  #line 2922 
  ldv_inline_asm();
  #line 2930 
  if ((long)((int)netif_tx_queue_stopped(txq) != 0) != 0L) {
    #line 2930 
    ;
    #line 2930 
    if (bnx2_tx_avail(bp,txr) > bp->tx_wake_thresh) {
      #line 2932 
      int pscr_ret__;
      #line 2932 
      __this_cpu_preempt_check((char *)"read");
      {
        #line 2932 
        void *__vpp_verify = (void *)0;
        #line 2932 
        void *tmp_2 = __vpp_verify;
      }
      #line 2932 
      switch (4UL) {
        #line 2932 
        int pfo_ret___2;
        #line 2932 
        int pfo_ret__;
        #line 2932 
        int pfo_ret___0;
        #line 2932 
        int pfo_ret___1;
        #line 2932 
        case (unsigned long)1: 
                               #line 2932 
        ;
        #line 2932 
        switch (4UL) {
          #line 2932 
          case (unsigned long)1: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)2: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)4: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)8: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          default: 
                   #line 2932 
          ;
          #line 2932 
          __bad_percpu_size();
        }
        #line 2932 
        pscr_ret__ = pfo_ret__;
        #line 2932 
        break;
        #line 2932 
        case (unsigned long)2: 
                               #line 2932 
        ;
        #line 2932 
        switch (4UL) {
          #line 2932 
          case (unsigned long)1: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)2: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)4: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)8: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          default: 
                   #line 2932 
          ;
          #line 2932 
          __bad_percpu_size();
        }
        #line 2932 
        pscr_ret__ = pfo_ret___0;
        #line 2932 
        break;
        #line 2932 
        case (unsigned long)4: 
                               #line 2932 
        ;
        #line 2932 
        switch (4UL) {
          #line 2932 
          case (unsigned long)1: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)2: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)4: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)8: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          default: 
                   #line 2932 
          ;
          #line 2932 
          __bad_percpu_size();
        }
        #line 2932 
        pscr_ret__ = pfo_ret___1;
        #line 2932 
        break;
        #line 2932 
        case (unsigned long)8: 
                               #line 2932 
        ;
        #line 2932 
        switch (4UL) {
          #line 2932 
          case (unsigned long)1: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)2: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)4: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          case (unsigned long)8: 
                                 #line 2932 
          ;
          #line 2933 
          ldv_inline_asm();
          #line 2932 
          break;
          #line 2932 
          default: 
                   #line 2932 
          ;
          #line 2932 
          __bad_percpu_size();
        }
        #line 2932 
        pscr_ret__ = pfo_ret___2;
        #line 2932 
        break;
        #line 2932 
        default: 
                 #line 2932 
        ;
        #line 2932 
        __bad_size_call_parameter();
        #line 2932 
        break;
      }
      #line 2932 
      ;
      #line 2932 
      __netif_tx_lock(txq,pscr_ret__);
      #line 2933 
      if ((int)netif_tx_queue_stopped(txq) != 0) {
        #line 2933 
        ;
        #line 2933 
        if (bnx2_tx_avail(bp,txr) > bp->tx_wake_thresh) 
                                                        #line 2935 
                                                        netif_tx_wake_queue(txq);
      }
      #line 2936 
      __netif_tx_unlock(txq);
    }
  }
  #line 2939 
  return tx_pkt;
}

#line 2943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_reuse_rx_skb_pages(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, struct sk_buff *skb, int count)
{
  #line 2946 
  struct bnx2_sw_pg *cons_rx_pg;
  #line 2946 
  struct bnx2_sw_pg *prod_rx_pg;
  #line 2947 
  struct bnx2_rx_bd *cons_bd;
  #line 2947 
  struct bnx2_rx_bd *prod_bd;
  #line 2948 
  int i;
  #line 2949 
  u16 hw_prod;
  #line 2949 
  u16 prod;
  #line 2950 
  u16 cons = rxr->rx_pg_cons;
  #line 2952 
  cons_rx_pg = rxr->rx_pg_ring + (unsigned long)cons;
  #line 2958 
  if (skb != (struct sk_buff *)0) {
    #line 2959 
    struct page *page;
    #line 2960 
    struct skb_shared_info *shinfo;
    #line 2962 
    shinfo = (struct skb_shared_info *)skb_end_pointer(skb);
    #line 2963 
    shinfo->nr_frags = (__u8)((int)shinfo->nr_frags - 1);
    #line 2964 
    page = skb_frag_page(& shinfo->frags[(int)shinfo->nr_frags]);
    #line 2965 
    __skb_frag_set_page(& shinfo->frags[(int)shinfo->nr_frags],(struct page *)0);
    #line 2967 
    cons_rx_pg->page = page;
    #line 2968 
    consume_skb(skb);
  }
  #line 2971 
  hw_prod = rxr->rx_pg_prod;
  #line 2973 
  i = 0;
  #line 2973 
  while (i < count) {
    {
      #line 2993 
      unsigned int tmp_0;
      #line 2974 
      prod = (unsigned short)((int)((unsigned short)bp->rx_max_pg_ring_idx) & (int)hw_prod);
      #line 2976 
      prod_rx_pg = rxr->rx_pg_ring + (unsigned long)prod;
      #line 2977 
      cons_rx_pg = rxr->rx_pg_ring + (unsigned long)cons;
      #line 2978 
      cons_bd = rxr->rx_pg_desc_ring[(unsigned long)cons >> 8] + ((unsigned long)cons & 255UL);
      #line 2980 
      prod_bd = rxr->rx_pg_desc_ring[(unsigned long)prod >> 8] + ((unsigned long)prod & 255UL);
      #line 2983 
      if ((int)prod != (int)cons) {
        #line 2984 
        prod_rx_pg->page = cons_rx_pg->page;
        #line 2985 
        cons_rx_pg->page = (struct page *)0;
        #line 2986 
        prod_rx_pg->mapping = cons_rx_pg->mapping;
        #line 2989 
        prod_bd->rx_bd_haddr_hi = cons_bd->rx_bd_haddr_hi;
        #line 2990 
        prod_bd->rx_bd_haddr_lo = cons_bd->rx_bd_haddr_lo;
      }
      #line 2993 
      if (((unsigned long)cons & 254UL) == 254UL) 
                                                  #line 2993 
                                                  tmp_0 = (unsigned int)cons + 2U; else 
                                                                    #line 2993 
                                                                    tmp_0 = (unsigned int)cons + 1U;
      #line 2993 
      cons = (unsigned short)(tmp_0 & (unsigned int)((unsigned short)bp->rx_max_pg_ring_idx));
      #line 2994 
      if (((unsigned long)hw_prod & 254UL) == 254UL) 
                                                     #line 2994 
                                                     hw_prod = (unsigned short)((unsigned int)hw_prod + 2U); else 
                                                                    #line 2994 
                                                                    hw_prod = (unsigned short)((unsigned int)hw_prod + 1U);
    }
    #line 2973 
    i ++;
  }
  #line 2996 
  rxr->rx_pg_prod = hw_prod;
  #line 2997 
  rxr->rx_pg_cons = cons;
  #line 2998 
  return;
}

#line 3001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
__inline static void bnx2_reuse_rx_data(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, u8 *data, u16 cons, u16 prod)
{
  #line 3004 
  struct bnx2_sw_bd *cons_rx_buf;
  #line 3004 
  struct bnx2_sw_bd *prod_rx_buf;
  #line 3005 
  struct bnx2_rx_bd *cons_bd;
  #line 3005 
  struct bnx2_rx_bd *prod_bd;
  #line 3007 
  cons_rx_buf = rxr->rx_buf_ring + (unsigned long)cons;
  #line 3008 
  prod_rx_buf = rxr->rx_buf_ring + (unsigned long)prod;
  #line 3010 
  dma_sync_single_for_device(& (bp->pdev)->dev,cons_rx_buf->mapping,146UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 3014 
  rxr->rx_prod_bseq += bp->rx_buf_use_size;
  #line 3016 
  prod_rx_buf->data = data;
  #line 3018 
  if ((int)cons == (int)prod) 
                              #line 3019 
                              return;
  #line 3021 
  prod_rx_buf->mapping = cons_rx_buf->mapping;
  #line 3024 
  cons_bd = rxr->rx_desc_ring[(unsigned long)cons >> 8] + ((unsigned long)cons & 255UL);
  #line 3025 
  prod_bd = rxr->rx_desc_ring[(unsigned long)prod >> 8] + ((unsigned long)prod & 255UL);
  #line 3026 
  prod_bd->rx_bd_haddr_hi = cons_bd->rx_bd_haddr_hi;
  #line 3027 
  prod_bd->rx_bd_haddr_lo = cons_bd->rx_bd_haddr_lo;
  #line 3028 
  return;
}

#line 3031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct sk_buff *bnx2_rx_skb(struct bnx2 *bp, struct bnx2_rx_ring_info *rxr, u8 *data, unsigned int len, unsigned int hdr_len, dma_addr_t dma_addr, u32 ring_idx)
{
  #line 3035 
  int err;
  #line 3037 
  struct sk_buff *skb;
  #line 3036 
  u16 prod = (unsigned short)ring_idx;
  #line 3039 
  err = bnx2_alloc_rx_data(bp,rxr,(unsigned short)((int)prod),2592U);
  #line 3040 
  if ((long)(err != 0) != 0L) {
    #line 3041 
    bnx2_reuse_rx_data(bp,rxr,data,(unsigned short)((int)((unsigned short)(ring_idx >> 16))),(unsigned short)((int)prod));
    #line 3042 
    error: 
           #line 3042 
    ;
    #line 3043 
    if (hdr_len != 0U) {
      #line 3044 
      unsigned int raw_len = len + 4U;
      #line 3045 
      int pages = (int)(((raw_len - hdr_len) + 4095U) >> 12);
      #line 3047 
      bnx2_reuse_rx_skb_pages(bp,rxr,(struct sk_buff *)0,pages);
    }
    #line 3049 
    return (struct sk_buff *)0;
  }
  #line 3052 
  dma_unmap_single_attrs(& (bp->pdev)->dev,dma_addr,(unsigned long)bp->rx_buf_use_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 3054 
  skb = build_skb((void *)data,0U);
  #line 3055 
  if (skb == (struct sk_buff *)0) {
    #line 3056 
    kfree((void *)data);
    #line 3057 
    goto error;
  }
  #line 3059 
  ;
  #line 3059 
  ;
  #line 3059 
  skb_reserve(skb,(int)(((u8 *)get_l2_fhdr(data) - data) + (long)18U));
  #line 3060 
  if (hdr_len == 0U) {
    #line 3061 
    skb_put(skb,len);
    #line 3062 
    return skb;
  }
  else {
    #line 3064 
    unsigned int i;
    #line 3064 
    unsigned int frag_len;
    #line 3064 
    unsigned int frag_size;
    #line 3064 
    unsigned int pages_0;
    #line 3065 
    struct bnx2_sw_pg *rx_pg;
    #line 3066 
    u16 pg_cons = rxr->rx_pg_cons;
    #line 3067 
    u16 pg_prod = rxr->rx_pg_prod;
    #line 3069 
    frag_size = (len - hdr_len) + 4U;
    #line 3070 
    pages_0 = (frag_size + 4095U) >> 12;
    #line 3071 
    skb_put(skb,hdr_len);
    #line 3073 
    i = 0U;
    #line 3073 
    while (i < pages_0) {
      {
        #line 3076 
        unsigned int __UNIQUE_ID___x567;
        #line 3076 
        unsigned int tmp_0;
        #line 3074 
        dma_addr_t mapping_old;
        #line 3127 
        unsigned int tmp_3;
        {
          #line 3076 
          __UNIQUE_ID___x567 = frag_size;
          #line 3076 
          unsigned int __UNIQUE_ID___y568 = 4096U;
          #line 3076 
          if (__UNIQUE_ID___x567 < __UNIQUE_ID___y568) 
                                                       #line 3076 
                                                       tmp_0 = __UNIQUE_ID___x567; else 
                                                                    #line 3076 
                                                                    tmp_0 = __UNIQUE_ID___y568;
          }
        #line 3076 
        frag_len = tmp_0;
        #line 3077 
        if ((long)(frag_len <= 4U) != 0L) {
          #line 3078 
          unsigned int tail = 4U - frag_len;
          #line 3080 
          rxr->rx_pg_cons = pg_cons;
          #line 3081 
          rxr->rx_pg_prod = pg_prod;
          #line 3082 
          bnx2_reuse_rx_skb_pages(bp,rxr,(struct sk_buff *)0,(int)(pages_0 - i));
          #line 3084 
          skb->len -= tail;
          #line 3085 
          if (i == 0U) 
                       #line 3086 
                       skb->tail -= tail;
          else {
            #line 3088 
            skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i + 4294967295U];
            #line 3090 
            skb_frag_size_sub(frag,(int)tail);
            #line 3091 
            skb->data_len -= tail;
          }
          #line 3093 
          return skb;
        }
        #line 3095 
        rx_pg = rxr->rx_pg_ring + (unsigned long)pg_cons;
        #line 3100 
        mapping_old = rx_pg->mapping;
        #line 3101 
        if (pages_0 + 4294967295U == i) 
                                        #line 3102 
                                        frag_len += 4294967292U;
        #line 3104 
        skb_fill_page_desc(skb,(int)i,rx_pg->page,0,(int)frag_len);
        #line 3105 
        rx_pg->page = (struct page *)0;
        #line 3107 
        err = bnx2_alloc_rx_page(bp,rxr,(unsigned short)((int)((unsigned short)bp->rx_max_pg_ring_idx) & (int)pg_prod),2592U);
        #line 3110 
        if ((long)(err != 0) != 0L) {
          #line 3111 
          rxr->rx_pg_cons = pg_cons;
          #line 3112 
          rxr->rx_pg_prod = pg_prod;
          #line 3113 
          bnx2_reuse_rx_skb_pages(bp,rxr,skb,(int)(pages_0 - i));
          #line 3115 
          return (struct sk_buff *)0;
        }
        #line 3118 
        dma_unmap_page_attrs(& (bp->pdev)->dev,mapping_old,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
        #line 3121 
        frag_size -= frag_len;
        #line 3122 
        skb->data_len += frag_len;
        #line 3123 
        skb->truesize += 4096U;
        #line 3124 
        skb->len += frag_len;
        #line 3126 
        if (((unsigned long)pg_prod & 254UL) == 254UL) 
                                                       #line 3126 
                                                       pg_prod = (unsigned short)((unsigned int)pg_prod + 2U); else 
                                                                    #line 3126 
                                                                    pg_prod = (unsigned short)((unsigned int)pg_prod + 1U);
        #line 3127 
        if (((unsigned long)pg_cons & 254UL) == 254UL) 
                                                       #line 3127 
                                                       tmp_3 = (unsigned int)pg_cons + 2U; else 
                                                                    #line 3127 
                                                                    tmp_3 = (unsigned int)pg_cons + 1U;
        #line 3127 
        pg_cons = (unsigned short)(tmp_3 & (unsigned int)((unsigned short)bp->rx_max_pg_ring_idx));
      }
      #line 3073 
      i ++;
    }
    #line 3129 
    rxr->rx_pg_prod = pg_prod;
    #line 3130 
    rxr->rx_pg_cons = pg_cons;
  }
  #line 3132 
  return skb;
}

#line 3136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
__inline static u16 bnx2_get_hw_rx_cons(struct bnx2_napi *bnapi)
{
  #line 3141 
  union __anonunion___u_1068 __u;
  #line 3138 
  u16 cons;
  #line 3140 
  __read_once_size((void *)bnapi->hw_rx_cons_ptr,(void *)(& __u.__c),2);
  #line 3140 
  cons = (__u.__val);
  #line 3142 
  if ((long)(((unsigned long)cons & 255UL) == 255UL) != 0L) 
                                                            #line 3143 
                                                            cons = (u16)((int)cons + 1);
  #line 3144 
  return cons;
}

#line 3148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_rx_int(struct bnx2 *bp, struct bnx2_napi *bnapi, int budget)
{
  #line 3151 
  u16 hw_cons;
  #line 3151 
  u16 sw_cons;
  #line 3151 
  u16 sw_ring_cons;
  #line 3151 
  u16 sw_prod;
  #line 3151 
  u16 sw_ring_prod;
  #line 3152 
  struct l2_fhdr *rx_hdr;
  #line 3150 
  struct bnx2_rx_ring_info *rxr = & bnapi->rx_ring;
  #line 3153 
  int rx_pkt = 0;
  #line 3153 
  int pg_ring_used = 0;
  #line 3155 
  if (budget <= 0) 
                   #line 3156 
                   return rx_pkt;
  #line 3158 
  hw_cons = bnx2_get_hw_rx_cons(bnapi);
  #line 3159 
  sw_cons = rxr->rx_cons;
  #line 3160 
  sw_prod = rxr->rx_prod;
  #line 3161 
  ldv_inline_asm();
  #line 3166 
  while ((int)sw_cons != (int)hw_cons) {
    #line 3167 
    unsigned int len;
    #line 3167 
    unsigned int hdr_len;
    #line 3168 
    u32 status;
    #line 3169 
    struct bnx2_sw_bd *rx_buf;
    #line 3169 
    struct bnx2_sw_bd *next_rx_buf;
    #line 3170 
    struct sk_buff *skb;
    #line 3171 
    dma_addr_t dma_addr;
    #line 3172 
    u8 *data;
    #line 3173 
    u16 next_ring_idx;
    #line 3191 
    unsigned int tmp;
    #line 3175 
    sw_ring_cons = (unsigned short)((int)((unsigned short)bp->rx_max_ring_idx) & (int)sw_cons);
    #line 3176 
    sw_ring_prod = (unsigned short)((int)((unsigned short)bp->rx_max_ring_idx) & (int)sw_prod);
    #line 3178 
    rx_buf = rxr->rx_buf_ring + (unsigned long)sw_ring_cons;
    #line 3179 
    data = rx_buf->data;
    #line 3180 
    rx_buf->data = (u8 *)0U;
    #line 3182 
    rx_hdr = get_l2_fhdr(data);
    #line 3183 
    __builtin_prefetch((void const *)((void *)rx_hdr));
    #line 3185 
    dma_addr = rx_buf->mapping;
    #line 3187 
    dma_sync_single_for_cpu(& (bp->pdev)->dev,dma_addr,146UL,(enum dma_data_direction)DMA_FROM_DEVICE);
    #line 3191 
    if (((unsigned long)sw_cons & 254UL) == 254UL) 
                                                   #line 3191 
                                                   tmp = (unsigned int)sw_cons + 2U; else 
                                                                    #line 3191 
                                                                    tmp = (unsigned int)sw_cons + 1U;
    #line 3191 
    next_ring_idx = (unsigned short)(tmp & (unsigned int)((unsigned short)bp->rx_max_ring_idx));
    #line 3192 
    next_rx_buf = rxr->rx_buf_ring + (unsigned long)next_ring_idx;
    #line 3193 
    __builtin_prefetch((void const *)((void *)get_l2_fhdr(next_rx_buf->data)));
    #line 3195 
    len = (unsigned int)rx_hdr->l2_fhdr_pkt_len;
    #line 3196 
    status = rx_hdr->l2_fhdr_status;
    #line 3198 
    hdr_len = 0U;
    #line 3199 
    if ((status & 65536U) != 0U) {
      #line 3200 
      hdr_len = (unsigned int)rx_hdr->l2_fhdr_ip_xsum;
      #line 3201 
      pg_ring_used = 1;
    }
    else 
      #line 3202 
      if (bp->rx_jumbo_thresh < len) {
        #line 3203 
        hdr_len = bp->rx_jumbo_thresh;
        #line 3204 
        pg_ring_used = 1;
      }
    #line 3207 
    if ((long)((status & 4063232U) != 0U) != 0L) {
      #line 3213 
      bnx2_reuse_rx_data(bp,rxr,data,(unsigned short)((int)sw_ring_cons),(unsigned short)((int)sw_ring_prod));
      #line 3215 
      if (pg_ring_used != 0) {
        #line 3216 
        int pages;
        #line 3218 
        pages = (int)(((len - hdr_len) + 4095U) >> 12);
        #line 3220 
        bnx2_reuse_rx_skb_pages(bp,rxr,(struct sk_buff *)0,pages);
      }
      #line 3222 
      goto next_rx;
    }
    #line 3225 
    len += 4294967292U;
    #line 3227 
    if (bp->rx_copy_thresh >= len) {
      #line 3228 
      skb = netdev_alloc_skb(bp->dev,len + 6U);
      #line 3229 
      if (skb == (struct sk_buff *)0) {
        #line 3230 
        bnx2_reuse_rx_data(bp,rxr,data,(unsigned short)((int)sw_ring_cons),(unsigned short)((int)sw_ring_prod));
        #line 3232 
        goto next_rx;
      }
      #line 3236 
      memcpy((void *)skb->data,(void *)((u8 *)rx_hdr + 12UL),(unsigned long)(len + 6U));
      #line 3239 
      skb_reserve(skb,6);
      #line 3240 
      skb_put(skb,len);
      #line 3242 
      bnx2_reuse_rx_data(bp,rxr,data,(unsigned short)((int)sw_ring_cons),(unsigned short)((int)sw_ring_prod));
    }
    else {
      #line 3246 
      skb = bnx2_rx_skb(bp,rxr,data,len,hdr_len,dma_addr,(unsigned int)(((int)sw_ring_cons << 16) | (int)sw_ring_prod));
      #line 3248 
      if (skb == (struct sk_buff *)0) 
                                      #line 3249 
                                      goto next_rx;
    }
    #line 3251 
    if ((status & 64U) != 0U && ((long)bp->rx_mode & 1024L) == 0L) 
                                                                   #line 3253 
                                                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)rx_hdr->l2_fhdr_vlan_tag));
    #line 3255 
    skb->protocol = eth_type_trans(skb,bp->dev);
    #line 3257 
    if (((bp->dev)->mtu + 14U < len && (unsigned int)skb->protocol != 129U) && (unsigned int)skb->protocol != 43144U) {
      #line 3261 
      consume_skb(skb);
      #line 3262 
      goto next_rx;
    }
    #line 3266 
    skb_checksum_none_assert(skb);
    #line 3267 
    if (((bp->dev)->features & 549755813888ULL) != 0ULL && (status & 49152U) != 0U) 
      #line 3271 
      if ((long)((status & 2415919104U) == 0U) != 0L) 
                                                      #line 3273 
                                                      skb->ip_summed = (unsigned char)1U;
    #line 3275 
    if (((bp->dev)->features & 274877906944ULL) != 0ULL && (status & 16640U) == 16640U) 
      #line 3278 
      skb_set_hash(skb,rx_hdr->l2_fhdr_hash,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
    #line 3281 
    skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)((bnapi - & bp->bnx2_napi[0]) / 1216L))));
    #line 3282 
    napi_gro_receive(& bnapi->napi,skb);
    #line 3283 
    rx_pkt ++;
    #line 3285 
    next_rx: 
             #line 3285 
    ;
    #line 3286 
    if (((unsigned long)sw_cons & 254UL) == 254UL) 
                                                   #line 3286 
                                                   sw_cons = (unsigned short)((unsigned int)sw_cons + 2U); else 
                                                                    #line 3286 
                                                                    sw_cons = (unsigned short)((unsigned int)sw_cons + 1U);
    #line 3287 
    if (((unsigned long)sw_prod & 254UL) == 254UL) 
                                                   #line 3287 
                                                   sw_prod = (unsigned short)((unsigned int)sw_prod + 2U); else 
                                                                    #line 3287 
                                                                    sw_prod = (unsigned short)((unsigned int)sw_prod + 1U);
    #line 3289 
    if (rx_pkt == budget) 
                          #line 3290 
                          break;
    #line 3293 
    if ((int)sw_cons == (int)hw_cons) {
      #line 3294 
      hw_cons = bnx2_get_hw_rx_cons(bnapi);
      #line 3295 
      ldv_inline_asm();
    }
  }
  #line 3298 
  rxr->rx_cons = sw_cons;
  #line 3299 
  rxr->rx_prod = sw_prod;
  #line 3301 
  if (pg_ring_used != 0) 
                         #line 3302 
                         writew((unsigned short)((int)rxr->rx_pg_prod),bp->regview + (unsigned long)rxr->rx_pg_bidx_addr);
  #line 3304 
  writew((unsigned short)((int)sw_prod),bp->regview + (unsigned long)rxr->rx_bidx_addr);
  #line 3306 
  writel(rxr->rx_prod_bseq,bp->regview + (unsigned long)rxr->rx_bseq_addr);
  #line 3308 
  return rx_pkt;
}

#line 3316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static irqreturn_t bnx2_msi(int irq, void *dev_instance)
{
  #line 3318 
  struct bnx2_napi *bnapi = (struct bnx2_napi *)dev_instance;
  #line 3319 
  struct bnx2 *bp = bnapi->bp;
  #line 3321 
  __builtin_prefetch((void const *)((void *)bnapi->status_blk.msi));
  #line 3322 
  writel(393216U,bp->regview + 132U);
  #line 3327 
  if ((long)(atomic_read(& bp->intr_sem) != 0) != 0L) 
                                                      #line 3328 
                                                      return IRQ_HANDLED;
  #line 3330 
  napi_schedule(& bnapi->napi);
  #line 3332 
  return IRQ_HANDLED;
}

#line 3336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static irqreturn_t bnx2_msi_1shot(int irq, void *dev_instance)
{
  #line 3338 
  struct bnx2_napi *bnapi = (struct bnx2_napi *)dev_instance;
  #line 3339 
  struct bnx2 *bp = bnapi->bp;
  #line 3341 
  __builtin_prefetch((void const *)((void *)bnapi->status_blk.msi));
  #line 3344 
  if ((long)(atomic_read(& bp->intr_sem) != 0) != 0L) 
                                                      #line 3345 
                                                      return IRQ_HANDLED;
  #line 3347 
  napi_schedule(& bnapi->napi);
  #line 3349 
  return IRQ_HANDLED;
}

#line 3353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static irqreturn_t bnx2_interrupt(int irq, void *dev_instance)
{
  #line 3355 
  struct bnx2_napi *bnapi = (struct bnx2_napi *)dev_instance;
  #line 3356 
  struct bnx2 *bp = bnapi->bp;
  #line 3357 
  struct status_block *sblk = bnapi->status_blk.msi;
  #line 3365 
  if ((unsigned int)sblk->status_idx == bnapi->last_status_idx) {
    #line 3365 
    if (((long)readl(bp->regview + 108U) & 1L) != 0L) 
                                                      #line 3368 
                                                      return IRQ_NONE;
  }
  #line 3370 
  writel(393216U,bp->regview + 132U);
  #line 3377 
  readl(bp->regview + 132U);
  #line 3380 
  if ((long)(atomic_read(& bp->intr_sem) != 0) != 0L) 
                                                      #line 3381 
                                                      return IRQ_HANDLED;
  #line 3383 
  if ((int)napi_schedule_prep(& bnapi->napi) != 0) {
    #line 3384 
    bnapi->last_status_idx = (unsigned int)sblk->status_idx;
    #line 3385 
    __napi_schedule(& bnapi->napi);
  }
  #line 3388 
  return IRQ_HANDLED;
}

#line 3392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
__inline static int bnx2_has_fast_work(struct bnx2_napi *bnapi)
{
  #line 3394 
  struct bnx2_tx_ring_info *txr = & bnapi->tx_ring;
  #line 3395 
  struct bnx2_rx_ring_info *rxr = & bnapi->rx_ring;
  #line 3397 
  ;
  #line 3397 
  if ((int)bnx2_get_hw_rx_cons(bnapi) != (int)rxr->rx_cons) 
                                                            #line 3399 
                                                            return 1;
  else {
    #line 3397 
    ;
    #line 3397 
    if ((int)bnx2_get_hw_tx_cons(bnapi) != (int)txr->hw_tx_cons) 
                                                                 #line 3399 
                                                                 return 1;
  }
  #line 3400 
  return 0;
}

#line 3407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
__inline static int bnx2_has_work(struct bnx2_napi *bnapi)
{
  #line 3409 
  struct status_block *sblk = bnapi->status_blk.msi;
  #line 3411 
  if (bnx2_has_fast_work(bnapi) != 0) 
                                      #line 3412 
                                      return 1;
  #line 3415 
  if (bnapi->cnic_present != 0 && bnapi->cnic_tag != (unsigned int)sblk->status_idx) 
    #line 3416 
    return 1;
  #line 3419 
  if (((long)(sblk->status_attn_bits ^ sblk->status_attn_bits_ack) & 16777217L) != 0L) 
    #line 3421 
    return 1;
  #line 3423 
  return 0;
}

#line 3427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_chk_missed_msi(struct bnx2 *bp)
{
  #line 3430 
  u32 msi_ctrl;
  #line 3429 
  struct bnx2_napi *bnapi = & bp->bnx2_napi[0];
  #line 3432 
  if (bnx2_has_work(bnapi) != 0) {
    #line 3433 
    msi_ctrl = readl(bp->regview + 88U);
    #line 3434 
    if (((long)msi_ctrl & 65536L) == 0L) 
                                         #line 3435 
                                         return;
    #line 3437 
    if (bnapi->last_status_idx == bp->idle_chk_status_idx) {
      #line 3438 
      writel(msi_ctrl & 4294901759U,bp->regview + 88U);
      #line 3440 
      writel(msi_ctrl,bp->regview + 88U);
      #line 3441 
      bnx2_msi((int)bp->irq_tbl[0].vector,(void *)bnapi);
    }
  }
  #line 3445 
  bp->idle_chk_status_idx = bnapi->last_status_idx;
  #line 3446 
  return;
}

#line 3449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_poll_cnic(struct bnx2 *bp, struct bnx2_napi *bnapi)
{
  #line 3457 
  struct cnic_ops *________p1;
  #line 3451 
  struct cnic_ops *c_ops;
  #line 3453 
  if (bnapi->cnic_present == 0) 
                                #line 3454 
                                return;
  #line 3456 
  rcu_read_lock();
  {
    #line 3458 
    union __anonunion___u_1070 __u;
    #line 3457 
    __read_once_size((void *)(& bp->cnic_ops),(void *)(& __u.__c),8);
    #line 3457 
    ________p1 = (__u.__val);
    {
      #line 3457 
      bool __warned;
      #line 3457 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 3457 
        if (! __warned) {
          #line 3457 
          if (rcu_read_lock_held() == 0) {
            #line 3457 
            __warned = (_Bool)1;
            #line 3457 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c",3457,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 3457 
  c_ops = ________p1;
  #line 3458 
  if (c_ops != (struct cnic_ops *)0) {
    #line 3459 
    bnapi->cnic_tag = (unsigned int)(*(c_ops->cnic_handler))(bp->cnic_data,(void *)bnapi->status_blk.msi);
  }
  #line 3461 
  rcu_read_unlock();
  #line 3462 
  return;
}

#line 3465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_poll_link(struct bnx2 *bp, struct bnx2_napi *bnapi)
{
  #line 3467 
  struct status_block *sblk = bnapi->status_blk.msi;
  #line 3468 
  u32 status_attn_bits = sblk->status_attn_bits;
  #line 3469 
  u32 status_attn_bits_ack = sblk->status_attn_bits_ack;
  #line 3471 
  if (((long)(status_attn_bits ^ status_attn_bits_ack) & 16777217L) != 0L) {
    #line 3474 
    bnx2_phy_int(bp,bnapi);
    #line 3479 
    writel(bp->hc_cmd | 131072U,bp->regview + 26624U);
    #line 3481 
    readl(bp->regview + 26624U);
  }
  #line 3483 
  return;
}

#line 3485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_poll_work(struct bnx2 *bp, struct bnx2_napi *bnapi, int work_done, int budget)
{
  #line 3488 
  struct bnx2_tx_ring_info *txr = & bnapi->tx_ring;
  #line 3489 
  struct bnx2_rx_ring_info *rxr = & bnapi->rx_ring;
  #line 3491 
  ;
  #line 3491 
  if ((int)bnx2_get_hw_tx_cons(bnapi) != (int)txr->hw_tx_cons) 
                                                               #line 3492 
                                                               bnx2_tx_int(bp,bnapi,0);
  #line 3494 
  ;
  #line 3494 
  if ((int)bnx2_get_hw_rx_cons(bnapi) != (int)rxr->rx_cons) {
    #line 3495 
    work_done = bnx2_rx_int(bp,bnapi,budget - work_done) + work_done;
  }
  #line 3497 
  return work_done;
}

#line 3500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_poll_msix(struct napi_struct *napi, int budget)
{
  #line 3502 
  void *__mptr;
  #line 3502 
  __mptr = (void *)napi;
  #line 3502 
  struct bnx2_napi *bnapi = ((struct bnx2_napi *)__mptr);
  #line 3503 
  struct bnx2 *bp = bnapi->bp;
  #line 3504 
  int work_done = 0;
  #line 3505 
  struct status_block_msix *sblk = bnapi->status_blk.msix;
  #line 3507 
  while (1) {
    {
      #line 3508 
      work_done = bnx2_poll_work(bp,bnapi,work_done,budget);
      #line 3509 
      if ((long)(work_done >= budget) != 0L) 
                                             #line 3510 
                                             break;
      #line 3512 
      bnapi->last_status_idx = (unsigned int)sblk->status_idx;
      #line 3513 
      ldv_inline_asm();
      #line 3515 
      if ((long)(bnx2_has_fast_work(bnapi) == 0) != 0L) {
        #line 3517 
        napi_complete_done(napi,work_done);
        #line 3518 
        writel((bnapi->int_num | bnapi->last_status_idx) | 65536U,bp->regview + 132U);
        #line 3521 
        break;
      }
    }
  }
  #line 3524 
  return work_done;
}

#line 3527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_poll(struct napi_struct *napi, int budget)
{
  #line 3529 
  void *__mptr;
  #line 3529 
  __mptr = (void *)napi;
  #line 3529 
  struct bnx2_napi *bnapi = ((struct bnx2_napi *)__mptr);
  #line 3530 
  struct bnx2 *bp = bnapi->bp;
  #line 3531 
  int work_done = 0;
  #line 3532 
  struct status_block *sblk = bnapi->status_blk.msi;
  #line 3534 
  while (1) {
    {
      #line 3535 
      bnx2_poll_link(bp,bnapi);
      #line 3537 
      work_done = bnx2_poll_work(bp,bnapi,work_done,budget);
      #line 3540 
      bnx2_poll_cnic(bp,bnapi);
      #line 3547 
      bnapi->last_status_idx = (unsigned int)sblk->status_idx;
      #line 3549 
      if ((long)(work_done >= budget) != 0L) 
                                             #line 3550 
                                             break;
      #line 3551 
      ldv_inline_asm();
      #line 3553 
      if ((long)(bnx2_has_work(bnapi) == 0) != 0L) {
        #line 3554 
        napi_complete_done(napi,work_done);
        #line 3555 
        if ((long)((bp->flags & 1056U) != 0U) != 0L) {
          #line 3556 
          writel(bnapi->last_status_idx | 65536U,bp->regview + 132U);
          #line 3559 
          break;
        }
        #line 3561 
        writel(bnapi->last_status_idx | 327680U,bp->regview + 132U);
        #line 3566 
        writel(bnapi->last_status_idx | 65536U,bp->regview + 132U);
        #line 3569 
        break;
      }
    }
  }
  #line 3573 
  return work_done;
}

#line 3580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_set_rx_mode(struct net_device *dev)
{
  #line 3583 
  u32 rx_mode;
  #line 3583 
  u32 sort_mode;
  #line 3584 
  struct netdev_hw_addr *ha;
  #line 3585 
  int i;
  #line 3582 
  struct bnx2 *bp = netdev_priv(dev);
  #line 3587 
  if (! netif_running(dev)) 
                            #line 3588 
                            return;
  #line 3590 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 3592 
  rx_mode = bp->rx_mode & 4294966015U;
  #line 3594 
  sort_mode = 65537U;
  #line 3595 
  if ((dev->features & 256ULL) == 0ULL && (bp->flags & 4096U) != 0U) 
    #line 3597 
    rx_mode |= 1024U;
  #line 3598 
  if ((dev->flags & 256U) != 0U) {
    #line 3600 
    rx_mode |= 256U;
    #line 3601 
    sort_mode |= 17301504U;
  }
  else 
    #line 3604 
    if ((dev->flags & 512U) != 0U) {
      #line 3605 
      i = 0;
      #line 3605 
      while (i <= 7) {
        #line 3606 
        writel(4294967295U,bp->regview + ((unsigned long)(i * 4) + (unsigned long)5328U));
        #line 3605 
        i ++;
      }
      #line 3609 
      sort_mode |= 131072U;
    }
    else {
      #line 3620 
      void *__mptr;
      #line 3613 
      u32 mc_filter[8U];
      #line 3614 
      u32 regidx;
      #line 3615 
      u32 bit;
      #line 3616 
      u32 crc;
      #line 3618 
      memset((void *)(& mc_filter),0,32UL);
      #line 3620 
      __mptr = (void *)dev->mc.list.next;
      #line 3620 
      ha = ((struct netdev_hw_addr *)__mptr);
      #line 3620 
      while (& ha->list != & dev->mc.list) {
        #line 3620 
        void *__mptr_0;
        #line 3621 
        crc = crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
        #line 3622 
        bit = crc & 255U;
        #line 3623 
        regidx = (bit >> 5) & 7U;
        #line 3624 
        bit &= 31U;
        #line 3625 
        mc_filter[regidx] |= (unsigned int)(1 << bit);
        #line 3620 
        __mptr_0 = (void *)ha->list.next;
        #line 3620 
        ha = ((struct netdev_hw_addr *)__mptr_0);
      }
      #line 3628 
      i = 0;
      #line 3628 
      while (i <= 7) {
        #line 3629 
        writel(mc_filter[i],bp->regview + ((unsigned long)(i * 4) + (unsigned long)5328U));
        #line 3628 
        i ++;
      }
      #line 3633 
      sort_mode |= 262144U;
    }
  #line 3636 
  if (dev->uc.count > 4) {
    #line 3637 
    rx_mode |= 256U;
    #line 3638 
    sort_mode |= 17301504U;
  }
  else 
    #line 3640 
    if ((dev->flags & 256U) == 0U) {
      #line 3643 
      void *__mptr_1;
      #line 3642 
      i = 0;
      #line 3643 
      __mptr_1 = (void *)dev->uc.list.next;
      #line 3643 
      ha = ((struct netdev_hw_addr *)__mptr_1);
      #line 3643 
      while (& ha->list != & dev->uc.list) {
        #line 3643 
        void *__mptr_2;
        #line 3644 
        bnx2_set_mac_addr(bp,(u8 *)(& ha->addr),(unsigned int)(i + 4));
        #line 3646 
        sort_mode = (unsigned int)(1 << (i + 4)) | sort_mode;
        #line 3648 
        i ++;
        #line 3643 
        __mptr_2 = (void *)ha->list.next;
        #line 3643 
        ha = ((struct netdev_hw_addr *)__mptr_2);
      }
    }
  #line 3653 
  if (bp->rx_mode != rx_mode) {
    #line 3654 
    bp->rx_mode = rx_mode;
    #line 3655 
    writel(rx_mode,bp->regview + 5320U);
  }
  #line 3658 
  writel(0U,bp->regview + 6176U);
  #line 3659 
  writel(sort_mode,bp->regview + 6176U);
  #line 3660 
  writel(sort_mode | 2147483648U,bp->regview + 6176U);
  #line 3662 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 3663 
  return;
}

#line 3666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int check_fw_section(struct firmware *fw, struct bnx2_fw_file_section *section, u32 alignment, bool non_empty)
{
  #line 3670 
  u32 offset = __builtin_bswap32(section->offset);
  #line 3671 
  u32 len = __builtin_bswap32(section->len);
  #line 3673 
  if ((offset == 0U && len != 0U || (unsigned long)offset >= fw->size) || (offset & 3U) != 0U) 
    #line 3674 
    return -22;
  #line 3675 
  if (((int)non_empty != 0 && len == 0U || (unsigned long)len > fw->size - (unsigned long)offset) || ((alignment + 4294967295U) & len) != 0U) 
    #line 3677 
    return -22;
  #line 3678 
  return 0;
}

#line 3682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int check_mips_fw_entry(struct firmware *fw, struct bnx2_mips_fw_file_entry *entry)
{
  #line 3685 
  if (check_fw_section(fw,& entry->text,4U,(_Bool)1) != 0) 
                                                           #line 3688 
                                                           return -22;
  else {
    #line 3685 
    if (check_fw_section(fw,& entry->data,4U,(_Bool)0) != 0) 
                                                             #line 3688 
                                                             return -22;
    else {
      #line 3686 
      if (check_fw_section(fw,& entry->rodata,4U,(_Bool)0) != 0) 
                                                                 #line 3688 
                                                                 return -22;
    }
  }
  #line 3689 
  return 0;
}

#line 3692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_release_firmware(struct bnx2 *bp)
{
  #line 3694 
  if (bp->rv2p_firmware != (struct firmware *)0) {
    #line 3695 
    cif_release_firmware(bp->mips_firmware);
    #line 3696 
    cif_release_firmware(bp->rv2p_firmware);
    #line 3697 
    bp->rv2p_firmware = (struct firmware *)0;
  }
  #line 3699 
  return;
}

#line 3701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_request_uncached_firmware(struct bnx2 *bp)
{
  #line 3703 
  char *mips_fw_file;
  #line 3703 
  char *rv2p_fw_file;
  #line 3704 
  struct bnx2_mips_fw_file *mips_fw;
  #line 3705 
  struct bnx2_rv2p_fw_file *rv2p_fw;
  #line 3706 
  int rc;
  #line 3708 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 3709 
    mips_fw_file = (char *)"bnx2/bnx2-mips-09-6.2.1b.fw";
    #line 3710 
    if ((bp->chip_id & 4294967280U) == 1460207616U || (bp->chip_id & 4294967280U) == 1460207632U) 
      #line 3712 
      rv2p_fw_file = (char *)"bnx2/bnx2-rv2p-09ax-6.0.17.fw"; else 
                                                                   #line 3714 
                                                                   rv2p_fw_file = (char *)"bnx2/bnx2-rv2p-09-6.0.17.fw";
  }
  else {
    #line 3716 
    mips_fw_file = (char *)"bnx2/bnx2-mips-06-6.2.3.fw";
    #line 3717 
    rv2p_fw_file = (char *)"bnx2/bnx2-rv2p-06-6.0.15.fw";
  }
  #line 3720 
  rc = cif_request_firmware(& bp->mips_firmware,mips_fw_file,& (bp->pdev)->dev);
  #line 3721 
  if (rc != 0) {
    #line 3722 
    printk((char *)"\001",mips_fw_file);
    #line 3723 
    goto out;
  }
  #line 3726 
  rc = cif_request_firmware(& bp->rv2p_firmware,rv2p_fw_file,& (bp->pdev)->dev);
  #line 3727 
  if (rc != 0) {
    #line 3728 
    printk((char *)"\001",rv2p_fw_file);
    #line 3729 
    goto err_release_mips_firmware;
  }
  #line 3731 
  mips_fw = (struct bnx2_mips_fw_file *)(bp->mips_firmware)->data;
  #line 3732 
  rv2p_fw = (struct bnx2_rv2p_fw_file *)(bp->rv2p_firmware)->data;
  #line 3733 
  if ((bp->mips_firmware)->size <= 199UL) 
                                          #line 3733 
                                          goto _LOR;
  else {
    #line 3733 
    if (check_mips_fw_entry(bp->mips_firmware,& mips_fw->com) != 0) 
                                                                    #line 3733 
                                                                    goto _LOR;
    else {
      #line 3734 
      if (check_mips_fw_entry(bp->mips_firmware,& mips_fw->cp) != 0) 
        #line 3733 
        goto _LOR;
      else {
        #line 3735 
        if (check_mips_fw_entry(bp->mips_firmware,& mips_fw->rxp) != 0) 
          #line 3733 
          goto _LOR;
        else {
          #line 3736 
          if (check_mips_fw_entry(bp->mips_firmware,& mips_fw->tpat) != 0) 
            #line 3733 
            goto _LOR;
          else {
            #line 3737 
            if (check_mips_fw_entry(bp->mips_firmware,& mips_fw->txp) != 0) {
              #line 3733 
              _LOR: {
                      #line 3739 
                      printk((char *)"\001",mips_fw_file);
                      #line 3740 
                      rc = -22;
                      #line 3741 
                      goto err_release_firmware;
                    }
            }
          }
        }
      }
    }
  }
  #line 3743 
  if ((bp->rv2p_firmware)->size <= 87UL) 
                                         #line 3743 
                                         goto _LOR_0;
  else {
    #line 3743 
    if (check_fw_section(bp->rv2p_firmware,& rv2p_fw->proc1.rv2p,8U,(_Bool)1) != 0) 
      #line 3743 
      goto _LOR_0;
    else {
      #line 3744 
      if (check_fw_section(bp->rv2p_firmware,& rv2p_fw->proc2.rv2p,8U,(_Bool)1) != 0) {
        #line 3743 
        _LOR_0: {
                  #line 3746 
                  printk((char *)"\001",rv2p_fw_file);
                  #line 3747 
                  rc = -22;
                  #line 3748 
                  goto err_release_firmware;
                }
      }
    }
  }
  #line 3750 
  out: 
       #line 3750 
  ;
  #line 3751 
  return rc;
  #line 3753 
  err_release_firmware: 
                        #line 3753 
  ;
  #line 3754 
  cif_release_firmware(bp->rv2p_firmware);
  #line 3755 
  bp->rv2p_firmware = (struct firmware *)0;
  #line 3756 
  err_release_mips_firmware: 
                             #line 3756 
  ;
  #line 3757 
  cif_release_firmware(bp->mips_firmware);
  #line 3758 
  goto out;
}

#line 3761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_request_firmware(struct bnx2 *bp)
{
  #line 3763 
  int tmp_0;
  #line 3763 
  if (bp->rv2p_firmware == (struct firmware *)0) 
                                                 #line 3763 
                                                 tmp_0 = bnx2_request_uncached_firmware(bp); else 
                                                                    #line 3763 
                                                                    tmp_0 = 0;
  #line 3763 
  return tmp_0;
}

#line 3767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static u32 rv2p_fw_fixup(u32 rv2p_proc, int idx, u32 loc, u32 rv2p_code)
{
  #line 3769 
  switch (idx) {
    #line 3770 
    case 0: 
            #line 3770 
    ;
    #line 3771 
    rv2p_code &= 4294901760U;
    #line 3772 
    rv2p_code |= 255U;
    #line 3773 
    break;
  }
  #line 3775 
  return rv2p_code;
}

#line 3779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int load_rv2p_fw(struct bnx2 *bp, u32 rv2p_proc, struct bnx2_rv2p_fw_file_entry *fw_entry)
{
  #line 3782 
  u32 rv2p_code_len;
  #line 3782 
  u32 file_offset;
  #line 3783 
  __be32 *rv2p_code;
  #line 3784 
  int i;
  #line 3785 
  u32 val;
  #line 3785 
  u32 cmd;
  #line 3785 
  u32 addr;
  #line 3787 
  rv2p_code_len = __builtin_bswap32(fw_entry->rv2p.len);
  #line 3788 
  file_offset = __builtin_bswap32(fw_entry->rv2p.offset);
  #line 3790 
  rv2p_code = (__be32 *)((bp->rv2p_firmware)->data + (unsigned long)file_offset);
  #line 3792 
  if (rv2p_proc == 0U) {
    #line 3793 
    cmd = 2147483648U;
    #line 3794 
    addr = 10296U;
  }
  else {
    #line 3796 
    cmd = 2147483648U;
    #line 3797 
    addr = 10300U;
  }
  #line 3800 
  i = 0;
  #line 3800 
  while ((unsigned int)i < rv2p_code_len) {
    {
      #line 3801 
      ;
      #line 3801 
      writel(__builtin_bswap32(*rv2p_code),bp->regview + 10288U);
      #line 3802 
      rv2p_code ++;
      #line 3803 
      ;
      #line 3803 
      writel(__builtin_bswap32(*rv2p_code),bp->regview + 10292U);
      #line 3804 
      rv2p_code ++;
      #line 3806 
      val = (unsigned int)(i / 8) | cmd;
      #line 3807 
      writel(val,bp->regview + (unsigned long)addr);
    }
    #line 3800 
    i += 8;
  }
  #line 3810 
  rv2p_code = (__be32 *)((bp->rv2p_firmware)->data + (unsigned long)file_offset);
  #line 3811 
  i = 0;
  #line 3811 
  while (i <= 7) {
    {
      #line 3812 
      u32 loc;
      #line 3812 
      u32 code;
      #line 3814 
      loc = __builtin_bswap32(fw_entry->fixup[i]);
      #line 3815 
      if (loc != 0U && loc * 4U < rv2p_code_len) {
        #line 3816 
        code = __builtin_bswap32(*(rv2p_code + ((unsigned long)loc + 18446744073709551615U)));
        #line 3817 
        writel(code,bp->regview + 10288U);
        #line 3818 
        code = __builtin_bswap32(*(rv2p_code + (unsigned long)loc));
        #line 3819 
        code = rv2p_fw_fixup(rv2p_proc,i,loc,code);
        #line 3820 
        writel(code,bp->regview + 10292U);
        #line 3822 
        val = loc / 2U | cmd;
        #line 3823 
        writel(val,bp->regview + (unsigned long)addr);
      }
    }
    #line 3811 
    i ++;
  }
  #line 3828 
  if (rv2p_proc == 0U) 
                       #line 3829 
                       writel(65536U,bp->regview + 10240U); else 
                                                                 #line 3832 
                                                                 writel(131072U,bp->regview + 10240U);
  #line 3835 
  return 0;
}

#line 3839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int load_cpu_fw(struct bnx2 *bp, struct cpu_reg *cpu_reg, struct bnx2_mips_fw_file_entry *fw_entry)
{
  #line 3842 
  u32 addr;
  #line 3842 
  u32 len;
  #line 3842 
  u32 file_offset;
  #line 3843 
  __be32 *data;
  #line 3844 
  u32 offset;
  #line 3845 
  u32 val;
  #line 3848 
  val = bnx2_reg_rd_ind(bp,cpu_reg->mode);
  #line 3849 
  val = cpu_reg->mode_value_halt | val;
  #line 3850 
  bnx2_reg_wr_ind(bp,cpu_reg->mode,val);
  #line 3851 
  bnx2_reg_wr_ind(bp,cpu_reg->state,cpu_reg->state_value_clear);
  #line 3854 
  addr = __builtin_bswap32(fw_entry->text.addr);
  #line 3855 
  len = __builtin_bswap32(fw_entry->text.len);
  #line 3856 
  file_offset = __builtin_bswap32(fw_entry->text.offset);
  #line 3857 
  data = (__be32 *)((bp->mips_firmware)->data + (unsigned long)file_offset);
  #line 3859 
  offset = cpu_reg->spad_base + (addr - cpu_reg->mips_view_base);
  #line 3860 
  if (len != 0U) {
    #line 3861 
    int j;
    #line 3863 
    j = 0;
    #line 3863 
    while (len / 4U > (unsigned int)j) {
      #line 3864 
      ;
      #line 3864 
      ;
      #line 3864 
      bnx2_reg_wr_ind(bp,offset,__builtin_bswap32(*(data + (unsigned long)j)));
      #line 3863 
      j ++;
      #line 3863 
      offset += 4U;
    }
  }
  #line 3868 
  addr = __builtin_bswap32(fw_entry->data.addr);
  #line 3869 
  len = __builtin_bswap32(fw_entry->data.len);
  #line 3870 
  file_offset = __builtin_bswap32(fw_entry->data.offset);
  #line 3871 
  data = (__be32 *)((bp->mips_firmware)->data + (unsigned long)file_offset);
  #line 3873 
  offset = cpu_reg->spad_base + (addr - cpu_reg->mips_view_base);
  #line 3874 
  if (len != 0U) {
    #line 3875 
    int j_0;
    #line 3877 
    j_0 = 0;
    #line 3877 
    while (len / 4U > (unsigned int)j_0) {
      #line 3878 
      ;
      #line 3878 
      ;
      #line 3878 
      bnx2_reg_wr_ind(bp,offset,__builtin_bswap32(*(data + (unsigned long)j_0)));
      #line 3877 
      j_0 ++;
      #line 3877 
      offset += 4U;
    }
  }
  #line 3882 
  addr = __builtin_bswap32(fw_entry->rodata.addr);
  #line 3883 
  len = __builtin_bswap32(fw_entry->rodata.len);
  #line 3884 
  file_offset = __builtin_bswap32(fw_entry->rodata.offset);
  #line 3885 
  data = (__be32 *)((bp->mips_firmware)->data + (unsigned long)file_offset);
  #line 3887 
  offset = cpu_reg->spad_base + (addr - cpu_reg->mips_view_base);
  #line 3888 
  if (len != 0U) {
    #line 3889 
    int j_1;
    #line 3891 
    j_1 = 0;
    #line 3891 
    while (len / 4U > (unsigned int)j_1) {
      #line 3892 
      ;
      #line 3892 
      ;
      #line 3892 
      bnx2_reg_wr_ind(bp,offset,__builtin_bswap32(*(data + (unsigned long)j_1)));
      #line 3891 
      j_1 ++;
      #line 3891 
      offset += 4U;
    }
  }
  #line 3896 
  bnx2_reg_wr_ind(bp,cpu_reg->inst,0U);
  #line 3898 
  val = __builtin_bswap32(fw_entry->start_addr);
  #line 3899 
  bnx2_reg_wr_ind(bp,cpu_reg->pc,val);
  #line 3902 
  val = bnx2_reg_rd_ind(bp,cpu_reg->mode);
  #line 3903 
  val = ~ cpu_reg->mode_value_halt & val;
  #line 3904 
  bnx2_reg_wr_ind(bp,cpu_reg->state,cpu_reg->state_value_clear);
  #line 3905 
  bnx2_reg_wr_ind(bp,cpu_reg->mode,val);
  #line 3907 
  return 0;
}

#line 3911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_cpus(struct bnx2 *bp)
{
  #line 3917 
  int rc;
  #line 3913 
  struct bnx2_mips_fw_file *mips_fw = (struct bnx2_mips_fw_file *)(bp->mips_firmware)->data;
  #line 3915 
  struct bnx2_rv2p_fw_file *rv2p_fw = (struct bnx2_rv2p_fw_file *)(bp->rv2p_firmware)->data;
  #line 3920 
  load_rv2p_fw(bp,0U,& rv2p_fw->proc1);
  #line 3921 
  load_rv2p_fw(bp,1U,& rv2p_fw->proc2);
  #line 3924 
  rc = load_cpu_fw(bp,& cpu_reg_rxp,& mips_fw->rxp);
  #line 3925 
  if (rc != 0) 
               #line 3926 
               goto init_cpu_err;
  #line 3929 
  rc = load_cpu_fw(bp,& cpu_reg_txp,& mips_fw->txp);
  #line 3930 
  if (rc != 0) 
               #line 3931 
               goto init_cpu_err;
  #line 3934 
  rc = load_cpu_fw(bp,& cpu_reg_tpat,& mips_fw->tpat);
  #line 3935 
  if (rc != 0) 
               #line 3936 
               goto init_cpu_err;
  #line 3939 
  rc = load_cpu_fw(bp,& cpu_reg_com,& mips_fw->com);
  #line 3940 
  if (rc != 0) 
               #line 3941 
               goto init_cpu_err;
  #line 3944 
  rc = load_cpu_fw(bp,& cpu_reg_cp,& mips_fw->cp);
  #line 3946 
  init_cpu_err: 
                #line 3946 
  ;
  #line 3947 
  return rc;
}

#line 3951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_setup_wol(struct bnx2 *bp)
{
  #line 3953 
  int i;
  #line 3954 
  u32 val;
  #line 3954 
  u32 wol_msg;
  #line 3956 
  if ((unsigned int)bp->wol != 0U) {
    #line 3957 
    u32 advertising;
    #line 3958 
    u8 autoneg;
    #line 3960 
    autoneg = bp->autoneg;
    #line 3961 
    advertising = bp->advertising;
    #line 3963 
    if ((unsigned int)bp->phy_port == 0U) {
      #line 3964 
      bp->autoneg = (unsigned char)1U;
      #line 3965 
      bp->advertising = 79U;
    }
    #line 3972 
    cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
    #line 3973 
    bnx2_setup_phy(bp,(unsigned char)((int)bp->phy_port));
    #line 3974 
    cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
    #line 3976 
    bp->autoneg = autoneg;
    #line 3977 
    bp->advertising = advertising;
    #line 3979 
    bnx2_set_mac_addr(bp,(bp->dev)->dev_addr,0U);
    #line 3981 
    val = readl(bp->regview + 5120U);
    #line 3984 
    val &= 4294967283U;
    #line 3985 
    val |= 1835008U;
    #line 3988 
    if ((unsigned int)bp->phy_port == 0U) 
                                          #line 3989 
                                          val |= 4U;
    else {
      #line 3991 
      val |= 8U;
      #line 3992 
      if ((unsigned int)bp->line_speed == 2500U) 
                                                 #line 3993 
                                                 val |= 32U;
    }
    #line 3996 
    writel(val,bp->regview + 5120U);
    #line 3999 
    i = 0;
    #line 3999 
    while (i <= 7) {
      #line 4000 
      writel(4294967295U,bp->regview + ((unsigned long)(i * 4) + (unsigned long)5328U));
      #line 3999 
      i ++;
    }
    #line 4003 
    writel(4096U,bp->regview + 5320U);
    #line 4005 
    val = 196609U;
    #line 4006 
    writel(0U,bp->regview + 6176U);
    #line 4007 
    writel(val,bp->regview + 6176U);
    #line 4008 
    writel(val | 2147483648U,bp->regview + 6176U);
    #line 4011 
    writel(1664U,bp->regview + 2064U);
    #line 4016 
    val = readl(bp->regview + 6152U);
    #line 4017 
    val &= 4294967293U;
    #line 4018 
    writel(val,bp->regview + 6152U);
    #line 4020 
    wol_msg = 67108864U;
  }
  else 
       #line 4022 
       wol_msg = 150994944U;
  #line 4025 
  if ((bp->flags & 8U) == 0U) {
    #line 4026 
    u32 val_0;
    #line 4028 
    wol_msg |= 262144U;
    #line 4029 
    if (bp->fw_last_msg != 0U || (bp->chip_id & 4294901760U) != 1460207616U) {
      #line 4030 
      bnx2_fw_sync(bp,wol_msg,1,0);
      #line 4031 
      return;
    }
    #line 4036 
    val_0 = bnx2_shmem_rd(bp,216U);
    #line 4037 
    bnx2_shmem_wr(bp,216U,val_0 | 67108864U);
    #line 4039 
    bnx2_fw_sync(bp,wol_msg,1,0);
    #line 4040 
    bnx2_shmem_wr(bp,216U,val_0);
  }
  #line 4042 
  return;
}

#line 4046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_power_state(struct bnx2 *bp, pci_power_t state)
{
  #line 4048 
  switch (state) {
    #line 4049 
    case 0: 
            #line 4049 
    ;
    {
      #line 4050 
      u32 val;
      #line 4052 
      pci_enable_wake(bp->pdev,0,(_Bool)0);
      #line 4053 
      pci_set_power_state(bp->pdev,0);
      #line 4055 
      val = readl(bp->regview + 5120U);
      #line 4056 
      val |= 1572864U;
      #line 4057 
      val &= 4294705151U;
      #line 4058 
      writel(val,bp->regview + 5120U);
      #line 4060 
      val = readl(bp->regview + 6152U);
      #line 4061 
      val &= 4294967293U;
      #line 4062 
      writel(val,bp->regview + 6152U);
      #line 4063 
      break;
    }
    #line 4065 
    case 3: 
            #line 4065 
    ;
    #line 4066 
    bnx2_setup_wol(bp);
    #line 4067 
    pci_wake_from_d3(bp->pdev,(_Bool)((unsigned int)bp->wol != 0U));
    #line 4068 
    if ((bp->chip_id & 4294967280U) == 1460011008U || (bp->chip_id & 4294967280U) == 1460011024U) {
      #line 4071 
      if ((unsigned int)bp->wol != 0U) 
                                       #line 4072 
                                       pci_set_power_state(bp->pdev,3);
      #line 4073 
      break;
    }
    #line 4076 
    if (bp->fw_last_msg == 0U && (bp->chip_id & 4294901760U) == 1460207616U) {
      #line 4077 
      u32 val_0;
      #line 4083 
      val_0 = bnx2_shmem_rd(bp,456U);
      #line 4084 
      val_0 &= 4294770687U;
      #line 4085 
      val_0 |= 65536U;
      #line 4086 
      bnx2_shmem_wr(bp,456U,val_0);
    }
    #line 4088 
    pci_set_power_state(bp->pdev,3);
    #line 4093 
    break;
    #line 4095 
    default: 
             #line 4095 
    ;
    #line 4096 
    return -22;
  }
  #line 4098 
  return 0;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_acquire_nvram_lock(struct bnx2 *bp)
{
  #line 4104 
  u32 val;
  #line 4105 
  int j;
  #line 4108 
  writel(4U,bp->regview + 25632U);
  #line 4109 
  j = 0;
  #line 4109 
  while (j <= 29999) {
    #line 4110 
    val = readl(bp->regview + 25632U);
    #line 4111 
    if (((long)val & 1024L) != 0L) 
                                   #line 4112 
                                   break;
    #line 4114 
    __const_udelay(21475UL);
    #line 4109 
    j ++;
  }
  #line 4117 
  if (j > 29999) 
                 #line 4118 
                 return -16;
  #line 4120 
  return 0;
}

#line 4124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_release_nvram_lock(struct bnx2 *bp)
{
  #line 4126 
  int j;
  #line 4127 
  u32 val;
  #line 4130 
  writel(64U,bp->regview + 25632U);
  #line 4132 
  j = 0;
  #line 4132 
  while (j <= 29999) {
    #line 4133 
    val = readl(bp->regview + 25632U);
    #line 4134 
    if (((long)val & 1024L) == 0L) 
                                   #line 4135 
                                   break;
    #line 4137 
    __const_udelay(21475UL);
    #line 4132 
    j ++;
  }
  #line 4140 
  if (j > 29999) 
                 #line 4141 
                 return -16;
  #line 4143 
  return 0;
}

#line 4148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_enable_nvram_write(struct bnx2 *bp)
{
  #line 4150 
  u32 val;
  #line 4152 
  val = readl(bp->regview + 2052U);
  #line 4153 
  writel(val | 2U,bp->regview + 2052U);
  #line 4155 
  if (((bp->flash_info)->flags & 4U) != 0U) {
    #line 4156 
    int j;
    #line 4158 
    writel(8U,bp->regview + 25600U);
    #line 4159 
    writel(65552U,bp->regview + 25600U);
    #line 4162 
    j = 0;
    #line 4162 
    while (j <= 29999) {
      #line 4163 
      __const_udelay(21475UL);
      #line 4165 
      val = readl(bp->regview + 25600U);
      #line 4166 
      if (((long)val & 8L) != 0L) 
                                  #line 4167 
                                  break;
      #line 4162 
      j ++;
    }
    #line 4170 
    if (j > 29999) 
                   #line 4171 
                   return -16;
  }
  #line 4173 
  return 0;
}

#line 4177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_disable_nvram_write(struct bnx2 *bp)
{
  #line 4179 
  u32 val;
  #line 4181 
  val = readl(bp->regview + 2052U);
  #line 4182 
  writel(val & 4294967289U,bp->regview + 2052U);
  #line 4183 
  return;
}

#line 4187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_enable_nvram_access(struct bnx2 *bp)
{
  #line 4189 
  u32 val;
  #line 4191 
  val = readl(bp->regview + 25636U);
  #line 4193 
  writel(val | 3U,bp->regview + 25636U);
  #line 4194 
  return;
}

#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_disable_nvram_access(struct bnx2 *bp)
{
  #line 4200 
  u32 val;
  #line 4202 
  val = readl(bp->regview + 25636U);
  #line 4204 
  writel(val & 4294967292U,bp->regview + 25636U);
  #line 4205 
  return;
}

#line 4210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_nvram_erase_page(struct bnx2 *bp, u32 offset)
{
  #line 4212 
  u32 cmd;
  #line 4213 
  int j;
  #line 4215 
  if (((bp->flash_info)->flags & 1U) != 0U) 
                                            #line 4217 
                                            return 0;
  #line 4220 
  cmd = 112U;
  #line 4224 
  writel(8U,bp->regview + 25600U);
  #line 4227 
  writel(offset & 16777215U,bp->regview + 25612U);
  #line 4230 
  writel(cmd,bp->regview + 25600U);
  #line 4233 
  j = 0;
  #line 4233 
  while (j <= 29999) {
    {
      #line 4234 
      u32 val;
      #line 4236 
      __const_udelay(21475UL);
      #line 4238 
      val = readl(bp->regview + 25600U);
      #line 4239 
      if (((long)val & 8L) != 0L) 
                                  #line 4240 
                                  break;
    }
    #line 4233 
    j ++;
  }
  #line 4243 
  if (j > 29999) 
                 #line 4244 
                 return -16;
  #line 4246 
  return 0;
}

#line 4250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_nvram_read_dword(struct bnx2 *bp, u32 offset, u8 *ret_val, u32 cmd_flags)
{
  #line 4252 
  u32 cmd;
  #line 4253 
  int j;
  #line 4256 
  cmd = cmd_flags | 16U;
  #line 4259 
  if (((bp->flash_info)->flags & 2U) != 0U) 
                                            #line 4260 
                                            offset = (offset / (bp->flash_info)->page_size << (bp->flash_info)->page_bits) + offset % (bp->flash_info)->page_size;
  #line 4266 
  writel(8U,bp->regview + 25600U);
  #line 4269 
  writel(offset & 16777215U,bp->regview + 25612U);
  #line 4272 
  writel(cmd,bp->regview + 25600U);
  #line 4275 
  j = 0;
  #line 4275 
  while (j <= 29999) {
    {
      #line 4276 
      u32 val;
      #line 4278 
      __const_udelay(21475UL);
      #line 4280 
      val = readl(bp->regview + 25600U);
      #line 4281 
      if (((long)val & 8L) != 0L) {
        #line 4282 
        __be32 v = __builtin_bswap32(readl(bp->regview + 25616U));
        #line 4283 
        memcpy((void *)ret_val,(void *)(& v),4UL);
        #line 4284 
        break;
      }
    }
    #line 4275 
    j ++;
  }
  #line 4287 
  if (j > 29999) 
                 #line 4288 
                 return -16;
  #line 4290 
  return 0;
}

#line 4295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_nvram_write_dword(struct bnx2 *bp, u32 offset, u8 *val, u32 cmd_flags)
{
  #line 4297 
  u32 cmd;
  #line 4298 
  __be32 val32;
  #line 4299 
  int j;
  #line 4302 
  cmd = cmd_flags | 48U;
  #line 4305 
  if (((bp->flash_info)->flags & 2U) != 0U) 
                                            #line 4306 
                                            offset = (offset / (bp->flash_info)->page_size << (bp->flash_info)->page_bits) + offset % (bp->flash_info)->page_size;
  #line 4312 
  writel(8U,bp->regview + 25600U);
  #line 4314 
  memcpy((void *)(& val32),(void *)val,4UL);
  #line 4317 
  ;
  #line 4317 
  writel(__builtin_bswap32(val32),bp->regview + 25608U);
  #line 4320 
  writel(offset & 16777215U,bp->regview + 25612U);
  #line 4323 
  writel(cmd,bp->regview + 25600U);
  #line 4326 
  j = 0;
  #line 4326 
  while (j <= 29999) {
    {
      #line 4327 
      __const_udelay(21475UL);
      #line 4329 
      if (((long)readl(bp->regview + 25600U) & 8L) != 0L) 
                                                          #line 4330 
                                                          break;
    }
    #line 4326 
    j ++;
  }
  #line 4332 
  if (j > 29999) 
                 #line 4333 
                 return -16;
  #line 4335 
  return 0;
}

#line 4339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_nvram(struct bnx2 *bp)
{
  #line 4341 
  u32 val;
  #line 4342 
  int j;
  #line 4342 
  int entry_count;
  #line 4343 
  struct flash_spec *flash;
  #line 4342 
  int rc = 0;
  #line 4345 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 4346 
    bp->flash_info = & flash_5709;
    #line 4347 
    goto get_flash_size;
  }
  #line 4351 
  val = readl(bp->regview + 25620U);
  #line 4353 
  entry_count = 16;
  #line 4355 
  if ((val & 1073741824U) != 0U) {
    #line 4358 
    j = 0;
    #line 4358 
    flash = flash_table;
    #line 4358 
    while (j < entry_count) {
      #line 4360 
      if (((flash->config1 ^ val) & 1006632960U) == 0U) {
        #line 4362 
        bp->flash_info = flash;
        #line 4363 
        break;
      }
      #line 4358 
      j ++;
      #line 4359 
      flash ++;
    }
  }
  else {
    #line 4368 
    u32 mask;
    #line 4371 
    if ((val & 8388608U) != 0U) 
                                #line 4372 
                                mask = 1006632960U; else 
                                                         #line 4374 
                                                         mask = 50331651U;
    #line 4376 
    j = 0;
    #line 4376 
    flash = flash_table;
    #line 4376 
    while (j < entry_count) {
      #line 4379 
      if ((val & mask) == (flash->strapping & mask)) {
        #line 4380 
        bp->flash_info = flash;
        #line 4383 
        rc = bnx2_acquire_nvram_lock(bp);
        #line 4383 
        if (rc != 0) 
                     #line 4384 
                     return rc;
        #line 4387 
        bnx2_enable_nvram_access(bp);
        #line 4390 
        writel(flash->config1,bp->regview + 25620U);
        #line 4391 
        writel(flash->config2,bp->regview + 25624U);
        #line 4392 
        writel(flash->config3,bp->regview + 25628U);
        #line 4393 
        writel(flash->write1,bp->regview + 25640U);
        #line 4396 
        bnx2_disable_nvram_access(bp);
        #line 4397 
        bnx2_release_nvram_lock(bp);
        #line 4399 
        break;
      }
      #line 4376 
      j ++;
      #line 4377 
      flash ++;
    }
  }
  #line 4404 
  if (j == entry_count) {
    #line 4405 
    bp->flash_info = (struct flash_spec *)0;
    #line 4406 
    printk((char *)"\001");
    #line 4407 
    return -19;
  }
  #line 4410 
  get_flash_size: 
                  #line 4410 
  ;
  #line 4411 
  val = bnx2_shmem_rd(bp,64U);
  #line 4412 
  val &= 16773120U;
  #line 4413 
  if (val != 0U) 
                 #line 4414 
                 bp->flash_size = val; else 
                                            #line 4416 
                                            bp->flash_size = (bp->flash_info)->total_size;
  #line 4418 
  return rc;
}

#line 4422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_nvram_read(struct bnx2 *bp, u32 offset, u8 *ret_buf, int buf_size)
{
  #line 4426 
  u32 cmd_flags;
  #line 4426 
  u32 offset32;
  #line 4426 
  u32 len32;
  #line 4426 
  u32 extra;
  #line 4425 
  int rc = 0;
  #line 4428 
  if (buf_size == 0) 
                     #line 4429 
                     return 0;
  #line 4432 
  rc = bnx2_acquire_nvram_lock(bp);
  #line 4432 
  if (rc != 0) 
               #line 4433 
               return rc;
  #line 4436 
  bnx2_enable_nvram_access(bp);
  #line 4438 
  len32 = (unsigned int)buf_size;
  #line 4439 
  offset32 = offset;
  #line 4440 
  extra = 0U;
  #line 4442 
  cmd_flags = 0U;
  #line 4444 
  if ((offset32 & 3U) != 0U) {
    #line 4445 
    u8 buf[4U];
    #line 4446 
    u32 pre_len;
    #line 4448 
    offset32 &= 4294967292U;
    #line 4449 
    pre_len = 4U - (offset & 3U);
    #line 4451 
    if (pre_len >= len32) {
      #line 4452 
      pre_len = len32;
      #line 4453 
      cmd_flags = 384U;
    }
    else 
         #line 4457 
         cmd_flags = 128U;
    #line 4460 
    rc = bnx2_nvram_read_dword(bp,offset32,(u8 *)(& buf),cmd_flags);
    #line 4462 
    if (rc != 0) 
                 #line 4463 
                 return rc;
    #line 4465 
    memcpy((void *)ret_buf,(void *)((u8 *)(& buf) + ((unsigned long)offset & (unsigned long)3U)),(unsigned long)pre_len);
    #line 4467 
    offset32 += 4U;
    #line 4468 
    ret_buf += (unsigned long)pre_len;
    #line 4469 
    len32 -= pre_len;
  }
  #line 4471 
  if ((len32 & 3U) != 0U) {
    #line 4472 
    extra = 4U - (len32 & 3U);
    #line 4473 
    len32 = (len32 + 4U) & 4294967292U;
  }
  #line 4476 
  if (len32 == 4U) {
    #line 4477 
    u8 buf_0[4U];
    #line 4479 
    if (cmd_flags != 0U) 
                         #line 4480 
                         cmd_flags = 256U; else 
                                                #line 4482 
                                                cmd_flags = 384U;
    #line 4485 
    rc = bnx2_nvram_read_dword(bp,offset32,(u8 *)(& buf_0),cmd_flags);
    #line 4487 
    memcpy((void *)ret_buf,(void *)(& buf_0),(unsigned long)(4U - extra));
  }
  else 
    #line 4489 
    if (len32 != 0U) {
      #line 4490 
      u8 buf_1[4U];
      #line 4493 
      if (cmd_flags != 0U) 
                           #line 4494 
                           cmd_flags = 0U; else 
                                                #line 4496 
                                                cmd_flags = 128U;
      #line 4498 
      rc = bnx2_nvram_read_dword(bp,offset32,ret_buf,cmd_flags);
      #line 4501 
      offset32 += 4U;
      #line 4502 
      ret_buf += 4U;
      #line 4503 
      len32 += 4294967292U;
      #line 4505 
      while (len32 > 4U && rc == 0) {
        #line 4506 
        rc = bnx2_nvram_read_dword(bp,offset32,ret_buf,0U);
        #line 4509 
        offset32 += 4U;
        #line 4510 
        ret_buf += 4U;
        #line 4511 
        len32 += 4294967292U;
      }
      #line 4514 
      if (rc != 0) 
                   #line 4515 
                   return rc;
      #line 4517 
      cmd_flags = 256U;
      #line 4518 
      rc = bnx2_nvram_read_dword(bp,offset32,(u8 *)(& buf_1),cmd_flags);
      #line 4520 
      memcpy((void *)ret_buf,(void *)(& buf_1),(unsigned long)(4U - extra));
    }
  #line 4524 
  bnx2_disable_nvram_access(bp);
  #line 4526 
  bnx2_release_nvram_lock(bp);
  #line 4528 
  return rc;
}

#line 4532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_nvram_write(struct bnx2 *bp, u32 offset, u8 *data_buf, int buf_size)
{
  #line 4535 
  u32 written;
  #line 4535 
  u32 offset32;
  #line 4535 
  u32 len32;
  #line 4536 
  u8 *buf;
  #line 4536 
  u8 start[4U];
  #line 4536 
  u8 end[4U];
  #line 4538 
  int align_start;
  #line 4538 
  int align_end;
  #line 4536 
  u8 *align_buf = (u8 *)0U;
  #line 4536 
  u8 *flash_buffer = (u8 *)0U;
  #line 4537 
  int rc = 0;
  #line 4540 
  buf = data_buf;
  #line 4541 
  offset32 = offset;
  #line 4542 
  len32 = (unsigned int)buf_size;
  #line 4543 
  align_end = 0;
  #line 4543 
  align_start = align_end;
  #line 4545 
  align_start = (int)offset32 & 3;
  #line 4545 
  if (align_start != 0) {
    #line 4546 
    offset32 &= 4294967292U;
    #line 4547 
    len32 += (unsigned int)align_start;
    #line 4548 
    if (len32 <= 3U) 
                     #line 4549 
                     len32 = 4U;
    #line 4550 
    rc = bnx2_nvram_read(bp,offset32,(u8 *)(& start),4);
    #line 4550 
    if (rc != 0) 
                 #line 4551 
                 return rc;
  }
  #line 4554 
  if ((len32 & 3U) != 0U) {
    #line 4555 
    align_end = (int)(4U - (len32 & 3U));
    #line 4556 
    len32 += (unsigned int)align_end;
    #line 4557 
    rc = bnx2_nvram_read(bp,(offset32 + len32) + 4294967292U,(u8 *)(& end),4);
    #line 4557 
    if (rc != 0) 
                 #line 4558 
                 return rc;
  }
  #line 4561 
  if (align_start != 0 || align_end != 0) {
    #line 4562 
    align_buf = (u8 *)kmalloc((unsigned long)len32,3264U);
    #line 4563 
    if (align_buf == (u8 *)0U) 
                               #line 4564 
                               return -12;
    #line 4565 
    if (align_start != 0) 
                          #line 4566 
                          memcpy((void *)align_buf,(void *)(& start),4UL);
    #line 4568 
    if (align_end != 0) 
                        #line 4569 
                        memcpy((void *)(align_buf + ((unsigned long)len32 + 18446744073709551612U)),(void *)(& end),4UL);
    #line 4571 
    memcpy((void *)(align_buf + (unsigned long)align_start),(void *)data_buf,(unsigned long)buf_size);
    #line 4572 
    buf = align_buf;
  }
  #line 4575 
  if (((bp->flash_info)->flags & 1U) == 0U) {
    #line 4576 
    flash_buffer = (u8 *)kmalloc(264UL,3264U);
    #line 4577 
    if (flash_buffer == (u8 *)0U) {
      #line 4578 
      rc = -12;
      #line 4579 
      goto nvram_write_end;
    }
  }
  #line 4583 
  written = 0U;
  #line 4584 
  while (written < len32 && rc == 0) {
    #line 4585 
    u32 page_start;
    #line 4585 
    u32 page_end;
    #line 4585 
    u32 data_start;
    #line 4585 
    u32 data_end;
    #line 4586 
    u32 addr;
    #line 4586 
    u32 cmd_flags;
    #line 4587 
    int i;
    #line 4590 
    page_start = offset32 + written;
    #line 4591 
    page_start -= page_start % (bp->flash_info)->page_size;
    #line 4593 
    page_end = (bp->flash_info)->page_size + page_start;
    #line 4595 
    if (written == 0U) 
                       #line 4595 
                       data_start = offset32; else 
                                                   #line 4595 
                                                   data_start = page_start;
    #line 4597 
    if (page_end < offset32 + len32) 
                                     #line 4597 
                                     data_end = page_end; else 
                                                               #line 4597 
                                                               data_end = offset32 + len32;
    #line 4601 
    rc = bnx2_acquire_nvram_lock(bp);
    #line 4601 
    if (rc != 0) 
                 #line 4602 
                 goto nvram_write_end;
    #line 4605 
    bnx2_enable_nvram_access(bp);
    #line 4607 
    cmd_flags = 128U;
    #line 4608 
    if (((bp->flash_info)->flags & 1U) == 0U) {
      #line 4609 
      int j;
      #line 4613 
      j = 0;
      #line 4613 
      while ((bp->flash_info)->page_size > (unsigned int)j) {
        #line 4614 
        if ((bp->flash_info)->page_size + 4294967292U == (unsigned int)j) 
          #line 4615 
          cmd_flags |= 256U;
        #line 4617 
        rc = bnx2_nvram_read_dword(bp,page_start + (unsigned int)j,flash_buffer + (unsigned long)j,cmd_flags);
        #line 4622 
        if (rc != 0) 
                     #line 4623 
                     goto nvram_write_end;
        #line 4625 
        cmd_flags = 0U;
        #line 4613 
        j += 4;
      }
    }
    #line 4630 
    rc = bnx2_enable_nvram_write(bp);
    #line 4630 
    if (rc != 0) 
                 #line 4631 
                 goto nvram_write_end;
    #line 4635 
    i = 0;
    #line 4636 
    if (((bp->flash_info)->flags & 1U) == 0U) {
      #line 4638 
      rc = bnx2_nvram_erase_page(bp,page_start);
      #line 4638 
      if (rc != 0) 
                   #line 4639 
                   goto nvram_write_end;
      #line 4642 
      bnx2_enable_nvram_write(bp);
      #line 4644 
      addr = page_start;
      #line 4644 
      while (addr < data_start) {
        #line 4647 
        rc = bnx2_nvram_write_dword(bp,addr,flash_buffer + (unsigned long)i,cmd_flags);
        #line 4650 
        if (rc != 0) 
                     #line 4651 
                     goto nvram_write_end;
        #line 4653 
        cmd_flags = 0U;
        #line 4644 
        addr += 4U;
        #line 4645 
        i += 4;
      }
    }
    #line 4658 
    addr = data_start;
    #line 4658 
    while (addr < data_end) {
      #line 4659 
      if (page_end + 4294967292U == addr || ((bp->flash_info)->flags & 1U) != 0U && data_end + 4294967292U == addr) 
        #line 4663 
        cmd_flags |= 256U;
      #line 4665 
      rc = bnx2_nvram_write_dword(bp,addr,buf,cmd_flags);
      #line 4668 
      if (rc != 0) 
                   #line 4669 
                   goto nvram_write_end;
      #line 4671 
      cmd_flags = 0U;
      #line 4672 
      buf += 4U;
      #line 4658 
      addr += 4U;
      #line 4658 
      i += 4;
    }
    #line 4677 
    if (((bp->flash_info)->flags & 1U) == 0U) {
      #line 4678 
      addr = data_end;
      #line 4678 
      while (addr < page_end) {
        #line 4681 
        if (page_end + 4294967292U == addr) 
                                            #line 4682 
                                            cmd_flags = 256U;
        #line 4684 
        rc = bnx2_nvram_write_dword(bp,addr,flash_buffer + (unsigned long)i,cmd_flags);
        #line 4687 
        if (rc != 0) 
                     #line 4688 
                     goto nvram_write_end;
        #line 4690 
        cmd_flags = 0U;
        #line 4678 
        addr += 4U;
        #line 4679 
        i += 4;
      }
    }
    #line 4695 
    bnx2_disable_nvram_write(bp);
    #line 4698 
    bnx2_disable_nvram_access(bp);
    #line 4699 
    bnx2_release_nvram_lock(bp);
    #line 4702 
    written = (data_end - data_start) + written;
  }
  #line 4705 
  nvram_write_end: 
                   #line 4705 
  ;
  #line 4706 
  kfree((void *)flash_buffer);
  #line 4707 
  kfree((void *)align_buf);
  #line 4708 
  return rc;
}

#line 4712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_fw_cap(struct bnx2 *bp)
{
  #line 4714 
  u32 val;
  #line 4714 
  u32 sig = 0U;
  #line 4716 
  bp->phy_flags &= 4294965247U;
  #line 4717 
  bp->flags &= 4294963199U;
  #line 4719 
  if ((bp->flags & 64U) == 0U) 
                               #line 4720 
                               bp->flags |= 4096U;
  #line 4722 
  val = bnx2_shmem_rd(bp,872U);
  #line 4723 
  if ((val & 4294901760U) != 2857697280U) 
                                          #line 4724 
                                          return;
  #line 4726 
  if ((val & 24U) == 24U) {
    #line 4727 
    bp->flags |= 4096U;
    #line 4728 
    sig |= 893714456U;
  }
  #line 4731 
  if ((bp->phy_flags & 1U) != 0U && (val & 1U) != 0U) {
    #line 4733 
    u32 link;
    #line 4735 
    bp->phy_flags |= 2048U;
    #line 4737 
    link = bnx2_shmem_rd(bp,12U);
    #line 4738 
    if ((link & 1048576U) != 0U) 
                                 #line 4739 
                                 bp->phy_port = (unsigned char)3U; else 
                                                                    #line 4741 
                                                                    bp->phy_port = (unsigned char)0U;
    #line 4743 
    sig |= 893714433U;
  }
  #line 4747 
  if ((int)netif_running(bp->dev) != 0) 
    #line 4747 
    if (sig != 0U) 
                   #line 4748 
                   bnx2_shmem_wr(bp,868U,sig);
  #line 4749 
  return;
}

#line 4752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_setup_msix_tbl(struct bnx2 *bp)
{
  #line 4754 
  writel(2147483648U,bp->regview + 1024U);
  #line 4756 
  writel(3244032U,bp->regview + 1556U);
  #line 4757 
  writel(3260416U,bp->regview + 1560U);
  #line 4758 
  return;
}

#line 4761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_wait_dma_complete(struct bnx2 *bp)
{
  #line 4763 
  u32 val;
  #line 4764 
  int i;
  #line 4770 
  if ((bp->chip_id & 4294901760U) == 1460011008U || (bp->chip_id & 4294901760U) == 1460142080U) {
    #line 4772 
    writel(67764240U,bp->regview + 2068U);
    #line 4777 
    val = readl(bp->regview + 2068U);
    #line 4778 
    __const_udelay(21475UL);
  }
  else {
    #line 4780 
    val = readl(bp->regview + 2248U);
    #line 4781 
    val &= 4294901759U;
    #line 4782 
    writel(val,bp->regview + 2248U);
    #line 4783 
    val = readl(bp->regview + 2248U);
    #line 4785 
    i = 0;
    #line 4785 
    while (i <= 99) {
      #line 4786 
      msleep(1U);
      #line 4787 
      val = readl(bp->regview + 180U);
      #line 4788 
      if (((long)val & 2097152L) == 0L) 
                                        #line 4789 
                                        break;
      #line 4785 
      i ++;
    }
  }
  #line 4793 
  return;
}

#line 4798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_reset_chip(struct bnx2 *bp, u32 reset_code)
{
  #line 4800 
  u32 val;
  #line 4801 
  int i;
  #line 4802 
  u8 old_port;
  #line 4801 
  int rc = 0;
  #line 4806 
  bnx2_wait_dma_complete(bp);
  #line 4809 
  bnx2_fw_sync(bp,reset_code | 65536U,1,1);
  #line 4813 
  bnx2_shmem_wr(bp,0U,1212241483U);
  #line 4818 
  val = readl(bp->regview + 2056U);
  #line 4820 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 4821 
    writel(16U,bp->regview + 2048U);
    #line 4822 
    readl(bp->regview + 2048U);
    #line 4823 
    __const_udelay(21475UL);
    #line 4825 
    val = 136U;
    #line 4828 
    writel(val,bp->regview + 104U);
  }
  else {
    #line 4831 
    val = 392U;
    #line 4836 
    writel(val,bp->regview + 104U);
    #line 4842 
    if ((bp->chip_id & 4294967280U) == 1460011008U || (bp->chip_id & 4294967280U) == 1460011024U) 
      #line 4844 
      msleep(20U);
    #line 4847 
    i = 0;
    #line 4847 
    while (i <= 9) {
      #line 4848 
      val = readl(bp->regview + 104U);
      #line 4849 
      if (((long)val & 768L) == 0L) 
                                    #line 4851 
                                    break;
      #line 4852 
      __const_udelay(42950UL);
      #line 4847 
      i ++;
    }
    #line 4855 
    if (((long)val & 768L) != 0L) {
      #line 4857 
      printk((char *)"\001");
      #line 4858 
      return -16;
    }
  }
  #line 4863 
  val = readl(bp->regview + 1048U);
  #line 4864 
  if (val != 16909060U) {
    #line 4865 
    printk((char *)"\001");
    #line 4866 
    return -19;
  }
  #line 4870 
  rc = bnx2_fw_sync(bp,reset_code | 131072U,1,0);
  #line 4871 
  if (rc != 0) 
               #line 4872 
               return rc;
  #line 4874 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 4875 
  old_port = bp->phy_port;
  #line 4876 
  bnx2_init_fw_cap(bp);
  #line 4877 
  if ((bp->phy_flags & 2048U) != 0U && (int)bp->phy_port != (int)old_port) 
    #line 4879 
    bnx2_set_default_remote_link(bp);
  #line 4880 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 4882 
  if ((bp->chip_id & 4294967280U) == 1460011008U) {
    #line 4885 
    writel(250U,bp->regview + 2228U);
    #line 4888 
    rc = bnx2_alloc_bad_rbuf(bp);
  }
  #line 4891 
  if ((bp->flags & 1024U) != 0U) {
    #line 4892 
    bnx2_setup_msix_tbl(bp);
    #line 4894 
    writel(1U,bp->regview + 2252U);
  }
  #line 4898 
  return rc;
}

#line 4902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_chip(struct bnx2 *bp)
{
  #line 4904 
  u32 val;
  #line 4904 
  u32 mtu;
  #line 4905 
  int rc;
  #line 4905 
  int i;
  #line 4908 
  writel(262144U,bp->regview + 132U);
  #line 4910 
  val = 217123U;
  #line 4919 
  val |= 2099200U;
  #line 4921 
  if ((bp->flags & 1U) != 0U && (unsigned int)bp->bus_speed_mhz == 133U) 
    #line 4922 
    val |= 8388608U;
  #line 4924 
  if (((bp->chip_id & 4294901760U) == 1460011008U && (bp->chip_id & 4294967280U) != 1460011008U) && (bp->flags & 1U) == 0U) 
    #line 4927 
    val |= 1024U;
  #line 4929 
  writel(val,bp->regview + 3080U);
  #line 4931 
  if ((bp->chip_id & 4294967280U) == 1460011008U) {
    #line 4932 
    val = readl(bp->regview + 23560U);
    #line 4933 
    val |= 1U;
    #line 4934 
    writel(val,bp->regview + 23560U);
  }
  #line 4937 
  if ((bp->flags & 1U) != 0U) {
    #line 4938 
    u16 val16;
    #line 4940 
    pci_read_config_word(bp->pdev,bp->pcix_cap + 2,& val16);
    #line 4942 
    pci_write_config_word(bp->pdev,bp->pcix_cap + 2,(unsigned short)((int)val16 & 65533));
  }
  #line 4946 
  writel(2654208U,bp->regview + 2064U);
  #line 4953 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 4954 
    rc = bnx2_init_5709_context(bp);
    #line 4955 
    if (rc != 0) 
                 #line 4956 
                 return rc;
  }
  else 
       #line 4958 
       bnx2_init_context(bp);
  #line 4960 
  rc = bnx2_init_cpus(bp);
  #line 4960 
  if (rc != 0) 
               #line 4961 
               return rc;
  #line 4963 
  bnx2_init_nvram(bp);
  #line 4965 
  bnx2_set_mac_addr(bp,(bp->dev)->dev_addr,0U);
  #line 4967 
  val = readl(bp->regview + 15368U);
  #line 4968 
  val &= 4294967183U;
  #line 4969 
  val = val;
  #line 4970 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 4971 
    val |= 4U;
    #line 4972 
    if ((bp->chip_id & 61440U) == 0U) 
                                      #line 4973 
                                      val |= 2U;
  }
  #line 4976 
  writel(val,bp->regview + 15368U);
  #line 4978 
  val = 4259840U;
  #line 4979 
  writel(val,bp->regview + 15388U);
  #line 4980 
  writel(val,bp->regview + 15392U);
  #line 4982 
  val = 67108864U;
  #line 4983 
  writel(val,bp->regview + 10248U);
  #line 4986 
  val = readl(bp->regview + 20488U);
  #line 4987 
  val &= 4043309055U;
  #line 4988 
  val |= 67108928U;
  #line 4989 
  writel(val,bp->regview + 20488U);
  #line 4991 
  val = (unsigned int)((((((int)bp->mac_addr[0] + ((int)bp->mac_addr[1] << 8)) + ((int)bp->mac_addr[2] << 16)) + (int)bp->mac_addr[3]) + ((int)bp->mac_addr[4] << 8)) + ((int)bp->mac_addr[5] << 16));
  #line 4997 
  writel(val,bp->regview + 5272U);
  #line 5000 
  mtu = (bp->dev)->mtu;
  #line 5001 
  val = mtu + 18U;
  #line 5002 
  if (val > 1518U) 
                   #line 5003 
                   val |= 2147483648U;
  #line 5004 
  writel(val,bp->regview + 5276U);
  #line 5006 
  if (mtu <= 1499U) 
                    #line 5007 
                    mtu = 1500U;
  #line 5009 
  bnx2_reg_wr_ind(bp,2097164U,((mtu * 31U + 4294920796U) / 1000U + 54U) | (((mtu * 39U + 4294908796U) / 1000U + 66U) << 16));
  #line 5010 
  bnx2_reg_wr_ind(bp,2097180U,(((mtu + 4294965796U) * 4U) / 1000U + 5U) | ((((mtu + 4294965796U) * 2U) / 100U + 30U) << 16));
  #line 5011 
  bnx2_reg_wr_ind(bp,2097184U,((mtu * 12U + 4294949296U) / 1000U + 18U) | ((((mtu + 4294965796U) * 2U) / 100U + 30U) << 16));
  #line 5013 
  memset((void *)bp->bnx2_napi[0].status_blk.msi,0,(unsigned long)bp->status_stats_size);
  #line 5014 
  i = 0;
  #line 5014 
  while (i <= 8) {
    #line 5015 
    bp->bnx2_napi[i].last_status_idx = 0U;
    #line 5014 
    i ++;
  }
  #line 5017 
  bp->idle_chk_status_idx = 65535U;
  #line 5020 
  writel(2048U,bp->regview + 5128U);
  #line 5022 
  writel((unsigned int)bp->status_blk_mapping,bp->regview + 26640U);
  #line 5024 
  writel((unsigned int)(bp->status_blk_mapping >> 32),bp->regview + 26644U);
  #line 5026 
  writel((unsigned int)bp->stats_blk_mapping,bp->regview + 26648U);
  #line 5028 
  writel((unsigned int)(bp->stats_blk_mapping >> 32),bp->regview + 26652U);
  #line 5031 
  writel((unsigned int)(((int)bp->tx_quick_cons_trip_int << 16) | (int)bp->tx_quick_cons_trip),bp->regview + 26656U);
  #line 5034 
  writel((unsigned int)(((int)bp->rx_quick_cons_trip_int << 16) | (int)bp->rx_quick_cons_trip),bp->regview + 26664U);
  #line 5037 
  writel((unsigned int)(((int)bp->comp_prod_trip_int << 16) | (int)bp->comp_prod_trip),bp->regview + 26660U);
  #line 5040 
  writel((unsigned int)(((int)bp->tx_ticks_int << 16) | (int)bp->tx_ticks),bp->regview + 26672U);
  #line 5042 
  writel((unsigned int)(((int)bp->rx_ticks_int << 16) | (int)bp->rx_ticks),bp->regview + 26668U);
  #line 5044 
  writel((unsigned int)(((int)bp->com_ticks_int << 16) | (int)bp->com_ticks),bp->regview + 26676U);
  #line 5047 
  writel((unsigned int)(((int)bp->cmd_ticks_int << 16) | (int)bp->cmd_ticks),bp->regview + 26680U);
  #line 5050 
  if ((bp->flags & 8192U) != 0U) 
                                 #line 5051 
                                 writel(0U,bp->regview + 26692U); else 
                                                                    #line 5053 
                                                                    writel(bp->stats_ticks,bp->regview + 26692U);
  #line 5054 
  writel(3000U,bp->regview + 26688U);
  #line 5056 
  if ((bp->chip_id & 4294967280U) == 1460011024U) 
                                                  #line 5057 
                                                  val = 1U; else 
                                                                 #line 5059 
                                                                 val = 7U;
  #line 5063 
  if ((bp->flags & 1024U) != 0U) {
    #line 5064 
    writel(511U,bp->regview + 26904U);
    #line 5067 
    val |= 16777216U;
  }
  #line 5070 
  if ((bp->flags & 256U) != 0U) 
                                #line 5071 
                                val |= 393216U;
  #line 5073 
  writel(val,bp->regview + 26632U);
  #line 5075 
  if ((unsigned int)bp->rx_ticks <= 24U) 
                                         #line 5076 
                                         bnx2_reg_wr_ind(bp,1179736U,1U); else 
                                                                    #line 5078 
                                                                    bnx2_reg_wr_ind(bp,1179736U,0U);
  #line 5080 
  i = 1;
  #line 5080 
  while (bp->irq_nvecs > i) {
    {
      #line 5081 
      u32 base = (unsigned int)((i + -1) * 36 + 27136);
      #line 5084 
      writel(131078U,bp->regview + (unsigned long)base);
      #line 5089 
      writel((unsigned int)(((int)bp->tx_quick_cons_trip_int << 16) | (int)bp->tx_quick_cons_trip),bp->regview + ((unsigned long)base + (unsigned long)4U));
      #line 5093 
      writel((unsigned int)(((int)bp->tx_ticks_int << 16) | (int)bp->tx_ticks),bp->regview + ((unsigned long)base + (unsigned long)20U));
      #line 5096 
      writel((unsigned int)(((int)bp->rx_quick_cons_trip_int << 16) | (int)bp->rx_quick_cons_trip),bp->regview + ((unsigned long)base + (unsigned long)12U));
      #line 5100 
      writel((unsigned int)(((int)bp->rx_ticks_int << 16) | (int)bp->rx_ticks),bp->regview + ((unsigned long)base + (unsigned long)16U));
    }
    #line 5080 
    i ++;
  }
  #line 5105 
  writel(2097152U,bp->regview + 26624U);
  #line 5107 
  writel(16777217U,bp->regview + 26636U);
  #line 5110 
  bnx2_set_rx_mode(bp->dev);
  #line 5112 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 5113 
    val = readl(bp->regview + 2248U);
    #line 5114 
    val |= 65536U;
    #line 5115 
    writel(val,bp->regview + 2248U);
  }
  #line 5117 
  rc = bnx2_fw_sync(bp,16973824U,1,0);
  #line 5120 
  writel(402653183U,bp->regview + 2064U);
  #line 5121 
  readl(bp->regview + 2064U);
  #line 5123 
  __const_udelay(85900UL);
  #line 5125 
  bp->hc_cmd = readl(bp->regview + 26624U);
  #line 5127 
  return rc;
}

#line 5131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_clear_ring_states(struct bnx2 *bp)
{
  #line 5133 
  struct bnx2_napi *bnapi;
  #line 5134 
  struct bnx2_tx_ring_info *txr;
  #line 5135 
  struct bnx2_rx_ring_info *rxr;
  #line 5136 
  int i;
  #line 5138 
  i = 0;
  #line 5138 
  while (i <= 8) {
    #line 5139 
    bnapi = & bp->bnx2_napi[i];
    #line 5140 
    txr = & bnapi->tx_ring;
    #line 5141 
    rxr = & bnapi->rx_ring;
    #line 5143 
    txr->tx_cons = (unsigned short)0U;
    #line 5144 
    txr->hw_tx_cons = (unsigned short)0U;
    #line 5145 
    rxr->rx_prod_bseq = 0U;
    #line 5146 
    rxr->rx_prod = (unsigned short)0U;
    #line 5147 
    rxr->rx_cons = (unsigned short)0U;
    #line 5148 
    rxr->rx_pg_prod = (unsigned short)0U;
    #line 5149 
    rxr->rx_pg_cons = (unsigned short)0U;
    #line 5138 
    i ++;
  }
  #line 5151 
  return;
}

#line 5154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_tx_context(struct bnx2 *bp, u32 cid, struct bnx2_tx_ring_info *txr)
{
  #line 5156 
  u32 val;
  #line 5156 
  u32 offset0;
  #line 5156 
  u32 offset1;
  #line 5156 
  u32 offset2;
  #line 5156 
  u32 offset3;
  #line 5157 
  u32 cid_addr = cid << 7;
  #line 5159 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 5160 
    offset0 = 128U;
    #line 5161 
    offset1 = 576U;
    #line 5162 
    offset2 = 600U;
    #line 5163 
    offset3 = 604U;
  }
  else {
    #line 5165 
    offset0 = 0U;
    #line 5166 
    offset1 = 136U;
    #line 5167 
    offset2 = 160U;
    #line 5168 
    offset3 = 164U;
  }
  #line 5170 
  val = 268828672U;
  #line 5171 
  bnx2_ctx_wr(bp,cid_addr,offset0,val);
  #line 5173 
  val = 524288U;
  #line 5174 
  bnx2_ctx_wr(bp,cid_addr,offset1,val);
  #line 5176 
  val = (unsigned int)(txr->tx_desc_mapping >> 32);
  #line 5177 
  bnx2_ctx_wr(bp,cid_addr,offset2,val);
  #line 5179 
  val = (unsigned int)txr->tx_desc_mapping;
  #line 5180 
  bnx2_ctx_wr(bp,cid_addr,offset3,val);
  #line 5181 
  return;
}

#line 5184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_tx_ring(struct bnx2 *bp, int ring_num)
{
  #line 5186 
  struct bnx2_tx_bd *txbd;
  #line 5188 
  struct bnx2_napi *bnapi;
  #line 5189 
  struct bnx2_tx_ring_info *txr;
  #line 5187 
  u32 cid = 16U;
  #line 5191 
  bnapi = & bp->bnx2_napi[ring_num];
  #line 5192 
  txr = & bnapi->tx_ring;
  #line 5194 
  if (ring_num == 0) 
                     #line 5195 
                     cid = 16U; else 
                                     #line 5197 
                                     cid = (unsigned int)(ring_num + 31);
  #line 5199 
  bp->tx_wake_thresh = (unsigned int)(bp->tx_ring_size / 2);
  #line 5201 
  txbd = txr->tx_desc_ring + 255UL;
  #line 5203 
  txbd->tx_bd_haddr_hi = (unsigned int)(txr->tx_desc_mapping >> 32);
  #line 5204 
  txbd->tx_bd_haddr_lo = (unsigned int)txr->tx_desc_mapping;
  #line 5206 
  txr->tx_prod = (unsigned short)0U;
  #line 5207 
  txr->tx_prod_bseq = 0U;
  #line 5209 
  txr->tx_bidx_addr = (cid << 8) + 65672U;
  #line 5210 
  txr->tx_bseq_addr = (cid << 8) + 65680U;
  #line 5212 
  bnx2_init_tx_context(bp,cid,txr);
  #line 5213 
  return;
}

#line 5216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_rxbd_rings(struct bnx2_rx_bd **rx_ring, dma_addr_t *dma, u32 buf_size, int num_rings)
{
  #line 5219 
  int i;
  #line 5220 
  struct bnx2_rx_bd *rxbd;
  #line 5222 
  i = 0;
  #line 5222 
  while (i < num_rings) {
    {
      #line 5223 
      int j;
      #line 5225 
      rxbd = *(rx_ring + (unsigned long)i);
      #line 5226 
      j = 0;
      #line 5226 
      while ((unsigned int)j <= 254U) {
        #line 5227 
        rxbd->rx_bd_len = buf_size;
        #line 5228 
        rxbd->rx_bd_flags = 12U;
        #line 5226 
        j ++;
        #line 5226 
        rxbd ++;
      }
      #line 5230 
      if (num_rings + -1 == i) 
                               #line 5231 
                               j = 0; else 
                                           #line 5233 
                                           j = i + 1;
      #line 5234 
      rxbd->rx_bd_haddr_hi = (unsigned int)(*(dma + (unsigned long)j) >> 32);
      #line 5235 
      rxbd->rx_bd_haddr_lo = (unsigned int)*(dma + (unsigned long)j);
    }
    #line 5222 
    i ++;
  }
  #line 5237 
  return;
}

#line 5240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_rx_ring(struct bnx2 *bp, int ring_num)
{
  #line 5242 
  int i;
  #line 5243 
  u16 prod;
  #line 5243 
  u16 ring_prod;
  #line 5244 
  u32 cid;
  #line 5244 
  u32 rx_cid_addr;
  #line 5244 
  u32 val;
  #line 5245 
  struct bnx2_napi *bnapi = & bp->bnx2_napi[ring_num];
  #line 5246 
  struct bnx2_rx_ring_info *rxr = & bnapi->rx_ring;
  #line 5248 
  if (ring_num == 0) 
                     #line 5249 
                     cid = 0U; else 
                                    #line 5251 
                                    cid = (unsigned int)(ring_num + 3);
  #line 5253 
  rx_cid_addr = cid << 7;
  #line 5255 
  bnx2_init_rxbd_rings((struct bnx2_rx_bd **)(& rxr->rx_desc_ring),(dma_addr_t *)(& rxr->rx_desc_mapping),bp->rx_buf_use_size,bp->rx_max_ring);
  #line 5258 
  bnx2_init_rx_context(bp,cid);
  #line 5260 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 5261 
    val = readl(bp->regview + 15668U);
    #line 5262 
    writel(val | 201326592U,bp->regview + 15668U);
  }
  #line 5265 
  bnx2_ctx_wr(bp,rx_cid_addr,72U,0U);
  #line 5266 
  if (bp->rx_pg_ring_size != 0) {
    #line 5267 
    bnx2_init_rxbd_rings((struct bnx2_rx_bd **)(& rxr->rx_pg_desc_ring),(dma_addr_t *)(& rxr->rx_pg_desc_mapping),4096U,bp->rx_max_pg_ring);
    #line 5270 
    val = (bp->rx_buf_use_size << 16) | 4096U;
    #line 5271 
    bnx2_ctx_wr(bp,rx_cid_addr,72U,val);
    #line 5272 
    bnx2_ctx_wr(bp,rx_cid_addr,76U,(unsigned int)(16382 - ring_num));
    #line 5275 
    val = (unsigned int)(rxr->rx_pg_desc_mapping[0] >> 32);
    #line 5276 
    bnx2_ctx_wr(bp,rx_cid_addr,80U,val);
    #line 5278 
    val = (unsigned int)rxr->rx_pg_desc_mapping[0];
    #line 5279 
    bnx2_ctx_wr(bp,rx_cid_addr,84U,val);
    #line 5281 
    if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                    #line 5282 
                                                    writel(2181056070U,bp->regview + 15660U);
  }
  #line 5285 
  val = (unsigned int)(rxr->rx_desc_mapping[0] >> 32);
  #line 5286 
  bnx2_ctx_wr(bp,rx_cid_addr,16U,val);
  #line 5288 
  val = (unsigned int)rxr->rx_desc_mapping[0];
  #line 5289 
  bnx2_ctx_wr(bp,rx_cid_addr,20U,val);
  #line 5291 
  prod = rxr->rx_pg_prod;
  #line 5291 
  ring_prod = prod;
  #line 5292 
  i = 0;
  #line 5292 
  while (bp->rx_pg_ring_size > i) {
    {
      #line 5293 
      if (bnx2_alloc_rx_page(bp,rxr,(unsigned short)((int)ring_prod),3264U) < 0) {
        #line 5294 
        netdev_warn(bp->dev,(char *)"init\'ed rx page ring %d with %d/%d pages only\n",ring_num,i,bp->rx_pg_ring_size);
        #line 5296 
        break;
      }
      #line 5298 
      if (((unsigned long)prod & 254UL) == 254UL) 
                                                  #line 5298 
                                                  prod = (unsigned short)((unsigned int)prod + 2U); else 
                                                                    #line 5298 
                                                                    prod = (unsigned short)((unsigned int)prod + 1U);
      #line 5299 
      ring_prod = (unsigned short)((int)((unsigned short)bp->rx_max_pg_ring_idx) & (int)prod);
    }
    #line 5292 
    i ++;
  }
  #line 5301 
  rxr->rx_pg_prod = prod;
  #line 5303 
  prod = rxr->rx_prod;
  #line 5303 
  ring_prod = prod;
  #line 5304 
  i = 0;
  #line 5304 
  while (bp->rx_ring_size > i) {
    {
      #line 5305 
      if (bnx2_alloc_rx_data(bp,rxr,(unsigned short)((int)ring_prod),3264U) < 0) {
        #line 5306 
        netdev_warn(bp->dev,(char *)"init\'ed rx ring %d with %d/%d skbs only\n",ring_num,i,bp->rx_ring_size);
        #line 5308 
        break;
      }
      #line 5310 
      if (((unsigned long)prod & 254UL) == 254UL) 
                                                  #line 5310 
                                                  prod = (unsigned short)((unsigned int)prod + 2U); else 
                                                                    #line 5310 
                                                                    prod = (unsigned short)((unsigned int)prod + 1U);
      #line 5311 
      ring_prod = (unsigned short)((int)((unsigned short)bp->rx_max_ring_idx) & (int)prod);
    }
    #line 5304 
    i ++;
  }
  #line 5313 
  rxr->rx_prod = prod;
  #line 5315 
  rxr->rx_bidx_addr = (cid << 8) + 65540U;
  #line 5316 
  rxr->rx_bseq_addr = (cid << 8) + 65544U;
  #line 5317 
  rxr->rx_pg_bidx_addr = (cid << 8) + 65604U;
  #line 5319 
  writew((unsigned short)((int)rxr->rx_pg_prod),bp->regview + (unsigned long)rxr->rx_pg_bidx_addr);
  #line 5320 
  writew((unsigned short)((int)prod),bp->regview + (unsigned long)rxr->rx_bidx_addr);
  #line 5322 
  writel(rxr->rx_prod_bseq,bp->regview + (unsigned long)rxr->rx_bseq_addr);
  #line 5323 
  return;
}

#line 5326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_all_rings(struct bnx2 *bp)
{
  #line 5328 
  int i;
  #line 5329 
  u32 val;
  #line 5331 
  bnx2_clear_ring_states(bp);
  #line 5333 
  writel(0U,bp->regview + 19484U);
  #line 5334 
  i = 0;
  #line 5334 
  while ((int)bp->num_tx_rings > i) {
    #line 5335 
    bnx2_init_tx_ring(bp,i);
    #line 5334 
    i ++;
  }
  #line 5337 
  if ((unsigned int)bp->num_tx_rings > 1U) 
                                           #line 5338 
                                           writel((unsigned int)((((int)bp->num_tx_rings + -1) << 24) | 4096),bp->regview + 19484U);
  #line 5341 
  writel(0U,bp->regview + 8220U);
  #line 5342 
  bnx2_reg_wr_ind(bp,917560U,0U);
  #line 5344 
  i = 0;
  #line 5344 
  while ((int)bp->num_rx_rings > i) {
    #line 5345 
    bnx2_init_rx_ring(bp,i);
    #line 5344 
    i ++;
  }
  #line 5347 
  if ((unsigned int)bp->num_rx_rings > 1U) {
    #line 5348 
    u32 tbl_32 = 0U;
    #line 5350 
    i = 0;
    #line 5350 
    while (i <= 127) {
      {
        #line 5351 
        int shift = i % 8 << 2;
        #line 5353 
        tbl_32 = (unsigned int)(i % ((int)bp->num_rx_rings + -1) << shift) | tbl_32;
        #line 5354 
        if (i % 8 == 7) {
          #line 5355 
          writel(tbl_32,bp->regview + 8268U);
          #line 5356 
          writel((unsigned int)((i >> 3) | 122864),bp->regview + 8264U);
          #line 5360 
          tbl_32 = 0U;
        }
      }
      #line 5350 
      i ++;
    }
    #line 5364 
    val = 5U;
    #line 5367 
    writel(val,bp->regview + 8220U);
  }
  #line 5369 
  return;
}

#line 5372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static u32 bnx2_find_max_ring(u32 ring_size, u32 max_size)
{
  #line 5374 
  u32 max;
  #line 5374 
  u32 num_rings = 1U;
  #line 5376 
  while (ring_size > 255U) {
    #line 5377 
    ring_size += 4294967041U;
    #line 5378 
    num_rings ++;
  }
  #line 5381 
  max = max_size;
  #line 5382 
  while ((max & num_rings) == 0U) 
                                  #line 5383 
                                  max >>= 1;
  #line 5385 
  if (num_rings != max) 
                        #line 5386 
                        max <<= 1;
  #line 5388 
  return max;
}

#line 5392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_set_rx_ring_size(struct bnx2 *bp, u32 size)
{
  #line 5394 
  u32 rx_size;
  #line 5394 
  u32 rx_space;
  #line 5394 
  u32 jumbo_size;
  #line 5397 
  rx_size = (bp->dev)->mtu + 40U;
  #line 5399 
  rx_space = ((rx_size + 79U) & 4294967232U) + 384U;
  #line 5402 
  bp->rx_copy_thresh = 128U;
  #line 5403 
  bp->rx_pg_ring_size = 0;
  #line 5404 
  bp->rx_max_pg_ring = 0;
  #line 5405 
  bp->rx_max_pg_ring_idx = 0U;
  #line 5406 
  if (rx_space > 4096U && (bp->flags & 2048U) == 0U) {
    #line 5407 
    int pages = (int)(((bp->dev)->mtu + 4055U) >> 12);
    #line 5409 
    jumbo_size = size * (unsigned int)pages;
    #line 5410 
    if (jumbo_size > 8160U) 
                            #line 5411 
                            jumbo_size = 8160U;
    #line 5413 
    bp->rx_pg_ring_size = (int)jumbo_size;
    #line 5414 
    bp->rx_max_pg_ring = (int)bnx2_find_max_ring(jumbo_size,32U);
    #line 5416 
    bp->rx_max_pg_ring_idx = (unsigned int)((unsigned long)bp->rx_max_pg_ring) * 256U + 4294967295U;
    #line 5418 
    rx_size = 146U;
    #line 5419 
    bp->rx_copy_thresh = 0U;
  }
  #line 5422 
  bp->rx_buf_use_size = rx_size;
  #line 5424 
  bp->rx_buf_size = ((bp->rx_buf_use_size + 79U) & 4294967232U) + 384U;
  #line 5426 
  bp->rx_jumbo_thresh = rx_size + 4294967278U;
  #line 5427 
  bp->rx_ring_size = (int)size;
  #line 5428 
  bp->rx_max_ring = (int)bnx2_find_max_ring(size,8U);
  #line 5429 
  bp->rx_max_ring_idx = (unsigned int)((unsigned long)bp->rx_max_ring) * 256U + 4294967295U;
  #line 5430 
  return;
}

#line 5433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_free_tx_skbs(struct bnx2 *bp)
{
  #line 5435 
  int i;
  #line 5437 
  i = 0;
  #line 5437 
  while ((int)bp->num_tx_rings > i) {
    {
      #line 5440 
      int j;
      #line 5438 
      struct bnx2_napi *bnapi = & bp->bnx2_napi[i];
      #line 5439 
      struct bnx2_tx_ring_info *txr = & bnapi->tx_ring;
      #line 5442 
      if (txr->tx_buf_ring == (struct bnx2_sw_tx_bd *)0) 
                                                         #line 5443 
                                                         goto __Cont;
      #line 5445 
      j = 0;
      #line 5445 
      while ((unsigned int)j <= 255U) {
        {
          #line 5448 
          int k;
          #line 5448 
          int last;
          #line 5446 
          struct bnx2_sw_tx_bd *tx_buf = txr->tx_buf_ring + (unsigned long)j;
          #line 5447 
          struct sk_buff *skb = tx_buf->skb;
          #line 5450 
          if (skb == (struct sk_buff *)0) {
            #line 5451 
            if (((unsigned long)j & 254UL) == 254UL) 
                                                     #line 5451 
                                                     j += 2; else 
                                                                  #line 5451 
                                                                  j ++;
            #line 5452 
            goto __Cont_0;
          }
          #line 5455 
          ;
          #line 5455 
          ;
          #line 5455 
          dma_unmap_single_attrs(& (bp->pdev)->dev,tx_buf->mapping,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 5460 
          tx_buf->skb = (struct sk_buff *)0;
          #line 5462 
          last = (int)tx_buf->nr_frags;
          #line 5463 
          if (((unsigned long)j & 254UL) == 254UL) 
                                                   #line 5463 
                                                   j += 2; else 
                                                                #line 5463 
                                                                j ++;
          #line 5464 
          k = 0;
          #line 5464 
          while (k < last) {
            {
              #line 5465 
              tx_buf = txr->tx_buf_ring + ((unsigned long)j & 255UL);
              #line 5466 
              ;
              #line 5466 
              ;
              #line 5466 
              dma_unmap_page_attrs(& (bp->pdev)->dev,tx_buf->mapping,(unsigned long)skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[k]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
            }
            #line 5464 
            k ++;
            #line 5464 
            if (((unsigned long)j & 254UL) == 254UL) 
                                                     #line 5464 
                                                     j += 2; else 
                                                                  #line 5464 
                                                                  j ++;
          }
          #line 5471 
          consume_skb(skb);
        }
        #line 5445 
        __Cont_0: 
                  #line 5445 
        ;
      }
      #line 5473 
      netdev_tx_reset_queue(netdev_get_tx_queue(bp->dev,(unsigned int)i));
    }
    #line 5437 
    __Cont: 
            #line 5437 
    i ++;
  }
  #line 5475 
  return;
}

#line 5478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_free_rx_skbs(struct bnx2 *bp)
{
  #line 5480 
  int i;
  #line 5482 
  i = 0;
  #line 5482 
  while ((int)bp->num_rx_rings > i) {
    {
      #line 5485 
      int j;
      #line 5483 
      struct bnx2_napi *bnapi = & bp->bnx2_napi[i];
      #line 5484 
      struct bnx2_rx_ring_info *rxr = & bnapi->rx_ring;
      #line 5487 
      if (rxr->rx_buf_ring == (struct bnx2_sw_bd *)0) 
                                                      #line 5488 
                                                      return;
      #line 5490 
      j = 0;
      #line 5490 
      while (bp->rx_max_ring_idx > (unsigned int)j) {
        {
          #line 5491 
          struct bnx2_sw_bd *rx_buf = rxr->rx_buf_ring + (unsigned long)j;
          #line 5492 
          u8 *data = rx_buf->data;
          #line 5494 
          if (data == (u8 *)0U) 
                                #line 5495 
                                goto __Cont;
          #line 5497 
          dma_unmap_single_attrs(& (bp->pdev)->dev,rx_buf->mapping,(unsigned long)bp->rx_buf_use_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
          #line 5502 
          rx_buf->data = (u8 *)0U;
          #line 5504 
          kfree((void *)data);
        }
        #line 5490 
        __Cont: 
                #line 5490 
        j ++;
      }
      #line 5506 
      j = 0;
      #line 5506 
      while (bp->rx_max_pg_ring_idx > (unsigned int)j) {
        #line 5507 
        bnx2_free_rx_page(bp,rxr,(unsigned short)((int)((unsigned short)j)));
        #line 5506 
        j ++;
      }
    }
    #line 5482 
    i ++;
  }
  #line 5509 
  return;
}

#line 5512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_free_skbs(struct bnx2 *bp)
{
  #line 5514 
  bnx2_free_tx_skbs(bp);
  #line 5515 
  bnx2_free_rx_skbs(bp);
  #line 5516 
  return;
}

#line 5519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_reset_nic(struct bnx2 *bp, u32 reset_code)
{
  #line 5521 
  int rc;
  #line 5523 
  rc = bnx2_reset_chip(bp,reset_code);
  #line 5524 
  bnx2_free_skbs(bp);
  #line 5525 
  if (rc != 0) 
               #line 5526 
               return rc;
  #line 5528 
  rc = bnx2_init_chip(bp);
  #line 5528 
  if (rc != 0) 
               #line 5529 
               return rc;
  #line 5531 
  bnx2_init_all_rings(bp);
  #line 5532 
  return 0;
}

#line 5536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_nic(struct bnx2 *bp, int reset_phy)
{
  #line 5538 
  int rc;
  #line 5540 
  rc = bnx2_reset_nic(bp,16777216U);
  #line 5540 
  if (rc != 0) 
               #line 5541 
               return rc;
  #line 5543 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 5544 
  bnx2_init_phy(bp,reset_phy);
  #line 5545 
  bnx2_set_link(bp);
  #line 5546 
  if ((bp->phy_flags & 2048U) != 0U) 
                                     #line 5547 
                                     bnx2_remote_phy_event(bp);
  #line 5548 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 5549 
  return 0;
}

#line 5553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_shutdown_chip(struct bnx2 *bp)
{
  #line 5555 
  u32 reset_code;
  #line 5557 
  if ((bp->flags & 8U) != 0U) 
                              #line 5558 
                              reset_code = 184549376U;
  else 
    #line 5559 
    if ((unsigned int)bp->wol != 0U) 
                                     #line 5560 
                                     reset_code = 67108864U; else 
                                                                  #line 5562 
                                                                  reset_code = 150994944U;
  #line 5564 
  return bnx2_reset_chip(bp,reset_code);
}

#line 5568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_test_registers(struct bnx2 *bp)
{
  #line 5570 
  int ret;
  #line 5571 
  int i;
  #line 5571 
  int is_5709;
  #line 5578 
  struct __anonstruct_reg_tbl_1073 reg_tbl[93U] = {{.offset = (unsigned short)108U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 63U}, {.offset = (unsigned short)144U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)148U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 0U}, {.offset = (unsigned short)1028U, .flags = (unsigned short)1U, .rw_mask = 16128U, .ro_mask = 0U}, {.offset = (unsigned short)1048U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)1052U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)1056U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 2164260863U}, {.offset = (unsigned short)1060U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 0U}, {.offset = (unsigned short)1064U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 1U}, {.offset = (unsigned short)1104U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 65535U}, {.offset = (unsigned short)1108U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)1112U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)2056U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)2132U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)2152U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 2004318071U}, {.offset = (unsigned short)2156U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 2004318071U}, {.offset = (unsigned short)2160U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 2004318071U}, {.offset = (unsigned short)2164U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 2004318071U}, {.offset = (unsigned short)3072U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 1U}, {.offset = (unsigned short)3076U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 67043329U}, {.offset = (unsigned short)3080U, .flags = (unsigned short)1U, .rw_mask = 252702835U, .ro_mask = 0U}, {.offset = (unsigned short)4096U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 1U}, {.offset = (unsigned short)4100U, .flags = (unsigned short)1U, .rw_mask = 0U, .ro_mask = 983041U}, {.offset = (unsigned short)5128U, .flags = (unsigned short)0U, .rw_mask = 29362176U, .ro_mask = 0U}, {.offset = (unsigned short)5276U, .flags = (unsigned short)0U, .rw_mask = 2147549183U, .ro_mask = 0U}, {.offset = (unsigned short)5288U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 511U}, {.offset = (unsigned short)5292U, .flags = (unsigned short)0U, .rw_mask = 268435455U, .ro_mask = 268435456U}, {.offset = (unsigned short)5296U, .flags = (unsigned short)0U, .rw_mask = 2U, .ro_mask = 1U}, {.offset = (unsigned short)5304U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 0U}, {.offset = (unsigned short)5312U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 9U}, {.offset = (unsigned short)5316U, .flags = (unsigned short)0U, .rw_mask = 16383U, .ro_mask = 0U}, {.offset = (unsigned short)5324U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 1U}, {.offset = (unsigned short)5328U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)6144U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 1U}, {.offset = (unsigned short)6148U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 3U}, {.offset = (unsigned short)10240U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 1U}, {.offset = (unsigned short)10244U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 16129U}, {.offset = (unsigned short)10248U, .flags = (unsigned short)0U, .rw_mask = 255803139U, .ro_mask = 0U}, {.offset = (unsigned short)10256U, .flags = (unsigned short)0U, .rw_mask = 4294901760U, .ro_mask = 0U}, {.offset = (unsigned short)10260U, .flags = (unsigned short)0U, .rw_mask = 4294901760U, .ro_mask = 0U}, {.offset = (unsigned short)10264U, .flags = (unsigned short)0U, .rw_mask = 4294901760U, .ro_mask = 0U}, {.offset = (unsigned short)10268U, .flags = (unsigned short)0U, .rw_mask = 4294901760U, .ro_mask = 0U}, {.offset = (unsigned short)10292U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)10304U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)10308U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)10312U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)10316U, .flags = (unsigned short)0U, .rw_mask = 4160813056U, .ro_mask = 134154239U}, {.offset = (unsigned short)11264U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 17U}, {.offset = (unsigned short)11268U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 196615U}, {.offset = (unsigned short)15360U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 1U}, {.offset = (unsigned short)15364U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 458752U}, {.offset = (unsigned short)15368U, .flags = (unsigned short)0U, .rw_mask = 32625U, .ro_mask = 133169152U}, {.offset = (unsigned short)15372U, .flags = (unsigned short)0U, .rw_mask = 524287996U, .ro_mask = 0U}, {.offset = (unsigned short)15376U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)15380U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)15384U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)15388U, .flags = (unsigned short)0U, .rw_mask = 4294963200U, .ro_mask = 0U}, {.offset = (unsigned short)15392U, .flags = (unsigned short)0U, .rw_mask = 4294967040U, .ro_mask = 0U}, {.offset = (unsigned short)20484U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 127U}, {.offset = (unsigned short)20488U, .flags = (unsigned short)0U, .rw_mask = 251660287U, .ro_mask = 0U}, {.offset = (unsigned short)23552U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 1U}, {.offset = (unsigned short)23556U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 196623U}, {.offset = (unsigned short)23560U, .flags = (unsigned short)0U, .rw_mask = 3U, .ro_mask = 0U}, {.offset = (unsigned short)23564U, .flags = (unsigned short)0U, .rw_mask = 65528U, .ro_mask = 0U}, {.offset = (unsigned short)23568U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 4294967295U}, {.offset = (unsigned short)23680U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 259068913U}, {.offset = (unsigned short)23684U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 62259U}, {.offset = (unsigned short)23688U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 488307U}, {.offset = (unsigned short)23692U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 522039U}, {.offset = (unsigned short)26632U, .flags = (unsigned short)0U, .rw_mask = 65407U, .ro_mask = 0U}, {.offset = (unsigned short)26636U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)26640U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)26644U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)26648U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)26652U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)26656U, .flags = (unsigned short)0U, .rw_mask = 16711935U, .ro_mask = 0U}, {.offset = (unsigned short)26660U, .flags = (unsigned short)0U, .rw_mask = 16711935U, .ro_mask = 0U}, {.offset = (unsigned short)26664U, .flags = (unsigned short)0U, .rw_mask = 16711935U, .ro_mask = 0U}, {.offset = (unsigned short)26668U, .flags = (unsigned short)0U, .rw_mask = 67044351U, .ro_mask = 0U}, {.offset = (unsigned short)26672U, .flags = (unsigned short)0U, .rw_mask = 67044351U, .ro_mask = 0U}, {.offset = (unsigned short)26676U, .flags = (unsigned short)0U, .rw_mask = 67044351U, .ro_mask = 0U}, {.offset = (unsigned short)26680U, .flags = (unsigned short)0U, .rw_mask = 67044351U, .ro_mask = 0U}, {.offset = (unsigned short)26684U, .flags = (unsigned short)0U, .rw_mask = 65535U, .ro_mask = 0U}, {.offset = (unsigned short)26688U, .flags = (unsigned short)0U, .rw_mask = 4080U, .ro_mask = 0U}, {.offset = (unsigned short)26692U, .flags = (unsigned short)0U, .rw_mask = 16776960U, .ro_mask = 0U}, {.offset = (unsigned short)26700U, .flags = (unsigned short)0U, .rw_mask = 4294967295U, .ro_mask = 0U}, {.offset = (unsigned short)26704U, .flags = (unsigned short)0U, .rw_mask = 2139062143U, .ro_mask = 0U}, {.offset = (unsigned short)26708U, .flags = (unsigned short)0U, .rw_mask = 2139062143U, .ro_mask = 0U}, {.offset = (unsigned short)26712U, .flags = (unsigned short)0U, .rw_mask = 2139062143U, .ro_mask = 0U}, {.offset = (unsigned short)26716U, .flags = (unsigned short)0U, .rw_mask = 2139062143U, .ro_mask = 0U}, {.offset = (unsigned short)26888U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 130831U}, {.offset = (unsigned short)26892U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 268304624U}, {.offset = (unsigned short)65535U, .flags = (unsigned short)0U, .rw_mask = 0U, .ro_mask = 0U}};
  #line 5687 
  ret = 0;
  #line 5688 
  is_5709 = 0;
  #line 5689 
  if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                  #line 5690 
                                                  is_5709 = 1;
  #line 5692 
  i = 0;
  #line 5692 
  while ((unsigned int)reg_tbl[i].offset != 65535U) {
    {
      #line 5693 
      u32 offset;
      #line 5693 
      u32 rw_mask;
      #line 5693 
      u32 ro_mask;
      #line 5693 
      u32 save_val;
      #line 5693 
      u32 val;
      #line 5694 
      u16 flags = reg_tbl[i].flags;
      #line 5696 
      if (is_5709 != 0 && ((int)flags & 1) != 0) 
                                                 #line 5697 
                                                 goto __Cont;
      #line 5699 
      offset = (unsigned int)reg_tbl[i].offset;
      #line 5700 
      rw_mask = reg_tbl[i].rw_mask;
      #line 5701 
      ro_mask = reg_tbl[i].ro_mask;
      #line 5703 
      save_val = readl(bp->regview + (unsigned long)offset);
      #line 5705 
      writel(0U,bp->regview + (unsigned long)offset);
      #line 5707 
      val = readl(bp->regview + (unsigned long)offset);
      #line 5708 
      if ((val & rw_mask) != 0U) 
                                 #line 5709 
                                 goto reg_test_err;
      #line 5712 
      if (((val ^ save_val) & ro_mask) != 0U) 
                                              #line 5713 
                                              goto reg_test_err;
      #line 5716 
      writel(4294967295U,bp->regview + (unsigned long)offset);
      #line 5718 
      val = readl(bp->regview + (unsigned long)offset);
      #line 5719 
      if ((val & rw_mask) != rw_mask) 
                                      #line 5720 
                                      goto reg_test_err;
      #line 5723 
      if (((val ^ save_val) & ro_mask) != 0U) 
                                              #line 5724 
                                              goto reg_test_err;
      #line 5727 
      writel(save_val,bp->regview + (unsigned long)offset);
      #line 5728 
      goto __Cont;
      #line 5730 
      reg_test_err: 
                    #line 5730 
      ;
      #line 5731 
      writel(save_val,bp->regview + (unsigned long)offset);
      #line 5732 
      ret = -19;
      #line 5733 
      break;
    }
    #line 5692 
    __Cont: 
            #line 5692 
    i ++;
  }
  #line 5735 
  return ret;
}

#line 5739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_do_mem_test(struct bnx2 *bp, u32 start, u32 size)
{
  #line 5743 
  int i;
  #line 5741 
  u32 test_pattern[6U] = {0U, 4294967295U, 1431655765U, 2863311530U, 2857740885U, 1437226410U};
  #line 5745 
  i = 0;
  #line 5745 
  while ((unsigned int)i <= 5U) {
    {
      #line 5746 
      u32 offset;
      #line 5748 
      offset = 0U;
      #line 5748 
      while (offset < size) {
        {
          #line 5750 
          bnx2_reg_wr_ind(bp,start + offset,test_pattern[i]);
          #line 5752 
          ;
          #line 5752 
          if (bnx2_reg_rd_ind(bp,start + offset) != test_pattern[i]) 
            #line 5754 
            return -19;
        }
        #line 5748 
        offset += 4U;
      }
    }
    #line 5745 
    i ++;
  }
  #line 5758 
  return 0;
}

#line 5762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_test_memory(struct bnx2 *bp)
{
  #line 5765 
  int i;
  #line 5786 
  struct mem_entry *mem_tbl;
  #line 5764 
  int ret = 0;
  #line 5769 
  struct mem_entry mem_tbl_5706[7U] = {{.offset = 393216U, .len = 16384U}, {.offset = 655360U, .len = 12288U}, {.offset = 917504U, .len = 16384U}, {.offset = 1179648U, .len = 16384U}, {.offset = 1703936U, .len = 16384U}, {.offset = 1441792U, .len = 16384U}, {.offset = 4294967295U, .len = 0U}};
  #line 5778 
  struct mem_entry mem_tbl_5709[6U] = {{.offset = 393216U, .len = 16384U}, {.offset = 655360U, .len = 12288U}, {.offset = 917504U, .len = 16384U}, {.offset = 1179648U, .len = 16384U}, {.offset = 1703936U, .len = 16384U}, {.offset = 4294967295U, .len = 0U}};
  #line 5788 
  if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                  #line 5789 
                                                  mem_tbl = (struct mem_entry *)(& mem_tbl_5709); else 
                                                                    #line 5791 
                                                                    mem_tbl = (struct mem_entry *)(& mem_tbl_5706);
  #line 5793 
  i = 0;
  #line 5793 
  while ((mem_tbl + (unsigned long)i)->offset != 4294967295U) {
    #line 5794 
    ret = bnx2_do_mem_test(bp,(mem_tbl + (unsigned long)i)->offset,(mem_tbl + (unsigned long)i)->len);
    #line 5794 
    if (ret != 0) 
                  #line 5796 
                  return ret;
    #line 5793 
    i ++;
  }
  #line 5800 
  return ret;
}

#line 5807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_run_loopback(struct bnx2 *bp, int loopback_mode)
{
  #line 5841 
  unsigned int __UNIQUE_ID___x573;
  #line 5841 
  unsigned int tmp;
  #line 5809 
  unsigned int pkt_size;
  #line 5809 
  unsigned int num_pkts;
  #line 5809 
  unsigned int i;
  #line 5810 
  struct sk_buff *skb;
  #line 5811 
  u8 *data;
  #line 5812 
  unsigned char *packet;
  #line 5813 
  u16 rx_start_idx;
  #line 5813 
  u16 rx_idx;
  #line 5814 
  dma_addr_t map;
  #line 5815 
  struct bnx2_tx_bd *txbd;
  #line 5816 
  struct bnx2_sw_bd *rx_buf;
  #line 5817 
  struct l2_fhdr *rx_hdr;
  #line 5819 
  struct bnx2_napi *tx_napi;
  #line 5820 
  struct bnx2_tx_ring_info *txr;
  #line 5821 
  struct bnx2_rx_ring_info *rxr;
  #line 5818 
  int ret = -19;
  #line 5819 
  struct bnx2_napi *bnapi = & bp->bnx2_napi[0];
  #line 5823 
  tx_napi = bnapi;
  #line 5825 
  txr = & tx_napi->tx_ring;
  #line 5826 
  rxr = & bnapi->rx_ring;
  #line 5827 
  if (loopback_mode == 0) {
    #line 5828 
    bp->loopback = (unsigned char)1U;
    #line 5829 
    bnx2_set_mac_loopback(bp);
  }
  else 
    #line 5831 
    if (loopback_mode == 1) {
      #line 5832 
      if ((bp->phy_flags & 2048U) != 0U) 
                                         #line 5833 
                                         return 0;
      #line 5835 
      bp->loopback = (unsigned char)2U;
      #line 5836 
      bnx2_set_phy_loopback(bp);
    }
    else 
         #line 5839 
         return -22;
  {
    #line 5841 
    __UNIQUE_ID___x573 = (bp->dev)->mtu + 14U;
    #line 5841 
    u32 __UNIQUE_ID___y574 = bp->rx_jumbo_thresh + 4294967292U;
    #line 5841 
    if (__UNIQUE_ID___x573 < __UNIQUE_ID___y574) 
                                                 #line 5841 
                                                 tmp = __UNIQUE_ID___x573; else 
                                                                    #line 5841 
                                                                    tmp = __UNIQUE_ID___y574;
    }
  #line 5841 
  pkt_size = tmp;
  #line 5842 
  skb = netdev_alloc_skb(bp->dev,pkt_size);
  #line 5843 
  if (skb == (struct sk_buff *)0) 
                                  #line 5844 
                                  return -12;
  #line 5845 
  packet = (unsigned char *)skb_put(skb,pkt_size);
  #line 5846 
  memcpy((void *)packet,(void *)(bp->dev)->dev_addr,6UL);
  #line 5847 
  memset((void *)(packet + 6U),0,8UL);
  #line 5848 
  i = 14U;
  #line 5848 
  while (i < pkt_size) {
    #line 5849 
    *(packet + (unsigned long)i) = (unsigned char)i;
    #line 5848 
    i ++;
  }
  #line 5851 
  map = dma_map_single_attrs(& (bp->pdev)->dev,(void *)skb->data,(unsigned long)pkt_size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 5853 
  if (dma_mapping_error(& (bp->pdev)->dev,map) != 0) {
    #line 5854 
    consume_skb(skb);
    #line 5855 
    return -5;
  }
  #line 5858 
  writel(bp->hc_cmd | 131072U,bp->regview + 26624U);
  #line 5861 
  readl(bp->regview + 26624U);
  #line 5863 
  __const_udelay(21475UL);
  #line 5864 
  rx_start_idx = bnx2_get_hw_rx_cons(bnapi);
  #line 5866 
  num_pkts = 0U;
  #line 5868 
  txbd = txr->tx_desc_ring + ((unsigned long)txr->tx_prod & 255UL);
  #line 5870 
  txbd->tx_bd_haddr_hi = (unsigned int)(map >> 32);
  #line 5871 
  txbd->tx_bd_haddr_lo = (unsigned int)map;
  #line 5872 
  txbd->tx_bd_mss_nbytes = pkt_size;
  #line 5873 
  txbd->tx_bd_vlan_tag_flags = 192U;
  #line 5875 
  num_pkts ++;
  #line 5876 
  if (((unsigned long)txr->tx_prod & 254UL) == 254UL) 
                                                      #line 5876 
                                                      txr->tx_prod = (unsigned short)((unsigned int)txr->tx_prod + 2U); else 
                                                                    #line 5876 
                                                                    txr->tx_prod = (unsigned short)((unsigned int)txr->tx_prod + 1U);
  #line 5877 
  txr->tx_prod_bseq += pkt_size;
  #line 5879 
  writew((unsigned short)((int)txr->tx_prod),bp->regview + (unsigned long)txr->tx_bidx_addr);
  #line 5880 
  writel(txr->tx_prod_bseq,bp->regview + (unsigned long)txr->tx_bseq_addr);
  #line 5882 
  __const_udelay(429500UL);
  #line 5884 
  writel(bp->hc_cmd | 131072U,bp->regview + 26624U);
  #line 5887 
  readl(bp->regview + 26624U);
  #line 5889 
  __const_udelay(21475UL);
  #line 5891 
  dma_unmap_single_attrs(& (bp->pdev)->dev,map,(unsigned long)pkt_size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 5892 
  consume_skb(skb);
  #line 5894 
  ;
  #line 5894 
  if ((int)bnx2_get_hw_tx_cons(tx_napi) != (int)txr->tx_prod) 
                                                              #line 5895 
                                                              goto loopback_test_done;
  #line 5897 
  rx_idx = bnx2_get_hw_rx_cons(bnapi);
  #line 5898 
  if ((unsigned int)rx_idx != (unsigned int)rx_start_idx + num_pkts) 
    #line 5899 
    goto loopback_test_done;
  #line 5902 
  rx_buf = rxr->rx_buf_ring + (unsigned long)rx_start_idx;
  #line 5903 
  data = rx_buf->data;
  #line 5905 
  rx_hdr = get_l2_fhdr(data);
  #line 5906 
  data = (u8 *)rx_hdr + 18UL;
  #line 5908 
  dma_sync_single_for_cpu(& (bp->pdev)->dev,rx_buf->mapping,(unsigned long)bp->rx_buf_use_size,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 5912 
  if ((rx_hdr->l2_fhdr_status & 4063232U) != 0U) 
                                                 #line 5919 
                                                 goto loopback_test_done;
  #line 5922 
  if ((unsigned int)((int)rx_hdr->l2_fhdr_pkt_len + -4) != pkt_size) 
    #line 5923 
    goto loopback_test_done;
  #line 5926 
  i = 14U;
  #line 5926 
  while (i < pkt_size) {
    #line 5927 
    if ((int)*(data + (unsigned long)i) != (int)((unsigned char)i)) 
                                                                    #line 5928 
                                                                    goto loopback_test_done;
    #line 5926 
    i ++;
  }
  #line 5932 
  ret = 0;
  #line 5934 
  loopback_test_done: 
                      #line 5934 
  ;
  #line 5935 
  bp->loopback = (unsigned char)0U;
  #line 5936 
  return ret;
}

#line 5945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_test_loopback(struct bnx2 *bp)
{
  #line 5947 
  int rc = 0;
  #line 5949 
  if (! netif_running(bp->dev)) 
                                #line 5950 
                                return 3;
  #line 5952 
  bnx2_reset_nic(bp,16777216U);
  #line 5953 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 5954 
  bnx2_init_phy(bp,1);
  #line 5955 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 5956 
  if (bnx2_run_loopback(bp,0) != 0) 
                                    #line 5957 
                                    rc |= 1;
  #line 5958 
  if (bnx2_run_loopback(bp,1) != 0) 
                                    #line 5959 
                                    rc |= 2;
  #line 5960 
  return rc;
}

#line 5967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_test_nvram(struct bnx2 *bp)
{
  #line 5969 
  __be32 buf[128U];
  #line 5972 
  u32 magic;
  #line 5972 
  u32 csum;
  #line 5970 
  u8 *data = (u8 *)(& buf);
  #line 5971 
  int rc = 0;
  #line 5974 
  rc = bnx2_nvram_read(bp,0U,data,4);
  #line 5974 
  if (rc != 0) 
               #line 5975 
               goto test_nvram_done;
  #line 5977 
  magic = __builtin_bswap32(buf[0]);
  #line 5978 
  if (magic != 1721324970U) {
    #line 5979 
    rc = -19;
    #line 5980 
    goto test_nvram_done;
  }
  #line 5983 
  rc = bnx2_nvram_read(bp,256U,data,512);
  #line 5983 
  if (rc != 0) 
               #line 5984 
               goto test_nvram_done;
  #line 5986 
  csum = crc32_le(4294967295U,data,256UL);
  #line 5987 
  if (csum != 3736805603U) {
    #line 5988 
    rc = -19;
    #line 5989 
    goto test_nvram_done;
  }
  #line 5992 
  csum = crc32_le(4294967295U,data + 256U,256UL);
  #line 5993 
  if (csum != 3736805603U) 
                           #line 5994 
                           rc = -19;
  #line 5997 
  test_nvram_done: 
                   #line 5997 
  ;
  #line 5998 
  return rc;
}

#line 6002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_test_link(struct bnx2 *bp)
{
  #line 6004 
  u32 bmsr;
  #line 6006 
  if (! netif_running(bp->dev)) 
                                #line 6007 
                                return -19;
  #line 6009 
  if ((bp->phy_flags & 2048U) != 0U) {
    #line 6010 
    if ((unsigned int)bp->link_up != 0U) 
                                         #line 6011 
                                         return 0;
    #line 6012 
    return -19;
  }
  #line 6014 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 6015 
  bnx2_enable_bmsr1(bp);
  #line 6016 
  bnx2_read_phy(bp,bp->mii_bmsr1,& bmsr);
  #line 6017 
  bnx2_read_phy(bp,bp->mii_bmsr1,& bmsr);
  #line 6018 
  bnx2_disable_bmsr1(bp);
  #line 6019 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 6021 
  if ((bmsr & 4U) != 0U) 
                         #line 6022 
                         return 0;
  #line 6024 
  return -19;
}

#line 6028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_test_intr(struct bnx2 *bp)
{
  #line 6030 
  int i;
  #line 6031 
  u16 status_idx;
  #line 6033 
  if (! netif_running(bp->dev)) 
                                #line 6034 
                                return -19;
  #line 6036 
  status_idx = (unsigned short)readl(bp->regview + 132U);
  #line 6039 
  writel(bp->hc_cmd | 65536U,bp->regview + 26624U);
  #line 6040 
  readl(bp->regview + 26624U);
  #line 6042 
  i = 0;
  #line 6042 
  while (i <= 9) {
    {
      #line 6043 
      ;
      #line 6043 
      if ((readl(bp->regview + 132U) & 65535U) != (unsigned int)status_idx) 
        #line 6046 
        break;
      #line 6049 
      msleep_interruptible(10U);
    }
    #line 6042 
    i ++;
  }
  #line 6051 
  if (i <= 9) 
              #line 6052 
              return 0;
  #line 6054 
  return -19;
}

#line 6059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_5706_serdes_has_link(struct bnx2 *bp)
{
  #line 6061 
  u32 mode_ctl;
  #line 6061 
  u32 an_dbg;
  #line 6061 
  u32 exp;
  #line 6063 
  if ((bp->phy_flags & 8192U) != 0U) 
                                     #line 6064 
                                     return 0;
  #line 6066 
  bnx2_write_phy(bp,28U,31744U);
  #line 6067 
  bnx2_read_phy(bp,28U,& mode_ctl);
  #line 6069 
  if ((mode_ctl & 16U) == 0U) 
                              #line 6070 
                              return 0;
  #line 6072 
  bnx2_write_phy(bp,28U,26624U);
  #line 6073 
  bnx2_read_phy(bp,28U,& an_dbg);
  #line 6074 
  bnx2_read_phy(bp,28U,& an_dbg);
  #line 6076 
  if ((an_dbg & 258U) != 0U) 
                             #line 6077 
                             return 0;
  #line 6079 
  bnx2_write_phy(bp,23U,3841U);
  #line 6080 
  bnx2_read_phy(bp,21U,& exp);
  #line 6081 
  bnx2_read_phy(bp,21U,& exp);
  #line 6083 
  if ((exp & 32U) != 0U) 
                         #line 6084 
                         return 0;
  #line 6086 
  return 1;
}

#line 6090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_5706_serdes_timer(struct bnx2 *bp)
{
  #line 6092 
  int check_link = 1;
  #line 6094 
  cif_spin_lock_phy_lock_of_bnx2(& bp->phy_lock);
  #line 6095 
  if ((unsigned int)bp->serdes_an_pending != 0U) {
    #line 6096 
    bp->serdes_an_pending = (u8)((int)bp->serdes_an_pending - 1);
    #line 6097 
    check_link = 0;
  }
  else 
    #line 6098 
    if ((unsigned int)bp->link_up == 0U && ((int)bp->autoneg & 1) != 0) {
      #line 6099 
      u32 bmcr;
      #line 6101 
      bp->current_interval = 250U;
      #line 6103 
      bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
      #line 6105 
      if ((bmcr & 4096U) != 0U) {
        #line 6106 
        if (bnx2_5706_serdes_has_link(bp) != 0) {
          #line 6107 
          bmcr &= 4294963199U;
          #line 6108 
          bmcr |= 320U;
          #line 6109 
          bnx2_write_phy(bp,bp->mii_bmcr,bmcr);
          #line 6110 
          bp->phy_flags |= 4U;
        }
      }
    }
    else 
      #line 6114 
      if (((unsigned int)bp->link_up != 0U && ((int)bp->autoneg & 1) != 0) && (bp->phy_flags & 4U) != 0U) {
        #line 6116 
        u32 phy2;
        #line 6118 
        bnx2_write_phy(bp,23U,3841U);
        #line 6119 
        bnx2_read_phy(bp,21U,& phy2);
        #line 6120 
        if ((phy2 & 32U) != 0U) {
          #line 6121 
          u32 bmcr_0;
          #line 6123 
          bnx2_read_phy(bp,bp->mii_bmcr,& bmcr_0);
          #line 6124 
          bmcr_0 |= 4096U;
          #line 6125 
          bnx2_write_phy(bp,bp->mii_bmcr,bmcr_0);
          #line 6127 
          bp->phy_flags &= 4294967291U;
        }
      }
      else 
           #line 6130 
           bp->current_interval = 250U;
  #line 6132 
  if (check_link != 0) {
    #line 6133 
    u32 val;
    #line 6135 
    bnx2_write_phy(bp,28U,26624U);
    #line 6136 
    bnx2_read_phy(bp,28U,& val);
    #line 6137 
    bnx2_read_phy(bp,28U,& val);
    #line 6139 
    if ((unsigned int)bp->link_up != 0U && (val & 2U) != 0U) 
      #line 6140 
      if ((bp->phy_flags & 4096U) == 0U) {
        #line 6141 
        bnx2_5706s_force_link_dn(bp,1);
        #line 6142 
        bp->phy_flags |= 4096U;
      }
      else 
           #line 6144 
           bnx2_set_link(bp);
    else 
      #line 6145 
      if ((unsigned int)bp->link_up == 0U && (val & 2U) == 0U) 
                                                               #line 6146 
                                                               bnx2_set_link(bp);
  }
  #line 6148 
  cif_spin_unlock_phy_lock_of_bnx2(& bp->phy_lock);
  #line 6149 
  return;
}

#line 6152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_5708_serdes_timer(struct bnx2 *bp)
{
  #line 6154 
  if ((bp->phy_flags & 2048U) != 0U) 
                                     #line 6155 
                                     return;
  #line 6157 
  if ((bp->phy_flags & 8U) == 0U) {
    #line 6158 
    bp->serdes_an_pending = (unsigned char)0U;
    #line 6159 
    return;
  }
  #line 6162 
  cif_spin_lock_phy_lock_of_bnx2(& bp->phy_lock);
  #line 6163 
  if ((unsigned int)bp->serdes_an_pending != 0U) 
                                                 #line 6164 
                                                 bp->serdes_an_pending = (u8)((int)bp->serdes_an_pending - 1);
  else 
    #line 6165 
    if ((unsigned int)bp->link_up == 0U && ((int)bp->autoneg & 1) != 0) {
      #line 6166 
      u32 bmcr;
      #line 6168 
      bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
      #line 6169 
      if ((bmcr & 4096U) != 0U) {
        #line 6170 
        bnx2_enable_forced_2g5(bp);
        #line 6171 
        bp->current_interval = 25U;
      }
      else {
        #line 6173 
        bnx2_disable_forced_2g5(bp);
        #line 6174 
        bp->serdes_an_pending = (unsigned char)2U;
        #line 6175 
        bp->current_interval = 250U;
      }
    }
    else 
         #line 6179 
         bp->current_interval = 250U;
  #line 6181 
  cif_spin_unlock_phy_lock_of_bnx2(& bp->phy_lock);
  #line 6182 
  return;
}

#line 6185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_timer(struct timer_list *t)
{
  #line 6187 
  void *__mptr;
  #line 6187 
  __mptr = (void *)t;
  #line 6187 
  struct bnx2 *bp = ((struct bnx2 *)(__mptr + 18446744073709540552U));
  #line 6189 
  if (! netif_running(bp->dev)) 
                                #line 6190 
                                return;
  #line 6192 
  if (atomic_read(& bp->intr_sem) != 0) 
                                        #line 6193 
                                        goto bnx2_restart_timer;
  #line 6195 
  if ((bp->flags & 288U) == 32U) 
                                 #line 6197 
                                 bnx2_chk_missed_msi(bp);
  #line 6199 
  bnx2_send_heart_beat(bp);
  #line 6201 
  (bp->stats_blk)->stat_FwRxDrop = bnx2_reg_rd_ind(bp,1179780U);
  #line 6205 
  if ((bp->flags & 8192U) != 0U && bp->stats_ticks != 0U) 
                                                          #line 6206 
                                                          writel(bp->hc_cmd | 262144U,bp->regview + 26624U);
  #line 6209 
  if ((bp->phy_flags & 1U) != 0U) 
    #line 6210 
    if ((bp->chip_id & 4294901760U) == 1460011008U) 
                                                    #line 6211 
                                                    bnx2_5706_serdes_timer(bp); else 
                                                                    #line 6213 
                                                                    bnx2_5708_serdes_timer(bp);
  #line 6216 
  bnx2_restart_timer: 
                      #line 6216 
  ;
  #line 6217 
  cif_mod_timer(& bp->timer,(unsigned long)bp->current_interval + jiffies);
  #line 6218 
  return;
}

#line 6221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_request_irq(struct bnx2 *bp)
{
  #line 6223 
  unsigned long flags;
  #line 6224 
  struct bnx2_irq *irq;
  #line 6225 
  int i;
  #line 6225 
  int rc = 0;
  #line 6227 
  if ((bp->flags & 1056U) != 0U) 
                                 #line 6228 
                                 flags = 0UL; else 
                                                   #line 6230 
                                                   flags = 128UL;
  #line 6232 
  i = 0;
  #line 6232 
  while (bp->irq_nvecs > i) {
    #line 6233 
    irq = & bp->irq_tbl[i];
    #line 6234 
    rc = cif_request_irq(irq->vector,irq->handler,flags,(char *)(& irq->name),(void *)(& bp->bnx2_napi[i]));
    #line 6236 
    if (rc != 0) 
                 #line 6237 
                 break;
    #line 6238 
    irq->requested = (unsigned char)1U;
    #line 6232 
    i ++;
  }
  #line 6240 
  return rc;
}

#line 6244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void __bnx2_free_irq(struct bnx2 *bp)
{
  #line 6246 
  struct bnx2_irq *irq;
  #line 6247 
  int i;
  #line 6249 
  i = 0;
  #line 6249 
  while (bp->irq_nvecs > i) {
    #line 6250 
    irq = & bp->irq_tbl[i];
    #line 6251 
    if ((unsigned int)irq->requested != 0U) 
                                            #line 6252 
                                            cif_free_irq(irq->vector,(void *)(& bp->bnx2_napi[i]));
    #line 6253 
    irq->requested = (unsigned char)0U;
    #line 6249 
    i ++;
  }
  #line 6255 
  return;
}

#line 6258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_free_irq(struct bnx2 *bp)
{
  #line 6261 
  __bnx2_free_irq(bp);
  #line 6262 
  if ((bp->flags & 32U) != 0U) 
                               #line 6263 
                               pci_disable_msi(bp->pdev);
  else 
    #line 6264 
    if ((bp->flags & 1024U) != 0U) 
                                   #line 6265 
                                   pci_disable_msix(bp->pdev);
  #line 6267 
  bp->flags &= 4294965983U;
  #line 6268 
  return;
}

#line 6271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_enable_msix(struct bnx2 *bp, int msix_vecs)
{
  #line 6273 
  int i;
  #line 6273 
  int total_vecs;
  #line 6274 
  struct msix_entry msix_ent[9U];
  #line 6275 
  struct net_device *dev = bp->dev;
  #line 6276 
  int len = 18;
  #line 6278 
  bnx2_setup_msix_tbl(bp);
  #line 6279 
  writel(8U,bp->regview + 1216U);
  #line 6280 
  writel(49152U,bp->regview + 1220U);
  #line 6281 
  writel(57344U,bp->regview + 1224U);
  #line 6285 
  readl(bp->regview + 1216U);
  #line 6287 
  i = 0;
  #line 6287 
  while (i <= 8) {
    #line 6288 
    msix_ent[i].entry = (unsigned short)i;
    #line 6289 
    msix_ent[i].vector = 0U;
    #line 6287 
    i ++;
  }
  #line 6292 
  total_vecs = msix_vecs;
  #line 6294 
  total_vecs ++;
  #line 6296 
  total_vecs = pci_enable_msix_range(bp->pdev,(struct msix_entry *)(& msix_ent),2,total_vecs);
  #line 6298 
  if (total_vecs < 0) 
                      #line 6299 
                      return;
  #line 6301 
  msix_vecs = total_vecs;
  #line 6303 
  msix_vecs --;
  #line 6305 
  bp->irq_nvecs = msix_vecs;
  #line 6306 
  bp->flags |= 1280U;
  #line 6307 
  i = 0;
  #line 6307 
  while (i < total_vecs) {
    #line 6308 
    bp->irq_tbl[i].vector = msix_ent[i].vector;
    #line 6309 
    snprintf((char *)(& bp->irq_tbl[i].name),18UL,(char *)"%s-%d",(char *)(& dev->name),i);
    #line 6310 
    bp->irq_tbl[i].handler = & bnx2_msi_1shot;
    #line 6307 
    i ++;
  }
  #line 6312 
  return;
}

#line 6315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_setup_int_mode(struct bnx2 *bp, int dis_msi)
{
  #line 6327 
  int __UNIQUE_ID___x581;
  #line 6327 
  int tmp_6;
  #line 6318 
  int msix_vecs;
  #line 6317 
  int cpus = netif_get_num_default_rss_queues();
  #line 6320 
  if (bp->num_req_rx_rings == 0) {
    #line 6321 
    int tmp_0;
    #line 6321 
    int __UNIQUE_ID___x575;
    {
      #line 6321 
      __UNIQUE_ID___x575 = cpus + 1;
      #line 6321 
      int __UNIQUE_ID___y576 = bp->num_req_tx_rings;
      #line 6321 
      if (__UNIQUE_ID___x575 > __UNIQUE_ID___y576) 
                                                   #line 6321 
                                                   tmp_0 = __UNIQUE_ID___x575; else 
                                                                    #line 6321 
                                                                    tmp_0 = __UNIQUE_ID___y576;
      }
    #line 6321 
    msix_vecs = tmp_0;
  }
  else 
    #line 6322 
    if (bp->num_req_tx_rings == 0) {
      #line 6323 
      int __UNIQUE_ID___x577;
      #line 6323 
      int tmp_2;
      {
        #line 6323 
        __UNIQUE_ID___x577 = cpus;
        #line 6323 
        int __UNIQUE_ID___y578 = bp->num_req_rx_rings;
        #line 6323 
        if (__UNIQUE_ID___x577 > __UNIQUE_ID___y578) 
                                                     #line 6323 
                                                     tmp_2 = __UNIQUE_ID___x577; else 
                                                                    #line 6323 
                                                                    tmp_2 = __UNIQUE_ID___y578;
        }
      #line 6323 
      msix_vecs = tmp_2;
    }
    else {
      #line 6325 
      int __UNIQUE_ID___x579;
      #line 6325 
      int tmp_4;
      {
        #line 6325 
        __UNIQUE_ID___x579 = bp->num_req_rx_rings;
        #line 6325 
        int __UNIQUE_ID___y580 = bp->num_req_tx_rings;
        #line 6325 
        if (__UNIQUE_ID___x579 > __UNIQUE_ID___y580) 
                                                     #line 6325 
                                                     tmp_4 = __UNIQUE_ID___x579; else 
                                                                    #line 6325 
                                                                    tmp_4 = __UNIQUE_ID___y580;
        }
      #line 6325 
      msix_vecs = tmp_4;
    }
  {
    #line 6327 
    __UNIQUE_ID___x581 = msix_vecs;
    #line 6327 
    int __UNIQUE_ID___y582 = 8;
    #line 6327 
    if (__UNIQUE_ID___x581 < __UNIQUE_ID___y582) 
                                                 #line 6327 
                                                 tmp_6 = __UNIQUE_ID___x581; else 
                                                                    #line 6327 
                                                                    tmp_6 = __UNIQUE_ID___y582;
    }
  #line 6327 
  msix_vecs = tmp_6;
  #line 6329 
  bp->irq_tbl[0].handler = & bnx2_interrupt;
  #line 6330 
  strcpy((char *)(& bp->irq_tbl[0].name),(char *)(& (bp->dev)->name));
  #line 6331 
  bp->irq_nvecs = 1;
  #line 6332 
  bp->irq_tbl[0].vector = (bp->pdev)->irq;
  #line 6334 
  if ((bp->flags & 4U) != 0U && dis_msi == 0) 
                                              #line 6335 
                                              bnx2_enable_msix(bp,msix_vecs);
  #line 6337 
  if (((bp->flags & 128U) != 0U && dis_msi == 0) && (bp->flags & 1024U) == 0U) {
    #line 6339 
    if (pci_enable_msi(bp->pdev) == 0) {
      #line 6340 
      bp->flags |= 32U;
      #line 6341 
      if ((bp->chip_id & 4294901760U) == 1460207616U) {
        #line 6342 
        bp->flags |= 256U;
        #line 6343 
        bp->irq_tbl[0].handler = & bnx2_msi_1shot;
      }
      else 
           #line 6345 
           bp->irq_tbl[0].handler = & bnx2_msi;
      #line 6347 
      bp->irq_tbl[0].vector = (bp->pdev)->irq;
    }
  }
  #line 6351 
  if (bp->num_req_tx_rings == 0) 
    #line 6352 
    if (0 != 0) {
      #line 6352 
      unsigned int tmp_58;
      #line 6352 
      unsigned int tmp_26;
      #line 6352 
      unsigned int tmp_27;
      #line 6352 
      unsigned int tmp_59;
      #line 6352 
      unsigned int tmp_60;
      #line 6352 
      unsigned int tmp_28;
      #line 6352 
      unsigned int tmp_29;
      #line 6352 
      unsigned int tmp_61;
      #line 6352 
      unsigned int tmp_62;
      #line 6352 
      unsigned int tmp_30;
      #line 6352 
      unsigned int tmp_31;
      #line 6352 
      unsigned int tmp_63;
      #line 6352 
      unsigned int tmp_64;
      #line 6352 
      unsigned int tmp_32;
      #line 6352 
      unsigned int tmp_33;
      #line 6352 
      unsigned int tmp_65;
      #line 6352 
      unsigned int tmp_66;
      #line 6352 
      unsigned int tmp_34;
      #line 6352 
      unsigned int tmp_35;
      #line 6352 
      unsigned int tmp_67;
      #line 6352 
      unsigned int tmp_68;
      #line 6352 
      unsigned int tmp_36;
      #line 6352 
      unsigned int tmp_37;
      #line 6352 
      unsigned int tmp_69;
      #line 6352 
      unsigned int tmp_70;
      #line 6352 
      unsigned int tmp_38;
      #line 6352 
      unsigned int tmp_39;
      #line 6352 
      unsigned int tmp_40;
      #line 6352 
      unsigned int tmp_9;
      #line 6352 
      unsigned int tmp_41;
      #line 6352 
      unsigned int tmp_42;
      #line 6352 
      unsigned int tmp_10;
      #line 6352 
      unsigned int tmp_11;
      #line 6352 
      unsigned int tmp_43;
      #line 6352 
      unsigned int tmp_44;
      #line 6352 
      unsigned int tmp_12;
      #line 6352 
      unsigned int tmp_13;
      #line 6352 
      unsigned int tmp_45;
      #line 6352 
      unsigned int tmp_46;
      #line 6352 
      unsigned int tmp_14;
      #line 6352 
      unsigned int tmp_15;
      #line 6352 
      unsigned int tmp_47;
      #line 6352 
      unsigned int tmp_48;
      #line 6352 
      unsigned int tmp_16;
      #line 6352 
      unsigned int tmp_17;
      #line 6352 
      unsigned int tmp_49;
      #line 6352 
      unsigned int tmp_50;
      #line 6352 
      unsigned int tmp_18;
      #line 6352 
      unsigned int tmp_19;
      #line 6352 
      unsigned int tmp_51;
      #line 6352 
      unsigned int tmp_52;
      #line 6352 
      unsigned int tmp_20;
      #line 6352 
      unsigned int tmp_21;
      #line 6352 
      unsigned int tmp_53;
      #line 6352 
      unsigned int tmp_54;
      #line 6352 
      unsigned int tmp_22;
      #line 6352 
      unsigned int tmp_23;
      #line 6352 
      unsigned int tmp_55;
      #line 6352 
      unsigned int tmp_56;
      #line 6352 
      unsigned int tmp_24;
      #line 6352 
      unsigned int tmp_25;
      #line 6352 
      unsigned int tmp_57;
      #line 6352 
      unsigned int tmp_71;
      #line 6352 
      if (bp->irq_nvecs > 1) {
        #line 6352 
        if (((unsigned long long)bp->irq_nvecs & 9223372036854775808ULL) == 0ULL) {
          #line 6352 
          if (((unsigned long long)bp->irq_nvecs & 4611686018427387904ULL) == 0ULL) {
            #line 6352 
            if (((unsigned long long)bp->irq_nvecs & 2305843009213693952ULL) == 0ULL) {
              #line 6352 
              if (((unsigned long long)bp->irq_nvecs & 1152921504606846976ULL) == 0ULL) {
                #line 6352 
                if (((unsigned long long)bp->irq_nvecs & 576460752303423488ULL) == 0ULL) {
                  #line 6352 
                  if (((unsigned long long)bp->irq_nvecs & 288230376151711744ULL) == 0ULL) {
                    #line 6352 
                    if (((unsigned long long)bp->irq_nvecs & 144115188075855872ULL) == 0ULL) {
                      #line 6352 
                      if (((unsigned long long)bp->irq_nvecs & 72057594037927936ULL) == 0ULL) {
                        #line 6352 
                        if (((unsigned long long)bp->irq_nvecs & 36028797018963968ULL) == 0ULL) {
                          #line 6352 
                          if (((unsigned long long)bp->irq_nvecs & 18014398509481984ULL) == 0ULL) {
                            #line 6352 
                            if (((unsigned long long)bp->irq_nvecs & 9007199254740992ULL) == 0ULL) {
                              #line 6352 
                              if (((unsigned long long)bp->irq_nvecs & 4503599627370496ULL) == 0ULL) {
                                #line 6352 
                                if (((unsigned long long)bp->irq_nvecs & 2251799813685248ULL) == 0ULL) {
                                  #line 6352 
                                  if (((unsigned long long)bp->irq_nvecs & 1125899906842624ULL) == 0ULL) {
                                    #line 6352 
                                    if (((unsigned long long)bp->irq_nvecs & 562949953421312ULL) == 0ULL) {
                                      #line 6352 
                                      if (((unsigned long long)bp->irq_nvecs & 281474976710656ULL) == 0ULL) {
                                        #line 6352 
                                        if (((unsigned long long)bp->irq_nvecs & 140737488355328ULL) == 0ULL) {
                                          #line 6352 
                                          if (((unsigned long long)bp->irq_nvecs & 70368744177664ULL) == 0ULL) {
                                            #line 6352 
                                            if (((unsigned long long)bp->irq_nvecs & 35184372088832ULL) == 0ULL) {
                                              #line 6352 
                                              if (((unsigned long long)bp->irq_nvecs & 17592186044416ULL) == 0ULL) {
                                                #line 6352 
                                                if (((unsigned long long)bp->irq_nvecs & 8796093022208ULL) == 0ULL) {
                                                  #line 6352 
                                                  if (((unsigned long long)bp->irq_nvecs & 4398046511104ULL) == 0ULL) {
                                                    #line 6352 
                                                    if (((unsigned long long)bp->irq_nvecs & 2199023255552ULL) == 0ULL) {
                                                      #line 6352 
                                                      if (((unsigned long long)bp->irq_nvecs & 1099511627776ULL) == 0ULL) {
                                                        #line 6352 
                                                        if (((unsigned long long)bp->irq_nvecs & 549755813888ULL) == 0ULL) {
                                                          #line 6352 
                                                          if (((unsigned long long)bp->irq_nvecs & 274877906944ULL) == 0ULL) {
                                                            #line 6352 
                                                            if (((unsigned long long)bp->irq_nvecs & 137438953472ULL) == 0ULL) {
                                                              #line 6352 
                                                              if (((unsigned long long)bp->irq_nvecs & 68719476736ULL) == 0ULL) {
                                                                #line 6352 
                                                                if (((unsigned long long)bp->irq_nvecs & 34359738368ULL) == 0ULL) {
                                                                  #line 6352 
                                                                  if (
                                                                    ((unsigned long long)bp->irq_nvecs & 17179869184ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 8589934592ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 4294967296ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 2147483648ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 1073741824ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 536870912ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 268435456ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 134217728ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 67108864ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 33554432ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 16777216ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 8388608ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 4194304ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 2097152ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 1048576ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 524288ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 262144ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 131072ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 65536ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 32768ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 16384ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 8192ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 4096ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 2048ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 1024ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 512ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 256ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 128ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 64ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 32ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 16ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 8ULL) == 0ULL) {
                                                                    #line 6352 
                                                                    if (
                                                                    ((unsigned long long)bp->irq_nvecs & 4ULL) != 0ULL) 
                                                                    #line 6352 
                                                                    tmp_9 = 4U; else 
                                                                    #line 6352 
                                                                    tmp_9 = 2U;
                                                                    #line 6352 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_10 = 8U;
                                                                    #line 6352 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_11 = 16U;
                                                                    #line 6352 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_12 = 32U;
                                                                    #line 6352 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_13 = 64U;
                                                                    #line 6352 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_14 = 128U;
                                                                    #line 6352 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_15 = 0U;
                                                                    #line 6352 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_16 = 0U;
                                                                    #line 6352 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_17 = 0U;
                                                                    #line 6352 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_18 = 0U;
                                                                    #line 6352 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_19 = 0U;
                                                                    #line 6352 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_20 = 0U;
                                                                    #line 6352 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_21 = 0U;
                                                                    #line 6352 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_22 = 0U;
                                                                    #line 6352 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_23 = 0U;
                                                                    #line 6352 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_24 = 0U;
                                                                    #line 6352 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_25 = 0U;
                                                                    #line 6352 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_26 = 0U;
                                                                    #line 6352 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_27 = 0U;
                                                                    #line 6352 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_28 = 0U;
                                                                    #line 6352 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_29 = 0U;
                                                                    #line 6352 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_30 = 0U;
                                                                    #line 6352 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_31 = 0U;
                                                                    #line 6352 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_32 = 0U;
                                                                    #line 6352 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_33 = 0U;
                                                                    #line 6352 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_34 = 0U;
                                                                    #line 6352 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_35 = 0U;
                                                                    #line 6352 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_36 = 0U;
                                                                    #line 6352 
                                                                    tmp_37 = tmp_36;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_37 = 0U;
                                                                    #line 6352 
                                                                    tmp_38 = tmp_37;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_38 = 0U;
                                                                    #line 6352 
                                                                    tmp_39 = tmp_38;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_39 = 0U;
                                                                    #line 6352 
                                                                    tmp_40 = tmp_39;
                                                                    }
                                                                    else 
                                                                    #line 6352 
                                                                    tmp_40 = 0U;
                                                                    #line 6352 
                                                                    tmp_41 = tmp_40;
                                                                  }
                                                                  else 
                                                                    #line 6352 
                                                                    tmp_41 = 0U;
                                                                  #line 6352 
                                                                  tmp_42 = tmp_41;
                                                                }
                                                                else 
                                                                  #line 6352 
                                                                  tmp_42 = 0U;
                                                                #line 6352 
                                                                tmp_43 = tmp_42;
                                                              }
                                                              else 
                                                                   #line 6352 
                                                                   tmp_43 = 0U;
                                                              #line 6352 
                                                              tmp_44 = tmp_43;
                                                            }
                                                            else 
                                                                 #line 6352 
                                                                 tmp_44 = 0U;
                                                            #line 6352 
                                                            tmp_45 = tmp_44;
                                                          }
                                                          else 
                                                               #line 6352 
                                                               tmp_45 = 0U;
                                                          #line 6352 
                                                          tmp_46 = tmp_45;
                                                        }
                                                        else 
                                                             #line 6352 
                                                             tmp_46 = 0U;
                                                        #line 6352 
                                                        tmp_47 = tmp_46;
                                                      }
                                                      else 
                                                           #line 6352 
                                                           tmp_47 = 0U;
                                                      #line 6352 
                                                      tmp_48 = tmp_47;
                                                    }
                                                    else 
                                                         #line 6352 
                                                         tmp_48 = 0U;
                                                    #line 6352 
                                                    tmp_49 = tmp_48;
                                                  }
                                                  else 
                                                       #line 6352 
                                                       tmp_49 = 0U;
                                                  #line 6352 
                                                  tmp_50 = tmp_49;
                                                }
                                                else 
                                                     #line 6352 
                                                     tmp_50 = 0U;
                                                #line 6352 
                                                tmp_51 = tmp_50;
                                              }
                                              else 
                                                   #line 6352 
                                                   tmp_51 = 0U;
                                              #line 6352 
                                              tmp_52 = tmp_51;
                                            }
                                            else 
                                                 #line 6352 
                                                 tmp_52 = 0U;
                                            #line 6352 
                                            tmp_53 = tmp_52;
                                          }
                                          else 
                                               #line 6352 
                                               tmp_53 = 0U;
                                          #line 6352 
                                          tmp_54 = tmp_53;
                                        }
                                        else 
                                             #line 6352 
                                             tmp_54 = 0U;
                                        #line 6352 
                                        tmp_55 = tmp_54;
                                      }
                                      else 
                                           #line 6352 
                                           tmp_55 = 0U;
                                      #line 6352 
                                      tmp_56 = tmp_55;
                                    }
                                    else 
                                         #line 6352 
                                         tmp_56 = 0U;
                                    #line 6352 
                                    tmp_57 = tmp_56;
                                  }
                                  else 
                                       #line 6352 
                                       tmp_57 = 0U;
                                  #line 6352 
                                  tmp_58 = tmp_57;
                                }
                                else 
                                     #line 6352 
                                     tmp_58 = 0U;
                                #line 6352 
                                tmp_59 = tmp_58;
                              }
                              else 
                                   #line 6352 
                                   tmp_59 = 0U;
                              #line 6352 
                              tmp_60 = tmp_59;
                            }
                            else 
                                 #line 6352 
                                 tmp_60 = 0U;
                            #line 6352 
                            tmp_61 = tmp_60;
                          }
                          else 
                               #line 6352 
                               tmp_61 = 0U;
                          #line 6352 
                          tmp_62 = tmp_61;
                        }
                        else 
                             #line 6352 
                             tmp_62 = 0U;
                        #line 6352 
                        tmp_63 = tmp_62;
                      }
                      else 
                           #line 6352 
                           tmp_63 = 0U;
                      #line 6352 
                      tmp_64 = tmp_63;
                    }
                    else 
                         #line 6352 
                         tmp_64 = 0U;
                    #line 6352 
                    tmp_65 = tmp_64;
                  }
                  else 
                       #line 6352 
                       tmp_65 = 0U;
                  #line 6352 
                  tmp_66 = tmp_65;
                }
                else 
                     #line 6352 
                     tmp_66 = 0U;
                #line 6352 
                tmp_67 = tmp_66;
              }
              else 
                   #line 6352 
                   tmp_67 = 0U;
              #line 6352 
              tmp_68 = tmp_67;
            }
            else 
                 #line 6352 
                 tmp_68 = 0U;
            #line 6352 
            tmp_69 = tmp_68;
          }
          else 
               #line 6352 
               tmp_69 = 0U;
          #line 6352 
          tmp_70 = tmp_69;
        }
        else 
             #line 6352 
             tmp_70 = 0U;
        #line 6352 
        tmp_71 = tmp_70;
      }
      else 
           #line 6352 
           tmp_71 = 1U;
      #line 6352 
      bp->num_tx_rings = (unsigned char)tmp_71;
    }
    else {
      #line 6352 
      bp->num_tx_rings = (unsigned char)__rounddown_pow_of_two((unsigned long)bp->irq_nvecs);
    }
  else {
    #line 6354 
    int tmp_73;
    #line 6354 
    int __UNIQUE_ID___x583;
    {
      #line 6354 
      __UNIQUE_ID___x583 = bp->irq_nvecs;
      #line 6354 
      int __UNIQUE_ID___y584 = bp->num_req_tx_rings;
      #line 6354 
      if (__UNIQUE_ID___x583 < __UNIQUE_ID___y584) 
                                                   #line 6354 
                                                   tmp_73 = __UNIQUE_ID___x583; else 
                                                                    #line 6354 
                                                                    tmp_73 = __UNIQUE_ID___y584;
      }
    #line 6354 
    bp->num_tx_rings = (unsigned char)tmp_73;
  }
  #line 6356 
  if (bp->num_req_rx_rings == 0) 
                                 #line 6357 
                                 bp->num_rx_rings = (unsigned char)bp->irq_nvecs;
  else {
    #line 6359 
    int __UNIQUE_ID___x585;
    #line 6359 
    int tmp_75;
    {
      #line 6359 
      __UNIQUE_ID___x585 = bp->irq_nvecs;
      #line 6359 
      int __UNIQUE_ID___y586 = bp->num_req_rx_rings;
      #line 6359 
      if (__UNIQUE_ID___x585 < __UNIQUE_ID___y586) 
                                                   #line 6359 
                                                   tmp_75 = __UNIQUE_ID___x585; else 
                                                                    #line 6359 
                                                                    tmp_75 = __UNIQUE_ID___y586;
      }
    #line 6359 
    bp->num_rx_rings = (unsigned char)tmp_75;
  }
  #line 6361 
  netif_set_real_num_tx_queues(bp->dev,(unsigned int)bp->num_tx_rings);
  #line 6363 
  return netif_set_real_num_rx_queues(bp->dev,(unsigned int)bp->num_rx_rings);
}

#line 6368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_open(struct net_device *dev)
{
  #line 6371 
  int rc;
  #line 6370 
  struct bnx2 *bp = netdev_priv(dev);
  #line 6373 
  rc = bnx2_request_firmware(bp);
  #line 6374 
  if (rc < 0) 
              #line 6375 
              goto out;
  #line 6377 
  netif_carrier_off(dev);
  #line 6379 
  bnx2_disable_int(bp);
  #line 6381 
  rc = bnx2_setup_int_mode(bp,disable_msi);
  #line 6382 
  if (rc != 0) 
               #line 6383 
               goto open_err;
  #line 6384 
  bnx2_init_napi(bp);
  #line 6385 
  bnx2_napi_enable(bp);
  #line 6386 
  rc = bnx2_alloc_mem(bp);
  #line 6387 
  if (rc != 0) 
               #line 6388 
               goto open_err;
  #line 6390 
  rc = bnx2_request_irq(bp);
  #line 6391 
  if (rc != 0) 
               #line 6392 
               goto open_err;
  #line 6394 
  rc = bnx2_init_nic(bp,1);
  #line 6395 
  if (rc != 0) 
               #line 6396 
               goto open_err;
  #line 6398 
  cif_mod_timer(& bp->timer,(unsigned long)bp->current_interval + jiffies);
  #line 6400 
  atomic_set(& bp->intr_sem,0);
  #line 6402 
  memset((void *)bp->temp_stats_blk,0,324UL);
  #line 6404 
  bnx2_enable_int(bp);
  #line 6406 
  if ((bp->flags & 32U) != 0U) {
    #line 6410 
    if (bnx2_test_intr(bp) != 0) {
      #line 6411 
      netdev_warn(bp->dev,(char *)"No interrupt was generated using MSI, switching to INTx mode. Please report this failure to the PCI maintainer and include system chipset information.\n");
      #line 6413 
      bnx2_disable_int(bp);
      #line 6414 
      bnx2_free_irq(bp);
      #line 6416 
      bnx2_setup_int_mode(bp,1);
      #line 6418 
      rc = bnx2_init_nic(bp,0);
      #line 6420 
      if (rc == 0) 
                   #line 6421 
                   rc = bnx2_request_irq(bp);
      #line 6423 
      if (rc != 0) {
        #line 6424 
        cif_del_timer_sync(& bp->timer);
        #line 6425 
        goto open_err;
      }
      #line 6427 
      bnx2_enable_int(bp);
    }
  }
  #line 6430 
  if ((bp->flags & 32U) != 0U) 
                               #line 6431 
                               netdev_info(dev,(char *)"using MSI\n");
  else 
    #line 6432 
    if ((bp->flags & 1024U) != 0U) 
                                   #line 6433 
                                   netdev_info(dev,(char *)"using MSIX\n");
  #line 6435 
  netif_tx_start_all_queues(dev);
  #line 6436 
  out: 
       #line 6436 
  ;
  #line 6437 
  return rc;
  #line 6439 
  open_err: 
            #line 6439 
  ;
  #line 6440 
  bnx2_napi_disable(bp);
  #line 6441 
  bnx2_free_skbs(bp);
  #line 6442 
  bnx2_free_irq(bp);
  #line 6443 
  bnx2_free_mem(bp);
  #line 6444 
  bnx2_del_napi(bp);
  #line 6445 
  bnx2_release_firmware(bp);
  #line 6446 
  goto out;
}

#line 6450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_reset_task(struct work_struct *work)
{
  #line 6452 
  void *__mptr;
  #line 6453 
  int rc;
  #line 6454 
  u16 pcicmd;
  #line 6452 
  __mptr = (void *)work;
  #line 6452 
  struct bnx2 *bp = ((struct bnx2 *)(__mptr + 18446744073709540464U));
  #line 6456 
  rtnl_lock();
  #line 6457 
  if (! netif_running(bp->dev)) {
    #line 6458 
    rtnl_unlock();
    #line 6459 
    return;
  }
  #line 6462 
  bnx2_netif_stop(bp,(_Bool)1);
  #line 6464 
  pci_read_config_word(bp->pdev,4,& pcicmd);
  #line 6465 
  if (((int)pcicmd & 2) == 0) {
    #line 6467 
    pci_restore_state(bp->pdev);
    #line 6468 
    pci_save_state(bp->pdev);
  }
  #line 6470 
  rc = bnx2_init_nic(bp,1);
  #line 6471 
  if (rc != 0) {
    #line 6472 
    netdev_err(bp->dev,(char *)"failed to reset NIC, closing\n");
    #line 6473 
    bnx2_napi_enable(bp);
    #line 6474 
    dev_close(bp->dev);
    #line 6475 
    rtnl_unlock();
    #line 6476 
    return;
  }
  #line 6479 
  atomic_set(& bp->intr_sem,1);
  #line 6480 
  bnx2_netif_start(bp,(_Bool)1);
  #line 6481 
  rtnl_unlock();
  #line 6482 
  return;
}

#line 6487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_dump_ftq(struct bnx2 *bp)
{
  #line 6489 
  int i;
  #line 6490 
  u32 reg;
  #line 6490 
  u32 bdidx;
  #line 6490 
  u32 cid;
  #line 6490 
  u32 valid;
  #line 6491 
  struct net_device *dev = bp->dev;
  #line 6495 
  struct ftq_reg ftq_arr[14U] = {{.name = (char *)"RV2P_PFTQ_CTL", .off = 11132U}, {.name = (char *)"RV2P_TFTQ_CTL", .off = 11196U}, {.name = (char *)"RV2P_MFTQ_CTL", .off = 11260U}, {.name = (char *)"TBDR_FTQ_CTL", .off = 21500U}, {.name = (char *)"TDMA_FTQ_CTL", .off = 24572U}, {.name = (char *)"TXP_FTQ_CTL", .off = 283644U}, {.name = (char *)"TXP_FTQ_CTL", .off = 283644U}, {.name = (char *)"TPAT_FTQ_CTL", .off = 545788U}, {.name = (char *)"RXP_CFTQ_CTL", .off = 807868U}, {.name = (char *)"RXP_FTQ_CTL", .off = 807932U}, {.name = (char *)"COM_COMXQ_FTQ_CTL", .off = 1069948U}, {.name = (char *)"COM_COMTQ_FTQ_CTL", .off = 1070012U}, {.name = (char *)"COM_COMQ_FTQ_CTL", .off = 1070076U}, {.name = (char *)"CP_CPQ_FTQ_CTL", .off = 1594364U}};
  #line 6512 
  netdev_err(dev,(char *)"<--- start FTQ dump --->\n");
  #line 6513 
  i = 0;
  #line 6513 
  while ((unsigned int)i <= 13U) {
    #line 6514 
    ;
    #line 6514 
    ;
    #line 6514 
    netdev_err(dev,(char *)"%s %08x\n",ftq_arr[i].name,bnx2_reg_rd_ind(bp,ftq_arr[i].off));
    #line 6513 
    i ++;
  }
  #line 6517 
  netdev_err(dev,(char *)"CPU states:\n");
  #line 6518 
  reg = 282624U;
  #line 6518 
  while (reg <= 1593344U) {
    #line 6519 
    ;
    #line 6519 
    ;
    #line 6519 
    netdev_err(dev,(char *)"%06x mode %x state %x evt_mask %x pc %x pc %x instr %x\n",reg,bnx2_reg_rd_ind(bp,reg),bnx2_reg_rd_ind(bp,reg + 4U),bnx2_reg_rd_ind(bp,reg + 8U),bnx2_reg_rd_ind(bp,reg + 28U),bnx2_reg_rd_ind(bp,reg + 28U),bnx2_reg_rd_ind(bp,reg + 32U));
    #line 6518 
    reg += 262144U;
  }
  #line 6527 
  netdev_err(dev,(char *)"<--- end FTQ dump --->\n");
  #line 6528 
  netdev_err(dev,(char *)"<--- start TBDC dump --->\n");
  #line 6529 
  ;
  #line 6529 
  netdev_err(dev,(char *)"TBDC free cnt: %ld\n",(unsigned long)readl(bp->regview + 21508U) & 63UL);
  #line 6531 
  netdev_err(dev,(char *)"LINE     CID  BIDX   CMD  VALIDS\n");
  #line 6532 
  i = 0;
  #line 6532 
  while (i <= 31) {
    {
      #line 6533 
      int j = 0;
      #line 6535 
      writel((unsigned int)i,bp->regview + 21540U);
      #line 6536 
      writel(5U,bp->regview + 21556U);
      #line 6538 
      writel(8U,bp->regview + 21504U);
      #line 6539 
      while (1) {
        #line 6539 
        if (((unsigned long)readl(bp->regview + 21504U) & 8UL) != 0UL) {
          #line 6540 
          if (! (j <= 99)) 
                           #line 6539 
                           break;
        }
        else 
             #line 6539 
             break;
        #line 6541 
        j ++;
      }
      #line 6543 
      cid = readl(bp->regview + 21552U);
      #line 6544 
      bdidx = readl(bp->regview + 21548U);
      #line 6545 
      valid = readl(bp->regview + 21556U);
      #line 6546 
      netdev_err(dev,(char *)"%02x    %06x  %04lx   %02x    [%x]\n",i,cid,(unsigned long)bdidx & 65535UL,bdidx >> 24,(valid >> 8) & 255U);
    }
    #line 6532 
    i ++;
  }
  #line 6550 
  netdev_err(dev,(char *)"<--- end TBDC dump --->\n");
  #line 6551 
  return;
}

#line 6554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_dump_state(struct bnx2 *bp)
{
  #line 6557 
  u32 val1;
  #line 6557 
  u32 val2;
  #line 6556 
  struct net_device *dev = bp->dev;
  #line 6559 
  pci_read_config_dword(bp->pdev,4,& val1);
  #line 6560 
  ;
  #line 6560 
  ;
  #line 6560 
  netdev_err(dev,(char *)"DEBUG: intr_sem[%x] PCI_CMD[%08x]\n",atomic_read(& bp->intr_sem),val1);
  #line 6562 
  pci_read_config_dword(bp->pdev,bp->pm_cap + 4,& val1);
  #line 6563 
  pci_read_config_dword(bp->pdev,104,& val2);
  #line 6564 
  netdev_err(dev,(char *)"DEBUG: PCI_PM[%08x] PCI_MISC_CFG[%08x]\n",val1,val2);
  #line 6565 
  ;
  #line 6565 
  netdev_err(dev,(char *)"DEBUG: EMAC_TX_STATUS[%08x] EMAC_RX_STATUS[%08x]\n",readl(bp->regview + 5312U),readl(bp->regview + 5324U));
  #line 6568 
  ;
  #line 6568 
  netdev_err(dev,(char *)"DEBUG: RPM_MGMT_PKT_CTRL[%08x]\n",readl(bp->regview + 6156U));
  #line 6570 
  ;
  #line 6570 
  netdev_err(dev,(char *)"DEBUG: HC_STATS_INTERRUPT_STATUS[%08x]\n",readl(bp->regview + 26696U));
  #line 6572 
  if ((bp->flags & 1024U) != 0U) {
    #line 6573 
    ;
    #line 6573 
    netdev_err(dev,(char *)"DEBUG: PBA[%08x]\n",readl(bp->regview + 57344U));
  }
  #line 6575 
  return;
}

#line 6578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_tx_timeout(struct net_device *dev)
{
  #line 6580 
  struct bnx2 *bp = netdev_priv(dev);
  #line 6582 
  bnx2_dump_ftq(bp);
  #line 6583 
  bnx2_dump_state(bp);
  #line 6584 
  bnx2_dump_mcp_state(bp);
  #line 6587 
  cif_schedule_work(& bp->reset_task);
  #line 6588 
  return;
}

#line 6595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static netdev_tx_t bnx2_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 6598 
  dma_addr_t mapping;
  #line 6599 
  struct bnx2_tx_bd *txbd;
  #line 6600 
  struct bnx2_sw_tx_bd *tx_buf;
  #line 6601 
  u32 len;
  #line 6601 
  u32 vlan_tag_flags;
  #line 6601 
  u32 last_frag;
  #line 6601 
  u32 mss;
  #line 6602 
  u16 prod;
  #line 6602 
  u16 ring_prod;
  #line 6603 
  int i;
  #line 6604 
  struct bnx2_napi *bnapi;
  #line 6605 
  struct bnx2_tx_ring_info *txr;
  #line 6606 
  struct netdev_queue *txq;
  #line 6597 
  struct bnx2 *bp = netdev_priv(dev);
  #line 6609 
  i = (int)skb_get_queue_mapping(skb);
  #line 6610 
  bnapi = & bp->bnx2_napi[i];
  #line 6611 
  txr = & bnapi->tx_ring;
  #line 6612 
  txq = netdev_get_tx_queue(dev,(unsigned int)i);
  #line 6614 
  ;
  #line 6614 
  if ((long)(bnx2_tx_avail(bp,txr) < (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1)) != 0L) {
    #line 6616 
    netif_tx_stop_queue(txq);
    #line 6617 
    netdev_err(dev,(char *)"BUG! Tx ring full when queue awake!\n");
    #line 6619 
    return NETDEV_TX_BUSY;
  }
  #line 6621 
  len = skb_headlen(skb);
  #line 6622 
  prod = txr->tx_prod;
  #line 6623 
  ring_prod = (unsigned short)((unsigned int)prod & 255U);
  #line 6625 
  vlan_tag_flags = 0U;
  #line 6626 
  if ((unsigned int)skb->ip_summed == 3U) 
                                          #line 6627 
                                          vlan_tag_flags |= 2U;
  #line 6630 
  if ((unsigned int)skb->vlan_present != 0U) 
                                             #line 6631 
                                             vlan_tag_flags = ((unsigned int)((int)skb->vlan_tci << 16) | vlan_tag_flags) | 8U;
  #line 6635 
  mss = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 6635 
  if (mss != 0U) {
    #line 6636 
    u32 tcp_opt_len;
    #line 6637 
    struct iphdr *iph;
    #line 6639 
    vlan_tag_flags |= 32768U;
    #line 6641 
    tcp_opt_len = tcp_optlen(skb);
    #line 6643 
    ;
    #line 6643 
    if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 16U) != 0U) {
      #line 6644 
      u32 tcp_off = (unsigned int)skb_transport_offset(skb) + 4294967242U;
      #line 6647 
      vlan_tag_flags = (((tcp_opt_len >> 2) << 8) | vlan_tag_flags) | 8192U;
      #line 6649 
      if ((long)(tcp_off == 0U) != 0L) 
                                       #line 6650 
                                       vlan_tag_flags &= 4294967289U;
      else {
        #line 6652 
        tcp_off >>= 3;
        #line 6653 
        vlan_tag_flags = (((tcp_off << 1) & 6U) | ((tcp_off << 12) & 65536U)) | vlan_tag_flags;
        #line 6657 
        mss = ((tcp_off << 14) & 196608U) | mss;
      }
    }
    else {
      #line 6660 
      iph = ip_hdr(skb);
      #line 6661 
      if (tcp_opt_len != 0U || (unsigned int)iph->ihl > 5U) 
                                                            #line 6662 
                                                            vlan_tag_flags = ((((unsigned int)iph->ihl + (tcp_opt_len >> 2)) + 4294967291U) << 8) | vlan_tag_flags;
    }
  }
  else 
       #line 6667 
       mss = 0U;
  #line 6669 
  mapping = dma_map_single_attrs(& (bp->pdev)->dev,(void *)skb->data,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 6670 
  if (dma_mapping_error(& (bp->pdev)->dev,mapping) != 0) {
    #line 6671 
    dev_kfree_skb_any(skb);
    #line 6672 
    return NETDEV_TX_OK;
  }
  #line 6675 
  tx_buf = txr->tx_buf_ring + (unsigned long)ring_prod;
  #line 6676 
  tx_buf->skb = skb;
  #line 6677 
  tx_buf->mapping = mapping;
  #line 6679 
  txbd = txr->tx_desc_ring + (unsigned long)ring_prod;
  #line 6681 
  txbd->tx_bd_haddr_hi = (unsigned int)(mapping >> 32);
  #line 6682 
  txbd->tx_bd_haddr_lo = (unsigned int)mapping;
  #line 6683 
  txbd->tx_bd_mss_nbytes = (mss << 16) | len;
  #line 6684 
  txbd->tx_bd_vlan_tag_flags = vlan_tag_flags | 128U;
  #line 6686 
  last_frag = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 6687 
  tx_buf->nr_frags = (unsigned short)last_frag;
  #line 6688 
  tx_buf->is_gso = (unsigned short)skb_is_gso(skb);
  #line 6690 
  i = 0;
  #line 6690 
  while ((unsigned int)i < last_frag) {
    {
      #line 6691 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 6693 
      if (((unsigned long)prod & 254UL) == 254UL) 
                                                  #line 6693 
                                                  prod = (unsigned short)((unsigned int)prod + 2U); else 
                                                                    #line 6693 
                                                                    prod = (unsigned short)((unsigned int)prod + 1U);
      #line 6694 
      ring_prod = (unsigned short)((unsigned int)prod & 255U);
      #line 6695 
      txbd = txr->tx_desc_ring + (unsigned long)ring_prod;
      #line 6697 
      len = skb_frag_size(frag);
      #line 6698 
      mapping = skb_frag_dma_map(& (bp->pdev)->dev,frag,0UL,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 6700 
      if (dma_mapping_error(& (bp->pdev)->dev,mapping) != 0) 
                                                             #line 6701 
                                                             goto dma_error;
      #line 6702 
      (txr->tx_buf_ring + (unsigned long)ring_prod)->mapping = mapping;
      #line 6705 
      txbd->tx_bd_haddr_hi = (unsigned int)(mapping >> 32);
      #line 6706 
      txbd->tx_bd_haddr_lo = (unsigned int)mapping;
      #line 6707 
      txbd->tx_bd_mss_nbytes = (mss << 16) | len;
      #line 6708 
      txbd->tx_bd_vlan_tag_flags = vlan_tag_flags;
    }
    #line 6690 
    i ++;
  }
  #line 6711 
  txbd->tx_bd_vlan_tag_flags |= 64U;
  #line 6712 
  ldv_inline_asm();
  #line 6716 
  netdev_tx_sent_queue(txq,skb->len);
  #line 6718 
  if (((unsigned long)prod & 254UL) == 254UL) 
                                              #line 6718 
                                              prod = (unsigned short)((unsigned int)prod + 2U); else 
                                                                    #line 6718 
                                                                    prod = (unsigned short)((unsigned int)prod + 1U);
  #line 6719 
  txr->tx_prod_bseq += skb->len;
  #line 6721 
  writew((unsigned short)((int)prod),bp->regview + (unsigned long)txr->tx_bidx_addr);
  #line 6722 
  writel(txr->tx_prod_bseq,bp->regview + (unsigned long)txr->tx_bseq_addr);
  #line 6724 
  txr->tx_prod = prod;
  #line 6726 
  if ((long)(bnx2_tx_avail(bp,txr) <= 17U) != 0L) {
    #line 6727 
    netif_tx_stop_queue(txq);
    #line 6728 
    ldv_inline_asm();
    #line 6735 
    ;
    #line 6735 
    if (bnx2_tx_avail(bp,txr) > bp->tx_wake_thresh) 
                                                    #line 6736 
                                                    netif_tx_wake_queue(txq);
  }
  #line 6739 
  return NETDEV_TX_OK;
  #line 6740 
  dma_error: 
             #line 6740 
  ;
  #line 6742 
  last_frag = (unsigned int)i;
  #line 6745 
  prod = txr->tx_prod;
  #line 6746 
  ring_prod = (unsigned short)((unsigned int)prod & 255U);
  #line 6747 
  tx_buf = txr->tx_buf_ring + (unsigned long)ring_prod;
  #line 6748 
  tx_buf->skb = (struct sk_buff *)0;
  #line 6749 
  ;
  #line 6749 
  ;
  #line 6749 
  dma_unmap_single_attrs(& (bp->pdev)->dev,tx_buf->mapping,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 6753 
  i = 0;
  #line 6753 
  while ((unsigned int)i < last_frag) {
    {
      #line 6754 
      if (((unsigned long)prod & 254UL) == 254UL) 
                                                  #line 6754 
                                                  prod = (unsigned short)((unsigned int)prod + 2U); else 
                                                                    #line 6754 
                                                                    prod = (unsigned short)((unsigned int)prod + 1U);
      #line 6755 
      ring_prod = (unsigned short)((unsigned int)prod & 255U);
      #line 6756 
      tx_buf = txr->tx_buf_ring + (unsigned long)ring_prod;
      #line 6757 
      ;
      #line 6757 
      ;
      #line 6757 
      dma_unmap_page_attrs(& (bp->pdev)->dev,tx_buf->mapping,(unsigned long)skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    }
    #line 6753 
    i ++;
  }
  #line 6762 
  dev_kfree_skb_any(skb);
  #line 6763 
  return NETDEV_TX_OK;
}

#line 6768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_close(struct net_device *dev)
{
  #line 6770 
  struct bnx2 *bp = netdev_priv(dev);
  #line 6772 
  bnx2_disable_int_sync(bp);
  #line 6773 
  bnx2_napi_disable(bp);
  #line 6774 
  netif_tx_disable(dev);
  #line 6775 
  cif_del_timer_sync(& bp->timer);
  #line 6776 
  bnx2_shutdown_chip(bp);
  #line 6777 
  bnx2_free_irq(bp);
  #line 6778 
  bnx2_free_skbs(bp);
  #line 6779 
  bnx2_free_mem(bp);
  #line 6780 
  bnx2_del_napi(bp);
  #line 6781 
  bp->link_up = (unsigned char)0U;
  #line 6782 
  netif_carrier_off(bp->dev);
  #line 6783 
  return 0;
}

#line 6787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_save_stats(struct bnx2 *bp)
{
  #line 6791 
  int i;
  #line 6789 
  u32 *hw_stats = (u32 *)bp->stats_blk;
  #line 6790 
  u32 *temp_stats = (u32 *)bp->temp_stats_blk;
  #line 6794 
  i = 0;
  #line 6794 
  while (i <= 19) {
    {
      #line 6795 
      u32 hi;
      #line 6796 
      u64 lo;
      #line 6798 
      hi = *(temp_stats + (unsigned long)i) + *(hw_stats + (unsigned long)i);
      #line 6799 
      lo = (unsigned long long)*(temp_stats + ((unsigned long)i + (unsigned long)1U)) + (unsigned long long)*(hw_stats + ((unsigned long)i + (unsigned long)1U));
      #line 6800 
      if (lo > 4294967295ULL) 
                              #line 6801 
                              hi ++;
      #line 6802 
      *(temp_stats + (unsigned long)i) = hi;
      #line 6803 
      *(temp_stats + ((unsigned long)i + (unsigned long)1U)) = (unsigned int)lo;
    }
    #line 6794 
    i += 2;
  }
  #line 6806 
  while ((unsigned int)i <= 80U) {
    #line 6807 
    *(temp_stats + (unsigned long)i) += *(hw_stats + (unsigned long)i);
    #line 6806 
    i ++;
  }
  #line 6808 
  return;
}

#line 6822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *net_stats)
{
  #line 6824 
  struct bnx2 *bp = netdev_priv(dev);
  #line 6826 
  if (bp->stats_blk == (struct statistics_block *)0) 
                                                     #line 6827 
                                                     return;
  #line 6829 
  net_stats->rx_packets = (((((((unsigned long long)(bp->stats_blk)->stat_IfHCInUcastPkts_hi << 32) + (unsigned long long)(bp->stats_blk)->stat_IfHCInUcastPkts_lo) + (((unsigned long long)(bp->temp_stats_blk)->stat_IfHCInUcastPkts_hi << 32) + (unsigned long long)(bp->temp_stats_blk)->stat_IfHCInUcastPkts_lo)) + (((unsigned long long)(bp->stats_blk)->stat_IfHCInMulticastPkts_hi << 32) + (unsigned long long)(bp->stats_blk)->stat_IfHCInMulticastPkts_lo)) + (((unsigned long long)(bp->temp_stats_blk)->stat_IfHCInMulticastPkts_hi << 32) + (unsigned long long)(bp->temp_stats_blk)->stat_IfHCInMulticastPkts_lo)) + (((unsigned long long)(bp->stats_blk)->stat_IfHCInBroadcastPkts_hi << 32) + (unsigned long long)(bp->stats_blk)->stat_IfHCInBroadcastPkts_lo)) + (((unsigned long long)(bp->temp_stats_blk)->stat_IfHCInBroadcastPkts_hi << 32) + (unsigned long long)(bp->temp_stats_blk)->stat_IfHCInBroadcastPkts_lo);
  #line 6834 
  net_stats->tx_packets = (((((((unsigned long long)(bp->stats_blk)->stat_IfHCOutUcastPkts_hi << 32) + (unsigned long long)(bp->stats_blk)->stat_IfHCOutUcastPkts_lo) + (((unsigned long long)(bp->temp_stats_blk)->stat_IfHCOutUcastPkts_hi << 32) + (unsigned long long)(bp->temp_stats_blk)->stat_IfHCOutUcastPkts_lo)) + (((unsigned long long)(bp->stats_blk)->stat_IfHCOutMulticastPkts_hi << 32) + (unsigned long long)(bp->stats_blk)->stat_IfHCOutMulticastPkts_lo)) + (((unsigned long long)(bp->temp_stats_blk)->stat_IfHCOutMulticastPkts_hi << 32) + (unsigned long long)(bp->temp_stats_blk)->stat_IfHCOutMulticastPkts_lo)) + (((unsigned long long)(bp->stats_blk)->stat_IfHCOutBroadcastPkts_hi << 32) + (unsigned long long)(bp->stats_blk)->stat_IfHCOutBroadcastPkts_lo)) + (((unsigned long long)(bp->temp_stats_blk)->stat_IfHCOutBroadcastPkts_hi << 32) + (unsigned long long)(bp->temp_stats_blk)->stat_IfHCOutBroadcastPkts_lo);
  #line 6839 
  net_stats->rx_bytes = (((unsigned long long)(bp->stats_blk)->stat_IfHCInOctets_hi << 32) + (unsigned long long)(bp->stats_blk)->stat_IfHCInOctets_lo) + (((unsigned long long)(bp->temp_stats_blk)->stat_IfHCInOctets_hi << 32) + (unsigned long long)(bp->temp_stats_blk)->stat_IfHCInOctets_lo);
  #line 6842 
  net_stats->tx_bytes = (((unsigned long long)(bp->stats_blk)->stat_IfHCOutOctets_hi << 32) + (unsigned long long)(bp->stats_blk)->stat_IfHCOutOctets_lo) + (((unsigned long long)(bp->temp_stats_blk)->stat_IfHCOutOctets_hi << 32) + (unsigned long long)(bp->temp_stats_blk)->stat_IfHCOutOctets_lo);
  #line 6845 
  net_stats->multicast = (((unsigned long long)(bp->stats_blk)->stat_IfHCInMulticastPkts_hi << 32) + (unsigned long long)(bp->stats_blk)->stat_IfHCInMulticastPkts_lo) + (((unsigned long long)(bp->temp_stats_blk)->stat_IfHCInMulticastPkts_hi << 32) + (unsigned long long)(bp->temp_stats_blk)->stat_IfHCInMulticastPkts_lo);
  #line 6848 
  net_stats->collisions = (unsigned long long)((bp->stats_blk)->stat_EtherStatsCollisions + (bp->temp_stats_blk)->stat_EtherStatsCollisions);
  #line 6851 
  net_stats->rx_length_errors = (unsigned long long)((unsigned long)((bp->stats_blk)->stat_EtherStatsUndersizePkts + (bp->temp_stats_blk)->stat_EtherStatsUndersizePkts) + (unsigned long)((bp->stats_blk)->stat_EtherStatsOverrsizePkts + (bp->temp_stats_blk)->stat_EtherStatsOverrsizePkts));
  #line 6855 
  net_stats->rx_over_errors = (unsigned long long)((unsigned long)((bp->stats_blk)->stat_IfInFTQDiscards + (bp->temp_stats_blk)->stat_IfInFTQDiscards) + (unsigned long)((bp->stats_blk)->stat_IfInMBUFDiscards + (bp->temp_stats_blk)->stat_IfInMBUFDiscards));
  #line 6859 
  net_stats->rx_frame_errors = (unsigned long long)((bp->stats_blk)->stat_Dot3StatsAlignmentErrors + (bp->temp_stats_blk)->stat_Dot3StatsAlignmentErrors);
  #line 6862 
  net_stats->rx_crc_errors = (unsigned long long)((bp->stats_blk)->stat_Dot3StatsFCSErrors + (bp->temp_stats_blk)->stat_Dot3StatsFCSErrors);
  #line 6865 
  net_stats->rx_errors = ((net_stats->rx_length_errors + net_stats->rx_over_errors) + net_stats->rx_frame_errors) + net_stats->rx_crc_errors;
  #line 6869 
  net_stats->tx_aborted_errors = (unsigned long long)((unsigned long)((bp->stats_blk)->stat_Dot3StatsExcessiveCollisions + (bp->temp_stats_blk)->stat_Dot3StatsExcessiveCollisions) + (unsigned long)((bp->stats_blk)->stat_Dot3StatsLateCollisions + (bp->temp_stats_blk)->stat_Dot3StatsLateCollisions));
  #line 6873 
  if ((bp->chip_id & 4294901760U) == 1460011008U || (bp->chip_id & 4294967280U) == 1460142080U) 
    #line 6875 
    net_stats->tx_carrier_errors = 0ULL; else 
                                              #line 6877 
                                              net_stats->tx_carrier_errors = (unsigned long long)((bp->stats_blk)->stat_Dot3StatsCarrierSenseErrors + (bp->temp_stats_blk)->stat_Dot3StatsCarrierSenseErrors);
  #line 6881 
  net_stats->tx_errors = ((unsigned long long)((bp->stats_blk)->stat_emac_tx_stat_dot3statsinternalmactransmiterrors + (bp->temp_stats_blk)->stat_emac_tx_stat_dot3statsinternalmactransmiterrors) + net_stats->tx_aborted_errors) + net_stats->tx_carrier_errors;
  #line 6886 
  net_stats->rx_missed_errors = (unsigned long long)(((unsigned long)((bp->stats_blk)->stat_IfInFTQDiscards + (bp->temp_stats_blk)->stat_IfInFTQDiscards) + (unsigned long)((bp->stats_blk)->stat_IfInMBUFDiscards + (bp->temp_stats_blk)->stat_IfInMBUFDiscards)) + (unsigned long)((bp->stats_blk)->stat_FwRxDrop + (bp->temp_stats_blk)->stat_FwRxDrop));
  #line 6890 
  return;
}

#line 6896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 6901 
  u32 supported;
  #line 6901 
  u32 advertising;
  #line 6899 
  struct bnx2 *bp = netdev_priv(dev);
  #line 6900 
  int support_serdes = 0;
  #line 6900 
  int support_copper = 0;
  #line 6903 
  supported = 64U;
  #line 6904 
  if ((bp->phy_flags & 2048U) != 0U) {
    #line 6905 
    support_serdes = 1;
    #line 6906 
    support_copper = 1;
  }
  else 
    #line 6907 
    if ((unsigned int)bp->phy_port == 3U) 
                                          #line 6908 
                                          support_serdes = 1; else 
                                                                   #line 6910 
                                                                   support_copper = 1;
  #line 6912 
  if (support_serdes != 0) {
    #line 6913 
    supported |= 1056U;
    #line 6915 
    if ((bp->phy_flags & 8U) != 0U) 
                                    #line 6916 
                                    supported |= 32768U;
  }
  #line 6918 
  if (support_copper != 0) 
                           #line 6919 
                           supported |= 175U;
  #line 6927 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 6928 
  cmd->base.port = bp->phy_port;
  #line 6929 
  advertising = bp->advertising;
  #line 6931 
  if (((int)bp->autoneg & 1) != 0) 
                                   #line 6932 
                                   cmd->base.autoneg = (unsigned char)1U; else 
                                                                    #line 6934 
                                                                    cmd->base.autoneg = (unsigned char)0U;
  #line 6937 
  if ((int)netif_carrier_ok(dev) != 0) {
    #line 6938 
    cmd->base.speed = (unsigned int)bp->line_speed;
    #line 6939 
    cmd->base.duplex = bp->duplex;
    #line 6940 
    if ((bp->phy_flags & 1U) == 0U) 
      #line 6941 
      if ((bp->phy_flags & 16384U) != 0U) 
                                          #line 6942 
                                          cmd->base.eth_tp_mdix = (unsigned char)2U; else 
                                                                    #line 6944 
                                                                    cmd->base.eth_tp_mdix = (unsigned char)1U;
  }
  else {
    #line 6948 
    cmd->base.speed = 4294967295U;
    #line 6949 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 6951 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 6953 
  cmd->base.phy_address = (unsigned char)bp->phy_addr;
  #line 6955 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 6957 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 6960 
  return 0;
}

#line 6964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 6967 
  struct bnx2 *bp = netdev_priv(dev);
  #line 6968 
  u8 autoneg = bp->autoneg;
  #line 6969 
  u8 req_duplex = bp->req_duplex;
  #line 6970 
  u16 req_line_speed = bp->req_line_speed;
  #line 6971 
  u32 advertising = bp->advertising;
  #line 6972 
  int err = -22;
  #line 6974 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 6976 
  if ((unsigned int)cmd->base.port != 0U && (unsigned int)cmd->base.port != 3U) 
    #line 6977 
    goto err_out_unlock;
  #line 6979 
  if ((int)cmd->base.port != (int)bp->phy_port && (bp->phy_flags & 2048U) == 0U) 
    #line 6981 
    goto err_out_unlock;
  #line 6986 
  if (! netif_running(dev)) 
    #line 6986 
    if ((int)cmd->base.port != (int)bp->phy_port) 
                                                  #line 6987 
                                                  goto err_out_unlock;
  #line 6989 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 6990 
    autoneg = (unsigned char)((unsigned int)autoneg | 1U);
    #line 6992 
    ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
    #line 6995 
    if ((unsigned int)cmd->base.port == 0U) {
      #line 6996 
      advertising &= 47U;
      #line 6997 
      if (advertising == 0U) 
                             #line 6998 
                             advertising = 47U;
    }
    else {
      #line 7000 
      unsigned int tmp_1;
      #line 7000 
      if ((bp->phy_flags & 8U) != 0U) 
                                      #line 7000 
                                      tmp_1 = 32800U; else 
                                                           #line 7000 
                                                           tmp_1 = 32U;
      #line 7000 
      advertising = tmp_1 & advertising;
      #line 7001 
      if (advertising == 0U) 
        #line 7002 
        if ((bp->phy_flags & 8U) != 0U) 
                                        #line 7002 
                                        advertising = 32800U; else 
                                                                   #line 7002 
                                                                   advertising = 32U;
    }
    #line 7004 
    advertising |= 64U;
  }
  else {
    #line 7007 
    u32 speed = cmd->base.speed;
    #line 7009 
    if ((unsigned int)cmd->base.port == 3U) {
      #line 7010 
      if (speed != 1000U && speed != 2500U || (unsigned int)cmd->base.duplex != 1U) 
        #line 7013 
        goto err_out_unlock;
      #line 7015 
      if (speed == 2500U && (bp->phy_flags & 8U) == 0U) 
                                                        #line 7017 
                                                        goto err_out_unlock;
    }
    else 
      #line 7018 
      if (speed == 1000U || speed == 2500U) 
                                            #line 7019 
                                            goto err_out_unlock;
    #line 7021 
    autoneg = (unsigned char)((unsigned int)autoneg & 254U);
    #line 7022 
    req_line_speed = (unsigned short)speed;
    #line 7023 
    req_duplex = cmd->base.duplex;
    #line 7024 
    advertising = 0U;
  }
  #line 7027 
  bp->autoneg = autoneg;
  #line 7028 
  bp->advertising = advertising;
  #line 7029 
  bp->req_line_speed = req_line_speed;
  #line 7030 
  bp->req_duplex = req_duplex;
  #line 7032 
  err = 0;
  #line 7036 
  if ((int)netif_running(dev) != 0) 
                                    #line 7037 
                                    err = bnx2_setup_phy(bp,(unsigned char)((int)cmd->base.port));
  #line 7039 
  err_out_unlock: 
                  #line 7039 
  ;
  #line 7040 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 7042 
  return err;
}

#line 7046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 7048 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7050 
  strlcpy((char *)(& info->driver),(char *)"bnx2",32UL);
  #line 7051 
  strlcpy((char *)(& info->version),(char *)"2.2.6",32UL);
  #line 7052 
  ;
  #line 7052 
  strlcpy((char *)(& info->bus_info),pci_name(bp->pdev),32UL);
  #line 7053 
  strlcpy((char *)(& info->fw_version),(char *)(& bp->fw_version),32UL);
  #line 7054 
  return;
}

#line 7059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_get_regs_len(struct net_device *dev)
{
  #line 7061 
  return 32768;
}

#line 7065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *_p)
{
  #line 7067 
  u32 i;
  #line 7067 
  u32 offset;
  #line 7067 
  u32 *p = (u32 *)_p;
  #line 7068 
  u8 *orig_p = (u8 *)_p;
  #line 7069 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7070 
  u32 reg_boundaries[87U] = {0U, 152U, 1024U, 1116U, 2048U, 2176U, 3072U, 3088U, 3120U, 3336U, 4096U, 4124U, 4160U, 4168U, 4224U, 4260U, 5120U, 5264U, 5272U, 5360U, 5376U, 5468U, 5504U, 5596U, 5632U, 5720U, 5760U, 5848U, 6144U, 6176U, 6208U, 6228U, 6272U, 6292U, 6400U, 6532U, 7168U, 7180U, 7232U, 7252U, 7296U, 7316U, 7424U, 7556U, 8192U, 8240U, 9152U, 9216U, 10240U, 10272U, 10288U, 10320U, 11072U, 11280U, 12224U, 12376U, 15360U, 15508U, 16384U, 16400U, 16512U, 16528U, 17344U, 17496U, 19456U, 19480U, 19520U, 19540U, 20416U, 20496U, 21440U, 21572U, 23552U, 23576U, 23680U, 23696U, 24512U, 24576U, 25600U, 25640U, 26624U, 26696U, 26700U, 26720U, 26760U, 26896U, 32768U};
  #line 7095 
  regs->version = 0U;
  #line 7097 
  memset((void *)p,0,32768UL);
  #line 7099 
  if (! netif_running(bp->dev)) 
                                #line 7100 
                                return;
  #line 7102 
  i = 0U;
  #line 7103 
  offset = reg_boundaries[0];
  #line 7104 
  p += (unsigned long)offset;
  #line 7105 
  while (offset <= 32767U) {
    #line 7106 
    u32 *tmp_1;
    #line 7106 
    tmp_1 = p;
    #line 7106 
    p ++;
    #line 7106 
    *tmp_1 = readl(bp->regview + (unsigned long)offset);
    #line 7107 
    offset += 4U;
    #line 7108 
    if (reg_boundaries[i + 1U] == offset) {
      #line 7109 
      offset = reg_boundaries[i + 2U];
      #line 7110 
      p = (u32 *)(orig_p + (unsigned long)offset);
      #line 7111 
      i += 2U;
    }
  }
  #line 7114 
  return;
}

#line 7117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 7119 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7121 
  if ((bp->flags & 8U) != 0U) {
    #line 7122 
    wol->supported = 0U;
    #line 7123 
    wol->wolopts = 0U;
  }
  else {
    #line 7126 
    wol->supported = 32U;
    #line 7127 
    if ((unsigned int)bp->wol != 0U) 
                                     #line 7128 
                                     wol->wolopts = 32U; else 
                                                              #line 7130 
                                                              wol->wolopts = 0U;
  }
  #line 7132 
  memset((void *)(& wol->sopass),0,6UL);
  #line 7133 
  return;
}

#line 7136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 7138 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7140 
  if ((wol->wolopts & 4294967263U) != 0U) 
                                          #line 7141 
                                          return -22;
  #line 7143 
  if ((wol->wolopts & 32U) != 0U) {
    #line 7144 
    if ((bp->flags & 8U) != 0U) 
                                #line 7145 
                                return -22;
    #line 7147 
    bp->wol = (unsigned char)1U;
  }
  else 
       #line 7150 
       bp->wol = (unsigned char)0U;
  #line 7153 
  device_set_wakeup_enable(& (bp->pdev)->dev,(_Bool)((unsigned int)bp->wol != 0U));
  #line 7155 
  return 0;
}

#line 7159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_nway_reset(struct net_device *dev)
{
  #line 7162 
  u32 bmcr;
  #line 7161 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7164 
  if (! netif_running(dev)) 
                            #line 7165 
                            return -11;
  #line 7167 
  if (((int)bp->autoneg & 1) == 0) 
                                   #line 7168 
                                   return -22;
  #line 7171 
  cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 7173 
  if ((bp->phy_flags & 2048U) != 0U) {
    #line 7174 
    int rc;
    #line 7176 
    rc = bnx2_setup_remote_phy(bp,(unsigned char)((int)bp->phy_port));
    #line 7177 
    cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
    #line 7178 
    return rc;
  }
  #line 7182 
  if ((bp->phy_flags & 1U) != 0U) {
    #line 7183 
    bnx2_write_phy(bp,bp->mii_bmcr,16384U);
    #line 7184 
    cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
    #line 7186 
    msleep(20U);
    #line 7188 
    cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
    #line 7190 
    bp->current_interval = 83U;
    #line 7191 
    bp->serdes_an_pending = (unsigned char)1U;
    #line 7192 
    cif_mod_timer(& bp->timer,(unsigned long)bp->current_interval + jiffies);
  }
  #line 7195 
  bnx2_read_phy(bp,bp->mii_bmcr,& bmcr);
  #line 7196 
  bmcr &= 4294950911U;
  #line 7197 
  bnx2_write_phy(bp,bp->mii_bmcr,bmcr | 4608U);
  #line 7199 
  cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  #line 7201 
  return 0;
}

#line 7205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static u32 bnx2_get_link(struct net_device *dev)
{
  #line 7207 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7209 
  return (unsigned int)bp->link_up;
}

#line 7213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_get_eeprom_len(struct net_device *dev)
{
  #line 7215 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7217 
  if (bp->flash_info == (struct flash_spec *)0) 
                                                #line 7218 
                                                return 0;
  #line 7220 
  return (int)bp->flash_size;
}

#line 7224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *eebuf)
{
  #line 7228 
  int rc;
  #line 7227 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7232 
  rc = bnx2_nvram_read(bp,eeprom->offset,eebuf,(int)eeprom->len);
  #line 7234 
  return rc;
}

#line 7238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *eebuf)
{
  #line 7242 
  int rc;
  #line 7241 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7246 
  rc = bnx2_nvram_write(bp,eeprom->offset,eebuf,(int)eeprom->len);
  #line 7248 
  return rc;
}

#line 7252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_get_coalesce(struct net_device *dev, struct ethtool_coalesce *coal)
{
  #line 7254 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7256 
  memset((void *)coal,0,92UL);
  #line 7258 
  coal->rx_coalesce_usecs = (unsigned int)bp->rx_ticks;
  #line 7259 
  coal->rx_max_coalesced_frames = (unsigned int)bp->rx_quick_cons_trip;
  #line 7260 
  coal->rx_coalesce_usecs_irq = (unsigned int)bp->rx_ticks_int;
  #line 7261 
  coal->rx_max_coalesced_frames_irq = (unsigned int)bp->rx_quick_cons_trip_int;
  #line 7263 
  coal->tx_coalesce_usecs = (unsigned int)bp->tx_ticks;
  #line 7264 
  coal->tx_max_coalesced_frames = (unsigned int)bp->tx_quick_cons_trip;
  #line 7265 
  coal->tx_coalesce_usecs_irq = (unsigned int)bp->tx_ticks_int;
  #line 7266 
  coal->tx_max_coalesced_frames_irq = (unsigned int)bp->tx_quick_cons_trip_int;
  #line 7268 
  coal->stats_block_coalesce_usecs = bp->stats_ticks;
  #line 7270 
  return 0;
}

#line 7274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_coalesce(struct net_device *dev, struct ethtool_coalesce *coal)
{
  #line 7276 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7278 
  bp->rx_ticks = (unsigned short)coal->rx_coalesce_usecs;
  #line 7279 
  if ((unsigned int)bp->rx_ticks > 1023U) 
                                          #line 7279 
                                          bp->rx_ticks = (unsigned short)1023U;
  #line 7281 
  bp->rx_quick_cons_trip = (unsigned short)coal->rx_max_coalesced_frames;
  #line 7282 
  if ((unsigned int)bp->rx_quick_cons_trip > 255U) 
                                                   #line 7282 
                                                   bp->rx_quick_cons_trip = (unsigned short)255U;
  #line 7284 
  bp->rx_ticks_int = (unsigned short)coal->rx_coalesce_usecs_irq;
  #line 7285 
  if ((unsigned int)bp->rx_ticks_int > 1023U) 
                                              #line 7285 
                                              bp->rx_ticks_int = (unsigned short)1023U;
  #line 7287 
  bp->rx_quick_cons_trip_int = (unsigned short)coal->rx_max_coalesced_frames_irq;
  #line 7288 
  if ((unsigned int)bp->rx_quick_cons_trip_int > 255U) 
                                                       #line 7289 
                                                       bp->rx_quick_cons_trip_int = (unsigned short)255U;
  #line 7291 
  bp->tx_ticks = (unsigned short)coal->tx_coalesce_usecs;
  #line 7292 
  if ((unsigned int)bp->tx_ticks > 1023U) 
                                          #line 7292 
                                          bp->tx_ticks = (unsigned short)1023U;
  #line 7294 
  bp->tx_quick_cons_trip = (unsigned short)coal->tx_max_coalesced_frames;
  #line 7295 
  if ((unsigned int)bp->tx_quick_cons_trip > 255U) 
                                                   #line 7295 
                                                   bp->tx_quick_cons_trip = (unsigned short)255U;
  #line 7297 
  bp->tx_ticks_int = (unsigned short)coal->tx_coalesce_usecs_irq;
  #line 7298 
  if ((unsigned int)bp->tx_ticks_int > 1023U) 
                                              #line 7298 
                                              bp->tx_ticks_int = (unsigned short)1023U;
  #line 7300 
  bp->tx_quick_cons_trip_int = (unsigned short)coal->tx_max_coalesced_frames_irq;
  #line 7301 
  if ((unsigned int)bp->tx_quick_cons_trip_int > 255U) 
                                                       #line 7301 
                                                       bp->tx_quick_cons_trip_int = (unsigned short)255U;
  #line 7304 
  bp->stats_ticks = coal->stats_block_coalesce_usecs;
  #line 7305 
  if ((bp->flags & 8192U) != 0U) 
    #line 7306 
    if (bp->stats_ticks != 0U && bp->stats_ticks != 1000000U) 
                                                              #line 7307 
                                                              bp->stats_ticks = 1000000U;
  #line 7309 
  if (bp->stats_ticks > 16776960U) 
                                   #line 7310 
                                   bp->stats_ticks = 16776960U;
  #line 7311 
  bp->stats_ticks &= 16776960U;
  #line 7313 
  if ((int)netif_running(bp->dev) != 0) {
    #line 7314 
    bnx2_netif_stop(bp,(_Bool)1);
    #line 7315 
    bnx2_init_nic(bp,0);
    #line 7316 
    bnx2_netif_start(bp,(_Bool)1);
  }
  #line 7319 
  return 0;
}

#line 7323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
{
  #line 7325 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7327 
  ering->rx_max_pending = 2040U;
  #line 7328 
  ering->rx_jumbo_max_pending = 8160U;
  #line 7330 
  ering->rx_pending = (unsigned int)bp->rx_ring_size;
  #line 7331 
  ering->rx_jumbo_pending = (unsigned int)bp->rx_pg_ring_size;
  #line 7333 
  ering->tx_max_pending = 255U;
  #line 7334 
  ering->tx_pending = (unsigned int)bp->tx_ring_size;
  #line 7335 
  return;
}

#line 7338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_change_ring_size(struct bnx2 *bp, u32 rx, u32 tx, bool reset_irq)
{
  #line 7340 
  if ((int)netif_running(bp->dev) != 0) {
    #line 7342 
    bnx2_save_stats(bp);
    #line 7344 
    bnx2_netif_stop(bp,(_Bool)1);
    #line 7345 
    bnx2_reset_chip(bp,16777216U);
    #line 7346 
    if ((int)reset_irq != 0) {
      #line 7347 
      bnx2_free_irq(bp);
      #line 7348 
      bnx2_del_napi(bp);
    }
    else 
         #line 7350 
         __bnx2_free_irq(bp);
    #line 7352 
    bnx2_free_skbs(bp);
    #line 7353 
    bnx2_free_mem(bp);
  }
  #line 7356 
  bnx2_set_rx_ring_size(bp,rx);
  #line 7357 
  bp->tx_ring_size = (int)tx;
  #line 7359 
  if ((int)netif_running(bp->dev) != 0) {
    #line 7360 
    int rc = 0;
    #line 7362 
    if ((int)reset_irq != 0) {
      #line 7363 
      rc = bnx2_setup_int_mode(bp,disable_msi);
      #line 7364 
      bnx2_init_napi(bp);
    }
    #line 7367 
    if (rc == 0) 
                 #line 7368 
                 rc = bnx2_alloc_mem(bp);
    #line 7370 
    if (rc == 0) 
                 #line 7371 
                 rc = bnx2_request_irq(bp);
    #line 7373 
    if (rc == 0) 
                 #line 7374 
                 rc = bnx2_init_nic(bp,0);
    #line 7376 
    if (rc != 0) {
      #line 7377 
      bnx2_napi_enable(bp);
      #line 7378 
      dev_close(bp->dev);
      #line 7379 
      return rc;
    }
    #line 7382 
    cif_mutex_lock_cnic_lock_of_bnx2(& bp->cnic_lock);
    #line 7384 
    if ((bp->cnic_eth_dev.drv_state & 1U) != 0U) 
                                                 #line 7385 
                                                 bnx2_setup_cnic_irq_info(bp);
    #line 7386 
    cif_mutex_unlock_cnic_lock_of_bnx2(& bp->cnic_lock);
    #line 7388 
    bnx2_netif_start(bp,(_Bool)1);
  }
  #line 7390 
  return 0;
}

#line 7394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
{
  #line 7397 
  int rc;
  #line 7396 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7399 
  if ((ering->rx_pending > 2040U || ering->tx_pending > 255U) || ering->tx_pending <= 17U) 
    #line 7403 
    return -22;
  #line 7405 
  rc = bnx2_change_ring_size(bp,ering->rx_pending,ering->tx_pending,(_Bool)0);
  #line 7407 
  return rc;
}

#line 7411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  #line 7413 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7415 
  epause->autoneg = (unsigned int)(((int)bp->autoneg & 2) != 0);
  #line 7416 
  epause->rx_pause = (unsigned int)(((int)bp->flow_ctrl & 2) != 0);
  #line 7417 
  epause->tx_pause = (unsigned int)(((int)bp->flow_ctrl & 1) != 0);
  #line 7418 
  return;
}

#line 7421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  #line 7423 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7425 
  bp->req_flow_ctrl = (unsigned char)0U;
  #line 7426 
  if (epause->rx_pause != 0U) 
                              #line 7427 
                              bp->req_flow_ctrl = (unsigned char)((unsigned int)bp->req_flow_ctrl | 2U);
  #line 7428 
  if (epause->tx_pause != 0U) 
                              #line 7429 
                              bp->req_flow_ctrl = (unsigned char)((unsigned int)bp->req_flow_ctrl | 1U);
  #line 7431 
  if (epause->autoneg != 0U) 
                             #line 7432 
                             bp->autoneg = (unsigned char)((unsigned int)bp->autoneg | 2U); else 
                                                                    #line 7435 
                                                                    bp->autoneg = (unsigned char)((unsigned int)bp->autoneg & 253U);
  #line 7438 
  if ((int)netif_running(dev) != 0) {
    #line 7439 
    cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
    #line 7440 
    bnx2_setup_phy(bp,(unsigned char)((int)bp->phy_port));
    #line 7441 
    cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
  }
  #line 7444 
  return 0;
}

#line 7449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct __anonstruct_bnx2_stats_str_arr_1075 bnx2_stats_str_arr[47U] = {{.string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'s', (char)'s', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'2', (char)'2', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'2', (char)'3', (char)'_', (char)'t', (char)'o', (char)'_', (char)'9', (char)'0', (char)'2', (char)'2', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'2', (char)'2', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'2', (char)'3', (char)'_', (char)'t', (char)'o', (char)'_', (char)'9', (char)'0', (char)'2', (char)'2', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'x', (char)'o', (char)'n', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'x', (char)'o', (char)'n', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'e', (char)'d', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'t', (char)'q', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'w', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}}};
#line 7503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static unsigned long bnx2_stats_offset_arr[47U] = {[1] = 2UL, 4UL, 6UL, 8UL, 10UL, 12UL, 14UL, 16UL, 18UL, 20UL, 21UL, 22UL, 23UL, 24UL, 25UL, 26UL, 27UL, 28UL, 29UL, 30UL, 31UL, 32UL, 33UL, 34UL, 35UL, 36UL, 37UL, 38UL, 39UL, 40UL, 41UL, 42UL, 43UL, 44UL, 45UL, 46UL, 47UL, 48UL, 49UL, 50UL, 51UL, 53UL, 55UL, 57UL, 58UL, 80UL};
#line 7556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static u8 bnx2_5706_stats_len_arr[47U] = {(unsigned char)8U, [2] = (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)4U, [12] = (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U};
#line 7564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static u8 bnx2_5708_stats_len_arr[47U] = {(unsigned char)8U, [2] = (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U};
#line 7576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct __anonstruct_bnx2_tests_str_arr_1076 bnx2_tests_str_arr[6U] = {{.string = {(char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'m', (char)'e', (char)'m', (char)'o', (char)'r', (char)'y', (char)'_', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'l', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)'_', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'n', (char)'v', (char)'r', (char)'a', (char)'m', (char)'_', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)'_', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}};
#line 7586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_get_sset_count(struct net_device *dev, int sset)
{
  #line 7588 
  switch (sset) {
    #line 7589 
    case 0: 
            #line 7589 
    ;
    #line 7590 
    return 6;
    #line 7591 
    case 1: 
            #line 7591 
    ;
    #line 7592 
    return 47;
    #line 7593 
    default: 
             #line 7593 
    ;
    #line 7594 
    return -95;
  }
}

#line 7599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_self_test(struct net_device *dev, struct ethtool_test *etest, u64 *buf)
{
  #line 7601 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7603 
  memset((void *)buf,0,48UL);
  #line 7604 
  if ((etest->flags & 1U) != 0U) {
    #line 7605 
    int i;
    #line 7607 
    bnx2_netif_stop(bp,(_Bool)1);
    #line 7608 
    bnx2_reset_chip(bp,117440512U);
    #line 7609 
    bnx2_free_skbs(bp);
    #line 7611 
    if (bnx2_test_registers(bp) != 0) {
      #line 7612 
      *buf = 1ULL;
      #line 7613 
      etest->flags |= 2U;
    }
    #line 7615 
    if (bnx2_test_memory(bp) != 0) {
      #line 7616 
      *(buf + 1U) = 1ULL;
      #line 7617 
      etest->flags |= 2U;
    }
    #line 7619 
    *(buf + 2U) = ((unsigned long long)bnx2_test_loopback(bp));
    #line 7619 
    if (((unsigned long long)bnx2_test_loopback(bp)) != 0ULL) 
                                                              #line 7620 
                                                              etest->flags |= 2U;
    #line 7622 
    if (netif_running(bp->dev)) {
      #line 7625 
      bnx2_init_nic(bp,1);
      #line 7626 
      bnx2_netif_start(bp,(_Bool)1);
    }
    else 
         #line 7623 
         bnx2_shutdown_chip(bp);
    #line 7630 
    i = 0;
    #line 7630 
    while (i <= 6) {
      #line 7631 
      if ((unsigned int)bp->link_up != 0U) 
                                           #line 7632 
                                           break;
      #line 7633 
      msleep_interruptible(1000U);
      #line 7630 
      i ++;
    }
  }
  #line 7637 
  if (bnx2_test_nvram(bp) != 0) {
    #line 7638 
    *(buf + 3U) = 1ULL;
    #line 7639 
    etest->flags |= 2U;
  }
  #line 7641 
  if (bnx2_test_intr(bp) != 0) {
    #line 7642 
    *(buf + 4U) = 1ULL;
    #line 7643 
    etest->flags |= 2U;
  }
  #line 7646 
  if (bnx2_test_link(bp) != 0) {
    #line 7647 
    *(buf + 5U) = 1ULL;
    #line 7648 
    etest->flags |= 2U;
  }
  #line 7650 
  return;
}

#line 7654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_strings(struct net_device *dev, u32 stringset, u8 *buf)
{
  #line 7656 
  switch (stringset) {
    #line 7657 
    case (u32)1: 
                 #line 7657 
    ;
    #line 7658 
    memcpy((void *)buf,(void *)(& bnx2_stats_str_arr),1504UL);
    #line 7660 
    break;
    #line 7661 
    case (u32)0: 
                 #line 7661 
    ;
    #line 7662 
    memcpy((void *)buf,(void *)(& bnx2_tests_str_arr),192UL);
    #line 7664 
    break;
  }
  #line 7666 
  return;
}

#line 7669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *buf)
{
  #line 7673 
  int i;
  #line 7672 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7674 
  u32 *hw_stats = (u32 *)bp->stats_blk;
  #line 7675 
  u32 *temp_stats = (u32 *)bp->temp_stats_blk;
  #line 7676 
  u8 *stats_len_arr = (u8 *)0U;
  #line 7678 
  if (hw_stats == (u32 *)0U) {
    #line 7679 
    memset((void *)buf,0,376UL);
    #line 7680 
    return;
  }
  #line 7683 
  if ((((bp->chip_id & 4294967280U) == 1460011008U || (bp->chip_id & 4294967280U) == 1460011024U) || (bp->chip_id & 4294967280U) == 1460011040U) || (bp->chip_id & 4294967280U) == 1460142080U) 
    #line 7687 
    stats_len_arr = (u8 *)(& bnx2_5706_stats_len_arr); else 
                                                            #line 7689 
                                                            stats_len_arr = (u8 *)(& bnx2_5708_stats_len_arr);
  #line 7691 
  i = 0;
  #line 7691 
  while ((unsigned int)i <= 46U) {
    {
      #line 7692 
      unsigned long offset;
      #line 7694 
      if ((unsigned int)*(stats_len_arr + (unsigned long)i) == 0U) {
        #line 7696 
        *(buf + (unsigned long)i) = 0ULL;
        #line 7697 
        goto __Cont;
      }
      #line 7700 
      offset = bnx2_stats_offset_arr[i];
      #line 7701 
      if ((unsigned int)*(stats_len_arr + (unsigned long)i) == 4U) {
        #line 7703 
        *(buf + (unsigned long)i) = (unsigned long long)*(hw_stats + offset) + (unsigned long long)*(temp_stats + offset);
        #line 7705 
        goto __Cont;
      }
      #line 7708 
      *(buf + (unsigned long)i) = ((((unsigned long long)*(hw_stats + offset) << 32) + (unsigned long long)*(hw_stats + (offset + (unsigned long)1U))) + ((unsigned long long)*(temp_stats + offset) << 32)) + (unsigned long long)*(temp_stats + (offset + (unsigned long)1U));
    }
    #line 7691 
    __Cont: 
            #line 7691 
    i ++;
  }
  #line 7713 
  return;
}

#line 7716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 7718 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7720 
  switch ((unsigned int)state) {
    #line 7721 
    case (unsigned int)1: 
                          #line 7721 
    ;
    #line 7722 
    bp->leds_save = readl(bp->regview + 2052U);
    #line 7723 
    writel(0U,bp->regview + 2052U);
    #line 7724 
    return 1;
    #line 7726 
    case (unsigned int)2: 
                          #line 7726 
    ;
    #line 7727 
    writel(95U,bp->regview + 5132U);
    #line 7733 
    break;
    #line 7735 
    case (unsigned int)3: 
                          #line 7735 
    ;
    #line 7736 
    writel(1U,bp->regview + 5132U);
    #line 7737 
    break;
    #line 7739 
    case (unsigned int)0: 
                          #line 7739 
    ;
    #line 7740 
    writel(0U,bp->regview + 5132U);
    #line 7741 
    writel(bp->leds_save,bp->regview + 2052U);
    #line 7742 
    break;
  }
  #line 7745 
  return 0;
}

#line 7749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 7751 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7754 
  if ((features & 128ULL) != 0ULL) 
                                   #line 7755 
                                   dev->vlan_features |= dev->hw_features & 1900544ULL; else 
                                                                    #line 7757 
                                                                    dev->vlan_features &= 18446744073707651071ULL;
  #line 7759 
  if (((features & 256ULL) != 0ULL) ^ (((long)bp->rx_mode & 1024L) != 0L)) {
    #line 7760 
    if ((int)netif_running(dev) != 0) {
      #line 7762 
      bnx2_netif_stop(bp,(_Bool)0);
      #line 7763 
      dev->features = features;
      #line 7764 
      bnx2_set_rx_mode(dev);
      #line 7765 
      bnx2_fw_sync(bp,218103808U,0,1);
      #line 7766 
      bnx2_netif_start(bp,(_Bool)0);
      #line 7767 
      return 1;
    }
  }
  #line 7770 
  return 0;
}

#line 7773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_channels(struct net_device *dev, struct ethtool_channels *channels)
{
  #line 7776 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7777 
  u32 max_rx_rings = 1U;
  #line 7778 
  u32 max_tx_rings = 1U;
  #line 7780 
  if ((bp->flags & 4U) != 0U && disable_msi == 0) {
    #line 7781 
    max_rx_rings = 8U;
    #line 7782 
    max_tx_rings = 8U;
  }
  #line 7785 
  channels->max_rx = max_rx_rings;
  #line 7786 
  channels->max_tx = max_tx_rings;
  #line 7787 
  channels->max_other = 0U;
  #line 7788 
  channels->max_combined = 0U;
  #line 7789 
  channels->rx_count = (unsigned int)bp->num_rx_rings;
  #line 7790 
  channels->tx_count = (unsigned int)bp->num_tx_rings;
  #line 7791 
  channels->other_count = 0U;
  #line 7792 
  channels->combined_count = 0U;
  #line 7793 
  return;
}

#line 7795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_set_channels(struct net_device *dev, struct ethtool_channels *channels)
{
  #line 7798 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7799 
  u32 max_rx_rings = 1U;
  #line 7800 
  u32 max_tx_rings = 1U;
  #line 7801 
  int rc = 0;
  #line 7803 
  if ((bp->flags & 4U) != 0U && disable_msi == 0) {
    #line 7804 
    max_rx_rings = 8U;
    #line 7805 
    max_tx_rings = 8U;
  }
  #line 7807 
  if (channels->rx_count > max_rx_rings || channels->tx_count > max_tx_rings) 
    #line 7809 
    return -22;
  #line 7811 
  bp->num_req_rx_rings = (int)channels->rx_count;
  #line 7812 
  bp->num_req_tx_rings = (int)channels->tx_count;
  #line 7814 
  if ((int)netif_running(dev) != 0) 
                                    #line 7815 
                                    rc = bnx2_change_ring_size(bp,(unsigned int)bp->rx_ring_size,(unsigned int)bp->tx_ring_size,(_Bool)1);
  #line 7818 
  return rc;
}

#line 7821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct ethtool_ops bnx2_ethtool_ops = {.get_drvinfo = & bnx2_get_drvinfo, .get_regs_len = & bnx2_get_regs_len, .get_regs = & bnx2_get_regs, .get_wol = & bnx2_get_wol, .set_wol = & bnx2_set_wol, .nway_reset = & bnx2_nway_reset, .get_link = & bnx2_get_link, .get_eeprom_len = & bnx2_get_eeprom_len, .get_eeprom = & bnx2_get_eeprom, .set_eeprom = & bnx2_set_eeprom, .get_coalesce = & bnx2_get_coalesce, .set_coalesce = & bnx2_set_coalesce, .get_ringparam = & bnx2_get_ringparam, .set_ringparam = & bnx2_set_ringparam, .get_pauseparam = & bnx2_get_pauseparam, .set_pauseparam = & bnx2_set_pauseparam, .self_test = & bnx2_self_test, .get_strings = & bnx2_get_strings, .set_phys_id = & bnx2_set_phys_id, .get_ethtool_stats = & bnx2_get_ethtool_stats, .get_sset_count = & bnx2_get_sset_count, .get_channels = & bnx2_get_channels, .set_channels = & bnx2_set_channels, .get_link_ksettings = & bnx2_get_link_ksettings, .set_link_ksettings = & bnx2_set_link_ksettings};
#line 7851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 7855 
  int err;
  #line 7853 
  struct mii_ioctl_data *data = if_mii(ifr);
  #line 7854 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7857 
  switch (cmd) {
    #line 7858 
    case 35143: 
                #line 7858 
    ;
    #line 7859 
    data->phy_id = (unsigned short)bp->phy_addr;
    #line 7862 
    case 35144: 
                #line 7862 
    ;
    {
      #line 7863 
      u32 mii_regval;
      #line 7865 
      if ((bp->phy_flags & 2048U) != 0U) 
                                         #line 7866 
                                         return -95;
      #line 7868 
      if (! netif_running(dev)) 
                                #line 7869 
                                return -11;
      #line 7871 
      cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
      #line 7872 
      err = bnx2_read_phy(bp,(unsigned int)data->reg_num & 31U,& mii_regval);
      #line 7873 
      cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
      #line 7875 
      data->val_out = (unsigned short)mii_regval;
      #line 7877 
      return err;
    }
    #line 7880 
    case 35145: 
                #line 7880 
    ;
    #line 7881 
    if ((bp->phy_flags & 2048U) != 0U) 
                                       #line 7882 
                                       return -95;
    #line 7884 
    if (! netif_running(dev)) 
                              #line 7885 
                              return -11;
    #line 7887 
    cif_spin_lock_bh_phy_lock_of_bnx2(& bp->phy_lock);
    #line 7888 
    err = bnx2_write_phy(bp,(unsigned int)data->reg_num & 31U,(unsigned int)data->val_in);
    #line 7889 
    cif_spin_unlock_bh_phy_lock_of_bnx2(& bp->phy_lock);
    #line 7891 
    return err;
    #line 7893 
    default: 
             #line 7893 
    ;
    #line 7895 
    break;
  }
  #line 7897 
  return -95;
}

#line 7902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_change_mac_addr(struct net_device *dev, void *p)
{
  #line 7904 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 7905 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7907 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 7908 
                                                      return -99;
  #line 7910 
  memcpy((void *)dev->dev_addr,(void *)(& addr->sa_data),(unsigned long)dev->addr_len);
  #line 7911 
  if ((int)netif_running(dev) != 0) 
                                    #line 7912 
                                    bnx2_set_mac_addr(bp,(bp->dev)->dev_addr,0U);
  #line 7914 
  return 0;
}

#line 7919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 7921 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7923 
  dev->mtu = (unsigned int)new_mtu;
  #line 7924 
  return bnx2_change_ring_size(bp,(unsigned int)bp->rx_ring_size,
                              (unsigned int)bp->tx_ring_size,(_Bool)0);
}

#line 7930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void poll_bnx2(struct net_device *dev)
{
  #line 7933 
  int i;
  #line 7932 
  struct bnx2 *bp = netdev_priv(dev);
  #line 7935 
  i = 0;
  #line 7935 
  while (bp->irq_nvecs > i) {
    {
      #line 7936 
      struct bnx2_irq *irq = & bp->irq_tbl[i];
      #line 7938 
      disable_irq(irq->vector);
      #line 7939 
      (*(irq->handler))((int)irq->vector,(void *)(& bp->bnx2_napi[i]));
      #line 7940 
      enable_irq(irq->vector);
    }
    #line 7935 
    i ++;
  }
  #line 7942 
  return;
}

#line 7946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_5709_media(struct bnx2 *bp)
{
  #line 7950 
  u32 strap;
  #line 7948 
  u32 val = readl(bp->regview + 2284U);
  #line 7949 
  u32 bond_id = val & 255U;
  #line 7952 
  if (bond_id == 3U) 
                     #line 7953 
                     return;
  else 
    #line 7954 
    if (bond_id == 12U) {
      #line 7955 
      bp->phy_flags |= 1U;
      #line 7956 
      return;
    }
  #line 7959 
  if (((long)val & 33554432L) != 0L) 
                                     #line 7960 
                                     strap = (unsigned int)((long)val >> 21) & 7U; else 
                                                                    #line 7962 
                                                                    strap = (unsigned int)((long)val >> 8) & 7U;
  #line 7964 
  if ((unsigned int)bp->func == 0U) 
    #line 7965 
    switch (strap) {
      #line 7966 
      case (u32)4: 
                   #line 7966 
      ;
      #line 7967 
      case (u32)5: 
                   #line 7967 
      ;
      #line 7968 
      case (u32)6: 
                   #line 7968 
      ;
      #line 7969 
      bp->phy_flags |= 1U;
      #line 7970 
      return;
    }
  else 
    #line 7973 
    switch (strap) {
      #line 7974 
      case (u32)1: 
                   #line 7974 
      ;
      #line 7975 
      case (u32)2: 
                   #line 7975 
      ;
      #line 7976 
      case (u32)4: 
                   #line 7976 
      ;
      #line 7977 
      bp->phy_flags |= 1U;
      #line 7978 
      return;
    }
  #line 7980 
  return;
}

#line 7984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_get_pci_speed(struct bnx2 *bp)
{
  #line 7986 
  u32 reg;
  #line 7988 
  reg = readl(bp->regview + 108U);
  #line 7989 
  if (((long)reg & 8L) != 0L) {
    #line 7990 
    u32 clkreg;
    #line 7992 
    bp->flags |= 1U;
    #line 7994 
    clkreg = readl(bp->regview + 112U);
    #line 7996 
    clkreg &= 15U;
    #line 7997 
    switch (clkreg) {
      #line 7998 
      case (u32)7: 
                   #line 7998 
      ;
      #line 7999 
      bp->bus_speed_mhz = (unsigned short)133U;
      #line 8000 
      break;
      #line 8002 
      case (u32)6: 
                   #line 8002 
      ;
      #line 8003 
      bp->bus_speed_mhz = (unsigned short)100U;
      #line 8004 
      break;
      #line 8006 
      case (u32)4: 
                   #line 8006 
      ;
      #line 8007 
      case (u32)5: 
                   #line 8007 
      ;
      #line 8008 
      bp->bus_speed_mhz = (unsigned short)66U;
      #line 8009 
      break;
      #line 8011 
      case (u32)2: 
                   #line 8011 
      ;
      #line 8012 
      case (u32)3: 
                   #line 8012 
      ;
      #line 8013 
      bp->bus_speed_mhz = (unsigned short)50U;
      #line 8014 
      break;
      #line 8016 
      case (u32)15: 
                    #line 8016 
      ;
      #line 8017 
      case (u32)0: 
                   #line 8017 
      ;
      #line 8018 
      case (u32)1: 
                   #line 8018 
      ;
      #line 8019 
      bp->bus_speed_mhz = (unsigned short)33U;
      #line 8020 
      break;
    }
  }
  else 
    #line 8024 
    if (((long)reg & 4L) != 0L) 
                                #line 8025 
                                bp->bus_speed_mhz = (unsigned short)66U; else 
                                                                    #line 8027 
                                                                    bp->bus_speed_mhz = (unsigned short)33U;
  #line 8030 
  if (((long)reg & 2L) != 0L) 
                              #line 8031 
                              bp->flags |= 2U;
  #line 8032 
  return;
}

#line 8036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_read_vpd_fw_ver(struct bnx2 *bp)
{
  #line 8038 
  int rc;
  #line 8038 
  int i;
  #line 8038 
  int j;
  #line 8039 
  u8 *data;
  #line 8040 
  unsigned int block_end;
  #line 8040 
  unsigned int rosize;
  #line 8040 
  unsigned int len;
  #line 8046 
  data = (u8 *)kmalloc(256UL,3264U);
  #line 8047 
  if (data == (u8 *)0U) 
                        #line 8048 
                        return;
  #line 8050 
  rc = bnx2_nvram_read(bp,768U,data + 128U,128);
  #line 8052 
  if (rc != 0) 
               #line 8053 
               goto vpd_done;
  #line 8055 
  i = 0;
  #line 8055 
  while (i <= 127) {
    #line 8056 
    *(data + (unsigned long)i) = *(data + ((unsigned long)(i + 128) + (unsigned long)3U));
    #line 8057 
    *(data + ((unsigned long)i + (unsigned long)1U)) = *(data + ((unsigned long)(i + 128) + (unsigned long)2U));
    #line 8058 
    *(data + ((unsigned long)i + (unsigned long)2U)) = *(data + ((unsigned long)(i + 128) + (unsigned long)1U));
    #line 8059 
    *(data + ((unsigned long)i + (unsigned long)3U)) = *(data + ((unsigned long)i + (unsigned long)128U));
    #line 8055 
    i += 4;
  }
  #line 8062 
  i = pci_vpd_find_tag(data,0U,128U,(unsigned char)144);
  #line 8063 
  if (i < 0) 
             #line 8064 
             goto vpd_done;
  #line 8066 
  rosize = (unsigned int)pci_vpd_lrdt_size(data + (unsigned long)i);
  #line 8067 
  i += 3;
  #line 8068 
  block_end = (unsigned int)i + rosize;
  #line 8070 
  if (block_end > 128U) 
                        #line 8071 
                        goto vpd_done;
  #line 8073 
  j = pci_vpd_find_info_keyword(data,(unsigned int)i,rosize,(char *)"MN");
  #line 8075 
  if (j < 0) 
             #line 8076 
             goto vpd_done;
  #line 8078 
  len = (unsigned int)pci_vpd_info_field_size(data + (unsigned long)j);
  #line 8080 
  j += 3;
  #line 8081 
  if ((unsigned int)j + len > block_end || len != 4U) 
                                                      #line 8081 
                                                      goto _LOR;
  else {
    #line 8081 
    if (memcmp((void *)(data + (unsigned long)j),(void *)"1028",4UL) != 0) 
      #line 8081 
      _LOR: 
            #line 8083 
            goto vpd_done;
  }
  #line 8085 
  j = pci_vpd_find_info_keyword(data,(unsigned int)i,rosize,(char *)"V0");
  #line 8087 
  if (j < 0) 
             #line 8088 
             goto vpd_done;
  #line 8090 
  len = (unsigned int)pci_vpd_info_field_size(data + (unsigned long)j);
  #line 8092 
  j += 3;
  #line 8093 
  if ((unsigned int)j + len > block_end || len > 30U) 
                                                      #line 8094 
                                                      goto vpd_done;
  #line 8096 
  memcpy((void *)(& bp->fw_version),(void *)(data + (unsigned long)j),(unsigned long)len);
  #line 8097 
  bp->fw_version[len] = (char)32;
  #line 8099 
  vpd_done: 
            #line 8099 
  ;
  #line 8100 
  kfree((void *)data);
  #line 8101 
  return;
}

#line 8104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_board(struct pci_dev *pdev, struct net_device *dev)
{
  #line 8106 
  struct bnx2 *bp;
  #line 8107 
  int rc;
  #line 8107 
  int i;
  #line 8107 
  int j;
  #line 8108 
  u32 reg;
  #line 8109 
  u64 dma_mask;
  #line 8109 
  u64 persist_dma_mask;
  #line 8110 
  int err;
  #line 8112 
  dev->dev.parent = & pdev->dev;
  #line 8113 
  bp = (struct bnx2 *)netdev_priv(dev);
  #line 8115 
  bp->flags = 0U;
  #line 8116 
  bp->phy_flags = 0U;
  #line 8119 
  bp->temp_stats_blk = (struct statistics_block *)kzalloc(324UL,3264U);
  #line 8121 
  if (bp->temp_stats_blk == (struct statistics_block *)0) {
    #line 8122 
    rc = -12;
    #line 8123 
    goto err_out;
  }
  #line 8127 
  rc = pci_enable_device(pdev);
  #line 8128 
  if (rc != 0) {
    #line 8129 
    _dev_err(& pdev->dev,(char *)"Cannot enable PCI device, aborting\n");
    #line 8130 
    goto err_out;
  }
  #line 8133 
  if ((pdev->resource[0].flags & 512UL) == 0UL) {
    #line 8134 
    _dev_err(& pdev->dev,(char *)"Cannot find PCI device base address, aborting\n");
    #line 8136 
    rc = -19;
    #line 8137 
    goto err_out_disable;
  }
  #line 8140 
  rc = pci_request_regions(pdev,(char *)"bnx2");
  #line 8141 
  if (rc != 0) {
    #line 8142 
    _dev_err(& pdev->dev,(char *)"Cannot obtain PCI resources, aborting\n");
    #line 8143 
    goto err_out_disable;
  }
  #line 8146 
  pci_set_master(pdev);
  #line 8148 
  bp->pm_cap = (int)pdev->pm_cap;
  #line 8149 
  if (bp->pm_cap == 0) {
    #line 8150 
    _dev_err(& pdev->dev,(char *)"Cannot find power management capability, aborting\n");
    #line 8152 
    rc = -5;
    #line 8153 
    goto err_out_release;
  }
  #line 8156 
  bp->dev = dev;
  #line 8157 
  bp->pdev = pdev;
  #line 8159 
  spinlock_check(& bp->phy_lock);
  {
    #line 8159 
    struct lock_class_key __key;
    #line 8159 
    __raw_spin_lock_init(& bp->phy_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&bp->phy_lock)->rlock",& __key);
  }
  #line 8160 
  spinlock_check(& bp->indirect_lock);
  {
    #line 8160 
    struct lock_class_key __key_0;
    #line 8160 
    __raw_spin_lock_init(& bp->indirect_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&bp->indirect_lock)->rlock",& __key_0);
  }
  {
    #line 8162 
    struct lock_class_key __key_1;
    #line 8162 
    __mutex_init(& bp->cnic_lock,(char *)"&bp->cnic_lock",& __key_1);
  }
  {
    #line 8164 
    struct lock_class_key __key_2;
    #line 8164 
    __init_work(& bp->reset_task,0);
    #line 8164 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 8164 
    bp->reset_task.data = __constr_expr_44;
    #line 8164 
    lockdep_init_map(& bp->reset_task.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 8164 
    INIT_LIST_HEAD(& bp->reset_task.entry);
    #line 8164 
    bp->reset_task.func = & bnx2_reset_task;
  }
  #line 8166 
  bp->regview = pci_iomap(pdev,0,75776UL);
  #line 8168 
  if (bp->regview == (void *)0) {
    #line 8169 
    _dev_err(& pdev->dev,(char *)"Cannot map register space, aborting\n");
    #line 8170 
    rc = -12;
    #line 8171 
    goto err_out_release;
  }
  #line 8178 
  writel(136U,bp->regview + 104U);
  #line 8182 
  bp->chip_id = readl(bp->regview + 2056U);
  #line 8184 
  if ((bp->chip_id & 4294901760U) == 1460207616U) {
    #line 8185 
    if (! pci_is_pcie(pdev)) {
      #line 8186 
      _dev_err(& pdev->dev,(char *)"Not PCIE, aborting\n");
      #line 8187 
      rc = -5;
      #line 8188 
      goto err_out_unmap;
    }
    #line 8190 
    bp->flags |= 512U;
    #line 8191 
    if ((bp->chip_id & 61440U) == 0U) 
                                      #line 8192 
                                      bp->flags |= 2048U;
    #line 8195 
    err = pci_enable_pcie_error_reporting(pdev);
    #line 8196 
    if (err == 0) 
                  #line 8197 
                  bp->flags |= 16384U;
  }
  else {
    #line 8200 
    bp->pcix_cap = pci_find_capability(pdev,7);
    #line 8201 
    if (bp->pcix_cap == 0) {
      #line 8202 
      _dev_err(& pdev->dev,(char *)"Cannot find PCIX capability, aborting\n");
      #line 8204 
      rc = -5;
      #line 8205 
      goto err_out_unmap;
    }
    #line 8207 
    bp->flags |= 8192U;
  }
  #line 8210 
  if ((bp->chip_id & 4294901760U) == 1460207616U && (bp->chip_id & 61440U) != 0U) 
    #line 8212 
    if ((unsigned int)pdev->msix_cap != 0U) 
                                            #line 8213 
                                            bp->flags |= 4U;
  #line 8216 
  if ((bp->chip_id & 4294967280U) != 1460011008U && (bp->chip_id & 4294967280U) != 1460011024U) 
    #line 8218 
    if ((unsigned int)pdev->msi_cap != 0U) 
                                           #line 8219 
                                           bp->flags |= 128U;
  #line 8223 
  if ((bp->chip_id & 4294901760U) == 1460142080U) {
    #line 8224 
    dma_mask = 1099511627775ULL;
    #line 8224 
    persist_dma_mask = dma_mask;
  }
  else {
    #line 8226 
    dma_mask = 18446744073709551615ULL;
    #line 8226 
    persist_dma_mask = dma_mask;
  }
  #line 8229 
  if (pci_set_dma_mask(pdev,dma_mask) == 0) {
    #line 8230 
    dev->features |= 32ULL;
    #line 8231 
    rc = pci_set_consistent_dma_mask(pdev,persist_dma_mask);
    #line 8232 
    if (rc != 0) {
      #line 8233 
      _dev_err(& pdev->dev,(char *)"pci_set_consistent_dma_mask failed, aborting\n");
      #line 8235 
      goto err_out_unmap;
    }
  }
  else {
    #line 8237 
    rc = pci_set_dma_mask(pdev,4294967295ULL);
    #line 8237 
    if (rc != 0) {
      #line 8238 
      _dev_err(& pdev->dev,(char *)"System does not support DMA, aborting\n");
      #line 8239 
      goto err_out_unmap;
    }
  }
  #line 8242 
  if ((bp->flags & 512U) == 0U) 
                                #line 8243 
                                bnx2_get_pci_speed(bp);
  #line 8246 
  if ((bp->chip_id & 4294967280U) == 1460011008U) {
    #line 8247 
    reg = readl(bp->regview + 4U);
    #line 8248 
    reg &= 4294966975U;
    #line 8249 
    writel(reg,bp->regview + 4U);
  }
  else 
    #line 8250 
    if ((bp->chip_id & 4294967280U) == 1460011024U && (bp->flags & 1U) == 0U) {
      #line 8253 
      _dev_err(& pdev->dev,(char *)"5706 A1 can only be used in a PCIX bus, aborting\n");
      #line 8255 
      goto err_out_unmap;
    }
  #line 8258 
  bnx2_init_nvram(bp);
  #line 8260 
  reg = bnx2_reg_rd_ind(bp,1441792U);
  #line 8262 
  if (((long)bnx2_reg_rd_ind(bp,1310880U) & 2147483648L) != 0L) 
                                                                #line 8263 
                                                                bp->func = (unsigned char)1U;
  #line 8265 
  if ((reg & 4294901760U) == 1397948416U) {
    #line 8267 
    u32 off = (unsigned int)((int)bp->func << 2);
    #line 8269 
    bp->shmem_base = bnx2_reg_rd_ind(bp,off + 1441796U);
  }
  else 
       #line 8271 
       bp->shmem_base = 1473536U;
  #line 8276 
  reg = bnx2_shmem_rd(bp,32U);
  #line 8278 
  if ((reg & 4294967040U) != 1146505472U) {
    #line 8280 
    _dev_err(& pdev->dev,(char *)"Firmware not running, aborting\n");
    #line 8281 
    rc = -19;
    #line 8282 
    goto err_out_unmap;
  }
  #line 8285 
  bnx2_read_vpd_fw_ver(bp);
  #line 8287 
  j = (int)cif_strlen((char *)(& bp->fw_version));
  #line 8288 
  reg = bnx2_shmem_rd(bp,76U);
  #line 8289 
  i = 0;
  #line 8289 
  while (i <= 2 && j <= 23) {
    {
      #line 8290 
      u8 num;
      #line 8290 
      u8 k;
      #line 8290 
      u8 skip0;
      #line 8292 
      if (i == 0) {
        #line 8293 
        int tmp_5;
        #line 8294 
        int tmp_6;
        #line 8295 
        int tmp_7;
        #line 8293 
        tmp_5 = j;
        #line 8293 
        j ++;
        #line 8293 
        bp->fw_version[tmp_5] = (char)98;
        #line 8294 
        tmp_6 = j;
        #line 8294 
        j ++;
        #line 8294 
        bp->fw_version[tmp_6] = (char)99;
        #line 8295 
        tmp_7 = j;
        #line 8295 
        j ++;
        #line 8295 
        bp->fw_version[tmp_7] = (char)32;
      }
      #line 8297 
      num = (unsigned char)(reg >> (3 - i) * 8);
      #line 8298 
      k = (unsigned char)100U;
      #line 8298 
      skip0 = (unsigned char)1U;
      #line 8298 
      while ((unsigned int)k != 0U) {
        #line 8299 
        if (((int)num >= (int)k || (unsigned int)skip0 == 0U) || (unsigned int)k == 1U) {
          #line 8300 
          int tmp_8;
          #line 8300 
          tmp_8 = j;
          #line 8300 
          j ++;
          #line 8300 
          bp->fw_version[tmp_8] = (char)((unsigned int)((int)num / (int)k) + 48U);
          #line 8301 
          skip0 = (unsigned char)0U;
        }
        #line 8298 
        num = (unsigned char)((int)num % (int)k);
        #line 8298 
        k = (unsigned char)((unsigned int)k / 10U);
      }
      #line 8304 
      if (i != 2) {
        #line 8305 
        int tmp_9;
        #line 8305 
        tmp_9 = j;
        #line 8305 
        j ++;
        #line 8305 
        bp->fw_version[tmp_9] = (char)46;
      }
    }
    #line 8289 
    i ++;
  }
  #line 8307 
  reg = bnx2_shmem_rd(bp,216U);
  #line 8308 
  if ((reg & 16777216U) != 0U) 
                               #line 8309 
                               bp->wol = (unsigned char)1U;
  #line 8311 
  if ((reg & 67108864U) != 0U) {
    #line 8312 
    bp->flags |= 64U;
    #line 8314 
    i = 0;
    #line 8314 
    while (i <= 29) {
      #line 8315 
      reg = bnx2_shmem_rd(bp,456U);
      #line 8316 
      if ((reg & 57344U) != 0U) 
                                #line 8317 
                                break;
      #line 8318 
      msleep(10U);
      #line 8314 
      i ++;
    }
  }
  #line 8321 
  reg = bnx2_shmem_rd(bp,456U);
  #line 8322 
  reg &= 57344U;
  #line 8323 
  if (reg != 0U && reg != 57344U) {
    #line 8325 
    u32 addr = bnx2_shmem_rd(bp,332U);
    #line 8327 
    if (j <= 31) {
      #line 8328 
      int tmp_11;
      #line 8328 
      tmp_11 = j;
      #line 8328 
      j ++;
      #line 8328 
      bp->fw_version[tmp_11] = (char)32;
    }
    #line 8329 
    i = 0;
    #line 8329 
    while (i <= 2 && j <= 27) {
      #line 8330 
      reg = bnx2_reg_rd_ind(bp,(unsigned int)(i * 4) + addr);
      #line 8331 
      reg = __builtin_bswap32(reg);
      #line 8332 
      memcpy((void *)(& bp->fw_version[j]),(void *)(& reg),4UL);
      #line 8333 
      j += 4;
      #line 8329 
      i ++;
    }
  }
  #line 8337 
  reg = bnx2_shmem_rd(bp,80U);
  #line 8338 
  bp->mac_addr[0] = (unsigned char)(reg >> 8);
  #line 8339 
  bp->mac_addr[1] = (unsigned char)reg;
  #line 8341 
  reg = bnx2_shmem_rd(bp,84U);
  #line 8342 
  bp->mac_addr[2] = (unsigned char)(reg >> 24);
  #line 8343 
  bp->mac_addr[3] = (unsigned char)(reg >> 16);
  #line 8344 
  bp->mac_addr[4] = (unsigned char)(reg >> 8);
  #line 8345 
  bp->mac_addr[5] = (unsigned char)reg;
  #line 8347 
  bp->tx_ring_size = 255;
  #line 8348 
  bnx2_set_rx_ring_size(bp,255U);
  #line 8350 
  bp->tx_quick_cons_trip_int = (unsigned short)2U;
  #line 8351 
  bp->tx_quick_cons_trip = (unsigned short)20U;
  #line 8352 
  bp->tx_ticks_int = (unsigned short)18U;
  #line 8353 
  bp->tx_ticks = (unsigned short)80U;
  #line 8355 
  bp->rx_quick_cons_trip_int = (unsigned short)2U;
  #line 8356 
  bp->rx_quick_cons_trip = (unsigned short)12U;
  #line 8357 
  bp->rx_ticks_int = (unsigned short)18U;
  #line 8358 
  bp->rx_ticks = (unsigned short)18U;
  #line 8360 
  bp->stats_ticks = 999936U;
  #line 8362 
  bp->current_interval = 250U;
  #line 8364 
  bp->phy_addr = 1U;
  #line 8367 
  rc = bnx2_alloc_stats_blk(dev);
  #line 8368 
  if (rc != 0) 
               #line 8369 
               goto err_out_unmap;
  #line 8372 
  if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                  #line 8373 
                                                  bnx2_get_5709_media(bp);
  else 
    #line 8374 
    if ((bp->chip_id & 1U) != 0U) 
                                  #line 8375 
                                  bp->phy_flags |= 1U;
  #line 8377 
  bp->phy_port = (unsigned char)0U;
  #line 8378 
  if ((bp->phy_flags & 1U) != 0U) {
    #line 8379 
    bp->phy_port = (unsigned char)3U;
    #line 8380 
    reg = bnx2_shmem_rd(bp,60U);
    #line 8381 
    if ((reg & 32768U) == 0U) {
      #line 8382 
      bp->flags |= 8U;
      #line 8383 
      bp->wol = (unsigned char)0U;
    }
    #line 8385 
    if ((bp->chip_id & 4294901760U) == 1460011008U) {
      #line 8390 
      if ((unsigned int)pdev->subsystem_vendor == 4156U && (unsigned int)pdev->subsystem_device == 12556U) 
        #line 8392 
        bp->phy_flags |= 8192U;
    }
    else {
      #line 8394 
      bp->phy_addr = 2U;
      #line 8395 
      if ((reg & 32U) != 0U) 
                             #line 8396 
                             bp->phy_flags |= 8U;
    }
  }
  else 
    #line 8398 
    if ((bp->chip_id & 4294901760U) == 1460011008U || (bp->chip_id & 4294901760U) == 1460142080U) 
      #line 8400 
      bp->phy_flags |= 2U;
    else 
      #line 8401 
      if ((bp->chip_id & 4294901760U) == 1460207616U && ((bp->chip_id & 61440U) == 0U || (bp->chip_id & 61440U) == 4096U)) 
        #line 8404 
        bp->phy_flags |= 1024U;
  #line 8406 
  bnx2_init_fw_cap(bp);
  #line 8408 
  if (((bp->chip_id & 4294967280U) == 1460142080U || (bp->chip_id & 4294967280U) == 1460146176U) || (bp->chip_id & 4294967280U) == 1460146192U) 
    #line 8408 
    goto _LOR;
  else {
    #line 8410 
    if (((long)readl(bp->regview + 1036U) & 1073741824L) == 0L) {
      #line 8408 
      _LOR: {
              #line 8412 
              bp->flags |= 8U;
              #line 8413 
              bp->wol = (unsigned char)0U;
            }
    }
  }
  #line 8416 
  if ((bp->flags & 8U) != 0U) 
                              #line 8417 
                              device_set_wakeup_capable(& (bp->pdev)->dev,(_Bool)0); else 
                                                                    #line 8419 
                                                                    device_set_wakeup_enable(& (bp->pdev)->dev,(_Bool)((unsigned int)bp->wol != 0U));
  #line 8421 
  if ((bp->chip_id & 4294967280U) == 1460011008U) {
    #line 8422 
    bp->tx_quick_cons_trip_int = bp->tx_quick_cons_trip;
    #line 8424 
    bp->tx_ticks_int = bp->tx_ticks;
    #line 8425 
    bp->rx_quick_cons_trip_int = bp->rx_quick_cons_trip;
    #line 8427 
    bp->rx_ticks_int = bp->rx_ticks;
    #line 8428 
    bp->comp_prod_trip_int = bp->comp_prod_trip;
    #line 8429 
    bp->com_ticks_int = bp->com_ticks;
    #line 8430 
    bp->cmd_ticks_int = bp->cmd_ticks;
  }
  #line 8443 
  if ((bp->chip_id & 4294901760U) == 1460011008U && disable_msi == 0) {
    #line 8444 
    struct pci_dev *amd_8132 = (struct pci_dev *)0;
    #line 8446 
    while (1) {
      #line 8446 
      amd_8132 = pci_get_device(4130U,29784U,amd_8132);
      #line 8446 
      if (! (amd_8132 != (struct pci_dev *)0)) 
                                               #line 8446 
                                               break;
      #line 8450 
      if ((unsigned int)amd_8132->revision + 240U <= 3U) {
        #line 8452 
        disable_msi = 1;
        #line 8453 
        pci_dev_put(amd_8132);
        #line 8454 
        break;
      }
    }
  }
  #line 8459 
  bnx2_set_default_link(bp);
  #line 8460 
  bp->req_flow_ctrl = (unsigned char)3U;
  {
    #line 8462 
    struct lock_class_key __key_3;
    #line 8462 
    init_timer_key(& bp->timer,& bnx2_timer,0U,(char *)"(&bp->timer)",& __key_3);
  }
  #line 8463 
  bp->timer.expires = jiffies + 250UL;
  #line 8466 
  if ((bnx2_shmem_rd(bp,988U) & 524288U) != 0U) {
    #line 8467 
    bp->cnic_eth_dev.max_iscsi_conn = (bnx2_shmem_rd(bp,996U) >> 16) & 65535U;
  }
  #line 8470 
  bp->cnic_probe = & bnx2_cnic_probe;
  #line 8472 
  pci_save_state(pdev);
  #line 8474 
  return 0;
  #line 8476 
  err_out_unmap: 
                 #line 8476 
  ;
  #line 8477 
  if ((bp->flags & 16384U) != 0U) {
    #line 8478 
    pci_disable_pcie_error_reporting(pdev);
    #line 8479 
    bp->flags &= 4294950911U;
  }
  #line 8482 
  pci_iounmap(pdev,bp->regview);
  #line 8483 
  bp->regview = (void *)0;
  #line 8485 
  err_out_release: 
                   #line 8485 
  ;
  #line 8486 
  pci_release_regions(pdev);
  #line 8488 
  err_out_disable: 
                   #line 8488 
  ;
  #line 8489 
  pci_disable_device(pdev);
  #line 8491 
  err_out: 
           #line 8491 
  ;
  #line 8492 
  kfree((void *)bp->temp_stats_blk);
  #line 8494 
  return rc;
}

#line 8498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static char *bnx2_bus_string(struct bnx2 *bp, char *str)
{
  #line 8500 
  char *s = str;
  #line 8502 
  if ((bp->flags & 512U) != 0U) {
    #line 8503 
    s += (unsigned long)sprintf(s,(char *)"PCI Express");
  }
  else {
    #line 8505 
    s += (unsigned long)sprintf(s,(char *)"PCI");
    #line 8506 
    if ((bp->flags & 1U) != 0U) {
      #line 8507 
      s += (unsigned long)sprintf(s,(char *)"-X");
    }
    #line 8508 
    if ((bp->flags & 2U) != 0U) {
      #line 8509 
      s += (unsigned long)sprintf(s,(char *)" 32-bit");
    }
    else {
      #line 8511 
      s += (unsigned long)sprintf(s,(char *)" 64-bit");
    }
    #line 8512 
    s += (unsigned long)sprintf(s,(char *)" %dMHz",(int)bp->bus_speed_mhz);
  }
  #line 8514 
  return str;
}

#line 8518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_del_napi(struct bnx2 *bp)
{
  #line 8520 
  int i;
  #line 8522 
  i = 0;
  #line 8522 
  while (bp->irq_nvecs > i) {
    #line 8523 
    netif_napi_del(& bp->bnx2_napi[i].napi);
    #line 8522 
    i ++;
  }
  #line 8524 
  return;
}

#line 8527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_init_napi(struct bnx2 *bp)
{
  #line 8529 
  int i;
  #line 8531 
  i = 0;
  #line 8531 
  while (bp->irq_nvecs > i) {
    {
      #line 8533 
      int (*poll)(struct napi_struct *, int );
      #line 8532 
      struct bnx2_napi *bnapi = & bp->bnx2_napi[i];
      #line 8535 
      if (i == 0) 
                  #line 8536 
                  poll = & bnx2_poll; else 
                                           #line 8538 
                                           poll = & bnx2_poll_msix;
      #line 8540 
      netif_napi_add(bp->dev,& bp->bnx2_napi[i].napi,poll,64);
      #line 8541 
      bnapi->bp = bp;
    }
    #line 8531 
    i ++;
  }
  #line 8543 
  return;
}

#line 8545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct net_device_ops bnx2_netdev_ops = {.ndo_open = & bnx2_open, .ndo_stop = & bnx2_close, .ndo_start_xmit = & bnx2_start_xmit, .ndo_set_rx_mode = & bnx2_set_rx_mode, .ndo_set_mac_address = & bnx2_change_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & bnx2_ioctl, .ndo_change_mtu = & bnx2_change_mtu, .ndo_tx_timeout = & bnx2_tx_timeout, .ndo_get_stats64 = & bnx2_get_stats64, .ndo_poll_controller = & poll_bnx2, .ndo_set_features = & bnx2_set_features};
#line 8563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_init_one(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 8566 
  struct net_device *dev;
  #line 8567 
  struct bnx2 *bp;
  #line 8568 
  int rc;
  #line 8569 
  char str[40U];
  #line 8571 
  int tmp;
  #line 8565 
  int version_printed = 0;
  #line 8571 
  tmp = version_printed;
  #line 8571 
  version_printed ++;
  #line 8571 
  ;
  #line 8571 
  if (tmp == 0) 
                #line 8572 
                printk((char *)"\001",(char *)(& version));
  #line 8575 
  dev = cif_alloc_etherdev_mqs(12672,8U,8U);
  #line 8576 
  if (dev == (struct net_device *)0) 
                                     #line 8577 
                                     return -12;
  #line 8579 
  rc = bnx2_init_board(pdev,dev);
  #line 8580 
  if (rc < 0) 
              #line 8581 
              goto err_free;
  #line 8583 
  dev->netdev_ops = & bnx2_netdev_ops;
  #line 8584 
  dev->watchdog_timeo = 1250;
  #line 8585 
  dev->ethtool_ops = & bnx2_ethtool_ops;
  #line 8587 
  bp = (struct bnx2 *)netdev_priv(dev);
  #line 8589 
  pci_set_drvdata(pdev,(void *)dev);
  #line 8597 
  if ((int)is_kdump_kernel() != 0) 
                                   #line 8598 
                                   bnx2_wait_dma_complete(bp);
  #line 8600 
  memcpy((void *)dev->dev_addr,(void *)(& bp->mac_addr),6UL);
  #line 8602 
  dev->hw_features = 824634048515ULL;
  #line 8606 
  if ((bp->chip_id & 4294901760U) == 1460207616U) 
                                                  #line 8607 
                                                  dev->hw_features |= 1048592ULL;
  #line 8609 
  dev->vlan_features = dev->hw_features;
  #line 8610 
  dev->hw_features |= 384ULL;
  #line 8611 
  dev->features |= dev->hw_features;
  #line 8612 
  dev->priv_flags |= 4096U;
  #line 8613 
  dev->min_mtu = 46U;
  #line 8614 
  dev->max_mtu = 9000U;
  #line 8616 
  if ((bp->flags & 4096U) == 0U) 
                                 #line 8617 
                                 dev->hw_features &= 18446744073709551359ULL;
  #line 8619 
  rc = cif_register_netdev(dev);
  #line 8619 
  if (rc != 0) {
    #line 8620 
    _dev_err(& pdev->dev,(char *)"Cannot register net device\n");
    #line 8621 
    goto error;
  }
  #line 8624 
  ;
  #line 8624 
  ;
  #line 8624 
  ;
  #line 8624 
  ;
  #line 8624 
  ;
  #line 8624 
  ;
  #line 8624 
  ;
  #line 8624 
  netdev_info(dev,(char *)"%s (%c%d) %s found at mem %lx, IRQ %d, ",board_info[ent->driver_data].name,((bp->chip_id >> 12) & 15U) + 65U,(bp->chip_id >> 4) & 255U,bnx2_bus_string(bp,(char *)(& str)),(long)pdev->resource[0].start,pdev->irq,dev->dev_addr);
  #line 8631 
  return 0;
  #line 8633 
  error: 
         #line 8633 
  ;
  #line 8634 
  pci_iounmap(pdev,bp->regview);
  #line 8635 
  pci_release_regions(pdev);
  #line 8636 
  pci_disable_device(pdev);
  #line 8637 
  err_free: 
            #line 8637 
  ;
  #line 8638 
  bnx2_free_stats_blk(dev);
  #line 8639 
  cif_free_netdev(dev);
  #line 8640 
  return rc;
}

#line 8644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_remove_one(struct pci_dev *pdev)
{
  #line 8646 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 8647 
  struct bnx2 *bp = netdev_priv(dev);
  #line 8649 
  cif_unregister_netdev(dev);
  #line 8651 
  cif_del_timer_sync(& bp->timer);
  #line 8652 
  cancel_work_sync(& bp->reset_task);
  #line 8654 
  pci_iounmap(bp->pdev,bp->regview);
  #line 8656 
  bnx2_free_stats_blk(dev);
  #line 8657 
  kfree((void *)bp->temp_stats_blk);
  #line 8659 
  if ((bp->flags & 16384U) != 0U) {
    #line 8660 
    pci_disable_pcie_error_reporting(pdev);
    #line 8661 
    bp->flags &= 4294950911U;
  }
  #line 8664 
  bnx2_release_firmware(bp);
  #line 8666 
  cif_free_netdev(dev);
  #line 8668 
  pci_release_regions(pdev);
  #line 8669 
  pci_disable_device(pdev);
  #line 8670 
  return;
}

#line 8674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_suspend(struct device *device)
{
  #line 8676 
  struct net_device *dev = dev_get_drvdata(device);
  #line 8677 
  struct bnx2 *bp = netdev_priv(dev);
  #line 8679 
  if ((int)netif_running(dev) != 0) {
    #line 8680 
    cancel_work_sync(& bp->reset_task);
    #line 8681 
    bnx2_netif_stop(bp,(_Bool)1);
    #line 8682 
    netif_device_detach(dev);
    #line 8683 
    cif_del_timer_sync(& bp->timer);
    #line 8684 
    bnx2_shutdown_chip(bp);
    #line 8685 
    __bnx2_free_irq(bp);
    #line 8686 
    bnx2_free_skbs(bp);
  }
  #line 8688 
  bnx2_setup_wol(bp);
  #line 8689 
  return 0;
}

#line 8693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_resume(struct device *device)
{
  #line 8695 
  struct net_device *dev = dev_get_drvdata(device);
  #line 8696 
  struct bnx2 *bp = netdev_priv(dev);
  #line 8698 
  if (! netif_running(dev)) 
                            #line 8699 
                            return 0;
  #line 8701 
  bnx2_set_power_state(bp,0);
  #line 8702 
  netif_device_attach(dev);
  #line 8703 
  bnx2_request_irq(bp);
  #line 8704 
  bnx2_init_nic(bp,1);
  #line 8705 
  bnx2_netif_start(bp,(_Bool)1);
  #line 8706 
  return 0;
}

#line 8709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct dev_pm_ops bnx2_pm_ops = {.suspend = & bnx2_suspend, .resume = & bnx2_resume, .freeze = & bnx2_suspend, .thaw = & bnx2_resume, .poweroff = & bnx2_suspend, .restore = & bnx2_resume};
#line 8725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static pci_ers_result_t bnx2_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 8728 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 8729 
  struct bnx2 *bp = netdev_priv(dev);
  #line 8731 
  rtnl_lock();
  #line 8732 
  netif_device_detach(dev);
  #line 8734 
  if (state == 3U) {
    #line 8735 
    rtnl_unlock();
    #line 8736 
    return 4U;
  }
  #line 8739 
  if ((int)netif_running(dev) != 0) {
    #line 8740 
    bnx2_netif_stop(bp,(_Bool)1);
    #line 8741 
    cif_del_timer_sync(& bp->timer);
    #line 8742 
    bnx2_reset_nic(bp,16777216U);
  }
  #line 8745 
  pci_disable_device(pdev);
  #line 8746 
  rtnl_unlock();
  #line 8749 
  return 3U;
}

#line 8758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static pci_ers_result_t bnx2_io_slot_reset(struct pci_dev *pdev)
{
  #line 8760 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 8761 
  struct bnx2 *bp = netdev_priv(dev);
  #line 8762 
  pci_ers_result_t result = 4U;
  #line 8763 
  int err = 0;
  #line 8765 
  rtnl_lock();
  #line 8766 
  if (pci_enable_device(pdev) != 0) 
                                    #line 8767 
                                    _dev_err(& pdev->dev,(char *)"Cannot re-enable PCI device after reset\n");
  else {
    #line 8770 
    pci_set_master(pdev);
    #line 8771 
    pci_restore_state(pdev);
    #line 8772 
    pci_save_state(pdev);
    #line 8774 
    if ((int)netif_running(dev) != 0) 
                                      #line 8775 
                                      err = bnx2_init_nic(bp,1);
    #line 8777 
    if (err == 0) 
                  #line 8778 
                  result = 5U;
  }
  #line 8781 
  if (result != 5U) {
    #line 8781 
    if ((int)netif_running(dev) != 0) {
      #line 8782 
      bnx2_napi_enable(bp);
      #line 8783 
      dev_close(dev);
    }
  }
  #line 8785 
  rtnl_unlock();
  #line 8787 
  if ((bp->flags & 16384U) == 0U) 
                                  #line 8788 
                                  return result;
  #line 8790 
  return result;
}

#line 8800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_io_resume(struct pci_dev *pdev)
{
  #line 8802 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 8803 
  struct bnx2 *bp = netdev_priv(dev);
  #line 8805 
  rtnl_lock();
  #line 8806 
  if ((int)netif_running(dev) != 0) 
                                    #line 8807 
                                    bnx2_netif_start(bp,(_Bool)1);
  #line 8809 
  netif_device_attach(dev);
  #line 8810 
  rtnl_unlock();
  #line 8811 
  return;
}

#line 8813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_shutdown(struct pci_dev *pdev)
{
  #line 8816 
  struct bnx2 *bp;
  #line 8815 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 8818 
  if (dev == (struct net_device *)0) 
                                     #line 8819 
                                     return;
  #line 8821 
  bp = (struct bnx2 *)netdev_priv(dev);
  #line 8822 
  if (bp == (struct bnx2 *)0) 
                              #line 8823 
                              return;
  #line 8825 
  rtnl_lock();
  #line 8826 
  if ((int)netif_running(dev) != 0) 
                                    #line 8827 
                                    dev_close(bp->dev);
  #line 8829 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) 
                                                      #line 8830 
                                                      bnx2_set_power_state(bp,3);
  #line 8832 
  rtnl_unlock();
  #line 8833 
  return;
}

#line 8835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct pci_error_handlers bnx2_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& bnx2_io_error_detected), .slot_reset = & bnx2_io_slot_reset, .resume = & bnx2_io_resume};
#line 8841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static struct pci_driver bnx2_pci_driver = {.name = (char *)"bnx2", .id_table = (struct pci_device_id *)(& bnx2_pci_tbl), .probe = & bnx2_init_one, .remove = & bnx2_remove_one, .shutdown = & bnx2_shutdown, .err_handler = & bnx2_err_handler, .driver = {.pm = & bnx2_pm_ops}};
#line 8851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static int bnx2_pci_driver_init(void)
{
  #line 8851 
  return cif___pci_register_driver(& bnx2_pci_driver,& __this_module,
                                (char *)"bnx2");
}

#line 8851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/bnx2.c"
static void bnx2_pci_driver_exit(void)
{
  #line 8851 
  cif_pci_unregister_driver(& bnx2_pci_driver);
  #line 8852 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
struct pci_driver *emg_alias_bnx2_pci_driver = & bnx2_pci_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
struct pci_device_id (*emg_alias_bnx2_pci_tbl)[12U] = & bnx2_pci_tbl;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
struct dev_pm_ops *emg_alias_bnx2_pm_ops = & bnx2_pm_ops;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 100 
#line 100 
int emg_del_timer_sync(struct timer_list *arg0);
#line 101 
#line 101 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 102 
#line 102 
void emg_free_netdev(struct net_device *arg0);
#line 103 
#line 103 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 104 
#line 104 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 105 
#line 105 
int emg_register_netdev(struct net_device *arg0);
#line 106 
#line 106 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 107 
#line 107 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 108 
#line 108 
void emg_unregister_netdev(struct net_device *arg0);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_bnx2_pci_driver_exit(void)
{
  #line 113 
  bnx2_pci_driver_exit();
  #line 114 
  return;
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_bnx2_pci_driver_init(void)
{
  #line 117 
  return bnx2_pci_driver_init();
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_change_mac_addr(struct net_device *arg0, void *arg1)
{
  #line 121 
  return bnx2_change_mac_addr(arg0,arg1);
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_change_mtu(struct net_device *arg0, int arg1)
{
  #line 126 
  return bnx2_change_mtu(arg0,arg1);
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_close(struct net_device *arg0)
{
  #line 131 
  return bnx2_close(arg0);
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 136 
  bnx2_get_channels(arg0,arg1);
  #line 137 
  return;
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 141 
  return bnx2_get_coalesce(arg0,arg1);
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 146 
  bnx2_get_drvinfo(arg0,arg1);
  #line 147 
  return;
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 151 
  return bnx2_get_eeprom(arg0,arg1,arg2);
}

#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_get_eeprom_len(struct net_device *arg0)
{
  #line 156 
  return bnx2_get_eeprom_len(arg0);
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 161 
  bnx2_get_ethtool_stats(arg0,arg1,arg2);
  #line 162 
  return;
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
unsigned int emg_wrapper_bnx2_get_link(struct net_device *arg0)
{
  #line 166 
  return bnx2_get_link(arg0);
}

#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 171 
  return bnx2_get_link_ksettings(arg0,arg1);
}

#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 176 
  bnx2_get_pauseparam(arg0,arg1);
  #line 177 
  return;
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 181 
  bnx2_get_regs(arg0,arg1,arg2);
  #line 182 
  return;
}

#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_get_regs_len(struct net_device *arg0)
{
  #line 186 
  return bnx2_get_regs_len(arg0);
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 191 
  bnx2_get_ringparam(arg0,arg1);
  #line 192 
  return;
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 196 
  return bnx2_get_sset_count(arg0,arg1);
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 201 
  bnx2_get_stats64(arg0,arg1);
  #line 202 
  return;
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 206 
  bnx2_get_strings(arg0,arg1,arg2);
  #line 207 
  return;
}

#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 211 
  bnx2_get_wol(arg0,arg1);
  #line 212 
  return;
}

#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_init_one(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 216 
  return bnx2_init_one(arg0,arg1);
}

#line 220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 221 
  return bnx2_ioctl(arg0,arg1,arg2);
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_nway_reset(struct net_device *arg0)
{
  #line 226 
  return bnx2_nway_reset(arg0);
}

#line 230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_open(struct net_device *arg0)
{
  #line 231 
  return bnx2_open(arg0);
}

#line 235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_remove_one(struct pci_dev *arg0)
{
  #line 236 
  bnx2_remove_one(arg0);
  #line 237 
  return;
}

#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_resume(struct device *arg0)
{
  #line 241 
  return bnx2_resume(arg0);
}

#line 245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_self_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 246 
  bnx2_self_test(arg0,arg1,arg2);
  #line 247 
  return;
}

#line 250  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 251 
  return bnx2_set_channels(arg0,arg1);
}

#line 255  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 256 
  return bnx2_set_coalesce(arg0,arg1);
}

#line 260  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 261 
  return bnx2_set_eeprom(arg0,arg1,arg2);
}

#line 265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 266 
  return bnx2_set_features(arg0,arg1);
}

#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 271 
  return bnx2_set_link_ksettings(arg0,arg1);
}

#line 275  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 276 
  return bnx2_set_pauseparam(arg0,arg1);
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 281 
  return bnx2_set_phys_id(arg0,arg1);
}

#line 285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 286 
  return bnx2_set_ringparam(arg0,arg1);
}

#line 290  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_set_rx_mode(struct net_device *arg0)
{
  #line 291 
  bnx2_set_rx_mode(arg0);
  #line 292 
  return;
}

#line 295  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 296 
  return bnx2_set_wol(arg0,arg1);
}

#line 300  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_shutdown(struct pci_dev *arg0)
{
  #line 301 
  bnx2_shutdown(arg0);
  #line 302 
  return;
}

#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
enum netdev_tx emg_wrapper_bnx2_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 306 
  return bnx2_start_xmit(arg0,arg1);
}

#line 310  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
int emg_wrapper_bnx2_suspend(struct device *arg0)
{
  #line 311 
  return bnx2_suspend(arg0);
}

#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_bnx2_tx_timeout(struct net_device *arg0)
{
  #line 316 
  bnx2_tx_timeout(arg0);
  #line 317 
  return;
}

#line 320  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
void emg_wrapper_poll_bnx2(struct net_device *arg0)
{
  #line 321 
  poll_bnx2(arg0);
  #line 322 
  return;
}

#line 340  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 343 
  ldv_set_bit(nr,addr);
  #line 344 
  return;
}

#line 347  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 350 
  ldv_clear_bit(nr,addr);
  #line 351 
  return;
}

#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 357 
  ldv_init_list_head(list);
  #line 358 
  return;
}

#line 368  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static size_t cif_strlen(char *s)
{
  #line 371 
  return ldv_strlen(s);
}

#line 403  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 406 
  ldv_atomic_inc(v);
  #line 407 
  return;
}

#line 596  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 599 
  return ldv_kmalloc(size,flags);
}

#line 603  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 606 
  return ldv_kmalloc_array(n,size,flags);
}

#line 631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 634 
  return ldv_kzalloc(size,flags);
}

#line 758  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 761 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 763 
  spin_lock(lock);
  #line 764 
  return;
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 801 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 803 
  spin_unlock(lock);
  #line 804 
  return;
}

#line 904  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 908 
  return emg_schedule_work(work);
}

#line 1033  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif___ldv_spin_lock_indirect_lock_of_bnx2(spinlock_t *lock)
{
  #line 1036 
  ldv_spin_model_lock((char *)"indirect_lock_of_bnx2");
  #line 1038 
  __ldv_spin_lock(lock);
  #line 1039 
  return;
}

#line 1042  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock_irqrestore_indirect_lock_of_bnx2(spinlock_t *lock, unsigned long flags)
{
  #line 1045 
  ldv_spin_model_unlock((char *)"indirect_lock_of_bnx2");
  #line 1047 
  spin_unlock_irqrestore(lock,flags);
  #line 1048 
  return;
}

#line 1051  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_mutex_lock_cnic_lock_of_bnx2(struct mutex *lock)
{
  #line 1054 
  ldv_mutex_model_lock(lock,(char *)"cnic_lock_of_bnx2");
  #line 1055 
  return;
}

#line 1058  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_mutex_unlock_cnic_lock_of_bnx2(struct mutex *lock)
{
  #line 1061 
  ldv_mutex_model_unlock(lock,(char *)"cnic_lock_of_bnx2");
  #line 1062 
  return;
}

#line 1065  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_lock_bh_phy_lock_of_bnx2(spinlock_t *lock)
{
  #line 1068 
  ldv_spin_model_lock((char *)"phy_lock_of_bnx2");
  #line 1070 
  spin_lock_bh(lock);
  #line 1071 
  return;
}

#line 1074  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock_bh_phy_lock_of_bnx2(spinlock_t *lock)
{
  #line 1077 
  ldv_spin_model_unlock((char *)"phy_lock_of_bnx2");
  #line 1079 
  spin_unlock_bh(lock);
  #line 1080 
  return;
}

#line 1083  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_vfree(void *addr)
{
  #line 1086 
  ldv_vfree(addr);
  #line 1087 
  return;
}

#line 1090  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 1093 
  return ldv_vzalloc(size);
}

#line 1097  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 1101 
  return emg_mod_timer(timer,expires);
}

#line 1105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_lock_indirect_lock_of_bnx2(spinlock_t *lock)
{
  #line 1108 
  ldv_spin_model_lock((char *)"indirect_lock_of_bnx2");
  #line 1110 
  spin_lock(lock);
  #line 1111 
  return;
}

#line 1114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock_indirect_lock_of_bnx2(spinlock_t *lock)
{
  #line 1117 
  ldv_spin_model_unlock((char *)"indirect_lock_of_bnx2");
  #line 1119 
  spin_unlock(lock);
  #line 1120 
  return;
}

#line 1123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_lock_phy_lock_of_bnx2(spinlock_t *lock)
{
  #line 1126 
  ldv_spin_model_lock((char *)"phy_lock_of_bnx2");
  #line 1128 
  spin_lock(lock);
  #line 1129 
  return;
}

#line 1132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_spin_unlock_phy_lock_of_bnx2(spinlock_t *lock)
{
  #line 1135 
  ldv_spin_model_unlock((char *)"phy_lock_of_bnx2");
  #line 1137 
  spin_unlock(lock);
  #line 1138 
  return;
}

#line 1141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 1144 
  ldv_release_firmware(fw);
  #line 1145 
  return;
}

#line 1148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 1151 
  return ldv_request_firmware(fw);
}

#line 1155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1159 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1167 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 1175 
  return emg_del_timer_sync(timer);
}

#line 1179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1183 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1191 
  return emg_register_netdev(dev);
}

#line 1195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1199 
  emg_free_netdev(dev);
  #line 1200 
  return;
}

#line 1203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1207 
  emg_unregister_netdev(dev);
  #line 1208 
  return;
}

#line 1211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1215 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/0/concurrency safety/weaver/bnx2.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1223 
  emg_pci_unregister_driver(dev);
  #line 1224 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 100 
#line 207 
void emg_dispatch_deregister_12(struct net_device *arg0);
#line 101 
#line 173 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 102 
#line 144 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 103 
#line 162 
void emg_dispatch_instance_register_7(struct timer_list *arg0);
#line 104 
#line 153 
void emg_dispatch_irq_deregister_5(int arg0);
#line 105 
#line 193 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 106 
#line 133 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 107 
#line 182 
void emg_dispatch_register_9(struct net_device *arg0);
#line 108 
#line 2270 
void *emg_entry_point_insmod(void *arg0);
#line 111 
#line 216 
void *emg_interrupt_interrupt_scenario_0(void *arg0);
#line 113 
#line 282 
void *emg_net_random_allocationless_scenario_bnx2_get_channels(void *arg0);
#line 114 
#line 779 
void *emg_pci_pci_scenario_bnx2_pci_driver(void *arg0);
#line 116 
#line 955 
void *emg_pm_pm_ops_scenario_bnx2_pm_ops(void *arg0);
#line 120 
#line 1950 
void *emg_timer_timer_scenario_4(void *arg0);
#line 122 
#line 2299 
int main(void);
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 134 
  int ret;
  #line 135 
  struct emg_struct_pci_scenario_bnx2_pci_driver_15 *cf_arg_15;
  #line 136 
  cf_arg_15 = (struct emg_struct_pci_scenario_bnx2_pci_driver_15 *)ldv_xmalloc(16UL);
  #line 137 
  cf_arg_15->arg0 = arg0;
  #line 138 
  ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_pci_pci_scenario_bnx2_pci_driver,(void *)cf_arg_15);
  #line 139 
  __VERIFIER_assume(ret == 0);
  #line 140 
  return;
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 145 
  int ret;
  #line 146 
  struct emg_struct_timer_scenario_4_17 *cf_arg_17;
  #line 147 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 148 
  __VERIFIER_assume(ret == 0);
  #line 149 
  return;
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 154 
  int ret;
  #line 155 
  struct emg_struct_free_irq_5 *cf_arg_13;
  #line 156 
  ret = pthread_join(emg_thread_13,(void **)0);
  #line 157 
  __VERIFIER_assume(ret == 0);
  #line 158 
  return;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_7(struct timer_list *arg0)
{
  #line 163 
  int ret;
  #line 164 
  struct emg_struct_timer_scenario_4_17 *cf_arg_17;
  #line 165 
  cf_arg_17 = (struct emg_struct_timer_scenario_4_17 *)ldv_xmalloc(16UL);
  #line 166 
  cf_arg_17->arg0 = arg0;
  #line 167 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_timer_timer_scenario_4,(void *)cf_arg_17);
  #line 168 
  __VERIFIER_assume(ret == 0);
  #line 169 
  return;
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 174 
  int ret;
  #line 175 
  struct emg_struct_pci_scenario_bnx2_pci_driver_15 *cf_arg_15;
  #line 176 
  ret = pthread_join(emg_thread_15,(void **)0);
  #line 177 
  __VERIFIER_assume(ret == 0);
  #line 178 
  return;
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 183 
  int ret;
  #line 184 
  struct emg_struct_random_allocationless_scenario_bnx2_get_channels_14 *cf_arg_14;
  #line 185 
  cf_arg_14 = (struct emg_struct_random_allocationless_scenario_bnx2_get_channels_14 *)ldv_xmalloc(16UL);
  #line 186 
  cf_arg_14->arg0 = arg0;
  #line 187 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_bnx2_get_channels,(void *)cf_arg_14);
  #line 188 
  __VERIFIER_assume(ret == 0);
  #line 189 
  return;
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 194 
  int ret;
  #line 195 
  struct emg_struct_interrupt_scenario_0_13 *cf_arg_13;
  #line 196 
  cf_arg_13 = (struct emg_struct_interrupt_scenario_0_13 *)ldv_xmalloc(40UL);
  #line 197 
  cf_arg_13->arg0 = arg0;
  #line 198 
  cf_arg_13->arg1 = arg1;
  #line 199 
  cf_arg_13->arg2 = arg2;
  #line 200 
  cf_arg_13->arg3 = arg3;
  #line 201 
  ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_0,(void *)cf_arg_13);
  #line 202 
  __VERIFIER_assume(ret == 0);
  #line 203 
  return;
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct net_device *arg0)
{
  #line 208 
  int ret;
  #line 209 
  struct emg_struct_random_allocationless_scenario_bnx2_get_channels_14 *cf_arg_14;
  #line 210 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 211 
  __VERIFIER_assume(ret == 0);
  #line 212 
  return;
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_0(void *arg0)
{
  #line 219 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 220 
  void *emg_13_data;
  #line 221 
  int emg_13_line;
  #line 222 
  enum irqreturn emg_13_ret_val;
  #line 223 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 225 
  struct emg_struct_interrupt_scenario_0_13 *data = (struct emg_struct_interrupt_scenario_0_13 *)arg0;
  #line 230 
  if (data != (struct emg_struct_interrupt_scenario_0_13 *)0) {
    #line 231 
    emg_13_line = data->arg0;
    #line 232 
    emg_13_callback = data->arg1;
    #line 233 
    emg_13_thread = data->arg2;
    #line 234 
    emg_13_data = data->arg3;
    #line 235 
    ldv_free((void *)data);
  }
  #line 241 
  ldv_switch_to_interrupt_context();
  #line 245 
  if (emg_13_callback != (enum irqreturn (*)(int , void *))0) 
                                                              #line 246 
                                                              emg_13_ret_val = (*emg_13_callback)(emg_13_line,emg_13_data);
  else {
    #line 248 
    emg_13_ret_val = (enum irqreturn)ldv_undef_int();
  }
  #line 254 
  ldv_switch_to_process_context();
  #line 257 
  if (ldv_undef_int() != 0) {
    #line 259 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 263 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 264 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 269 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 277 
  return (void *)0;
}

#line 282  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_bnx2_get_channels(void *arg0)
{
  #line 285 
  struct net_device *emg_14_container;
  #line 286 
  struct sk_buff *emg_14_emg_param_0_22;
  #line 287 
  struct ethtool_channels *emg_14_emg_param_1_0;
  #line 288 
  struct ethtool_coalesce *emg_14_emg_param_1_1;
  #line 289 
  struct ethtool_ringparam *emg_14_emg_param_1_11;
  #line 290 
  int emg_14_emg_param_1_12;
  #line 291 
  unsigned int emg_14_emg_param_1_13;
  #line 292 
  struct ethtool_wolinfo *emg_14_emg_param_1_15;
  #line 293 
  int emg_14_emg_param_1_16;
  #line 294 
  struct ifreq *emg_14_emg_param_1_17;
  #line 295 
  struct rtnl_link_stats64 *emg_14_emg_param_1_19;
  #line 296 
  struct ethtool_drvinfo *emg_14_emg_param_1_2;
  #line 297 
  unsigned long long emg_14_emg_param_1_20;
  #line 298 
  void *emg_14_emg_param_1_21;
  #line 299 
  struct ethtool_test *emg_14_emg_param_1_23;
  #line 300 
  struct ethtool_channels *emg_14_emg_param_1_25;
  #line 301 
  struct ethtool_coalesce *emg_14_emg_param_1_26;
  #line 302 
  struct ethtool_eeprom *emg_14_emg_param_1_27;
  #line 303 
  struct ethtool_link_ksettings *emg_14_emg_param_1_29;
  #line 304 
  struct ethtool_eeprom *emg_14_emg_param_1_3;
  #line 305 
  struct ethtool_pauseparam *emg_14_emg_param_1_30;
  #line 306 
  enum ethtool_phys_id_state *emg_14_emg_param_1_31;
  #line 307 
  struct ethtool_ringparam *emg_14_emg_param_1_32;
  #line 308 
  struct ethtool_wolinfo *emg_14_emg_param_1_33;
  #line 309 
  struct ethtool_stats *emg_14_emg_param_1_5;
  #line 310 
  struct ethtool_link_ksettings *emg_14_emg_param_1_7;
  #line 311 
  struct ethtool_pauseparam *emg_14_emg_param_1_8;
  #line 312 
  struct ethtool_regs *emg_14_emg_param_1_9;
  #line 313 
  void *emg_14_emg_param_2_10;
  #line 314 
  unsigned char *emg_14_emg_param_2_14;
  #line 315 
  int emg_14_emg_param_2_18;
  #line 316 
  unsigned long long *emg_14_emg_param_2_24;
  #line 317 
  unsigned char *emg_14_emg_param_2_28;
  #line 318 
  unsigned char *emg_14_emg_param_2_4;
  #line 319 
  unsigned long long *emg_14_emg_param_2_6;
  #line 320 
  int emg_repeat_cnt_call_14 = 1;
  #line 322 
  struct emg_struct_random_allocationless_scenario_bnx2_get_channels_14 *data = (struct emg_struct_random_allocationless_scenario_bnx2_get_channels_14 *)arg0;
  #line 327 
  if (data != (struct emg_struct_random_allocationless_scenario_bnx2_get_channels_14 *)0) {
    #line 328 
    emg_14_container = data->arg0;
    #line 329 
    ldv_free((void *)data);
  }
  #line 334 
  goto emg_call_14;
  #line 338 
  return (void *)0;
  #line 341 
  emg_call_14: 
               #line 341 
  ;
  #line 342 
  switch (ldv_undef_int()) {
    #line 343 
    case 0: 
            #line 343 
    ;
    #line 345 
    emg_14_emg_param_1_33 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 345 
    emg_14_emg_param_1_33 = emg_14_emg_param_1_33;
    #line 349 
    emg_wrapper_bnx2_set_wol(emg_14_container,emg_14_emg_param_1_33);
    #line 353 
    ldv_free((void *)emg_14_emg_param_1_33);
    #line 355 
    break;
    #line 357 
    case 1: 
            #line 357 
    ;
    #line 359 
    emg_14_emg_param_1_32 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 359 
    emg_14_emg_param_1_32 = emg_14_emg_param_1_32;
    #line 363 
    emg_wrapper_bnx2_set_ringparam(emg_14_container,emg_14_emg_param_1_32);
    #line 367 
    ldv_free((void *)emg_14_emg_param_1_32);
    #line 369 
    break;
    #line 371 
    case 2: 
            #line 371 
    ;
    #line 373 
    emg_14_emg_param_1_31 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 373 
    emg_14_emg_param_1_31 = emg_14_emg_param_1_31;
    #line 377 
    emg_wrapper_bnx2_set_phys_id(emg_14_container,*emg_14_emg_param_1_31);
    #line 381 
    ldv_free((void *)emg_14_emg_param_1_31);
    #line 383 
    break;
    #line 385 
    case 3: 
            #line 385 
    ;
    #line 387 
    emg_14_emg_param_1_30 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 387 
    emg_14_emg_param_1_30 = emg_14_emg_param_1_30;
    #line 391 
    emg_wrapper_bnx2_set_pauseparam(emg_14_container,emg_14_emg_param_1_30);
    #line 395 
    ldv_free((void *)emg_14_emg_param_1_30);
    #line 397 
    break;
    #line 399 
    case 4: 
            #line 399 
    ;
    #line 401 
    emg_14_emg_param_1_29 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 401 
    emg_14_emg_param_1_29 = emg_14_emg_param_1_29;
    #line 405 
    emg_wrapper_bnx2_set_link_ksettings(emg_14_container,emg_14_emg_param_1_29);
    #line 409 
    ldv_free((void *)emg_14_emg_param_1_29);
    #line 411 
    break;
    #line 413 
    case 5: 
            #line 413 
    ;
    #line 415 
    emg_14_emg_param_1_27 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 415 
    emg_14_emg_param_1_27 = emg_14_emg_param_1_27;
    #line 416 
    emg_14_emg_param_2_28 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 416 
    emg_14_emg_param_2_28 = emg_14_emg_param_2_28;
    #line 420 
    emg_wrapper_bnx2_set_eeprom(emg_14_container,emg_14_emg_param_1_27,emg_14_emg_param_2_28);
    #line 424 
    ldv_free((void *)emg_14_emg_param_1_27);
    #line 425 
    ldv_free((void *)emg_14_emg_param_2_28);
    #line 427 
    break;
    #line 429 
    case 6: 
            #line 429 
    ;
    #line 431 
    emg_14_emg_param_1_26 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 431 
    emg_14_emg_param_1_26 = emg_14_emg_param_1_26;
    #line 435 
    emg_wrapper_bnx2_set_coalesce(emg_14_container,emg_14_emg_param_1_26);
    #line 439 
    ldv_free((void *)emg_14_emg_param_1_26);
    #line 441 
    break;
    #line 443 
    case 7: 
            #line 443 
    ;
    #line 445 
    emg_14_emg_param_1_25 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 445 
    emg_14_emg_param_1_25 = emg_14_emg_param_1_25;
    #line 449 
    emg_wrapper_bnx2_set_channels(emg_14_container,emg_14_emg_param_1_25);
    #line 453 
    ldv_free((void *)emg_14_emg_param_1_25);
    #line 455 
    break;
    #line 457 
    case 8: 
            #line 457 
    ;
    #line 459 
    emg_14_emg_param_1_23 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 459 
    emg_14_emg_param_1_23 = emg_14_emg_param_1_23;
    #line 460 
    emg_14_emg_param_2_24 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 460 
    emg_14_emg_param_2_24 = emg_14_emg_param_2_24;
    #line 464 
    emg_wrapper_bnx2_self_test(emg_14_container,emg_14_emg_param_1_23,emg_14_emg_param_2_24);
    #line 468 
    ldv_free((void *)emg_14_emg_param_1_23);
    #line 469 
    ldv_free((void *)emg_14_emg_param_2_24);
    #line 471 
    break;
    #line 473 
    case 9: 
            #line 473 
    ;
    #line 475 
    emg_wrapper_bnx2_nway_reset(emg_14_container);
    #line 477 
    break;
    #line 479 
    case 10: 
             #line 479 
    ;
    #line 481 
    eth_validate_addr(emg_14_container);
    #line 483 
    break;
    #line 485 
    case 11: 
             #line 485 
    ;
    #line 487 
    emg_wrapper_bnx2_tx_timeout(emg_14_container);
    #line 489 
    break;
    #line 491 
    case 12: 
             #line 491 
    ;
    #line 493 
    emg_14_emg_param_0_22 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 493 
    emg_14_emg_param_0_22 = emg_14_emg_param_0_22;
    #line 497 
    emg_wrapper_bnx2_start_xmit(emg_14_emg_param_0_22,emg_14_container);
    #line 501 
    ldv_free((void *)emg_14_emg_param_0_22);
    #line 503 
    break;
    #line 505 
    case 13: 
             #line 505 
    ;
    #line 507 
    emg_wrapper_bnx2_set_rx_mode(emg_14_container);
    #line 509 
    break;
    #line 511 
    case 14: 
             #line 511 
    ;
    #line 513 
    emg_14_emg_param_1_21 = ldv_xmalloc_unknown_size(0UL);
    #line 513 
    emg_14_emg_param_1_21 = emg_14_emg_param_1_21;
    #line 517 
    emg_wrapper_bnx2_change_mac_addr(emg_14_container,emg_14_emg_param_1_21);
    #line 521 
    ldv_free(emg_14_emg_param_1_21);
    #line 523 
    break;
    #line 525 
    case 15: 
             #line 525 
    ;
    #line 527 
    emg_wrapper_bnx2_set_features(emg_14_container,emg_14_emg_param_1_20);
    #line 529 
    break;
    #line 531 
    case 16: 
             #line 531 
    ;
    #line 533 
    emg_wrapper_poll_bnx2(emg_14_container);
    #line 535 
    break;
    #line 537 
    case 17: 
             #line 537 
    ;
    #line 539 
    emg_14_emg_param_1_19 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 539 
    emg_14_emg_param_1_19 = emg_14_emg_param_1_19;
    #line 543 
    emg_wrapper_bnx2_get_stats64(emg_14_container,emg_14_emg_param_1_19);
    #line 547 
    ldv_free((void *)emg_14_emg_param_1_19);
    #line 549 
    break;
    #line 551 
    case 18: 
             #line 551 
    ;
    #line 553 
    emg_14_emg_param_1_17 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 553 
    emg_14_emg_param_1_17 = emg_14_emg_param_1_17;
    #line 557 
    emg_wrapper_bnx2_ioctl(emg_14_container,emg_14_emg_param_1_17,emg_14_emg_param_2_18);
    #line 561 
    ldv_free((void *)emg_14_emg_param_1_17);
    #line 563 
    break;
    #line 565 
    case 19: 
             #line 565 
    ;
    #line 567 
    emg_wrapper_bnx2_change_mtu(emg_14_container,emg_14_emg_param_1_16);
    #line 569 
    break;
    #line 571 
    case 20: 
             #line 571 
    ;
    #line 573 
    emg_14_emg_param_1_15 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 573 
    emg_14_emg_param_1_15 = emg_14_emg_param_1_15;
    #line 577 
    emg_wrapper_bnx2_get_wol(emg_14_container,emg_14_emg_param_1_15);
    #line 581 
    ldv_free((void *)emg_14_emg_param_1_15);
    #line 583 
    break;
    #line 585 
    case 21: 
             #line 585 
    ;
    #line 587 
    emg_14_emg_param_2_14 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 587 
    emg_14_emg_param_2_14 = emg_14_emg_param_2_14;
    #line 591 
    emg_wrapper_bnx2_get_strings(emg_14_container,emg_14_emg_param_1_13,emg_14_emg_param_2_14);
    #line 595 
    ldv_free((void *)emg_14_emg_param_2_14);
    #line 597 
    break;
    #line 599 
    case 22: 
             #line 599 
    ;
    #line 601 
    emg_wrapper_bnx2_get_sset_count(emg_14_container,emg_14_emg_param_1_12);
    #line 603 
    break;
    #line 605 
    case 23: 
             #line 605 
    ;
    #line 607 
    emg_14_emg_param_1_11 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 607 
    emg_14_emg_param_1_11 = emg_14_emg_param_1_11;
    #line 611 
    emg_wrapper_bnx2_get_ringparam(emg_14_container,emg_14_emg_param_1_11);
    #line 615 
    ldv_free((void *)emg_14_emg_param_1_11);
    #line 617 
    break;
    #line 619 
    case 24: 
             #line 619 
    ;
    #line 621 
    emg_wrapper_bnx2_get_regs_len(emg_14_container);
    #line 623 
    break;
    #line 625 
    case 25: 
             #line 625 
    ;
    #line 627 
    emg_14_emg_param_1_9 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 627 
    emg_14_emg_param_1_9 = emg_14_emg_param_1_9;
    #line 628 
    emg_14_emg_param_2_10 = ldv_xmalloc_unknown_size(0UL);
    #line 628 
    emg_14_emg_param_2_10 = emg_14_emg_param_2_10;
    #line 632 
    emg_wrapper_bnx2_get_regs(emg_14_container,emg_14_emg_param_1_9,emg_14_emg_param_2_10);
    #line 636 
    ldv_free((void *)emg_14_emg_param_1_9);
    #line 637 
    ldv_free(emg_14_emg_param_2_10);
    #line 639 
    break;
    #line 641 
    case 26: 
             #line 641 
    ;
    #line 643 
    emg_14_emg_param_1_8 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 643 
    emg_14_emg_param_1_8 = emg_14_emg_param_1_8;
    #line 647 
    emg_wrapper_bnx2_get_pauseparam(emg_14_container,emg_14_emg_param_1_8);
    #line 651 
    ldv_free((void *)emg_14_emg_param_1_8);
    #line 653 
    break;
    #line 655 
    case 27: 
             #line 655 
    ;
    #line 657 
    emg_14_emg_param_1_7 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 657 
    emg_14_emg_param_1_7 = emg_14_emg_param_1_7;
    #line 661 
    emg_wrapper_bnx2_get_link_ksettings(emg_14_container,emg_14_emg_param_1_7);
    #line 665 
    ldv_free((void *)emg_14_emg_param_1_7);
    #line 667 
    break;
    #line 669 
    case 28: 
             #line 669 
    ;
    #line 671 
    emg_wrapper_bnx2_get_link(emg_14_container);
    #line 673 
    break;
    #line 675 
    case 29: 
             #line 675 
    ;
    #line 677 
    emg_14_emg_param_1_5 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 677 
    emg_14_emg_param_1_5 = emg_14_emg_param_1_5;
    #line 678 
    emg_14_emg_param_2_6 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 678 
    emg_14_emg_param_2_6 = emg_14_emg_param_2_6;
    #line 682 
    emg_wrapper_bnx2_get_ethtool_stats(emg_14_container,emg_14_emg_param_1_5,emg_14_emg_param_2_6);
    #line 686 
    ldv_free((void *)emg_14_emg_param_1_5);
    #line 687 
    ldv_free((void *)emg_14_emg_param_2_6);
    #line 689 
    break;
    #line 691 
    case 30: 
             #line 691 
    ;
    #line 693 
    emg_wrapper_bnx2_get_eeprom_len(emg_14_container);
    #line 695 
    break;
    #line 697 
    case 31: 
             #line 697 
    ;
    #line 699 
    emg_14_emg_param_1_3 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 699 
    emg_14_emg_param_1_3 = emg_14_emg_param_1_3;
    #line 700 
    emg_14_emg_param_2_4 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 700 
    emg_14_emg_param_2_4 = emg_14_emg_param_2_4;
    #line 704 
    emg_wrapper_bnx2_get_eeprom(emg_14_container,emg_14_emg_param_1_3,emg_14_emg_param_2_4);
    #line 708 
    ldv_free((void *)emg_14_emg_param_1_3);
    #line 709 
    ldv_free((void *)emg_14_emg_param_2_4);
    #line 711 
    break;
    #line 713 
    case 32: 
             #line 713 
    ;
    #line 715 
    emg_14_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 715 
    emg_14_emg_param_1_2 = emg_14_emg_param_1_2;
    #line 719 
    emg_wrapper_bnx2_get_drvinfo(emg_14_container,emg_14_emg_param_1_2);
    #line 723 
    ldv_free((void *)emg_14_emg_param_1_2);
    #line 725 
    break;
    #line 727 
    case 33: 
             #line 727 
    ;
    #line 729 
    emg_14_emg_param_1_1 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 729 
    emg_14_emg_param_1_1 = emg_14_emg_param_1_1;
    #line 733 
    emg_wrapper_bnx2_get_coalesce(emg_14_container,emg_14_emg_param_1_1);
    #line 737 
    ldv_free((void *)emg_14_emg_param_1_1);
    #line 739 
    break;
    #line 741 
    case 34: 
             #line 741 
    ;
    #line 743 
    emg_14_emg_param_1_0 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 743 
    emg_14_emg_param_1_0 = emg_14_emg_param_1_0;
    #line 747 
    emg_wrapper_bnx2_get_channels(emg_14_container,emg_14_emg_param_1_0);
    #line 751 
    ldv_free((void *)emg_14_emg_param_1_0);
    #line 754 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 755 
      emg_repeat_cnt_call_14 --;
      #line 757 
      goto emg_call_14;
    }
    else 
         #line 759 
         __VERIFIER_assume(0);
    #line 763 
    break;
    #line 765 
    case 35: 
             #line 765 
    ;
    #line 769 
    break;
    #line 771 
    default: 
             #line 771 
    ;
    #line 771 
    __VERIFIER_assume(0);
  }
  #line 774 
  return (void *)0;
}

#line 779  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_bnx2_pci_driver(void *arg0)
{
  #line 782 
  int emg_15_choice;
  #line 783 
  struct pci_driver *emg_15_container;
  #line 784 
  struct pci_device_id *emg_15_device_id;
  #line 785 
  struct pci_dev *emg_15_resource_0;
  #line 786 
  struct pm_message emg_15_resource_1;
  #line 787 
  int emg_15_ret;
  #line 788 
  int emg_repeat_cnt_call_15_1 = 1;
  #line 789 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 790 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 791 
  int emg_repeat_cnt_call_15_0 = 1;
  #line 793 
  struct emg_struct_pci_scenario_bnx2_pci_driver_15 *data = (struct emg_struct_pci_scenario_bnx2_pci_driver_15 *)arg0;
  #line 797 
  emg_15_choice = 0;
  #line 798 
  emg_15_ret = ldv_undef_int();
  #line 799 
  emg_15_choice = 0;
  #line 800 
  emg_15_container = emg_alias_bnx2_pci_driver;
  #line 801 
  emg_15_ret = ldv_undef_int();
  #line 803 
  __VERIFIER_assume(data->arg0 == emg_alias_bnx2_pci_driver);
  #line 805 
  if (data != (struct emg_struct_pci_scenario_bnx2_pci_driver_15 *)0) {
    #line 806 
    emg_15_container = data->arg0;
    #line 807 
    ldv_free((void *)data);
  }
  #line 812 
  emg_15_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 813 
  emg_15_choice = __ldv_undef_int_range(0,11);
  #line 814 
  emg_15_device_id = emg_15_container->id_table + (unsigned long)emg_15_choice;
  #line 818 
  goto emg_main_15;
  #line 822 
  return (void *)0;
  #line 825 
  emg_call_15: 
               #line 825 
  ;
  #line 826 
  switch (ldv_undef_int()) {
    #line 827 
    case 0: 
            #line 827 
    ;
    #line 832 
    if (emg_repeat_cnt_call_15_0 > 0) {
      #line 833 
      emg_repeat_cnt_call_15_0 --;
      #line 835 
      goto emg_call_15;
    }
    else 
         #line 837 
         __VERIFIER_assume(0);
    #line 841 
    break;
    #line 843 
    case 1: 
            #line 843 
    ;
    #line 845 
    if (emg_15_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 846 
      emg_15_ret = (*(emg_15_container->suspend))(emg_15_resource_0,emg_15_resource_1); else 
                                                                    #line 848 
                                                                    emg_15_ret = ldv_undef_int();
    #line 854 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 858 
    if (emg_15_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 859 
                                                                  (*(emg_15_container->resume))(emg_15_resource_0);
    #line 863 
    if (emg_repeat_cnt_call_15_1 > 0) {
      #line 864 
      emg_repeat_cnt_call_15_1 --;
      #line 866 
      goto emg_call_15;
    }
    else 
         #line 868 
         __VERIFIER_assume(0);
    #line 872 
    break;
    #line 874 
    case 2: 
            #line 874 
    ;
    #line 876 
    emg_wrapper_bnx2_shutdown(emg_15_resource_0);
    #line 880 
    emg_wrapper_bnx2_remove_one(emg_15_resource_0);
    #line 883 
    if (emg_repeat_cnt_main_15_0 > 0) {
      #line 884 
      emg_repeat_cnt_main_15_0 --;
      #line 886 
      goto emg_main_15;
    }
    else 
         #line 888 
         __VERIFIER_assume(0);
    #line 892 
    break;
    #line 894 
    default: 
             #line 894 
    ;
    #line 894 
    __VERIFIER_assume(0);
  }
  #line 897 
  return (void *)0;
  #line 900 
  emg_main_15: 
               #line 900 
  ;
  #line 901 
  if (ldv_undef_int() != 0) {
    #line 904 
    ldv_pre_probe();
    #line 908 
    emg_15_ret = emg_wrapper_bnx2_init_one(emg_15_resource_0,emg_15_device_id);
    #line 913 
    emg_15_ret = ldv_post_probe(emg_15_ret);
    #line 916 
    if (ldv_undef_int() != 0) {
      #line 918 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 922 
      goto emg_call_15;
    }
    else 
         #line 927 
         __VERIFIER_assume(emg_15_ret != 0);
    #line 931 
    if (emg_repeat_cnt_main_15_1 > 0) {
      #line 932 
      emg_repeat_cnt_main_15_1 --;
      #line 934 
      goto emg_main_15;
    }
    else 
         #line 936 
         __VERIFIER_assume(0);
  }
  else 
       #line 942 
       ldv_free((void *)emg_15_resource_0);
  #line 950 
  return (void *)0;
}

#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_bnx2_pm_ops(void *arg0)
{
  #line 958 
  struct device *emg_16_device;
  #line 959 
  struct dev_pm_ops *emg_16_pm_ops;
  #line 960 
  int emg_16_ret;
  #line 961 
  int emg_repeat_cnt_resnoirq_16 = 1;
  #line 962 
  int emg_repeat_cnt_th_16 = 1;
  #line 963 
  int emg_repeat_cnt_fnoirq_16 = 1;
  #line 964 
  int emg_repeat_cnt_rest_16 = 1;
  #line 965 
  int emg_repeat_cnt_res_16 = 1;
  #line 966 
  int emg_repeat_cnt_thlate_16 = 1;
  #line 967 
  int emg_repeat_cnt_flate_16 = 1;
  #line 968 
  int emg_repeat_cnt_plate_16 = 1;
  #line 969 
  int emg_repeat_cnt_reslate_16 = 1;
  #line 970 
  int emg_repeat_cnt_sus_16 = 1;
  #line 971 
  int emg_repeat_cnt_pno_irq_16 = 1;
  #line 972 
  int emg_repeat_cnt_fr_16 = 1;
  #line 973 
  int emg_repeat_cnt_restnoirq_16 = 1;
  #line 974 
  int emg_repeat_cnt_reste_16 = 1;
  #line 975 
  int emg_repeat_cnt_run_resume_16 = 1;
  #line 976 
  int emg_repeat_cnt_slate_16 = 1;
  #line 977 
  int emg_repeat_cnt_poff_16 = 1;
  #line 978 
  int emg_repeat_cnt_tnoirq_16 = 1;
  #line 979 
  int emg_repeat_cnt_no_irq_16 = 1;
  #line 982 
  emg_16_ret = ldv_undef_int();
  #line 983 
  emg_16_pm_ops = emg_alias_bnx2_pm_ops;
  #line 984 
  emg_16_ret = ldv_undef_int();
  #line 990 
  goto emg_do_16;
  #line 994 
  return (void *)0;
  #line 997 
  emg_compl_16: 
                #line 997 
  ;
  #line 999 
  if (emg_16_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 1000 
                                                               (*(emg_16_pm_ops->complete))(emg_16_device);
  #line 1008 
  return (void *)0;
  #line 1011 
  emg_do_16: 
             #line 1011 
  ;
  #line 1012 
  switch (ldv_undef_int()) {
    #line 1013 
    case 0: 
            #line 1013 
    ;
    #line 1015 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 1019 
    goto emg_runt_16;
    #line 1024 
    case 1: 
            #line 1024 
    ;
    #line 1026 
    goto emg_normal_16;
    #line 1031 
    case 2: 
            #line 1031 
    ;
    #line 1035 
    break;
    #line 1037 
    default: 
             #line 1037 
    ;
    #line 1037 
    __VERIFIER_assume(0);
  }
  #line 1040 
  return (void *)0;
  #line 1043 
  emg_flate_16: 
                #line 1043 
  ;
  #line 1045 
  if (emg_16_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 1046 
                                                                 emg_16_ret = (*(emg_16_pm_ops->freeze_late))(emg_16_device); else 
                                                                    #line 1048 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1054 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1057 
  if (ldv_undef_int() != 0) {
    #line 1059 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1063 
    goto emg_thlate_16;
  }
  else 
       #line 1068 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1072 
  if (emg_repeat_cnt_flate_16 > 0) {
    #line 1073 
    emg_repeat_cnt_flate_16 --;
    #line 1075 
    goto emg_flate_16;
  }
  else 
       #line 1077 
       __VERIFIER_assume(0);
  #line 1082 
  return (void *)0;
  #line 1085 
  emg_fnoirq_16: 
                 #line 1085 
  ;
  #line 1087 
  if (emg_16_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 1088 
                                                                  emg_16_ret = (*(emg_16_pm_ops->freeze_noirq))(emg_16_device); else 
                                                                    #line 1090 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1096 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1099 
  if (ldv_undef_int() != 0) {
    #line 1101 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1105 
    goto emg_tnoirq_16;
  }
  else 
       #line 1110 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1114 
  if (emg_repeat_cnt_fnoirq_16 > 0) {
    #line 1115 
    emg_repeat_cnt_fnoirq_16 --;
    #line 1117 
    goto emg_fnoirq_16;
  }
  else 
       #line 1119 
       __VERIFIER_assume(0);
  #line 1124 
  return (void *)0;
  #line 1127 
  emg_fr_16: 
             #line 1127 
  ;
  #line 1129 
  emg_16_ret = emg_wrapper_bnx2_suspend(emg_16_device);
  #line 1134 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1137 
  if (ldv_undef_int() != 0) {
    #line 1139 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1142 
    if (ldv_undef_int() != 0) 
                              #line 1144 
                              goto emg_fnoirq_16; else 
                                                       #line 1149 
                                                       goto emg_flate_16;
  }
  else {
    #line 1155 
    __VERIFIER_assume(emg_16_ret != 0);
    #line 1158 
    if (emg_repeat_cnt_fr_16 > 0) {
      #line 1159 
      emg_repeat_cnt_fr_16 --;
      #line 1161 
      goto emg_fr_16;
    }
    else 
         #line 1163 
         __VERIFIER_assume(0);
  }
  #line 1169 
  return (void *)0;
  #line 1172 
  emg_no_irq_16: 
                 #line 1172 
  ;
  #line 1174 
  if (emg_16_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 1175 
                                                                   emg_16_ret = (*(emg_16_pm_ops->suspend_noirq))(emg_16_device); else 
                                                                    #line 1177 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1183 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1186 
  if (ldv_undef_int() != 0) {
    #line 1188 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1192 
    goto emg_resnoirq_16;
  }
  else 
       #line 1197 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1201 
  if (emg_repeat_cnt_no_irq_16 > 0) {
    #line 1202 
    emg_repeat_cnt_no_irq_16 --;
    #line 1204 
    goto emg_no_irq_16;
  }
  else 
       #line 1206 
       __VERIFIER_assume(0);
  #line 1211 
  return (void *)0;
  #line 1214 
  emg_normal_16: 
                 #line 1214 
  ;
  #line 1216 
  if (emg_16_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 1217 
                                                             emg_16_ret = (*(emg_16_pm_ops->prepare))(emg_16_device); else 
                                                                    #line 1219 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1225 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1228 
  if (ldv_undef_int() != 0) {
    #line 1230 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1233 
    switch (ldv_undef_int()) {
      #line 1234 
      case 0: 
              #line 1234 
      ;
      #line 1236 
      goto emg_sus_16;
      #line 1241 
      case 1: 
              #line 1241 
      ;
      #line 1243 
      goto emg_fr_16;
      #line 1248 
      case 2: 
              #line 1248 
      ;
      #line 1250 
      goto emg_poff_16;
      #line 1255 
      default: 
               #line 1255 
      ;
      #line 1255 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1259 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1267 
  return (void *)0;
  #line 1270 
  emg_plate_16: 
                #line 1270 
  ;
  #line 1272 
  if (emg_16_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1273 
                                                                   emg_16_ret = (*(emg_16_pm_ops->poweroff_late))(emg_16_device); else 
                                                                    #line 1275 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1281 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1284 
  if (ldv_undef_int() != 0) {
    #line 1286 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1290 
    goto emg_reste_16;
  }
  else 
       #line 1295 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1299 
  if (emg_repeat_cnt_plate_16 > 0) {
    #line 1300 
    emg_repeat_cnt_plate_16 --;
    #line 1302 
    goto emg_plate_16;
  }
  else 
       #line 1304 
       __VERIFIER_assume(0);
  #line 1309 
  return (void *)0;
  #line 1312 
  emg_pno_irq_16: 
                  #line 1312 
  ;
  #line 1314 
  if (emg_16_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 1315 
                                                                    emg_16_ret = (*(emg_16_pm_ops->poweroff_noirq))(emg_16_device); else 
                                                                    #line 1317 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1323 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1326 
  if (ldv_undef_int() != 0) {
    #line 1328 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1332 
    goto emg_restnoirq_16;
  }
  else 
       #line 1337 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1341 
  if (emg_repeat_cnt_pno_irq_16 > 0) {
    #line 1342 
    emg_repeat_cnt_pno_irq_16 --;
    #line 1344 
    goto emg_pno_irq_16;
  }
  else 
       #line 1346 
       __VERIFIER_assume(0);
  #line 1351 
  return (void *)0;
  #line 1354 
  emg_poff_16: 
               #line 1354 
  ;
  #line 1356 
  emg_16_ret = emg_wrapper_bnx2_suspend(emg_16_device);
  #line 1361 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1364 
  if (ldv_undef_int() != 0) {
    #line 1366 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1369 
    if (ldv_undef_int() != 0) 
                              #line 1371 
                              goto emg_pno_irq_16; else 
                                                        #line 1376 
                                                        goto emg_plate_16;
  }
  else {
    #line 1382 
    __VERIFIER_assume(emg_16_ret != 0);
    #line 1385 
    if (emg_repeat_cnt_poff_16 > 0) {
      #line 1386 
      emg_repeat_cnt_poff_16 --;
      #line 1388 
      goto emg_poff_16;
    }
    else 
         #line 1390 
         __VERIFIER_assume(0);
  }
  #line 1396 
  return (void *)0;
  #line 1399 
  emg_res_16: 
              #line 1399 
  ;
  #line 1401 
  emg_16_ret = emg_wrapper_bnx2_resume(emg_16_device);
  #line 1406 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1409 
  if (ldv_undef_int() != 0) {
    #line 1411 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1415 
    goto emg_compl_16;
  }
  else {
    #line 1420 
    __VERIFIER_assume(emg_16_ret != 0);
    #line 1423 
    if (emg_repeat_cnt_res_16 > 0) {
      #line 1424 
      emg_repeat_cnt_res_16 --;
      #line 1426 
      goto emg_res_16;
    }
    else 
         #line 1428 
         __VERIFIER_assume(0);
  }
  #line 1434 
  return (void *)0;
  #line 1437 
  emg_reslate_16: 
                  #line 1437 
  ;
  #line 1439 
  if (emg_16_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 1440 
                                                                  emg_16_ret = (*(emg_16_pm_ops->resume_early))(emg_16_device); else 
                                                                    #line 1442 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1448 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1451 
  if (ldv_undef_int() != 0) {
    #line 1453 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1457 
    goto emg_res_16;
  }
  else 
       #line 1462 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1466 
  if (emg_repeat_cnt_reslate_16 > 0) {
    #line 1467 
    emg_repeat_cnt_reslate_16 --;
    #line 1469 
    goto emg_reslate_16;
  }
  else 
       #line 1471 
       __VERIFIER_assume(0);
  #line 1476 
  return (void *)0;
  #line 1479 
  emg_resnoirq_16: 
                   #line 1479 
  ;
  #line 1481 
  if (emg_16_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 1482 
                                                                  emg_16_ret = (*(emg_16_pm_ops->resume_noirq))(emg_16_device); else 
                                                                    #line 1484 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1490 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1493 
  if (ldv_undef_int() != 0) {
    #line 1495 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1499 
    goto emg_res_16;
  }
  else 
       #line 1504 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1508 
  if (emg_repeat_cnt_resnoirq_16 > 0) {
    #line 1509 
    emg_repeat_cnt_resnoirq_16 --;
    #line 1511 
    goto emg_resnoirq_16;
  }
  else 
       #line 1513 
       __VERIFIER_assume(0);
  #line 1518 
  return (void *)0;
  #line 1521 
  emg_rest_16: 
               #line 1521 
  ;
  #line 1523 
  emg_16_ret = emg_wrapper_bnx2_resume(emg_16_device);
  #line 1528 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1531 
  if (ldv_undef_int() != 0) {
    #line 1533 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1537 
    goto emg_compl_16;
  }
  else {
    #line 1542 
    __VERIFIER_assume(emg_16_ret != 0);
    #line 1545 
    if (emg_repeat_cnt_rest_16 > 0) {
      #line 1546 
      emg_repeat_cnt_rest_16 --;
      #line 1548 
      goto emg_rest_16;
    }
    else 
         #line 1550 
         __VERIFIER_assume(0);
  }
  #line 1556 
  return (void *)0;
  #line 1559 
  emg_reste_16: 
                #line 1559 
  ;
  #line 1561 
  if (emg_16_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 1562 
                                                                   emg_16_ret = (*(emg_16_pm_ops->restore_early))(emg_16_device); else 
                                                                    #line 1564 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1570 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1573 
  if (ldv_undef_int() != 0) {
    #line 1575 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1579 
    goto emg_rest_16;
  }
  else 
       #line 1584 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1588 
  if (emg_repeat_cnt_reste_16 > 0) {
    #line 1589 
    emg_repeat_cnt_reste_16 --;
    #line 1591 
    goto emg_reste_16;
  }
  else 
       #line 1593 
       __VERIFIER_assume(0);
  #line 1598 
  return (void *)0;
  #line 1601 
  emg_restnoirq_16: 
                    #line 1601 
  ;
  #line 1603 
  if (emg_16_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 1604 
                                                                   emg_16_ret = (*(emg_16_pm_ops->restore_noirq))(emg_16_device); else 
                                                                    #line 1606 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1612 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1615 
  if (ldv_undef_int() != 0) {
    #line 1617 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1621 
    goto emg_rest_16;
  }
  else 
       #line 1626 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1630 
  if (emg_repeat_cnt_restnoirq_16 > 0) {
    #line 1631 
    emg_repeat_cnt_restnoirq_16 --;
    #line 1633 
    goto emg_restnoirq_16;
  }
  else 
       #line 1635 
       __VERIFIER_assume(0);
  #line 1640 
  return (void *)0;
  #line 1643 
  emg_run_resume_16: 
                     #line 1643 
  ;
  #line 1645 
  if (emg_16_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 1646 
                                                                    emg_16_ret = (*(emg_16_pm_ops->runtime_resume))(emg_16_device); else 
                                                                    #line 1648 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1654 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1655 
  if (emg_16_ret != 0) 
                       #line 1656 
                       emg_runtime_lowpower = 0;
  #line 1659 
  if (ldv_undef_int() != 0) 
                            #line 1661 
                            __VERIFIER_assume(emg_16_ret == 0);
  else {
    #line 1665 
    __VERIFIER_assume(emg_16_ret != 0);
    #line 1668 
    if (emg_repeat_cnt_run_resume_16 > 0) {
      #line 1669 
      emg_repeat_cnt_run_resume_16 --;
      #line 1671 
      goto emg_run_resume_16;
    }
    else 
         #line 1673 
         __VERIFIER_assume(0);
  }
  #line 1683 
  return (void *)0;
  #line 1686 
  emg_runt_16: 
               #line 1686 
  ;
  #line 1687 
  if (ldv_undef_int() != 0) {
    #line 1689 
    if (emg_16_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 1690 
                                                                    emg_16_ret = (*(emg_16_pm_ops->runtime_idle))(emg_16_device); else 
                                                                    #line 1692 
                                                                    emg_16_ret = ldv_undef_int();
    #line 1698 
    emg_16_ret = ldv_post_probe(emg_16_ret);
  }
  else {
    #line 1702 
    if (emg_16_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 1703 
      emg_16_ret = (*(emg_16_pm_ops->runtime_suspend))(emg_16_device); else 
                                                                    #line 1705 
                                                                    emg_16_ret = ldv_undef_int();
    #line 1711 
    emg_16_ret = ldv_post_probe(emg_16_ret);
    #line 1712 
    if (emg_16_ret != 0) 
                         #line 1713 
                         emg_runtime_lowpower = 1;
    #line 1716 
    if (ldv_undef_int() != 0) {
      #line 1718 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 1722 
      goto emg_run_resume_16;
    }
    else 
         #line 1727 
         __VERIFIER_assume(emg_16_ret != 0);
  }
  #line 1736 
  return (void *)0;
  #line 1739 
  emg_slate_16: 
                #line 1739 
  ;
  #line 1741 
  if (emg_16_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 1742 
                                                                  emg_16_ret = (*(emg_16_pm_ops->suspend_late))(emg_16_device); else 
                                                                    #line 1744 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1750 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1753 
  if (ldv_undef_int() != 0) {
    #line 1755 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1759 
    goto emg_reslate_16;
  }
  else 
       #line 1764 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1768 
  if (emg_repeat_cnt_slate_16 > 0) {
    #line 1769 
    emg_repeat_cnt_slate_16 --;
    #line 1771 
    goto emg_slate_16;
  }
  else 
       #line 1773 
       __VERIFIER_assume(0);
  #line 1778 
  return (void *)0;
  #line 1781 
  emg_sus_16: 
              #line 1781 
  ;
  #line 1783 
  emg_16_ret = emg_wrapper_bnx2_suspend(emg_16_device);
  #line 1788 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1791 
  if (ldv_undef_int() != 0) {
    #line 1793 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1796 
    if (ldv_undef_int() != 0) 
                              #line 1798 
                              goto emg_no_irq_16; else 
                                                       #line 1803 
                                                       goto emg_slate_16;
  }
  else {
    #line 1809 
    __VERIFIER_assume(emg_16_ret != 0);
    #line 1812 
    if (emg_repeat_cnt_sus_16 > 0) {
      #line 1813 
      emg_repeat_cnt_sus_16 --;
      #line 1815 
      goto emg_sus_16;
    }
    else 
         #line 1817 
         __VERIFIER_assume(0);
  }
  #line 1823 
  return (void *)0;
  #line 1826 
  emg_th_16: 
             #line 1826 
  ;
  #line 1828 
  emg_16_ret = emg_wrapper_bnx2_resume(emg_16_device);
  #line 1833 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1836 
  if (ldv_undef_int() != 0) {
    #line 1838 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1842 
    goto emg_compl_16;
  }
  else {
    #line 1847 
    __VERIFIER_assume(emg_16_ret != 0);
    #line 1850 
    if (emg_repeat_cnt_th_16 > 0) {
      #line 1851 
      emg_repeat_cnt_th_16 --;
      #line 1853 
      goto emg_th_16;
    }
    else 
         #line 1855 
         __VERIFIER_assume(0);
  }
  #line 1861 
  return (void *)0;
  #line 1864 
  emg_thlate_16: 
                 #line 1864 
  ;
  #line 1866 
  if (emg_16_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 1867 
                                                                emg_16_ret = (*(emg_16_pm_ops->thaw_early))(emg_16_device); else 
                                                                    #line 1869 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1875 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1878 
  if (ldv_undef_int() != 0) {
    #line 1880 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1884 
    goto emg_th_16;
  }
  else 
       #line 1889 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1893 
  if (emg_repeat_cnt_thlate_16 > 0) {
    #line 1894 
    emg_repeat_cnt_thlate_16 --;
    #line 1896 
    goto emg_thlate_16;
  }
  else 
       #line 1898 
       __VERIFIER_assume(0);
  #line 1903 
  return (void *)0;
  #line 1906 
  emg_tnoirq_16: 
                 #line 1906 
  ;
  #line 1908 
  if (emg_16_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 1909 
                                                                emg_16_ret = (*(emg_16_pm_ops->thaw_noirq))(emg_16_device); else 
                                                                    #line 1911 
                                                                    emg_16_ret = ldv_undef_int();
  #line 1917 
  emg_16_ret = ldv_post_probe(emg_16_ret);
  #line 1920 
  if (ldv_undef_int() != 0) {
    #line 1922 
    __VERIFIER_assume(emg_16_ret == 0);
    #line 1926 
    goto emg_th_16;
  }
  else 
       #line 1931 
       __VERIFIER_assume(emg_16_ret != 0);
  #line 1935 
  if (emg_repeat_cnt_tnoirq_16 > 0) {
    #line 1936 
    emg_repeat_cnt_tnoirq_16 --;
    #line 1938 
    goto emg_tnoirq_16;
  }
  else 
       #line 1940 
       __VERIFIER_assume(0);
  #line 1945 
  return (void *)0;
}

#line 1950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_4(void *arg0)
{
  #line 1953 
  struct timer_list *emg_17_container;
  #line 1954 
  unsigned long emg_17_emg_param_0_0;
  #line 1956 
  struct emg_struct_timer_scenario_4_17 *data = (struct emg_struct_timer_scenario_4_17 *)arg0;
  #line 1961 
  if (data != (struct emg_struct_timer_scenario_4_17 *)0) {
    #line 1962 
    emg_17_container = data->arg0;
    #line 1963 
    ldv_free((void *)data);
  }
  #line 1969 
  ldv_switch_to_interrupt_context();
  #line 1973 
  if (emg_17_container->function != (void (*)(struct timer_list *))0) 
    #line 1974 
    (*(emg_17_container->function))((struct timer_list *)emg_17_emg_param_0_0);
  #line 1980 
  ldv_switch_to_process_context();
  #line 1987 
  return (void *)0;
}

#line 1992  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1995 
  struct pci_driver *emg_2_pci_driver;
  #line 1997 
  emg_2_pci_driver = emg_alias_bnx2_pci_driver;
  #line 1998 
  if (ldv_undef_int() != 0) {
    #line 2000 
    emg_2_pci_driver = arg0;
    #line 2004 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 2008 
    return 0;
  }
  else {
    #line 2012 
    return ldv_undef_int_negative();
  }
}

#line 2020  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2023 
  struct net_device *emg_3_netdev;
  #line 2025 
  if (ldv_undef_int() != 0) {
    #line 2027 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2031 
    return emg_3_netdev;
  }
  else 
       #line 2035 
       return (struct net_device *)0;
}

#line 2043  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 2046 
  struct timer_list *emg_4_timer_list;
  #line 2049 
  emg_4_timer_list = arg0;
  #line 2053 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 2054 
  ;
  #line 2054 
  return 0;
}

#line 2060  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 2063 
  int emg_5_line;
  #line 2066 
  emg_5_line = (int)arg0;
  #line 2070 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 2071 
  ;
  #line 2071 
  return (void *)0;
}

#line 2077  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2080 
  struct net_device *emg_6_netdev;
  #line 2083 
  emg_6_netdev = arg0;
  #line 2084 
  ldv_free((void *)emg_6_netdev);
  #line 2087 
  return;
}

#line 2092  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 2095 
  struct timer_list *emg_7_timer_list;
  #line 2097 
  if (ldv_undef_int() != 0) {
    #line 2099 
    emg_7_timer_list = arg0;
    #line 2103 
    emg_dispatch_instance_register_7(emg_7_timer_list);
    #line 2107 
    return 1;
  }
  else 
       #line 2111 
       return 0;
}

#line 2119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2122 
  struct pci_driver *emg_8_pci_driver;
  #line 2124 
  emg_8_pci_driver = emg_alias_bnx2_pci_driver;
  #line 2126 
  emg_8_pci_driver = arg0;
  #line 2130 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 2133 
  return;
}

#line 2138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2141 
  struct net_device *emg_9_netdev;
  #line 2142 
  int emg_9_ret;
  #line 2145 
  emg_9_ret = ldv_undef_int();
  #line 2146 
  emg_9_ret = ldv_undef_int();
  #line 2147 
  if (ldv_undef_int() != 0) {
    #line 2149 
    emg_9_netdev = arg0;
    #line 2153 
    emg_9_ret = emg_wrapper_bnx2_open(emg_9_netdev);
    #line 2156 
    if (ldv_undef_int() != 0) {
      #line 2158 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 2162 
      emg_dispatch_register_9(emg_9_netdev);
      #line 2166 
      return 0;
    }
    else {
      #line 2170 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 2171 
      ldv_failed_register_netdev();
      #line 2172 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2177 
    ldv_failed_register_netdev();
    #line 2178 
    return ldv_undef_int_negative();
  }
}

#line 2186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2189 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 2190 
  void *emg_10_data;
  #line 2191 
  int emg_10_line;
  #line 2192 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 2194 
  if (ldv_undef_int() != 0) {
    #line 2196 
    emg_10_line = (int)arg0;
    #line 2197 
    emg_10_callback = arg1;
    #line 2198 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 2199 
    emg_10_data = arg4;
    #line 2203 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 2207 
    return 0;
  }
  else {
    #line 2211 
    return ldv_undef_int_negative();
  }
}

#line 2219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 2222 
  struct work_struct *emg_11_work_struct;
  #line 2224 
  if (ldv_undef_int() != 0) {
    #line 2226 
    emg_11_work_struct = arg0;
    #line 2230 
    if (emg_11_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2231 
      (*(emg_11_work_struct->func))(emg_11_work_struct);
    #line 2236 
    return (_Bool)1;
  }
  else 
       #line 2240 
       return (_Bool)0;
}

#line 2248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2251 
  struct net_device *emg_12_netdev;
  #line 2254 
  emg_12_netdev = arg0;
  #line 2258 
  emg_wrapper_bnx2_close(emg_12_netdev);
  #line 2262 
  emg_dispatch_deregister_12(emg_12_netdev);
  #line 2265 
  return;
}

#line 2270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2273 
  int emg_1_ret;
  #line 2276 
  emg_1_ret = emg_bnx2_pci_driver_init();
  #line 2277 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2280 
  if (ldv_undef_int() != 0) {
    #line 2282 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2286 
    emg_bnx2_pci_driver_exit();
  }
  else 
       #line 2290 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2294 
  return (void *)0;
}

#line 2299  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/bnx2.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2301 
  ldv_initialize();
  #line 2303 
  emg_entry_point_insmod((void *)0);
  #line 2305 
  return 0;
}

