/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_hwmon.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
struct i2c_client;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
struct pci_dev;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
struct resource;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_121 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_121 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_device_crosststamp {
   ktime_t device ;
   ktime_t sys_realtime ;
   ktime_t sys_monoraw ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_168 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_168 nodemask_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 212 
struct ldt_struct;
#line 212 
struct vdso_image;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct __anonstruct_mm_context_t_169 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
typedef struct __anonstruct_mm_context_t_169 mm_context_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct workqueue_struct;
#line 48 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_184 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_185 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_183 {
   struct __anonstruct_184 __anonCompField___anonunion_183_29 ;
   struct __anonstruct_185 __anonCompField___anonunion_183_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_183 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_187 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_188 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_191 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_190 {
   struct list_head slab_list ;
   struct __anonstruct_191 __anonCompField___anonunion_190_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_193 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_192 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_193 __anonCompField___anonunion_192_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_189 {
   union __anonunion_190 __anonCompField___anonstruct_189_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_192 __anonCompField___anonstruct_189_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_194 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_195 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_197 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_196 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_197 __anonCompField___anonstruct_196_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_198 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_186 {
   struct __anonstruct_187 __anonCompField___anonunion_186_32 ;
   struct __anonstruct_188 __anonCompField___anonunion_186_33 ;
   struct __anonstruct_189 __anonCompField___anonunion_186_38 ;
   struct __anonstruct_194 __anonCompField___anonunion_186_39 ;
   struct __anonstruct_195 __anonCompField___anonunion_186_40 ;
   struct __anonstruct_196 __anonCompField___anonunion_186_42 ;
   struct __anonstruct_198 __anonCompField___anonunion_186_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_199 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_186 __anonCompField_page_44 ;
   union __anonunion_199 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_200 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_200 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_201 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_201 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_252 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_252 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_253 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_253 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct vmem_altmap;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_280 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_280 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_281 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_282 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_283 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_284 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_287 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_288 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_286 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_287 _addr_bnd ;
   struct __anonstruct__addr_pkey_288 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_285 {
   void *_addr ;
   union __anonunion_286 __anonCompField___anonstruct__sigfault_285_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_289 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_290 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_281 _kill ;
   struct __anonstruct__timer_282 _timer ;
   struct __anonstruct__rt_283 _rt ;
   struct __anonstruct__sigchld_284 _sigchld ;
   struct __anonstruct__sigfault_285 _sigfault ;
   struct __anonstruct__sigpoll_289 _sigpoll ;
   struct __anonstruct__sigsys_290 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_295 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_295 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_300 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_300 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_302 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_302 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_381 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_383 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_382 {
   unsigned long nr_segs ;
   struct __anonstruct_383 __anonCompField___anonunion_382_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_381 __anonCompField_iov_iter_53 ;
   union __anonunion_382 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_386 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_386 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_387 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_387 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_388 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_388 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_389 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_389 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_390 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_390 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_391 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_391 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_392 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_392 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_393 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_393 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_394 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_395 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_394 ifr_ifrn ;
   union __anonunion_ifr_ifru_395 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_410 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_409 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_412 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_411 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_413 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_414 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_413 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_414 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_432 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_432 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_433 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_434 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_433 __anonCompField_io_cq_65 ;
   union __anonunion_434 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 290 
struct kobject;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_435 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_435 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_436 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_436 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_443 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628 
struct cdev;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_444 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_441 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_442 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_443 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_444 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_445 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_445 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_447 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_446 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_447 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_446 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_495 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_495 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct irq_domain;
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_498 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_498 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_499 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_499 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_521 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_520 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_521 __anonCompField___anonstruct_520_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_519 {
   struct __anonstruct_520 __anonCompField___anonunion_519_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_522 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_525 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_524 {
   struct __anonstruct_525 __anonCompField___anonunion_524_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_527 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   __wsum csum ;
   struct __anonstruct_527 __anonCompField___anonunion_526_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_529 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_519 __anonCompField_sk_buff_88 ;
   union __anonunion_522 __anonCompField_sk_buff_89 ;
   union __anonunion_523 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_524 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_526 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_528 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_529 __anonCompField_sk_buff_96 ;
   union __anonunion_530 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14517 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14518 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14517 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14518 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 4917 
struct e1000_hw;
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_regs.h"
enum e1000_mac_type {
    e1000_undefined = 0,
    e1000_82575 = 1,
    e1000_82576 = 2,
    e1000_82580 = 3,
    e1000_i350 = 4,
    e1000_i354 = 5,
    e1000_i210 = 6,
    e1000_i211 = 7,
    e1000_num_macs = 8
};
#line 366 
enum e1000_media_type {
    e1000_media_type_unknown = 0,
    e1000_media_type_copper = 1,
    e1000_media_type_fiber = 2,
    e1000_media_type_internal_serdes = 3,
    e1000_num_media_types = 4
};
#line 374 
enum e1000_nvm_type {
    e1000_nvm_unknown = 0,
    e1000_nvm_none = 1,
    e1000_nvm_eeprom_spi = 2,
    e1000_nvm_flash_hw = 3,
    e1000_nvm_invm = 4,
    e1000_nvm_flash_sw = 5
};
#line 383 
enum e1000_nvm_override {
    e1000_nvm_override_none = 0,
    e1000_nvm_override_spi_small = 1,
    e1000_nvm_override_spi_large = 2
};
#line 389 
enum e1000_phy_type {
    e1000_phy_unknown = 0,
    e1000_phy_none = 1,
    e1000_phy_m88 = 2,
    e1000_phy_igp = 3,
    e1000_phy_igp_2 = 4,
    e1000_phy_gg82563 = 5,
    e1000_phy_igp_3 = 6,
    e1000_phy_ife = 7,
    e1000_phy_82580 = 8,
    e1000_phy_i210 = 9,
    e1000_phy_bcm54616 = 10
};
#line 403 
enum e1000_bus_type {
    e1000_bus_type_unknown = 0,
    e1000_bus_type_pci = 1,
    e1000_bus_type_pcix = 2,
    e1000_bus_type_pci_express = 3,
    e1000_bus_type_reserved = 4
};
#line 411 
enum e1000_bus_speed {
    e1000_bus_speed_unknown = 0,
    e1000_bus_speed_33 = 1,
    e1000_bus_speed_66 = 2,
    e1000_bus_speed_100 = 3,
    e1000_bus_speed_120 = 4,
    e1000_bus_speed_133 = 5,
    e1000_bus_speed_2500 = 6,
    e1000_bus_speed_5000 = 7,
    e1000_bus_speed_reserved = 8
};
#line 423 
enum e1000_bus_width {
    e1000_bus_width_unknown = 0,
    e1000_bus_width_pcie_x1 = 1,
    e1000_bus_width_pcie_x2 = 2,
    e1000_bus_width_pcie_x4 = 4,
    e1000_bus_width_pcie_x8 = 8,
    e1000_bus_width_32 = 9,
    e1000_bus_width_64 = 10,
    e1000_bus_width_reserved = 11
};
#line 434 
enum e1000_1000t_rx_status {
    e1000_1000t_rx_status_not_ok = 0,
    e1000_1000t_rx_status_ok = 1,
    e1000_1000t_rx_status_undefined = 255
};
#line 440 
enum e1000_rev_polarity {
    e1000_rev_polarity_normal = 0,
    e1000_rev_polarity_reversed = 1,
    e1000_rev_polarity_undefined = 255
};
#line 446 
enum e1000_fc_mode {
    e1000_fc_none = 0,
    e1000_fc_rx_pause = 1,
    e1000_fc_tx_pause = 2,
    e1000_fc_full = 3,
    e1000_fc_default = 255
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_hw_stats {
   u64 crcerrs ;
   u64 algnerrc ;
   u64 symerrs ;
   u64 rxerrc ;
   u64 mpc ;
   u64 scc ;
   u64 ecol ;
   u64 mcc ;
   u64 latecol ;
   u64 colc ;
   u64 dc ;
   u64 tncrs ;
   u64 sec ;
   u64 cexterr ;
   u64 rlec ;
   u64 xonrxc ;
   u64 xontxc ;
   u64 xoffrxc ;
   u64 xofftxc ;
   u64 fcruc ;
   u64 prc64 ;
   u64 prc127 ;
   u64 prc255 ;
   u64 prc511 ;
   u64 prc1023 ;
   u64 prc1522 ;
   u64 gprc ;
   u64 bprc ;
   u64 mprc ;
   u64 gptc ;
   u64 gorc ;
   u64 gotc ;
   u64 rnbc ;
   u64 ruc ;
   u64 rfc ;
   u64 roc ;
   u64 rjc ;
   u64 mgprc ;
   u64 mgpdc ;
   u64 mgptc ;
   u64 tor ;
   u64 tot ;
   u64 tpr ;
   u64 tpt ;
   u64 ptc64 ;
   u64 ptc127 ;
   u64 ptc255 ;
   u64 ptc511 ;
   u64 ptc1023 ;
   u64 ptc1522 ;
   u64 mptc ;
   u64 bptc ;
   u64 tsctc ;
   u64 tsctfc ;
   u64 iac ;
   u64 icrxptc ;
   u64 icrxatc ;
   u64 ictxptc ;
   u64 ictxatc ;
   u64 ictxqec ;
   u64 ictxqmtc ;
   u64 icrxdmtc ;
   u64 icrxoc ;
   u64 cbtmpc ;
   u64 htdpmc ;
   u64 cbrdpc ;
   u64 cbrmpc ;
   u64 rpthc ;
   u64 hgptc ;
   u64 htcbdpc ;
   u64 hgorc ;
   u64 hgotc ;
   u64 lenerrs ;
   u64 scvpc ;
   u64 hrmpc ;
   u64 doosync ;
   u64 o2bgptc ;
   u64 o2bspc ;
   u64 b2ospc ;
   u64 b2ogprc ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_host_mng_dhcp_cookie {
   u32 signature ;
   u8 status ;
   u8 reserved0 ;
   u16 vlan_id ;
   u32 reserved1 ;
   u16 reserved2 ;
   u8 reserved3 ;
   u8 checksum ;
};
#line 289 
enum e1000_ms_type {
    e1000_ms_hw_default = 0,
    e1000_ms_force_master = 1,
    e1000_ms_force_slave = 2,
    e1000_ms_auto = 3
};
#line 296 
enum e1000_smart_speed {
    e1000_smart_speed_default = 0,
    e1000_smart_speed_on = 1,
    e1000_smart_speed_off = 2
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.h"
struct e1000_sfp_flags {
   u8 e1000_base_sx : 1 ;
   u8 e1000_base_lx : 1 ;
   u8 e1000_base_cx : 1 ;
   u8 e1000_base_t : 1 ;
   u8 e100_base_lx : 1 ;
   u8 e100_base_fx : 1 ;
   u8 e10_base_bx10 : 1 ;
   u8 e10_base_px : 1 ;
};
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_mac_operations {
   s32 (*check_for_link)(struct e1000_hw *) ;
   s32 (*reset_hw)(struct e1000_hw *) ;
   s32 (*init_hw)(struct e1000_hw *) ;
   bool (*check_mng_mode)(struct e1000_hw *) ;
   s32 (*setup_physical_interface)(struct e1000_hw *) ;
   void (*rar_set)(struct e1000_hw *, u8 *, u32 ) ;
   s32 (*read_mac_addr)(struct e1000_hw *) ;
   s32 (*get_speed_and_duplex)(struct e1000_hw *, u16 *, u16 *) ;
   s32 (*acquire_swfw_sync)(struct e1000_hw *, u16 ) ;
   void (*release_swfw_sync)(struct e1000_hw *, u16 ) ;
   s32 (*get_thermal_sensor_data)(struct e1000_hw *) ;
   s32 (*init_thermal_sensor_thresh)(struct e1000_hw *) ;
   void (*write_vfta)(struct e1000_hw *, u32 , u32 ) ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_phy_operations {
   s32 (*acquire)(struct e1000_hw *) ;
   s32 (*check_polarity)(struct e1000_hw *) ;
   s32 (*check_reset_block)(struct e1000_hw *) ;
   s32 (*force_speed_duplex)(struct e1000_hw *) ;
   s32 (*get_cfg_done)(struct e1000_hw *) ;
   s32 (*get_cable_length)(struct e1000_hw *) ;
   s32 (*get_phy_info)(struct e1000_hw *) ;
   s32 (*read_reg)(struct e1000_hw *, u32 , u16 *) ;
   void (*release)(struct e1000_hw *) ;
   s32 (*reset)(struct e1000_hw *) ;
   s32 (*set_d0_lplu_state)(struct e1000_hw *, bool ) ;
   s32 (*set_d3_lplu_state)(struct e1000_hw *, bool ) ;
   s32 (*write_reg)(struct e1000_hw *, u32 , u16 ) ;
   s32 (*read_i2c_byte)(struct e1000_hw *, u8 , u8 , u8 *) ;
   s32 (*write_i2c_byte)(struct e1000_hw *, u8 , u8 , u8 ) ;
};
#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_nvm_operations {
   s32 (*acquire)(struct e1000_hw *) ;
   s32 (*read)(struct e1000_hw *, u16 , u16 , u16 *) ;
   void (*release)(struct e1000_hw *) ;
   s32 (*write)(struct e1000_hw *, u16 , u16 , u16 *) ;
   s32 (*update)(struct e1000_hw *) ;
   s32 (*validate)(struct e1000_hw *) ;
   s32 (*valid_led_default)(struct e1000_hw *, u16 *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_thermal_diode_data {
   u8 location ;
   u8 temp ;
   u8 caution_thresh ;
   u8 max_op_thresh ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_thermal_sensor_data {
   struct e1000_thermal_diode_data sensor[3U] ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_info {
   s32 (*get_invariants)(struct e1000_hw *) ;
   struct e1000_mac_operations *mac_ops ;
   struct e1000_phy_operations *phy_ops ;
   struct e1000_nvm_operations *nvm_ops ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_mac_info {
   struct e1000_mac_operations ops ;
   u8 addr[6U] ;
   u8 perm_addr[6U] ;
   enum e1000_mac_type type ;
   u32 ledctl_default ;
   u32 ledctl_mode1 ;
   u32 ledctl_mode2 ;
   u32 mc_filter_type ;
   u32 txcw ;
   u16 mta_reg_count ;
   u16 uta_reg_count ;
   u32 mta_shadow[128U] ;
   u16 rar_entry_count ;
   u8 forced_speed_duplex ;
   bool adaptive_ifs ;
   bool arc_subsystem_valid ;
   bool asf_firmware_present ;
   bool autoneg ;
   bool autoneg_failed ;
   bool disable_hw_init_bits ;
   bool get_link_status ;
   bool ifs_params_forced ;
   bool in_ifs_mode ;
   bool report_tx_early ;
   bool serdes_has_link ;
   bool tx_pkt_filtering ;
   struct e1000_thermal_sensor_data thermal_sensor_data ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_phy_info {
   struct e1000_phy_operations ops ;
   enum e1000_phy_type type ;
   enum e1000_1000t_rx_status local_rx ;
   enum e1000_1000t_rx_status remote_rx ;
   enum e1000_ms_type ms_type ;
   enum e1000_ms_type original_ms_type ;
   enum e1000_rev_polarity cable_polarity ;
   enum e1000_smart_speed smart_speed ;
   u32 addr ;
   u32 id ;
   u32 reset_delay_us ;
   u32 revision ;
   enum e1000_media_type media_type ;
   u16 autoneg_advertised ;
   u16 autoneg_mask ;
   u16 cable_length ;
   u16 max_cable_length ;
   u16 min_cable_length ;
   u16 pair_length[4U] ;
   u8 mdix ;
   bool disable_polarity_correction ;
   bool is_mdix ;
   bool polarity_correction ;
   bool reset_disable ;
   bool speed_downgraded ;
   bool autoneg_wait_to_complete ;
};
#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_nvm_info {
   struct e1000_nvm_operations ops ;
   enum e1000_nvm_type type ;
   enum e1000_nvm_override override ;
   u32 flash_bank_size ;
   u32 flash_base_addr ;
   u16 word_size ;
   u16 delay_usec ;
   u16 address_bits ;
   u16 opcode_bits ;
   u16 page_size ;
};
#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_bus_info {
   enum e1000_bus_type type ;
   enum e1000_bus_speed speed ;
   enum e1000_bus_width width ;
   u32 snoop ;
   u16 func ;
   u16 pci_cmd_word ;
};
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_fc_info {
   u32 high_water ;
   u32 low_water ;
   u16 pause_time ;
   bool send_xon ;
   bool strict_ieee ;
   enum e1000_fc_mode current_mode ;
   enum e1000_fc_mode requested_mode ;
};
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_mbx_operations {
   s32 (*init_params)(struct e1000_hw *) ;
   s32 (*read)(struct e1000_hw *, u32 *, u16 , u16 , bool ) ;
   s32 (*write)(struct e1000_hw *, u32 *, u16 , u16 ) ;
   s32 (*read_posted)(struct e1000_hw *, u32 *, u16 , u16 ) ;
   s32 (*write_posted)(struct e1000_hw *, u32 *, u16 , u16 ) ;
   s32 (*check_for_msg)(struct e1000_hw *, u16 ) ;
   s32 (*check_for_ack)(struct e1000_hw *, u16 ) ;
   s32 (*check_for_rst)(struct e1000_hw *, u16 ) ;
   s32 (*unlock)(struct e1000_hw *, u16 ) ;
};
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_mbx_stats {
   u32 msgs_tx ;
   u32 msgs_rx ;
   u32 acks ;
   u32 reqs ;
   u32 rsts ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_mbx_info {
   struct e1000_mbx_operations ops ;
   struct e1000_mbx_stats stats ;
   u32 timeout ;
   u32 usec_delay ;
   u16 size ;
};
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_dev_spec_82575 {
   bool sgmii_active ;
   bool global_device_reset ;
   bool eee_disable ;
   bool clear_semaphore_once ;
   struct e1000_sfp_flags eth_flags ;
   bool module_plugged ;
   u8 media_port ;
   bool media_changed ;
   bool mas_capable ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
union __anonunion_dev_spec_687 {
   struct e1000_dev_spec_82575 _82575 ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_hw {
   void *back ;
   u8 *hw_addr ;
   u8 *flash_address ;
   unsigned long io_base ;
   struct e1000_mac_info mac ;
   struct e1000_fc_info fc ;
   struct e1000_phy_info phy ;
   struct e1000_nvm_info nvm ;
   struct e1000_bus_info bus ;
   struct e1000_mbx_info mbx ;
   struct e1000_host_mng_dhcp_cookie mng_cookie ;
   union __anonunion_dev_spec_687 dev_spec ;
   u16 device_id ;
   u16 subsystem_vendor_id ;
   u16 subsystem_device_id ;
   u16 vendor_id ;
   u8 revision_id ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_read_695 {
   __le64 buffer_addr ;
   __le32 cmd_type_len ;
   __le32 olinfo_status ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_wb_696 {
   __le64 rsvd ;
   __le32 nxtseq_seed ;
   __le32 status ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
union e1000_adv_tx_desc {
   struct __anonstruct_read_695 read ;
   struct __anonstruct_wb_696 wb ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct cyclecounter {
   u64 (*read)(struct cyclecounter *) ;
   u64 mask ;
   u32 mult ;
   u32 shift ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct timecounter {
   struct cyclecounter *cc ;
   u64 cycle_last ;
   u64 nsec ;
   u64 mask ;
   u64 frac ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};
#line 138 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};
#line 205 
enum ldv_15181 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_697 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_request {
   enum ldv_15181 type ;
   union __anonunion_697 __anonCompField_ptp_clock_request_160 ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfine)(struct ptp_clock_info *, long ) ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*gettimex64)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *) ;
   int (*getcrosststamp)(struct ptp_clock_info *, struct system_device_crosststamp *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
   long (*do_aux_work)(struct ptp_clock_info *) ;
};
#line 144 
struct ptp_clock;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqhandler.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 823 
enum dev_prop_type {
    DEV_PROP_U8 = 0,
    DEV_PROP_U16 = 1,
    DEV_PROP_U32 = 2,
    DEV_PROP_U64 = 3,
    DEV_PROP_STRING = 4
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
union __anonunion_value_711 {
   u8 u8_data ;
   u16 u16_data ;
   u32 u32_data ;
   u64 u64_data ;
   char *str ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
union __anonunion_710 {
   void *pointer ;
   union __anonunion_value_711 value ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
struct property_entry {
   char *name ;
   size_t length ;
   bool is_array ;
   enum dev_prop_type type ;
   union __anonunion_710 __anonCompField_property_entry_162 ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_722 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_722 __anonCompField_kernel_param_163 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 31 
struct i2c_board_info;
#line 32 
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_board_info {
   char type[20U] ;
   unsigned short flags ;
   unsigned short addr ;
   char *dev_name ;
   void *platform_data ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   struct property_entry *properties ;
   struct resource *resources ;
   unsigned int num_resources ;
   int irq ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c-algo-bit.h"
struct i2c_algo_bit_data {
   void *data ;
   void (*setsda)(void *, int ) ;
   void (*setscl)(void *, int ) ;
   int (*getsda)(void *) ;
   int (*getscl)(void *) ;
   int (*pre_xfer)(struct i2c_adapter *) ;
   void (*post_xfer)(struct i2c_adapter *) ;
   int udelay ;
   int timeout ;
   bool can_do_atomic ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_726 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_726 __anonCompField_pci_dev_165 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct igb_adapter;
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct vf_data_storage {
   unsigned char vf_mac_addresses[6U] ;
   u16 vf_mc_hashes[30U] ;
   u16 num_vf_mc_hashes ;
   u32 flags ;
   unsigned long last_nack ;
   u16 pf_vlan ;
   u16 pf_qos ;
   u16 tx_rate ;
   bool spoofchk_enabled ;
   bool trusted ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct vf_mac_filter {
   struct list_head l ;
   int vf ;
   bool free ;
   u8 vf_mac[6U] ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_tx_buffer {
   union e1000_adv_tx_desc *next_to_watch ;
   unsigned long time_stamp ;
   struct sk_buff *skb ;
   unsigned int bytecount ;
   u16 gso_segs ;
   __be16 protocol ;
   dma_addr_t dma ;
   __u32 len ;
   u32 tx_flags ;
};
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_rx_buffer {
   dma_addr_t dma ;
   struct page *page ;
   __u32 page_offset ;
   __u16 pagecnt_bias ;
};
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_tx_queue_stats {
   u64 packets ;
   u64 bytes ;
   u64 restart_queue ;
   u64 restart_queue2 ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_rx_queue_stats {
   u64 packets ;
   u64 bytes ;
   u64 drops ;
   u64 csum_err ;
   u64 alloc_failed ;
};
#line 239 
struct igb_ring;
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_ring_container {
   struct igb_ring *ring ;
   unsigned int total_bytes ;
   unsigned int total_packets ;
   u16 work_limit ;
   u8 count ;
   u8 itr ;
};
#line 248 
struct igb_q_vector;
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
union __anonunion_727 {
   struct igb_tx_buffer *tx_buffer_info ;
   struct igb_rx_buffer *rx_buffer_info ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct __anonstruct_729 {
   struct igb_tx_queue_stats tx_stats ;
   struct u64_stats_sync tx_syncp ;
   struct u64_stats_sync tx_syncp2 ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct __anonstruct_730 {
   struct sk_buff *skb ;
   struct igb_rx_queue_stats rx_stats ;
   struct u64_stats_sync rx_syncp ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
union __anonunion_728 {
   struct __anonstruct_729 __anonCompField___anonunion_728_167 ;
   struct __anonstruct_730 __anonCompField___anonunion_728_168 ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_ring {
   struct igb_q_vector *q_vector ;
   struct net_device *netdev ;
   struct device *dev ;
   union __anonunion_727 __anonCompField_igb_ring_166 ;
   void *desc ;
   unsigned long flags ;
   void *tail ;
   dma_addr_t dma ;
   unsigned int size ;
   u16 count ;
   u8 queue_index ;
   u8 reg_idx ;
   bool launchtime_enable ;
   bool cbs_enable ;
   s32 idleslope ;
   s32 sendslope ;
   s32 hicredit ;
   s32 locredit ;
   u16 next_to_clean ;
   u16 next_to_use ;
   u16 next_to_alloc ;
   union __anonunion_728 __anonCompField_igb_ring_169 ;
} __attribute__((__aligned__(4096)));
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_q_vector {
   struct igb_adapter *adapter ;
   int cpu ;
   u32 eims_value ;
   u16 itr_val ;
   u8 set_itr ;
   void *itr_register ;
   struct igb_ring_container rx ;
   struct igb_ring_container tx ;
   struct napi_struct napi ;
   struct callback_head rcu ;
   char name[25U] ;
   struct igb_ring ring[0U] ;
};
#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct hwmon_attr {
   struct device_attribute dev_attr ;
   struct e1000_hw *hw ;
   struct e1000_thermal_diode_data *sensor ;
   char name[12U] ;
};
#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct hwmon_buff {
   struct attribute_group group ;
   struct attribute_group *groups[2U] ;
   struct attribute *attrs[13U] ;
   struct hwmon_attr hwmon_list[12U] ;
   unsigned int n_hwmon ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_mac_addr {
   u8 addr[6U] ;
   u8 queue ;
   u8 state ;
};
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct __anonstruct_perout_731 {
   struct timespec64 start ;
   struct timespec64 period ;
};
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_adapter {
   unsigned long active_vlans[64U] ;
   struct net_device *netdev ;
   unsigned long state ;
   unsigned int flags ;
   unsigned int num_q_vectors ;
   struct msix_entry msix_entries[10U] ;
   u32 rx_itr_setting ;
   u32 tx_itr_setting ;
   u16 tx_itr ;
   u16 rx_itr ;
   u16 tx_work_limit ;
   u32 tx_timeout_count ;
   int num_tx_queues ;
   struct igb_ring *tx_ring[16U] ;
   int num_rx_queues ;
   struct igb_ring *rx_ring[16U] ;
   u32 max_frame_size ;
   u32 min_frame_size ;
   struct timer_list watchdog_timer ;
   struct timer_list phy_info_timer ;
   u16 mng_vlan_id ;
   u32 bd_number ;
   u32 wol ;
   u32 en_mng_pt ;
   u16 link_speed ;
   u16 link_duplex ;
   u8 *io_addr ;
   struct work_struct reset_task ;
   struct work_struct watchdog_task ;
   bool fc_autoneg ;
   u8 tx_timeout_factor ;
   struct timer_list blink_timer ;
   unsigned long led_status ;
   struct pci_dev *pdev ;
   spinlock_t stats64_lock ;
   struct rtnl_link_stats64 stats64 ;
   struct e1000_hw hw ;
   struct e1000_hw_stats stats ;
   struct e1000_phy_info phy_info ;
   u32 test_icr ;
   struct igb_ring test_tx_ring ;
   struct igb_ring test_rx_ring ;
   int msg_enable ;
   struct igb_q_vector *q_vector[8U] ;
   u32 eims_enable_mask ;
   u32 eims_other ;
   u16 tx_ring_count ;
   u16 rx_ring_count ;
   unsigned int vfs_allocated_count ;
   struct vf_data_storage *vf_data ;
   int vf_rate_link_speed ;
   u32 rss_queues ;
   u32 wvbr ;
   u32 *shadow_vfta ;
   struct ptp_clock *ptp_clock ;
   struct ptp_clock_info ptp_caps ;
   struct delayed_work ptp_overflow_work ;
   struct work_struct ptp_tx_work ;
   struct sk_buff *ptp_tx_skb ;
   struct hwtstamp_config tstamp_config ;
   unsigned long ptp_tx_start ;
   unsigned long last_rx_ptp_check ;
   unsigned long last_rx_timestamp ;
   unsigned int ptp_flags ;
   spinlock_t tmreg_lock ;
   struct cyclecounter cc ;
   struct timecounter tc ;
   u32 tx_hwtstamp_timeouts ;
   u32 tx_hwtstamp_skipped ;
   u32 rx_hwtstamp_cleared ;
   bool pps_sys_wrap_on ;
   struct ptp_pin_desc sdp_config[4U] ;
   struct __anonstruct_perout_731 perout[2U] ;
   char fw_version[32U] ;
   struct hwmon_buff *igb_hwmon_buff ;
   bool ets ;
   struct i2c_algo_bit_data i2c_algo ;
   struct i2c_adapter i2c_adap ;
   struct i2c_client *i2c_client ;
   u32 rss_indir_tbl_init ;
   u8 rss_indir_tbl[128U] ;
   unsigned long link_check_timeout ;
   int copper_tries ;
   struct e1000_info ei ;
   u16 eee_advert ;
   struct hlist_head nfc_filter_list ;
   struct hlist_head cls_flower_list ;
   unsigned int nfc_filter_count ;
   spinlock_t nfc_lock ;
   bool etype_bitmap[3U] ;
   struct igb_mac_addr *mac_table ;
   struct vf_mac_filter vf_macs ;
   struct vf_mac_filter *vf_mac_list ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
union __anonunion___u_1420 {
   u8 *__val ;
   char __c[1U] ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
union __anonunion___u_1422 {
   u8 *__val ;
   char __c[1U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
union __anonunion___u_1424 {
   u8 *__val ;
   char __c[1U] ;
};
#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
union __anonunion___u_1426 {
   u8 *__val ;
   char __c[1U] ;
};
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
union __anonunion___u_1428 {
   u8 *__val ;
   char __c[1U] ;
};
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
union __anonunion___u_1430 {
   u8 *__val ;
   char __c[1U] ;
};
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
union __anonunion___u_1432 {
   u8 *__val ;
   char __c[1U] ;
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
union __anonunion___u_1434 {
   u8 *__val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_1443 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_1443 key ;
} __attribute__((__aligned__(8)));
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1455 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1457 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_read_2126 {
   __le64 pkt_addr ;
   __le64 hdr_addr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_lo_dword_2129 {
   __le16 pkt_info ;
   __le16 hdr_info ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_csum_ip_2131 {
   __le16 ip_id ;
   __le16 csum ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
union __anonunion_hi_dword_2130 {
   __le32 rss ;
   struct __anonstruct_csum_ip_2131 csum_ip ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_lower_2128 {
   struct __anonstruct_lo_dword_2129 lo_dword ;
   union __anonunion_hi_dword_2130 hi_dword ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_upper_2132 {
   __le32 status_error ;
   __le16 length ;
   __le16 vlan ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_wb_2127 {
   struct __anonstruct_lower_2128 lower ;
   struct __anonstruct_upper_2132 upper ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
union e1000_adv_rx_desc {
   struct __anonstruct_read_2126 read ;
   struct __anonstruct_wb_2127 wb ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_nfc_input {
   u8 match_flags ;
   __be16 etype ;
   __be16 vlan_tci ;
   u8 src_addr[6U] ;
   u8 dst_addr[6U] ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
struct igb_nfc_filter {
   struct hlist_node nfc_node ;
   struct igb_nfc_input filter ;
   unsigned long cookie ;
   u16 etype_reg_index ;
   u16 sw_idx ;
   u16 action ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
struct igb_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
struct igb_reg_test {
   u16 reg ;
   u16 reg_offset ;
   u16 array_len ;
   u16 test_type ;
   u32 mask ;
   u32 write ;
};
#line 1211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2171 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2173 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2175 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2177 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2179 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2181 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2183 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2185 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2187 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2189 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2191 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2193 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2195 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2197 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2199 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2201 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2203 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2205 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2207 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2209 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2211 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2213 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2215 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2217 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2219 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2221 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2223 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2225 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2229 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2231 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2233 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2235 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2237 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
union __anonunion___u_2239 {
   u8 *__val ;
   char __c[1U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_SCHEDULING = 1,
    SYSTEM_RUNNING = 2,
    SYSTEM_HALT = 3,
    SYSTEM_POWER_OFF = 4,
    SYSTEM_RESTART = 5,
    SYSTEM_SUSPEND = 6
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2252 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2260 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2262 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2306 {
   int __val ;
   char __c[1U] ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 288 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_2673 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_2672 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_2673 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_2672 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_2694 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_2696 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9966 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9966 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_2753 {
   u16 vlan_id : 12 ;
   u16 vlan_dei : 1 ;
   u16 vlan_priority : 3 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_2752 {
   struct __anonstruct_2753 __anonCompField___anonunion_2752_77 ;
   __be16 vlan_tci ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_vlan {
   union __anonunion_2752 __anonCompField_flow_dissector_key_vlan_78 ;
   __be16 vlan_tpid ;
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_eth_addrs {
   unsigned char dst[6U] ;
   unsigned char src[6U] ;
};
#line 231 
enum flow_dissector_key_id {
    FLOW_DISSECTOR_KEY_CONTROL = 0,
    FLOW_DISSECTOR_KEY_BASIC = 1,
    FLOW_DISSECTOR_KEY_IPV4_ADDRS = 2,
    FLOW_DISSECTOR_KEY_IPV6_ADDRS = 3,
    FLOW_DISSECTOR_KEY_PORTS = 4,
    FLOW_DISSECTOR_KEY_PORTS_RANGE = 5,
    FLOW_DISSECTOR_KEY_ICMP = 6,
    FLOW_DISSECTOR_KEY_ETH_ADDRS = 7,
    FLOW_DISSECTOR_KEY_TIPC = 8,
    FLOW_DISSECTOR_KEY_ARP = 9,
    FLOW_DISSECTOR_KEY_VLAN = 10,
    FLOW_DISSECTOR_KEY_FLOW_LABEL = 11,
    FLOW_DISSECTOR_KEY_GRE_KEYID = 12,
    FLOW_DISSECTOR_KEY_MPLS_ENTROPY = 13,
    FLOW_DISSECTOR_KEY_ENC_KEYID = 14,
    FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS = 15,
    FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS = 16,
    FLOW_DISSECTOR_KEY_ENC_CONTROL = 17,
    FLOW_DISSECTOR_KEY_ENC_PORTS = 18,
    FLOW_DISSECTOR_KEY_MPLS = 19,
    FLOW_DISSECTOR_KEY_TCP = 20,
    FLOW_DISSECTOR_KEY_IP = 21,
    FLOW_DISSECTOR_KEY_CVLAN = 22,
    FLOW_DISSECTOR_KEY_ENC_IP = 23,
    FLOW_DISSECTOR_KEY_ENC_OPTS = 24,
    FLOW_DISSECTOR_KEY_META = 25,
    FLOW_DISSECTOR_KEY_CT = 26,
    FLOW_DISSECTOR_KEY_MAX = 27
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector {
   unsigned int used_keys ;
   unsigned short offset[27U] ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_2761 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_2762 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_2763 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_2764 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_2761 ports ;
   struct __anonstruct_icmpt_2762 icmpt ;
   struct __anonstruct_dnports_2763 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_2764 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_2765 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_2765 u ;
} __attribute__((__aligned__(8)));
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct flow_rule;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_2890 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_2889 {
   struct __anonstruct_2890 __anonCompField___anonunion_2889_152 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_2889 __anonCompField_sock_cgroup_data_153 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_2930 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_2930 __anonCompField_bdi_writeback_161 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_2931 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_2931 __anonCompField_bio_162 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2934 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2935 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_2937 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_2938 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2936 {
   struct __anonstruct_elv_2937 elv ;
   struct __anonstruct_flush_2938 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2939 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_2934 __anonCompField_request_163 ;
   union __anonunion_2935 __anonCompField_request_164 ;
   union __anonunion_2936 __anonCompField_request_165 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_2939 __anonCompField_request_166 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_2966 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_2965 {
   void *validation_data ;
   struct __anonstruct_2966 __anonCompField___anonunion_2965_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_2965 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match {
   struct flow_dissector *dissector ;
   void *mask ;
   void *key ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_basic {
   struct flow_dissector_key_basic *key ;
   struct flow_dissector_key_basic *mask ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_eth_addrs {
   struct flow_dissector_key_eth_addrs *key ;
   struct flow_dissector_key_eth_addrs *mask ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_vlan {
   struct flow_dissector_key_vlan *key ;
   struct flow_dissector_key_vlan *mask ;
};
#line 112 
enum flow_action_id {
    FLOW_ACTION_ACCEPT = 0,
    FLOW_ACTION_DROP = 1,
    FLOW_ACTION_TRAP = 2,
    FLOW_ACTION_GOTO = 3,
    FLOW_ACTION_REDIRECT = 4,
    FLOW_ACTION_MIRRED = 5,
    FLOW_ACTION_REDIRECT_INGRESS = 6,
    FLOW_ACTION_MIRRED_INGRESS = 7,
    FLOW_ACTION_VLAN_PUSH = 8,
    FLOW_ACTION_VLAN_POP = 9,
    FLOW_ACTION_VLAN_MANGLE = 10,
    FLOW_ACTION_TUNNEL_ENCAP = 11,
    FLOW_ACTION_TUNNEL_DECAP = 12,
    FLOW_ACTION_MANGLE = 13,
    FLOW_ACTION_ADD = 14,
    FLOW_ACTION_CSUM = 15,
    FLOW_ACTION_MARK = 16,
    FLOW_ACTION_PTYPE = 17,
    FLOW_ACTION_WAKE = 18,
    FLOW_ACTION_QUEUE = 19,
    FLOW_ACTION_SAMPLE = 20,
    FLOW_ACTION_POLICE = 21,
    FLOW_ACTION_CT = 22,
    FLOW_ACTION_MPLS_PUSH = 23,
    FLOW_ACTION_MPLS_POP = 24,
    FLOW_ACTION_MPLS_MANGLE = 25,
    NUM_FLOW_ACTIONS = 26
};
#line 142 
enum flow_action_mangle_base {
    FLOW_ACT_MANGLE_UNSPEC = 0,
    FLOW_ACT_MANGLE_HDR_TYPE_ETH = 1,
    FLOW_ACT_MANGLE_HDR_TYPE_IP4 = 2,
    FLOW_ACT_MANGLE_HDR_TYPE_IP6 = 3,
    FLOW_ACT_MANGLE_HDR_TYPE_TCP = 4,
    FLOW_ACT_MANGLE_HDR_TYPE_UDP = 5
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_vlan_3024 {
   u16 vid ;
   __be16 proto ;
   u8 prio ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mangle_3025 {
   enum flow_action_mangle_base htype ;
   u32 offset ;
   u32 mask ;
   u32 val ;
};
#line 159 
struct ip_tunnel_info;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_queue_3026 {
   u32 ctx ;
   u32 index ;
   u8 vf ;
};
#line 159 
struct psample_group;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_sample_3027 {
   struct psample_group *psample_group ;
   u32 rate ;
   u32 trunc_size ;
   bool truncate ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_police_3028 {
   s64 burst ;
   u64 rate_bytes_ps ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_ct_3029 {
   int action ;
   u16 zone ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_push_3030 {
   u32 label ;
   __be16 proto ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_pop_3031 {
   __be16 proto ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_mangle_3032 {
   u32 label ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
union __anonunion_3023 {
   u32 chain_index ;
   struct net_device *dev ;
   struct __anonstruct_vlan_3024 vlan ;
   struct __anonstruct_mangle_3025 mangle ;
   struct ip_tunnel_info *tunnel ;
   u32 csum_flags ;
   u32 mark ;
   u16 ptype ;
   struct __anonstruct_queue_3026 queue ;
   struct __anonstruct_sample_3027 sample ;
   struct __anonstruct_police_3028 police ;
   struct __anonstruct_ct_3029 ct ;
   struct __anonstruct_mpls_push_3030 mpls_push ;
   struct __anonstruct_mpls_pop_3031 mpls_pop ;
   struct __anonstruct_mpls_mangle_3032 mpls_mangle ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action_entry {
   enum flow_action_id id ;
   void (*destructor)(void *) ;
   void *destructor_priv ;
   union __anonunion_3023 __anonCompField_flow_action_entry_169 ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action {
   unsigned int num_entries ;
   struct flow_action_entry entries[0U] ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_rule {
   struct flow_match match ;
   struct flow_action action ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_stats {
   u64 pkts ;
   u64 bytes ;
   u64 lastused ;
};
#line 270 
enum flow_block_command {
    FLOW_BLOCK_BIND = 0,
    FLOW_BLOCK_UNBIND = 1
};
#line 275 
enum flow_block_binder_type {
    FLOW_BLOCK_BINDER_TYPE_UNSPEC = 0,
    FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS = 1,
    FLOW_BLOCK_BINDER_TYPE_CLSACT_EGRESS = 2
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block_offload {
   enum flow_block_command command ;
   enum flow_block_binder_type binder_type ;
   bool block_shared ;
   bool unlocked_driver_cb ;
   struct net *net ;
   struct flow_block *block ;
   struct list_head cb_list ;
   struct list_head *driver_block_list ;
   struct netlink_ext_ack *extack ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 341 
enum flow_cls_command {
    FLOW_CLS_REPLACE = 0,
    FLOW_CLS_DESTROY = 1,
    FLOW_CLS_STATS = 2,
    FLOW_CLS_TMPLT_CREATE = 3,
    FLOW_CLS_TMPLT_DESTROY = 4
};
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_cls_common_offload {
   u32 chain_index ;
   __be16 protocol ;
   u32 prio ;
   struct netlink_ext_ack *extack ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_cls_offload {
   struct flow_cls_common_offload common ;
   enum flow_cls_command command ;
   unsigned long cookie ;
   struct flow_rule *rule ;
   struct flow_stats stats ;
   u32 classid ;
};
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_3040 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_3041 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_3039 {
   struct __anonstruct_3040 __anonCompField___anonunion_3039_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_3041 __anonCompField___anonunion_3039_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_3039 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_3043 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_3043 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_3056 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_3056 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_3078 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_3078 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_3080 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3079 {
   __addrpair skc_addrpair ;
   struct __anonstruct_3080 __anonCompField___anonunion_3079_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3081 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_3083 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3082 {
   __portpair skc_portpair ;
   struct __anonstruct_3083 __anonCompField___anonunion_3082_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3084 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3085 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3086 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3087 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3088 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_3079 __anonCompField_sock_common_177 ;
   union __anonunion_3081 __anonCompField_sock_common_178 ;
   union __anonunion_3082 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_3084 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_3085 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_3086 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_3087 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_3088 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_3089 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3090 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3091 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_3089 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_3090 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_3091 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_3126 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_3126 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_3223 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_3223 __anonCompField_ip_ra_chain_195 ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct tc_cbs_qopt_offload {
   u8 enable ;
   s32 queue ;
   s32 hicredit ;
   s32 locredit ;
   s32 idleslope ;
   s32 sendslope ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct tc_etf_qopt_offload {
   u8 enable ;
   s32 queue ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_3231 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_3230 {
   struct __anonstruct_s_3231 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_3230 __anonCompField_net_generic_196 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tcf_walker {
   int stop ;
   int skip ;
   int count ;
   bool nonempty ;
   unsigned long cookie ;
   int (*fn)(struct tcf_proto *, void *, struct tcf_walker *) ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mii.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.h"
struct e1000_fw_version {
   u32 etrack_id ;
   u16 eep_major ;
   u16 eep_minor ;
   u16 eep_build ;
   u8 invm_major ;
   u8 invm_minor ;
   u8 invm_img_type ;
   bool or_valid ;
   u16 or_major ;
   u16 or_build ;
   u16 or_patch ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct e1000_adv_tx_context_desc {
   __le32 vlan_macip_lens ;
   __le32 seqnum_seed ;
   __le32 type_tucmd_mlhl ;
   __le32 mss_l4len_idx ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pps_kernel.h"
struct pps_event_time {
   struct timespec64 ts_real ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_3271 {
   u64 timestamp ;
   struct pps_event_time pps_times ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_event {
   int type ;
   int index ;
   union __anonunion_3271 __anonCompField_ptp_clock_event_207 ;
};
#line 733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
enum queue_mode {
    QUEUE_MODE_STRICT_PRIORITY = 0,
    QUEUE_MODE_STREAM_RESERVATION = 1
};
#line 738 
enum tx_queue_prio {
    TX_QUEUE_PRIO_HIGH = 0,
    TX_QUEUE_PRIO_LOW = 1
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
struct igb_reg_info {
   u32 ofs ;
   char *name ;
};
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
struct my_u0 {
   u64 a ;
   u64 b ;
};
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3278 {
   u8 *__val ;
   char __c[1U] ;
};
#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3280 {
   u8 *__val ;
   char __c[1U] ;
};
#line 743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3282 {
   u8 *__val ;
   char __c[1U] ;
};
#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3284 {
   u8 *__val ;
   char __c[1U] ;
};
#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3286 {
   u8 *__val ;
   char __c[1U] ;
};
#line 894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3288 {
   u8 *__val ;
   char __c[1U] ;
};
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3290 {
   u8 *__val ;
   char __c[1U] ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3292 {
   u8 *__val ;
   char __c[1U] ;
};
#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3294 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3296 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3299 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3301 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3303 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3305 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3307 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3309 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3311 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3313 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3315 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3317 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3319 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3321 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3323 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3325 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3327 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3329 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3331 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3333 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3335 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3337 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3339 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3341 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3343 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3345 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3347 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3349 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3351 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3353 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3355 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3357 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3359 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3361 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3363 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3365 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3367 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3369 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3371 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3373 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3375 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3377 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3379 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3381 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3383 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3385 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3387 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3389 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3391 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3393 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3395 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3397 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3399 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3401 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3403 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3405 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3407 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3409 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3411 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3413 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3415 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3417 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3419 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3421 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3423 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3425 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3427 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3429 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3431 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3433 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3435 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3437 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3439 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3441 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3443 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3445 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3447 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3449 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3451 {
   u8 *__val ;
   char __c[1U] ;
};
#line 5043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3453 {
   u8 *__val ;
   char __c[1U] ;
};
#line 5051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3455 {
   u8 *__val ;
   char __c[1U] ;
};
#line 5077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3457 {
   u8 *__val ;
   char __c[1U] ;
};
#line 5418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3459 {
   u8 *__val ;
   char __c[1U] ;
};
#line 5420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3461 {
   u8 *__val ;
   char __c[1U] ;
};
#line 5694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion_ip_3464 {
   struct iphdr *v4 ;
   struct ipv6hdr *v6 ;
   unsigned char *hdr ;
};
#line 5699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion_l4_3465 {
   struct tcphdr *tcp ;
   struct udphdr *udp ;
   unsigned char *hdr ;
};
#line 6199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3467 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3469 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3471 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3473 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3475 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3477 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3479 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3481 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3483 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3485 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3487 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3489 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3491 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3493 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3495 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3497 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3499 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3501 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3503 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3505 {
   u8 *__val ;
   char __c[1U] ;
};
#line 6990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3507 {
   u8 *__val ;
   char __c[1U] ;
};
#line 7129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3509 {
   u8 *__val ;
   char __c[1U] ;
};
#line 7131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3511 {
   u8 *__val ;
   char __c[1U] ;
};
#line 7600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3513 {
   u8 *__val ;
   char __c[1U] ;
};
#line 7701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3515 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3517 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3519 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3521 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3523 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3525 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3527 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3529 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3531 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3533 {
   u8 *__val ;
   char __c[1U] ;
};
#line 8879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3535 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3537 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3539 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3541 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3543 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3545 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3547 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3549 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3551 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3553 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3555 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3557 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3559 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3561 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3563 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3565 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3567 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3569 {
   u8 *__val ;
   char __c[1U] ;
};
#line 9462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
union __anonunion___u_3571 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4304 {
   u8 *__val ;
   char __c[1U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4306 {
   u8 *__val ;
   char __c[1U] ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4308 {
   u8 *__val ;
   char __c[1U] ;
};
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4310 {
   u8 *__val ;
   char __c[1U] ;
};
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4312 {
   u8 *__val ;
   char __c[1U] ;
};
#line 874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4314 {
   u8 *__val ;
   char __c[1U] ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4316 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4318 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4320 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4322 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4324 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4326 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4328 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4330 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4332 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4334 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4336 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4338 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4340 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4342 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4344 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4346 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4348 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4350 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4352 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4354 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4356 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4358 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4360 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4362 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4364 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4366 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4368 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4370 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4372 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4374 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4376 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4378 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4380 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4382 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4384 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4386 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4388 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4390 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4392 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4394 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4396 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4398 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4400 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4402 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4404 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4406 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4409 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
union __anonunion___u_4411 {
   u8 *__val ;
   char __c[1U] ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5144 {
   u8 *__val ;
   char __c[1U] ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5146 {
   u8 *__val ;
   char __c[1U] ;
};
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5148 {
   u8 *__val ;
   char __c[1U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5150 {
   u8 *__val ;
   char __c[1U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5152 {
   u8 *__val ;
   char __c[1U] ;
};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5154 {
   u8 *__val ;
   char __c[1U] ;
};
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5156 {
   u8 *__val ;
   char __c[1U] ;
};
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5158 {
   u8 *__val ;
   char __c[1U] ;
};
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5160 {
   u8 *__val ;
   char __c[1U] ;
};
#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5162 {
   u8 *__val ;
   char __c[1U] ;
};
#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5164 {
   u8 *__val ;
   char __c[1U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5166 {
   u8 *__val ;
   char __c[1U] ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5168 {
   u8 *__val ;
   char __c[1U] ;
};
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5170 {
   u8 *__val ;
   char __c[1U] ;
};
#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5172 {
   u8 *__val ;
   char __c[1U] ;
};
#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5174 {
   u8 *__val ;
   char __c[1U] ;
};
#line 636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5176 {
   u8 *__val ;
   char __c[1U] ;
};
#line 648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5178 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5180 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5182 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5184 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5186 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5188 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5190 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5192 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5194 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5196 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5198 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5200 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5202 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5204 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5206 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5208 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
union __anonunion___u_5210 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
union __anonunion___u_5899 {
   u8 *__val ;
   char __c[1U] ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
union __anonunion___u_5901 {
   u8 *__val ;
   char __c[1U] ;
};
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
union __anonunion___u_5903 {
   u8 *__val ;
   char __c[1U] ;
};
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
union __anonunion___u_5905 {
   u8 *__val ;
   char __c[1U] ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
union __anonunion___u_5907 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
union __anonunion___u_5909 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
union __anonunion___u_5915 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
union __anonunion___u_5917 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6606 {
   u8 *__val ;
   char __c[1U] ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6608 {
   u8 *__val ;
   char __c[1U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6610 {
   u8 *__val ;
   char __c[1U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6612 {
   u8 *__val ;
   char __c[1U] ;
};
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6614 {
   u8 *__val ;
   char __c[1U] ;
};
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6616 {
   u8 *__val ;
   char __c[1U] ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6618 {
   u8 *__val ;
   char __c[1U] ;
};
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6620 {
   u8 *__val ;
   char __c[1U] ;
};
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6622 {
   u8 *__val ;
   char __c[1U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6624 {
   u8 *__val ;
   char __c[1U] ;
};
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
union __anonunion___u_6626 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7315 {
   u8 *__val ;
   char __c[1U] ;
};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7317 {
   u8 *__val ;
   char __c[1U] ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7319 {
   u8 *__val ;
   char __c[1U] ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7321 {
   u8 *__val ;
   char __c[1U] ;
};
#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7323 {
   u8 *__val ;
   char __c[1U] ;
};
#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7325 {
   u8 *__val ;
   char __c[1U] ;
};
#line 858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7327 {
   u8 *__val ;
   char __c[1U] ;
};
#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7329 {
   u8 *__val ;
   char __c[1U] ;
};
#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7331 {
   u8 *__val ;
   char __c[1U] ;
};
#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7333 {
   u8 *__val ;
   char __c[1U] ;
};
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7335 {
   u8 *__val ;
   char __c[1U] ;
};
#line 878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7337 {
   u8 *__val ;
   char __c[1U] ;
};
#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
union __anonunion___u_7339 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8072 {
   u8 *__val ;
   char __c[1U] ;
};
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8074 {
   u8 *__val ;
   char __c[1U] ;
};
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8076 {
   u8 *__val ;
   char __c[1U] ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8078 {
   u8 *__val ;
   char __c[1U] ;
};
#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8080 {
   u8 *__val ;
   char __c[1U] ;
};
#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8082 {
   u8 *__val ;
   char __c[1U] ;
};
#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8084 {
   u8 *__val ;
   char __c[1U] ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8086 {
   u8 *__val ;
   char __c[1U] ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8088 {
   u8 *__val ;
   char __c[1U] ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8090 {
   u8 *__val ;
   char __c[1U] ;
};
#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8092 {
   u8 *__val ;
   char __c[1U] ;
};
#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8094 {
   u8 *__val ;
   char __c[1U] ;
};
#line 748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8096 {
   u8 *__val ;
   char __c[1U] ;
};
#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8098 {
   u8 *__val ;
   char __c[1U] ;
};
#line 855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8100 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8102 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8104 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8106 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8108 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8110 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8112 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8114 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
union __anonunion___u_8116 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9895 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_9895 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9896 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_9896 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9912 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_9912 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_9916 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_9916 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_9917 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_9918 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_9917 __anonCompField_media_link_90 ;
   union __anonunion_9918 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_9920 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_9919 {
   struct __anonstruct_dev_9920 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_9919 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_9934 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_9935 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_9933 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_9934 i2c ;
   struct __anonstruct_custom_9935 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_9933 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_10836 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_10836 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_igb_intr_14 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_igb_ethtool_begin_19 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_igb_driver_20 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_8_22 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_hwmon.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_hwmon.i.aux"
static bool IS_ERR(void *ptr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_hwmon.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
#line 444 
struct i2c_client *i2c_new_device(struct i2c_adapter *, struct i2c_board_info *);
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
void igb_sysfs_exit(struct igb_adapter *adapter);
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
int igb_sysfs_init(struct igb_adapter *adapter);
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hwmon.h"
#line 402 
struct device *devm_hwmon_device_register_with_groups(struct device *, char *, void *, struct attribute_group **);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static struct i2c_board_info i350_sensor_info = {.type = {(char)'i', (char)'3', (char)'5', (char)'0', (char)'b', (char)'b'}, .addr = (unsigned short)124U};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static ssize_t igb_hwmon_show_location(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 27 
  void *__mptr;
  #line 27 
  __mptr = (void *)attr;
  #line 27 
  struct hwmon_attr *igb_attr = ((struct hwmon_attr *)__mptr);
  #line 29 
  return (long)sprintf(buf,(char *)"loc%u\n",(int)(igb_attr->sensor)->location);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static ssize_t igb_hwmon_show_temp(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 37 
  void *__mptr;
  #line 39 
  unsigned int value;
  #line 37 
  __mptr = (void *)attr;
  #line 37 
  struct hwmon_attr *igb_attr = ((struct hwmon_attr *)__mptr);
  #line 42 
  (*((igb_attr->hw)->mac.ops.get_thermal_sensor_data))(igb_attr->hw);
  #line 44 
  value = (unsigned int)(igb_attr->sensor)->temp;
  #line 47 
  value *= 1000U;
  #line 49 
  return (long)sprintf(buf,(char *)"%u\n",value);
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static ssize_t igb_hwmon_show_cautionthresh(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 56 
  void *__mptr;
  #line 56 
  __mptr = (void *)attr;
  #line 56 
  struct hwmon_attr *igb_attr = ((struct hwmon_attr *)__mptr);
  #line 58 
  unsigned int value = (unsigned int)(igb_attr->sensor)->caution_thresh;
  #line 61 
  value *= 1000U;
  #line 63 
  return (long)sprintf(buf,(char *)"%u\n",value);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static ssize_t igb_hwmon_show_maxopthresh(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 70 
  void *__mptr;
  #line 70 
  __mptr = (void *)attr;
  #line 70 
  struct hwmon_attr *igb_attr = ((struct hwmon_attr *)__mptr);
  #line 72 
  unsigned int value = (unsigned int)(igb_attr->sensor)->max_op_thresh;
  #line 75 
  value *= 1000U;
  #line 77 
  return (long)sprintf(buf,(char *)"%u\n",value);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static int igb_add_hwmon_attr(struct igb_adapter *adapter, unsigned int offset, int type)
{
  #line 92 
  int rc;
  #line 93 
  unsigned int n_attr;
  #line 94 
  struct hwmon_attr *igb_attr;
  #line 96 
  n_attr = (adapter->igb_hwmon_buff)->n_hwmon;
  #line 97 
  igb_attr = & (adapter->igb_hwmon_buff)->hwmon_list[n_attr];
  #line 99 
  switch (type) {
    #line 100 
    case 0: 
            #line 100 
    ;
    #line 101 
    igb_attr->dev_attr.show = & igb_hwmon_show_location;
    #line 102 
    snprintf((char *)(& igb_attr->name),12UL,(char *)"temp%u_label",offset + 1U);
    #line 104 
    break;
    #line 105 
    case 1: 
            #line 105 
    ;
    #line 106 
    igb_attr->dev_attr.show = & igb_hwmon_show_temp;
    #line 107 
    snprintf((char *)(& igb_attr->name),12UL,(char *)"temp%u_input",offset + 1U);
    #line 109 
    break;
    #line 110 
    case 2: 
            #line 110 
    ;
    #line 111 
    igb_attr->dev_attr.show = & igb_hwmon_show_cautionthresh;
    #line 112 
    snprintf((char *)(& igb_attr->name),12UL,(char *)"temp%u_max",offset + 1U);
    #line 114 
    break;
    #line 115 
    case 3: 
            #line 115 
    ;
    #line 116 
    igb_attr->dev_attr.show = & igb_hwmon_show_maxopthresh;
    #line 117 
    snprintf((char *)(& igb_attr->name),12UL,(char *)"temp%u_crit",offset + 1U);
    #line 119 
    break;
    #line 120 
    default: 
             #line 120 
    ;
    #line 121 
    rc = -1;
    #line 122 
    return rc;
  }
  #line 126 
  igb_attr->sensor = & adapter->hw.mac.thermal_sensor_data.sensor[offset];
  #line 128 
  igb_attr->hw = & adapter->hw;
  #line 129 
  igb_attr->dev_attr.store = (ssize_t (*)(struct device *, struct device_attribute *, char *, size_t ))0;
  #line 130 
  igb_attr->dev_attr.attr.mode = (unsigned short)292U;
  #line 131 
  igb_attr->dev_attr.attr.name = (char *)(& igb_attr->name);
  {
    #line 132 
    struct lock_class_key __key;
    #line 132 
    igb_attr->dev_attr.attr.key = & __key;
  }
  #line 134 
  (adapter->igb_hwmon_buff)->attrs[n_attr] = & igb_attr->dev_attr.attr;
  #line 136 
  ((adapter->igb_hwmon_buff)->n_hwmon) ++;
  #line 138 
  return 0;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static void igb_sysfs_del_adapter(struct igb_adapter *adapter)
{
  #line 143 
  return;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
void igb_sysfs_exit(struct igb_adapter *adapter)
{
  #line 148 
  igb_sysfs_del_adapter(adapter);
  #line 149 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_hwmon.c"
int igb_sysfs_init(struct igb_adapter *adapter)
{
  #line 154 
  struct hwmon_buff *igb_hwmon;
  #line 155 
  struct i2c_client *client;
  #line 156 
  struct device *hwmon_dev;
  #line 157 
  unsigned int i;
  #line 158 
  int rc = 0;
  #line 161 
  if (adapter->hw.mac.ops.init_thermal_sensor_thresh == (s32 (*)(struct e1000_hw *))0) 
    #line 162 
    goto exit;
  #line 165 
  rc = (*(adapter->hw.mac.ops.init_thermal_sensor_thresh))(& adapter->hw);
  #line 166 
  if (rc != 0) 
               #line 167 
               goto exit;
  #line 169 
  igb_hwmon = (struct hwmon_buff *)cif_devm_kzalloc(& (adapter->pdev)->dev,1224UL,3264U);
  #line 171 
  if (igb_hwmon == (struct hwmon_buff *)0) {
    #line 172 
    rc = -12;
    #line 173 
    goto exit;
  }
  #line 175 
  adapter->igb_hwmon_buff = igb_hwmon;
  #line 177 
  i = 0U;
  #line 177 
  while (i <= 2U) {
    #line 182 
    if ((unsigned int)adapter->hw.mac.thermal_sensor_data.sensor[i].location == 0U) 
      #line 183 
      goto __Cont;
    #line 186 
    rc = igb_add_hwmon_attr(adapter,i,2);
    #line 187 
    if (rc != 0) 
                 #line 188 
                 goto exit;
    #line 189 
    rc = igb_add_hwmon_attr(adapter,i,0);
    #line 190 
    if (rc != 0) 
                 #line 191 
                 goto exit;
    #line 192 
    rc = igb_add_hwmon_attr(adapter,i,1);
    #line 193 
    if (rc != 0) 
                 #line 194 
                 goto exit;
    #line 195 
    rc = igb_add_hwmon_attr(adapter,i,3);
    #line 196 
    if (rc != 0) 
                 #line 197 
                 goto exit;
    #line 177 
    __Cont: 
            #line 177 
    i ++;
  }
  #line 201 
  client = i2c_new_device(& adapter->i2c_adap,& i350_sensor_info);
  #line 202 
  if (client == (struct i2c_client *)0) {
    #line 203 
    _dev_info(& (adapter->pdev)->dev,(char *)"Failed to create new i2c device.\n");
    #line 205 
    rc = -19;
    #line 206 
    goto exit;
  }
  #line 208 
  adapter->i2c_client = client;
  #line 210 
  igb_hwmon->groups[0] = & igb_hwmon->group;
  #line 211 
  igb_hwmon->group.attrs = (struct attribute **)(& igb_hwmon->attrs);
  #line 213 
  hwmon_dev = devm_hwmon_device_register_with_groups(& (adapter->pdev)->dev,(char *)(& client->name),(void *)igb_hwmon,(struct attribute_group **)(& igb_hwmon->groups));
  #line 217 
  if ((int)IS_ERR((void *)hwmon_dev) != 0) {
    #line 218 
    rc = (int)PTR_ERR((void *)hwmon_dev);
    #line 219 
    goto err;
  }
  #line 222 
  goto exit;
  #line 224 
  err: 
       #line 224 
  ;
  #line 225 
  igb_sysfs_del_adapter(adapter);
  #line 226 
  exit: 
        #line 226 
  ;
  #line 227 
  return rc;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_hwmon.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 215 
  return ldv_ptr_err(ptr);
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_hwmon.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 222 
  return ldv_is_err(ptr);
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_hwmon.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 661 
  return ldv_devm_kzalloc(size,flags);
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 11 
#line 11 
void __const_udelay(unsigned long);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_regs.h"
#line 353 
u32 igb_rd32(struct e1000_hw *hw, u32 reg);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.h"
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_read_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id, bool unlock);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.h"
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_write_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id);
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.h"
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_check_for_msg(struct e1000_hw *hw, u16 mbx_id);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.h"
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_check_for_ack(struct e1000_hw *hw, u16 mbx_id);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.h"
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_check_for_rst(struct e1000_hw *hw, u16 mbx_id);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.h"
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_unlock_mbx(struct e1000_hw *hw, u16 mbx_id);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.h"
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_init_mbx_params_pf(struct e1000_hw *hw);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_read_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id, bool unlock)
{
  #line 18 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 19 
  s32 ret_val = -15;
  #line 22 
  if ((int)mbx->size < (int)size) 
                                  #line 23 
                                  size = mbx->size;
  #line 25 
  if (mbx->ops.read != (s32 (*)(struct e1000_hw *, u32 *, u16 , u16 , bool ))0) 
    #line 26 
    ret_val = (*(mbx->ops.read))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id),(_Bool)((bool)((int)unlock) != 0));
  #line 28 
  return ret_val;
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_write_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  #line 42 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 43 
  s32 ret_val = 0;
  #line 45 
  if ((int)mbx->size < (int)size) 
                                  #line 46 
                                  ret_val = -15;
  else 
    #line 48 
    if (mbx->ops.write != (s32 (*)(struct e1000_hw *, u32 *, u16 , u16 ))0) 
      #line 49 
      ret_val = (*(mbx->ops.write))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id));
  #line 51 
  return ret_val;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_check_for_msg(struct e1000_hw *hw, u16 mbx_id)
{
  #line 63 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 64 
  s32 ret_val = -15;
  #line 66 
  if (mbx->ops.check_for_msg != (s32 (*)(struct e1000_hw *, u16 ))0) 
    #line 67 
    ret_val = (*(mbx->ops.check_for_msg))(hw,(unsigned short)((int)mbx_id));
  #line 69 
  return ret_val;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_check_for_ack(struct e1000_hw *hw, u16 mbx_id)
{
  #line 81 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 82 
  s32 ret_val = -15;
  #line 84 
  if (mbx->ops.check_for_ack != (s32 (*)(struct e1000_hw *, u16 ))0) 
    #line 85 
    ret_val = (*(mbx->ops.check_for_ack))(hw,(unsigned short)((int)mbx_id));
  #line 87 
  return ret_val;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_check_for_rst(struct e1000_hw *hw, u16 mbx_id)
{
  #line 99 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 100 
  s32 ret_val = -15;
  #line 102 
  if (mbx->ops.check_for_rst != (s32 (*)(struct e1000_hw *, u16 ))0) 
    #line 103 
    ret_val = (*(mbx->ops.check_for_rst))(hw,(unsigned short)((int)mbx_id));
  #line 105 
  return ret_val;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_unlock_mbx(struct e1000_hw *hw, u16 mbx_id)
{
  #line 117 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 118 
  s32 ret_val = -15;
  #line 120 
  if (mbx->ops.unlock != (s32 (*)(struct e1000_hw *, u16 ))0) 
                                                              #line 121 
                                                              ret_val = (*(mbx->ops.unlock))(hw,(unsigned short)((int)mbx_id));
  #line 123 
  return ret_val;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_poll_for_msg(struct e1000_hw *hw, u16 mbx_id)
{
  #line 152 
  int tmp_0;
  #line 135 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 136 
  int countdown = (int)mbx->timeout;
  #line 138 
  if (countdown == 0 || mbx->ops.check_for_msg == (s32 (*)(struct e1000_hw *, u16 ))0) 
    #line 139 
    goto out;
  #line 141 
  while (1) {
    #line 141 
    if (countdown != 0) {
      #line 141 
      if (! ((*(mbx->ops.check_for_msg))(hw,(unsigned short)((int)mbx_id)) != 0)) 
        #line 141 
        break;
    }
    else 
         #line 141 
         break;
    #line 142 
    countdown --;
    #line 143 
    if (countdown == 0) 
                        #line 144 
                        break;
    #line 145 
    if (0 != 0) 
      #line 145 
      if (mbx->usec_delay > 19999U) 
                                    #line 145 
                                    __bad_udelay(); else 
                                                         #line 145 
                                                         __const_udelay((unsigned long)mbx->usec_delay * 4295UL);
    else 
         #line 145 
         __udelay((unsigned long)mbx->usec_delay);
  }
  #line 149 
  if (countdown == 0) 
                      #line 150 
                      mbx->timeout = 0U;
  #line 151 
  out: 
       #line 151 
  ;
  #line 152 
  if (countdown != 0) 
                      #line 152 
                      tmp_0 = 0; else 
                                      #line 152 
                                      tmp_0 = -15;
  #line 152 
  return tmp_0;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_poll_for_ack(struct e1000_hw *hw, u16 mbx_id)
{
  #line 181 
  int tmp_0;
  #line 164 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 165 
  int countdown = (int)mbx->timeout;
  #line 167 
  if (countdown == 0 || mbx->ops.check_for_ack == (s32 (*)(struct e1000_hw *, u16 ))0) 
    #line 168 
    goto out;
  #line 170 
  while (1) {
    #line 170 
    if (countdown != 0) {
      #line 170 
      if (! ((*(mbx->ops.check_for_ack))(hw,(unsigned short)((int)mbx_id)) != 0)) 
        #line 170 
        break;
    }
    else 
         #line 170 
         break;
    #line 171 
    countdown --;
    #line 172 
    if (countdown == 0) 
                        #line 173 
                        break;
    #line 174 
    if (0 != 0) 
      #line 174 
      if (mbx->usec_delay > 19999U) 
                                    #line 174 
                                    __bad_udelay(); else 
                                                         #line 174 
                                                         __const_udelay((unsigned long)mbx->usec_delay * 4295UL);
    else 
         #line 174 
         __udelay((unsigned long)mbx->usec_delay);
  }
  #line 178 
  if (countdown == 0) 
                      #line 179 
                      mbx->timeout = 0U;
  #line 180 
  out: 
       #line 180 
  ;
  #line 181 
  if (countdown != 0) 
                      #line 181 
                      tmp_0 = 0; else 
                                      #line 181 
                                      tmp_0 = -15;
  #line 181 
  return tmp_0;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_read_posted_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  #line 197 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 198 
  s32 ret_val = -15;
  #line 200 
  if (mbx->ops.read == (s32 (*)(struct e1000_hw *, u32 *, u16 , u16 , bool ))0) 
    #line 201 
    goto out;
  #line 203 
  ret_val = igb_poll_for_msg(hw,(unsigned short)((int)mbx_id));
  #line 205 
  if (ret_val == 0) 
                    #line 206 
                    ret_val = (*(mbx->ops.read))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id),(_Bool)1);
  #line 207 
  out: 
       #line 207 
  ;
  #line 208 
  return ret_val;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_write_posted_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  #line 224 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 225 
  s32 ret_val = -15;
  #line 228 
  if (mbx->ops.write == (s32 (*)(struct e1000_hw *, u32 *, u16 , u16 ))0 || mbx->timeout == 0U) 
    #line 229 
    goto out;
  #line 232 
  ret_val = (*(mbx->ops.write))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id));
  #line 235 
  if (ret_val == 0) 
                    #line 236 
                    ret_val = igb_poll_for_ack(hw,(unsigned short)((int)mbx_id));
  #line 237 
  out: 
       #line 237 
  ;
  #line 238 
  return ret_val;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_check_for_bit_pf(struct e1000_hw *hw, u32 mask)
{
  #line 243 
  u32 mbvficr = igb_rd32(hw,3200U);
  #line 244 
  s32 ret_val = -15;
  #line 246 
  if ((mbvficr & mask) != 0U) {
    #line 247 
    ret_val = 0;
    {
      #line 249 
      union __anonunion___u_1420 __u;
      #line 248 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 248 
      u8 *hw_addr = (__u.__val);
      #line 248 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 248 
                                             writel(mask,(void *)(hw_addr + 3200U));
    }
  }
  #line 251 
  return ret_val;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_check_for_msg_pf(struct e1000_hw *hw, u16 vf_number)
{
  #line 263 
  s32 ret_val = -15;
  #line 265 
  if (igb_check_for_bit_pf(hw,(unsigned int)(1 << (int)vf_number)) == 0) {
    #line 266 
    ret_val = 0;
    #line 267 
    (hw->mbx.stats.reqs) ++;
  }
  #line 270 
  return ret_val;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_check_for_ack_pf(struct e1000_hw *hw, u16 vf_number)
{
  #line 282 
  s32 ret_val = -15;
  #line 284 
  if (igb_check_for_bit_pf(hw,(unsigned int)(65536 << (int)vf_number)) == 0) {
    #line 285 
    ret_val = 0;
    #line 286 
    (hw->mbx.stats.acks) ++;
  }
  #line 289 
  return ret_val;
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_check_for_rst_pf(struct e1000_hw *hw, u16 vf_number)
{
  #line 301 
  u32 vflre = igb_rd32(hw,3208U);
  #line 302 
  s32 ret_val = -15;
  #line 304 
  if ((((unsigned long)vflre >> (int)vf_number) & 1UL) != 0UL) {
    #line 305 
    ret_val = 0;
    {
      #line 307 
      union __anonunion___u_1422 __u;
      #line 306 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 306 
      u8 *hw_addr = (__u.__val);
      #line 306 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 306 
                                             writel((unsigned int)(1UL << (int)vf_number),(void *)(hw_addr + 3208U));
    }
    #line 307 
    (hw->mbx.stats.rsts) ++;
  }
  #line 310 
  return ret_val;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_obtain_mbx_lock_pf(struct e1000_hw *hw, u16 vf_number)
{
  #line 323 
  u32 p2v_mailbox;
  #line 322 
  s32 ret_val = -15;
  #line 324 
  int count = 10;
  #line 326 
  while (1) {
    #line 338 
    int tmp_0;
    {
      #line 329 
      union __anonunion___u_1424 __u;
      #line 328 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 328 
      u8 *hw_addr = (__u.__val);
      #line 328 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 328 
                                             writel(8U,(void *)(hw_addr + (unsigned long)(((int)vf_number + 768) * 4)));
    }
    #line 331 
    p2v_mailbox = igb_rd32(hw,(unsigned int)(((int)vf_number + 768) * 4));
    #line 332 
    if ((p2v_mailbox & 8U) != 0U) {
      #line 333 
      ret_val = 0;
      #line 334 
      break;
    }
    #line 336 
    __const_udelay(4295000UL);
    #line 338 
    tmp_0 = count;
    #line 338 
    count --;
    #line 338 
    ;
    #line 338 
    if (! (tmp_0 > 0)) 
                       #line 326 
                       break;
  }
  #line 339 
  return ret_val;
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_release_mbx_lock_pf(struct e1000_hw *hw, u16 vf_number)
{
  #line 351 
  u32 p2v_mailbox;
  #line 354 
  p2v_mailbox = igb_rd32(hw,(unsigned int)(((int)vf_number + 768) * 4));
  #line 355 
  if ((p2v_mailbox & 8U) != 0U) {
    #line 357 
    union __anonunion___u_1426 __u;
    #line 356 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 356 
    u8 *hw_addr = (__u.__val);
    #line 356 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 356 
                                           writel(p2v_mailbox & 4294967287U,(void *)(hw_addr + (unsigned long)(((int)vf_number + 768) * 4)));
  }
  #line 359 
  return 0;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_write_mbx_pf(struct e1000_hw *hw, u32 *msg, u16 size, u16 vf_number)
{
  #line 374 
  s32 ret_val;
  #line 375 
  u16 i;
  #line 378 
  ret_val = igb_obtain_mbx_lock_pf(hw,(unsigned short)((int)vf_number));
  #line 379 
  if (ret_val != 0) 
                    #line 380 
                    goto out_no_write;
  #line 383 
  igb_check_for_msg_pf(hw,(unsigned short)((int)vf_number));
  #line 384 
  igb_check_for_ack_pf(hw,(unsigned short)((int)vf_number));
  #line 387 
  i = (unsigned short)0U;
  #line 387 
  while ((int)i < (int)size) {
    {
      #line 389 
      union __anonunion___u_1428 __u;
      #line 388 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 388 
      u8 *hw_addr = (__u.__val);
      #line 388 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 388 
                                             writel(*(msg + (unsigned long)i),(void *)(hw_addr + (unsigned long)(((int)vf_number + 32) * 64 + ((int)i << 2))));
    }
    #line 387 
    i = (u16)((int)i + 1);
  }
  {
    #line 392 
    union __anonunion___u_1430 __u_0;
    #line 391 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 391 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 391 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 391 
                                             writel(1U,(void *)(hw_addr_0 + (unsigned long)(((int)vf_number + 768) * 4)));
  }
  #line 394 
  (hw->mbx.stats.msgs_tx) ++;
  #line 396 
  out_no_write: 
                #line 396 
  ;
  #line 397 
  return ret_val;
}

#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_read_mbx_pf(struct e1000_hw *hw, u32 *msg, u16 size, u16 vf_number, bool unlock)
{
  #line 416 
  s32 ret_val;
  #line 417 
  u16 i;
  #line 420 
  ret_val = igb_obtain_mbx_lock_pf(hw,(unsigned short)((int)vf_number));
  #line 421 
  if (ret_val != 0) 
                    #line 422 
                    goto out_no_read;
  #line 425 
  i = (unsigned short)0U;
  #line 425 
  while ((int)i < (int)size) {
    #line 426 
    *(msg + (unsigned long)i) = igb_rd32(hw,(unsigned int)(((int)vf_number + 32) * 64 + ((int)i << 2)));
    #line 425 
    i = (u16)((int)i + 1);
  }
  #line 429 
  if ((int)unlock != 0) {
    #line 431 
    union __anonunion___u_1432 __u;
    #line 430 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 430 
    u8 *hw_addr = (__u.__val);
    #line 430 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 430 
                                           writel(2U,(void *)(hw_addr + (unsigned long)(((int)vf_number + 768) * 4)));
  }
  else {
    #line 433 
    union __anonunion___u_1434 __u_0;
    #line 432 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 432 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 432 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 432 
                                             writel(10U,(void *)(hw_addr_0 + (unsigned long)(((int)vf_number + 768) * 4)));
  }
  #line 436 
  (hw->mbx.stats.msgs_rx) ++;
  #line 438 
  out_no_read: 
               #line 438 
  ;
  #line 439 
  return ret_val;
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_init_mbx_params_pf(struct e1000_hw *hw)
{
  #line 450 
  struct e1000_mbx_info *mbx = & hw->mbx;
  #line 452 
  mbx->timeout = 0U;
  #line 453 
  mbx->usec_delay = 0U;
  #line 455 
  mbx->size = (unsigned short)16U;
  #line 457 
  mbx->ops.read = & igb_read_mbx_pf;
  #line 458 
  mbx->ops.write = & igb_write_mbx_pf;
  #line 459 
  mbx->ops.read_posted = & igb_read_posted_mbx;
  #line 460 
  mbx->ops.write_posted = & igb_write_posted_mbx;
  #line 461 
  mbx->ops.check_for_msg = & igb_check_for_msg_pf;
  #line 462 
  mbx->ops.check_for_ack = & igb_check_for_ack_pf;
  #line 463 
  mbx->ops.check_for_rst = & igb_check_for_rst_pf;
  #line 464 
  mbx->ops.unlock = & igb_release_mbx_lock_pf;
  #line 466 
  mbx->stats.msgs_tx = 0U;
  #line 467 
  mbx->stats.msgs_rx = 0U;
  #line 468 
  mbx->stats.reqs = 0U;
  #line 469 
  mbx->stats.acks = 0U;
  #line 470 
  mbx->stats.rsts = 0U;
  #line 472 
  return 0;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 333  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 340  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/swab.h"
__inline static __u16 __swab16p(__u16 *p)
{
  #line 166 
  return __builtin_bswap16((unsigned short)((int)*p));
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/swab.h"
__inline static void __swab16s(__u16 *p)
{
  #line 235 
  *p = __swab16p(p);
  #line 236 
  return;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h)
{
  #line 743 
  h->next = (struct hlist_node *)0;
  #line 744 
  h->pprev = (struct hlist_node **)0;
  #line 745 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_1455 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  #line 769 
  __hlist_del(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  #line 784 
  struct hlist_node *first = h->first;
  #line 785 
  n->next = first;
  #line 786 
  if (first != (struct hlist_node *)0) 
                                       #line 787 
                                       first->pprev = & n->next;
  {
    #line 789 
    union __anonunion___u_1457 __u = {.__val = n};
    #line 788 
    __write_once_size((void *)(& h->first),(void *)(& __u.__c),8);
    #line 788 
    struct hlist_node *tmp = __u.__val;
  }
  #line 789 
  n->pprev = & h->first;
  #line 790 
  return;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_behind(struct hlist_node *n, struct hlist_node *prev)
{
  #line 805 
  n->next = prev->next;
  #line 806 
  prev->next = n;
  #line 807 
  n->pprev = & prev->next;
  #line 809 
  if (n->next != (struct hlist_node *)0) 
                                         #line 810 
                                         (n->next)->pprev = & n->next;
  #line 811 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_read((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 900  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_spin_lock_stats64_lock_of_igb_adapter(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 918  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_spin_lock_nfc_lock_of_igb_adapter(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_spin_unlock_stats64_lock_of_igb_adapter(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 927  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_spin_unlock_nfc_lock_of_igb_adapter(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 21 
void *ldv_vmalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 257 
  size_t __a;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 870  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *cif_vmalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 877  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_vfree(void *addr);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 60 
#line 60 
unsigned long msleep_interruptible(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
#line 99 
void dql_reset(struct dql *);
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 535  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 542  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 570  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  #line 1582 
  refcount_inc(& skb->users);
  #line 1583 
  return skb;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 892  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 38 
int __pm_runtime_idle(struct device *, int);
#line 40 
#line 40 
int __pm_runtime_resume(struct device *, int);
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_get_sync(struct device *dev)
{
  #line 226 
  return __pm_runtime_resume(dev,4);
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put(struct device *dev)
{
  #line 231 
  return __pm_runtime_idle(dev,5);
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highmem.h"
__inline static void *kmap(struct page *page)
{
  #line 83 
  __might_sleep((char *)"./include/linux/highmem.h",83,0);
  #line 84 
  return lowmem_page_address(page);
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highmem.h"
__inline static void kunmap(struct page *page)
{
  #line 89 
  return;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
__inline static u32 mmd_eee_adv_to_ethtool_adv_t(u16 eee_adv)
{
  #line 227 
  u32 adv = 0U;
  #line 229 
  if (((int)eee_adv & 2) != 0) 
                               #line 230 
                               adv |= 8U;
  #line 231 
  if (((int)eee_adv & 4) != 0) 
                               #line 232 
                               adv |= 32U;
  #line 233 
  if (((int)eee_adv & 8) != 0) 
                               #line 234 
                               adv |= 4096U;
  #line 235 
  if (((int)eee_adv & 16) != 0) 
                                #line 236 
                                adv |= 131072U;
  #line 237 
  if (((int)eee_adv & 32) != 0) 
                                #line 238 
                                adv |= 262144U;
  #line 239 
  if (((int)eee_adv & 64) != 0) 
                                #line 240 
                                adv |= 524288U;
  #line 242 
  return adv;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
__inline static u16 ethtool_adv_to_mmd_eee_adv_t(u32 adv)
{
  #line 255 
  u16 reg = (unsigned short)0U;
  #line 257 
  if (((unsigned long)adv & 8UL) != 0UL) 
                                         #line 258 
                                         reg = (unsigned short)((unsigned int)reg | 2U);
  #line 259 
  if (((unsigned long)adv & 32UL) != 0UL) 
                                          #line 260 
                                          reg = (unsigned short)((unsigned int)reg | 4U);
  #line 261 
  if (((unsigned long)adv & 4096UL) != 0UL) 
                                            #line 262 
                                            reg = (unsigned short)((unsigned int)reg | 8U);
  #line 263 
  if (((unsigned long)adv & 131072UL) != 0UL) 
                                              #line 264 
                                              reg = (unsigned short)((unsigned int)reg | 16U);
  #line 265 
  if (((unsigned long)adv & 262144UL) != 0UL) 
                                              #line 266 
                                              reg = (unsigned short)((unsigned int)reg | 32U);
  #line 267 
  if (((unsigned long)adv & 524288UL) != 0UL) 
                                              #line 268 
                                              reg = (unsigned short)((unsigned int)reg | 64U);
  #line 270 
  return reg;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.h"
#line 21 
s32 igb_check_reset_block(struct e1000_hw *hw);
#line 33 
#line 33 
s32 igb_phy_sw_reset(struct e1000_hw *hw);
#line 48 
#line 48 
s32 igb_read_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 *data);
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
#line 544 
struct net_device *igb_get_hw_dev(struct e1000_hw *hw);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.h"
#line 12 
s32 igb_read_xmdio_reg(struct e1000_hw *hw, u16 addr, u8 dev_addr, u16 *data);
#line 15 
#line 15 
bool igb_get_flash_presence_i210(struct e1000_hw *hw);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.h"
#line 17 
s32 igb_blink_led(struct e1000_hw *hw);
#line 19 
#line 19 
s32 igb_cleanup_led(struct e1000_hw *hw);
#line 22 
#line 22 
s32 igb_force_mac_fc(struct e1000_hw *hw);
#line 29 
#line 29 
s32 igb_led_off(struct e1000_hw *hw);
#line 32 
#line 32 
s32 igb_setup_link(struct e1000_hw *hw);
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
#line 251 
s32 igb_read_emi_reg(struct e1000_hw *hw, u16 addr, u16 *data);
#line 252 
#line 252 
s32 igb_set_eee_i350(struct e1000_hw *hw, bool adv1G, bool adv100M);
#line 253 
#line 253 
s32 igb_set_eee_i354(struct e1000_hw *hw, bool adv1G, bool adv100M);
#line 254 
#line 254 
s32 igb_get_eee_status_i354(struct e1000_hw *hw, bool *status);
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 213 
int ptp_clock_index(struct ptp_clock *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
__inline static int igb_desc_unused(struct igb_ring *ring)
{
  #line 377 
  if ((int)ring->next_to_clean > (int)ring->next_to_use) 
                                                         #line 378 
                                                         return ((int)ring->next_to_clean - (int)ring->next_to_use) + -1;
  #line 380 
  return (((int)ring->count + (int)ring->next_to_clean) - (int)ring->next_to_use) + -1;
}

#line 644 
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
char igb_driver_name[4U];
#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
char igb_driver_version[8U];
#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
#line 647 
int igb_open(struct net_device *netdev);
#line 648 
#line 648 
int igb_close(struct net_device *netdev);
#line 649 
#line 649 
int igb_up(struct igb_adapter *adapter);
#line 650 
#line 650 
void igb_down(struct igb_adapter *adapter);
#line 651 
#line 651 
void igb_reinit_locked(struct igb_adapter *adapter);
#line 652 
#line 652 
void igb_reset(struct igb_adapter *adapter);
#line 653 
#line 653 
int igb_reinit_queues(struct igb_adapter *adapter);
#line 654 
#line 3309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
void igb_write_rss_indir_tbl(struct igb_adapter *adapter);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
#line 655 
int igb_set_spd_dplx(struct igb_adapter *adapter, u32 spd, u8 dplx);
#line 656 
#line 656 
int igb_setup_tx_resources(struct igb_ring *tx_ring);
#line 657 
#line 657 
int igb_setup_rx_resources(struct igb_ring *rx_ring);
#line 658 
#line 658 
void igb_free_tx_resources(struct igb_ring *tx_ring);
#line 659 
#line 659 
void igb_free_rx_resources(struct igb_ring *rx_ring);
#line 660 
#line 660 
void igb_configure_tx_ring(struct igb_adapter *adapter, struct igb_ring *ring);
#line 661 
#line 661 
void igb_configure_rx_ring(struct igb_adapter *adapter, struct igb_ring *ring);
#line 662 
#line 662 
void igb_setup_tctl(struct igb_adapter *adapter);
#line 663 
#line 663 
void igb_setup_rctl(struct igb_adapter *adapter);
#line 664 
#line 664 
netdev_tx_t igb_xmit_frame_ring(struct sk_buff *skb, struct igb_ring *tx_ring);
#line 665 
#line 665 
void igb_alloc_rx_buffers(struct igb_ring *rx_ring, u16 cleaned_count);
#line 666 
#line 666 
void igb_update_stats(struct igb_adapter *adapter);
#line 667 
#line 667 
bool igb_has_link(struct igb_adapter *adapter);
#line 668 
#line 3515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
void igb_set_ethtool_ops(struct net_device *netdev);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
#line 669 
void igb_power_up_link(struct igb_adapter *adapter);
#line 670 
#line 670 
void igb_set_fw_version(struct igb_adapter *adapter);
#line 682 
#line 682 
void igb_set_flag_queue_pairs(struct igb_adapter *adapter, u32 max_rss_queues);
#line 683 
#line 683 
unsigned int igb_get_max_rss_queues(struct igb_adapter *adapter);
#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
__inline static s32 igb_read_phy_reg(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 698 
  if (hw->phy.ops.read_reg != (s32 (*)(struct e1000_hw *, u32 , u16 *))0) {
    #line 699 
    return (*(hw->phy.ops.read_reg))(hw,offset,data);
  }
  #line 701 
  return 0;
}

#line 704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
__inline static s32 igb_write_phy_reg(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 706 
  if (hw->phy.ops.write_reg != (s32 (*)(struct e1000_hw *, u32 , u16 ))0) {
    #line 707 
    return (*(hw->phy.ops.write_reg))(hw,offset,(unsigned short)((int)data));
  }
  #line 709 
  return 0;
}

#line 720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
__inline static struct netdev_queue *txring_txq(struct igb_ring *tx_ring)
{
  #line 722 
  return netdev_get_tx_queue(tx_ring->netdev,(unsigned int)tx_ring->queue_index);
}

#line 725 
#line 2768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
int igb_add_filter(struct igb_adapter *adapter, struct igb_nfc_filter *input);
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
#line 2843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
int igb_erase_filter(struct igb_adapter *adapter, struct igb_nfc_filter *input);
#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
#line 730 
int igb_add_mac_steering_filter(struct igb_adapter *adapter, u8 *addr, u8 queue, u8 flags);
#line 732 
#line 732 
int igb_del_mac_steering_filter(struct igb_adapter *adapter, u8 *addr, u8 queue, u8 flags);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_stats igb_gstrings_stats[42U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 3064}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 3088}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 3096}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 3104}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 3072}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 3264}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 3080}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 3256}, {.stat_string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 3080}, {.stat_string = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2928}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2856}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .sizeof_stat = 8, .stat_offset = 3112}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2888}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2904}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2944}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'w', (char)'i', (char)'n', (char)'d', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2920}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l'}, .sizeof_stat = 8, .stat_offset = 2920}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d', (char)'_', (char)'o', (char)'k'}, .sizeof_stat = 8, .stat_offset = 2936}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k'}, .sizeof_stat = 8, .stat_offset = 2896}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k'}, .sizeof_stat = 8, .stat_offset = 2912}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .sizeof_stat = 4, .stat_offset = 632}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 3136}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 3120}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2864}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d'}, .sizeof_stat = 8, .stat_offset = 3272}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 3280}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n'}, .sizeof_stat = 8, .stat_offset = 2976}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f'}, .sizeof_stat = 8, .stat_offset = 2992}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n'}, .sizeof_stat = 8, .stat_offset = 2984}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f'}, .sizeof_stat = 8, .stat_offset = 3000}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .sizeof_stat = 8, .stat_offset = 3096}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'o', (char)'f', (char)'_', (char)'s', (char)'y', (char)'n', (char)'c'}, .sizeof_stat = 8, .stat_offset = 3456}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .sizeof_stat = 8, .stat_offset = 3168}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .sizeof_stat = 8, .stat_offset = 3152}, {.stat_string = {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .sizeof_stat = 8, .stat_offset = 3160}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'b', (char)'m', (char)'c'}, .sizeof_stat = 8, .stat_offset = 3464}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'b', (char)'m', (char)'c'}, .sizeof_stat = 8, .stat_offset = 3480}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 3472}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 3488}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 13008}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'s', (char)'k', (char)'i', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 4, .stat_offset = 13012}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'r', (char)'e', (char)'d'}, .sizeof_stat = 4, .stat_offset = 13016}};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_stats igb_gstrings_net_stats[9U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 32}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 40}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 56}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 80}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 88}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 104}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 112}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 144}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'e', (char)'a', (char)'r', (char)'t', (char)'b', (char)'e', (char)'a', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 152}};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static char igb_gstrings_test[5U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'E', (char)'e', (char)'p', (char)'r', (char)'o', (char)'m', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static char igb_priv_flags_strings[1U][32U] = {{(char)'l', (char)'e', (char)'g', (char)'a', (char)'c', (char)'y', (char)'-', (char)'r', (char)'x'}};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 142 
  u32 status;
  #line 143 
  u32 speed;
  #line 144 
  u32 supported;
  #line 144 
  u32 advertising;
  #line 138 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 139 
  struct e1000_hw *hw = & adapter->hw;
  #line 140 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  #line 141 
  struct e1000_sfp_flags *eth_flags = & dev_spec->eth_flags;
  #line 146 
  status = igb_rd32(hw,8U);
  #line 147 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    #line 149 
    supported = 8431U;
    #line 157 
    advertising = 128U;
    #line 159 
    if ((int)hw->mac.autoneg == 1) {
      #line 160 
      advertising |= 64U;
      #line 162 
      advertising = (unsigned int)hw->phy.autoneg_advertised | advertising;
    }
    #line 165 
    cmd->base.port = (unsigned char)0U;
    #line 166 
    cmd->base.phy_address = (unsigned char)hw->phy.addr;
  }
  else {
    #line 168 
    supported = 140352U;
    #line 172 
    advertising = 132096U;
    #line 174 
    if (hw->mac.type == (unsigned int)e1000_i354) 
      #line 175 
      if ((unsigned int)hw->device_id == 8005U && (status & 8192U) == 0U) {
        #line 178 
        supported |= 32768U;
        #line 179 
        supported &= 4294836223U;
        #line 180 
        advertising |= 32768U;
        #line 181 
        advertising &= 4294836223U;
      }
    #line 184 
    if ((unsigned int)eth_flags->e100_base_fx != 0U || (unsigned int)eth_flags->e100_base_lx != 0U) {
      #line 185 
      supported |= 8U;
      #line 186 
      advertising |= 8U;
    }
    #line 188 
    if ((int)hw->mac.autoneg == 1) 
                                   #line 189 
                                   advertising |= 64U;
    #line 191 
    cmd->base.port = (unsigned char)3U;
  }
  #line 193 
  if (! hw->mac.autoneg) 
                         #line 194 
                         advertising &= 4294942719U;
  #line 197 
  switch ((unsigned int)hw->fc.requested_mode) {
    #line 198 
    case (unsigned int)3: 
                          #line 198 
    ;
    #line 199 
    advertising |= 8192U;
    #line 200 
    break;
    #line 201 
    case (unsigned int)1: 
                          #line 201 
    ;
    #line 202 
    advertising |= 24576U;
    #line 204 
    break;
    #line 205 
    case (unsigned int)2: 
                          #line 205 
    ;
    #line 206 
    advertising |= 16384U;
    #line 207 
    break;
    #line 208 
    default: 
             #line 208 
    ;
    #line 209 
    advertising &= 4294942719U;
  }
  #line 212 
  if ((status & 2U) != 0U) {
    #line 213 
    if ((status & 4096U) != 0U && (status & 8192U) == 0U) 
                                                          #line 215 
                                                          speed = 2500U;
    else 
      #line 216 
      if ((status & 128U) != 0U) 
                                 #line 217 
                                 speed = 1000U;
      else 
        #line 218 
        if ((status & 64U) != 0U) 
                                  #line 219 
                                  speed = 100U; else 
                                                     #line 221 
                                                     speed = 10U;
    #line 223 
    if ((status & 1U) != 0U || hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
      #line 225 
      cmd->base.duplex = (unsigned char)1U; else 
                                                 #line 227 
                                                 cmd->base.duplex = (unsigned char)0U;
  }
  else {
    #line 229 
    speed = 4294967295U;
    #line 230 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 232 
  cmd->base.speed = speed;
  #line 233 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber || (int)hw->mac.autoneg != 0) 
    #line 235 
    cmd->base.autoneg = (unsigned char)1U; else 
                                                #line 237 
                                                cmd->base.autoneg = (unsigned char)0U;
  #line 240 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
    #line 241 
    if ((int)hw->phy.is_mdix != 0) 
                                   #line 241 
                                   cmd->base.eth_tp_mdix = (unsigned char)2U; else 
                                                                    #line 241 
                                                                    cmd->base.eth_tp_mdix = (unsigned char)1U;
  else 
       #line 244 
       cmd->base.eth_tp_mdix = (unsigned char)0U;
  #line 246 
  if ((unsigned int)hw->phy.mdix == 0U) 
                                        #line 247 
                                        cmd->base.eth_tp_mdix_ctrl = (unsigned char)3U; else 
                                                                    #line 249 
                                                                    cmd->base.eth_tp_mdix_ctrl = hw->phy.mdix;
  #line 251 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 253 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 256 
  return 0;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 264 
  u32 advertising;
  #line 262 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 263 
  struct e1000_hw *hw = & adapter->hw;
  #line 269 
  if (igb_check_reset_block(hw) != 0) {
    #line 270 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot change link characteristics when SoL/IDER is active.\n");
    #line 272 
    return -22;
  }
  #line 279 
  if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 0U) {
    #line 280 
    if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
      #line 281 
      return -95;
    #line 283 
    if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 3U && (unsigned int)cmd->base.autoneg != 1U) {
      #line 285 
      _dev_err(& (adapter->pdev)->dev,(char *)"forcing MDI/MDI-X state is not supported when link speed and/or duplex are forced\n");
      #line 286 
      return -22;
    }
  }
  #line 290 
  while (1) {
    #line 290 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 290 
                                                             break;
    #line 291 
    usleep_range(1000UL,2000UL);
  }
  #line 293 
  ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 296 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 297 
    hw->mac.autoneg = (_Bool)1;
    #line 298 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) {
      #line 299 
      hw->phy.autoneg_advertised = (unsigned short)((unsigned int)((unsigned short)advertising) | 1088U);
      #line 302 
      switch ((int)adapter->link_speed) {
        #line 303 
        case 2500: 
                   #line 303 
        ;
        #line 304 
        hw->phy.autoneg_advertised = (unsigned short)32768U;
        #line 306 
        break;
        #line 307 
        case 1000: 
                   #line 307 
        ;
        #line 308 
        hw->phy.autoneg_advertised = (unsigned short)32U;
        #line 310 
        break;
        #line 311 
        case 100: 
                  #line 311 
        ;
        #line 312 
        hw->phy.autoneg_advertised = (unsigned short)8U;
        #line 314 
        break;
        #line 315 
        default: 
                 #line 315 
        ;
        #line 316 
        break;
      }
    }
    else 
         #line 319 
         hw->phy.autoneg_advertised = (unsigned short)((unsigned int)((unsigned short)advertising) | 192U);
    #line 323 
    advertising = (unsigned int)hw->phy.autoneg_advertised;
    #line 324 
    if ((int)adapter->fc_autoneg != 0) 
                                       #line 325 
                                       hw->fc.requested_mode = e1000_fc_default;
  }
  else {
    #line 327 
    u32 speed = cmd->base.speed;
    #line 329 
    if (igb_set_spd_dplx(adapter,speed,
                         (unsigned char)((int)cmd->base.duplex)) != 0) {
      #line 330 
      cif_clear_bit(1L,& adapter->state);
      #line 331 
      return -22;
    }
  }
  #line 336 
  if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 0U) 
    #line 340 
    if ((unsigned int)cmd->base.eth_tp_mdix_ctrl == 3U) 
                                                        #line 341 
                                                        hw->phy.mdix = (unsigned char)0U; else 
                                                                    #line 343 
                                                                    hw->phy.mdix = cmd->base.eth_tp_mdix_ctrl;
  #line 347 
  if ((int)netif_running(adapter->netdev) != 0) {
    #line 348 
    igb_down(adapter);
    #line 349 
    igb_up(adapter);
  }
  else 
       #line 351 
       igb_reset(adapter);
  #line 353 
  cif_clear_bit(1L,& adapter->state);
  #line 354 
  return 0;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static u32 igb_get_link(struct net_device *netdev)
{
  #line 359 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 360 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  #line 368 
  if (! netif_carrier_ok(netdev)) 
                                  #line 369 
                                  mac->get_link_status = (_Bool)1;
  #line 371 
  return (unsigned int)igb_has_link(adapter);
}

#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 377 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 378 
  struct e1000_hw *hw = & adapter->hw;
  #line 380 
  pause->autoneg = (unsigned int)((int)adapter->fc_autoneg != 0);
  #line 383 
  if (hw->fc.current_mode == (unsigned int)e1000_fc_rx_pause) 
                                                              #line 384 
                                                              pause->rx_pause = 1U;
  else 
    #line 385 
    if (hw->fc.current_mode == (unsigned int)e1000_fc_tx_pause) 
                                                                #line 386 
                                                                pause->tx_pause = 1U;
    else 
      #line 387 
      if (hw->fc.current_mode == (unsigned int)e1000_fc_full) {
        #line 388 
        pause->rx_pause = 1U;
        #line 389 
        pause->tx_pause = 1U;
      }
  #line 391 
  return;
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 396 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 397 
  struct e1000_hw *hw = & adapter->hw;
  #line 398 
  int retval = 0;
  #line 401 
  if ((unsigned int)hw->dev_spec._82575.eth_flags.e100_base_fx != 0U) 
    #line 402 
    return -22;
  #line 404 
  adapter->fc_autoneg = (_Bool)(pause->autoneg != 0U);
  #line 406 
  while (1) {
    #line 406 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 406 
                                                             break;
    #line 407 
    usleep_range(1000UL,2000UL);
  }
  #line 409 
  if ((int)adapter->fc_autoneg == 1) {
    #line 410 
    hw->fc.requested_mode = e1000_fc_default;
    #line 411 
    if ((int)netif_running(adapter->netdev) != 0) {
      #line 412 
      igb_down(adapter);
      #line 413 
      igb_up(adapter);
    }
    else 
         #line 415 
         igb_reset(adapter);
  }
  else {
    #line 418 
    if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
                                                        #line 419 
                                                        hw->fc.requested_mode = e1000_fc_full;
    else 
      #line 420 
      if (pause->rx_pause != 0U && pause->tx_pause == 0U) 
                                                          #line 421 
                                                          hw->fc.requested_mode = e1000_fc_rx_pause;
      else 
        #line 422 
        if (pause->rx_pause == 0U && pause->tx_pause != 0U) 
                                                            #line 423 
                                                            hw->fc.requested_mode = e1000_fc_tx_pause;
        else 
          #line 424 
          if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
                                                              #line 425 
                                                              hw->fc.requested_mode = e1000_fc_none;
    #line 427 
    hw->fc.current_mode = hw->fc.requested_mode;
    #line 429 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
      #line 429 
      retval = igb_force_mac_fc(hw); else 
                                          #line 430 
                                          retval = igb_setup_link(hw);
  }
  #line 433 
  cif_clear_bit(1L,& adapter->state);
  #line 434 
  return retval;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static u32 igb_get_msglevel(struct net_device *netdev)
{
  #line 439 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 440 
  return (unsigned int)adapter->msg_enable;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_set_msglevel(struct net_device *netdev, u32 data)
{
  #line 445 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 446 
  adapter->msg_enable = (int)data;
  #line 447 
  return;
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_regs_len(struct net_device *netdev)
{
  #line 452 
  return 2960;
}

#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *p)
{
  #line 461 
  u8 i;
  #line 458 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 459 
  struct e1000_hw *hw = & adapter->hw;
  #line 460 
  u32 *regs_buff = (u32 *)p;
  #line 463 
  memset(p,0,2960UL);
  #line 465 
  regs->version = ((unsigned int)((int)hw->revision_id << 16) | (unsigned int)hw->device_id) | 16777216U;
  #line 468 
  *regs_buff = igb_rd32(hw,0U);
  #line 469 
  *(regs_buff + 1U) = igb_rd32(hw,8U);
  #line 470 
  *(regs_buff + 2U) = igb_rd32(hw,24U);
  #line 471 
  *(regs_buff + 3U) = igb_rd32(hw,32U);
  #line 472 
  *(regs_buff + 4U) = igb_rd32(hw,36U);
  #line 473 
  *(regs_buff + 5U) = igb_rd32(hw,52U);
  #line 474 
  *(regs_buff + 6U) = igb_rd32(hw,56U);
  #line 475 
  *(regs_buff + 7U) = igb_rd32(hw,3584U);
  #line 476 
  *(regs_buff + 8U) = igb_rd32(hw,4096U);
  #line 477 
  *(regs_buff + 9U) = igb_rd32(hw,4104U);
  #line 478 
  *(regs_buff + 10U) = igb_rd32(hw,4168U);
  #line 479 
  *(regs_buff + 11U) = igb_rd32(hw,4172U);
  #line 482 
  *(regs_buff + 12U) = igb_rd32(hw,16U);
  #line 488 
  *(regs_buff + 13U) = igb_rd32(hw,5408U);
  #line 489 
  *(regs_buff + 14U) = igb_rd32(hw,5408U);
  #line 490 
  *(regs_buff + 15U) = igb_rd32(hw,5412U);
  #line 491 
  *(regs_buff + 16U) = igb_rd32(hw,5416U);
  #line 492 
  *(regs_buff + 17U) = igb_rd32(hw,5420U);
  #line 493 
  *(regs_buff + 18U) = igb_rd32(hw,5424U);
  #line 497 
  *(regs_buff + 19U) = igb_rd32(hw,200U);
  #line 498 
  *(regs_buff + 20U) = igb_rd32(hw,200U);
  #line 499 
  *(regs_buff + 21U) = igb_rd32(hw,208U);
  #line 500 
  *(regs_buff + 22U) = igb_rd32(hw,216U);
  #line 501 
  *(regs_buff + 23U) = igb_rd32(hw,16640U);
  #line 502 
  *(regs_buff + 24U) = igb_rd32(hw,224U);
  #line 503 
  *(regs_buff + 25U) = igb_rd32(hw,23232U);
  #line 506 
  *(regs_buff + 26U) = igb_rd32(hw,40U);
  #line 507 
  *(regs_buff + 27U) = igb_rd32(hw,44U);
  #line 508 
  *(regs_buff + 28U) = igb_rd32(hw,368U);
  #line 509 
  *(regs_buff + 29U) = igb_rd32(hw,8544U);
  #line 510 
  *(regs_buff + 30U) = igb_rd32(hw,8552U);
  #line 511 
  *(regs_buff + 31U) = igb_rd32(hw,9312U);
  #line 514 
  *(regs_buff + 32U) = igb_rd32(hw,256U);
  #line 515 
  *(regs_buff + 33U) = igb_rd32(hw,20480U);
  #line 516 
  *(regs_buff + 34U) = igb_rd32(hw,20484U);
  #line 517 
  *(regs_buff + 35U) = igb_rd32(hw,20488U);
  #line 518 
  *(regs_buff + 36U) = igb_rd32(hw,22552U);
  #line 519 
  *(regs_buff + 37U) = igb_rd32(hw,22556U);
  #line 522 
  *(regs_buff + 38U) = igb_rd32(hw,1024U);
  #line 523 
  *(regs_buff + 39U) = igb_rd32(hw,1028U);
  #line 524 
  *(regs_buff + 40U) = igb_rd32(hw,1040U);
  #line 525 
  *(regs_buff + 41U) = igb_rd32(hw,13712U);
  #line 528 
  *(regs_buff + 42U) = igb_rd32(hw,22528U);
  #line 529 
  *(regs_buff + 43U) = igb_rd32(hw,22536U);
  #line 530 
  *(regs_buff + 44U) = igb_rd32(hw,22544U);
  #line 531 
  *(regs_buff + 45U) = igb_rd32(hw,22584U);
  #line 532 
  *(regs_buff + 46U) = igb_rd32(hw,22784U);
  #line 535 
  *(regs_buff + 47U) = igb_rd32(hw,16896U);
  #line 536 
  *(regs_buff + 48U) = igb_rd32(hw,16904U);
  #line 537 
  *(regs_buff + 49U) = igb_rd32(hw,16908U);
  #line 538 
  *(regs_buff + 50U) = igb_rd32(hw,16920U);
  #line 539 
  *(regs_buff + 51U) = igb_rd32(hw,16924U);
  #line 540 
  *(regs_buff + 52U) = igb_rd32(hw,16928U);
  #line 541 
  *(regs_buff + 53U) = igb_rd32(hw,16932U);
  #line 544 
  *(regs_buff + 54U) = (unsigned int)adapter->stats.crcerrs;
  #line 545 
  *(regs_buff + 55U) = (unsigned int)adapter->stats.algnerrc;
  #line 546 
  *(regs_buff + 56U) = (unsigned int)adapter->stats.symerrs;
  #line 547 
  *(regs_buff + 57U) = (unsigned int)adapter->stats.rxerrc;
  #line 548 
  *(regs_buff + 58U) = (unsigned int)adapter->stats.mpc;
  #line 549 
  *(regs_buff + 59U) = (unsigned int)adapter->stats.scc;
  #line 550 
  *(regs_buff + 60U) = (unsigned int)adapter->stats.ecol;
  #line 551 
  *(regs_buff + 61U) = (unsigned int)adapter->stats.mcc;
  #line 552 
  *(regs_buff + 62U) = (unsigned int)adapter->stats.latecol;
  #line 553 
  *(regs_buff + 63U) = (unsigned int)adapter->stats.colc;
  #line 554 
  *(regs_buff + 64U) = (unsigned int)adapter->stats.dc;
  #line 555 
  *(regs_buff + 65U) = (unsigned int)adapter->stats.tncrs;
  #line 556 
  *(regs_buff + 66U) = (unsigned int)adapter->stats.sec;
  #line 557 
  *(regs_buff + 67U) = (unsigned int)adapter->stats.htdpmc;
  #line 558 
  *(regs_buff + 68U) = (unsigned int)adapter->stats.rlec;
  #line 559 
  *(regs_buff + 69U) = (unsigned int)adapter->stats.xonrxc;
  #line 560 
  *(regs_buff + 70U) = (unsigned int)adapter->stats.xontxc;
  #line 561 
  *(regs_buff + 71U) = (unsigned int)adapter->stats.xoffrxc;
  #line 562 
  *(regs_buff + 72U) = (unsigned int)adapter->stats.xofftxc;
  #line 563 
  *(regs_buff + 73U) = (unsigned int)adapter->stats.fcruc;
  #line 564 
  *(regs_buff + 74U) = (unsigned int)adapter->stats.prc64;
  #line 565 
  *(regs_buff + 75U) = (unsigned int)adapter->stats.prc127;
  #line 566 
  *(regs_buff + 76U) = (unsigned int)adapter->stats.prc255;
  #line 567 
  *(regs_buff + 77U) = (unsigned int)adapter->stats.prc511;
  #line 568 
  *(regs_buff + 78U) = (unsigned int)adapter->stats.prc1023;
  #line 569 
  *(regs_buff + 79U) = (unsigned int)adapter->stats.prc1522;
  #line 570 
  *(regs_buff + 80U) = (unsigned int)adapter->stats.gprc;
  #line 571 
  *(regs_buff + 81U) = (unsigned int)adapter->stats.bprc;
  #line 572 
  *(regs_buff + 82U) = (unsigned int)adapter->stats.mprc;
  #line 573 
  *(regs_buff + 83U) = (unsigned int)adapter->stats.gptc;
  #line 574 
  *(regs_buff + 84U) = (unsigned int)adapter->stats.gorc;
  #line 575 
  *(regs_buff + 86U) = (unsigned int)adapter->stats.gotc;
  #line 576 
  *(regs_buff + 88U) = (unsigned int)adapter->stats.rnbc;
  #line 577 
  *(regs_buff + 89U) = (unsigned int)adapter->stats.ruc;
  #line 578 
  *(regs_buff + 90U) = (unsigned int)adapter->stats.rfc;
  #line 579 
  *(regs_buff + 91U) = (unsigned int)adapter->stats.roc;
  #line 580 
  *(regs_buff + 92U) = (unsigned int)adapter->stats.rjc;
  #line 581 
  *(regs_buff + 93U) = (unsigned int)adapter->stats.mgprc;
  #line 582 
  *(regs_buff + 94U) = (unsigned int)adapter->stats.mgpdc;
  #line 583 
  *(regs_buff + 95U) = (unsigned int)adapter->stats.mgptc;
  #line 584 
  *(regs_buff + 96U) = (unsigned int)adapter->stats.tor;
  #line 585 
  *(regs_buff + 98U) = (unsigned int)adapter->stats.tot;
  #line 586 
  *(regs_buff + 100U) = (unsigned int)adapter->stats.tpr;
  #line 587 
  *(regs_buff + 101U) = (unsigned int)adapter->stats.tpt;
  #line 588 
  *(regs_buff + 102U) = (unsigned int)adapter->stats.ptc64;
  #line 589 
  *(regs_buff + 103U) = (unsigned int)adapter->stats.ptc127;
  #line 590 
  *(regs_buff + 104U) = (unsigned int)adapter->stats.ptc255;
  #line 591 
  *(regs_buff + 105U) = (unsigned int)adapter->stats.ptc511;
  #line 592 
  *(regs_buff + 106U) = (unsigned int)adapter->stats.ptc1023;
  #line 593 
  *(regs_buff + 107U) = (unsigned int)adapter->stats.ptc1522;
  #line 594 
  *(regs_buff + 108U) = (unsigned int)adapter->stats.mptc;
  #line 595 
  *(regs_buff + 109U) = (unsigned int)adapter->stats.bptc;
  #line 596 
  *(regs_buff + 110U) = (unsigned int)adapter->stats.tsctc;
  #line 597 
  *(regs_buff + 111U) = (unsigned int)adapter->stats.iac;
  #line 598 
  *(regs_buff + 112U) = (unsigned int)adapter->stats.rpthc;
  #line 599 
  *(regs_buff + 113U) = (unsigned int)adapter->stats.hgptc;
  #line 600 
  *(regs_buff + 114U) = (unsigned int)adapter->stats.hgorc;
  #line 601 
  *(regs_buff + 116U) = (unsigned int)adapter->stats.hgotc;
  #line 602 
  *(regs_buff + 118U) = (unsigned int)adapter->stats.lenerrs;
  #line 603 
  *(regs_buff + 119U) = (unsigned int)adapter->stats.scvpc;
  #line 604 
  *(regs_buff + 120U) = (unsigned int)adapter->stats.hrmpc;
  #line 606 
  i = (unsigned char)0U;
  #line 606 
  while ((unsigned int)i <= 3U) {
    #line 607 
    int tmp_0;
    #line 607 
    if ((unsigned int)i <= 3U) 
                               #line 607 
                               tmp_0 = (int)i * 256 + 10252; else 
                                                                  #line 607 
                                                                  tmp_0 = (int)i * 64 + 49164;
    #line 607 
    ;
    #line 607 
    *(regs_buff + (unsigned long)((int)i + 121)) = igb_rd32(hw,(unsigned int)tmp_0);
    #line 606 
    i = (u8)((int)i + 1);
  }
  #line 608 
  i = (unsigned char)0U;
  #line 608 
  while ((unsigned int)i <= 3U) {
    #line 609 
    *(regs_buff + (unsigned long)((int)i + 125)) = igb_rd32(hw,(unsigned int)(((int)i + 5408) * 4));
    #line 608 
    i = (u8)((int)i + 1);
  }
  #line 610 
  i = (unsigned char)0U;
  #line 610 
  while ((unsigned int)i <= 3U) {
    #line 611 
    int tmp_1;
    #line 611 
    if ((unsigned int)i <= 3U) 
                               #line 611 
                               tmp_1 = ((int)i + 40) * 256; else 
                                                                 #line 611 
                                                                 tmp_1 = ((int)i + 768) * 64;
    #line 611 
    ;
    #line 611 
    *(regs_buff + (unsigned long)((int)i + 129)) = igb_rd32(hw,(unsigned int)tmp_1);
    #line 610 
    i = (u8)((int)i + 1);
  }
  #line 612 
  i = (unsigned char)0U;
  #line 612 
  while ((unsigned int)i <= 3U) {
    #line 613 
    int tmp_2;
    #line 613 
    if ((unsigned int)i <= 3U) 
                               #line 613 
                               tmp_2 = (int)i * 256 + 10244; else 
                                                                  #line 613 
                                                                  tmp_2 = (int)i * 64 + 49156;
    #line 613 
    ;
    #line 613 
    *(regs_buff + (unsigned long)((int)i + 133)) = igb_rd32(hw,(unsigned int)tmp_2);
    #line 612 
    i = (u8)((int)i + 1);
  }
  #line 614 
  i = (unsigned char)0U;
  #line 614 
  while ((unsigned int)i <= 3U) {
    #line 615 
    int tmp_3;
    #line 615 
    if ((unsigned int)i <= 3U) 
                               #line 615 
                               tmp_3 = (int)i * 256 + 10248; else 
                                                                  #line 615 
                                                                  tmp_3 = (int)i * 64 + 49160;
    #line 615 
    ;
    #line 615 
    *(regs_buff + (unsigned long)((int)i + 137)) = igb_rd32(hw,(unsigned int)tmp_3);
    #line 614 
    i = (u8)((int)i + 1);
  }
  #line 616 
  i = (unsigned char)0U;
  #line 616 
  while ((unsigned int)i <= 3U) {
    #line 617 
    int tmp_4;
    #line 617 
    if ((unsigned int)i <= 3U) 
                               #line 617 
                               tmp_4 = (int)i * 256 + 10256; else 
                                                                  #line 617 
                                                                  tmp_4 = (int)i * 64 + 49168;
    #line 617 
    ;
    #line 617 
    *(regs_buff + (unsigned long)((int)i + 141)) = igb_rd32(hw,(unsigned int)tmp_4);
    #line 616 
    i = (u8)((int)i + 1);
  }
  #line 618 
  i = (unsigned char)0U;
  #line 618 
  while ((unsigned int)i <= 3U) {
    #line 619 
    int tmp_5;
    #line 619 
    if ((unsigned int)i <= 3U) 
                               #line 619 
                               tmp_5 = (int)i * 256 + 10264; else 
                                                                  #line 619 
                                                                  tmp_5 = (int)i * 64 + 49176;
    #line 619 
    ;
    #line 619 
    *(regs_buff + (unsigned long)((int)i + 145)) = igb_rd32(hw,(unsigned int)tmp_5);
    #line 618 
    i = (u8)((int)i + 1);
  }
  #line 620 
  i = (unsigned char)0U;
  #line 620 
  while ((unsigned int)i <= 3U) {
    #line 621 
    int tmp_6;
    #line 621 
    if ((unsigned int)i <= 3U) 
                               #line 621 
                               tmp_6 = (int)i * 256 + 10280; else 
                                                                  #line 621 
                                                                  tmp_6 = (int)i * 64 + 49192;
    #line 621 
    ;
    #line 621 
    *(regs_buff + (unsigned long)((int)i + 149)) = igb_rd32(hw,(unsigned int)tmp_6);
    #line 620 
    i = (u8)((int)i + 1);
  }
  #line 623 
  i = (unsigned char)0U;
  #line 623 
  while ((unsigned int)i <= 9U) {
    #line 624 
    *(regs_buff + (unsigned long)((int)i + 153)) = igb_rd32(hw,(unsigned int)(((int)i + 1440) * 4));
    #line 623 
    i = (u8)((int)i + 1);
  }
  #line 625 
  i = (unsigned char)0U;
  #line 625 
  while ((unsigned int)i <= 7U) {
    #line 626 
    *(regs_buff + (unsigned long)((int)i + 163)) = igb_rd32(hw,(unsigned int)(((int)i + 5792) * 4));
    #line 625 
    i = (u8)((int)i + 1);
  }
  #line 627 
  i = (unsigned char)0U;
  #line 627 
  while ((unsigned int)i <= 7U) {
    #line 628 
    *(regs_buff + (unsigned long)((int)i + 171)) = igb_rd32(hw,(unsigned int)(((int)i + 5800) * 4));
    #line 627 
    i = (u8)((int)i + 1);
  }
  #line 629 
  i = (unsigned char)0U;
  #line 629 
  while ((unsigned int)i <= 15U) {
    #line 630 
    int tmp_7;
    #line 630 
    if ((unsigned int)i <= 15U) 
                                #line 630 
                                tmp_7 = ((int)i + 2688) * 8; else 
                                                                  #line 630 
                                                                  tmp_7 = ((int)i + 2700) * 8;
    #line 630 
    ;
    #line 630 
    *(regs_buff + (unsigned long)((int)i + 179)) = igb_rd32(hw,(unsigned int)tmp_7);
    #line 629 
    i = (u8)((int)i + 1);
  }
  #line 631 
  i = (unsigned char)0U;
  #line 631 
  while ((unsigned int)i <= 15U) {
    #line 632 
    int tmp_8;
    #line 632 
    if ((unsigned int)i <= 15U) 
                                #line 632 
                                tmp_8 = (int)i * 8 + 21508; else 
                                                                 #line 632 
                                                                 tmp_8 = ((int)i + -16) * 8 + 21732;
    #line 632 
    ;
    #line 632 
    *(regs_buff + (unsigned long)((int)i + 195)) = igb_rd32(hw,(unsigned int)tmp_8);
    #line 631 
    i = (u8)((int)i + 1);
  }
  #line 634 
  i = (unsigned char)0U;
  #line 634 
  while ((unsigned int)i <= 3U) {
    #line 635 
    int tmp_9;
    #line 635 
    if ((unsigned int)i <= 3U) 
                               #line 635 
                               tmp_9 = ((int)i + 56) * 256; else 
                                                                 #line 635 
                                                                 tmp_9 = ((int)i + 896) * 64;
    #line 635 
    ;
    #line 635 
    *(regs_buff + (unsigned long)((int)i + 211)) = igb_rd32(hw,(unsigned int)tmp_9);
    #line 634 
    i = (u8)((int)i + 1);
  }
  #line 636 
  i = (unsigned char)0U;
  #line 636 
  while ((unsigned int)i <= 3U) {
    #line 637 
    int tmp_10;
    #line 637 
    if ((unsigned int)i <= 3U) 
                               #line 637 
                               tmp_10 = (int)i * 256 + 14340; else 
                                                                   #line 637 
                                                                   tmp_10 = (int)i * 64 + 57348;
    #line 637 
    ;
    #line 637 
    *(regs_buff + (unsigned long)((int)i + 215)) = igb_rd32(hw,(unsigned int)tmp_10);
    #line 636 
    i = (u8)((int)i + 1);
  }
  #line 638 
  i = (unsigned char)0U;
  #line 638 
  while ((unsigned int)i <= 3U) {
    #line 639 
    int tmp_11;
    #line 639 
    if ((unsigned int)i <= 3U) 
                               #line 639 
                               tmp_11 = (int)i * 256 + 14344; else 
                                                                   #line 639 
                                                                   tmp_11 = (int)i * 64 + 57352;
    #line 639 
    ;
    #line 639 
    *(regs_buff + (unsigned long)((int)i + 219)) = igb_rd32(hw,(unsigned int)tmp_11);
    #line 638 
    i = (u8)((int)i + 1);
  }
  #line 640 
  i = (unsigned char)0U;
  #line 640 
  while ((unsigned int)i <= 3U) {
    #line 641 
    int tmp_12;
    #line 641 
    if ((unsigned int)i <= 3U) 
                               #line 641 
                               tmp_12 = (int)i * 256 + 14352; else 
                                                                   #line 641 
                                                                   tmp_12 = (int)i * 64 + 57360;
    #line 641 
    ;
    #line 641 
    *(regs_buff + (unsigned long)((int)i + 223)) = igb_rd32(hw,(unsigned int)tmp_12);
    #line 640 
    i = (u8)((int)i + 1);
  }
  #line 642 
  i = (unsigned char)0U;
  #line 642 
  while ((unsigned int)i <= 3U) {
    #line 643 
    int tmp_13;
    #line 643 
    if ((unsigned int)i <= 3U) 
                               #line 643 
                               tmp_13 = (int)i * 256 + 14360; else 
                                                                   #line 643 
                                                                   tmp_13 = (int)i * 64 + 57368;
    #line 643 
    ;
    #line 643 
    *(regs_buff + (unsigned long)((int)i + 227)) = igb_rd32(hw,(unsigned int)tmp_13);
    #line 642 
    i = (u8)((int)i + 1);
  }
  #line 644 
  i = (unsigned char)0U;
  #line 644 
  while ((unsigned int)i <= 3U) {
    #line 645 
    int tmp_14;
    #line 645 
    if ((unsigned int)i <= 3U) 
                               #line 645 
                               tmp_14 = (int)i * 256 + 14376; else 
                                                                   #line 645 
                                                                   tmp_14 = (int)i * 64 + 57384;
    #line 645 
    ;
    #line 645 
    *(regs_buff + (unsigned long)((int)i + 231)) = igb_rd32(hw,(unsigned int)tmp_14);
    #line 644 
    i = (u8)((int)i + 1);
  }
  #line 646 
  i = (unsigned char)0U;
  #line 646 
  while ((unsigned int)i <= 3U) {
    #line 647 
    int tmp_15;
    #line 647 
    if ((unsigned int)i <= 3U) 
                               #line 647 
                               tmp_15 = (int)i * 256 + 14392; else 
                                                                   #line 647 
                                                                   tmp_15 = (int)i * 64 + 57400;
    #line 647 
    ;
    #line 647 
    *(regs_buff + (unsigned long)((int)i + 235)) = igb_rd32(hw,(unsigned int)tmp_15);
    #line 646 
    i = (u8)((int)i + 1);
  }
  #line 648 
  i = (unsigned char)0U;
  #line 648 
  while ((unsigned int)i <= 3U) {
    #line 649 
    int tmp_16;
    #line 649 
    if ((unsigned int)i <= 3U) 
                               #line 649 
                               tmp_16 = (int)i * 256 + 14396; else 
                                                                   #line 649 
                                                                   tmp_16 = (int)i * 64 + 57404;
    #line 649 
    ;
    #line 649 
    *(regs_buff + (unsigned long)((int)i + 239)) = igb_rd32(hw,(unsigned int)tmp_16);
    #line 648 
    i = (u8)((int)i + 1);
  }
  #line 650 
  i = (unsigned char)0U;
  #line 650 
  while ((unsigned int)i <= 3U) {
    #line 651 
    int tmp_17;
    #line 651 
    if ((unsigned int)i <= 3U) 
                               #line 651 
                               tmp_17 = (int)i * 256 + 14356; else 
                                                                   #line 651 
                                                                   tmp_17 = (int)i * 64 + 57364;
    #line 651 
    ;
    #line 651 
    *(regs_buff + (unsigned long)((int)i + 243)) = igb_rd32(hw,(unsigned int)tmp_17);
    #line 650 
    i = (u8)((int)i + 1);
  }
  #line 653 
  i = (unsigned char)0U;
  #line 653 
  while ((unsigned int)i <= 3U) {
    #line 654 
    *(regs_buff + (unsigned long)((int)i + 247)) = igb_rd32(hw,(unsigned int)(((int)i + 2824) * 8));
    #line 653 
    i = (u8)((int)i + 1);
  }
  #line 655 
  i = (unsigned char)0U;
  #line 655 
  while ((unsigned int)i <= 3U) {
    #line 656 
    *(regs_buff + (unsigned long)((int)i + 251)) = igb_rd32(hw,(unsigned int)(((int)i + 5664) * 4));
    #line 655 
    i = (u8)((int)i + 1);
  }
  #line 657 
  i = (unsigned char)0U;
  #line 657 
  while ((unsigned int)i <= 31U) {
    #line 658 
    *(regs_buff + (unsigned long)((int)i + 255)) = igb_rd32(hw,(unsigned int)(((int)i + 5760) * 4));
    #line 657 
    i = (u8)((int)i + 1);
  }
  #line 659 
  i = (unsigned char)0U;
  #line 659 
  while ((int)i >= 0) {
    #line 660 
    *(regs_buff + (unsigned long)((int)i + 287)) = igb_rd32(hw,(unsigned int)(((int)i + 4608) * 8));
    #line 659 
    i = (u8)((int)i + 1);
  }
  #line 661 
  i = (unsigned char)0U;
  #line 661 
  while ((int)i >= 0) {
    #line 662 
    *(regs_buff + (unsigned long)((int)i + 415)) = igb_rd32(hw,(unsigned int)(((int)i + 4864) * 8));
    #line 661 
    i = (u8)((int)i + 1);
  }
  #line 663 
  i = (unsigned char)0U;
  #line 663 
  while ((unsigned int)i <= 3U) {
    #line 664 
    *(regs_buff + (unsigned long)((int)i + 543)) = igb_rd32(hw,(unsigned int)(((int)i + 3040) * 8));
    #line 663 
    i = (u8)((int)i + 1);
  }
  #line 666 
  *(regs_buff + 547U) = igb_rd32(hw,13328U);
  #line 667 
  *(regs_buff + 548U) = igb_rd32(hw,13336U);
  #line 668 
  *(regs_buff + 549U) = igb_rd32(hw,13344U);
  #line 669 
  *(regs_buff + 550U) = igb_rd32(hw,13360U);
  #line 671 
  if (hw->mac.type > (unsigned int)e1000_82580) {
    #line 672 
    *(regs_buff + 551U) = (unsigned int)adapter->stats.o2bgptc;
    #line 673 
    *(regs_buff + 552U) = (unsigned int)adapter->stats.b2ospc;
    #line 674 
    *(regs_buff + 553U) = (unsigned int)adapter->stats.o2bspc;
    #line 675 
    *(regs_buff + 554U) = (unsigned int)adapter->stats.b2ogprc;
  }
  #line 678 
  if (hw->mac.type == (unsigned int)e1000_82576) {
    #line 679 
    i = (unsigned char)0U;
    #line 679 
    while ((unsigned int)i <= 11U) {
      #line 680 
      *(regs_buff + (unsigned long)((int)i + 555)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 49164));
      #line 679 
      i = (u8)((int)i + 1);
    }
    #line 681 
    i = (unsigned char)0U;
    #line 681 
    while ((unsigned int)i <= 3U) {
      #line 682 
      *(regs_buff + (unsigned long)((int)i + 567)) = igb_rd32(hw,(unsigned int)(((int)i + 5412) * 4));
      #line 681 
      i = (u8)((int)i + 1);
    }
    #line 683 
    i = (unsigned char)0U;
    #line 683 
    while ((unsigned int)i <= 11U) {
      #line 684 
      *(regs_buff + (unsigned long)((int)i + 571)) = igb_rd32(hw,(unsigned int)(((int)i + 772) * 64));
      #line 683 
      i = (u8)((int)i + 1);
    }
    #line 685 
    i = (unsigned char)0U;
    #line 685 
    while ((unsigned int)i <= 11U) {
      #line 686 
      *(regs_buff + (unsigned long)((int)i + 583)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 49156));
      #line 685 
      i = (u8)((int)i + 1);
    }
    #line 687 
    i = (unsigned char)0U;
    #line 687 
    while ((unsigned int)i <= 11U) {
      #line 688 
      *(regs_buff + (unsigned long)((int)i + 595)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 49160));
      #line 687 
      i = (u8)((int)i + 1);
    }
    #line 689 
    i = (unsigned char)0U;
    #line 689 
    while ((unsigned int)i <= 11U) {
      #line 690 
      *(regs_buff + (unsigned long)((int)i + 607)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 49168));
      #line 689 
      i = (u8)((int)i + 1);
    }
    #line 691 
    i = (unsigned char)0U;
    #line 691 
    while ((unsigned int)i <= 11U) {
      #line 692 
      *(regs_buff + (unsigned long)((int)i + 619)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 49176));
      #line 691 
      i = (u8)((int)i + 1);
    }
    #line 693 
    i = (unsigned char)0U;
    #line 693 
    while ((unsigned int)i <= 11U) {
      #line 694 
      *(regs_buff + (unsigned long)((int)i + 631)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 49192));
      #line 693 
      i = (u8)((int)i + 1);
    }
    #line 696 
    i = (unsigned char)0U;
    #line 696 
    while ((unsigned int)i <= 11U) {
      #line 697 
      *(regs_buff + (unsigned long)((int)i + 643)) = igb_rd32(hw,(unsigned int)(((int)i + 900) * 64));
      #line 696 
      i = (u8)((int)i + 1);
    }
    #line 698 
    i = (unsigned char)0U;
    #line 698 
    while ((unsigned int)i <= 11U) {
      #line 699 
      *(regs_buff + (unsigned long)((int)i + 655)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 57348));
      #line 698 
      i = (u8)((int)i + 1);
    }
    #line 700 
    i = (unsigned char)0U;
    #line 700 
    while ((unsigned int)i <= 11U) {
      #line 701 
      *(regs_buff + (unsigned long)((int)i + 667)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 57352));
      #line 700 
      i = (u8)((int)i + 1);
    }
    #line 702 
    i = (unsigned char)0U;
    #line 702 
    while ((unsigned int)i <= 11U) {
      #line 703 
      *(regs_buff + (unsigned long)((int)i + 679)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 57360));
      #line 702 
      i = (u8)((int)i + 1);
    }
    #line 704 
    i = (unsigned char)0U;
    #line 704 
    while ((unsigned int)i <= 11U) {
      #line 705 
      *(regs_buff + (unsigned long)((int)i + 691)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 57368));
      #line 704 
      i = (u8)((int)i + 1);
    }
    #line 706 
    i = (unsigned char)0U;
    #line 706 
    while ((unsigned int)i <= 11U) {
      #line 707 
      *(regs_buff + (unsigned long)((int)i + 703)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 57384));
      #line 706 
      i = (u8)((int)i + 1);
    }
    #line 708 
    i = (unsigned char)0U;
    #line 708 
    while ((unsigned int)i <= 11U) {
      #line 709 
      *(regs_buff + (unsigned long)((int)i + 715)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 57400));
      #line 708 
      i = (u8)((int)i + 1);
    }
    #line 710 
    i = (unsigned char)0U;
    #line 710 
    while ((unsigned int)i <= 11U) {
      #line 711 
      *(regs_buff + (unsigned long)((int)i + 727)) = igb_rd32(hw,(unsigned int)(((int)i + 4) * 64 + 57404));
      #line 710 
      i = (u8)((int)i + 1);
    }
  }
  #line 714 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U) 
                                                      #line 715 
                                                      *(regs_buff + 739U) = igb_rd32(hw,23540U);
  #line 716 
  return;
}

#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_eeprom_len(struct net_device *netdev)
{
  #line 720 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 721 
  return (int)adapter->hw.nvm.word_size * 2;
}

#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 729 
  u16 *eeprom_buff;
  #line 730 
  int first_word;
  #line 730 
  int last_word;
  #line 732 
  u16 i;
  #line 727 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 728 
  struct e1000_hw *hw = & adapter->hw;
  #line 731 
  int ret_val = 0;
  #line 734 
  if (eeprom->len == 0U) 
                         #line 735 
                         return -22;
  #line 737 
  eeprom->magic = (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16));
  #line 739 
  first_word = (int)(eeprom->offset >> 1);
  #line 740 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  #line 742 
  eeprom_buff = (u16 *)kmalloc_array((unsigned long)((last_word - first_word) + 1),2UL,3264U);
  #line 744 
  if (eeprom_buff == (u16 *)0U) 
                                #line 745 
                                return -12;
  #line 747 
  if (hw->nvm.type == (unsigned int)e1000_nvm_eeprom_spi) 
                                                          #line 748 
                                                          ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  else {
    #line 752 
    i = (unsigned short)0U;
    #line 752 
    while (last_word - first_word >= (int)i) {
      #line 753 
      ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word) + (int)i),(unsigned short)1,eeprom_buff + (unsigned long)i);
      #line 755 
      if (ret_val != 0) 
                        #line 756 
                        break;
      #line 752 
      i = (u16)((int)i + 1);
    }
  }
  #line 761 
  i = (unsigned short)0U;
  #line 761 
  while (last_word - first_word >= (int)i) {
    #line 762 
    u16 *tmp_2 = eeprom_buff + (unsigned long)i;
    #line 761 
    i = (u16)((int)i + 1);
  }
  #line 764 
  memcpy((void *)bytes,(void *)((u8 *)eeprom_buff + ((unsigned long)eeprom->offset & (unsigned long)1U)),(unsigned long)eeprom->len);
  #line 766 
  kfree((void *)eeprom_buff);
  #line 768 
  return ret_val;
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 776 
  u16 *eeprom_buff;
  #line 777 
  void *ptr;
  #line 778 
  int max_len;
  #line 778 
  int first_word;
  #line 778 
  int last_word;
  #line 779 
  u16 i;
  #line 774 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 775 
  struct e1000_hw *hw = & adapter->hw;
  #line 778 
  int ret_val = 0;
  #line 781 
  if (eeprom->len == 0U) 
                         #line 782 
                         return -95;
  #line 784 
  if (hw->mac.type > (unsigned int)e1000_i354) {
    #line 785 
    if (! igb_get_flash_presence_i210(hw)) 
                                           #line 786 
                                           return -95;
  }
  #line 789 
  if (eeprom->magic != (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16))) 
    #line 790 
    return -14;
  #line 792 
  max_len = (int)hw->nvm.word_size * 2;
  #line 794 
  first_word = (int)(eeprom->offset >> 1);
  #line 795 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  #line 796 
  eeprom_buff = (u16 *)kmalloc((unsigned long)max_len,3264U);
  #line 797 
  if (eeprom_buff == (u16 *)0U) 
                                #line 798 
                                return -12;
  #line 800 
  ptr = (void *)eeprom_buff;
  #line 802 
  if ((eeprom->offset & 1U) != 0U) {
    #line 806 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)1,eeprom_buff);
    #line 808 
    ptr ++;
  }
  #line 810 
  if (((eeprom->offset + eeprom->len) & 1U) != 0U && ret_val == 0) 
                                                                   #line 814 
                                                                   ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)last_word)),(unsigned short)1,eeprom_buff + (unsigned long)(last_word - first_word));
  #line 819 
  i = (unsigned short)0U;
  #line 819 
  while (last_word - first_word >= (int)i) {
    #line 820 
    u16 *tmp_2 = eeprom_buff + (unsigned long)i;
    #line 819 
    i = (u16)((int)i + 1);
  }
  #line 822 
  memcpy(ptr,(void *)bytes,(unsigned long)eeprom->len);
  #line 824 
  i = (unsigned short)0U;
  #line 824 
  while (last_word - first_word >= (int)i) {
    #line 825 
    *(eeprom_buff + (unsigned long)i) = *(eeprom_buff + (unsigned long)i);
    #line 824 
    i = (u16)((int)i + 1);
  }
  #line 827 
  ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  #line 831 
  if (ret_val == 0) 
                    #line 832 
                    (*(hw->nvm.ops.update))(hw);
  #line 834 
  igb_set_fw_version(adapter);
  #line 835 
  kfree((void *)eeprom_buff);
  #line 836 
  return ret_val;
}

#line 839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 842 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 844 
  strlcpy((char *)(& drvinfo->driver),(char *)(& igb_driver_name),32UL);
  #line 845 
  strlcpy((char *)(& drvinfo->version),(char *)(& igb_driver_version),32UL);
  #line 850 
  strlcpy((char *)(& drvinfo->fw_version),(char *)(& adapter->fw_version),32UL);
  #line 852 
  ;
  #line 852 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(adapter->pdev),32UL);
  #line 855 
  drvinfo->n_priv_flags = 1U;
  #line 856 
  return;
}

#line 858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 861 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 863 
  ring->rx_max_pending = 4096U;
  #line 864 
  ring->tx_max_pending = 4096U;
  #line 865 
  ring->rx_pending = (unsigned int)adapter->rx_ring_count;
  #line 866 
  ring->tx_pending = (unsigned int)adapter->tx_ring_count;
  #line 867 
  return;
}

#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 884 
  unsigned int __UNIQUE_ID___x449;
  #line 884 
  unsigned int tmp_4;
  #line 885 
  unsigned short __UNIQUE_ID___x451;
  #line 885 
  int tmp_6;
  #line 880 
  unsigned int __UNIQUE_ID___x445;
  #line 880 
  unsigned int tmp_0;
  #line 881 
  unsigned short __UNIQUE_ID___x447;
  #line 881 
  int tmp_2;
  #line 873 
  struct igb_ring *temp_ring;
  #line 874 
  int i;
  #line 875 
  u16 new_rx_count;
  #line 875 
  u16 new_tx_count;
  #line 872 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 874 
  int err = 0;
  #line 877 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) 
                                                                   #line 878 
                                                                   return -22;
  {
    #line 880 
    __UNIQUE_ID___x445 = ring->rx_pending;
    #line 880 
    unsigned int __UNIQUE_ID___y446 = 4096U;
    #line 880 
    if (__UNIQUE_ID___x445 < __UNIQUE_ID___y446) 
                                                 #line 880 
                                                 tmp_0 = __UNIQUE_ID___x445; else 
                                                                    #line 880 
                                                                    tmp_0 = __UNIQUE_ID___y446;
    }
  #line 880 
  new_rx_count = (unsigned short)tmp_0;
  {
    #line 881 
    __UNIQUE_ID___x447 = new_rx_count;
    #line 881 
    unsigned short __UNIQUE_ID___y448 = (unsigned short)80U;
    #line 881 
    if ((int)__UNIQUE_ID___x447 > (int)__UNIQUE_ID___y448) 
                                                           #line 881 
                                                           tmp_2 = (int)__UNIQUE_ID___x447; else 
                                                                    #line 881 
                                                                    tmp_2 = (int)__UNIQUE_ID___y448;
    }
  #line 881 
  new_rx_count = (unsigned short)tmp_2;
  #line 882 
  new_rx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_rx_count + 7U)) & 65528U);
  {
    #line 884 
    __UNIQUE_ID___x449 = ring->tx_pending;
    #line 884 
    unsigned int __UNIQUE_ID___y450 = 4096U;
    #line 884 
    if (__UNIQUE_ID___x449 < __UNIQUE_ID___y450) 
                                                 #line 884 
                                                 tmp_4 = __UNIQUE_ID___x449; else 
                                                                    #line 884 
                                                                    tmp_4 = __UNIQUE_ID___y450;
    }
  #line 884 
  new_tx_count = (unsigned short)tmp_4;
  {
    #line 885 
    __UNIQUE_ID___x451 = new_tx_count;
    #line 885 
    unsigned short __UNIQUE_ID___y452 = (unsigned short)80U;
    #line 885 
    if ((int)__UNIQUE_ID___x451 > (int)__UNIQUE_ID___y452) 
                                                           #line 885 
                                                           tmp_6 = (int)__UNIQUE_ID___x451; else 
                                                                    #line 885 
                                                                    tmp_6 = (int)__UNIQUE_ID___y452;
    }
  #line 885 
  new_tx_count = (unsigned short)tmp_6;
  #line 886 
  new_tx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_tx_count + 7U)) & 65528U);
  #line 888 
  if ((int)adapter->tx_ring_count == (int)new_tx_count && (int)adapter->rx_ring_count == (int)new_rx_count) 
    #line 891 
    return 0;
  #line 894 
  while (1) {
    #line 894 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 894 
                                                             break;
    #line 895 
    usleep_range(1000UL,2000UL);
  }
  #line 897 
  if (! netif_running(adapter->netdev)) {
    #line 898 
    i = 0;
    #line 898 
    while (adapter->num_tx_queues > i) {
      #line 899 
      (adapter->tx_ring[i])->count = new_tx_count;
      #line 898 
      i ++;
    }
    #line 900 
    i = 0;
    #line 900 
    while (adapter->num_rx_queues > i) {
      #line 901 
      (adapter->rx_ring[i])->count = new_rx_count;
      #line 900 
      i ++;
    }
    #line 902 
    adapter->tx_ring_count = new_tx_count;
    #line 903 
    adapter->rx_ring_count = new_rx_count;
    #line 904 
    goto clear_reset;
  }
  #line 907 
  if (adapter->num_tx_queues > adapter->num_rx_queues) {
    #line 908 
    temp_ring = (struct igb_ring *)cif_vmalloc(array_size(4096UL,(unsigned long)adapter->num_tx_queues));
  }
  else {
    #line 911 
    temp_ring = (struct igb_ring *)cif_vmalloc(array_size(4096UL,(unsigned long)adapter->num_rx_queues));
  }
  #line 914 
  if (temp_ring == (struct igb_ring *)0) {
    #line 915 
    err = -12;
    #line 916 
    goto clear_reset;
  }
  #line 919 
  igb_down(adapter);
  #line 925 
  if ((int)adapter->tx_ring_count != (int)new_tx_count) {
    #line 926 
    i = 0;
    #line 926 
    while (adapter->num_tx_queues > i) {
      #line 927 
      memcpy((void *)(temp_ring + (unsigned long)i),(void *)adapter->tx_ring[i],4096UL);
      #line 930 
      (temp_ring + (unsigned long)i)->count = new_tx_count;
      #line 931 
      err = igb_setup_tx_resources(temp_ring + (unsigned long)i);
      #line 932 
      if (err != 0) {
        #line 933 
        while (i != 0) {
          #line 934 
          i --;
          #line 935 
          igb_free_tx_resources(temp_ring + (unsigned long)i);
        }
        #line 937 
        goto err_setup;
      }
      #line 926 
      i ++;
    }
    #line 941 
    i = 0;
    #line 941 
    while (adapter->num_tx_queues > i) {
      #line 942 
      igb_free_tx_resources(adapter->tx_ring[i]);
      #line 944 
      memcpy((void *)adapter->tx_ring[i],(void *)(temp_ring + (unsigned long)i),4096UL);
      #line 941 
      i ++;
    }
    #line 948 
    adapter->tx_ring_count = new_tx_count;
  }
  #line 951 
  if ((int)adapter->rx_ring_count != (int)new_rx_count) {
    #line 952 
    i = 0;
    #line 952 
    while (adapter->num_rx_queues > i) {
      #line 953 
      memcpy((void *)(temp_ring + (unsigned long)i),(void *)adapter->rx_ring[i],4096UL);
      #line 956 
      (temp_ring + (unsigned long)i)->count = new_rx_count;
      #line 957 
      err = igb_setup_rx_resources(temp_ring + (unsigned long)i);
      #line 958 
      if (err != 0) {
        #line 959 
        while (i != 0) {
          #line 960 
          i --;
          #line 961 
          igb_free_rx_resources(temp_ring + (unsigned long)i);
        }
        #line 963 
        goto err_setup;
      }
      #line 952 
      i ++;
    }
    #line 968 
    i = 0;
    #line 968 
    while (adapter->num_rx_queues > i) {
      #line 969 
      igb_free_rx_resources(adapter->rx_ring[i]);
      #line 971 
      memcpy((void *)adapter->rx_ring[i],(void *)(temp_ring + (unsigned long)i),4096UL);
      #line 968 
      i ++;
    }
    #line 975 
    adapter->rx_ring_count = new_rx_count;
  }
  #line 977 
  err_setup: 
             #line 977 
  ;
  #line 978 
  igb_up(adapter);
  #line 979 
  cif_vfree((void *)temp_ring);
  #line 980 
  clear_reset: 
               #line 980 
  ;
  #line 981 
  cif_clear_bit(1L,& adapter->state);
  #line 982 
  return err;
}

#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_i210[22U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)14360U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 2416967679U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_i350[33U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)56U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294901760U, .write = 4294901760U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)49408U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)49412U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)49416U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)49432U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)57600U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)57604U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)57608U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)14360U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)57624U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 3288334335U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 3288334335U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}};
#line 1086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_82580[33U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)56U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)49408U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)49412U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)49416U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)49432U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)57600U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)57604U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)57608U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)14360U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)57624U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 2214592511U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .array_len = (unsigned short)8U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .array_len = (unsigned short)8U, .test_type = (unsigned short)6U, .mask = 2214592511U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}};
#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_82576[35U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)56U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)49408U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)49412U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)49416U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)10280U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)3U, .write = 33554432U}, {.reg = (unsigned short)49448U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)3U, .write = 33554432U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)49432U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)10280U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)3U}, {.reg = (unsigned short)49448U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)3U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)57600U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)57604U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)57608U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 2214592511U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .array_len = (unsigned short)8U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .array_len = (unsigned short)8U, .test_type = (unsigned short)6U, .mask = 2214592511U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}};
#line 1172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_82575[25U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)56U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)10280U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)3U, .write = 33554432U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)10280U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)3U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720894U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720894U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U}, {.reg = (unsigned short)376U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 3221291007U, .write = 65535U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 2148532223U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}};
#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static bool reg_pattern_test(struct igb_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  #line 1207 
  u32 pat;
  #line 1207 
  u32 val;
  #line 1206 
  struct e1000_hw *hw = & adapter->hw;
  #line 1208 
  u32 _test[4U] = {1515870810U, 2779096485U, 0U, 4294967295U};
  #line 1210 
  pat = 0U;
  #line 1210 
  while (pat <= 3U) {
    {
      {
        #line 1212 
        union __anonunion___u_2171 __u;
        #line 1211 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 1211 
        u8 *hw_addr = (__u.__val);
        #line 1211 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 1211 
                                               writel(_test[pat] & write,(void *)(hw_addr + (unsigned long)reg));
      }
      #line 1212 
      val = igb_rd32(hw,(unsigned int)reg) & mask;
      #line 1213 
      if (((_test[pat] & write) & mask) != val) {
        #line 1214 
        _dev_err(& (adapter->pdev)->dev,(char *)"pattern test reg %04X failed: got 0x%08X expected 0x%08X\n",reg,val,(_test[pat] & write) & mask);
        #line 1217 
        *data = (unsigned long long)reg;
        #line 1218 
        return (_Bool)1;
      }
    }
    #line 1210 
    pat ++;
  }
  #line 1222 
  return (_Bool)0;
}

#line 1225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static bool reg_set_and_check(struct igb_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  #line 1229 
  u32 val;
  #line 1228 
  struct e1000_hw *hw = & adapter->hw;
  {
    #line 1232 
    union __anonunion___u_2173 __u;
    #line 1231 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1231 
    u8 *hw_addr = (__u.__val);
    #line 1231 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1231 
                                           writel(write & mask,(void *)(hw_addr + (unsigned long)reg));
  }
  #line 1232 
  val = igb_rd32(hw,(unsigned int)reg);
  #line 1233 
  if (((write ^ val) & mask) != 0U) {
    #line 1234 
    _dev_err(& (adapter->pdev)->dev,(char *)"set/check reg %04X test failed: got 0x%08X expected 0x%08X\n",reg,val & mask,write & mask);
    #line 1237 
    *data = (unsigned long long)reg;
    #line 1238 
    return (_Bool)1;
  }
  #line 1241 
  return (_Bool)0;
}

#line 1256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_reg_test(struct igb_adapter *adapter, u64 *data)
{
  #line 1259 
  struct igb_reg_test *test;
  #line 1260 
  u32 value;
  #line 1260 
  u32 before;
  #line 1260 
  u32 after;
  #line 1261 
  u32 i;
  #line 1261 
  u32 toggle;
  #line 1258 
  struct e1000_hw *hw = & adapter->hw;
  #line 1263 
  switch ((unsigned int)adapter->hw.mac.type) {
    #line 1264 
    case (unsigned int)4: 
                          #line 1264 
    ;
    #line 1265 
    case (unsigned int)5: 
                          #line 1265 
    ;
    #line 1266 
    test = (struct igb_reg_test *)(& reg_test_i350);
    #line 1267 
    toggle = 2146431999U;
    #line 1268 
    break;
    #line 1269 
    case (unsigned int)6: 
                          #line 1269 
    ;
    #line 1270 
    case (unsigned int)7: 
                          #line 1270 
    ;
    #line 1271 
    test = (struct igb_reg_test *)(& reg_test_i210);
    #line 1272 
    toggle = 2146431999U;
    #line 1273 
    break;
    #line 1274 
    case (unsigned int)3: 
                          #line 1274 
    ;
    #line 1275 
    test = (struct igb_reg_test *)(& reg_test_82580);
    #line 1276 
    toggle = 2146431999U;
    #line 1277 
    break;
    #line 1278 
    case (unsigned int)2: 
                          #line 1278 
    ;
    #line 1279 
    test = (struct igb_reg_test *)(& reg_test_82576);
    #line 1280 
    toggle = 2147480575U;
    #line 1281 
    break;
    #line 1282 
    default: 
             #line 1282 
    ;
    #line 1283 
    test = (struct igb_reg_test *)(& reg_test_82575);
    #line 1284 
    toggle = 2147480575U;
    #line 1285 
    break;
  }
  #line 1293 
  before = igb_rd32(hw,8U);
  #line 1294 
  value = igb_rd32(hw,8U) & toggle;
  {
    #line 1296 
    union __anonunion___u_2175 __u;
    #line 1295 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1295 
    u8 *hw_addr = (__u.__val);
    #line 1295 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1295 
                                           writel(toggle,(void *)(hw_addr + 8U));
  }
  #line 1296 
  after = igb_rd32(hw,8U) & toggle;
  #line 1297 
  if (value != after) {
    #line 1298 
    _dev_err(& (adapter->pdev)->dev,(char *)"failed STATUS register test got: 0x%08X expected: 0x%08X\n",after,value);
    #line 1301 
    *data = 1ULL;
    #line 1302 
    return 1;
  }
  {
    #line 1306 
    union __anonunion___u_2177 __u_0;
    #line 1305 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1305 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 1305 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 1305 
                                             writel(before,(void *)(hw_addr_0 + 8U));
  }
  #line 1310 
  while ((unsigned int)test->reg != 0U) {
    #line 1311 
    i = 0U;
    #line 1311 
    while ((unsigned int)test->array_len > i) {
      #line 1312 
      switch ((int)test->test_type) {
        #line 1313 
        case 1: 
                #line 1313 
        ;
        #line 1314 
        if ((int)reg_pattern_test(adapter,data,
                         (int)((unsigned int)test->reg + (unsigned int)test->reg_offset * i),
                         test->mask,test->write) != 0) 
          #line 1314 
          return 1;
        #line 1318 
        break;
        #line 1319 
        case 2: 
                #line 1319 
        ;
        #line 1320 
        if ((int)reg_set_and_check(adapter,data,
                          (int)((unsigned int)test->reg + (unsigned int)test->reg_offset * i),
                          test->mask,test->write) != 0) 
          #line 1320 
          return 1;
        #line 1324 
        break;
        #line 1325 
        case 3: 
                #line 1325 
        ;
        #line 1326 
        writel(test->write,(void *)(adapter->hw.hw_addr + ((unsigned long)test->reg + (unsigned long)((unsigned int)test->reg_offset * i))));
        #line 1329 
        break;
        #line 1330 
        case 4: 
                #line 1330 
        ;
        #line 1331 
        if ((int)reg_pattern_test(adapter,data,
                         (int)((unsigned int)test->reg + i * 4U),test->mask,
                         test->write) != 0) 
          #line 1331 
          return 1;
        #line 1334 
        break;
        #line 1335 
        case 5: 
                #line 1335 
        ;
        #line 1336 
        if ((int)reg_pattern_test(adapter,data,
                         (int)((unsigned int)test->reg + i * 8U),test->mask,
                         test->write) != 0) 
          #line 1336 
          return 1;
        #line 1339 
        break;
        #line 1340 
        case 6: 
                #line 1340 
        ;
        #line 1341 
        if ((int)reg_pattern_test(adapter,data,
                         (int)(((unsigned int)test->reg + i * 8U) + 4U),
                         test->mask,test->write) != 0) 
          #line 1341 
          return 1;
        #line 1344 
        break;
      }
      #line 1311 
      i ++;
    }
    #line 1347 
    test ++;
  }
  #line 1350 
  *data = 0ULL;
  #line 1351 
  return 0;
}

#line 1354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_eeprom_test(struct igb_adapter *adapter, u64 *data)
{
  #line 1356 
  struct e1000_hw *hw = & adapter->hw;
  #line 1358 
  *data = 0ULL;
  #line 1361 
  switch ((unsigned int)hw->mac.type) {
    #line 1362 
    case (unsigned int)6: 
                          #line 1362 
    ;
    #line 1363 
    case (unsigned int)7: 
                          #line 1363 
    ;
    #line 1364 
    if ((int)igb_get_flash_presence_i210(hw) != 0) {
      #line 1365 
      if ((*(adapter->hw.nvm.ops.validate))(& adapter->hw) < 0) 
                                                                #line 1366 
                                                                *data = 2ULL;
    }
    #line 1368 
    break;
    #line 1369 
    default: 
             #line 1369 
    ;
    #line 1370 
    if ((*(adapter->hw.nvm.ops.validate))(& adapter->hw) < 0) 
                                                              #line 1371 
                                                              *data = 2ULL;
    #line 1372 
    break;
  }
  #line 1375 
  return (int)*data;
}

#line 1378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static irqreturn_t igb_test_intr(int irq, void *data)
{
  #line 1380 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  #line 1381 
  struct e1000_hw *hw = & adapter->hw;
  #line 1383 
  adapter->test_icr |= igb_rd32(hw,192U);
  #line 1385 
  return IRQ_HANDLED;
}

#line 1388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_intr_test(struct igb_adapter *adapter, u64 *data)
{
  #line 1392 
  u32 mask;
  #line 1392 
  u32 ics_mask;
  #line 1419 
  char *tmp_3;
  #line 1390 
  struct e1000_hw *hw = & adapter->hw;
  #line 1391 
  struct net_device *netdev = adapter->netdev;
  #line 1392 
  u32 i = 0U;
  #line 1392 
  u32 shared_int = 1U;
  #line 1393 
  u32 irq = (adapter->pdev)->irq;
  #line 1395 
  *data = 0ULL;
  #line 1398 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 1399 
    if (cif_request_irq(adapter->msix_entries[0].vector,& igb_test_intr,0UL,
                      (char *)(& netdev->name),(void *)adapter) != 0) {
      #line 1401 
      *data = 1ULL;
      #line 1402 
      return -1;
    }
  }
  else 
    #line 1404 
    if (((unsigned long)adapter->flags & 1UL) != 0UL) {
      #line 1405 
      shared_int = 0U;
      #line 1406 
      if (cif_request_irq(irq,& igb_test_intr,0UL,(char *)(& netdev->name),
                        (void *)adapter) != 0) {
        #line 1408 
        *data = 1ULL;
        #line 1409 
        return -1;
      }
    }
    else {
      #line 1411 
      if (cif_request_irq(irq,& igb_test_intr,256UL,(char *)(& netdev->name),
                        (void *)adapter) == 0) 
        #line 1413 
        shared_int = 0U;
      else {
        #line 1414 
        if (cif_request_irq(irq,& igb_test_intr,128UL,(char *)(& netdev->name),
                        (void *)adapter) != 0) {
          #line 1416 
          *data = 1ULL;
          #line 1417 
          return -1;
        }
      }
    }
  #line 1419 
  if (shared_int != 0U) 
                        #line 1419 
                        tmp_3 = (char *)"shared"; else 
                                                       #line 1419 
                                                       tmp_3 = (char *)"unshared";
  #line 1419 
  ;
  #line 1419 
  _dev_info(& (adapter->pdev)->dev,(char *)"testing %s interrupt\n",tmp_3);
  {
    #line 1424 
    union __anonunion___u_2179 __u;
    #line 1423 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1423 
    u8 *hw_addr = (__u.__val);
    #line 1423 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1423 
                                           writel(4294967295U,(void *)(hw_addr + 216U));
  }
  #line 1424 
  igb_rd32(hw,8U);
  #line 1425 
  usleep_range(10000UL,11000UL);
  #line 1428 
  switch ((unsigned int)hw->mac.type) {
    #line 1429 
    case (unsigned int)1: 
                          #line 1429 
    ;
    #line 1430 
    ics_mask = 938770141U;
    #line 1431 
    break;
    #line 1432 
    case (unsigned int)2: 
                          #line 1432 
    ;
    #line 1433 
    ics_mask = 2010446845U;
    #line 1434 
    break;
    #line 1435 
    case (unsigned int)3: 
                          #line 1435 
    ;
    #line 1436 
    ics_mask = 2010971861U;
    #line 1437 
    break;
    #line 1438 
    case (unsigned int)4: 
                          #line 1438 
    ;
    #line 1439 
    case (unsigned int)5: 
                          #line 1439 
    ;
    #line 1440 
    case (unsigned int)6: 
                          #line 1440 
    ;
    #line 1441 
    case (unsigned int)7: 
                          #line 1441 
    ;
    #line 1442 
    ics_mask = 2010971861U;
    #line 1443 
    break;
    #line 1444 
    default: 
             #line 1444 
    ;
    #line 1445 
    ics_mask = 2147483647U;
    #line 1446 
    break;
  }
  #line 1450 
  while (i <= 30U) {
    #line 1452 
    mask = (unsigned int)(1UL << i);
    #line 1454 
    if ((mask & ics_mask) == 0U) 
                                 #line 1455 
                                 goto __Cont;
    #line 1457 
    if (shared_int == 0U) {
      #line 1464 
      adapter->test_icr = 0U;
      {
        #line 1468 
        union __anonunion___u_2181 __u_0;
        #line 1467 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
        #line 1467 
        u8 *hw_addr_0 = (__u_0.__val);
        #line 1467 
        if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                                 #line 1467 
                                                 writel(4294967295U,(void *)(hw_addr_0 + 192U));
      }
      {
        #line 1470 
        union __anonunion___u_2183 __u_1;
        #line 1469 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
        #line 1469 
        u8 *hw_addr_1 = (__u_1.__val);
        #line 1469 
        if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                                 #line 1469 
                                                 writel(mask,(void *)(hw_addr_1 + 216U));
      }
      {
        #line 1471 
        union __anonunion___u_2185 __u_2;
        #line 1470 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
        #line 1470 
        u8 *hw_addr_2 = (__u_2.__val);
        #line 1470 
        if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                                 #line 1470 
                                                 writel(mask,(void *)(hw_addr_2 + 200U));
      }
      #line 1471 
      igb_rd32(hw,8U);
      #line 1472 
      usleep_range(10000UL,11000UL);
      #line 1474 
      if ((adapter->test_icr & mask) != 0U) {
        #line 1475 
        *data = 3ULL;
        #line 1476 
        break;
      }
    }
    #line 1486 
    adapter->test_icr = 0U;
    {
      #line 1490 
      union __anonunion___u_2187 __u_3;
      #line 1489 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 1489 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 1489 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 1489 
                                               writel(4294967295U,(void *)(hw_addr_3 + 192U));
    }
    {
      #line 1492 
      union __anonunion___u_2189 __u_4;
      #line 1491 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 1491 
      u8 *hw_addr_4 = (__u_4.__val);
      #line 1491 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                               #line 1491 
                                               writel(mask,(void *)(hw_addr_4 + 208U));
    }
    {
      #line 1493 
      union __anonunion___u_2191 __u_5;
      #line 1492 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 1492 
      u8 *hw_addr_5 = (__u_5.__val);
      #line 1492 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                               #line 1492 
                                               writel(mask,(void *)(hw_addr_5 + 200U));
    }
    #line 1493 
    igb_rd32(hw,8U);
    #line 1494 
    usleep_range(10000UL,11000UL);
    #line 1496 
    if ((adapter->test_icr & mask) == 0U) {
      #line 1497 
      *data = 4ULL;
      #line 1498 
      break;
    }
    #line 1501 
    if (shared_int == 0U) {
      #line 1508 
      adapter->test_icr = 0U;
      {
        #line 1512 
        union __anonunion___u_2193 __u_6;
        #line 1511 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
        #line 1511 
        u8 *hw_addr_6 = (__u_6.__val);
        #line 1511 
        if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
                                                 #line 1511 
                                                 writel(4294967295U,(void *)(hw_addr_6 + 192U));
      }
      {
        #line 1514 
        union __anonunion___u_2195 __u_7;
        #line 1513 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
        #line 1513 
        u8 *hw_addr_7 = (__u_7.__val);
        #line 1513 
        if ((long)(hw_addr_7 == (u8 *)0U) == 0L) 
                                                 #line 1513 
                                                 writel(~ mask,(void *)(hw_addr_7 + 216U));
      }
      {
        #line 1515 
        union __anonunion___u_2197 __u_8;
        #line 1514 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_8.__c),8);
        #line 1514 
        u8 *hw_addr_8 = (__u_8.__val);
        #line 1514 
        if ((long)(hw_addr_8 == (u8 *)0U) == 0L) 
                                                 #line 1514 
                                                 writel(~ mask,(void *)(hw_addr_8 + 200U));
      }
      #line 1515 
      igb_rd32(hw,8U);
      #line 1516 
      usleep_range(10000UL,11000UL);
      #line 1518 
      if ((adapter->test_icr & mask) != 0U) {
        #line 1519 
        *data = 5ULL;
        #line 1520 
        break;
      }
    }
    #line 1450 
    __Cont: 
            #line 1450 
    i ++;
  }
  {
    #line 1527 
    union __anonunion___u_2199 __u_9;
    #line 1526 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_9.__c),8);
    #line 1526 
    u8 *hw_addr_9 = (__u_9.__val);
    #line 1526 
    if ((long)(hw_addr_9 == (u8 *)0U) == 0L) 
                                             #line 1526 
                                             writel(4294967295U,(void *)(hw_addr_9 + 216U));
  }
  #line 1527 
  igb_rd32(hw,8U);
  #line 1528 
  usleep_range(10000UL,11000UL);
  #line 1531 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) 
                                                       #line 1532 
                                                       cif_free_irq(adapter->msix_entries[0].vector,(void *)adapter); else 
                                                                    #line 1534 
                                                                    cif_free_irq(irq,(void *)adapter);
  #line 1536 
  return (int)*data;
}

#line 1539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_free_desc_rings(struct igb_adapter *adapter)
{
  #line 1541 
  igb_free_tx_resources(& adapter->test_tx_ring);
  #line 1542 
  igb_free_rx_resources(& adapter->test_rx_ring);
  #line 1543 
  return;
}

#line 1545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_setup_desc_rings(struct igb_adapter *adapter)
{
  #line 1550 
  int ret_val;
  #line 1547 
  struct igb_ring *tx_ring = & adapter->test_tx_ring;
  #line 1548 
  struct igb_ring *rx_ring = & adapter->test_rx_ring;
  #line 1549 
  struct e1000_hw *hw = & adapter->hw;
  #line 1553 
  tx_ring->count = (unsigned short)256U;
  #line 1554 
  tx_ring->dev = & (adapter->pdev)->dev;
  #line 1555 
  tx_ring->netdev = adapter->netdev;
  #line 1556 
  tx_ring->reg_idx = (unsigned char)adapter->vfs_allocated_count;
  #line 1558 
  if (igb_setup_tx_resources(tx_ring) != 0) {
    #line 1559 
    ret_val = 1;
    #line 1560 
    goto err_nomem;
  }
  #line 1563 
  igb_setup_tctl(adapter);
  #line 1564 
  igb_configure_tx_ring(adapter,tx_ring);
  #line 1567 
  rx_ring->count = (unsigned short)256U;
  #line 1568 
  rx_ring->dev = & (adapter->pdev)->dev;
  #line 1569 
  rx_ring->netdev = adapter->netdev;
  #line 1570 
  rx_ring->reg_idx = (unsigned char)adapter->vfs_allocated_count;
  #line 1572 
  if (igb_setup_rx_resources(rx_ring) != 0) {
    #line 1573 
    ret_val = 3;
    #line 1574 
    goto err_nomem;
  }
  {
    #line 1579 
    union __anonunion___u_2201 __u;
    #line 1578 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1578 
    u8 *hw_addr = (__u.__val);
    #line 1578 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1578 
                                           writel(adapter->vfs_allocated_count << 3,(void *)(hw_addr + 22552U));
  }
  #line 1581 
  igb_setup_rctl(adapter);
  #line 1582 
  igb_configure_rx_ring(adapter,rx_ring);
  #line 1584 
  ;
  #line 1584 
  igb_alloc_rx_buffers(rx_ring,(unsigned short)((int)((unsigned short)igb_desc_unused(rx_ring))));
  #line 1586 
  return 0;
  #line 1588 
  err_nomem: 
             #line 1588 
  ;
  #line 1589 
  igb_free_desc_rings(adapter);
  #line 1590 
  return ret_val;
}

#line 1593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_phy_disable_receiver(struct igb_adapter *adapter)
{
  #line 1595 
  struct e1000_hw *hw = & adapter->hw;
  #line 1598 
  igb_write_phy_reg(hw,29U,(unsigned short)31);
  #line 1599 
  igb_write_phy_reg(hw,30U,(unsigned short)36860);
  #line 1600 
  igb_write_phy_reg(hw,29U,(unsigned short)26);
  #line 1601 
  igb_write_phy_reg(hw,30U,(unsigned short)36848);
  #line 1602 
  return;
}

#line 1604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_integrated_phy_loopback(struct igb_adapter *adapter)
{
  #line 1606 
  struct e1000_hw *hw = & adapter->hw;
  #line 1607 
  u32 ctrl_reg = 0U;
  #line 1609 
  hw->mac.autoneg = (_Bool)0;
  #line 1611 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) 
    #line 1612 
    if (hw->phy.id != 21040128U) {
      #line 1614 
      igb_write_phy_reg(hw,16U,(unsigned short)2056);
      #line 1616 
      igb_write_phy_reg(hw,0U,(unsigned short)37184);
      #line 1618 
      igb_write_phy_reg(hw,0U,(unsigned short)33088);
    }
    else {
      #line 1621 
      igb_write_phy_reg(hw,22U,(unsigned short)0);
      #line 1622 
      igb_write_phy_reg(hw,0U,(unsigned short)16704);
    }
  else 
    #line 1624 
    if (hw->phy.type == (unsigned int)e1000_phy_82580) 
                                                       #line 1626 
                                                       igb_write_phy_reg(hw,19U,(unsigned short)32833);
  #line 1630 
  msleep(50U);
  #line 1633 
  igb_write_phy_reg(hw,0U,(unsigned short)16704);
  #line 1636 
  ctrl_reg = igb_rd32(hw,0U);
  #line 1637 
  ctrl_reg &= 4294966527U;
  #line 1638 
  ctrl_reg |= 6721U;
  #line 1644 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) 
                                                   #line 1645 
                                                   ctrl_reg |= 128U;
  {
    #line 1648 
    union __anonunion___u_2203 __u;
    #line 1647 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1647 
    u8 *hw_addr = (__u.__val);
    #line 1647 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1647 
                                           writel(ctrl_reg,(void *)hw_addr);
  }
  #line 1652 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) 
                                                   #line 1653 
                                                   igb_phy_disable_receiver(adapter);
  #line 1655 
  msleep(500U);
  #line 1656 
  return 0;
}

#line 1659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_phy_loopback(struct igb_adapter *adapter)
{
  #line 1661 
  return igb_integrated_phy_loopback(adapter);
}

#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_setup_loopback_test(struct igb_adapter *adapter)
{
  #line 1667 
  u32 reg;
  #line 1666 
  struct e1000_hw *hw = & adapter->hw;
  #line 1669 
  reg = igb_rd32(hw,24U);
  #line 1672 
  if ((reg & 12582912U) != 0U) {
    #line 1673 
    if ((((((unsigned int)hw->device_id == 1080U || (unsigned int)hw->device_id == 1082U) || (unsigned int)hw->device_id == 1084U) || (unsigned int)hw->device_id == 1088U) || (unsigned int)hw->device_id == 8001U) || (unsigned int)hw->device_id == 8005U) {
      #line 1680 
      reg = igb_rd32(hw,36U);
      #line 1681 
      reg = (reg & 4294901760U) | 4U;
      {
        #line 1684 
        union __anonunion___u_2205 __u;
        #line 1683 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 1683 
        u8 *hw_addr = (__u.__val);
        #line 1683 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 1683 
                                               writel(reg,(void *)(hw_addr + 36U));
      }
      #line 1685 
      reg = igb_rd32(hw,3600U);
      #line 1686 
      reg |= 16U;
      {
        #line 1688 
        union __anonunion___u_2207 __u_0;
        #line 1687 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
        #line 1687 
        u8 *hw_addr_0 = (__u_0.__val);
        #line 1687 
        if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                                 #line 1687 
                                                 writel(reg,(void *)(hw_addr_0 + 3600U));
      }
    }
    #line 1690 
    reg = igb_rd32(hw,256U);
    #line 1691 
    reg |= 192U;
    {
      #line 1693 
      union __anonunion___u_2209 __u_1;
      #line 1692 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 1692 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 1692 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 1692 
                                               writel(reg,(void *)(hw_addr_1 + 256U));
    }
    {
      #line 1695 
      union __anonunion___u_2211 __u_2;
      #line 1694 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 1694 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 1694 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                               #line 1694 
                                               writel(1040U,(void *)(hw_addr_2 + 36U));
    }
    #line 1696 
    reg = igb_rd32(hw,0U);
    #line 1697 
    reg &= 3892314103U;
    #line 1700 
    reg |= 65U;
    {
      #line 1703 
      union __anonunion___u_2213 __u_3;
      #line 1702 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 1702 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 1702 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 1702 
                                               writel(reg,(void *)hw_addr_3);
    }
    #line 1705 
    reg = igb_rd32(hw,52U);
    #line 1706 
    reg &= 4294967291U;
    {
      #line 1708 
      union __anonunion___u_2215 __u_4;
      #line 1707 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 1707 
      u8 *hw_addr_4 = (__u_4.__val);
      #line 1707 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                               #line 1707 
                                               writel(reg,(void *)(hw_addr_4 + 52U));
    }
    #line 1712 
    if (hw->mac.type > (unsigned int)e1000_82576) {
      #line 1713 
      reg = igb_rd32(hw,16896U);
      #line 1714 
      reg |= 1U;
      {
        #line 1716 
        union __anonunion___u_2217 __u_5;
        #line 1715 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
        #line 1715 
        u8 *hw_addr_5 = (__u_5.__val);
        #line 1715 
        if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                                 #line 1715 
                                                 writel(reg,(void *)(hw_addr_5 + 16896U));
      }
    }
    #line 1719 
    reg = igb_rd32(hw,16904U);
    #line 1720 
    reg &= 4294901759U;
    #line 1721 
    reg |= 61U;
    {
      #line 1727 
      union __anonunion___u_2219 __u_6;
      #line 1726 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
      #line 1726 
      u8 *hw_addr_6 = (__u_6.__val);
      #line 1726 
      if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
                                               #line 1726 
                                               writel(reg,(void *)(hw_addr_6 + 16904U));
    }
    #line 1728 
    return 0;
  }
  #line 1731 
  return igb_set_phy_loopback(adapter);
}

#line 1734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_loopback_cleanup(struct igb_adapter *adapter)
{
  #line 1737 
  u32 rctl;
  #line 1738 
  u16 phy_reg;
  #line 1736 
  struct e1000_hw *hw = & adapter->hw;
  #line 1740 
  if (((((unsigned int)hw->device_id == 1080U || (unsigned int)hw->device_id == 1082U) || (unsigned int)hw->device_id == 1084U) || (unsigned int)hw->device_id == 1088U) || (unsigned int)hw->device_id == 8001U) {
    #line 1745 
    u32 reg;
    #line 1748 
    reg = igb_rd32(hw,36U);
    #line 1749 
    reg = (reg & 4294901760U) | 4U;
    {
      #line 1752 
      union __anonunion___u_2221 __u;
      #line 1751 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1751 
      u8 *hw_addr = (__u.__val);
      #line 1751 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1751 
                                             writel(reg,(void *)(hw_addr + 36U));
    }
    #line 1753 
    reg = igb_rd32(hw,3600U);
    #line 1754 
    reg &= 4294967279U;
    {
      #line 1756 
      union __anonunion___u_2223 __u_0;
      #line 1755 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1755 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 1755 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 1755 
                                               writel(reg,(void *)(hw_addr_0 + 3600U));
    }
  }
  #line 1758 
  rctl = igb_rd32(hw,256U);
  #line 1759 
  rctl &= 4294967103U;
  {
    #line 1761 
    union __anonunion___u_2225 __u_1;
    #line 1760 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 1760 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 1760 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 1760 
                                             writel(rctl,(void *)(hw_addr_1 + 256U));
  }
  #line 1762 
  hw->mac.autoneg = (_Bool)1;
  #line 1763 
  igb_read_phy_reg(hw,0U,& phy_reg);
  #line 1764 
  if (((int)phy_reg & 16384) != 0) {
    #line 1765 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 49151U);
    #line 1766 
    igb_write_phy_reg(hw,0U,(unsigned short)((int)phy_reg));
    #line 1767 
    igb_phy_sw_reset(hw);
  }
  #line 1769 
  return;
}

#line 1771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_create_lbtest_frame(struct sk_buff *skb, unsigned int frame_size)
{
  #line 1774 
  memset((void *)skb->data,255,(unsigned long)frame_size);
  #line 1775 
  frame_size /= 2U;
  #line 1776 
  memset((void *)(skb->data + (unsigned long)frame_size),170,(unsigned long)(frame_size + 4294967295U));
  #line 1777 
  memset((void *)(skb->data + (unsigned long)(frame_size + 10U)),190,1UL);
  #line 1778 
  memset((void *)(skb->data + (unsigned long)(frame_size + 12U)),175,1UL);
  #line 1779 
  return;
}

#line 1781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_check_lbtest_frame(struct igb_rx_buffer *rx_buffer, unsigned int frame_size)
{
  #line 1784 
  unsigned char *data;
  #line 1785 
  bool match = (_Bool)1;
  #line 1787 
  frame_size >>= 1;
  #line 1789 
  data = (unsigned char *)kmap(rx_buffer->page);
  #line 1791 
  if (((unsigned int)*(data + 3U) != 255U || (unsigned int)*(data + (unsigned long)(frame_size + 10U)) != 190U) || (unsigned int)*(data + (unsigned long)(frame_size + 12U)) != 175U) 
    #line 1794 
    match = (_Bool)0;
  #line 1796 
  kunmap(rx_buffer->page);
  #line 1798 
  return (int)match;
}

#line 1801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_clean_test_rings(struct igb_ring *rx_ring, struct igb_ring *tx_ring, unsigned int size)
{
  #line 1805 
  union e1000_adv_rx_desc *rx_desc;
  #line 1806 
  struct igb_rx_buffer *rx_buffer_info;
  #line 1807 
  struct igb_tx_buffer *tx_buffer_info;
  #line 1808 
  u16 rx_ntc;
  #line 1808 
  u16 tx_ntc;
  #line 1808 
  u16 count = (unsigned short)0U;
  #line 1811 
  rx_ntc = rx_ring->next_to_clean;
  #line 1812 
  tx_ntc = tx_ring->next_to_clean;
  #line 1813 
  rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (unsigned long)rx_ntc;
  #line 1815 
  while ((unsigned int)rx_desc->wb.upper.length != 0U) {
    #line 1817 
    rx_buffer_info = rx_ring->__anonCompField_igb_ring_166.rx_buffer_info + (unsigned long)rx_ntc;
    #line 1820 
    dma_sync_single_for_cpu(rx_ring->dev,rx_buffer_info->dma,(unsigned long)size,(enum dma_data_direction)DMA_FROM_DEVICE);
    #line 1826 
    if (igb_check_lbtest_frame(rx_buffer_info,size) != 0) 
                                                          #line 1827 
                                                          count = (u16)((int)count + 1);
    #line 1830 
    dma_sync_single_for_device(rx_ring->dev,rx_buffer_info->dma,(unsigned long)size,(enum dma_data_direction)DMA_FROM_DEVICE);
    #line 1836 
    tx_buffer_info = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info + (unsigned long)tx_ntc;
    #line 1839 
    dev_kfree_skb_any(tx_buffer_info->skb);
    #line 1842 
    dma_unmap_single_attrs(tx_ring->dev,tx_buffer_info->dma,(unsigned long)tx_buffer_info->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 1846 
    tx_buffer_info->len = 0U;
    #line 1849 
    rx_ntc = (u16)((int)rx_ntc + 1);
    #line 1850 
    if ((int)rx_ring->count == (int)rx_ntc) 
                                            #line 1851 
                                            rx_ntc = (unsigned short)0U;
    #line 1852 
    tx_ntc = (u16)((int)tx_ntc + 1);
    #line 1853 
    if ((int)tx_ring->count == (int)tx_ntc) 
                                            #line 1854 
                                            tx_ntc = (unsigned short)0U;
    #line 1857 
    rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (unsigned long)rx_ntc;
  }
  #line 1860 
  netdev_tx_reset_queue(txring_txq(tx_ring));
  #line 1863 
  igb_alloc_rx_buffers(rx_ring,(unsigned short)((int)count));
  #line 1864 
  rx_ring->next_to_clean = rx_ntc;
  #line 1865 
  tx_ring->next_to_clean = tx_ntc;
  #line 1867 
  return (int)count;
}

#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_run_loopback_test(struct igb_adapter *adapter)
{
  #line 1874 
  u16 i;
  #line 1874 
  u16 j;
  #line 1874 
  u16 lc;
  #line 1874 
  u16 good_cnt;
  #line 1877 
  netdev_tx_t tx_ret_val;
  #line 1878 
  struct sk_buff *skb;
  #line 1872 
  struct igb_ring *tx_ring = & adapter->test_tx_ring;
  #line 1873 
  struct igb_ring *rx_ring = & adapter->test_rx_ring;
  #line 1875 
  int ret_val = 0;
  #line 1876 
  unsigned int size = 256U;
  #line 1881 
  skb = alloc_skb(size,3264U);
  #line 1882 
  if (skb == (struct sk_buff *)0) 
                                  #line 1883 
                                  return 11;
  #line 1886 
  igb_create_lbtest_frame(skb,size);
  #line 1887 
  skb_put(skb,size);
  #line 1894 
  if ((int)rx_ring->count <= (int)tx_ring->count) 
                                                  #line 1895 
                                                  lc = (unsigned short)((unsigned int)((unsigned short)((unsigned int)tx_ring->count / 64U)) * 2U + 1U); else 
                                                                    #line 1897 
                                                                    lc = (unsigned short)((unsigned int)((unsigned short)((unsigned int)rx_ring->count / 64U)) * 2U + 1U);
  #line 1899 
  j = (unsigned short)0U;
  #line 1899 
  while ((int)j <= (int)lc) {
    {
      #line 1901 
      good_cnt = (unsigned short)0U;
      #line 1904 
      i = (unsigned short)0U;
      #line 1904 
      while ((unsigned int)i <= 63U) {
        #line 1905 
        skb_get(skb);
        #line 1906 
        tx_ret_val = igb_xmit_frame_ring(skb,tx_ring);
        #line 1907 
        if (tx_ret_val == (unsigned int)NETDEV_TX_OK) 
                                                      #line 1908 
                                                      good_cnt = (u16)((int)good_cnt + 1);
        #line 1904 
        i = (u16)((int)i + 1);
      }
      #line 1911 
      if ((unsigned int)good_cnt != 64U) {
        #line 1912 
        ret_val = 12;
        #line 1913 
        break;
      }
      #line 1917 
      msleep(200U);
      #line 1919 
      good_cnt = (unsigned short)igb_clean_test_rings(rx_ring,tx_ring,size);
      #line 1920 
      if ((unsigned int)good_cnt != 64U) {
        #line 1921 
        ret_val = 13;
        #line 1922 
        break;
      }
    }
    #line 1899 
    j = (u16)((int)j + 1);
  }
  #line 1927 
  kfree_skb(skb);
  #line 1929 
  return ret_val;
}

#line 1932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_loopback_test(struct igb_adapter *adapter, u64 *data)
{
  #line 1937 
  if (igb_check_reset_block(& adapter->hw) != 0) {
    #line 1938 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot do PHY loopback test when SoL/IDER is active.\n");
    #line 1940 
    *data = 0ULL;
    #line 1941 
    goto out;
  }
  #line 1944 
  if (adapter->hw.mac.type == (unsigned int)e1000_i354) {
    #line 1945 
    _dev_info(& (adapter->pdev)->dev,(char *)"Loopback test not supported on i354.\n");
    #line 1947 
    *data = 0ULL;
    #line 1948 
    goto out;
  }
  #line 1950 
  *data = (unsigned long long)igb_setup_desc_rings(adapter);
  #line 1951 
  if (*data != 0ULL) 
                     #line 1952 
                     goto out;
  #line 1953 
  *data = (unsigned long long)igb_setup_loopback_test(adapter);
  #line 1954 
  if (*data != 0ULL) 
                     #line 1955 
                     goto err_loopback;
  #line 1956 
  *data = (unsigned long long)igb_run_loopback_test(adapter);
  #line 1957 
  igb_loopback_cleanup(adapter);
  #line 1959 
  err_loopback: 
                #line 1959 
  ;
  #line 1960 
  igb_free_desc_rings(adapter);
  #line 1961 
  out: 
       #line 1961 
  ;
  #line 1962 
  return (int)*data;
}

#line 1965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_link_test(struct igb_adapter *adapter, u64 *data)
{
  #line 1967 
  struct e1000_hw *hw = & adapter->hw;
  #line 1968 
  *data = 0ULL;
  #line 1969 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) {
    #line 1970 
    int i = 0;
    #line 1972 
    hw->mac.serdes_has_link = (_Bool)0;
    #line 1977 
    while (1) {
      #line 1982 
      int tmp;
      #line 1978 
      (*(hw->mac.ops.check_for_link))(& adapter->hw);
      #line 1979 
      if ((int)hw->mac.serdes_has_link != 0) 
                                             #line 1980 
                                             return (int)*data;
      #line 1981 
      msleep(20U);
      #line 1982 
      tmp = i;
      #line 1982 
      i ++;
      #line 1982 
      ;
      #line 1982 
      if (! (tmp <= 3749)) 
                           #line 1977 
                           break;
    }
    #line 1984 
    *data = 1ULL;
  }
  else {
    #line 1986 
    (*(hw->mac.ops.check_for_link))(& adapter->hw);
    #line 1987 
    if ((int)hw->mac.autoneg != 0) 
                                   #line 1988 
                                   msleep(5000U);
    #line 1990 
    if ((igb_rd32(hw,8U) & 2U) == 0U) 
                                      #line 1991 
                                      *data = 1ULL;
  }
  #line 1993 
  return (int)*data;
}

#line 1996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_diag_test(struct net_device *netdev, struct ethtool_test *eth_test, u64 *data)
{
  #line 2000 
  u16 autoneg_advertised;
  #line 2001 
  u8 forced_speed_duplex;
  #line 2001 
  u8 autoneg;
  #line 1999 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2002 
  bool if_running = netif_running(netdev);
  #line 2004 
  cif_set_bit(0L,& adapter->state);
  #line 2007 
  if ((int)adapter->hw.dev_spec._82575.mas_capable != 0) 
                                                         #line 2008 
                                                         eth_test->flags &= 4294967294U;
  #line 2009 
  if (eth_test->flags == 1U) {
    #line 2013 
    autoneg_advertised = adapter->hw.phy.autoneg_advertised;
    #line 2014 
    forced_speed_duplex = adapter->hw.mac.forced_speed_duplex;
    #line 2015 
    autoneg = (unsigned char)adapter->hw.mac.autoneg;
    #line 2017 
    _dev_info(& (adapter->pdev)->dev,(char *)"offline testing starting\n");
    #line 2020 
    igb_power_up_link(adapter);
    #line 2025 
    if (igb_link_test(adapter,data + 4U) != 0) 
                                               #line 2026 
                                               eth_test->flags |= 2U;
    #line 2028 
    if ((int)if_running != 0) 
                              #line 2030 
                              igb_close(netdev); else 
                                                      #line 2032 
                                                      igb_reset(adapter);
    #line 2034 
    if (igb_reg_test(adapter,data) != 0) 
                                         #line 2035 
                                         eth_test->flags |= 2U;
    #line 2037 
    igb_reset(adapter);
    #line 2038 
    if (igb_eeprom_test(adapter,data + 1U) != 0) 
                                                 #line 2039 
                                                 eth_test->flags |= 2U;
    #line 2041 
    igb_reset(adapter);
    #line 2042 
    if (igb_intr_test(adapter,data + 2U) != 0) 
                                               #line 2043 
                                               eth_test->flags |= 2U;
    #line 2045 
    igb_reset(adapter);
    #line 2047 
    igb_power_up_link(adapter);
    #line 2048 
    if (igb_loopback_test(adapter,data + 3U) != 0) 
                                                   #line 2049 
                                                   eth_test->flags |= 2U;
    #line 2052 
    adapter->hw.phy.autoneg_advertised = autoneg_advertised;
    #line 2053 
    adapter->hw.mac.forced_speed_duplex = forced_speed_duplex;
    #line 2054 
    adapter->hw.mac.autoneg = (_Bool)((unsigned int)autoneg != 0U);
    #line 2057 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)1;
    #line 2058 
    igb_reset(adapter);
    #line 2059 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)0;
    #line 2061 
    cif_clear_bit(0L,& adapter->state);
    #line 2062 
    if ((int)if_running != 0) 
                              #line 2063 
                              igb_open(netdev);
  }
  else {
    #line 2065 
    _dev_info(& (adapter->pdev)->dev,(char *)"online testing starting\n");
    #line 2068 
    if ((int)if_running != 0) {
      #line 2068 
      if (igb_link_test(adapter,data + 4U) != 0) 
                                                 #line 2069 
                                                 eth_test->flags |= 2U; else 
                                                                    #line 2071 
                                                                    *(data + 4U) = 0ULL;
    }
    else 
         #line 2071 
         *(data + 4U) = 0ULL;
    #line 2074 
    *data = 0ULL;
    #line 2075 
    *(data + 1U) = 0ULL;
    #line 2076 
    *(data + 2U) = 0ULL;
    #line 2077 
    *(data + 3U) = 0ULL;
    #line 2079 
    cif_clear_bit(0L,& adapter->state);
  }
  #line 2081 
  msleep_interruptible(4000U);
  #line 2082 
  return;
}

#line 2084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 2086 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2088 
  wol->wolopts = 0U;
  #line 2090 
  if (((unsigned long)adapter->flags & 256UL) == 0UL) 
                                                      #line 2091 
                                                      return;
  #line 2093 
  wol->supported = 47U;
  #line 2098 
  switch ((int)adapter->hw.device_id) {
    #line 2099 
    default: 
             #line 2099 
    ;
    #line 2100 
    break;
  }
  #line 2103 
  if ((adapter->wol & 4U) != 0U) 
                                 #line 2104 
                                 wol->wolopts |= 2U;
  #line 2105 
  if ((adapter->wol & 8U) != 0U) 
                                 #line 2106 
                                 wol->wolopts |= 4U;
  #line 2107 
  if ((adapter->wol & 16U) != 0U) 
                                  #line 2108 
                                  wol->wolopts |= 8U;
  #line 2109 
  if ((adapter->wol & 2U) != 0U) 
                                 #line 2110 
                                 wol->wolopts |= 32U;
  #line 2111 
  if ((adapter->wol & 1U) != 0U) 
                                 #line 2112 
                                 wol->wolopts |= 1U;
  #line 2113 
  return;
}

#line 2115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 2117 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2119 
  if ((wol->wolopts & 208U) != 0U) 
                                   #line 2120 
                                   return -95;
  #line 2122 
  if (((unsigned long)adapter->flags & 256UL) == 0UL) {
    #line 2123 
    int tmp_0;
    #line 2123 
    if (wol->wolopts != 0U) 
                            #line 2123 
                            tmp_0 = -95; else 
                                              #line 2123 
                                              tmp_0 = 0;
    #line 2123 
    return tmp_0;
  }
  #line 2126 
  adapter->wol = 0U;
  #line 2128 
  if ((wol->wolopts & 2U) != 0U) 
                                 #line 2129 
                                 adapter->wol |= 4U;
  #line 2130 
  if ((wol->wolopts & 4U) != 0U) 
                                 #line 2131 
                                 adapter->wol |= 8U;
  #line 2132 
  if ((wol->wolopts & 8U) != 0U) 
                                 #line 2133 
                                 adapter->wol |= 16U;
  #line 2134 
  if ((wol->wolopts & 32U) != 0U) 
                                  #line 2135 
                                  adapter->wol |= 2U;
  #line 2136 
  if ((wol->wolopts & 1U) != 0U) 
                                 #line 2137 
                                 adapter->wol |= 1U;
  #line 2138 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)(adapter->wol != 0U));
  #line 2140 
  return 0;
}

#line 2146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  #line 2149 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2150 
  struct e1000_hw *hw = & adapter->hw;
  #line 2152 
  switch ((unsigned int)state) {
    #line 2153 
    case (unsigned int)1: 
                          #line 2153 
    ;
    #line 2154 
    igb_blink_led(hw);
    #line 2155 
    return 2;
    #line 2156 
    case (unsigned int)2: 
                          #line 2156 
    ;
    #line 2157 
    igb_blink_led(hw);
    #line 2158 
    break;
    #line 2159 
    case (unsigned int)3: 
                          #line 2159 
    ;
    #line 2160 
    igb_led_off(hw);
    #line 2161 
    break;
    #line 2162 
    case (unsigned int)0: 
                          #line 2162 
    ;
    #line 2163 
    igb_led_off(hw);
    #line 2164 
    cif_clear_bit(0L,& adapter->led_status);
    #line 2165 
    igb_cleanup_led(hw);
    #line 2166 
    break;
  }
  #line 2169 
  return 0;
}

#line 2172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 2176 
  int i;
  #line 2175 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2178 
  if ((((((((((((((((((ec->rx_max_coalesced_frames != 0U || ec->rx_coalesce_usecs_irq != 0U) || ec->rx_max_coalesced_frames_irq != 0U) || ec->tx_max_coalesced_frames != 0U) || ec->tx_coalesce_usecs_irq != 0U) || ec->stats_block_coalesce_usecs != 0U) || ec->use_adaptive_rx_coalesce != 0U) || ec->use_adaptive_tx_coalesce != 0U) || ec->pkt_rate_low != 0U) || ec->rx_coalesce_usecs_low != 0U) || ec->rx_max_coalesced_frames_low != 0U) || ec->tx_coalesce_usecs_low != 0U) || ec->tx_max_coalesced_frames_low != 0U) || ec->pkt_rate_high != 0U) || ec->rx_coalesce_usecs_high != 0U) || ec->rx_max_coalesced_frames_high != 0U) || ec->tx_coalesce_usecs_high != 0U) || ec->tx_max_coalesced_frames_high != 0U) || ec->rate_sample_interval != 0U) 
    #line 2197 
    return -524;
  #line 2199 
  if ((ec->rx_coalesce_usecs > 10000U || ec->rx_coalesce_usecs + 4294967292U <= 5U) || ec->rx_coalesce_usecs == 2U) 
    #line 2203 
    return -22;
  #line 2205 
  if ((ec->tx_coalesce_usecs > 10000U || ec->tx_coalesce_usecs + 4294967292U <= 5U) || ec->tx_coalesce_usecs == 2U) 
    #line 2209 
    return -22;
  #line 2211 
  if (((unsigned long)adapter->flags & 8UL) != 0UL && ec->tx_coalesce_usecs != 0U) 
    #line 2212 
    return -22;
  #line 2215 
  if (ec->rx_coalesce_usecs == 0U) 
    #line 2216 
    if (((unsigned long)adapter->flags & 16UL) != 0UL) 
                                                       #line 2217 
                                                       adapter->flags &= 4294967279U;
  #line 2221 
  if (ec->rx_coalesce_usecs + 4294967295U <= 2U) 
                                                 #line 2222 
                                                 adapter->rx_itr_setting = ec->rx_coalesce_usecs; else 
                                                                    #line 2224 
                                                                    adapter->rx_itr_setting = ec->rx_coalesce_usecs << 2;
  #line 2227 
  if (((unsigned long)adapter->flags & 8UL) != 0UL) 
                                                    #line 2228 
                                                    adapter->tx_itr_setting = adapter->rx_itr_setting;
  else 
    #line 2229 
    if (ec->tx_coalesce_usecs + 4294967295U <= 2U) 
                                                   #line 2230 
                                                   adapter->tx_itr_setting = ec->tx_coalesce_usecs; else 
                                                                    #line 2232 
                                                                    adapter->tx_itr_setting = ec->tx_coalesce_usecs << 2;
  #line 2234 
  i = 0;
  #line 2234 
  while (adapter->num_q_vectors > (unsigned int)i) {
    {
      #line 2235 
      struct igb_q_vector *q_vector = adapter->q_vector[i];
      #line 2236 
      q_vector->tx.work_limit = adapter->tx_work_limit;
      #line 2237 
      if (q_vector->rx.ring != (struct igb_ring *)0) 
                                                     #line 2238 
                                                     q_vector->itr_val = (unsigned short)adapter->rx_itr_setting; else 
                                                                    #line 2240 
                                                                    q_vector->itr_val = (unsigned short)adapter->tx_itr_setting;
      #line 2241 
      if ((unsigned int)q_vector->itr_val + 65535U <= 2U) 
                                                          #line 2242 
                                                          q_vector->itr_val = (unsigned short)648U;
      #line 2243 
      q_vector->set_itr = (unsigned char)1U;
    }
    #line 2234 
    i ++;
  }
  #line 2246 
  return 0;
}

#line 2249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 2252 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2254 
  if (adapter->rx_itr_setting <= 3U) 
                                     #line 2255 
                                     ec->rx_coalesce_usecs = adapter->rx_itr_setting; else 
                                                                    #line 2257 
                                                                    ec->rx_coalesce_usecs = adapter->rx_itr_setting >> 2;
  #line 2259 
  if (((unsigned long)adapter->flags & 8UL) == 0UL) 
    #line 2260 
    if (adapter->tx_itr_setting <= 3U) 
                                       #line 2261 
                                       ec->tx_coalesce_usecs = adapter->tx_itr_setting; else 
                                                                    #line 2263 
                                                                    ec->tx_coalesce_usecs = adapter->tx_itr_setting >> 2;
  #line 2266 
  return 0;
}

#line 2269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_nway_reset(struct net_device *netdev)
{
  #line 2271 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2272 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2273 
                                       igb_reinit_locked(adapter);
  #line 2274 
  return 0;
}

#line 2277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_sset_count(struct net_device *netdev, int sset)
{
  #line 2279 
  switch (sset) {
    #line 2280 
    case 1: 
            #line 2280 
    ;
    #line 2281 
    ;
    #line 2281 
    return (int)(((unsigned long)((struct igb_adapter *)netdev_priv(netdev))->num_rx_queues * (unsigned long)5U + (unsigned long)(((struct igb_adapter *)netdev_priv(netdev))->num_tx_queues * 3)) + (unsigned long)51U);
    #line 2282 
    case 0: 
            #line 2282 
    ;
    #line 2283 
    return 5;
    #line 2284 
    case 2: 
            #line 2284 
    ;
    #line 2285 
    return 1;
    #line 2286 
    default: 
             #line 2286 
    ;
    #line 2287 
    return -524;
  }
}

#line 2291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 2296 
  unsigned int start;
  #line 2297 
  struct igb_ring *ring;
  #line 2298 
  int i;
  #line 2298 
  int j;
  #line 2299 
  char *p;
  #line 2294 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2295 
  struct rtnl_link_stats64 *net_stats = & adapter->stats64;
  #line 2301 
  cif_spin_lock_stats64_lock_of_igb_adapter(& adapter->stats64_lock);
  #line 2302 
  igb_update_stats(adapter);
  #line 2304 
  i = 0;
  #line 2304 
  while ((unsigned int)i <= 41U) {
    #line 2305 
    p = (char *)adapter + (unsigned long)igb_gstrings_stats[i].stat_offset;
    #line 2306 
    if (igb_gstrings_stats[i].sizeof_stat == 8) 
                                                #line 2306 
                                                *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 2306 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
    #line 2304 
    i ++;
  }
  #line 2309 
  j = 0;
  #line 2309 
  while ((unsigned int)j <= 8U) {
    #line 2310 
    p = (char *)net_stats + (unsigned long)igb_gstrings_net_stats[j].stat_offset;
    #line 2311 
    if (igb_gstrings_net_stats[j].sizeof_stat == 8) 
                                                    #line 2311 
                                                    *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 2311 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
    #line 2309 
    j ++;
    #line 2309 
    i ++;
  }
  #line 2314 
  j = 0;
  #line 2314 
  while (adapter->num_tx_queues > j) {
    {
      #line 2315 
      u64 restart2;
      #line 2317 
      ring = adapter->tx_ring[j];
      #line 2318 
      while (1) {
        #line 2319 
        start = u64_stats_fetch_begin_irq(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp);
        #line 2320 
        *(data + (unsigned long)i) = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.packets;
        #line 2321 
        *(data + ((unsigned long)i + (unsigned long)1U)) = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.bytes;
        #line 2322 
        *(data + ((unsigned long)i + (unsigned long)2U)) = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.restart_queue;
        #line 2323 
        if (! ((int)u64_stats_fetch_retry_irq(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp,
                                  start) != 0)) 
          #line 2318 
          break;
      }
      #line 2324 
      while (1) {
        #line 2325 
        start = u64_stats_fetch_begin_irq(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp2);
        #line 2326 
        restart2 = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.restart_queue2;
        #line 2327 
        if (! ((int)u64_stats_fetch_retry_irq(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp2,
                                  start) != 0)) 
          #line 2324 
          break;
      }
      #line 2328 
      *(data + ((unsigned long)i + (unsigned long)2U)) += restart2;
      #line 2330 
      i += 3;
    }
    #line 2314 
    j ++;
  }
  #line 2332 
  j = 0;
  #line 2332 
  while (adapter->num_rx_queues > j) {
    #line 2333 
    ring = adapter->rx_ring[j];
    #line 2334 
    while (1) {
      #line 2335 
      start = u64_stats_fetch_begin_irq(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_syncp);
      #line 2336 
      *(data + (unsigned long)i) = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.packets;
      #line 2337 
      *(data + ((unsigned long)i + (unsigned long)1U)) = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.bytes;
      #line 2338 
      *(data + ((unsigned long)i + (unsigned long)2U)) = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.drops;
      #line 2339 
      *(data + ((unsigned long)i + (unsigned long)3U)) = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.csum_err;
      #line 2340 
      *(data + ((unsigned long)i + (unsigned long)4U)) = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.alloc_failed;
      #line 2341 
      if (! ((int)u64_stats_fetch_retry_irq(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_syncp,
                                  start) != 0)) 
        #line 2334 
        break;
    }
    #line 2342 
    i = (int)((unsigned int)i + 5U);
    #line 2332 
    j ++;
  }
  #line 2344 
  cif_spin_unlock_stats64_lock_of_igb_adapter(& adapter->stats64_lock);
  #line 2345 
  return;
}

#line 2347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 2351 
  int i;
  #line 2349 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2350 
  u8 *p = data;
  #line 2353 
  switch (stringset) {
    #line 2354 
    case (u32)0: 
                 #line 2354 
    ;
    #line 2355 
    memcpy((void *)data,(void *)(& igb_gstrings_test),160UL);
    #line 2357 
    break;
    #line 2358 
    case (u32)1: 
                 #line 2358 
    ;
    #line 2359 
    i = 0;
    #line 2359 
    while ((unsigned int)i <= 41U) {
      #line 2360 
      memcpy((void *)p,(void *)(& igb_gstrings_stats[i].stat_string),32UL);
      #line 2362 
      p += 32U;
      #line 2359 
      i ++;
    }
    #line 2364 
    i = 0;
    #line 2364 
    while ((unsigned int)i <= 8U) {
      #line 2365 
      memcpy((void *)p,(void *)(& igb_gstrings_net_stats[i].stat_string),32UL);
      #line 2367 
      p += 32U;
      #line 2364 
      i ++;
    }
    #line 2369 
    i = 0;
    #line 2369 
    while (adapter->num_tx_queues > i) {
      #line 2370 
      sprintf((char *)p,(char *)"tx_queue_%u_packets",i);
      #line 2371 
      p += 32U;
      #line 2372 
      sprintf((char *)p,(char *)"tx_queue_%u_bytes",i);
      #line 2373 
      p += 32U;
      #line 2374 
      sprintf((char *)p,(char *)"tx_queue_%u_restart",i);
      #line 2375 
      p += 32U;
      #line 2369 
      i ++;
    }
    #line 2377 
    i = 0;
    #line 2377 
    while (adapter->num_rx_queues > i) {
      #line 2378 
      sprintf((char *)p,(char *)"rx_queue_%u_packets",i);
      #line 2379 
      p += 32U;
      #line 2380 
      sprintf((char *)p,(char *)"rx_queue_%u_bytes",i);
      #line 2381 
      p += 32U;
      #line 2382 
      sprintf((char *)p,(char *)"rx_queue_%u_drops",i);
      #line 2383 
      p += 32U;
      #line 2384 
      sprintf((char *)p,(char *)"rx_queue_%u_csum_err",i);
      #line 2385 
      p += 32U;
      #line 2386 
      sprintf((char *)p,(char *)"rx_queue_%u_alloc_failed",i);
      #line 2387 
      p += 32U;
      #line 2377 
      i ++;
    }
    #line 2390 
    break;
    #line 2391 
    case (u32)2: 
                 #line 2391 
    ;
    #line 2392 
    memcpy((void *)data,(void *)(& igb_priv_flags_strings),32UL);
    #line 2394 
    break;
  }
  #line 2396 
  return;
}

#line 2398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
{
  #line 2401 
  struct igb_adapter *adapter = netdev_priv(dev);
  #line 2403 
  if (adapter->ptp_clock != (struct ptp_clock *)0) 
                                                   #line 2404 
                                                   info->phc_index = ptp_clock_index(adapter->ptp_clock); else 
                                                                    #line 2406 
                                                                    info->phc_index = -1;
  #line 2408 
  switch ((unsigned int)adapter->hw.mac.type) {
    #line 2409 
    case (unsigned int)1: 
                          #line 2409 
    ;
    #line 2410 
    info->so_timestamping = 26U;
    #line 2414 
    return 0;
    #line 2415 
    case (unsigned int)2: 
                          #line 2415 
    ;
    #line 2416 
    case (unsigned int)3: 
                          #line 2416 
    ;
    #line 2417 
    case (unsigned int)4: 
                          #line 2417 
    ;
    #line 2418 
    case (unsigned int)5: 
                          #line 2418 
    ;
    #line 2419 
    case (unsigned int)6: 
                          #line 2419 
    ;
    #line 2420 
    case (unsigned int)7: 
                          #line 2420 
    ;
    #line 2421 
    info->so_timestamping = 95U;
    #line 2429 
    info->tx_types = 3U;
    #line 2433 
    info->rx_filters = 1U;
    #line 2436 
    if (adapter->hw.mac.type > (unsigned int)e1000_82576) 
                                                          #line 2437 
                                                          info->rx_filters |= 2U; else 
                                                                    #line 2439 
                                                                    info->rx_filters |= 4144U;
    #line 2444 
    return 0;
    #line 2445 
    default: 
             #line 2445 
    ;
    #line 2446 
    return -95;
  }
}

#line 2451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_ethtool_nfc_entry(struct igb_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  #line 2460 
  struct igb_nfc_filter *tmp_0;
  #line 2460 
  void *__mptr;
  #line 2454 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  #line 2455 
  struct igb_nfc_filter *rule = (struct igb_nfc_filter *)0;
  #line 2458 
  cmd->data = 16ULL;
  {
    #line 2460 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 2460 
    if (____ptr != (struct hlist_node *)0) {
      #line 2460 
      __mptr = (void *)____ptr;
      #line 2460 
      tmp_0 = ((struct igb_nfc_filter *)__mptr);
    }
    else 
         #line 2460 
         tmp_0 = (struct igb_nfc_filter *)0;
    }
  #line 2460 
  rule = tmp_0;
  #line 2460 
  while (rule != (struct igb_nfc_filter *)0) {
    #line 2460 
    void *__mptr_0;
    #line 2460 
    struct igb_nfc_filter *tmp_3;
    #line 2461 
    if (fsp->location <= (unsigned int)rule->sw_idx) 
                                                     #line 2462 
                                                     break;
    {
      #line 2460 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 2460 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 2460 
        __mptr_0 = (void *)____ptr_0;
        #line 2460 
        tmp_3 = ((struct igb_nfc_filter *)__mptr_0);
      }
      else 
           #line 2460 
           tmp_3 = (struct igb_nfc_filter *)0;
      }
    #line 2460 
    rule = tmp_3;
  }
  #line 2465 
  if (rule == (struct igb_nfc_filter *)0 || fsp->location != (unsigned int)rule->sw_idx) 
    #line 2466 
    return -22;
  #line 2468 
  if ((unsigned int)rule->filter.match_flags != 0U) {
    #line 2469 
    fsp->flow_type = 18U;
    #line 2470 
    fsp->ring_cookie = (unsigned long long)rule->action;
    #line 2471 
    if (((int)rule->filter.match_flags & 1) != 0) {
      #line 2472 
      fsp->h_u.ether_spec.h_proto = rule->filter.etype;
      #line 2473 
      fsp->m_u.ether_spec.h_proto = (unsigned short)65535U;
    }
    #line 2475 
    if (((int)rule->filter.match_flags & 2) != 0) {
      #line 2476 
      fsp->flow_type |= 2147483648U;
      #line 2477 
      fsp->h_ext.vlan_tci = rule->filter.vlan_tci;
      #line 2478 
      fsp->m_ext.vlan_tci = (unsigned short)224U;
    }
    #line 2480 
    if (((int)rule->filter.match_flags & 8) != 0) {
      #line 2481 
      ether_addr_copy((u8 *)(& fsp->h_u.ether_spec.h_dest),(u8 *)(& rule->filter.dst_addr));
      #line 2486 
      eth_broadcast_addr((u8 *)(& fsp->m_u.ether_spec.h_dest));
    }
    #line 2488 
    if (((int)rule->filter.match_flags & 4) != 0) {
      #line 2489 
      ether_addr_copy((u8 *)(& fsp->h_u.ether_spec.h_source),(u8 *)(& rule->filter.src_addr));
      #line 2494 
      eth_broadcast_addr((u8 *)(& fsp->m_u.ether_spec.h_source));
    }
    #line 2497 
    return 0;
  }
  #line 2499 
  return -22;
}

#line 2502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_ethtool_nfc_all(struct igb_adapter *adapter, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 2512 
  struct igb_nfc_filter *tmp_0;
  #line 2512 
  void *__mptr;
  #line 2506 
  struct igb_nfc_filter *rule;
  #line 2507 
  int cnt = 0;
  #line 2510 
  cmd->data = 16ULL;
  {
    #line 2512 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 2512 
    if (____ptr != (struct hlist_node *)0) {
      #line 2512 
      __mptr = (void *)____ptr;
      #line 2512 
      tmp_0 = ((struct igb_nfc_filter *)__mptr);
    }
    else 
         #line 2512 
         tmp_0 = (struct igb_nfc_filter *)0;
    }
  #line 2512 
  rule = tmp_0;
  #line 2512 
  while (rule != (struct igb_nfc_filter *)0) {
    #line 2512 
    void *__mptr_0;
    #line 2512 
    struct igb_nfc_filter *tmp_3;
    #line 2513 
    if (cmd->__anonCompField_ethtool_rxnfc_99.rule_cnt == (unsigned int)cnt) 
      #line 2514 
      return -90;
    #line 2515 
    *(rule_locs + (unsigned long)cnt) = (unsigned int)rule->sw_idx;
    #line 2516 
    cnt ++;
    {
      #line 2512 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 2512 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 2512 
        __mptr_0 = (void *)____ptr_0;
        #line 2512 
        tmp_3 = ((struct igb_nfc_filter *)__mptr_0);
      }
      else 
           #line 2512 
           tmp_3 = (struct igb_nfc_filter *)0;
      }
    #line 2512 
    rule = tmp_3;
  }
  #line 2519 
  cmd->__anonCompField_ethtool_rxnfc_99.rule_cnt = (unsigned int)cnt;
  #line 2521 
  return 0;
}

#line 2524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_rss_hash_opts(struct igb_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  #line 2527 
  cmd->data = 0ULL;
  #line 2530 
  switch (cmd->flow_type) {
    #line 2531 
    case (__u32)1: 
                   #line 2531 
    ;
    #line 2532 
    cmd->data |= 192ULL;
    #line 2534 
    case (__u32)2: 
                   #line 2534 
    ;
    #line 2535 
    if (((unsigned long)adapter->flags & 64UL) != 0UL) 
                                                       #line 2536 
                                                       cmd->data |= 192ULL;
    #line 2538 
    case (__u32)3: 
                   #line 2538 
    ;
    #line 2539 
    case (__u32)4: 
                   #line 2539 
    ;
    #line 2540 
    case (__u32)9: 
                   #line 2540 
    ;
    #line 2541 
    case (__u32)10: 
                    #line 2541 
    ;
    #line 2542 
    case (__u32)16: 
                    #line 2542 
    ;
    #line 2543 
    cmd->data |= 48ULL;
    #line 2544 
    break;
    #line 2545 
    case (__u32)5: 
                   #line 2545 
    ;
    #line 2546 
    cmd->data |= 192ULL;
    #line 2548 
    case (__u32)6: 
                   #line 2548 
    ;
    #line 2549 
    if (((unsigned long)adapter->flags & 128UL) != 0UL) 
                                                        #line 2550 
                                                        cmd->data |= 192ULL;
    #line 2552 
    case (__u32)7: 
                   #line 2552 
    ;
    #line 2553 
    case (__u32)8: 
                   #line 2553 
    ;
    #line 2554 
    case (__u32)11: 
                    #line 2554 
    ;
    #line 2555 
    case (__u32)12: 
                    #line 2555 
    ;
    #line 2556 
    case (__u32)17: 
                    #line 2556 
    ;
    #line 2557 
    cmd->data |= 48ULL;
    #line 2558 
    break;
    #line 2559 
    default: 
             #line 2559 
    ;
    #line 2560 
    return -22;
  }
  #line 2563 
  return 0;
}

#line 2566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 2569 
  struct igb_adapter *adapter = netdev_priv(dev);
  #line 2570 
  int ret = -95;
  #line 2572 
  switch (cmd->cmd) {
    #line 2573 
    case (__u32)45: 
                    #line 2573 
    ;
    #line 2574 
    cmd->data = (unsigned long long)adapter->num_rx_queues;
    #line 2575 
    ret = 0;
    #line 2576 
    break;
    #line 2577 
    case (__u32)46: 
                    #line 2577 
    ;
    #line 2578 
    cmd->__anonCompField_ethtool_rxnfc_99.rule_cnt = adapter->nfc_filter_count;
    #line 2579 
    ret = 0;
    #line 2580 
    break;
    #line 2581 
    case (__u32)47: 
                    #line 2581 
    ;
    #line 2582 
    ret = igb_get_ethtool_nfc_entry(adapter,cmd);
    #line 2583 
    break;
    #line 2584 
    case (__u32)48: 
                    #line 2584 
    ;
    #line 2585 
    ret = igb_get_ethtool_nfc_all(adapter,cmd,rule_locs);
    #line 2586 
    break;
    #line 2587 
    case (__u32)41: 
                    #line 2587 
    ;
    #line 2588 
    ret = igb_get_rss_hash_opts(adapter,cmd);
    #line 2589 
    break;
    #line 2590 
    default: 
             #line 2590 
    ;
    #line 2591 
    break;
  }
  #line 2594 
  return ret;
}

#line 2599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_rss_hash_opt(struct igb_adapter *adapter, struct ethtool_rxnfc *nfc)
{
  #line 2602 
  u32 flags = adapter->flags;
  #line 2607 
  if ((nfc->data & 18446744073709551375ULL) != 0ULL) 
                                                     #line 2609 
                                                     return -22;
  #line 2611 
  switch (nfc->flow_type) {
    #line 2612 
    case (__u32)1: 
                   #line 2612 
    ;
    #line 2613 
    case (__u32)5: 
                   #line 2613 
    ;
    #line 2614 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) == 0ULL) || (nfc->data & 128ULL) == 0ULL) 
      #line 2618 
      return -22;
    #line 2619 
    break;
    #line 2620 
    case (__u32)2: 
                   #line 2620 
    ;
    #line 2621 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) 
                                                                    #line 2623 
                                                                    return -22;
    #line 2624 
    switch (nfc->data & 192ULL) {
      #line 2625 
      case (unsigned long long)0: 
                                  #line 2625 
      ;
      #line 2626 
      flags &= 4294967231U;
      #line 2627 
      break;
      #line 2628 
      case (unsigned long long)192: 
                                    #line 2628 
      ;
      #line 2629 
      flags |= 64U;
      #line 2630 
      break;
      #line 2631 
      default: 
               #line 2631 
      ;
      #line 2632 
      return -22;
    }
    #line 2634 
    break;
    #line 2635 
    case (__u32)6: 
                   #line 2635 
    ;
    #line 2636 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) 
                                                                    #line 2638 
                                                                    return -22;
    #line 2639 
    switch (nfc->data & 192ULL) {
      #line 2640 
      case (unsigned long long)0: 
                                  #line 2640 
      ;
      #line 2641 
      flags &= 4294967167U;
      #line 2642 
      break;
      #line 2643 
      case (unsigned long long)192: 
                                    #line 2643 
      ;
      #line 2644 
      flags |= 128U;
      #line 2645 
      break;
      #line 2646 
      default: 
               #line 2646 
      ;
      #line 2647 
      return -22;
    }
    #line 2649 
    break;
    #line 2650 
    case (__u32)4: 
                   #line 2650 
    ;
    #line 2651 
    case (__u32)9: 
                   #line 2651 
    ;
    #line 2652 
    case (__u32)10: 
                    #line 2652 
    ;
    #line 2653 
    case (__u32)3: 
                   #line 2653 
    ;
    #line 2654 
    case (__u32)8: 
                   #line 2654 
    ;
    #line 2655 
    case (__u32)11: 
                    #line 2655 
    ;
    #line 2656 
    case (__u32)12: 
                    #line 2656 
    ;
    #line 2657 
    case (__u32)7: 
                   #line 2657 
    ;
    #line 2658 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) != 0ULL) || (nfc->data & 128ULL) != 0ULL) 
      #line 2662 
      return -22;
    #line 2663 
    break;
    #line 2664 
    default: 
             #line 2664 
    ;
    #line 2665 
    return -22;
  }
  #line 2669 
  if (adapter->flags != flags) {
    #line 2670 
    struct e1000_hw *hw = & adapter->hw;
    #line 2671 
    u32 mrqc = igb_rd32(hw,22552U);
    #line 2673 
    if (((unsigned long)flags & 192UL) != 0UL && ((unsigned long)adapter->flags & 192UL) == 0UL) 
      #line 2675 
      _dev_err(& (adapter->pdev)->dev,(char *)"enabling UDP RSS: fragmented packets may arrive out of order to the stack above\n");
    #line 2678 
    adapter->flags = flags;
    #line 2681 
    mrqc |= 3342336U;
    #line 2686 
    mrqc &= 4282384383U;
    #line 2689 
    if (((unsigned long)flags & 64UL) != 0UL) 
                                              #line 2690 
                                              mrqc |= 4194304U;
    #line 2692 
    if (((unsigned long)flags & 128UL) != 0UL) 
                                               #line 2693 
                                               mrqc |= 8388608U;
    {
      #line 2696 
      union __anonunion___u_2229 __u;
      #line 2695 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 2695 
      u8 *hw_addr = (__u.__val);
      #line 2695 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 2695 
                                             writel(mrqc,(void *)(hw_addr + 22552U));
    }
  }
  #line 2698 
  return 0;
}

#line 2701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_rxnfc_write_etype_filter(struct igb_adapter *adapter, struct igb_nfc_filter *input)
{
  #line 2705 
  u8 i;
  #line 2706 
  u32 etqf;
  #line 2707 
  u16 etype;
  #line 2704 
  struct e1000_hw *hw = & adapter->hw;
  #line 2710 
  i = (unsigned char)0U;
  #line 2710 
  while ((unsigned int)i <= 2U) {
    #line 2711 
    if (! adapter->etype_bitmap[(int)i]) 
                                         #line 2712 
                                         break;
    #line 2710 
    i = (u8)((int)i + 1);
  }
  #line 2714 
  if ((unsigned int)i == 3U) {
    #line 2715 
    _dev_err(& (adapter->pdev)->dev,(char *)"ethtool -N: etype filters are all used.\n");
    #line 2716 
    return -22;
  }
  #line 2719 
  adapter->etype_bitmap[(int)i] = (_Bool)1;
  #line 2721 
  etqf = igb_rd32(hw,(unsigned int)(((int)i + 5932) * 4));
  #line 2722 
  etype = __builtin_bswap16((unsigned short)((int)input->filter.etype));
  #line 2724 
  etqf |= 67108864U;
  #line 2725 
  etqf &= 4294901760U;
  #line 2726 
  etqf = (unsigned int)etype | etqf;
  #line 2728 
  etqf &= 4294508543U;
  #line 2729 
  etqf = ((unsigned int)((int)input->action << 16) & 458752U) | etqf;
  #line 2731 
  etqf |= 2147483648U;
  {
    #line 2734 
    union __anonunion___u_2231 __u;
    #line 2733 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2733 
    u8 *hw_addr = (__u.__val);
    #line 2733 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2733 
                                           writel(etqf,(void *)(hw_addr + (unsigned long)(((int)i + 5932) * 4)));
  }
  #line 2735 
  input->etype_reg_index = (unsigned short)i;
  #line 2737 
  return 0;
}

#line 2740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_rxnfc_write_vlan_prio_filter(struct igb_adapter *adapter, struct igb_nfc_filter *input)
{
  #line 2744 
  u8 vlan_priority;
  #line 2745 
  u16 queue_index;
  #line 2746 
  u32 vlapqf;
  #line 2743 
  struct e1000_hw *hw = & adapter->hw;
  #line 2748 
  vlapqf = igb_rd32(hw,21936U);
  #line 2749 
  vlan_priority = (unsigned char)((int)__builtin_bswap16((unsigned short)((int)input->filter.vlan_tci)) >> 13);
  #line 2751 
  queue_index = (unsigned short)((unsigned int)((unsigned short)(vlapqf >> (int)vlan_priority * 4)) & 3U);
  #line 2754 
  if (((unsigned int)(1 << ((int)vlan_priority * 4 + 3)) & vlapqf) != 0U && (int)input->action != (int)queue_index) {
    #line 2756 
    _dev_err(& (adapter->pdev)->dev,(char *)"ethtool rxnfc set vlan prio filter failed.\n");
    #line 2757 
    return -17;
  }
  #line 2760 
  vlapqf = (unsigned int)(1 << ((int)vlan_priority * 4 + 3)) | vlapqf;
  #line 2761 
  vlapqf = (unsigned int)((int)input->action << (int)vlan_priority * 4) | vlapqf;
  {
    #line 2764 
    union __anonunion___u_2233 __u;
    #line 2763 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2763 
    u8 *hw_addr = (__u.__val);
    #line 2763 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2763 
                                           writel(vlapqf,(void *)(hw_addr + 21936U));
  }
  #line 2765 
  return 0;
}

#line 2768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
int igb_add_filter(struct igb_adapter *adapter, struct igb_nfc_filter *input)
{
  #line 2770 
  struct e1000_hw *hw = & adapter->hw;
  #line 2771 
  int err = -22;
  #line 2773 
  if (hw->mac.type == (unsigned int)e1000_i210 && ((int)input->filter.match_flags & -5) == 0) {
    #line 2775 
    _dev_err(& (adapter->pdev)->dev,(char *)"i210 doesn\'t support flow classification rules specifying only source addresses.\n");
    #line 2777 
    return -95;
  }
  #line 2780 
  if (((int)input->filter.match_flags & 1) != 0) {
    #line 2781 
    err = igb_rxnfc_write_etype_filter(adapter,input);
    #line 2782 
    if (err != 0) 
                  #line 2783 
                  return err;
  }
  #line 2786 
  if (((int)input->filter.match_flags & 8) != 0) {
    #line 2790 
    int __UNIQUE_ID___x453;
    #line 2790 
    int tmp;
    #line 2787 
    err = igb_add_mac_steering_filter(adapter,(u8 *)(& input->filter.dst_addr),(unsigned char)((int)((unsigned char)input->action)),(unsigned char)0);
    {
      #line 2790 
      __UNIQUE_ID___x453 = err;
      #line 2790 
      int __UNIQUE_ID___y454 = 0;
      #line 2790 
      if (__UNIQUE_ID___x453 < __UNIQUE_ID___y454) 
                                                   #line 2790 
                                                   tmp = __UNIQUE_ID___x453; else 
                                                                    #line 2790 
                                                                    tmp = __UNIQUE_ID___y454;
      }
    #line 2790 
    err = tmp;
    #line 2791 
    if (err != 0) 
                  #line 2792 
                  return err;
  }
  #line 2795 
  if (((int)input->filter.match_flags & 4) != 0) {
    #line 2800 
    int __UNIQUE_ID___x455;
    #line 2800 
    int tmp_1;
    #line 2796 
    err = igb_add_mac_steering_filter(adapter,(u8 *)(& input->filter.src_addr),(unsigned char)((int)((unsigned char)input->action)),(unsigned char)4);
    {
      #line 2800 
      __UNIQUE_ID___x455 = err;
      #line 2800 
      int __UNIQUE_ID___y456 = 0;
      #line 2800 
      if (__UNIQUE_ID___x455 < __UNIQUE_ID___y456) 
                                                   #line 2800 
                                                   tmp_1 = __UNIQUE_ID___x455; else 
                                                                    #line 2800 
                                                                    tmp_1 = __UNIQUE_ID___y456;
      }
    #line 2800 
    err = tmp_1;
    #line 2801 
    if (err != 0) 
                  #line 2802 
                  return err;
  }
  #line 2805 
  if (((int)input->filter.match_flags & 2) != 0) 
                                                 #line 2806 
                                                 err = igb_rxnfc_write_vlan_prio_filter(adapter,input);
  #line 2808 
  return err;
}

#line 2811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_clear_etype_filter_regs(struct igb_adapter *adapter, u16 reg_index)
{
  #line 2814 
  struct e1000_hw *hw = & adapter->hw;
  #line 2815 
  u32 etqf = igb_rd32(hw,(unsigned int)(((int)reg_index + 5932) * 4));
  #line 2817 
  etqf &= 2147483647U;
  #line 2818 
  etqf &= 4294508543U;
  #line 2819 
  etqf &= 4227858431U;
  {
    #line 2822 
    union __anonunion___u_2235 __u;
    #line 2821 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2821 
    u8 *hw_addr = (__u.__val);
    #line 2821 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2821 
                                           writel(etqf,(void *)(hw_addr + (unsigned long)(((int)reg_index + 5932) * 4)));
  }
  #line 2823 
  adapter->etype_bitmap[(int)reg_index] = (_Bool)0;
  #line 2824 
  return;
}

#line 2826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_clear_vlan_prio_filter(struct igb_adapter *adapter, u16 vlan_tci)
{
  #line 2830 
  u8 vlan_priority;
  #line 2831 
  u32 vlapqf;
  #line 2829 
  struct e1000_hw *hw = & adapter->hw;
  #line 2833 
  vlan_priority = (unsigned char)((int)vlan_tci >> 13);
  #line 2835 
  vlapqf = igb_rd32(hw,21936U);
  #line 2836 
  vlapqf = (unsigned int)(~ (1 << ((int)vlan_priority * 4 + 3))) & vlapqf;
  #line 2837 
  vlapqf = (unsigned int)(~ (3 << (int)vlan_priority * 4)) & vlapqf;
  {
    #line 2841 
    union __anonunion___u_2237 __u;
    #line 2840 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2840 
    u8 *hw_addr = (__u.__val);
    #line 2840 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2840 
                                           writel(vlapqf,(void *)(hw_addr + 21936U));
  }
  #line 2842 
  return;
}

#line 2843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
int igb_erase_filter(struct igb_adapter *adapter, struct igb_nfc_filter *input)
{
  #line 2845 
  if (((int)input->filter.match_flags & 1) != 0) 
                                                 #line 2846 
                                                 igb_clear_etype_filter_regs(adapter,(unsigned short)((int)input->etype_reg_index));
  #line 2849 
  if (((int)input->filter.match_flags & 2) != 0) {
    #line 2850 
    ;
    #line 2850 
    igb_clear_vlan_prio_filter(adapter,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)input->filter.vlan_tci))));
  }
  #line 2853 
  if (((int)input->filter.match_flags & 4) != 0) 
                                                 #line 2854 
                                                 igb_del_mac_steering_filter(adapter,(u8 *)(& input->filter.src_addr),(unsigned char)((int)((unsigned char)input->action)),(unsigned char)4);
  #line 2858 
  if (((int)input->filter.match_flags & 8) != 0) 
                                                 #line 2859 
                                                 igb_del_mac_steering_filter(adapter,(u8 *)(& input->filter.dst_addr),(unsigned char)((int)((unsigned char)input->action)),(unsigned char)0);
  #line 2862 
  return 0;
}

#line 2865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_update_ethtool_nfc_entry(struct igb_adapter *adapter, struct igb_nfc_filter *input, u16 sw_idx)
{
  #line 2875 
  struct igb_nfc_filter *tmp_0;
  #line 2875 
  void *__mptr;
  #line 2869 
  struct igb_nfc_filter *rule;
  #line 2869 
  struct igb_nfc_filter *parent;
  #line 2870 
  int err = -22;
  #line 2872 
  parent = (struct igb_nfc_filter *)0;
  #line 2873 
  rule = (struct igb_nfc_filter *)0;
  {
    #line 2875 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 2875 
    if (____ptr != (struct hlist_node *)0) {
      #line 2875 
      __mptr = (void *)____ptr;
      #line 2875 
      tmp_0 = ((struct igb_nfc_filter *)__mptr);
    }
    else 
         #line 2875 
         tmp_0 = (struct igb_nfc_filter *)0;
    }
  #line 2875 
  rule = tmp_0;
  #line 2875 
  while (rule != (struct igb_nfc_filter *)0) {
    #line 2875 
    void *__mptr_0;
    #line 2875 
    struct igb_nfc_filter *tmp_3;
    #line 2877 
    if ((int)rule->sw_idx >= (int)sw_idx) 
                                          #line 2878 
                                          break;
    #line 2879 
    parent = rule;
    {
      #line 2875 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 2875 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 2875 
        __mptr_0 = (void *)____ptr_0;
        #line 2875 
        tmp_3 = ((struct igb_nfc_filter *)__mptr_0);
      }
      else 
           #line 2875 
           tmp_3 = (struct igb_nfc_filter *)0;
      }
    #line 2875 
    rule = tmp_3;
  }
  #line 2883 
  if (rule != (struct igb_nfc_filter *)0 && (int)rule->sw_idx == (int)sw_idx) {
    #line 2884 
    if (input == (struct igb_nfc_filter *)0) 
                                             #line 2885 
                                             err = igb_erase_filter(adapter,rule);
    #line 2887 
    hlist_del(& rule->nfc_node);
    #line 2888 
    kfree((void *)rule);
    #line 2889 
    (adapter->nfc_filter_count) --;
  }
  #line 2895 
  if (input == (struct igb_nfc_filter *)0) 
                                           #line 2896 
                                           return err;
  #line 2899 
  INIT_HLIST_NODE(& input->nfc_node);
  #line 2902 
  if (parent != (struct igb_nfc_filter *)0) 
                                            #line 2903 
                                            hlist_add_behind(& input->nfc_node,& parent->nfc_node); else 
                                                                    #line 2905 
                                                                    hlist_add_head(& input->nfc_node,& adapter->nfc_filter_list);
  #line 2908 
  (adapter->nfc_filter_count) ++;
  #line 2910 
  return 0;
}

#line 2913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_add_ethtool_nfc_entry(struct igb_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  #line 2980 
  void *__mptr;
  #line 2980 
  struct igb_nfc_filter *tmp_3;
  #line 2919 
  struct igb_nfc_filter *input;
  #line 2919 
  struct igb_nfc_filter *rule;
  #line 2916 
  struct net_device *netdev = adapter->netdev;
  #line 2917 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  #line 2920 
  int err = 0;
  #line 2922 
  if ((netdev->hw_features & 137438953472ULL) == 0ULL) 
                                                       #line 2923 
                                                       return -95;
  #line 2928 
  if (fsp->ring_cookie == 18446744073709551615ULL || fsp->ring_cookie >= (unsigned long long)adapter->num_rx_queues) {
    #line 2930 
    _dev_err(& (adapter->pdev)->dev,(char *)"ethtool -N: The specified action is invalid\n");
    #line 2931 
    return -22;
  }
  #line 2935 
  if (fsp->location > 15U) {
    #line 2936 
    _dev_err(& (adapter->pdev)->dev,(char *)"Location out of range\n");
    #line 2937 
    return -22;
  }
  #line 2940 
  if ((fsp->flow_type & 2147483647U) != 18U) 
                                             #line 2941 
                                             return -22;
  #line 2943 
  input = (struct igb_nfc_filter *)kzalloc(56UL,3264U);
  #line 2944 
  if (input == (struct igb_nfc_filter *)0) 
                                           #line 2945 
                                           return -12;
  #line 2947 
  if ((unsigned int)fsp->m_u.ether_spec.h_proto == 65535U) {
    #line 2948 
    input->filter.etype = fsp->h_u.ether_spec.h_proto;
    #line 2949 
    input->filter.match_flags = (unsigned char)1U;
  }
  #line 2953 
  if ((int)is_broadcast_ether_addr((u8 *)(& fsp->m_u.ether_spec.h_source)) != 0) {
    #line 2954 
    input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 4U);
    #line 2955 
    ether_addr_copy((u8 *)(& input->filter.src_addr),(u8 *)(& fsp->h_u.ether_spec.h_source));
  }
  #line 2960 
  if ((int)is_broadcast_ether_addr((u8 *)(& fsp->m_u.ether_spec.h_dest)) != 0) {
    #line 2961 
    input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 8U);
    #line 2962 
    ether_addr_copy((u8 *)(& input->filter.dst_addr),(u8 *)(& fsp->h_u.ether_spec.h_dest));
  }
  #line 2966 
  if ((fsp->flow_type & 2147483648U) != 0U && (unsigned int)fsp->m_ext.vlan_tci != 0U) {
    #line 2967 
    if ((unsigned int)fsp->m_ext.vlan_tci != 224U) {
      #line 2968 
      err = -22;
      #line 2969 
      goto err_out;
    }
    #line 2971 
    input->filter.vlan_tci = fsp->h_ext.vlan_tci;
    #line 2972 
    input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 2U);
  }
  #line 2975 
  input->action = (unsigned short)fsp->ring_cookie;
  #line 2976 
  input->sw_idx = (unsigned short)fsp->location;
  #line 2978 
  cif_spin_lock_nfc_lock_of_igb_adapter(& adapter->nfc_lock);
  {
    #line 2980 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 2980 
    if (____ptr != (struct hlist_node *)0) {
      #line 2980 
      __mptr = (void *)____ptr;
      #line 2980 
      tmp_3 = ((struct igb_nfc_filter *)__mptr);
    }
    else 
         #line 2980 
         tmp_3 = (struct igb_nfc_filter *)0;
    }
  #line 2980 
  rule = tmp_3;
  #line 2980 
  while (rule != (struct igb_nfc_filter *)0) {
    #line 2980 
    void *__mptr_0;
    #line 2980 
    struct igb_nfc_filter *tmp_6;
    #line 2981 
    if (memcmp((void *)(& input->filter),(void *)(& rule->filter),18UL) == 0) {
      #line 2983 
      err = -17;
      #line 2984 
      _dev_err(& (adapter->pdev)->dev,(char *)"ethtool: this filter is already set\n");
      #line 2986 
      goto err_out_w_lock;
    }
    {
      #line 2980 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 2980 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 2980 
        __mptr_0 = (void *)____ptr_0;
        #line 2980 
        tmp_6 = ((struct igb_nfc_filter *)__mptr_0);
      }
      else 
           #line 2980 
           tmp_6 = (struct igb_nfc_filter *)0;
      }
    #line 2980 
    rule = tmp_6;
  }
  #line 2990 
  err = igb_add_filter(adapter,input);
  #line 2991 
  if (err != 0) 
                #line 2992 
                goto err_out_w_lock;
  #line 2994 
  igb_update_ethtool_nfc_entry(adapter,input,(unsigned short)((int)input->sw_idx));
  #line 2996 
  cif_spin_unlock_nfc_lock_of_igb_adapter(& adapter->nfc_lock);
  #line 2997 
  return 0;
  #line 2999 
  err_out_w_lock: 
                  #line 2999 
  ;
  #line 3000 
  cif_spin_unlock_nfc_lock_of_igb_adapter(& adapter->nfc_lock);
  #line 3001 
  err_out: 
           #line 3001 
  ;
  #line 3002 
  kfree((void *)input);
  #line 3003 
  return err;
}

#line 3006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_del_ethtool_nfc_entry(struct igb_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  #line 3011 
  int err;
  #line 3009 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  #line 3013 
  cif_spin_lock_nfc_lock_of_igb_adapter(& adapter->nfc_lock);
  #line 3014 
  err = igb_update_ethtool_nfc_entry(adapter,(struct igb_nfc_filter *)0,(unsigned short)((int)((unsigned short)fsp->location)));
  #line 3015 
  cif_spin_unlock_nfc_lock_of_igb_adapter(& adapter->nfc_lock);
  #line 3017 
  return err;
}

#line 3020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd)
{
  #line 3022 
  struct igb_adapter *adapter = netdev_priv(dev);
  #line 3023 
  int ret = -95;
  #line 3025 
  switch (cmd->cmd) {
    #line 3026 
    case (__u32)42: 
                    #line 3026 
    ;
    #line 3027 
    ret = igb_set_rss_hash_opt(adapter,cmd);
    #line 3028 
    break;
    #line 3029 
    case (__u32)50: 
                    #line 3029 
    ;
    #line 3030 
    ret = igb_add_ethtool_nfc_entry(adapter,cmd);
    #line 3031 
    break;
    #line 3032 
    case (__u32)49: 
                    #line 3032 
    ;
    #line 3033 
    ret = igb_del_ethtool_nfc_entry(adapter,cmd);
    #line 3034 
    default: 
             #line 3034 
    ;
    #line 3035 
    break;
  }
  #line 3038 
  return ret;
}

#line 3041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_eee(struct net_device *netdev, struct ethtool_eee *edata)
{
  #line 3045 
  u32 ret_val;
  #line 3046 
  u16 phy_data;
  #line 3043 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3044 
  struct e1000_hw *hw = & adapter->hw;
  #line 3048 
  if (hw->mac.type <= (unsigned int)e1000_82580 || hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
    #line 3050 
    return -95;
  #line 3052 
  edata->supported = 40U;
  #line 3054 
  if (! hw->dev_spec._82575.eee_disable) 
                                         #line 3055 
                                         edata->advertised = mmd_eee_adv_to_ethtool_adv_t((unsigned short)((int)adapter->eee_advert));
  #line 3059 
  if (hw->mac.type == (unsigned int)e1000_i354) 
                                                #line 3060 
                                                igb_get_eee_status_i354(hw,(bool *)(& edata->eee_active));
  else {
    #line 3062 
    u32 eeer;
    #line 3064 
    eeer = igb_rd32(hw,3632U);
    #line 3067 
    if ((eeer & 536870912U) != 0U) 
                                   #line 3068 
                                   edata->eee_active = 1U;
    #line 3070 
    if ((eeer & 65536U) != 0U) 
                               #line 3071 
                               edata->tx_lpi_enabled = 1U;
  }
  #line 3075 
  switch ((unsigned int)hw->mac.type) {
    #line 3076 
    case (unsigned int)4: 
                          #line 3076 
    ;
    #line 3077 
    ret_val = (unsigned int)igb_read_emi_reg(hw,(unsigned short)1039,& phy_data);
    #line 3079 
    if (ret_val != 0U) 
                       #line 3080 
                       return -61;
    #line 3082 
    edata->lp_advertised = mmd_eee_adv_to_ethtool_adv_t((unsigned short)((int)phy_data));
    #line 3083 
    break;
    #line 3084 
    case (unsigned int)5: 
                          #line 3084 
    ;
    #line 3085 
    case (unsigned int)6: 
                          #line 3085 
    ;
    #line 3086 
    case (unsigned int)7: 
                          #line 3086 
    ;
    #line 3087 
    ret_val = (unsigned int)igb_read_xmdio_reg(hw,(unsigned short)61,(unsigned char)7,& phy_data);
    #line 3090 
    if (ret_val != 0U) 
                       #line 3091 
                       return -61;
    #line 3093 
    edata->lp_advertised = mmd_eee_adv_to_ethtool_adv_t((unsigned short)((int)phy_data));
    #line 3095 
    break;
    #line 3096 
    default: 
             #line 3096 
    ;
    #line 3097 
    break;
  }
  #line 3100 
  edata->eee_enabled = (unsigned int)(! hw->dev_spec._82575.eee_disable);
  #line 3102 
  if (hw->mac.type == (unsigned int)e1000_i354 && edata->eee_enabled != 0U) 
    #line 3104 
    edata->tx_lpi_enabled = 1U;
  #line 3109 
  if ((unsigned int)adapter->link_duplex == 1U) {
    #line 3110 
    edata->eee_enabled = 0U;
    #line 3111 
    edata->eee_active = 0U;
    #line 3112 
    edata->tx_lpi_enabled = 0U;
    #line 3113 
    edata->advertised = 0U;
  }
  #line 3116 
  return 0;
}

#line 3119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_eee(struct net_device *netdev, struct ethtool_eee *edata)
{
  #line 3124 
  struct ethtool_eee eee_curr;
  #line 3126 
  s32 ret_val;
  #line 3122 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3123 
  struct e1000_hw *hw = & adapter->hw;
  #line 3125 
  bool adv1g_eee = (_Bool)1;
  #line 3125 
  bool adv100m_eee = (_Bool)1;
  #line 3128 
  if (hw->mac.type <= (unsigned int)e1000_82580 || hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
    #line 3130 
    return -95;
  #line 3132 
  memset((void *)(& eee_curr),0,40UL);
  #line 3134 
  ret_val = igb_get_eee(netdev,& eee_curr);
  #line 3135 
  if (ret_val != 0) 
                    #line 3136 
                    return ret_val;
  #line 3138 
  if (eee_curr.eee_enabled != 0U) {
    #line 3139 
    if (eee_curr.tx_lpi_enabled != edata->tx_lpi_enabled) {
      #line 3140 
      _dev_err(& (adapter->pdev)->dev,(char *)"Setting EEE tx-lpi is not supported\n");
      #line 3142 
      return -22;
    }
    #line 3146 
    if (edata->tx_lpi_timer != 0U) {
      #line 3147 
      _dev_err(& (adapter->pdev)->dev,(char *)"Setting EEE Tx LPI timer is not supported\n");
      #line 3149 
      return -22;
    }
    #line 3152 
    if (edata->advertised == 0U || (edata->advertised & 4294967255U) != 0U) {
      #line 3154 
      _dev_err(& (adapter->pdev)->dev,(char *)"EEE Advertisement supports only 100Tx and/or 100T full duplex\n");
      #line 3156 
      return -22;
    }
    #line 3158 
    adv100m_eee = (_Bool)((edata->advertised & 8U) != 0U);
    #line 3159 
    adv1g_eee = (_Bool)((edata->advertised & 32U) != 0U);
  }
  else 
    #line 3161 
    if (edata->eee_enabled == 0U) {
      #line 3162 
      _dev_err(& (adapter->pdev)->dev,(char *)"Setting EEE options are not supported with EEE disabled\n");
      #line 3164 
      return -22;
    }
  #line 3167 
  adapter->eee_advert = ethtool_adv_to_mmd_eee_adv_t(edata->advertised);
  #line 3168 
  if ((int)hw->dev_spec._82575.eee_disable != (edata->eee_enabled == 0U)) {
    #line 3169 
    hw->dev_spec._82575.eee_disable = (_Bool)(edata->eee_enabled == 0U);
    #line 3170 
    adapter->flags |= 16384U;
    #line 3173 
    if ((int)netif_running(netdev) != 0) 
                                         #line 3174 
                                         igb_reinit_locked(adapter); else 
                                                                    #line 3176 
                                                                    igb_reset(adapter);
  }
  #line 3179 
  if (hw->mac.type == (unsigned int)e1000_i354) 
                                                #line 3180 
                                                ret_val = igb_set_eee_i354(hw,(_Bool)((bool)((int)adv1g_eee) != 0),(_Bool)((bool)((int)adv100m_eee) != 0)); else 
                                                                    #line 3182 
                                                                    ret_val = igb_set_eee_i350(hw,(_Bool)((bool)((int)adv1g_eee) != 0),(_Bool)((bool)((int)adv100m_eee) != 0));
  #line 3184 
  if (ret_val != 0) {
    #line 3185 
    _dev_err(& (adapter->pdev)->dev,(char *)"Problem setting EEE advertisement options\n");
    #line 3187 
    return -22;
  }
  #line 3190 
  return 0;
}

#line 3193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_module_info(struct net_device *netdev, struct ethtool_modinfo *modinfo)
{
  #line 3199 
  u16 sff8472_rev;
  #line 3199 
  u16 addr_mode;
  #line 3196 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3197 
  struct e1000_hw *hw = & adapter->hw;
  #line 3198 
  u32 status = 0U;
  #line 3200 
  bool page_swap = (_Bool)0;
  #line 3202 
  if (hw->phy.media_type <= (unsigned int)e1000_media_type_copper) 
                                                                   #line 3204 
                                                                   return -95;
  #line 3207 
  status = (unsigned int)igb_read_phy_reg_i2c(hw,94U,& sff8472_rev);
  #line 3208 
  if (status != 0U) 
                    #line 3209 
                    return -5;
  #line 3212 
  status = (unsigned int)igb_read_phy_reg_i2c(hw,92U,& addr_mode);
  #line 3213 
  if (status != 0U) 
                    #line 3214 
                    return -5;
  #line 3217 
  if (((int)addr_mode & 4) != 0) {
    {
      #line 3218 
      bool branch;
      #line 3218 
      struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"igb", .function = (char *)"igb_get_module_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c", .format = (char *)"Address change required to access page 0xA2, but not supported. Please report the module type to the driver maintainers.\n", .lineno = (unsigned int)3218U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3218 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
      #line 3218 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 3218 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,igb_get_hw_dev(hw),(char *)"Address change required to access page 0xA2, but not supported. Please report the module type to the driver maintainers.\n");
      }
    }
    #line 3219 
    page_swap = (_Bool)1;
  }
  #line 3222 
  if (((int)sff8472_rev & 255) == 0 || (int)page_swap != 0) {
    #line 3224 
    modinfo->type = 1U;
    #line 3225 
    modinfo->eeprom_len = 256U;
  }
  else {
    #line 3228 
    modinfo->type = 2U;
    #line 3229 
    modinfo->eeprom_len = 512U;
  }
  #line 3232 
  return 0;
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_module_eeprom(struct net_device *netdev, struct ethtool_eeprom *ee, u8 *data)
{
  #line 3241 
  u16 *dataword;
  #line 3242 
  u16 first_word;
  #line 3242 
  u16 last_word;
  #line 3238 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3239 
  struct e1000_hw *hw = & adapter->hw;
  #line 3240 
  u32 status = 0U;
  #line 3243 
  int i = 0;
  #line 3245 
  if (ee->len == 0U) 
                     #line 3246 
                     return -22;
  #line 3248 
  first_word = (unsigned short)(ee->offset >> 1);
  #line 3249 
  last_word = (unsigned short)(((ee->offset + ee->len) + 4294967295U) >> 1);
  #line 3251 
  dataword = (u16 *)kmalloc_array((unsigned long)(((int)last_word - (int)first_word) + 1),2UL,3264U);
  #line 3253 
  if (dataword == (u16 *)0U) 
                             #line 3254 
                             return -12;
  #line 3257 
  i = 0;
  #line 3257 
  while ((int)last_word - (int)first_word >= i) {
    {
      #line 3258 
      status = (unsigned int)igb_read_phy_reg_i2c(hw,(unsigned int)(((int)first_word + i) * 2),
                             dataword + (unsigned long)i);
      #line 3260 
      if (status != 0U) {
        #line 3262 
        kfree((void *)dataword);
        #line 3263 
        return -5;
      }
      #line 3266 
      __swab16s(dataword + (unsigned long)i);
    }
    #line 3257 
    i ++;
  }
  #line 3269 
  memcpy((void *)data,(void *)((u8 *)dataword + ((unsigned long)ee->offset & (unsigned long)1U)),(unsigned long)ee->len);
  #line 3270 
  kfree((void *)dataword);
  #line 3272 
  return 0;
}

#line 3275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_ethtool_begin(struct net_device *netdev)
{
  #line 3277 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3278 
  pm_runtime_get_sync(& (adapter->pdev)->dev);
  #line 3279 
  return 0;
}

#line 3282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_ethtool_complete(struct net_device *netdev)
{
  #line 3284 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3285 
  pm_runtime_put(& (adapter->pdev)->dev);
  #line 3286 
  return;
}

#line 3288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static u32 igb_get_rxfh_indir_size(struct net_device *netdev)
{
  #line 3290 
  return 128U;
}

#line 3293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 3297 
  int i;
  #line 3296 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3299 
  if (hfunc != (u8 *)0U) 
                         #line 3300 
                         *hfunc = (unsigned char)1U;
  #line 3301 
  if (indir == (u32 *)0U) 
                          #line 3302 
                          return 0;
  #line 3303 
  i = 0;
  #line 3303 
  while (i <= 127) {
    #line 3304 
    *(indir + (unsigned long)i) = (unsigned int)adapter->rss_indir_tbl[i];
    #line 3303 
    i ++;
  }
  #line 3306 
  return 0;
}

#line 3309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
void igb_write_rss_indir_tbl(struct igb_adapter *adapter)
{
  #line 3311 
  struct e1000_hw *hw = & adapter->hw;
  #line 3312 
  u32 reg = 23552U;
  #line 3313 
  u32 shift = 0U;
  #line 3314 
  int i = 0;
  #line 3316 
  switch ((unsigned int)hw->mac.type) {
    #line 3317 
    case (unsigned int)1: 
                          #line 3317 
    ;
    #line 3318 
    shift = 6U;
    #line 3319 
    break;
    #line 3320 
    case (unsigned int)2: 
                          #line 3320 
    ;
    #line 3322 
    if (adapter->vfs_allocated_count != 0U) 
                                            #line 3323 
                                            shift = 3U;
    #line 3324 
    break;
    #line 3325 
    default: 
             #line 3325 
    ;
    #line 3326 
    break;
  }
  #line 3329 
  while (i <= 127) {
    #line 3331 
    int j;
    #line 3330 
    u32 val = 0U;
    #line 3333 
    j = 3;
    #line 3333 
    while (j >= 0) {
      #line 3334 
      val <<= 8;
      #line 3335 
      val = (unsigned int)adapter->rss_indir_tbl[i + j] | val;
      #line 3333 
      j --;
    }
    {
      #line 3339 
      union __anonunion___u_2239 __u;
      #line 3338 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 3338 
      u8 *hw_addr = (__u.__val);
      #line 3338 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 3338 
                                             writel(val << shift,(void *)(hw_addr + (unsigned long)reg));
    }
    #line 3339 
    reg += 4U;
    #line 3340 
    i += 4;
  }
  #line 3342 
  return;
}

#line 3344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 3349 
  int i;
  #line 3350 
  u32 num_queues;
  #line 3347 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3348 
  struct e1000_hw *hw = & adapter->hw;
  #line 3353 
  if (key != (u8 *)0U || (unsigned int)hfunc > 1U) 
                                                   #line 3355 
                                                   return -95;
  #line 3356 
  if (indir == (u32 *)0U) 
                          #line 3357 
                          return 0;
  #line 3359 
  num_queues = adapter->rss_queues;
  #line 3361 
  switch ((unsigned int)hw->mac.type) {
    #line 3362 
    case (unsigned int)2: 
                          #line 3362 
    ;
    #line 3364 
    if (adapter->vfs_allocated_count != 0U) 
                                            #line 3365 
                                            num_queues = 2U;
    #line 3366 
    break;
    #line 3367 
    default: 
             #line 3367 
    ;
    #line 3368 
    break;
  }
  #line 3372 
  i = 0;
  #line 3372 
  while (i <= 127) {
    #line 3373 
    if (*(indir + (unsigned long)i) >= num_queues) 
                                                   #line 3374 
                                                   return -22;
    #line 3372 
    i ++;
  }
  #line 3377 
  i = 0;
  #line 3377 
  while (i <= 127) {
    #line 3378 
    adapter->rss_indir_tbl[i] = (unsigned char)*(indir + (unsigned long)i);
    #line 3377 
    i ++;
  }
  #line 3380 
  igb_write_rss_indir_tbl(adapter);
  #line 3382 
  return 0;
}

#line 3385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static unsigned int igb_max_channels(struct igb_adapter *adapter)
{
  #line 3387 
  return igb_get_max_rss_queues(adapter);
}

#line 3390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 3393 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3396 
  ch->max_combined = igb_max_channels(adapter);
  #line 3399 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 3400 
    ch->max_other = 1U;
    #line 3401 
    ch->other_count = 1U;
  }
  #line 3404 
  ch->combined_count = adapter->rss_queues;
  #line 3405 
  return;
}

#line 3407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 3410 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3411 
  unsigned int count = ch->combined_count;
  #line 3412 
  unsigned int max_combined = 0U;
  #line 3415 
  if ((count == 0U || ch->rx_count != 0U) || ch->tx_count != 0U) 
                                                                 #line 3416 
                                                                 return -22;
  #line 3419 
  if (ch->other_count != 1U) 
                             #line 3420 
                             return -22;
  #line 3423 
  max_combined = igb_max_channels(adapter);
  #line 3424 
  if (count > max_combined) 
                            #line 3425 
                            return -22;
  #line 3427 
  if (adapter->rss_queues != count) {
    #line 3428 
    adapter->rss_queues = count;
    #line 3429 
    igb_set_flag_queue_pairs(adapter,max_combined);
    #line 3434 
    return igb_reinit_queues(adapter);
  }
  #line 3437 
  return 0;
}

#line 3440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static u32 igb_get_priv_flags(struct net_device *netdev)
{
  #line 3442 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3443 
  u32 priv_flags = 0U;
  #line 3445 
  if (((unsigned long)adapter->flags & 65536UL) != 0UL) 
                                                        #line 3446 
                                                        priv_flags |= 1U;
  #line 3448 
  return priv_flags;
}

#line 3451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_priv_flags(struct net_device *netdev, u32 priv_flags)
{
  #line 3453 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3454 
  unsigned int flags = adapter->flags;
  #line 3456 
  flags &= 4294901759U;
  #line 3457 
  if (((unsigned long)priv_flags & 1UL) != 0UL) 
                                                #line 3458 
                                                flags |= 65536U;
  #line 3460 
  if (adapter->flags != flags) {
    #line 3461 
    adapter->flags = flags;
    #line 3464 
    if ((int)netif_running(netdev) != 0) 
                                         #line 3465 
                                         igb_reinit_locked(adapter);
  }
  #line 3468 
  return 0;
}

#line 3471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct ethtool_ops igb_ethtool_ops = {.get_drvinfo = & igb_get_drvinfo, .get_regs_len = & igb_get_regs_len, .get_regs = & igb_get_regs, .get_wol = & igb_get_wol, .set_wol = & igb_set_wol, .get_msglevel = & igb_get_msglevel, .set_msglevel = & igb_set_msglevel, .nway_reset = & igb_nway_reset, .get_link = & igb_get_link, .get_eeprom_len = & igb_get_eeprom_len, .get_eeprom = & igb_get_eeprom, .set_eeprom = & igb_set_eeprom, .get_coalesce = & igb_get_coalesce, .set_coalesce = & igb_set_coalesce, .get_ringparam = & igb_get_ringparam, .set_ringparam = & igb_set_ringparam, .get_pauseparam = & igb_get_pauseparam, .set_pauseparam = & igb_set_pauseparam, .self_test = & igb_diag_test, .get_strings = & igb_get_strings, .set_phys_id = & igb_set_phys_id, .get_ethtool_stats = & igb_get_ethtool_stats, .begin = & igb_ethtool_begin, .complete = & igb_ethtool_complete, .get_priv_flags = & igb_get_priv_flags, .set_priv_flags = & igb_set_priv_flags, .get_sset_count = & igb_get_sset_count, .get_rxnfc = & igb_get_rxnfc, .set_rxnfc = & igb_set_rxnfc, .get_rxfh_indir_size = & igb_get_rxfh_indir_size, .get_rxfh = & igb_get_rxfh, .set_rxfh = & igb_set_rxfh, .get_channels = & igb_get_channels, .set_channels = & igb_set_channels, .get_ts_info = & igb_get_ts_info, .get_module_info = & igb_get_module_info, .get_module_eeprom = & igb_get_module_eeprom, .get_eee = & igb_get_eee, .set_eee = & igb_set_eee, .get_link_ksettings = & igb_get_link_ksettings, .set_link_ksettings = & igb_set_link_ksettings};
#line 3515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ethtool.c"
void igb_set_ethtool_ops(struct net_device *netdev)
{
  #line 3517 
  netdev->ethtool_ops = & igb_ethtool_ops;
  #line 3518 
  return;
}

#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
#line 96 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 101 
#line 101 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_diag_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 109 
  igb_diag_test(arg0,arg1,arg2);
  #line 110 
  return;
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_ethtool_begin(struct net_device *arg0)
{
  #line 114 
  return igb_ethtool_begin(arg0);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_ethtool_complete(struct net_device *arg0)
{
  #line 119 
  igb_ethtool_complete(arg0);
  #line 120 
  return;
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 124 
  igb_get_channels(arg0,arg1);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 129 
  return igb_get_coalesce(arg0,arg1);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 134 
  igb_get_drvinfo(arg0,arg1);
  #line 135 
  return;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 139 
  return igb_get_eee(arg0,arg1);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 144 
  return igb_get_eeprom(arg0,arg1,arg2);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_eeprom_len(struct net_device *arg0)
{
  #line 149 
  return igb_get_eeprom_len(arg0);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 154 
  igb_get_ethtool_stats(arg0,arg1,arg2);
  #line 155 
  return;
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
unsigned int emg_wrapper_igb_get_link(struct net_device *arg0)
{
  #line 159 
  return igb_get_link(arg0);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 164 
  return igb_get_link_ksettings(arg0,arg1);
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_module_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 169 
  return igb_get_module_eeprom(arg0,arg1,arg2);
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_module_info(struct net_device *arg0, struct ethtool_modinfo *arg1)
{
  #line 174 
  return igb_get_module_info(arg0,arg1);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
unsigned int emg_wrapper_igb_get_msglevel(struct net_device *arg0)
{
  #line 179 
  return igb_get_msglevel(arg0);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 184 
  igb_get_pauseparam(arg0,arg1);
  #line 185 
  return;
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
unsigned int emg_wrapper_igb_get_priv_flags(struct net_device *arg0)
{
  #line 189 
  return igb_get_priv_flags(arg0);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 194 
  igb_get_regs(arg0,arg1,arg2);
  #line 195 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_regs_len(struct net_device *arg0)
{
  #line 199 
  return igb_get_regs_len(arg0);
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 204 
  igb_get_ringparam(arg0,arg1);
  #line 205 
  return;
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 209 
  return igb_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
unsigned int emg_wrapper_igb_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 214 
  return igb_get_rxfh_indir_size(arg0);
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 219 
  return igb_get_rxnfc(arg0,arg1,arg2);
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 224 
  return igb_get_sset_count(arg0,arg1);
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 229 
  igb_get_strings(arg0,arg1,arg2);
  #line 230 
  return;
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 234 
  return igb_get_ts_info(arg0,arg1);
}

#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 239 
  igb_get_wol(arg0,arg1);
  #line 240 
  return;
}

#line 243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_nway_reset(struct net_device *arg0)
{
  #line 244 
  return igb_nway_reset(arg0);
}

#line 248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 249 
  return igb_set_channels(arg0,arg1);
}

#line 253  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 254 
  return igb_set_coalesce(arg0,arg1);
}

#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 259 
  return igb_set_eee(arg0,arg1);
}

#line 263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 264 
  return igb_set_eeprom(arg0,arg1,arg2);
}

#line 268  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 269 
  return igb_set_link_ksettings(arg0,arg1);
}

#line 273  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
void emg_wrapper_igb_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 274 
  igb_set_msglevel(arg0,arg1);
  #line 275 
  return;
}

#line 278  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 279 
  return igb_set_pauseparam(arg0,arg1);
}

#line 283  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 284 
  return igb_set_phys_id(arg0,arg1);
}

#line 288  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_priv_flags(struct net_device *arg0, unsigned int arg1)
{
  #line 289 
  return igb_set_priv_flags(arg0,arg1);
}

#line 293  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 294 
  return igb_set_ringparam(arg0,arg1);
}

#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 299 
  return igb_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 304 
  return igb_set_rxnfc(arg0,arg1);
}

#line 308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
int emg_wrapper_igb_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 309 
  return igb_set_wol(arg0,arg1);
}

#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
enum irqreturn emg_wrapper_igb_test_intr(int arg0, void *arg1)
{
  #line 314 
  return igb_test_intr(arg0,arg1);
}

#line 333  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 336 
  ldv_set_bit(nr,addr);
  #line 337 
  return;
}

#line 340  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 343 
  ldv_clear_bit(nr,addr);
  #line 344 
  return;
}

#line 535  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 538 
  return ldv_kmalloc(size,flags);
}

#line 542  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 545 
  return ldv_kmalloc_array(n,size,flags);
}

#line 570  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 573 
  return ldv_kzalloc(size,flags);
}

#line 870  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *cif_vmalloc(unsigned long size)
{
  #line 873 
  return ldv_vmalloc(size);
}

#line 877  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_vfree(void *addr)
{
  #line 880 
  ldv_vfree(addr);
  #line 881 
  return;
}

#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 888 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 892  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 896 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 900  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_spin_lock_stats64_lock_of_igb_adapter(spinlock_t *lock)
{
  #line 903 
  ldv_spin_model_lock((char *)"stats64_lock_of_igb_adapter");
  #line 905 
  spin_lock(lock);
  #line 906 
  return;
}

#line 909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_spin_unlock_stats64_lock_of_igb_adapter(spinlock_t *lock)
{
  #line 912 
  ldv_spin_model_unlock((char *)"stats64_lock_of_igb_adapter");
  #line 914 
  spin_unlock(lock);
  #line 915 
  return;
}

#line 918  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_spin_lock_nfc_lock_of_igb_adapter(spinlock_t *lock)
{
  #line 921 
  ldv_spin_model_lock((char *)"nfc_lock_of_igb_adapter");
  #line 923 
  spin_lock(lock);
  #line 924 
  return;
}

#line 927  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ethtool.i.aux"
static void cif_spin_unlock_nfc_lock_of_igb_adapter(spinlock_t *lock)
{
  #line 930 
  ldv_spin_model_unlock((char *)"nfc_lock_of_igb_adapter");
  #line 932 
  spin_unlock(lock);
  #line 933 
  return;
}

/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 4  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
#line 4 
void ldv_atomic_add(int i, atomic_t *v);
#line 7 
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch_clear_bit(long nr, unsigned long *addr)
{
  #line 74 
  if (0 != 0) 
              #line 76 
              ldv_inline_asm(); else 
                                     #line 79 
                                     ldv_inline_asm();
  #line 80 
  return;
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch_clear_bit_unlock(long nr, unsigned long *addr)
{
  #line 87 
  ldv_inline_asm();
  #line 88 
  arch_clear_bit(nr,addr);
  #line 89 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit_lock(long nr, unsigned long *addr)
{
  #line 144 
  return arch_test_and_set_bit(nr,addr);
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 319  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-lock.h"
__inline static void clear_bit_unlock(long nr, unsigned long *addr)
{
  #line 25 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 26 
  arch_clear_bit_unlock(nr,addr);
  #line 27 
  return;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-lock.h"
__inline static bool test_and_set_bit_lock(long nr, unsigned long *addr)
{
  #line 55 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 56 
  return arch_test_and_set_bit_lock(nr,addr);
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 *p)
{
  #line 58 
  return *p;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 *p)
{
  #line 66 
  return *p;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 570 
extern enum system_states system_state;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 326  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2252 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del_0(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_2260 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del_0(struct hlist_node *n)
{
  #line 769 
  __hlist_del_0(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_head_0(struct hlist_node *n, struct hlist_head *h)
{
  #line 784 
  struct hlist_node *first = h->first;
  #line 785 
  n->next = first;
  #line 786 
  if (first != (struct hlist_node *)0) 
                                       #line 787 
                                       first->pprev = & n->next;
  {
    #line 789 
    union __anonunion___u_2262 __u = {.__val = n};
    #line 788 
    __write_once_size((void *)(& h->first),(void *)(& __u.__c),8);
    #line 788 
    struct hlist_node *tmp = __u.__val;
  }
  #line 789 
  n->pprev = & h->first;
  #line 790 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
#line 69 
void set_normalized_timespec64(struct timespec64 *, time64_t, s64);
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
__inline static struct timespec64 timespec64_add(struct timespec64 lhs, struct timespec64 rhs)
{
  #line 74 
  struct timespec64 ts_delta;
  #line 75 
  set_normalized_timespec64(& ts_delta,lhs.tv_sec + rhs.tv_sec,(long long)(lhs.tv_nsec + rhs.tv_nsec));
  #line 77 
  return ts_delta;
}

#line 144 
#line 144 
struct timespec64 ns_to_timespec64(s64);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2306 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 200 
  bool success;
  {
    #line 200 
    int *_old = old;
    #line 200 
    int __old = *_old;
    #line 200 
    int __new = new;
    #line 200 
    switch (4UL) {
      #line 200 
      case (unsigned long)1: 
                             #line 200 
      ;
      {
        #line 200 
        u8 *__ptr = (u8 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)2: 
                             #line 200 
      ;
      {
        #line 200 
        u16 *__ptr_0 = (u16 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)4: 
                             #line 200 
      ;
      {
        #line 200 
        u32 *__ptr_1 = (u32 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)8: 
                             #line 200 
      ;
      {
        #line 200 
        u64 *__ptr_2 = (u64 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      default: 
               #line 200 
      ;
      #line 200 
      __cmpxchg_wrong_size();
    }
    #line 200 
    if ((long)(! success) != 0L) 
                                 #line 200 
                                 *_old = __old;
    }
  #line 200 
  return (_Bool)((long)((long)((int)success != 0)) != 0L);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 60 
#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void atomic_add(int i, atomic_t *v);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 375  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void atomic_inc(atomic_t *v);
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 693 
  kasan_check_read((void *)v,4U);
  #line 694 
  kasan_check_read((void *)old,4U);
  #line 695 
  return arch_atomic_try_cmpxchg(v,old,new);
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static int atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
  #line 1086 
  int c = atomic_read(v);
  #line 1088 
  while (! ((long)(c == u) != 0L)) {
    #line 1091 
    if (atomic_try_cmpxchg(v,& c,c + a)) 
                                         #line 1088 
                                         break;
  }
  #line 1093 
  return c;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static bool atomic_add_unless(atomic_t *v, int a, int u)
{
  #line 1111 
  ;
  #line 1111 
  return (_Bool)(atomic_fetch_add_unless(v,a,u) != u);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void *x)
{
  #line 836 
  ldv_inline_asm();
  #line 837 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 348 
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 1056  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_lock_stats64_lock_of_igb_adapter_0(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1074  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_lock_nfc_lock_of_igb_adapter_0(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_lock_tmreg_lock_of_igb_adapter(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 1065  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_unlock_stats64_lock_of_igb_adapter_0(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1083  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_unlock_nfc_lock_of_igb_adapter_0(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_unlock_tmreg_lock_of_igb_adapter(spinlock_t *lock);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 36 
void kfree_call_rcu(struct callback_head *, void (*)(struct callback_head *));
#line 56 
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ktime_set(s64 secs, unsigned long nsecs)
{
  #line 39 
  if ((long)(secs > 9223372035LL) != 0L) 
                                         #line 40 
                                         return 9223372036854775807LL;
  #line 42 
  return secs * 1000000000LL + (long long)nsecs;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 1138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 1048  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 209 
unsigned long round_jiffies(unsigned long);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static int PagePoisoned(struct page *page)
{
  #line 194 
  return page->flags == 18446744073709551615UL;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 209 
#line 209 
void iounmap(void *);
#line 216 
#line 216 
void memcpy_fromio(void *, void *, size_t);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 107 
void pci_iounmap(struct pci_dev *, void *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/pci_iomap.h"
#line 13 
void *pci_iomap(struct pci_dev *, int, unsigned long);
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 297 
extern int ( /* missing proto */ __builtin_add_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size(size_t a, size_t b, size_t c)
{
  #line 295 
  size_t __b;
  #line 295 
  size_t *__d;
  #line 297 
  size_t __a_0;
  #line 297 
  size_t __b_0;
  #line 297 
  size_t *__d_0;
  #line 295 
  size_t __a;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 1124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void *cif_vmalloc_0(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 1131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_vfree_0(void *addr);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret__;
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    int pfo_ret___2;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 572 
#line 572 
void __page_frag_cache_drain(struct page *, unsigned int);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_add(struct page *page, int nr)
{
  #line 93 
  atomic_add(nr,& page->_refcount);
  #line 94 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 95 
                                                                   __page_ref_mod(page,nr);
  #line 96 
  return;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int page_to_nid(struct page *page)
{
  #line 1085 
  struct page *p = page;
  {
    #line 1087 
    if ((long)(PagePoisoned(p) != 0) != 0L) {
      #line 1087 
      dump_page(p,(char *)"VM_BUG_ON_PAGE(");
      #line 1088 
      ldv_inline_asm();
      #line 1089 
      ldv_inline_asm();
      #line 1090 
      ldv_inline_asm();
      #line 1087 
      ;
    }
  }
  #line 1087 
  ;
  #line 1087 
  return (int)(p->flags >> 54UL) & 1023;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_44.__anonCompField___anonunion_186_32.index == 18446744073709551615UL);
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_2694 __u;
  #line 93 
  union __anonunion___u_2696 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 192 
size_t ksize(void *);
#line 607 
#line 591  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 612  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 130 
#line 130 
__wsum csum_partial(void *, int, __wsum);
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static unsigned int add32_with_carry(unsigned int a, unsigned int b)
{
  #line 185 
  ldv_inline_asm();
  #line 189 
  return a;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_add(__wsum csum, __wsum addend)
{
  #line 195 
  return add32_with_carry(csum,addend);
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __wsum csum_unfold(__sum16 n)
{
  #line 109 
  return (unsigned int)n;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static void csum_replace_by_diff(__sum16 *sum, __wsum diff)
{
  #line 121 
  ;
  #line 121 
  *sum = csum_fold(csum_add(diff,~ csum_unfold((unsigned short)((int)*sum))));
  #line 122 
  return;
}

#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 441 
int driver_for_each_device(struct device_driver *, struct device *, void *, int (*)(struct device *, void *));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  #line 79 
  return (_Bool)((int)dev->power.can_wakeup != 0);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_pm_set_driver_flags(struct device *dev, u32 flags)
{
  #line 1483 
  dev->power.driver_flags = flags;
  #line 1484 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_cpu(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 602 
  dma_sync_single_for_cpu(dev,addr + (unsigned long long)offset,size,dir);
  #line 603 
  return;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_device(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 609 
  dma_sync_single_for_device(dev,addr + (unsigned long long)offset,size,dir);
  #line 610 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
__inline static bool dissector_uses_key(struct flow_dissector *flow_dissector, enum flow_dissector_key_id key_id)
{
  #line 335 
  return (_Bool)((flow_dissector->used_keys & (unsigned int)(1 << (unsigned int)key_id)) != 0U);
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1035 
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2256 
  skb->len -= len;
  #line 2257 
  if ((long)(skb->len < skb->data_len) != 0L) {
    #line 2258 
    ldv_inline_asm();
    #line 2259 
    ldv_inline_asm();
    #line 2260 
    ldv_inline_asm();
    #line 2257 
    ;
  }
  #line 2258 
  skb->data += (unsigned long)len;
  #line 2258 
  return (void *)skb->data;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_checksum_start_offset(struct sk_buff *skb)
{
  #line 2551 
  ;
  #line 2551 
  return (int)((unsigned int)skb->__anonCompField_sk_buff_94.__anonCompField___anonunion_526_93.csum_start - skb_headroom(skb));
}

#line 2554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_checksum_start(struct sk_buff *skb)
{
  #line 2556 
  return skb->head + (unsigned long)skb->__anonCompField_sk_buff_94.__anonCompField___anonunion_526_93.csum_start;
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  #line 2801 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  #line 2805 
  return skb;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  #line 2811 
  return __netdev_alloc_skb_ip_align(dev,length,2592U);
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  #line 2825 
  return __napi_alloc_skb(napi,length,2592U);
}

#line 2827 
#line 2827 
void napi_consume_skb(struct sk_buff *, int);
#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 2852 
  gfp_mask |= 393216U;
  #line 2854 
  return alloc_pages_node(-1,gfp_mask,order);
}

#line 2857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *dev_alloc_pages(unsigned int order)
{
  #line 2859 
  return __dev_alloc_pages(10784U,order);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1032  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1040  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_0(0L,& n->state);
  #line 517 
  cif_clear_bit_0(3L,& n->state);
  #line 518 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct *n)
{
  #line 531 
  while (1) {
    #line 531 
    if (! ((int)test_bit(0L,& n->state) != 0)) 
                                               #line 531 
                                               break;
    #line 532 
    msleep(1U);
  }
  #line 536 
  return;
}

#line 2115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_get_num_tc(struct net_device *dev)
{
  #line 2117 
  return (int)dev->num_tc;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2679 
#line 1108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_0(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_0(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit_0(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit_0(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue_0(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit_0(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3660 
#line 3660 
int netif_rx(struct sk_buff *);
#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3808 
#line 3808 
unsigned long dev_trans_start(struct net_device *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_device_present(struct net_device *dev)
{
  #line 3878 
  return test_bit(1L,& dev->state);
}

#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 4131 
#line 1100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4137 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4152 
#line 4152 
void __hw_addr_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *));
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __dev_uc_unsync(struct net_device *dev, int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4206 
  __hw_addr_unsync_dev(& dev->uc,dev,unsync);
  #line 4207 
  return;
}

#line 4371 
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4373 
#line 4373 
int skb_checksum_help(struct sk_buff *);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 28 
int eth_platform_get_mac_address(struct device *, u8 *);
#line 31 
#line 31 
u32 eth_get_headlen(struct net_device *, void *, unsigned int);
#line 32 
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1092  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
static u8 eth_reserved_addr_base[6U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_link_local_ether_addr(u8 *addr)
{
  #line 78 
  __be16 *a = (__be16 *)addr;
  #line 79 
  __be16 *b = (__be16 *)(& eth_reserved_addr_base);
  #line 80 
  __be16 m = (unsigned short)61695U;
  #line 84 
  return (_Bool)(((*((u32 *)addr) ^ *((u32 *)b)) | ((unsigned int)((int)*(a + 2U) ^ (int)*(b + 2U)) & 61695U)) == 0U);
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_unicast_ether_addr(u8 *addr)
{
  #line 177 
  int tmp_0;
  #line 177 
  if ((int)is_multicast_ether_addr(addr) != 0) 
                                               #line 177 
                                               tmp_0 = 0; else 
                                                               #line 177 
                                                               tmp_0 = 1;
  #line 177 
  return (_Bool)(tmp_0 != 0);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  #line 532 
  return skb_put_padto(skb,60U);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 118 
#line 118 
int ndo_dflt_fdb_add(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16, u16);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
#line 75 
void flow_rule_match_basic(struct flow_rule *, struct flow_match_basic *);
#line 79 
#line 79 
void flow_rule_match_eth_addrs(struct flow_rule *, struct flow_match_eth_addrs *);
#line 81 
#line 81 
void flow_rule_match_vlan(struct flow_rule *, struct flow_match_vlan *);
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
__inline static bool flow_rule_match_key(struct flow_rule *rule, enum flow_dissector_key_id key)
{
  #line 253 
  return dissector_uses_key(rule->match.dissector,key);
}

#line 340 
#line 340 
int flow_block_cb_setup_simple(struct flow_block_offload *, struct list_head *, flow_setup_cb_t *, void *, void *, bool);
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
__inline static struct flow_rule *flow_cls_offload_flow_rule(struct flow_cls_offload *flow_cmd)
{
  #line 372 
  return flow_cmd->rule;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
__inline static int tc_classid_to_hwtc(struct net_device *dev, u32 classid)
{
  #line 619 
  int tmp_0;
  #line 617 
  u32 hwtc = (classid & 65535U) + 4294901792U;
  #line 619 
  ;
  #line 619 
  if ((unsigned int)netdev_get_num_tc(dev) > hwtc) 
                                                   #line 619 
                                                   tmp_0 = (int)hwtc; else 
                                                                    #line 619 
                                                                    tmp_0 = -22;
  #line 619 
  return tmp_0;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
#line 1069 
int ipv6_find_hdr(struct sk_buff *, unsigned int *, int, unsigned short *, int *);
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tc_can_offload(struct net_device *dev)
{
  #line 567 
  return (_Bool)((dev->features & 281474976710656ULL) != 0ULL);
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tc_can_offload_extack(struct net_device *dev, struct netlink_ext_ack *extack)
{
  #line 573 
  bool can = tc_can_offload(dev);
  #line 575 
  if (! can) {
    #line 576 
    char __msg[37U] = {(char)'T', (char)'C', (char)' ', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)'i', (char)'s', (char)' ', (char)'d', (char)'i', (char)'s', (char)'a', (char)'b', (char)'l', (char)'e', (char)'d', (char)' ', (char)'o', (char)'n', (char)' ', (char)'n', (char)'e', (char)'t', (char)' ', (char)'d', (char)'e', (char)'v', (char)'i', (char)'c', (char)'e', (char)'\000'};
    #line 576 
    struct netlink_ext_ack *__extack = extack;
    #line 576 
    if (__extack != (struct netlink_ext_ack *)0) 
                                                 #line 576 
                                                 __extack->_msg = (char *)(& __msg);
  }
  #line 578 
  return can;
}

#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tc_cls_can_offload_and_chain0(struct net_device *dev, struct flow_cls_common_offload *common)
{
  #line 585 
  if (! tc_can_offload_extack(dev,common->extack)) 
                                                   #line 586 
                                                   return (_Bool)0;
  #line 587 
  if (common->chain_index != 0U) {
    {
      #line 588 
      char __msg[40U] = {(char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)' ', (char)'s', (char)'u', (char)'p', (char)'p', (char)'o', (char)'r', (char)'t', (char)'s', (char)' ', (char)'o', (char)'n', (char)'l', (char)'y', (char)' ', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)'o', (char)'f', (char)' ', (char)'c', (char)'h', (char)'a', (char)'i', (char)'n', (char)' ', (char)'0', (char)'\000'};
      #line 588 
      struct netlink_ext_ack *__extack = common->extack;
      #line 588 
      if (__extack != (struct netlink_ext_ack *)0) 
                                                   #line 588 
                                                   __extack->_msg = (char *)(& __msg);
    }
    #line 590 
    return (_Bool)0;
  }
  #line 592 
  return (_Bool)1;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  #line 53 
  return (struct mii_ioctl_data *)(& rq->ifr_ifru);
}

#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  #line 490 
  return pdev->error_state != 1U;
}

#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1087 
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1090 
#line 1090 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);
#line 1092 
#line 1092 
int pcie_capability_write_word(struct pci_dev *, int, u16);
#line 1133 
#line 1133 
int pci_enable_device_mem(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1202 
#line 1202 
int pci_select_bars(struct pci_dev *, unsigned long);
#line 1203 
#line 1203 
bool pci_device_is_present(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1237 
#line 1237 
int pci_enable_wake(struct pci_dev *, pci_power_t, bool);
#line 1238 
#line 1238 
int pci_wake_from_d3(struct pci_dev *, bool);
#line 1286 
#line 1286 
int pci_request_selected_regions(struct pci_dev *, int, char *);
#line 1288 
#line 1288 
void pci_release_selected_regions(struct pci_dev *, int);
#line 1346 
#line 1016  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1024  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_request_mem_regions(struct pci_dev *pdev, char *name)
{
  #line 1628 
  ;
  #line 1628 
  ;
  #line 1628 
  return pci_request_selected_regions(pdev,pci_select_bars(pdev,512UL),name);
}

#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_release_mem_regions(struct pci_dev *pdev)
{
  #line 1635 
  ;
  #line 1635 
  pci_release_selected_regions(pdev,pci_select_bars(pdev,512UL));
  #line 1637 
  return;
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2029 
#line 2029 
int pci_enable_sriov(struct pci_dev *, int);
#line 2030 
#line 2030 
void pci_disable_sriov(struct pci_dev *);
#line 2033 
#line 2033 
int pci_num_vf(struct pci_dev *);
#line 2034 
#line 2034 
int pci_vfs_assigned(struct pci_dev *);
#line 2035 
#line 2035 
int pci_sriov_set_totalvfs(struct pci_dev *, u16);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 42 
int pm_schedule_suspend(struct device *, unsigned int);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_get_noresume(struct device *dev)
{
  #line 70 
  atomic_inc(& dev->power.usage_count);
  #line 71 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_put_noidle(struct device *dev)
{
  #line 75 
  atomic_add_unless(& dev->power.usage_count,-1,0);
  #line 76 
  return;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_resume(struct device *dev)
{
  #line 201 
  return __pm_runtime_resume(dev,0);
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put_sync(struct device *dev)
{
  #line 242 
  return __pm_runtime_idle(dev,4);
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dca.h"
#line 13 
void dca_register_notify(struct notifier_block *);
#line 14 
#line 14 
void dca_unregister_notify(struct notifier_block *);
#line 53 
#line 53 
int dca_add_requester(struct device *);
#line 54 
#line 54 
int dca_remove_requester(struct device *);
#line 56 
#line 56 
u8 dca3_get_tag(struct device *, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
#line 143 
s32 i2c_smbus_read_byte_data(struct i2c_client *, u8);
#line 145 
#line 145 
s32 i2c_smbus_write_byte_data(struct i2c_client *, u8, u8);
#line 844 
#line 844 
void i2c_del_adapter(struct i2c_adapter *);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.h"
#line 20 
s32 igb_check_downshift(struct e1000_hw *hw);
#line 41 
#line 41 
void igb_power_up_phy_copper(struct e1000_hw *hw);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.h"
#line 11 
s32 igb_read_part_string(struct e1000_hw *hw, u8 *part_num, u32 part_num_size);
#line 34 
#line 34 
void igb_get_fw_version(struct e1000_hw *hw, struct e1000_fw_version *fw_vers);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
#line 2921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
struct e1000_info e1000_82575_info;
#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
#line 8585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_read_pcie_cap_reg(struct e1000_hw *hw, u32 reg, u16 *value);
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
#line 8595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_write_pcie_cap_reg(struct e1000_hw *hw, u32 reg, u16 *value);
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
#line 8571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_read_pci_cfg(struct e1000_hw *hw, u32 reg, u16 *value);
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_hw.h"
#line 8578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_write_pci_cfg(struct e1000_hw *hw, u32 reg, u16 *value);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.h"
#line 21 
s32 igb_disable_pcie_master(struct e1000_hw *hw);
#line 24 
#line 24 
s32 igb_get_bus_info_pcie(struct e1000_hw *hw);
#line 30 
#line 30 
void igb_update_mc_addr_list(struct e1000_hw *hw, u8 *mc_addr_list, u32 mc_addr_count);
#line 33 
#line 33 
s32 igb_validate_mdi_setting(struct e1000_hw *hw);
#line 40 
#line 40 
s32 igb_vfta_set(struct e1000_hw *hw, u32 vlan, u32 vind, bool vlan_on, bool vlvf_bypass);
#line 42 
#line 42 
void igb_config_collision_dist(struct e1000_hw *hw);
#line 44 
#line 44 
void igb_mta_set(struct e1000_hw *hw, u32 hash_value);
#line 49 
#line 49 
bool igb_enable_mng_pass_thru(struct e1000_hw *hw);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
#line 7 
void igb_shutdown_serdes_link_82575(struct e1000_hw *hw);
#line 8 
#line 8 
void igb_power_up_serdes_link_82575(struct e1000_hw *hw);
#line 9 
#line 9 
void igb_power_down_phy_copper_82575(struct e1000_hw *hw);
#line 10 
#line 10 
void igb_rx_fifo_flush_82575(struct e1000_hw *hw);
#line 11 
#line 9476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_read_i2c_byte(struct e1000_hw *hw, u8 byte_offset, u8 dev_addr, u8 *data);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
#line 9513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_write_i2c_byte(struct e1000_hw *hw, u8 byte_offset, u8 dev_addr, u8 data);
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.h"
#line 247 
void igb_vmdq_set_anti_spoofing_pf(struct e1000_hw *hw, bool enable, int pf);
#line 248 
#line 248 
void igb_vmdq_set_loopback_pf(struct e1000_hw *hw, bool enable);
#line 249 
#line 249 
void igb_vmdq_set_replication_pf(struct e1000_hw *hw, bool enable);
#line 250 
#line 250 
u16 igb_rxpbs_adjust_82580(u32 data);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 204 
void ptp_clock_event(struct ptp_clock *, struct ptp_clock_event *);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c-algo-bit.h"
#line 39 
int i2c_bit_add_bus(struct i2c_adapter *);
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
__inline static unsigned int igb_rx_bufsz(struct igb_ring *ring)
{
  #line 338 
  if ((int)test_bit(0L,& ring->flags) != 0) 
                                            #line 339 
                                            return 3072U;
  #line 341 
  if ((int)test_bit(1L,& ring->flags) != 0) 
                                            #line 342 
                                            return 1664U;
  #line 344 
  return 2048U;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
__inline static unsigned int igb_rx_pg_order(struct igb_ring *ring)
{
  #line 350 
  if ((int)test_bit(0L,& ring->flags) != 0) 
                                            #line 351 
                                            return 1U;
  #line 353 
  return 0U;
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
__inline static __le32 igb_test_staterr(union e1000_adv_rx_desc *rx_desc, u32 stat_err_bits)
{
  #line 371 
  return rx_desc->wb.upper.status_error & stat_err_bits;
}

#line 671 
#line 671 
void igb_ptp_init(struct igb_adapter *adapter);
#line 672 
#line 672 
void igb_ptp_stop(struct igb_adapter *adapter);
#line 673 
#line 673 
void igb_ptp_reset(struct igb_adapter *adapter);
#line 674 
#line 674 
void igb_ptp_suspend(struct igb_adapter *adapter);
#line 675 
#line 675 
void igb_ptp_rx_hang(struct igb_adapter *adapter);
#line 676 
#line 676 
void igb_ptp_tx_hang(struct igb_adapter *adapter);
#line 677 
#line 677 
void igb_ptp_rx_rgtstamp(struct igb_q_vector *q_vector, struct sk_buff *skb);
#line 678 
#line 678 
void igb_ptp_rx_pktstamp(struct igb_q_vector *q_vector, void *va, struct sk_buff *skb);
#line 680 
#line 680 
int igb_ptp_set_ts_config(struct net_device *netdev, struct ifreq *ifr);
#line 681 
#line 681 
int igb_ptp_get_ts_config(struct net_device *netdev, struct ifreq *ifr);
#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
__inline static s32 igb_reset_phy(struct e1000_hw *hw)
{
  #line 690 
  if (hw->phy.ops.reset != (s32 (*)(struct e1000_hw *))0) {
    #line 691 
    return (*(hw->phy.ops.reset))(hw);
  }
  #line 693 
  return 0;
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb.h"
__inline static s32 igb_get_phy_info(struct e1000_hw *hw)
{
  #line 714 
  if (hw->phy.ops.get_phy_info != (s32 (*)(struct e1000_hw *))0) {
    #line 715 
    return (*(hw->phy.ops.get_phy_info))(hw);
  }
  #line 717 
  return 0;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
char igb_driver_name[4U] = {(char)'i', (char)'g', (char)'b'};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
char igb_driver_version[8U] = {(char)'5'};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static char igb_driver_string[41U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'G', (char)'i', (char)'g', (char)'a', (char)'b', (char)'i', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r'};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static char igb_copyright[43U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)' ', (char)'(', (char)'c', (char)')', (char)' ', (char)'2', (char)'0', (char)'0', (char)'7', (char)'-', (char)'2', (char)'0', (char)'1', (char)'4', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.'};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct e1000_info *igb_info_tbl[1U] = {& e1000_82575_info};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct pci_device_id igb_pci_tbl[36U] = {{.vendor = 32902U, .device = 8000U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 8001U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 8005U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5433U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5427U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5430U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5431U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5432U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5499U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5500U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5409U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5410U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5411U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5412U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5390U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5391U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5415U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5392U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5393U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5398U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 1080U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 1082U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 1084U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 1088U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4297U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5386U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5400U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4326U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4327U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5389U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5414U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4328U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4263U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4265U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4310U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
struct pci_device_id __mod_pci__igb_pci_tbl_device_table[36U];
#line 110 
#line 4079 
static int igb_setup_all_tx_resources(struct igb_adapter *adapter);
#line 111 
#line 4229 
static int igb_setup_all_rx_resources(struct igb_adapter *adapter);
#line 112 
#line 4609 
static void igb_free_all_tx_resources(struct igb_adapter *adapter);
#line 113 
#line 4721 
static void igb_free_all_rx_resources(struct igb_adapter *adapter);
#line 114 
#line 4252 
static void igb_setup_mrqc(struct igb_adapter *adapter);
#line 115 
#line 3000 
static int igb_probe(struct pci_dev *pdev, struct pci_device_id *ent);
#line 116 
#line 3626 
static void igb_remove(struct pci_dev *pdev);
#line 117 
#line 3799 
static int igb_sw_init(struct igb_adapter *adapter);
#line 120 
#line 1989 
static void igb_configure(struct igb_adapter *adapter);
#line 121 
#line 4167 
static void igb_configure_tx(struct igb_adapter *adapter);
#line 122 
#line 4562 
static void igb_configure_rx(struct igb_adapter *adapter);
#line 123 
#line 4683 
static void igb_clean_all_tx_rings(struct igb_adapter *adapter);
#line 124 
#line 4777 
static void igb_clean_all_rx_rings(struct igb_adapter *adapter);
#line 125 
#line 4622 
static void igb_clean_tx_ring(struct igb_ring *tx_ring);
#line 126 
#line 4734 
static void igb_clean_rx_ring(struct igb_ring *rx_ring);
#line 127 
#line 4983 
static void igb_set_rx_mode(struct net_device *netdev);
#line 128 
#line 5125 
static void igb_update_phy_info(struct timer_list *t);
#line 129 
#line 5215 
static void igb_watchdog(struct timer_list *t);
#line 130 
#line 5222 
static void igb_watchdog_task(struct work_struct *work);
#line 131 
#line 6169 
static netdev_tx_t igb_xmit_frame(struct sk_buff *skb, struct net_device *netdev);
#line 132 
#line 6218 
static void igb_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats);
#line 134 
#line 6236 
static int igb_change_mtu(struct net_device *netdev, int new_mtu);
#line 135 
#line 4793 
static int igb_set_mac(struct net_device *netdev, void *p);
#line 136 
#line 7589 
static void igb_set_uta(struct igb_adapter *adapter, bool set);
#line 137 
#line 7645 
static irqreturn_t igb_intr(int irq, void *data);
#line 138 
#line 7608 
static irqreturn_t igb_intr_msi(int irq, void *data);
#line 139 
#line 6531 
static irqreturn_t igb_msix_other(int irq, void *data);
#line 140 
#line 6590 
static irqreturn_t igb_msix_ring(int irq, void *data);
#line 142 
#line 6644 
static void igb_update_dca(struct igb_q_vector *q_vector);
#line 143 
#line 6663 
static void igb_setup_dca(struct igb_adapter *adapter);
#line 145 
#line 7712 
static int igb_poll(struct napi_struct *napi, int budget);
#line 146 
#line 7755 
static bool igb_clean_tx_irq(struct igb_q_vector *q_vector, int napi_budget);
#line 147 
#line 8313 
static int igb_clean_rx_irq(struct igb_q_vector *q_vector, int budget);
#line 148 
#line 8555 
static int igb_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd);
#line 149 
#line 6187 
static void igb_tx_timeout(struct net_device *netdev);
#line 150 
#line 6203 
static void igb_reset_task(struct work_struct *work);
#line 151 
#line 8605 
static void igb_vlan_mode(struct net_device *netdev, netdev_features_t features);
#line 153 
#line 8632 
static int igb_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid);
#line 154 
#line 8648 
static int igb_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid);
#line 155 
#line 8664 
static void igb_restore_vlan(struct igb_adapter *adapter);
#line 156 
#line 9093 
static void igb_rar_set_index(struct igb_adapter *adapter, u32 index);
#line 157 
#line 6746 
static void igb_ping_all_vfs(struct igb_adapter *adapter);
#line 158 
#line 7558 
static void igb_msg_task(struct igb_adapter *adapter);
#line 159 
#line 9350 
static void igb_vmm_control(struct igb_adapter *adapter);
#line 160 
#line 9138 
static int igb_set_vf_mac(struct igb_adapter *adapter, int vf, unsigned char *mac_addr);
#line 161 
#line 7145 
static void igb_flush_mac_table(struct igb_adapter *adapter);
#line 162 
#line 7158 
static int igb_available_rars(struct igb_adapter *adapter, u8 queue);
#line 163 
#line 7183 
static void igb_set_default_mac_filter(struct igb_adapter *adapter);
#line 164 
#line 7339 
static int igb_uc_sync(struct net_device *netdev, unsigned char *addr);
#line 165 
#line 7349 
static int igb_uc_unsync(struct net_device *netdev, unsigned char *addr);
#line 166 
#line 6827 
static void igb_restore_vf_multicasts(struct igb_adapter *adapter);
#line 167 
#line 9157 
static int igb_ndo_set_vf_mac(struct net_device *netdev, int vf, u8 *mac);
#line 168 
#line 7045 
static int igb_ndo_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos, __be16 vlan_proto);
#line 170 
#line 9263 
static int igb_ndo_set_vf_bw(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate);
#line 171 
#line 9290 
static int igb_ndo_set_vf_spoofchk(struct net_device *netdev, int vf, bool setting);
#line 173 
#line 9317 
static int igb_ndo_set_vf_trust(struct net_device *netdev, int vf, bool setting);
#line 175 
#line 9333 
static int igb_ndo_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi);
#line 177 
#line 9235 
static void igb_check_vf_rate_limit(struct igb_adapter *adapter);
#line 178 
#line 9558 
static void igb_nfc_filter_exit(struct igb_adapter *adapter);
#line 179 
#line 9573 
static void igb_nfc_filter_restore(struct igb_adapter *adapter);
#line 182 
#line 6729 
static int igb_vf_configure(struct igb_adapter *adapter, int vf);
#line 183 
#line 8967 
static int igb_pci_enable_sriov(struct pci_dev *dev, int num_vfs);
#line 184 
#line 3481 
static int igb_disable_sriov(struct pci_dev *pdev);
#line 185 
#line 8957 
static int igb_pci_disable_sriov(struct pci_dev *dev);
#line 188 
#line 8833 
static int igb_suspend(struct device *dev);
#line 189 
#line 8838 
static int igb_resume(struct device *dev);
#line 190 
#line 8903 
static int igb_runtime_suspend(struct device *dev);
#line 191 
#line 8908 
static int igb_runtime_resume(struct device *dev);
#line 192 
#line 8892 
static int igb_runtime_idle(struct device *dev);
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct dev_pm_ops igb_pm_ops = {.suspend = & igb_suspend, .resume = & igb_resume, .freeze = & igb_suspend, .thaw = & igb_resume, .poweroff = & igb_suspend, .restore = & igb_resume, .runtime_suspend = & igb_runtime_suspend, .runtime_resume = & igb_runtime_resume, .runtime_idle = & igb_runtime_idle};
#line 198 
#line 8913 
static void igb_shutdown(struct pci_dev *pdev);
#line 199 
#line 8983 
static int igb_pci_sriov_configure(struct pci_dev *dev, int num_vfs);
#line 201 
#line 6716 
static int igb_notify_dca(struct notifier_block *nb, unsigned long event, void *p);
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct notifier_block dca_notifier = {.notifier_call = & igb_notify_dca};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static unsigned int max_vfs;
#line 214 
#line 9002 
static pci_ers_result_t igb_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state);
#line 216 
#line 9028 
static pci_ers_result_t igb_io_slot_reset(struct pci_dev *pdev);
#line 217 
#line 9068 
static void igb_io_resume(struct pci_dev *pdev);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct pci_error_handlers igb_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& igb_io_error_detected), .slot_reset = & igb_io_slot_reset, .resume = & igb_io_resume};
#line 225 
#line 9391 
static void igb_init_dmac(struct igb_adapter *adapter, u32 pba);
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct pci_driver igb_driver = {.name = (char *)(& igb_driver_name), .id_table = (struct pci_device_id *)(& igb_pci_tbl), .probe = & igb_probe, .remove = & igb_remove, .shutdown = & igb_shutdown, .sriov_configure = & igb_pci_sriov_configure, .err_handler = & igb_err_handler, .driver = {.pm = & igb_pm_ops}};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int debug = -1;
#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct igb_reg_info igb_reg_info_tbl[23U] = {{.name = (char *)"CTRL"}, {.ofs = 8U, .name = (char *)"STATUS"}, {.ofs = 24U, .name = (char *)"CTRL_EXT"}, {.ofs = 192U, .name = (char *)"ICR"}, {.ofs = 256U, .name = (char *)"RCTL"}, {.ofs = 10248U, .name = (char *)"RDLEN"}, {.ofs = 10256U, .name = (char *)"RDH"}, {.ofs = 10264U, .name = (char *)"RDT"}, {.ofs = 10280U, .name = (char *)"RXDCTL"}, {.ofs = 10240U, .name = (char *)"RDBAL"}, {.ofs = 10244U, .name = (char *)"RDBAH"}, {.ofs = 1024U, .name = (char *)"TCTL"}, {.ofs = 14336U, .name = (char *)"TDBAL"}, {.ofs = 14340U, .name = (char *)"TDBAH"}, {.ofs = 14344U, .name = (char *)"TDLEN"}, {.ofs = 14352U, .name = (char *)"TDH"}, {.ofs = 14360U, .name = (char *)"TDT"}, {.ofs = 14376U, .name = (char *)"TXDCTL"}, {.ofs = 13328U, .name = (char *)"TDFH"}, {.ofs = 13336U, .name = (char *)"TDFT"}, {.ofs = 13344U, .name = (char *)"TDFHS"}, {.ofs = 13360U, .name = (char *)"TDFPC"}};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_regdump(struct e1000_hw *hw, struct igb_reg_info *reginfo)
{
  #line 295 
  char rname[16U];
  #line 296 
  u32 regs[8U];
  #line 294 
  int n = 0;
  #line 298 
  switch (reginfo->ofs) {
    #line 299 
    case (u32)10248: 
                     #line 299 
    ;
    #line 300 
    n = 0;
    #line 300 
    while (n <= 3) {
      #line 301 
      int tmp;
      #line 301 
      if (n <= 3) 
                  #line 301 
                  tmp = n * 256 + 10248; else 
                                              #line 301 
                                              tmp = n * 64 + 49160;
      #line 301 
      ;
      #line 301 
      regs[n] = igb_rd32(hw,(unsigned int)tmp);
      #line 300 
      n ++;
    }
    #line 302 
    break;
    #line 303 
    case (u32)10256: 
                     #line 303 
    ;
    #line 304 
    n = 0;
    #line 304 
    while (n <= 3) {
      #line 305 
      int tmp_0;
      #line 305 
      if (n <= 3) 
                  #line 305 
                  tmp_0 = n * 256 + 10256; else 
                                                #line 305 
                                                tmp_0 = n * 64 + 49168;
      #line 305 
      ;
      #line 305 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_0);
      #line 304 
      n ++;
    }
    #line 306 
    break;
    #line 307 
    case (u32)10264: 
                     #line 307 
    ;
    #line 308 
    n = 0;
    #line 308 
    while (n <= 3) {
      #line 309 
      int tmp_1;
      #line 309 
      if (n <= 3) 
                  #line 309 
                  tmp_1 = n * 256 + 10264; else 
                                                #line 309 
                                                tmp_1 = n * 64 + 49176;
      #line 309 
      ;
      #line 309 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_1);
      #line 308 
      n ++;
    }
    #line 310 
    break;
    #line 311 
    case (u32)10280: 
                     #line 311 
    ;
    #line 312 
    n = 0;
    #line 312 
    while (n <= 3) {
      #line 313 
      int tmp_2;
      #line 313 
      if (n <= 3) 
                  #line 313 
                  tmp_2 = n * 256 + 10280; else 
                                                #line 313 
                                                tmp_2 = n * 64 + 49192;
      #line 313 
      ;
      #line 313 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_2);
      #line 312 
      n ++;
    }
    #line 314 
    break;
    #line 315 
    case (u32)10240: 
                     #line 315 
    ;
    #line 316 
    n = 0;
    #line 316 
    while (n <= 3) {
      #line 317 
      int tmp_3;
      #line 317 
      if (n <= 3) 
                  #line 317 
                  tmp_3 = (n + 40) * 256; else 
                                               #line 317 
                                               tmp_3 = (n + 768) * 64;
      #line 317 
      ;
      #line 317 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_3);
      #line 316 
      n ++;
    }
    #line 318 
    break;
    #line 319 
    case (u32)10244: 
                     #line 319 
    ;
    #line 320 
    n = 0;
    #line 320 
    while (n <= 3) {
      #line 321 
      int tmp_4;
      #line 321 
      if (n <= 3) 
                  #line 321 
                  tmp_4 = n * 256 + 10244; else 
                                                #line 321 
                                                tmp_4 = n * 64 + 49156;
      #line 321 
      ;
      #line 321 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_4);
      #line 320 
      n ++;
    }
    #line 322 
    break;
    #line 323 
    case (u32)14336: 
                     #line 323 
    ;
    #line 324 
    n = 0;
    #line 324 
    while (n <= 3) {
      #line 325 
      int tmp_5;
      #line 325 
      if (n <= 3) 
                  #line 325 
                  tmp_5 = (n + 40) * 256; else 
                                               #line 325 
                                               tmp_5 = (n + 768) * 64;
      #line 325 
      ;
      #line 325 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_5);
      #line 324 
      n ++;
    }
    #line 326 
    break;
    #line 327 
    case (u32)14340: 
                     #line 327 
    ;
    #line 328 
    n = 0;
    #line 328 
    while (n <= 3) {
      #line 329 
      int tmp_6;
      #line 329 
      if (n <= 3) 
                  #line 329 
                  tmp_6 = n * 256 + 14340; else 
                                                #line 329 
                                                tmp_6 = n * 64 + 57348;
      #line 329 
      ;
      #line 329 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_6);
      #line 328 
      n ++;
    }
    #line 330 
    break;
    #line 331 
    case (u32)14344: 
                     #line 331 
    ;
    #line 332 
    n = 0;
    #line 332 
    while (n <= 3) {
      #line 333 
      int tmp_7;
      #line 333 
      if (n <= 3) 
                  #line 333 
                  tmp_7 = n * 256 + 14344; else 
                                                #line 333 
                                                tmp_7 = n * 64 + 57352;
      #line 333 
      ;
      #line 333 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_7);
      #line 332 
      n ++;
    }
    #line 334 
    break;
    #line 335 
    case (u32)14352: 
                     #line 335 
    ;
    #line 336 
    n = 0;
    #line 336 
    while (n <= 3) {
      #line 337 
      int tmp_8;
      #line 337 
      if (n <= 3) 
                  #line 337 
                  tmp_8 = n * 256 + 14352; else 
                                                #line 337 
                                                tmp_8 = n * 64 + 57360;
      #line 337 
      ;
      #line 337 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_8);
      #line 336 
      n ++;
    }
    #line 338 
    break;
    #line 339 
    case (u32)14360: 
                     #line 339 
    ;
    #line 340 
    n = 0;
    #line 340 
    while (n <= 3) {
      #line 341 
      int tmp_9;
      #line 341 
      if (n <= 3) 
                  #line 341 
                  tmp_9 = n * 256 + 14360; else 
                                                #line 341 
                                                tmp_9 = n * 64 + 57368;
      #line 341 
      ;
      #line 341 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_9);
      #line 340 
      n ++;
    }
    #line 342 
    break;
    #line 343 
    case (u32)14376: 
                     #line 343 
    ;
    #line 344 
    n = 0;
    #line 344 
    while (n <= 3) {
      #line 345 
      int tmp_10;
      #line 345 
      if (n <= 3) 
                  #line 345 
                  tmp_10 = n * 256 + 14376; else 
                                                 #line 345 
                                                 tmp_10 = n * 64 + 57384;
      #line 345 
      ;
      #line 345 
      regs[n] = igb_rd32(hw,(unsigned int)tmp_10);
      #line 344 
      n ++;
    }
    #line 346 
    break;
    #line 347 
    default: 
             #line 347 
    ;
    #line 348 
    ;
    #line 348 
    printk((char *)"\001",reginfo->name,igb_rd32(hw,reginfo->ofs));
    #line 349 
    return;
  }
  #line 352 
  snprintf((char *)(& rname),16UL,(char *)"%s%s",reginfo->name,(char *)"[0-3]");
  #line 353 
  printk((char *)"\001",(char *)(& rname),regs[0],regs[1],regs[2],regs[3]);
  #line 354 
  return;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_dump(struct igb_adapter *adapter)
{
  #line 362 
  struct igb_reg_info *reginfo;
  #line 363 
  struct igb_ring *tx_ring;
  #line 364 
  union e1000_adv_tx_desc *tx_desc;
  #line 365 
  struct my_u0 *u0;
  #line 366 
  struct igb_ring *rx_ring;
  #line 367 
  union e1000_adv_rx_desc *rx_desc;
  #line 368 
  u32 staterr;
  #line 369 
  u16 i;
  #line 369 
  u16 n;
  #line 360 
  struct net_device *netdev = adapter->netdev;
  #line 361 
  struct e1000_hw *hw = & adapter->hw;
  #line 371 
  if ((adapter->msg_enable & 8192) == 0) 
                                         #line 372 
                                         return;
  #line 375 
  if (netdev != (struct net_device *)0) {
    #line 376 
    _dev_info(& (adapter->pdev)->dev,(char *)"Net device Info\n");
    #line 377 
    printk((char *)"\001");
    #line 378 
    ;
    #line 378 
    ;
    #line 378 
    printk((char *)"\001",(char *)(& netdev->name),netdev->state,dev_trans_start(netdev));
  }
  #line 383 
  _dev_info(& (adapter->pdev)->dev,(char *)"Register Dump\n");
  #line 384 
  printk((char *)"\001");
  #line 385 
  reginfo = (struct igb_reg_info *)(& igb_reg_info_tbl);
  #line 385 
  while (reginfo->name != (char *)0) {
    #line 387 
    igb_regdump(hw,reginfo);
    #line 386 
    reginfo ++;
  }
  #line 391 
  if (netdev == (struct net_device *)0) 
                                        #line 391 
                                        goto _LOR;
  else {
    #line 391 
    if (! netif_running(netdev)) 
                                 #line 391 
                                 _LOR: 
                                       #line 392 
                                       goto exit;
  }
  #line 394 
  _dev_info(& (adapter->pdev)->dev,(char *)"TX Rings Summary\n");
  #line 395 
  printk((char *)"\001");
  #line 396 
  n = (unsigned short)0U;
  #line 396 
  while ((int)n < adapter->num_tx_queues) {
    {
      #line 397 
      struct igb_tx_buffer *buffer_info;
      #line 398 
      tx_ring = adapter->tx_ring[(int)n];
      #line 399 
      buffer_info = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info + (unsigned long)tx_ring->next_to_clean;
      #line 400 
      printk((char *)"\001",(int)n,(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,buffer_info->dma,buffer_info->len,buffer_info->next_to_watch,(unsigned long long)buffer_info->time_stamp);
    }
    #line 396 
    n = (u16)((int)n + 1);
  }
  #line 409 
  if ((adapter->msg_enable & 1024) == 0) 
                                         #line 410 
                                         goto rx_ring_summary;
  #line 412 
  _dev_info(& (adapter->pdev)->dev,(char *)"TX Rings Dump\n");
  #line 425 
  n = (unsigned short)0U;
  #line 425 
  while ((int)n < adapter->num_tx_queues) {
    #line 426 
    tx_ring = adapter->tx_ring[(int)n];
    #line 427 
    printk((char *)"\001");
    #line 428 
    printk((char *)"\001",(int)tx_ring->queue_index);
    #line 429 
    printk((char *)"\001");
    #line 430 
    printk((char *)"\001");
    #line 432 
    i = (unsigned short)0U;
    #line 432 
    while (tx_ring->desc != (void *)0 && (int)tx_ring->count > (int)i) {
      {
        #line 433 
        char *next_desc;
        #line 434 
        struct igb_tx_buffer *buffer_info_0;
        #line 435 
        tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc + (unsigned long)i;
        #line 436 
        buffer_info_0 = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info + (unsigned long)i;
        #line 437 
        u0 = (struct my_u0 *)tx_desc;
        #line 438 
        if ((int)tx_ring->next_to_use == (int)i && (int)tx_ring->next_to_clean == (int)i) 
          #line 440 
          next_desc = (char *)" NTC/U";
        else 
          #line 441 
          if ((int)tx_ring->next_to_use == (int)i) 
                                                   #line 442 
                                                   next_desc = (char *)" NTU";
          else 
            #line 443 
            if ((int)tx_ring->next_to_clean == (int)i) 
                                                       #line 444 
                                                       next_desc = (char *)" NTC"; else 
                                                                    #line 446 
                                                                    next_desc = (char *)"";
        #line 448 
        printk((char *)"\001",(int)i,u0->a,u0->b,buffer_info_0->dma,buffer_info_0->len,buffer_info_0->next_to_watch,(unsigned long long)buffer_info_0->time_stamp,buffer_info_0->skb,next_desc);
        #line 457 
        if ((adapter->msg_enable & 4096) != 0 && buffer_info_0->skb != (struct sk_buff *)0) 
          #line 458 
          print_hex_dump((char *)"\001",(char *)"",1,16,1,(void *)(buffer_info_0->skb)->data,(unsigned long)buffer_info_0->len,(_Bool)1);
      }
      #line 432 
      i = (u16)((int)i + 1);
    }
    #line 425 
    n = (u16)((int)n + 1);
  }
  #line 467 
  rx_ring_summary: 
                   #line 467 
  ;
  #line 468 
  _dev_info(& (adapter->pdev)->dev,(char *)"RX Rings Summary\n");
  #line 469 
  printk((char *)"\001");
  #line 470 
  n = (unsigned short)0U;
  #line 470 
  while ((int)n < adapter->num_rx_queues) {
    #line 471 
    rx_ring = adapter->rx_ring[(int)n];
    #line 472 
    printk((char *)"\001",(int)n,(int)rx_ring->next_to_use,(int)rx_ring->next_to_clean);
    #line 470 
    n = (u16)((int)n + 1);
  }
  #line 477 
  if ((adapter->msg_enable & 2048) == 0) 
                                         #line 478 
                                         goto exit;
  #line 480 
  _dev_info(& (adapter->pdev)->dev,(char *)"RX Rings Dump\n");
  #line 503 
  n = (unsigned short)0U;
  #line 503 
  while ((int)n < adapter->num_rx_queues) {
    #line 504 
    rx_ring = adapter->rx_ring[(int)n];
    #line 505 
    printk((char *)"\001");
    #line 506 
    printk((char *)"\001",(int)rx_ring->queue_index);
    #line 507 
    printk((char *)"\001");
    #line 508 
    printk((char *)"\001");
    #line 509 
    printk((char *)"\001");
    #line 511 
    i = (unsigned short)0U;
    #line 511 
    while ((int)rx_ring->count > (int)i) {
      {
        #line 512 
        char *next_desc_0;
        #line 513 
        struct igb_rx_buffer *buffer_info_1;
        #line 514 
        buffer_info_1 = rx_ring->__anonCompField_igb_ring_166.rx_buffer_info + (unsigned long)i;
        #line 515 
        rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (unsigned long)i;
        #line 516 
        u0 = (struct my_u0 *)rx_desc;
        #line 517 
        staterr = rx_desc->wb.upper.status_error;
        #line 519 
        if ((int)rx_ring->next_to_use == (int)i) 
                                                 #line 520 
                                                 next_desc_0 = (char *)" NTU";
        else 
          #line 521 
          if ((int)rx_ring->next_to_clean == (int)i) 
                                                     #line 522 
                                                     next_desc_0 = (char *)" NTC"; else 
                                                                    #line 524 
                                                                    next_desc_0 = (char *)"";
        #line 526 
        if ((staterr & 1U) != 0U) 
                                  #line 528 
                                  printk((char *)"\001",(char *)"RWB",(int)i,u0->a,u0->b,next_desc_0);
        else {
          #line 534 
          printk((char *)"\001",(char *)"R  ",(int)i,u0->a,u0->b,buffer_info_1->dma,next_desc_0);
          #line 541 
          if (((adapter->msg_enable & 4096) != 0 && buffer_info_1->dma != 0ULL) && buffer_info_1->page != (struct page *)0) {
            #line 543 
            ;
            #line 543 
            print_hex_dump((char *)"\001",(char *)"",1,16,1,lowmem_page_address(buffer_info_1->page) + (unsigned long)buffer_info_1->page_offset,(unsigned long)igb_rx_bufsz(rx_ring),(_Bool)1);
          }
        }
      }
      #line 511 
      i = (u16)((int)i + 1);
    }
    #line 503 
    n = (u16)((int)n + 1);
  }
  #line 554 
  exit: 
        #line 554 
  ;
  #line 555 
  return;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_get_i2c_data(void *data)
{
  #line 567 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  #line 568 
  struct e1000_hw *hw = & adapter->hw;
  #line 569 
  s32 i2cctl = (int)igb_rd32(hw,4140U);
  #line 571 
  return (i2cctl & 4096) != 0;
}

#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_i2c_data(void *data, int state)
{
  #line 583 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  #line 584 
  struct e1000_hw *hw = & adapter->hw;
  #line 585 
  s32 i2cctl = (int)igb_rd32(hw,4140U);
  #line 587 
  if (state != 0) 
                  #line 588 
                  i2cctl |= 1024; else 
                                       #line 590 
                                       i2cctl &= -1025;
  #line 592 
  i2cctl &= -2049;
  #line 593 
  i2cctl |= 8192;
  {
    #line 595 
    union __anonunion___u_3278 __u;
    #line 594 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 594 
    u8 *hw_addr = (__u.__val);
    #line 594 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 594 
                                           writel((unsigned int)i2cctl,(void *)(hw_addr + 4140U));
  }
  #line 595 
  igb_rd32(hw,8U);
  #line 596 
  return;
}

#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_i2c_clk(void *data, int state)
{
  #line 608 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  #line 609 
  struct e1000_hw *hw = & adapter->hw;
  #line 610 
  s32 i2cctl = (int)igb_rd32(hw,4140U);
  #line 612 
  if (state != 0) {
    #line 613 
    i2cctl |= 512;
    #line 614 
    i2cctl &= -8193;
  }
  else {
    #line 616 
    i2cctl &= -513;
    #line 617 
    i2cctl &= -8193;
  }
  {
    #line 620 
    union __anonunion___u_3280 __u;
    #line 619 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 619 
    u8 *hw_addr = (__u.__val);
    #line 619 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 619 
                                           writel((unsigned int)i2cctl,(void *)(hw_addr + 4140U));
  }
  #line 620 
  igb_rd32(hw,8U);
  #line 621 
  return;
}

#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_get_i2c_clk(void *data)
{
  #line 631 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  #line 632 
  struct e1000_hw *hw = & adapter->hw;
  #line 633 
  s32 i2cctl = (int)igb_rd32(hw,4140U);
  #line 635 
  return (i2cctl & 16384) != 0;
}

#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct i2c_algo_bit_data igb_i2c_algo = {.setsda = & igb_set_i2c_data, .setscl = & igb_set_i2c_clk, .getsda = & igb_get_i2c_data, .getscl = & igb_get_i2c_clk, .udelay = 5, .timeout = 20};
#line 653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
struct net_device *igb_get_hw_dev(struct e1000_hw *hw)
{
  #line 655 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  #line 656 
  return adapter->netdev;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_init_module(void)
{
  #line 667 
  int ret;
  #line 669 
  printk((char *)"\001",(char *)(& igb_driver_string),(char *)(& igb_driver_version));
  #line 671 
  printk((char *)"\001",(char *)(& igb_copyright));
  #line 674 
  dca_register_notify(& dca_notifier);
  #line 676 
  ret = cif___pci_register_driver(& igb_driver,& __this_module,(char *)"igb");
  #line 677 
  return ret;
}

#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_exit_module(void)
{
  #line 691 
  dca_unregister_notify(& dca_notifier);
  #line 693 
  cif_pci_unregister_driver(& igb_driver);
  #line 694 
  return;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_cache_ring_register(struct igb_adapter *adapter)
{
  #line 708 
  int i = 0;
  #line 708 
  int j = 0;
  #line 709 
  u32 rbase_offset = adapter->vfs_allocated_count;
  #line 711 
  switch ((unsigned int)adapter->hw.mac.type) {
    #line 712 
    case (unsigned int)2: 
                          #line 712 
    ;
    #line 718 
    if (adapter->vfs_allocated_count != 0U) 
      #line 719 
      while (adapter->rss_queues > (unsigned int)i) {
        #line 720 
        (adapter->rx_ring[i])->reg_idx = (unsigned char)((((unsigned int)((unsigned char)(i << 3)) & 8U) + (unsigned int)((unsigned char)(i >> 1))) + (unsigned int)((unsigned char)rbase_offset));
        #line 719 
        i ++;
      }
    #line 724 
    case (unsigned int)1: 
                          #line 724 
    ;
    #line 725 
    case (unsigned int)3: 
                          #line 725 
    ;
    #line 726 
    case (unsigned int)4: 
                          #line 726 
    ;
    #line 727 
    case (unsigned int)5: 
                          #line 727 
    ;
    #line 728 
    case (unsigned int)6: 
                          #line 728 
    ;
    #line 729 
    case (unsigned int)7: 
                          #line 729 
    ;
    #line 731 
    default: 
             #line 731 
    ;
    #line 732 
    while (adapter->num_rx_queues > i) {
      #line 733 
      (adapter->rx_ring[i])->reg_idx = (unsigned char)((int)((unsigned char)rbase_offset) + (int)((unsigned char)i));
      #line 732 
      i ++;
    }
    #line 734 
    while (adapter->num_tx_queues > j) {
      #line 735 
      (adapter->tx_ring[j])->reg_idx = (unsigned char)((int)((unsigned char)rbase_offset) + (int)((unsigned char)j));
      #line 734 
      j ++;
    }
    #line 736 
    break;
  }
  #line 738 
  return;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
u32 igb_rd32(struct e1000_hw *hw, u32 reg)
{
  #line 742 
  void *__mptr;
  #line 744 
  union __anonunion___u_3282 __u;
  #line 742 
  __mptr = (void *)hw;
  #line 742 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709549960U));
  #line 743 
  __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
  #line 743 
  u8 *hw_addr = (__u.__val);
  #line 744 
  u32 value = 0U;
  #line 746 
  if ((long)(hw_addr == (u8 *)0U) != 0L) 
                                         #line 747 
                                         return ~ value;
  #line 749 
  value = readl((void *)(hw_addr + (unsigned long)reg));
  #line 752 
  if (value == 4294967295U) 
    #line 752 
    if (reg == 0U) 
                   #line 752 
                   goto _LOR;
    else {
      #line 752 
      if (readl((void *)hw_addr) == 4294967295U) {
        #line 752 
        _LOR: {
                #line 753 
                struct net_device *netdev = igb->netdev;
                #line 754 
                hw->hw_addr = (u8 *)0U;
                #line 755 
                netdev_err(netdev,(char *)"PCIe link lost\n");
                {
                  #line 756 
                  int __ret_warn_on = (int)pci_device_is_present(igb->pdev) != 0;
                  #line 756 
                  if ((long)(__ret_warn_on != 0) != 0L) {
                    #line 756 
                    __warn_printk((char *)"igb: Failed to read reg 0x%x!\n",reg);
                    #line 757 
                    ldv_inline_asm();
                    #line 758 
                    ldv_inline_asm();
                  }
                  #line 756 
                  long tmp_2 = (long)(__ret_warn_on != 0);
                }
              }
      }
    }
  #line 760 
  return value;
}

#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_write_ivar(struct e1000_hw *hw, int msix_vector, int index, int offset)
{
  #line 778 
  u32 ivar = igb_rd32(hw,(unsigned int)((index << 2) + 5888));
  #line 781 
  ivar = ~ (255U << offset) & ivar;
  #line 784 
  ivar = (unsigned int)((msix_vector | 128) << offset) | ivar;
  {
    #line 787 
    union __anonunion___u_3284 __u;
    #line 786 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 786 
    u8 *hw_addr = (__u.__val);
    #line 786 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 786 
                                           writel(ivar,(void *)(hw_addr + (unsigned long)((index << 2) + 5888)));
  }
  #line 788 
  return;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_assign_vector(struct igb_q_vector *q_vector, int msix_vector)
{
  #line 792 
  struct igb_adapter *adapter = q_vector->adapter;
  #line 793 
  struct e1000_hw *hw = & adapter->hw;
  #line 794 
  int rx_queue = -1;
  #line 795 
  int tx_queue = -1;
  #line 796 
  u32 msixbm = 0U;
  #line 798 
  if (q_vector->rx.ring != (struct igb_ring *)0) 
                                                 #line 799 
                                                 rx_queue = (int)(q_vector->rx.ring)->reg_idx;
  #line 800 
  if (q_vector->tx.ring != (struct igb_ring *)0) 
                                                 #line 801 
                                                 tx_queue = (int)(q_vector->tx.ring)->reg_idx;
  #line 803 
  switch ((unsigned int)hw->mac.type) {
    #line 804 
    case (unsigned int)1: 
                          #line 804 
    ;
    #line 810 
    if (rx_queue >= 0) 
                       #line 811 
                       msixbm = (unsigned int)(1 << rx_queue);
    #line 812 
    if (tx_queue >= 0) 
                       #line 813 
                       msixbm = (unsigned int)(256 << tx_queue) | msixbm;
    #line 814 
    if (((unsigned long)adapter->flags & 8192UL) == 0UL && msix_vector == 0) 
      #line 815 
      msixbm |= 2147483648U;
    {
      #line 817 
      union __anonunion___u_3286 __u;
      #line 816 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 816 
      u8 *hw_addr = (__u.__val);
      #line 816 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 816 
                                             writel(msixbm,(void *)(hw_addr + (unsigned long)((msix_vector << 2) + 5632)));
    }
    #line 817 
    q_vector->eims_value = msixbm;
    #line 818 
    break;
    #line 819 
    case (unsigned int)2: 
                          #line 819 
    ;
    #line 825 
    if (rx_queue >= 0) 
                       #line 826 
                       igb_write_ivar(hw,msix_vector,rx_queue & 7,(rx_queue << 1) & 16);
    #line 829 
    if (tx_queue >= 0) 
                       #line 830 
                       igb_write_ivar(hw,msix_vector,tx_queue & 7,((tx_queue << 1) & 16) + 8);
    #line 833 
    q_vector->eims_value = (unsigned int)(1UL << msix_vector);
    #line 834 
    break;
    #line 835 
    case (unsigned int)3: 
                          #line 835 
    ;
    #line 836 
    case (unsigned int)4: 
                          #line 836 
    ;
    #line 837 
    case (unsigned int)5: 
                          #line 837 
    ;
    #line 838 
    case (unsigned int)6: 
                          #line 838 
    ;
    #line 839 
    case (unsigned int)7: 
                          #line 839 
    ;
    #line 846 
    if (rx_queue >= 0) 
                       #line 847 
                       igb_write_ivar(hw,msix_vector,rx_queue >> 1,(rx_queue << 4) & 16);
    #line 850 
    if (tx_queue >= 0) 
                       #line 851 
                       igb_write_ivar(hw,msix_vector,tx_queue >> 1,((tx_queue << 4) & 16) + 8);
    #line 854 
    q_vector->eims_value = (unsigned int)(1UL << msix_vector);
    #line 855 
    break;
    #line 856 
    default: 
             #line 856 
    ;
    #line 858 
    ldv_inline_asm();
    #line 859 
    ldv_inline_asm();
    #line 860 
    ldv_inline_asm();
    #line 857 
    ;
    #line 858 
    break;
  }
  #line 862 
  adapter->eims_enable_mask |= q_vector->eims_value;
  #line 865 
  q_vector->set_itr = (unsigned char)1U;
  #line 866 
  return;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_configure_msix(struct igb_adapter *adapter)
{
  #line 877 
  u32 tmp;
  #line 878 
  int i;
  #line 878 
  int vector = 0;
  #line 879 
  struct e1000_hw *hw = & adapter->hw;
  #line 881 
  adapter->eims_enable_mask = 0U;
  #line 884 
  switch ((unsigned int)hw->mac.type) {
    #line 917 
    int tmp_4;
    #line 885 
    case (unsigned int)1: 
                          #line 885 
    ;
    #line 886 
    tmp = igb_rd32(hw,24U);
    #line 888 
    tmp |= 2147483648U;
    #line 891 
    tmp |= 16777216U;
    #line 892 
    tmp |= 1U;
    {
      #line 895 
      union __anonunion___u_3288 __u;
      #line 894 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 894 
      u8 *hw_addr = (__u.__val);
      #line 894 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 894 
                                             writel(tmp,(void *)(hw_addr + 24U));
    }
    {
      #line 898 
      union __anonunion___u_3290 __u_0;
      #line 897 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 897 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 897 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
        #line 897 
        int tmp_2;
        #line 897 
        tmp_2 = vector;
        #line 897 
        vector ++;
        #line 897 
        ;
        #line 897 
        writel(2147483648U,(void *)(hw_addr_0 + (unsigned long)((tmp_2 << 2) + 5632)));
      }
    }
    #line 898 
    adapter->eims_other = 2147483648U;
    #line 900 
    break;
    #line 902 
    case (unsigned int)2: 
                          #line 902 
    ;
    #line 903 
    case (unsigned int)3: 
                          #line 903 
    ;
    #line 904 
    case (unsigned int)4: 
                          #line 904 
    ;
    #line 905 
    case (unsigned int)5: 
                          #line 905 
    ;
    #line 906 
    case (unsigned int)6: 
                          #line 906 
    ;
    #line 907 
    case (unsigned int)7: 
                          #line 907 
    ;
    {
      #line 912 
      union __anonunion___u_3292 __u_1;
      #line 911 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 911 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 911 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 911 
                                               writel(3221225489U,(void *)(hw_addr_1 + 5396U));
    }
    #line 916 
    adapter->eims_other = (unsigned int)(1UL << vector);
    #line 917 
    tmp_4 = vector;
    #line 917 
    vector ++;
    #line 917 
    tmp = (unsigned int)((tmp_4 << 8) | 32768);
    {
      #line 920 
      union __anonunion___u_3294 __u_2;
      #line 919 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 919 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 919 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                               #line 919 
                                               writel(tmp,(void *)(hw_addr_2 + 5952U));
    }
    #line 920 
    break;
    #line 921 
    default: 
             #line 921 
    ;
    #line 923 
    break;
  }
  #line 926 
  adapter->eims_enable_mask |= adapter->eims_other;
  #line 928 
  i = 0;
  #line 928 
  while (adapter->num_q_vectors > (unsigned int)i) {
    #line 929 
    int tmp_6;
    #line 929 
    tmp_6 = vector;
    #line 929 
    vector ++;
    #line 929 
    ;
    #line 929 
    ;
    #line 929 
    igb_assign_vector(adapter->q_vector[i],tmp_6);
    #line 928 
    i ++;
  }
  #line 931 
  igb_rd32(hw,8U);
  #line 932 
  return;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_request_msix(struct igb_adapter *adapter)
{
  #line 944 
  int i;
  #line 982 
  int tmp;
  #line 943 
  struct net_device *netdev = adapter->netdev;
  #line 944 
  int err = 0;
  #line 944 
  int vector = 0;
  #line 944 
  int free_vector = 0;
  #line 946 
  err = cif_request_irq_0(adapter->msix_entries[vector].vector,& igb_msix_other,0UL,(char *)(& netdev->name),(void *)adapter);
  #line 948 
  if (err != 0) 
                #line 949 
                goto err_out;
  #line 951 
  i = 0;
  #line 951 
  while (adapter->num_q_vectors > (unsigned int)i) {
    {
      #line 952 
      struct igb_q_vector *q_vector = adapter->q_vector[i];
      #line 954 
      vector ++;
      #line 956 
      q_vector->itr_register = (void *)(adapter->io_addr + (unsigned long)((vector + 1440) * 4));
      #line 958 
      if (q_vector->rx.ring != (struct igb_ring *)0 && q_vector->tx.ring != (struct igb_ring *)0) 
        #line 959 
        sprintf((char *)(& q_vector->name),(char *)"%s-TxRx-%u",(char *)(& netdev->name),(int)(q_vector->rx.ring)->queue_index);
      else 
        #line 961 
        if (q_vector->tx.ring != (struct igb_ring *)0) 
                                                       #line 962 
                                                       sprintf((char *)(& q_vector->name),(char *)"%s-tx-%u",(char *)(& netdev->name),(int)(q_vector->tx.ring)->queue_index);
        else 
          #line 964 
          if (q_vector->rx.ring != (struct igb_ring *)0) 
                                                         #line 965 
                                                         sprintf((char *)(& q_vector->name),(char *)"%s-rx-%u",(char *)(& netdev->name),(int)(q_vector->rx.ring)->queue_index); else 
                                                                    #line 968 
                                                                    sprintf((char *)(& q_vector->name),(char *)"%s-unused",(char *)(& netdev->name));
      #line 970 
      err = cif_request_irq_0(adapter->msix_entries[vector].vector,& igb_msix_ring,0UL,(char *)(& q_vector->name),(void *)q_vector);
      #line 973 
      if (err != 0) 
                    #line 974 
                    goto err_free;
    }
    #line 951 
    i ++;
  }
  #line 977 
  igb_configure_msix(adapter);
  #line 978 
  return 0;
  #line 980 
  err_free: 
            #line 980 
  ;
  #line 982 
  ;
  #line 982 
  tmp = free_vector;
  #line 982 
  free_vector ++;
  #line 982 
  ;
  #line 982 
  cif_free_irq_0(adapter->msix_entries[tmp].vector,(void *)adapter);
  #line 984 
  vector --;
  #line 985 
  i = 0;
  #line 985 
  while (i < vector) {
    #line 986 
    int tmp_0;
    #line 986 
    ;
    #line 986 
    tmp_0 = free_vector;
    #line 986 
    free_vector ++;
    #line 986 
    ;
    #line 986 
    cif_free_irq_0(adapter->msix_entries[tmp_0].vector,(void *)adapter->q_vector[i]);
    #line 985 
    i ++;
  }
  #line 989 
  err_out: 
           #line 989 
  ;
  #line 990 
  return err;
}

#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_q_vector(struct igb_adapter *adapter, int v_idx)
{
  #line 1002 
  struct igb_q_vector *q_vector = adapter->q_vector[v_idx];
  #line 1004 
  adapter->q_vector[v_idx] = (struct igb_q_vector *)0;
  #line 1009 
  if (q_vector != (struct igb_q_vector *)0) {
    #line 1010 
    struct igb_q_vector *___p = q_vector;
    #line 1010 
    if (___p != (struct igb_q_vector *)0) 
                                          #line 1010 
                                          kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))472);
  }
  #line 1013 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_reset_q_vector(struct igb_adapter *adapter, int v_idx)
{
  #line 1023 
  struct igb_q_vector *q_vector = adapter->q_vector[v_idx];
  #line 1028 
  if (q_vector == (struct igb_q_vector *)0) 
                                            #line 1029 
                                            return;
  #line 1031 
  if (q_vector->tx.ring != (struct igb_ring *)0) 
                                                 #line 1032 
                                                 adapter->tx_ring[(int)(q_vector->tx.ring)->queue_index] = (struct igb_ring *)0;
  #line 1034 
  if (q_vector->rx.ring != (struct igb_ring *)0) 
                                                 #line 1035 
                                                 adapter->rx_ring[(int)(q_vector->rx.ring)->queue_index] = (struct igb_ring *)0;
  #line 1037 
  netif_napi_del(& q_vector->napi);
  #line 1038 
  return;
}

#line 1041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_reset_interrupt_capability(struct igb_adapter *adapter)
{
  #line 1043 
  int v_idx = (int)adapter->num_q_vectors;
  #line 1045 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) 
                                                       #line 1046 
                                                       pci_disable_msix(adapter->pdev);
  else 
    #line 1047 
    if (((unsigned long)adapter->flags & 1UL) != 0UL) 
                                                      #line 1048 
                                                      pci_disable_msi(adapter->pdev);
  #line 1050 
  while (1) {
    #line 1050 
    int tmp;
    #line 1050 
    tmp = v_idx;
    #line 1050 
    v_idx --;
    #line 1050 
    ;
    #line 1050 
    if (! (tmp != 0)) 
                      #line 1050 
                      break;
    #line 1051 
    igb_reset_q_vector(adapter,v_idx);
  }
  #line 1052 
  return;
}

#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_q_vectors(struct igb_adapter *adapter)
{
  #line 1064 
  int v_idx = (int)adapter->num_q_vectors;
  #line 1066 
  adapter->num_tx_queues = 0;
  #line 1067 
  adapter->num_rx_queues = 0;
  #line 1068 
  adapter->num_q_vectors = 0U;
  #line 1070 
  while (1) {
    #line 1070 
    int tmp;
    #line 1070 
    tmp = v_idx;
    #line 1070 
    v_idx --;
    #line 1070 
    ;
    #line 1070 
    if (! (tmp != 0)) 
                      #line 1070 
                      break;
    #line 1071 
    igb_reset_q_vector(adapter,v_idx);
    #line 1072 
    igb_free_q_vector(adapter,v_idx);
  }
  #line 1074 
  return;
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clear_interrupt_scheme(struct igb_adapter *adapter)
{
  #line 1085 
  igb_free_q_vectors(adapter);
  #line 1086 
  igb_reset_interrupt_capability(adapter);
  #line 1087 
  return;
}

#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_interrupt_capability(struct igb_adapter *adapter, bool msix)
{
  #line 1099 
  int err;
  #line 1100 
  int numvecs;
  #line 1100 
  int i;
  #line 1102 
  if (! msix) 
              #line 1103 
              goto msi_only;
  #line 1104 
  adapter->flags |= 8192U;
  #line 1107 
  adapter->num_rx_queues = (int)adapter->rss_queues;
  #line 1108 
  if (adapter->vfs_allocated_count != 0U) 
                                          #line 1109 
                                          adapter->num_tx_queues = 1; else 
                                                                    #line 1111 
                                                                    adapter->num_tx_queues = (int)adapter->rss_queues;
  #line 1114 
  numvecs = adapter->num_rx_queues;
  #line 1117 
  if (((unsigned long)adapter->flags & 8UL) == 0UL) 
                                                    #line 1118 
                                                    numvecs = adapter->num_tx_queues + numvecs;
  #line 1121 
  adapter->num_q_vectors = (unsigned int)numvecs;
  #line 1124 
  numvecs ++;
  #line 1125 
  i = 0;
  #line 1125 
  while (i < numvecs) {
    #line 1126 
    adapter->msix_entries[i].entry = (unsigned short)i;
    #line 1125 
    i ++;
  }
  #line 1128 
  err = pci_enable_msix_range(adapter->pdev,(struct msix_entry *)(& adapter->msix_entries),numvecs,numvecs);
  #line 1132 
  if (err > 0) 
               #line 1133 
               return;
  #line 1135 
  igb_reset_interrupt_capability(adapter);
  #line 1138 
  msi_only: 
            #line 1138 
  ;
  #line 1139 
  adapter->flags &= 4294959103U;
  #line 1142 
  if (adapter->vf_data != (struct vf_data_storage *)0) {
    #line 1143 
    struct e1000_hw *hw = & adapter->hw;
    #line 1145 
    pci_disable_sriov(adapter->pdev);
    #line 1146 
    msleep(500U);
    #line 1148 
    kfree((void *)adapter->vf_mac_list);
    #line 1149 
    adapter->vf_mac_list = (struct vf_mac_filter *)0;
    #line 1150 
    kfree((void *)adapter->vf_data);
    #line 1151 
    adapter->vf_data = (struct vf_data_storage *)0;
    {
      #line 1153 
      union __anonunion___u_3296 __u;
      #line 1152 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1152 
      u8 *hw_addr = (__u.__val);
      #line 1152 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1152 
                                             writel(1U,(void *)(hw_addr + 23484U));
    }
    #line 1153 
    igb_rd32(hw,8U);
    #line 1154 
    msleep(100U);
    #line 1155 
    _dev_info(& (adapter->pdev)->dev,(char *)"IOV Disabled\n");
  }
  #line 1158 
  adapter->vfs_allocated_count = 0U;
  #line 1159 
  adapter->rss_queues = 1U;
  #line 1160 
  adapter->flags |= 8U;
  #line 1161 
  adapter->num_rx_queues = 1;
  #line 1162 
  adapter->num_tx_queues = 1;
  #line 1163 
  adapter->num_q_vectors = 1U;
  #line 1164 
  if (pci_enable_msi(adapter->pdev) == 0) 
                                          #line 1165 
                                          adapter->flags |= 1U;
  #line 1166 
  return;
}

#line 1168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_add_ring(struct igb_ring *ring, struct igb_ring_container *head)
{
  #line 1171 
  head->ring = ring;
  #line 1172 
  head->count = (u8)((int)head->count + 1);
  #line 1173 
  return;
}

#line 1187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_alloc_q_vector(struct igb_adapter *adapter, int v_count, int v_idx, int txr_count, int txr_idx, int rxr_count, int rxr_idx)
{
  #line 1192 
  struct igb_q_vector *q_vector;
  #line 1193 
  struct igb_ring *ring;
  #line 1194 
  int ring_count;
  #line 1195 
  size_t size;
  #line 1198 
  if (txr_count > 1 || rxr_count > 1) 
                                      #line 1199 
                                      return -12;
  #line 1201 
  ring_count = txr_count + rxr_count;
  #line 1202 
  size = __ab_c_size((unsigned long)ring_count,4096UL,4096UL);
  #line 1205 
  q_vector = adapter->q_vector[v_idx];
  #line 1206 
  if (q_vector == (struct igb_q_vector *)0) 
                                            #line 1207 
                                            q_vector = (struct igb_q_vector *)kzalloc_0(size,3264U);
  else {
    #line 1208 
    ;
    #line 1208 
    if (ksize((void *)q_vector) < size) {
      {
        #line 1209 
        struct igb_q_vector *___p = q_vector;
        #line 1209 
        if (___p != (struct igb_q_vector *)0) 
                                              #line 1209 
                                              kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))472);
      }
      #line 1210 
      q_vector = (struct igb_q_vector *)kzalloc_0(size,3264U);
    }
    else 
         #line 1212 
         memset((void *)q_vector,0,size);
  }
  #line 1214 
  if (q_vector == (struct igb_q_vector *)0) 
                                            #line 1215 
                                            return -12;
  #line 1218 
  netif_napi_add(adapter->netdev,& q_vector->napi,& igb_poll,64);
  #line 1222 
  adapter->q_vector[v_idx] = q_vector;
  #line 1223 
  q_vector->adapter = adapter;
  #line 1226 
  q_vector->tx.work_limit = adapter->tx_work_limit;
  #line 1229 
  q_vector->itr_register = (void *)(adapter->io_addr + 5760U);
  #line 1230 
  q_vector->itr_val = (unsigned short)648U;
  #line 1233 
  ring = (struct igb_ring *)(& q_vector->ring);
  #line 1236 
  if (rxr_count != 0) {
    #line 1238 
    if (adapter->rx_itr_setting + 4294967295U > 2U) 
                                                    #line 1239 
                                                    q_vector->itr_val = (unsigned short)adapter->rx_itr_setting;
  }
  else 
    #line 1242 
    if (adapter->tx_itr_setting + 4294967295U > 2U) 
                                                    #line 1243 
                                                    q_vector->itr_val = (unsigned short)adapter->tx_itr_setting;
  #line 1246 
  if (txr_count != 0) {
    #line 1248 
    ring->dev = & (adapter->pdev)->dev;
    #line 1249 
    ring->netdev = adapter->netdev;
    #line 1252 
    ring->q_vector = q_vector;
    #line 1255 
    igb_add_ring(ring,& q_vector->tx);
    #line 1258 
    if (adapter->hw.mac.type == (unsigned int)e1000_82575) 
                                                           #line 1259 
                                                           cif_set_bit_0(4L,& ring->flags);
    #line 1262 
    ring->count = adapter->tx_ring_count;
    #line 1263 
    ring->queue_index = (unsigned char)txr_idx;
    #line 1265 
    ring->cbs_enable = (_Bool)0;
    #line 1266 
    ring->idleslope = 0;
    #line 1267 
    ring->sendslope = 0;
    #line 1268 
    ring->hicredit = 0;
    #line 1269 
    ring->locredit = 0;
    #line 1271 
    u64_stats_init(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp);
    #line 1272 
    u64_stats_init(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp2);
    #line 1275 
    adapter->tx_ring[txr_idx] = ring;
    #line 1278 
    ring ++;
  }
  #line 1281 
  if (rxr_count != 0) {
    #line 1283 
    ring->dev = & (adapter->pdev)->dev;
    #line 1284 
    ring->netdev = adapter->netdev;
    #line 1287 
    ring->q_vector = q_vector;
    #line 1290 
    igb_add_ring(ring,& q_vector->rx);
    #line 1293 
    if (adapter->hw.mac.type > (unsigned int)e1000_82575) 
                                                          #line 1294 
                                                          cif_set_bit_0(2L,& ring->flags);
    #line 1299 
    if (adapter->hw.mac.type > (unsigned int)e1000_82580) 
                                                          #line 1300 
                                                          cif_set_bit_0(3L,& ring->flags);
    #line 1303 
    ring->count = adapter->rx_ring_count;
    #line 1304 
    ring->queue_index = (unsigned char)rxr_idx;
    #line 1306 
    u64_stats_init(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_syncp);
    #line 1309 
    adapter->rx_ring[rxr_idx] = ring;
  }
  #line 1312 
  return 0;
}

#line 1323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_alloc_q_vectors(struct igb_adapter *adapter)
{
  #line 1329 
  int err;
  #line 1325 
  int q_vectors = (int)adapter->num_q_vectors;
  #line 1326 
  int rxr_remaining = adapter->num_rx_queues;
  #line 1327 
  int txr_remaining = adapter->num_tx_queues;
  #line 1328 
  int rxr_idx = 0;
  #line 1328 
  int txr_idx = 0;
  #line 1328 
  int v_idx = 0;
  #line 1331 
  if (rxr_remaining + txr_remaining <= q_vectors) 
    #line 1332 
    while (rxr_remaining != 0) {
      #line 1333 
      err = igb_alloc_q_vector(adapter,q_vectors,v_idx,0,0,1,rxr_idx);
      #line 1336 
      if (err != 0) 
                    #line 1337 
                    goto err_out;
      #line 1340 
      rxr_remaining --;
      #line 1341 
      rxr_idx ++;
      #line 1332 
      v_idx ++;
    }
  #line 1345 
  while (v_idx < q_vectors) {
    {
      #line 1346 
      int rqpv = (((q_vectors - v_idx) + rxr_remaining) + -1) / (q_vectors - v_idx);
      #line 1347 
      int tqpv = (((q_vectors - v_idx) + txr_remaining) + -1) / (q_vectors - v_idx);
      #line 1349 
      err = igb_alloc_q_vector(adapter,q_vectors,v_idx,tqpv,txr_idx,rqpv,rxr_idx);
      #line 1352 
      if (err != 0) 
                    #line 1353 
                    goto err_out;
      #line 1356 
      rxr_remaining -= rqpv;
      #line 1357 
      txr_remaining -= tqpv;
      #line 1358 
      rxr_idx ++;
      #line 1359 
      txr_idx ++;
    }
    #line 1345 
    v_idx ++;
  }
  #line 1362 
  return 0;
  #line 1364 
  err_out: 
           #line 1364 
  ;
  #line 1365 
  adapter->num_tx_queues = 0;
  #line 1366 
  adapter->num_rx_queues = 0;
  #line 1367 
  adapter->num_q_vectors = 0U;
  #line 1369 
  while (1) {
    #line 1369 
    int tmp;
    #line 1369 
    tmp = v_idx;
    #line 1369 
    v_idx --;
    #line 1369 
    ;
    #line 1369 
    if (! (tmp != 0)) 
                      #line 1369 
                      break;
    #line 1370 
    igb_free_q_vector(adapter,v_idx);
  }
  #line 1372 
  return -12;
}

#line 1382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_init_interrupt_scheme(struct igb_adapter *adapter, bool msix)
{
  #line 1385 
  int err;
  #line 1384 
  struct pci_dev *pdev = adapter->pdev;
  #line 1387 
  igb_set_interrupt_capability(adapter,(_Bool)((bool)((int)msix) != 0));
  #line 1389 
  err = igb_alloc_q_vectors(adapter);
  #line 1390 
  if (err != 0) {
    #line 1391 
    _dev_err(& pdev->dev,(char *)"Unable to allocate memory for vectors\n");
    #line 1392 
    goto err_alloc_q_vectors;
  }
  #line 1395 
  igb_cache_ring_register(adapter);
  #line 1397 
  return 0;
  #line 1399 
  err_alloc_q_vectors: 
                       #line 1399 
  ;
  #line 1400 
  igb_reset_interrupt_capability(adapter);
  #line 1401 
  return err;
}

#line 1411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_request_irq(struct igb_adapter *adapter)
{
  #line 1413 
  struct net_device *netdev = adapter->netdev;
  #line 1414 
  struct pci_dev *pdev = adapter->pdev;
  #line 1415 
  int err = 0;
  #line 1417 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 1418 
    err = igb_request_msix(adapter);
    #line 1419 
    if (err == 0) 
                  #line 1420 
                  goto request_done;
    #line 1422 
    igb_free_all_tx_resources(adapter);
    #line 1423 
    igb_free_all_rx_resources(adapter);
    #line 1425 
    igb_clear_interrupt_scheme(adapter);
    #line 1426 
    err = igb_init_interrupt_scheme(adapter,(_Bool)0);
    #line 1427 
    if (err != 0) 
                  #line 1428 
                  goto request_done;
    #line 1430 
    igb_setup_all_tx_resources(adapter);
    #line 1431 
    igb_setup_all_rx_resources(adapter);
    #line 1432 
    igb_configure(adapter);
  }
  #line 1435 
  igb_assign_vector(adapter->q_vector[0],0);
  #line 1437 
  if (((unsigned long)adapter->flags & 1UL) != 0UL) {
    #line 1438 
    err = cif_request_irq_0(pdev->irq,& igb_intr_msi,0UL,(char *)(& netdev->name),(void *)adapter);
    #line 1440 
    if (err == 0) 
                  #line 1441 
                  goto request_done;
    #line 1444 
    igb_reset_interrupt_capability(adapter);
    #line 1445 
    adapter->flags &= 4294967294U;
  }
  #line 1448 
  err = cif_request_irq_0(pdev->irq,& igb_intr,128UL,(char *)(& netdev->name),(void *)adapter);
  #line 1451 
  if (err != 0) 
                #line 1452 
                _dev_err(& pdev->dev,(char *)"Error %d getting interrupt\n",err);
  #line 1455 
  request_done: 
                #line 1455 
  ;
  #line 1456 
  return err;
}

#line 1459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_irq(struct igb_adapter *adapter)
{
  #line 1461 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 1462 
    int i;
    #line 1464 
    int tmp;
    #line 1462 
    int vector = 0;
    #line 1464 
    ;
    #line 1464 
    tmp = vector;
    #line 1464 
    vector ++;
    #line 1464 
    ;
    #line 1464 
    cif_free_irq_0(adapter->msix_entries[tmp].vector,(void *)adapter);
    #line 1466 
    i = 0;
    #line 1466 
    while (adapter->num_q_vectors > (unsigned int)i) {
      #line 1467 
      int tmp_0;
      #line 1467 
      ;
      #line 1467 
      tmp_0 = vector;
      #line 1467 
      vector ++;
      #line 1467 
      ;
      #line 1467 
      cif_free_irq_0(adapter->msix_entries[tmp_0].vector,(void *)adapter->q_vector[i]);
      #line 1466 
      i ++;
    }
  }
  else 
       #line 1470 
       cif_free_irq_0((adapter->pdev)->irq,(void *)adapter);
  #line 1471 
  return;
}

#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_irq_disable(struct igb_adapter *adapter)
{
  #line 1480 
  struct e1000_hw *hw = & adapter->hw;
  #line 1486 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 1487 
    u32 regval = igb_rd32(hw,5424U);
    {
      #line 1490 
      union __anonunion___u_3299 __u;
      #line 1489 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1489 
      u8 *hw_addr = (__u.__val);
      #line 1489 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1489 
                                             writel(~ adapter->eims_enable_mask & regval,(void *)(hw_addr + 5424U));
    }
    {
      #line 1491 
      union __anonunion___u_3301 __u_0;
      #line 1490 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1490 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 1490 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 1490 
                                               writel(adapter->eims_enable_mask,(void *)(hw_addr_0 + 5416U));
    }
    #line 1491 
    regval = igb_rd32(hw,5420U);
    {
      #line 1493 
      union __anonunion___u_3303 __u_1;
      #line 1492 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 1492 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 1492 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 1492 
                                               writel(~ adapter->eims_enable_mask & regval,(void *)(hw_addr_1 + 5420U));
    }
  }
  {
    #line 1496 
    union __anonunion___u_3305 __u_2;
    #line 1495 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 1495 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 1495 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                             #line 1495 
                                             writel(0U,(void *)(hw_addr_2 + 224U));
  }
  {
    #line 1497 
    union __anonunion___u_3307 __u_3;
    #line 1496 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 1496 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 1496 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                             #line 1496 
                                             writel(4294967295U,(void *)(hw_addr_3 + 216U));
  }
  #line 1497 
  igb_rd32(hw,8U);
  #line 1498 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 1499 
    int i;
    #line 1501 
    i = 0;
    #line 1501 
    while (adapter->num_q_vectors > (unsigned int)i) {
      #line 1502 
      synchronize_irq(adapter->msix_entries[i].vector);
      #line 1501 
      i ++;
    }
  }
  else 
       #line 1504 
       synchronize_irq((adapter->pdev)->irq);
  #line 1505 
  return;
}

#line 1512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_irq_enable(struct igb_adapter *adapter)
{
  #line 1514 
  struct e1000_hw *hw = & adapter->hw;
  #line 1516 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 1517 
    u32 ims = 1342177284U;
    #line 1518 
    u32 regval = igb_rd32(hw,5420U);
    {
      #line 1521 
      union __anonunion___u_3309 __u;
      #line 1520 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1520 
      u8 *hw_addr = (__u.__val);
      #line 1520 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1520 
                                             writel(adapter->eims_enable_mask | regval,(void *)(hw_addr + 5420U));
    }
    #line 1521 
    regval = igb_rd32(hw,5424U);
    {
      #line 1523 
      union __anonunion___u_3311 __u_0;
      #line 1522 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1522 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 1522 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 1522 
                                               writel(adapter->eims_enable_mask | regval,(void *)(hw_addr_0 + 5424U));
    }
    {
      #line 1524 
      union __anonunion___u_3313 __u_1;
      #line 1523 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 1523 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 1523 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 1523 
                                               writel(adapter->eims_enable_mask,(void *)(hw_addr_1 + 5412U));
    }
    #line 1524 
    if (adapter->vfs_allocated_count != 0U) {
      {
        #line 1526 
        union __anonunion___u_3315 __u_2;
        #line 1525 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
        #line 1525 
        u8 *hw_addr_2 = (__u_2.__val);
        #line 1525 
        if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                                 #line 1525 
                                                 writel(255U,(void *)(hw_addr_2 + 3204U));
      }
      #line 1526 
      ims |= 256U;
    }
    {
      #line 1529 
      union __anonunion___u_3317 __u_3;
      #line 1528 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 1528 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 1528 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 1528 
                                               writel(ims,(void *)(hw_addr_3 + 208U));
    }
  }
  else {
    {
      #line 1531 
      union __anonunion___u_3319 __u_4;
      #line 1530 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 1530 
      u8 *hw_addr_4 = (__u_4.__val);
      #line 1530 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                               #line 1530 
                                               writel(1342177437U,(void *)(hw_addr_4 + 208U));
    }
    {
      #line 1533 
      union __anonunion___u_3321 __u_5;
      #line 1532 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 1532 
      u8 *hw_addr_5 = (__u_5.__val);
      #line 1532 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                               #line 1532 
                                               writel(1342177437U,(void *)(hw_addr_5 + 224U));
    }
  }
  #line 1535 
  return;
}

#line 1537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_mng_vlan(struct igb_adapter *adapter)
{
  #line 1539 
  struct e1000_hw *hw = & adapter->hw;
  #line 1540 
  u16 pf_id = (unsigned short)adapter->vfs_allocated_count;
  #line 1541 
  u16 vid = adapter->hw.mng_cookie.vlan_id;
  #line 1542 
  u16 old_vid = adapter->mng_vlan_id;
  #line 1544 
  if (((int)hw->mng_cookie.status & 2) != 0) {
    #line 1546 
    igb_vfta_set(hw,(unsigned int)vid,(unsigned int)pf_id,(_Bool)1,(_Bool)1);
    #line 1547 
    adapter->mng_vlan_id = vid;
  }
  else 
       #line 1549 
       adapter->mng_vlan_id = (unsigned short)65535U;
  #line 1552 
  if ((unsigned int)old_vid != 65535U && (int)vid != (int)old_vid) {
    #line 1554 
    if (! test_bit((long)old_vid,(unsigned long *)(& adapter->active_vlans))) 
      #line 1556 
      igb_vfta_set(hw,(unsigned int)vid,(unsigned int)pf_id,(_Bool)0,(_Bool)1);
  }
  #line 1557 
  return;
}

#line 1568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_release_hw_control(struct igb_adapter *adapter)
{
  #line 1571 
  u32 ctrl_ext;
  #line 1570 
  struct e1000_hw *hw = & adapter->hw;
  #line 1574 
  ctrl_ext = igb_rd32(hw,24U);
  {
    #line 1576 
    union __anonunion___u_3323 __u;
    #line 1575 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1575 
    u8 *hw_addr = (__u.__val);
    #line 1575 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1575 
                                           writel(ctrl_ext & 4026531839U,(void *)(hw_addr + 24U));
  }
  #line 1577 
  return;
}

#line 1587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_get_hw_control(struct igb_adapter *adapter)
{
  #line 1590 
  u32 ctrl_ext;
  #line 1589 
  struct e1000_hw *hw = & adapter->hw;
  #line 1593 
  ctrl_ext = igb_rd32(hw,24U);
  {
    #line 1595 
    union __anonunion___u_3325 __u;
    #line 1594 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1594 
    u8 *hw_addr = (__u.__val);
    #line 1594 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1594 
                                           writel(ctrl_ext | 268435456U,(void *)(hw_addr + 24U));
  }
  #line 1596 
  return;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void enable_fqtss(struct igb_adapter *adapter, bool enable)
{
  #line 1600 
  struct net_device *netdev = adapter->netdev;
  #line 1601 
  struct e1000_hw *hw = & adapter->hw;
  {
    #line 1603 
    int __ret_warn_on = hw->mac.type != (unsigned int)e1000_i210;
    #line 1603 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1604 
      ldv_inline_asm();
      #line 1605 
      ldv_inline_asm();
    }
    #line 1603 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 1605 
  if ((int)enable != 0) 
                        #line 1606 
                        adapter->flags |= 131072U; else 
                                                        #line 1608 
                                                        adapter->flags &= 4294836223U;
  #line 1610 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1611 
                                       cif_schedule_work(& adapter->reset_task);
  #line 1612 
  return;
}

#line 1614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool is_fqtss_enabled(struct igb_adapter *adapter)
{
  #line 1616 
  return (_Bool)(((int)((unsigned long)adapter->flags >> 17) & 1) != 0);
}

#line 1619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void set_tx_desc_fetch_prio(struct e1000_hw *hw, int queue, enum tx_queue_prio prio)
{
  #line 1622 
  u32 val;
  {
    #line 1624 
    int __ret_warn_on = hw->mac.type != (unsigned int)e1000_i210;
    #line 1624 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1625 
      ldv_inline_asm();
      #line 1626 
      ldv_inline_asm();
    }
    #line 1624 
    long tmp = (long)(__ret_warn_on != 0);
  }
  {
    #line 1625 
    int __ret_warn_on_0 = (unsigned int)queue > 4U;
    #line 1625 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 1626 
      ldv_inline_asm();
      #line 1627 
      ldv_inline_asm();
    }
    #line 1625 
    long tmp_3 = (long)(__ret_warn_on_0 != 0);
  }
  #line 1627 
  val = igb_rd32(hw,(unsigned int)(queue * 64 + 57384));
  #line 1629 
  if (prio == (unsigned int)TX_QUEUE_PRIO_HIGH) 
                                                #line 1630 
                                                val |= 134217728U; else 
                                                                    #line 1632 
                                                                    val &= 4160749567U;
  {
    #line 1635 
    union __anonunion___u_3327 __u;
    #line 1634 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1634 
    u8 *hw_addr = (__u.__val);
    #line 1634 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1634 
                                           writel(val,(void *)(hw_addr + (unsigned long)(queue * 64 + 57384)));
  }
  #line 1636 
  return;
}

#line 1637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void set_queue_mode(struct e1000_hw *hw, int queue, enum queue_mode mode)
{
  #line 1639 
  u32 val;
  {
    #line 1641 
    int __ret_warn_on = hw->mac.type != (unsigned int)e1000_i210;
    #line 1641 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1642 
      ldv_inline_asm();
      #line 1643 
      ldv_inline_asm();
    }
    #line 1641 
    long tmp = (long)(__ret_warn_on != 0);
  }
  {
    #line 1642 
    int __ret_warn_on_0 = (unsigned int)queue > 1U;
    #line 1642 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 1643 
      ldv_inline_asm();
      #line 1644 
      ldv_inline_asm();
    }
    #line 1642 
    long tmp_3 = (long)(__ret_warn_on_0 != 0);
  }
  #line 1644 
  val = igb_rd32(hw,(unsigned int)(queue * 64 + 12292));
  #line 1646 
  if (mode == (unsigned int)QUEUE_MODE_STREAM_RESERVATION) 
                                                           #line 1647 
                                                           val |= 2147483648U; else 
                                                                    #line 1649 
                                                                    val &= 2147483647U;
  {
    #line 1652 
    union __anonunion___u_3329 __u;
    #line 1651 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1651 
    u8 *hw_addr = (__u.__val);
    #line 1651 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1651 
                                           writel(val,(void *)(hw_addr + (unsigned long)(queue * 64 + 12292)));
  }
  #line 1653 
  return;
}

#line 1654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool is_any_cbs_enabled(struct igb_adapter *adapter)
{
  #line 1656 
  int i;
  #line 1658 
  i = 0;
  #line 1658 
  while (adapter->num_tx_queues > i) {
    #line 1659 
    if ((int)(adapter->tx_ring[i])->cbs_enable != 0) 
                                                     #line 1660 
                                                     return (_Bool)1;
    #line 1658 
    i ++;
  }
  #line 1663 
  return (_Bool)0;
}

#line 1666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool is_any_txtime_enabled(struct igb_adapter *adapter)
{
  #line 1668 
  int i;
  #line 1670 
  i = 0;
  #line 1670 
  while (adapter->num_tx_queues > i) {
    #line 1671 
    if ((int)(adapter->tx_ring[i])->launchtime_enable != 0) 
                                                            #line 1672 
                                                            return (_Bool)1;
    #line 1670 
    i ++;
  }
  #line 1675 
  return (_Bool)0;
}

#line 1688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_config_tx_modes(struct igb_adapter *adapter, int queue)
{
  #line 1693 
  u32 tqavcc;
  #line 1693 
  u32 tqavctrl;
  #line 1694 
  u16 value;
  #line 1690 
  struct igb_ring *ring = adapter->tx_ring[queue];
  #line 1691 
  struct net_device *netdev = adapter->netdev;
  #line 1692 
  struct e1000_hw *hw = & adapter->hw;
  {
    #line 1696 
    int __ret_warn_on = hw->mac.type != (unsigned int)e1000_i210;
    #line 1696 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1697 
      ldv_inline_asm();
      #line 1698 
      ldv_inline_asm();
    }
    #line 1696 
    long tmp = (long)(__ret_warn_on != 0);
  }
  {
    #line 1697 
    int __ret_warn_on_0 = (unsigned int)queue > 1U;
    #line 1697 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 1698 
      ldv_inline_asm();
      #line 1699 
      ldv_inline_asm();
    }
    #line 1697 
    long tmp_3 = (long)(__ret_warn_on_0 != 0);
  }
  #line 1703 
  if ((int)ring->cbs_enable != 0 || (int)ring->launchtime_enable != 0) {
    #line 1704 
    set_tx_desc_fetch_prio(hw,queue,(enum tx_queue_prio)TX_QUEUE_PRIO_HIGH);
    #line 1705 
    set_queue_mode(hw,queue,(enum queue_mode)QUEUE_MODE_STREAM_RESERVATION);
  }
  else {
    #line 1707 
    set_tx_desc_fetch_prio(hw,queue,(enum tx_queue_prio)TX_QUEUE_PRIO_LOW);
    #line 1708 
    set_queue_mode(hw,queue,(enum queue_mode)QUEUE_MODE_STRICT_PRIORITY);
  }
  #line 1712 
  if ((int)ring->cbs_enable != 0 || queue == 0) {
    #line 1793 
    unsigned long long _tmp;
    #line 1722 
    if (queue == 0 && ! ring->cbs_enable) {
      #line 1724 
      ring->idleslope = 1000000;
      #line 1725 
      ring->hicredit = 1514;
    }
    #line 1732 
    tqavctrl = igb_rd32(hw,13680U);
    #line 1733 
    tqavctrl |= 256U;
    {
      #line 1735 
      union __anonunion___u_3331 __u;
      #line 1734 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1734 
      u8 *hw_addr = (__u.__val);
      #line 1734 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1734 
                                             writel(tqavctrl,(void *)(hw_addr + 13680U));
    }
    #line 1793 
    _tmp = (unsigned long long)ring->idleslope * 61034ULL + 999999ULL;
    {
      #line 1793 
      uint32_t __rem;
      #line 1793 
      uint32_t __base = 1000000U;
      #line 1793 
      __rem = (unsigned int)(_tmp % (unsigned long long)__base);
      #line 1793 
      _tmp /= (unsigned long long)__base;
      #line 1793 
      uint32_t tmp_5 = __rem;
    }
    #line 1793 
    value = (unsigned short)_tmp;
    #line 1795 
    tqavcc = igb_rd32(hw,(unsigned int)(queue * 64 + 12292));
    #line 1796 
    tqavcc &= 4294901760U;
    #line 1797 
    tqavcc = (unsigned int)value | tqavcc;
    {
      #line 1799 
      union __anonunion___u_3333 __u_0;
      #line 1798 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1798 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 1798 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 1798 
                                               writel(tqavcc,(void *)(hw_addr_0 + (unsigned long)(queue * 64 + 12292)));
    }
    {
      #line 1801 
      union __anonunion___u_3335 __u_1;
      #line 1800 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 1800 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 1800 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 1800 
                                               writel((unsigned int)(ring->hicredit * 30517) + 2147483648U,(void *)(hw_addr_1 + (unsigned long)(queue * 64 + 12300)));
    }
  }
  else {
    #line 1805 
    tqavcc = igb_rd32(hw,(unsigned int)(queue * 64 + 12292));
    #line 1806 
    tqavcc &= 4294901760U;
    {
      #line 1808 
      union __anonunion___u_3337 __u_2;
      #line 1807 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 1807 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 1807 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                               #line 1807 
                                               writel(tqavcc,(void *)(hw_addr_2 + (unsigned long)(queue * 64 + 12292)));
    }
    {
      #line 1811 
      union __anonunion___u_3339 __u_3;
      #line 1810 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 1810 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 1810 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 1810 
                                               writel(0U,(void *)(hw_addr_3 + (unsigned long)(queue * 64 + 12300)));
    }
    #line 1816 
    if (! is_any_cbs_enabled(adapter)) {
      #line 1817 
      tqavctrl = igb_rd32(hw,13680U);
      #line 1818 
      tqavctrl &= 4294967039U;
      {
        #line 1820 
        union __anonunion___u_3341 __u_4;
        #line 1819 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
        #line 1819 
        u8 *hw_addr_4 = (__u_4.__val);
        #line 1819 
        if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                                 #line 1819 
                                                 writel(tqavctrl,(void *)(hw_addr_4 + 13680U));
      }
    }
  }
  #line 1824 
  if ((int)ring->launchtime_enable != 0) {
    #line 1833 
    tqavctrl = igb_rd32(hw,13680U);
    #line 1834 
    tqavctrl |= 4294902272U;
    {
      #line 1837 
      union __anonunion___u_3343 __u_5;
      #line 1836 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 1836 
      u8 *hw_addr_5 = (__u_5.__val);
      #line 1836 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                               #line 1836 
                                               writel(tqavctrl,(void *)(hw_addr_5 + 13680U));
    }
  }
  else {
    #line 1842 
    if (! is_any_txtime_enabled(adapter)) {
      #line 1843 
      tqavctrl = igb_rd32(hw,13680U);
      #line 1844 
      tqavctrl &= 4294966783U;
      #line 1845 
      tqavctrl &= 65535U;
      {
        #line 1847 
        union __anonunion___u_3345 __u_6;
        #line 1846 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
        #line 1846 
        u8 *hw_addr_6 = (__u_6.__val);
        #line 1846 
        if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
                                                 #line 1846 
                                                 writel(tqavctrl,(void *)(hw_addr_6 + 13680U));
      }
    }
  }
  {
    #line 1855 
    bool branch;
    #line 1855 
    struct _ddebug __UNIQUE_ID_ddebug561 = {.modname = (char *)"igb", .function = (char *)"igb_config_tx_modes", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c", .format = (char *)"Qav Tx mode: cbs %s, launchtime %s, queue %d idleslope %d sendslope %d hiCredit %d locredit %d\n", .lineno = (unsigned int)1855U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1855 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug561.key.dd_key_false.key,(_Bool)0);
    #line 1855 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1855 
      char *tmp_10;
      #line 1855 
      char *tmp_11;
      #line 1855 
      ;
      #line 1855 
      ;
      #line 1855 
      ;
      #line 1855 
      ;
      #line 1855 
      ;
      #line 1855 
      if ((int)ring->launchtime_enable != 0) 
                                             #line 1855 
                                             tmp_10 = (char *)"enabled"; else 
                                                                    #line 1855 
                                                                    tmp_10 = (char *)"disabled";
      #line 1855 
      if ((int)ring->cbs_enable != 0) 
                                      #line 1855 
                                      tmp_11 = (char *)"enabled"; else 
                                                                    #line 1855 
                                                                    tmp_11 = (char *)"disabled";
      #line 1855 
      ;
      #line 1855 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug561,netdev,(char *)"Qav Tx mode: cbs %s, launchtime %s, queue %d idleslope %d sendslope %d hiCredit %d locredit %d\n",tmp_11,tmp_10,queue,ring->idleslope,ring->sendslope,ring->hicredit,ring->locredit);
    }
  }
  #line 1857 
  return;
}

#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_save_txtime_params(struct igb_adapter *adapter, int queue, bool enable)
{
  #line 1866 
  struct igb_ring *ring;
  #line 1868 
  if (queue < 0 || adapter->num_tx_queues < queue) 
                                                   #line 1869 
                                                   return -22;
  #line 1871 
  ring = adapter->tx_ring[queue];
  #line 1872 
  ring->launchtime_enable = enable;
  #line 1874 
  return 0;
}

#line 1877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_save_cbs_params(struct igb_adapter *adapter, int queue, bool enable, int idleslope, int sendslope, int hicredit, int locredit)
{
  #line 1881 
  struct igb_ring *ring;
  #line 1883 
  if (queue < 0 || adapter->num_tx_queues < queue) 
                                                   #line 1884 
                                                   return -22;
  #line 1886 
  ring = adapter->tx_ring[queue];
  #line 1888 
  ring->cbs_enable = enable;
  #line 1889 
  ring->idleslope = idleslope;
  #line 1890 
  ring->sendslope = sendslope;
  #line 1891 
  ring->hicredit = hicredit;
  #line 1892 
  ring->locredit = locredit;
  #line 1894 
  return 0;
}

#line 1906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_setup_tx_mode(struct igb_adapter *adapter)
{
  #line 1910 
  u32 val;
  #line 1908 
  struct net_device *netdev = adapter->netdev;
  #line 1909 
  struct e1000_hw *hw = & adapter->hw;
  #line 1913 
  if (hw->mac.type != (unsigned int)e1000_i210) 
                                                #line 1914 
                                                return;
  #line 1916 
  if ((int)is_fqtss_enabled(adapter) != 0) {
    #line 1917 
    int i;
    #line 1917 
    int max_queue;
    #line 1923 
    val = igb_rd32(hw,13680U);
    #line 1924 
    val |= 1025U;
    #line 1925 
    val &= 4294967279U;
    {
      #line 1927 
      union __anonunion___u_3347 __u;
      #line 1926 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1926 
      u8 *hw_addr = (__u.__val);
      #line 1926 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1926 
                                             writel(val,(void *)(hw_addr + 13680U));
    }
    #line 1931 
    val = igb_rd32(hw,13316U);
    #line 1932 
    val &= 1056964608U;
    #line 1933 
    val |= 1065480U;
    {
      #line 1936 
      union __anonunion___u_3349 __u_0;
      #line 1935 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1935 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 1935 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 1935 
                                               writel(val,(void *)(hw_addr_0 + 13316U));
    }
    #line 1937 
    val = igb_rd32(hw,9220U);
    #line 1938 
    val &= 4294967232U;
    #line 1939 
    val |= 30U;
    {
      #line 1941 
      union __anonunion___u_3351 __u_1;
      #line 1940 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 1940 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 1940 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 1940 
                                               writel(val,(void *)(hw_addr_1 + 9220U));
    }
    #line 1953 
    val = 63U;
    {
      #line 1955 
      union __anonunion___u_3353 __u_2;
      #line 1954 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 1954 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 1954 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                               #line 1954 
                                               writel(val,(void *)(hw_addr_2 + 13660U));
    }
    #line 1961 
    if (2 < adapter->num_tx_queues) 
                                    #line 1961 
                                    max_queue = 2; else 
                                                        #line 1961 
                                                        max_queue = adapter->num_tx_queues;
    #line 1964 
    i = 0;
    #line 1964 
    while (i < max_queue) {
      #line 1965 
      igb_config_tx_modes(adapter,i);
      #line 1964 
      i ++;
    }
  }
  else {
    {
      #line 1969 
      union __anonunion___u_3355 __u_3;
      #line 1968 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 1968 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 1968 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 1968 
                                               writel(162U,(void *)(hw_addr_3 + 9220U));
    }
    {
      #line 1970 
      union __anonunion___u_3357 __u_4;
      #line 1969 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 1969 
      u8 *hw_addr_4 = (__u_4.__val);
      #line 1969 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                               #line 1969 
                                               writel(67108884U,(void *)(hw_addr_4 + 13316U));
    }
    {
      #line 1971 
      union __anonunion___u_3359 __u_5;
      #line 1970 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 1970 
      u8 *hw_addr_5 = (__u_5.__val);
      #line 1970 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                               #line 1970 
                                               writel(152U,(void *)(hw_addr_5 + 13660U));
    }
    #line 1972 
    val = igb_rd32(hw,13680U);
    #line 1977 
    val &= 4294967294U;
    {
      #line 1979 
      union __anonunion___u_3361 __u_6;
      #line 1978 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
      #line 1978 
      u8 *hw_addr_6 = (__u_6.__val);
      #line 1978 
      if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
                                               #line 1978 
                                               writel(val,(void *)(hw_addr_6 + 13680U));
    }
  }
  {
    #line 1981 
    bool branch;
    #line 1981 
    struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"igb", .function = (char *)"igb_setup_tx_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c", .format = (char *)"FQTSS %s\n", .lineno = (unsigned int)1981U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1981 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
    #line 1981 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1981 
      char *tmp_9;
      #line 1981 
      if ((int)is_fqtss_enabled(adapter) != 0) 
                                               #line 1981 
                                               tmp_9 = (char *)"enabled"; else 
                                                                    #line 1981 
                                                                    tmp_9 = (char *)"disabled";
      #line 1981 
      ;
      #line 1981 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug562,netdev,(char *)"FQTSS %s\n",tmp_9);
    }
  }
  #line 1983 
  return;
}

#line 1989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_configure(struct igb_adapter *adapter)
{
  #line 1992 
  int i;
  #line 1991 
  struct net_device *netdev = adapter->netdev;
  #line 1994 
  igb_get_hw_control(adapter);
  #line 1995 
  igb_set_rx_mode(netdev);
  #line 1996 
  igb_setup_tx_mode(adapter);
  #line 1998 
  igb_restore_vlan(adapter);
  #line 2000 
  igb_setup_tctl(adapter);
  #line 2001 
  igb_setup_mrqc(adapter);
  #line 2002 
  igb_setup_rctl(adapter);
  #line 2004 
  igb_nfc_filter_restore(adapter);
  #line 2005 
  igb_configure_tx(adapter);
  #line 2006 
  igb_configure_rx(adapter);
  #line 2008 
  igb_rx_fifo_flush_82575(& adapter->hw);
  #line 2014 
  i = 0;
  #line 2014 
  while (adapter->num_rx_queues > i) {
    {
      #line 2015 
      struct igb_ring *ring = adapter->rx_ring[i];
      #line 2016 
      ;
      #line 2016 
      igb_alloc_rx_buffers(ring,(unsigned short)((int)((unsigned short)igb_desc_unused(ring))));
    }
    #line 2014 
    i ++;
  }
  #line 2018 
  return;
}

#line 2024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_power_up_link(struct igb_adapter *adapter)
{
  #line 2026 
  igb_reset_phy(& adapter->hw);
  #line 2028 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_copper) 
    #line 2029 
    igb_power_up_phy_copper(& adapter->hw); else 
                                                 #line 2031 
                                                 igb_power_up_serdes_link_82575(& adapter->hw);
  #line 2033 
  igb_setup_link(& adapter->hw);
  #line 2034 
  return;
}

#line 2040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_power_down_link(struct igb_adapter *adapter)
{
  #line 2042 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_copper) 
    #line 2043 
    igb_power_down_phy_copper_82575(& adapter->hw); else 
                                                         #line 2045 
                                                         igb_shutdown_serdes_link_82575(& adapter->hw);
  #line 2046 
  return;
}

#line 2052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_check_swap_media(struct igb_adapter *adapter)
{
  #line 2055 
  u32 ctrl_ext;
  #line 2055 
  u32 connsw;
  #line 2054 
  struct e1000_hw *hw = & adapter->hw;
  #line 2056 
  bool swap_now = (_Bool)0;
  #line 2058 
  ctrl_ext = igb_rd32(hw,24U);
  #line 2059 
  connsw = igb_rd32(hw,52U);
  #line 2065 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (connsw & 1U) == 0U) 
    #line 2067 
    swap_now = (_Bool)1;
  else 
    #line 2068 
    if (hw->phy.media_type != (unsigned int)e1000_media_type_copper && (connsw & 512U) == 0U) 
      #line 2071 
      if (adapter->copper_tries <= 3) {
        #line 2072 
        (adapter->copper_tries) ++;
        #line 2073 
        connsw |= 2U;
        {
          #line 2075 
          union __anonunion___u_3363 __u;
          #line 2074 
          __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
          #line 2074 
          u8 *hw_addr = (__u.__val);
          #line 2074 
          if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                                 #line 2074 
                                                 writel(connsw,(void *)(hw_addr + 52U));
        }
        #line 2075 
        return;
      }
      else {
        #line 2077 
        adapter->copper_tries = 0;
        #line 2078 
        if ((connsw & 1024U) != 0U && (connsw & 2048U) == 0U) {
          #line 2080 
          swap_now = (_Bool)1;
          #line 2081 
          connsw &= 4294967293U;
          {
            #line 2083 
            union __anonunion___u_3365 __u_0;
            #line 2082 
            __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
            #line 2082 
            u8 *hw_addr_0 = (__u_0.__val);
            #line 2082 
            if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                                     #line 2082 
                                                     writel(connsw,(void *)(hw_addr_0 + 52U));
          }
        }
      }
  #line 2087 
  if (! swap_now) 
                  #line 2088 
                  return;
  #line 2090 
  switch ((unsigned int)hw->phy.media_type) {
    #line 2091 
    case (unsigned int)1: 
                          #line 2091 
    ;
    #line 2092 
    netdev_info(adapter->netdev,(char *)"MAS: changing media to fiber/serdes\n");
    #line 2094 
    ctrl_ext |= 12582912U;
    #line 2096 
    adapter->flags |= 1024U;
    #line 2097 
    adapter->copper_tries = 0;
    #line 2098 
    break;
    #line 2099 
    case (unsigned int)3: 
                          #line 2099 
    ;
    #line 2100 
    case (unsigned int)2: 
                          #line 2100 
    ;
    #line 2101 
    netdev_info(adapter->netdev,(char *)"MAS: changing media to copper\n");
    #line 2103 
    ctrl_ext &= 4282384383U;
    #line 2105 
    adapter->flags |= 1024U;
    #line 2106 
    break;
    #line 2107 
    default: 
             #line 2107 
    ;
    #line 2109 
    netdev_err(adapter->netdev,(char *)"AMS: Invalid media type found, returning\n");
    #line 2111 
    break;
  }
  {
    #line 2114 
    union __anonunion___u_3367 __u_1;
    #line 2113 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 2113 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 2113 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 2113 
                                             writel(ctrl_ext,(void *)(hw_addr_1 + 24U));
  }
  #line 2115 
  return;
}

#line 2120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_up(struct igb_adapter *adapter)
{
  #line 2123 
  int i;
  #line 2122 
  struct e1000_hw *hw = & adapter->hw;
  #line 2126 
  igb_configure(adapter);
  #line 2128 
  cif_clear_bit_0(2L,& adapter->state);
  #line 2130 
  i = 0;
  #line 2130 
  while (adapter->num_q_vectors > (unsigned int)i) {
    #line 2131 
    napi_enable(& (adapter->q_vector[i])->napi);
    #line 2130 
    i ++;
  }
  #line 2133 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) 
                                                       #line 2134 
                                                       igb_configure_msix(adapter); else 
                                                                    #line 2136 
                                                                    igb_assign_vector(adapter->q_vector[0],0);
  #line 2139 
  igb_rd32(hw,46700U);
  #line 2140 
  igb_rd32(hw,192U);
  #line 2141 
  igb_irq_enable(adapter);
  #line 2144 
  if (adapter->vfs_allocated_count != 0U) {
    #line 2145 
    u32 reg_data = igb_rd32(hw,24U);
    #line 2147 
    reg_data |= 16384U;
    {
      #line 2149 
      union __anonunion___u_3369 __u;
      #line 2148 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 2148 
      u8 *hw_addr = (__u.__val);
      #line 2148 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 2148 
                                             writel(reg_data,(void *)(hw_addr + 24U));
    }
  }
  #line 2151 
  netif_tx_start_all_queues(adapter->netdev);
  #line 2154 
  hw->mac.get_link_status = (_Bool)1;
  #line 2155 
  cif_schedule_work(& adapter->watchdog_task);
  #line 2157 
  if (((unsigned long)adapter->flags & 16384UL) != 0UL && ! hw->dev_spec._82575.eee_disable) 
    #line 2159 
    adapter->eee_advert = (unsigned short)6U;
  #line 2161 
  return 0;
}

#line 2164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_down(struct igb_adapter *adapter)
{
  #line 2168 
  u32 tctl;
  #line 2168 
  u32 rctl;
  #line 2169 
  int i;
  #line 2166 
  struct net_device *netdev = adapter->netdev;
  #line 2167 
  struct e1000_hw *hw = & adapter->hw;
  #line 2174 
  cif_set_bit_0(2L,& adapter->state);
  #line 2177 
  rctl = igb_rd32(hw,256U);
  {
    #line 2179 
    union __anonunion___u_3371 __u;
    #line 2178 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2178 
    u8 *hw_addr = (__u.__val);
    #line 2178 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2178 
                                           writel(rctl & 4294967293U,(void *)(hw_addr + 256U));
  }
  #line 2181 
  igb_nfc_filter_exit(adapter);
  #line 2183 
  netif_carrier_off(netdev);
  #line 2184 
  netif_tx_stop_all_queues(netdev);
  #line 2187 
  tctl = igb_rd32(hw,1024U);
  #line 2188 
  tctl &= 4294967293U;
  {
    #line 2190 
    union __anonunion___u_3373 __u_0;
    #line 2189 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 2189 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 2189 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 2189 
                                             writel(tctl,(void *)(hw_addr_0 + 1024U));
  }
  #line 2191 
  igb_rd32(hw,8U);
  #line 2192 
  usleep_range(10000UL,11000UL);
  #line 2194 
  igb_irq_disable(adapter);
  #line 2196 
  adapter->flags &= 4294966783U;
  #line 2198 
  i = 0;
  #line 2198 
  while (adapter->num_q_vectors > (unsigned int)i) {
    #line 2199 
    if (adapter->q_vector[i] != (struct igb_q_vector *)0) {
      #line 2200 
      napi_synchronize(& (adapter->q_vector[i])->napi);
      #line 2201 
      napi_disable(& (adapter->q_vector[i])->napi);
    }
    #line 2198 
    i ++;
  }
  #line 2205 
  cif_del_timer_sync(& adapter->watchdog_timer);
  #line 2206 
  cif_del_timer_sync(& adapter->phy_info_timer);
  #line 2209 
  cif_spin_lock_stats64_lock_of_igb_adapter_0(& adapter->stats64_lock);
  #line 2210 
  igb_update_stats(adapter);
  #line 2211 
  cif_spin_unlock_stats64_lock_of_igb_adapter_0(& adapter->stats64_lock);
  #line 2213 
  adapter->link_speed = (unsigned short)0U;
  #line 2214 
  adapter->link_duplex = (unsigned short)0U;
  #line 2216 
  if (pci_channel_offline(adapter->pdev) == 0) 
                                               #line 2217 
                                               igb_reset(adapter);
  #line 2220 
  adapter->flags &= 4294934527U;
  #line 2222 
  igb_clean_all_tx_rings(adapter);
  #line 2223 
  igb_clean_all_rx_rings(adapter);
  #line 2227 
  igb_setup_dca(adapter);
  #line 2228 
  return;
}

#line 2231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_reinit_locked(struct igb_adapter *adapter)
{
  {
    #line 2233 
    int __ret_warn_on = ((unsigned long)preempt_count() & 2096896UL) != 0UL;
    #line 2233 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2234 
      ldv_inline_asm();
      #line 2235 
      ldv_inline_asm();
    }
    #line 2233 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 2234 
  while (1) {
    #line 2234 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 2234 
                                                             break;
    #line 2235 
    usleep_range(1000UL,2000UL);
  }
  #line 2236 
  igb_down(adapter);
  #line 2237 
  igb_up(adapter);
  #line 2238 
  cif_clear_bit_0(1L,& adapter->state);
  #line 2239 
  return;
}

#line 2245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_enable_mas(struct igb_adapter *adapter)
{
  #line 2247 
  struct e1000_hw *hw = & adapter->hw;
  #line 2248 
  u32 connsw = igb_rd32(hw,52U);
  #line 2251 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (connsw & 512U) == 0U) {
    #line 2253 
    connsw |= 4U;
    #line 2254 
    connsw |= 1U;
    {
      #line 2256 
      union __anonunion___u_3375 __u;
      #line 2255 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 2255 
      u8 *hw_addr = (__u.__val);
      #line 2255 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 2255 
                                             writel(connsw,(void *)(hw_addr + 52U));
    }
    #line 2256 
    igb_rd32(hw,8U);
  }
  #line 2258 
  return;
}

#line 2260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_reset(struct igb_adapter *adapter)
{
  #line 2266 
  u32 pba;
  #line 2266 
  u32 hwm;
  #line 2262 
  struct pci_dev *pdev = adapter->pdev;
  #line 2263 
  struct e1000_hw *hw = & adapter->hw;
  #line 2264 
  struct e1000_mac_info *mac = & hw->mac;
  #line 2265 
  struct e1000_fc_info *fc = & hw->fc;
  #line 2271 
  switch ((unsigned int)mac->type) {
    #line 2272 
    case (unsigned int)4: 
                          #line 2272 
    ;
    #line 2273 
    case (unsigned int)5: 
                          #line 2273 
    ;
    #line 2274 
    case (unsigned int)3: 
                          #line 2274 
    ;
    #line 2275 
    pba = igb_rd32(hw,9220U);
    #line 2276 
    pba = (unsigned int)igb_rxpbs_adjust_82580(pba);
    #line 2277 
    break;
    #line 2278 
    case (unsigned int)2: 
                          #line 2278 
    ;
    #line 2279 
    pba = igb_rd32(hw,9220U);
    #line 2280 
    pba &= 127U;
    #line 2281 
    break;
    #line 2282 
    case (unsigned int)1: 
                          #line 2282 
    ;
    #line 2283 
    case (unsigned int)6: 
                          #line 2283 
    ;
    #line 2284 
    case (unsigned int)7: 
                          #line 2284 
    ;
    #line 2285 
    default: 
             #line 2285 
    ;
    #line 2286 
    pba = 34U;
    #line 2287 
    break;
  }
  #line 2290 
  if (mac->type == (unsigned int)e1000_82575) {
    #line 2291 
    u32 min_rx_space;
    #line 2291 
    u32 min_tx_space;
    #line 2291 
    u32 needed_tx_space;
    {
      #line 2295 
      union __anonunion___u_3377 __u;
      #line 2294 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 2294 
      u8 *hw_addr = (__u.__val);
      #line 2294 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 2294 
                                             writel(pba,(void *)(hw_addr + 4096U));
    }
    #line 2303 
    min_rx_space = 10U;
    #line 2310 
    min_tx_space = adapter->max_frame_size;
    #line 2311 
    min_tx_space += 12U;
    #line 2312 
    min_tx_space = (min_tx_space + 511U) / 512U;
    #line 2315 
    needed_tx_space = min_tx_space - (igb_rd32(hw,4096U) >> 16);
    #line 2321 
    if (needed_tx_space < pba) {
      #line 2322 
      pba -= needed_tx_space;
      #line 2327 
      if (pba < min_rx_space) 
                              #line 2328 
                              pba = min_rx_space;
    }
    {
      #line 2333 
      union __anonunion___u_3379 __u_0;
      #line 2332 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 2332 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 2332 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 2332 
                                               writel(pba,(void *)(hw_addr_0 + 4096U));
    }
  }
  #line 2343 
  hwm = ((pba << 10) - adapter->max_frame_size) + 4294957568U;
  #line 2345 
  fc->high_water = hwm & 4294967280U;
  #line 2346 
  fc->low_water = fc->high_water + 4294967280U;
  #line 2347 
  fc->pause_time = (unsigned short)65535U;
  #line 2348 
  fc->send_xon = (_Bool)1;
  #line 2349 
  fc->current_mode = fc->requested_mode;
  #line 2352 
  if (adapter->vfs_allocated_count != 0U) {
    #line 2353 
    int i;
    #line 2355 
    i = 0;
    #line 2355 
    while (adapter->vfs_allocated_count > (unsigned int)i) {
      #line 2356 
      (adapter->vf_data + (unsigned long)i)->flags &= 8U;
      #line 2355 
      i ++;
    }
    #line 2359 
    igb_ping_all_vfs(adapter);
    {
      #line 2363 
      union __anonunion___u_3381 __u_1;
      #line 2362 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 2362 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 2362 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 2362 
                                               writel(0U,(void *)(hw_addr_1 + 3212U));
    }
    {
      #line 2364 
      union __anonunion___u_3383 __u_2;
      #line 2363 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 2363 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 2363 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                               #line 2363 
                                               writel(0U,(void *)(hw_addr_2 + 3216U));
    }
  }
  #line 2367 
  (*(hw->mac.ops.reset_hw))(hw);
  {
    #line 2369 
    union __anonunion___u_3385 __u_3;
    #line 2368 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 2368 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 2368 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                             #line 2368 
                                             writel(0U,(void *)(hw_addr_3 + 22528U));
  }
  #line 2370 
  if (((unsigned long)adapter->flags & 1024UL) != 0UL) {
    #line 2372 
    (*(adapter->ei.get_invariants))(hw);
    #line 2373 
    adapter->flags &= 4294966271U;
  }
  #line 2375 
  if ((mac->type == (unsigned int)e1000_82575 || mac->type == (unsigned int)e1000_i350) && ((unsigned long)adapter->flags & 4096UL) != 0UL) 
    #line 2377 
    igb_enable_mas(adapter);
  #line 2379 
  if ((*(hw->mac.ops.init_hw))(hw) != 0) 
                                         #line 2380 
                                         _dev_err(& pdev->dev,(char *)"Hardware Error\n");
  #line 2383 
  igb_flush_mac_table(adapter);
  #line 2384 
  __dev_uc_unsync(adapter->netdev,(int (*)(struct net_device *, unsigned char *))0);
  #line 2387 
  igb_set_default_mac_filter(adapter);
  #line 2392 
  if (! hw->mac.autoneg) 
                         #line 2393 
                         igb_force_mac_fc(hw);
  #line 2395 
  igb_init_dmac(adapter,pba);
  #line 2398 
  if (! test_bit(2L,& adapter->state)) 
    #line 2399 
    if (mac->type == (unsigned int)e1000_i350 && (unsigned int)hw->bus.func == 0U) 
      #line 2403 
      if ((int)adapter->ets != 0) 
                                  #line 2404 
                                  (*(mac->ops.init_thermal_sensor_thresh))(hw);
  #line 2409 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
    #line 2410 
    switch ((unsigned int)mac->type) {
      #line 2411 
      case (unsigned int)4: 
                            #line 2411 
      ;
      #line 2412 
      case (unsigned int)6: 
                            #line 2412 
      ;
      #line 2413 
      case (unsigned int)7: 
                            #line 2413 
      ;
      #line 2414 
      igb_set_eee_i350(hw,(_Bool)1,(_Bool)1);
      #line 2415 
      break;
      #line 2416 
      case (unsigned int)5: 
                            #line 2416 
      ;
      #line 2417 
      igb_set_eee_i354(hw,(_Bool)1,(_Bool)1);
      #line 2418 
      break;
      #line 2419 
      default: 
               #line 2419 
      ;
      #line 2420 
      break;
    }
  #line 2423 
  if (! netif_running(adapter->netdev)) 
                                        #line 2424 
                                        igb_power_down_link(adapter);
  #line 2426 
  igb_update_mng_vlan(adapter);
  {
    #line 2430 
    union __anonunion___u_3387 __u_4;
    #line 2429 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 2429 
    u8 *hw_addr_4 = (__u_4.__val);
    #line 2429 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                             #line 2429 
                                             writel(33024U,(void *)(hw_addr_4 + 56U));
  }
  #line 2432 
  if (((unsigned long)adapter->ptp_flags & 1UL) != 0UL) 
                                                        #line 2433 
                                                        igb_ptp_reset(adapter);
  #line 2435 
  igb_get_phy_info(hw);
  #line 2436 
  return;
}

#line 2438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static netdev_features_t igb_fix_features(struct net_device *netdev, netdev_features_t features)
{
  #line 2444 
  if ((features & 256ULL) != 0ULL) 
                                   #line 2445 
                                   features |= 128ULL; else 
                                                            #line 2447 
                                                            features &= 18446744073709551487ULL;
  #line 2449 
  return features;
}

#line 2452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 2455 
  netdev_features_t changed = netdev->features ^ features;
  #line 2456 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 2458 
  if ((changed & 256ULL) != 0ULL) 
                                  #line 2459 
                                  igb_vlan_mode(netdev,features);
  #line 2461 
  if ((changed & 8933531975680ULL) == 0ULL) 
                                            #line 2462 
                                            return 0;
  #line 2464 
  if ((features & 137438953472ULL) == 0ULL) {
    #line 2469 
    struct igb_nfc_filter *tmp_1;
    #line 2469 
    void *__mptr;
    #line 2465 
    struct hlist_node *node2;
    #line 2466 
    struct igb_nfc_filter *rule;
    #line 2468 
    cif_spin_lock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
    {
      #line 2469 
      struct hlist_node *____ptr = adapter->nfc_filter_list.first;
      #line 2469 
      if (____ptr != (struct hlist_node *)0) {
        #line 2469 
        __mptr = (void *)____ptr;
        #line 2469 
        tmp_1 = ((struct igb_nfc_filter *)__mptr);
      }
      else 
           #line 2469 
           tmp_1 = (struct igb_nfc_filter *)0;
      }
    #line 2469 
    rule = tmp_1;
    #line 2469 
    while (1) {
      #line 2469 
      void *__mptr_0;
      #line 2469 
      struct igb_nfc_filter *tmp_4;
      #line 2469 
      if (rule != (struct igb_nfc_filter *)0) {
        #line 2469 
        node2 = rule->nfc_node.next;
        #line 2469 
        if (! (1 != 0)) 
                        #line 2469 
                        break;
      }
      else 
           #line 2469 
           break;
      #line 2471 
      igb_erase_filter(adapter,rule);
      #line 2472 
      hlist_del_0(& rule->nfc_node);
      #line 2473 
      kfree((void *)rule);
      {
        #line 2469 
        struct hlist_node *____ptr_0 = node2;
        #line 2469 
        if (____ptr_0 != (struct hlist_node *)0) {
          #line 2469 
          __mptr_0 = (void *)____ptr_0;
          #line 2469 
          tmp_4 = ((struct igb_nfc_filter *)__mptr_0);
        }
        else 
             #line 2469 
             tmp_4 = (struct igb_nfc_filter *)0;
        }
      #line 2469 
      rule = tmp_4;
    }
    #line 2475 
    cif_spin_unlock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
    #line 2476 
    adapter->nfc_filter_count = 0U;
  }
  #line 2479 
  netdev->features = features;
  #line 2481 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2482 
                                       igb_reinit_locked(adapter); else 
                                                                    #line 2484 
                                                                    igb_reset(adapter);
  #line 2486 
  return 1;
}

#line 2489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_fdb_add(struct ndmsg *ndm, struct nlattr **tb, struct net_device *dev, unsigned char *addr, u16 vid, u16 flags, struct netlink_ext_ack *extack)
{
  #line 2496 
  if ((int)is_unicast_ether_addr(addr) != 0) 
                                             #line 2496 
                                             goto _LOR;
  else {
    #line 2496 
    if ((int)is_link_local_ether_addr(addr) != 0) {
      #line 2496 
      _LOR: {
              #line 2497 
              struct igb_adapter *adapter = netdev_priv(dev);
              #line 2498 
              int vfn = (int)adapter->vfs_allocated_count;
              #line 2500 
              ;
              #line 2500 
              if (dev->uc.count >= igb_available_rars(adapter,
                           (unsigned char)((int)((unsigned char)vfn)))) 
                #line 2501 
                return -12;
            }
    }
  }
  #line 2504 
  return ndo_dflt_fdb_add(ndm,tb,dev,addr,(unsigned short)((int)vid),
                         (unsigned short)((int)flags));
}

#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static netdev_features_t igb_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 2514 
  unsigned int network_hdr_len;
  #line 2514 
  unsigned int mac_hdr_len;
  #line 2517 
  mac_hdr_len = (unsigned int)(skb_network_header(skb) - skb->data);
  #line 2518 
  if ((long)(mac_hdr_len > 127U) != 0L) 
                                        #line 2519 
                                        return features & 18446744030758764407ULL;
  #line 2526 
  network_hdr_len = (unsigned int)(skb_checksum_start(skb) - skb_network_header(skb));
  #line 2527 
  if ((long)(network_hdr_len > 511U) != 0L) 
                                            #line 2528 
                                            return features & 18446744030758764535ULL;
  #line 2537 
  if ((unsigned int)skb->encapsulation != 0U && (features & 524288ULL) == 0ULL) 
    #line 2538 
    features &= 18446744073709486079ULL;
  #line 2540 
  return features;
}

#line 2543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_offload_apply(struct igb_adapter *adapter, s32 queue)
{
  #line 2545 
  if (! is_fqtss_enabled(adapter)) {
    #line 2546 
    enable_fqtss(adapter,(_Bool)1);
    #line 2547 
    return;
  }
  #line 2550 
  igb_config_tx_modes(adapter,queue);
  #line 2552 
  if (! is_any_cbs_enabled(adapter)) {
    #line 2552 
    if (! is_any_txtime_enabled(adapter)) 
                                          #line 2553 
                                          enable_fqtss(adapter,(_Bool)0);
  }
  #line 2554 
  return;
}

#line 2556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_offload_cbs(struct igb_adapter *adapter, struct tc_cbs_qopt_offload *qopt)
{
  #line 2560 
  int err;
  #line 2559 
  struct e1000_hw *hw = & adapter->hw;
  #line 2563 
  if (hw->mac.type != (unsigned int)e1000_i210) 
                                                #line 2564 
                                                return -95;
  #line 2567 
  if ((unsigned int)qopt->queue > 1U) 
                                      #line 2568 
                                      return -22;
  #line 2570 
  err = igb_save_cbs_params(adapter,qopt->queue,(_Bool)((unsigned int)qopt->enable != 0U),qopt->idleslope,qopt->sendslope,qopt->hicredit,qopt->locredit);
  #line 2573 
  if (err != 0) 
                #line 2574 
                return err;
  #line 2576 
  igb_offload_apply(adapter,qopt->queue);
  #line 2578 
  return 0;
}

#line 2584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_parse_cls_flower(struct igb_adapter *adapter, struct flow_cls_offload *f, int traffic_class, struct igb_nfc_filter *input)
{
  #line 2589 
  struct flow_rule *rule = flow_cls_offload_flow_rule(f);
  #line 2590 
  struct flow_dissector *dissector = rule->match.dissector;
  #line 2591 
  struct netlink_ext_ack *extack = f->common.extack;
  #line 2593 
  if (((unsigned long)dissector->used_keys & 18446744073709550460UL) != 0UL) {
    {
      #line 2598 
      char __msg[81U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};
      #line 2598 
      struct netlink_ext_ack *__extack = extack;
      #line 2598 
      if (__extack != (struct netlink_ext_ack *)0) 
                                                   #line 2598 
                                                   __extack->_msg = (char *)(& __msg);
    }
    #line 2600 
    return -95;
  }
  #line 2603 
  if ((int)flow_rule_match_key(rule,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_ETH_ADDRS) != 0) {
    #line 2604 
    struct flow_match_eth_addrs match;
    #line 2606 
    flow_rule_match_eth_addrs(rule,& match);
    #line 2607 
    if (! is_zero_ether_addr((u8 *)(& (match.mask)->dst))) {
      #line 2608 
      if (! is_broadcast_ether_addr((u8 *)(& (match.mask)->dst))) {
        {
          #line 2609 
          char __msg_0[63U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};
          #line 2609 
          struct netlink_ext_ack *__extack_0 = extack;
          #line 2609 
          if (__extack_0 != (struct netlink_ext_ack *)0) 
                                                         #line 2609 
                                                         __extack_0->_msg = (char *)(& __msg_0);
        }
        #line 2610 
        return -22;
      }
      #line 2613 
      input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 8U);
      #line 2615 
      ether_addr_copy((u8 *)(& input->filter.dst_addr),(u8 *)(& (match.key)->dst));
    }
    #line 2618 
    if (! is_zero_ether_addr((u8 *)(& (match.mask)->src))) {
      #line 2619 
      if (! is_broadcast_ether_addr((u8 *)(& (match.mask)->src))) {
        {
          #line 2620 
          char __msg_1[58U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};
          #line 2620 
          struct netlink_ext_ack *__extack_1 = extack;
          #line 2620 
          if (__extack_1 != (struct netlink_ext_ack *)0) 
                                                         #line 2620 
                                                         __extack_1->_msg = (char *)(& __msg_1);
        }
        #line 2621 
        return -22;
      }
      #line 2624 
      input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 4U);
      #line 2626 
      ether_addr_copy((u8 *)(& input->filter.src_addr),(u8 *)(& (match.key)->src));
    }
  }
  #line 2630 
  if ((int)flow_rule_match_key(rule,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_BASIC) != 0) {
    #line 2631 
    struct flow_match_basic match_0;
    #line 2633 
    flow_rule_match_basic(rule,& match_0);
    #line 2634 
    if ((unsigned int)(match_0.mask)->n_proto != 0U) {
      #line 2635 
      if ((unsigned int)(match_0.mask)->n_proto != 65535U) {
        {
          #line 2636 
          char __msg_2[54U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};
          #line 2636 
          struct netlink_ext_ack *__extack_2 = extack;
          #line 2636 
          if (__extack_2 != (struct netlink_ext_ack *)0) 
                                                         #line 2636 
                                                         __extack_2->_msg = (char *)(& __msg_2);
        }
        #line 2637 
        return -22;
      }
      #line 2640 
      input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 1U);
      #line 2641 
      input->filter.etype = (match_0.key)->n_proto;
    }
  }
  #line 2645 
  if ((int)flow_rule_match_key(rule,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_VLAN) != 0) {
    #line 2646 
    struct flow_match_vlan match_1;
    #line 2648 
    flow_rule_match_vlan(rule,& match_1);
    #line 2649 
    if ((unsigned int)(match_1.mask)->__anonCompField_flow_dissector_key_vlan_78.__anonCompField___anonunion_2752_77.vlan_priority != 0U) {
      #line 2650 
      if ((unsigned int)(match_1.mask)->__anonCompField_flow_dissector_key_vlan_78.__anonCompField___anonunion_2752_77.vlan_priority != 7U) {
        {
          #line 2651 
          char __msg_3[51U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};
          #line 2651 
          struct netlink_ext_ack *__extack_3 = extack;
          #line 2651 
          if (__extack_3 != (struct netlink_ext_ack *)0) 
                                                         #line 2651 
                                                         __extack_3->_msg = (char *)(& __msg_3);
        }
        #line 2652 
        return -22;
      }
      #line 2655 
      input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 2U);
      #line 2656 
      input->filter.vlan_tci = (unsigned short)(match_1.key)->__anonCompField_flow_dissector_key_vlan_78.__anonCompField___anonunion_2752_77.vlan_priority;
    }
  }
  #line 2660 
  input->action = (unsigned short)traffic_class;
  #line 2661 
  input->cookie = f->cookie;
  #line 2663 
  return 0;
}

#line 2666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_configure_clsflower(struct igb_adapter *adapter, struct flow_cls_offload *cls_flower)
{
  #line 2689 
  void *__mptr;
  #line 2689 
  struct igb_nfc_filter *tmp_1;
  #line 2698 
  void *__mptr_1;
  #line 2698 
  struct igb_nfc_filter *tmp_8;
  #line 2670 
  struct igb_nfc_filter *filter;
  #line 2670 
  struct igb_nfc_filter *f;
  #line 2671 
  int err;
  #line 2671 
  int tc;
  #line 2669 
  struct netlink_ext_ack *extack = cls_flower->common.extack;
  #line 2673 
  tc = tc_classid_to_hwtc(adapter->netdev,cls_flower->classid);
  #line 2674 
  if (tc < 0) {
    {
      #line 2675 
      char __msg[27U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};
      #line 2675 
      struct netlink_ext_ack *__extack = extack;
      #line 2675 
      if (__extack != (struct netlink_ext_ack *)0) 
                                                   #line 2675 
                                                   __extack->_msg = (char *)(& __msg);
    }
    #line 2676 
    return -22;
  }
  #line 2679 
  filter = (struct igb_nfc_filter *)kzalloc_0(56UL,3264U);
  #line 2680 
  if (filter == (struct igb_nfc_filter *)0) 
                                            #line 2681 
                                            return -12;
  #line 2683 
  err = igb_parse_cls_flower(adapter,cls_flower,tc,filter);
  #line 2684 
  if (err < 0) 
               #line 2685 
               goto err_parse;
  #line 2687 
  cif_spin_lock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
  {
    #line 2689 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 2689 
    if (____ptr != (struct hlist_node *)0) {
      #line 2689 
      __mptr = (void *)____ptr;
      #line 2689 
      tmp_1 = ((struct igb_nfc_filter *)__mptr);
    }
    else 
         #line 2689 
         tmp_1 = (struct igb_nfc_filter *)0;
    }
  #line 2689 
  f = tmp_1;
  #line 2689 
  while (f != (struct igb_nfc_filter *)0) {
    #line 2689 
    void *__mptr_0;
    #line 2689 
    struct igb_nfc_filter *tmp_4;
    #line 2690 
    if (memcmp((void *)(& f->filter),(void *)(& filter->filter),18UL) == 0) {
      #line 2691 
      err = -17;
      {
        #line 2692 
        char __msg_0[43U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};
        #line 2692 
        struct netlink_ext_ack *__extack_0 = extack;
        #line 2692 
        if (__extack_0 != (struct netlink_ext_ack *)0) 
                                                       #line 2692 
                                                       __extack_0->_msg = (char *)(& __msg_0);
      }
      #line 2694 
      goto err_locked;
    }
    {
      #line 2689 
      struct hlist_node *____ptr_0 = f->nfc_node.next;
      #line 2689 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 2689 
        __mptr_0 = (void *)____ptr_0;
        #line 2689 
        tmp_4 = ((struct igb_nfc_filter *)__mptr_0);
      }
      else 
           #line 2689 
           tmp_4 = (struct igb_nfc_filter *)0;
      }
    #line 2689 
    f = tmp_4;
  }
  {
    #line 2698 
    struct hlist_node *____ptr_1 = adapter->cls_flower_list.first;
    #line 2698 
    if (____ptr_1 != (struct hlist_node *)0) {
      #line 2698 
      __mptr_1 = (void *)____ptr_1;
      #line 2698 
      tmp_8 = ((struct igb_nfc_filter *)__mptr_1);
    }
    else 
         #line 2698 
         tmp_8 = (struct igb_nfc_filter *)0;
    }
  #line 2698 
  f = tmp_8;
  #line 2698 
  while (f != (struct igb_nfc_filter *)0) {
    #line 2698 
    void *__mptr_2;
    #line 2698 
    struct igb_nfc_filter *tmp_11;
    #line 2699 
    if (memcmp((void *)(& f->filter),(void *)(& filter->filter),18UL) == 0) {
      #line 2700 
      err = -17;
      {
        #line 2701 
        char __msg_1[46U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};
        #line 2701 
        struct netlink_ext_ack *__extack_1 = extack;
        #line 2701 
        if (__extack_1 != (struct netlink_ext_ack *)0) 
                                                       #line 2701 
                                                       __extack_1->_msg = (char *)(& __msg_1);
      }
      #line 2703 
      goto err_locked;
    }
    {
      #line 2698 
      struct hlist_node *____ptr_2 = f->nfc_node.next;
      #line 2698 
      if (____ptr_2 != (struct hlist_node *)0) {
        #line 2698 
        __mptr_2 = (void *)____ptr_2;
        #line 2698 
        tmp_11 = ((struct igb_nfc_filter *)__mptr_2);
      }
      else 
           #line 2698 
           tmp_11 = (struct igb_nfc_filter *)0;
      }
    #line 2698 
    f = tmp_11;
  }
  #line 2707 
  err = igb_add_filter(adapter,filter);
  #line 2708 
  if (err < 0) {
    {
      #line 2709 
      char __msg_2[41U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};
      #line 2709 
      struct netlink_ext_ack *__extack_2 = extack;
      #line 2709 
      if (__extack_2 != (struct netlink_ext_ack *)0) 
                                                     #line 2709 
                                                     __extack_2->_msg = (char *)(& __msg_2);
    }
    #line 2710 
    goto err_locked;
  }
  #line 2713 
  hlist_add_head_0(& filter->nfc_node,& adapter->cls_flower_list);
  #line 2715 
  cif_spin_unlock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
  #line 2717 
  return 0;
  #line 2719 
  err_locked: 
              #line 2719 
  ;
  #line 2720 
  cif_spin_unlock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
  #line 2722 
  err_parse: 
             #line 2722 
  ;
  #line 2723 
  kfree((void *)filter);
  #line 2725 
  return err;
}

#line 2728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_delete_clsflower(struct igb_adapter *adapter, struct flow_cls_offload *cls_flower)
{
  #line 2736 
  struct igb_nfc_filter *tmp_0;
  #line 2736 
  void *__mptr;
  #line 2731 
  struct igb_nfc_filter *filter;
  #line 2732 
  int err;
  #line 2734 
  cif_spin_lock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
  {
    #line 2736 
    struct hlist_node *____ptr = adapter->cls_flower_list.first;
    #line 2736 
    if (____ptr != (struct hlist_node *)0) {
      #line 2736 
      __mptr = (void *)____ptr;
      #line 2736 
      tmp_0 = ((struct igb_nfc_filter *)__mptr);
    }
    else 
         #line 2736 
         tmp_0 = (struct igb_nfc_filter *)0;
    }
  #line 2736 
  filter = tmp_0;
  #line 2736 
  while (filter != (struct igb_nfc_filter *)0) {
    #line 2736 
    void *__mptr_0;
    #line 2736 
    struct igb_nfc_filter *tmp_3;
    #line 2737 
    if (filter->cookie == cls_flower->cookie) 
                                              #line 2738 
                                              break;
    {
      #line 2736 
      struct hlist_node *____ptr_0 = filter->nfc_node.next;
      #line 2736 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 2736 
        __mptr_0 = (void *)____ptr_0;
        #line 2736 
        tmp_3 = ((struct igb_nfc_filter *)__mptr_0);
      }
      else 
           #line 2736 
           tmp_3 = (struct igb_nfc_filter *)0;
      }
    #line 2736 
    filter = tmp_3;
  }
  #line 2740 
  if (filter == (struct igb_nfc_filter *)0) {
    #line 2741 
    err = -2;
    #line 2742 
    goto out;
  }
  #line 2745 
  err = igb_erase_filter(adapter,filter);
  #line 2746 
  if (err < 0) 
               #line 2747 
               goto out;
  #line 2749 
  hlist_del_0(& filter->nfc_node);
  #line 2750 
  kfree((void *)filter);
  #line 2752 
  out: 
       #line 2752 
  ;
  #line 2753 
  cif_spin_unlock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
  #line 2755 
  return err;
}

#line 2758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_setup_tc_cls_flower(struct igb_adapter *adapter, struct flow_cls_offload *cls_flower)
{
  #line 2761 
  switch ((unsigned int)cls_flower->command) {
    #line 2762 
    case (unsigned int)0: 
                          #line 2762 
    ;
    #line 2763 
    return igb_configure_clsflower(adapter,cls_flower);
    #line 2764 
    case (unsigned int)1: 
                          #line 2764 
    ;
    #line 2765 
    return igb_delete_clsflower(adapter,cls_flower);
    #line 2766 
    case (unsigned int)2: 
                          #line 2766 
    ;
    #line 2767 
    return -95;
    #line 2768 
    default: 
             #line 2768 
    ;
    #line 2769 
    return -95;
  }
}

#line 2773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_setup_tc_block_cb(enum tc_setup_type type, void *type_data, void *cb_priv)
{
  #line 2776 
  struct igb_adapter *adapter = (struct igb_adapter *)cb_priv;
  #line 2778 
  if (! tc_cls_can_offload_and_chain0(adapter->netdev,
                                    (struct flow_cls_common_offload *)type_data)) 
    #line 2779 
    return -95;
  #line 2781 
  switch ((unsigned int)type) {
    #line 2782 
    case (unsigned int)2: 
                          #line 2782 
    ;
    #line 2783 
    return igb_setup_tc_cls_flower(adapter,(struct flow_cls_offload *)type_data);
    #line 2785 
    default: 
             #line 2785 
    ;
    #line 2786 
    return -95;
  }
}

#line 2790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_offload_txtime(struct igb_adapter *adapter, struct tc_etf_qopt_offload *qopt)
{
  #line 2794 
  int err;
  #line 2793 
  struct e1000_hw *hw = & adapter->hw;
  #line 2797 
  if (hw->mac.type != (unsigned int)e1000_i210) 
                                                #line 2798 
                                                return -95;
  #line 2801 
  if ((unsigned int)qopt->queue > 1U) 
                                      #line 2802 
                                      return -22;
  #line 2804 
  err = igb_save_txtime_params(adapter,qopt->queue,(_Bool)((unsigned int)qopt->enable != 0U));
  #line 2805 
  if (err != 0) 
                #line 2806 
                return err;
  #line 2808 
  igb_offload_apply(adapter,qopt->queue);
  #line 2810 
  return 0;
}

#line 2813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct list_head igb_block_cb_list = {.next = & igb_block_cb_list, .prev = & igb_block_cb_list};
#line 2815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_setup_tc(struct net_device *dev, enum tc_setup_type type, void *type_data)
{
  #line 2818 
  struct igb_adapter *adapter = netdev_priv(dev);
  #line 2820 
  switch ((unsigned int)type) {
    #line 2821 
    case (unsigned int)6: 
                          #line 2821 
    ;
    #line 2822 
    return igb_offload_cbs(adapter,(struct tc_cbs_qopt_offload *)type_data);
    #line 2823 
    case (unsigned int)5: 
                          #line 2823 
    ;
    #line 2824 
    return flow_block_cb_setup_simple((struct flow_block_offload *)type_data,
                                   & igb_block_cb_list,
                                   & igb_setup_tc_block_cb,(void *)adapter,
                                   (void *)adapter,(_Bool)1);
    #line 2829 
    case (unsigned int)10: 
                           #line 2829 
    ;
    #line 2830 
    return igb_offload_txtime(adapter,(struct tc_etf_qopt_offload *)type_data);
    #line 2832 
    default: 
             #line 2832 
    ;
    #line 2833 
    return -95;
  }
}

#line 2837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct net_device_ops igb_netdev_ops = {.ndo_open = & igb_open, .ndo_stop = & igb_close, .ndo_start_xmit = & igb_xmit_frame, .ndo_features_check = & igb_features_check, .ndo_set_rx_mode = & igb_set_rx_mode, .ndo_set_mac_address = & igb_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & igb_ioctl, .ndo_change_mtu = & igb_change_mtu, .ndo_tx_timeout = & igb_tx_timeout, .ndo_get_stats64 = & igb_get_stats64, .ndo_vlan_rx_add_vid = & igb_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & igb_vlan_rx_kill_vid, .ndo_set_vf_mac = & igb_ndo_set_vf_mac, .ndo_set_vf_vlan = & igb_ndo_set_vf_vlan, .ndo_set_vf_rate = & igb_ndo_set_vf_bw, .ndo_set_vf_spoofchk = & igb_ndo_set_vf_spoofchk, .ndo_set_vf_trust = & igb_ndo_set_vf_trust, .ndo_get_vf_config = & igb_ndo_get_vf_config, .ndo_setup_tc = & igb_setup_tc, .ndo_fix_features = & igb_fix_features, .ndo_set_features = & igb_set_features, .ndo_fdb_add = & igb_ndo_fdb_add};
#line 2867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_set_fw_version(struct igb_adapter *adapter)
{
  #line 2870 
  struct e1000_fw_version fw;
  #line 2869 
  struct e1000_hw *hw = & adapter->hw;
  #line 2872 
  igb_get_fw_version(hw,& fw);
  #line 2874 
  switch ((unsigned int)hw->mac.type) {
    #line 2875 
    case (unsigned int)6: 
                          #line 2875 
    ;
    #line 2876 
    case (unsigned int)7: 
                          #line 2876 
    ;
    #line 2877 
    if (! igb_get_flash_presence_i210(hw)) {
      #line 2878 
      snprintf((char *)(& adapter->fw_version),32UL,(char *)"%2d.%2d-%d",(int)fw.invm_major,(int)fw.invm_minor,(int)fw.invm_img_type);
      #line 2883 
      break;
    }
    #line 2886 
    default: 
             #line 2886 
    ;
    #line 2888 
    if ((int)fw.or_valid != 0) 
                               #line 2889 
                               snprintf((char *)(& adapter->fw_version),32UL,(char *)"%d.%d, 0x%08x, %d.%d.%d",(int)fw.eep_major,(int)fw.eep_minor,fw.etrack_id,(int)fw.or_major,(int)fw.or_build,(int)fw.or_patch);
    else 
      #line 2895 
      if (fw.etrack_id != 0U) 
                              #line 2896 
                              snprintf((char *)(& adapter->fw_version),32UL,(char *)"%d.%d, 0x%08x",(int)fw.eep_major,(int)fw.eep_minor,fw.etrack_id); else 
                                                                    #line 2901 
                                                                    snprintf((char *)(& adapter->fw_version),32UL,(char *)"%d.%d.%d",(int)fw.eep_major,(int)fw.eep_minor,(int)fw.eep_build);
    #line 2906 
    break;
  }
  #line 2908 
  return;
}

#line 2915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_init_mas(struct igb_adapter *adapter)
{
  #line 2918 
  u16 eeprom_data;
  #line 2917 
  struct e1000_hw *hw = & adapter->hw;
  #line 2920 
  (*(hw->nvm.ops.read))(hw,(unsigned short)3,(unsigned short)1,& eeprom_data);
  #line 2921 
  switch ((int)hw->bus.func) {
    #line 2922 
    case 0: 
            #line 2922 
    ;
    #line 2923 
    if (((int)eeprom_data & 1) != 0) {
      #line 2924 
      adapter->flags |= 4096U;
      #line 2925 
      netdev_info(adapter->netdev,(char *)"MAS: Enabling Media Autosense for port %d\n",(int)hw->bus.func);
    }
    #line 2929 
    break;
    #line 2930 
    case 1: 
            #line 2930 
    ;
    #line 2931 
    if (((int)eeprom_data & 2) != 0) {
      #line 2932 
      adapter->flags |= 4096U;
      #line 2933 
      netdev_info(adapter->netdev,(char *)"MAS: Enabling Media Autosense for port %d\n",(int)hw->bus.func);
    }
    #line 2937 
    break;
    #line 2938 
    case 2: 
            #line 2938 
    ;
    #line 2939 
    if (((int)eeprom_data & 4) != 0) {
      #line 2940 
      adapter->flags |= 4096U;
      #line 2941 
      netdev_info(adapter->netdev,(char *)"MAS: Enabling Media Autosense for port %d\n",(int)hw->bus.func);
    }
    #line 2945 
    break;
    #line 2946 
    case 3: 
            #line 2946 
    ;
    #line 2947 
    if (((int)eeprom_data & 8) != 0) {
      #line 2948 
      adapter->flags |= 4096U;
      #line 2949 
      netdev_info(adapter->netdev,(char *)"MAS: Enabling Media Autosense for port %d\n",(int)hw->bus.func);
    }
    #line 2953 
    break;
    #line 2954 
    default: 
             #line 2954 
    ;
    #line 2956 
    netdev_err(adapter->netdev,(char *)"MAS: Invalid port configuration, returning\n");
    #line 2958 
    break;
  }
  #line 2960 
  return;
}

#line 2966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static s32 igb_init_i2c(struct igb_adapter *adapter)
{
  #line 2968 
  s32 status = 0;
  #line 2971 
  if (adapter->hw.mac.type != (unsigned int)e1000_i350) 
                                                        #line 2972 
                                                        return 0;
  #line 2978 
  adapter->i2c_adap.owner = & __this_module;
  #line 2979 
  adapter->i2c_algo = igb_i2c_algo;
  #line 2980 
  adapter->i2c_algo.data = (void *)adapter;
  #line 2981 
  adapter->i2c_adap.algo_data = (void *)(& adapter->i2c_algo);
  #line 2982 
  adapter->i2c_adap.dev.parent = & (adapter->pdev)->dev;
  #line 2983 
  strlcpy((char *)(& adapter->i2c_adap.name),(char *)"igb BB",48UL);
  #line 2985 
  status = i2c_bit_add_bus(& adapter->i2c_adap);
  #line 2986 
  return status;
}

#line 3000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 3412 
  char *tmp_25;
  #line 3002 
  struct net_device *netdev;
  #line 3003 
  struct igb_adapter *adapter;
  #line 3004 
  struct e1000_hw *hw;
  #line 3006 
  s32 ret_val;
  #line 3007 
  int global_quad_port_a;
  #line 3009 
  int err;
  #line 3009 
  int pci_using_dac;
  #line 3010 
  u8 part_str[11U];
  #line 3412 
  char *tmp_26;
  #line 3005 
  u16 eeprom_data = (unsigned short)0U;
  #line 3008 
  struct e1000_info *ei = igb_info_tbl[ent->driver_data];
  #line 3015 
  if ((unsigned int)pdev->is_virtfn != 0U) {
    {
      #line 3016 
      int __ret_warn_on = 1;
      #line 3016 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 3016 
        ;
        #line 3016 
        ;
        #line 3016 
        __warn_printk((char *)"\001",pci_name(pdev),(int)pdev->vendor,(int)pdev->device);
        #line 3017 
        ldv_inline_asm();
        #line 3018 
        ldv_inline_asm();
      }
      #line 3016 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 3018 
    return -22;
  }
  #line 3021 
  err = pci_enable_device_mem(pdev);
  #line 3022 
  if (err != 0) 
                #line 3023 
                return err;
  #line 3025 
  pci_using_dac = 0;
  #line 3026 
  err = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  #line 3027 
  if (err == 0) 
                #line 3028 
                pci_using_dac = 1;
  else {
    #line 3030 
    err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    #line 3031 
    if (err != 0) {
      #line 3032 
      _dev_err(& pdev->dev,(char *)"No usable DMA configuration, aborting\n");
      #line 3034 
      goto err_dma;
    }
  }
  #line 3038 
  err = pci_request_mem_regions(pdev,(char *)(& igb_driver_name));
  #line 3039 
  if (err != 0) 
                #line 3040 
                goto err_pci_reg;
  #line 3042 
  pci_enable_pcie_error_reporting(pdev);
  #line 3044 
  pci_set_master(pdev);
  #line 3045 
  pci_save_state(pdev);
  #line 3047 
  err = -12;
  #line 3048 
  netdev = cif_alloc_etherdev_mqs(16384,8U,8U);
  #line 3050 
  if (netdev == (struct net_device *)0) 
                                        #line 3051 
                                        goto err_alloc_etherdev;
  #line 3053 
  netdev->dev.parent = & pdev->dev;
  #line 3055 
  pci_set_drvdata(pdev,(void *)netdev);
  #line 3056 
  adapter = (struct igb_adapter *)netdev_priv(netdev);
  #line 3057 
  adapter->netdev = netdev;
  #line 3058 
  adapter->pdev = pdev;
  #line 3059 
  hw = & adapter->hw;
  #line 3060 
  hw->back = (void *)adapter;
  #line 3061 
  adapter->msg_enable = (int)netif_msg_init(debug,7);
  #line 3063 
  err = -5;
  #line 3064 
  adapter->io_addr = (u8 *)pci_iomap(pdev,0,0UL);
  #line 3065 
  if (adapter->io_addr == (u8 *)0U) 
                                    #line 3066 
                                    goto err_ioremap;
  #line 3068 
  hw->hw_addr = adapter->io_addr;
  #line 3070 
  netdev->netdev_ops = & igb_netdev_ops;
  #line 3071 
  igb_set_ethtool_ops(netdev);
  #line 3072 
  netdev->watchdog_timeo = 1250;
  #line 3074 
  ;
  #line 3074 
  strncpy((char *)(& netdev->name),pci_name(pdev),15UL);
  #line 3076 
  netdev->mem_start = (unsigned long)pdev->resource[0].start;
  #line 3077 
  netdev->mem_end = (unsigned long)pdev->resource[0].end;
  #line 3080 
  hw->vendor_id = pdev->vendor;
  #line 3081 
  hw->device_id = pdev->device;
  #line 3082 
  hw->revision_id = pdev->revision;
  #line 3083 
  hw->subsystem_vendor_id = pdev->subsystem_vendor;
  #line 3084 
  hw->subsystem_device_id = pdev->subsystem_device;
  #line 3087 
  memcpy((void *)(& hw->mac.ops),(void *)ei->mac_ops,104UL);
  #line 3088 
  memcpy((void *)(& hw->phy.ops),(void *)ei->phy_ops,120UL);
  #line 3089 
  memcpy((void *)(& hw->nvm.ops),(void *)ei->nvm_ops,56UL);
  #line 3091 
  err = (*(ei->get_invariants))(hw);
  #line 3092 
  if (err != 0) 
                #line 3093 
                goto err_sw_init;
  #line 3096 
  err = igb_sw_init(adapter);
  #line 3097 
  if (err != 0) 
                #line 3098 
                goto err_sw_init;
  #line 3100 
  igb_get_bus_info_pcie(hw);
  #line 3102 
  hw->phy.autoneg_wait_to_complete = (_Bool)0;
  #line 3105 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    #line 3106 
    hw->phy.mdix = (unsigned char)0U;
    #line 3107 
    hw->phy.disable_polarity_correction = (_Bool)0;
    #line 3108 
    hw->phy.ms_type = e1000_ms_hw_default;
  }
  #line 3111 
  if (igb_check_reset_block(hw) != 0) 
                                      #line 3112 
                                      _dev_info(& pdev->dev,(char *)"PHY reset is blocked due to SOL/IDER session.\n");
  #line 3119 
  netdev->features |= 824634834953ULL;
  #line 3126 
  if (hw->mac.type > (unsigned int)e1000_82575) 
                                                #line 3127 
                                                netdev->features |= 42949672960ULL;
  #line 3129 
  if (hw->mac.type > (unsigned int)e1000_82580) 
                                                #line 3130 
                                                netdev->features |= 281474976710656ULL;
  #line 3139 
  netdev->gso_partial_features = 264241152ULL;
  #line 3140 
  netdev->features |= 532676608ULL;
  #line 3143 
  netdev->hw_features = (netdev->hw_features | netdev->features) | 8796093022592ULL;
  #line 3148 
  if (hw->mac.type > (unsigned int)e1000_82580) 
                                                #line 3149 
                                                netdev->hw_features |= 137438953472ULL;
  #line 3151 
  if (pci_using_dac != 0) 
                          #line 3152 
                          netdev->features |= 32ULL;
  #line 3154 
  netdev->vlan_features = (netdev->vlan_features | netdev->features) | 524288ULL;
  #line 3155 
  netdev->mpls_features |= 8ULL;
  #line 3156 
  netdev->hw_enc_features |= netdev->vlan_features;
  #line 3159 
  netdev->features |= 896ULL;
  #line 3163 
  netdev->priv_flags |= 16384U;
  #line 3165 
  netdev->priv_flags |= 4096U;
  #line 3168 
  netdev->min_mtu = 68U;
  #line 3169 
  netdev->max_mtu = 9216U;
  #line 3171 
  adapter->en_mng_pt = (unsigned int)igb_enable_mng_pass_thru(hw);
  #line 3176 
  (*(hw->mac.ops.reset_hw))(hw);
  #line 3181 
  switch ((unsigned int)hw->mac.type) {
    #line 3182 
    case (unsigned int)6: 
                          #line 3182 
    ;
    #line 3183 
    case (unsigned int)7: 
                          #line 3183 
    ;
    #line 3184 
    if ((int)igb_get_flash_presence_i210(hw) != 0) {
      #line 3185 
      if ((*(hw->nvm.ops.validate))(hw) < 0) {
        #line 3186 
        _dev_err(& pdev->dev,(char *)"The NVM Checksum Is Not Valid\n");
        #line 3188 
        err = -5;
        #line 3189 
        goto err_eeprom;
      }
    }
    #line 3192 
    break;
    #line 3193 
    default: 
             #line 3193 
    ;
    #line 3194 
    if ((*(hw->nvm.ops.validate))(hw) < 0) {
      #line 3195 
      _dev_err(& pdev->dev,(char *)"The NVM Checksum Is Not Valid\n");
      #line 3196 
      err = -5;
      #line 3197 
      goto err_eeprom;
    }
    #line 3199 
    break;
  }
  #line 3202 
  if (eth_platform_get_mac_address(& pdev->dev,(u8 *)(& hw->mac.addr)) != 0) {
    #line 3204 
    if ((*(hw->mac.ops.read_mac_addr))(hw) != 0) 
                                                 #line 3205 
                                                 _dev_err(& pdev->dev,(char *)"NVM Read Error\n");
  }
  #line 3208 
  memcpy((void *)netdev->dev_addr,(void *)(& hw->mac.addr),(unsigned long)netdev->addr_len);
  #line 3210 
  if (! is_valid_ether_addr(netdev->dev_addr)) {
    #line 3211 
    _dev_err(& pdev->dev,(char *)"Invalid MAC Address\n");
    #line 3212 
    err = -5;
    #line 3213 
    goto err_eeprom;
  }
  #line 3216 
  igb_set_default_mac_filter(adapter);
  #line 3219 
  igb_set_fw_version(adapter);
  #line 3222 
  if (hw->mac.type == (unsigned int)e1000_i210) {
    {
      #line 3224 
      union __anonunion___u_3389 __u;
      #line 3223 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 3223 
      u8 *hw_addr = (__u.__val);
      #line 3223 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 3223 
                                             writel(162U,(void *)(hw_addr + 9220U));
    }
    {
      #line 3225 
      union __anonunion___u_3391 __u_0;
      #line 3224 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 3224 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 3224 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 3224 
                                               writel(67108884U,(void *)(hw_addr_0 + 13316U));
    }
  }
  {
    #line 3227 
    struct lock_class_key __key;
    #line 3227 
    init_timer_key(& adapter->watchdog_timer,& igb_watchdog,0U,(char *)"(&adapter->watchdog_timer)",& __key);
  }
  {
    #line 3228 
    struct lock_class_key __key_0;
    #line 3228 
    init_timer_key(& adapter->phy_info_timer,& igb_update_phy_info,0U,(char *)"(&adapter->phy_info_timer)",& __key_0);
  }
  {
    #line 3230 
    struct lock_class_key __key_1;
    #line 3230 
    __init_work(& adapter->reset_task,0);
    #line 3230 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 3230 
    adapter->reset_task.data = __constr_expr_44;
    #line 3230 
    lockdep_init_map(& adapter->reset_task.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 3230 
    INIT_LIST_HEAD(& adapter->reset_task.entry);
    #line 3230 
    adapter->reset_task.func = & igb_reset_task;
  }
  {
    #line 3231 
    struct lock_class_key __key_2;
    #line 3231 
    __init_work(& adapter->watchdog_task,0);
    #line 3231 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 3231 
    adapter->watchdog_task.data = __constr_expr_45;
    #line 3231 
    lockdep_init_map(& adapter->watchdog_task.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 3231 
    INIT_LIST_HEAD(& adapter->watchdog_task.entry);
    #line 3231 
    adapter->watchdog_task.func = & igb_watchdog_task;
  }
  #line 3234 
  adapter->fc_autoneg = (_Bool)1;
  #line 3235 
  hw->mac.autoneg = (_Bool)1;
  #line 3236 
  hw->phy.autoneg_advertised = (unsigned short)47U;
  #line 3238 
  hw->fc.requested_mode = e1000_fc_default;
  #line 3239 
  hw->fc.current_mode = e1000_fc_default;
  #line 3241 
  igb_validate_mdi_setting(hw);
  #line 3244 
  if ((unsigned int)hw->bus.func == 0U) 
                                        #line 3245 
                                        adapter->flags |= 256U;
  #line 3248 
  if (hw->mac.type > (unsigned int)e1000_82576) {
    #line 3249 
    int tmp_14;
    #line 3249 
    if ((unsigned int)hw->bus.func != 0U) 
                                          #line 3249 
                                          tmp_14 = (int)(((unsigned int)hw->bus.func + 1U) * 64U + 36U); else 
                                                                    #line 3249 
                                                                    tmp_14 = 36;
    #line 3249 
    ;
    #line 3249 
    (*(hw->nvm.ops.read))(hw,(unsigned short)tmp_14,(unsigned short)1,& eeprom_data);
  }
  else 
    #line 3252 
    if ((unsigned int)hw->bus.func == 1U) 
                                          #line 3253 
                                          (*(hw->nvm.ops.read))(hw,(unsigned short)20,(unsigned short)1,& eeprom_data);
  #line 3255 
  if (((int)eeprom_data & 1024) != 0) 
                                      #line 3256 
                                      adapter->flags |= 256U;
  #line 3262 
  switch ((int)pdev->device) {
    #line 3263 
    case 4310: 
               #line 3263 
    ;
    #line 3264 
    adapter->flags &= 4294967039U;
    #line 3265 
    break;
    #line 3266 
    case 4265: 
               #line 3266 
    ;
    #line 3267 
    case 4326: 
               #line 3267 
    ;
    #line 3268 
    case 4327: 
               #line 3268 
    ;
    #line 3272 
    if ((igb_rd32(hw,8U) & 4U) != 0U) 
                                      #line 3273 
                                      adapter->flags &= 4294967039U;
    #line 3274 
    break;
    #line 3275 
    case 4328: 
               #line 3275 
    ;
    #line 3276 
    case 5414: 
               #line 3276 
    ;
    #line 3278 
    if (global_quad_port_a != 0) 
                                 #line 3279 
                                 adapter->flags &= 4294967039U; else 
                                                                  #line 3281 
                                                                  adapter->flags |= 4U;
    #line 3283 
    global_quad_port_a ++;
    #line 3283 
    if (global_quad_port_a == 4) 
                                 #line 3284 
                                 global_quad_port_a = 0;
    #line 3285 
    break;
    #line 3286 
    default: 
             #line 3286 
    ;
    #line 3288 
    if (! device_can_wakeup(& (adapter->pdev)->dev)) 
                                                     #line 3289 
                                                     adapter->flags &= 4294967039U;
  }
  #line 3293 
  if (((unsigned long)adapter->flags & 256UL) != 0UL) 
                                                      #line 3294 
                                                      adapter->wol |= 2U;
  #line 3297 
  if (hw->mac.type == (unsigned int)e1000_i350 && (unsigned int)pdev->subsystem_vendor == 4156U) {
    #line 3299 
    adapter->flags |= 256U;
    #line 3300 
    adapter->wol = 0U;
  }
  #line 3306 
  if ((unsigned int)hw->mac.type + 4294967292U <= 1U && (unsigned int)pdev->subsystem_vendor == 4136U) {
    #line 3309 
    adapter->flags |= 256U;
    #line 3310 
    adapter->wol = 0U;
  }
  #line 3312 
  if (hw->mac.type == (unsigned int)e1000_i350) {
    #line 3313 
    if ((unsigned int)pdev->subsystem_device + 45055U <= 1U && (unsigned int)hw->bus.func == 0U) {
      #line 3316 
      adapter->flags |= 256U;
      #line 3317 
      adapter->wol = 0U;
    }
    #line 3319 
    if ((unsigned int)pdev->subsystem_device == 8018U) 
                                                       #line 3320 
                                                       adapter->flags |= 256U;
  }
  #line 3323 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)(((unsigned long)adapter->flags & 256UL) != 0UL));
  #line 3327 
  igb_reset(adapter);
  #line 3330 
  err = igb_init_i2c(adapter);
  #line 3331 
  if (err != 0) {
    #line 3332 
    _dev_err(& pdev->dev,(char *)"failed to init i2c interface\n");
    #line 3333 
    goto err_eeprom;
  }
  #line 3339 
  igb_get_hw_control(adapter);
  #line 3341 
  strcpy((char *)(& netdev->name),(char *)"eth%d");
  #line 3342 
  err = cif_register_netdev(netdev);
  #line 3343 
  if (err != 0) 
                #line 3344 
                goto err_register;
  #line 3347 
  netif_carrier_off(netdev);
  #line 3350 
  if (dca_add_requester(& pdev->dev) == 0) {
    #line 3351 
    adapter->flags |= 2U;
    #line 3352 
    _dev_info(& pdev->dev,(char *)"DCA enabled\n");
    #line 3353 
    igb_setup_dca(adapter);
  }
  #line 3359 
  if (hw->mac.type == (unsigned int)e1000_i350 && (unsigned int)hw->bus.func == 0U) {
    #line 3360 
    u16 ets_word;
    #line 3365 
    (*(hw->nvm.ops.read))(hw,(unsigned short)62,(unsigned short)1,& ets_word);
    #line 3366 
    if ((unsigned int)ets_word + 65535U <= 65533U) 
                                                   #line 3367 
                                                   adapter->ets = (_Bool)1; else 
                                                                    #line 3369 
                                                                    adapter->ets = (_Bool)0;
    #line 3370 
    if (igb_sysfs_init(adapter) != 0) 
                                      #line 3371 
                                      _dev_err(& pdev->dev,(char *)"failed to allocate sysfs resources\n");
  }
  else 
       #line 3374 
       adapter->ets = (_Bool)0;
  #line 3378 
  adapter->ei = *ei;
  #line 3379 
  if ((int)hw->dev_spec._82575.mas_capable != 0) 
                                                 #line 3380 
                                                 igb_init_mas(adapter);
  #line 3383 
  igb_ptp_init(adapter);
  #line 3385 
  _dev_info(& pdev->dev,(char *)"Intel(R) Gigabit Ethernet Network Connection\n");
  #line 3387 
  if (hw->mac.type != (unsigned int)e1000_i354) {
    #line 3388 
    char *tmp_22;
    #line 3388 
    char *tmp_19;
    #line 3388 
    char *tmp_20;
    #line 3388 
    char *tmp_21;
    #line 3388 
    char *tmp_23;
    #line 3388 
    ;
    #line 3388 
    if (hw->bus.width != (unsigned int)e1000_bus_width_pcie_x4) {
      #line 3388 
      if (hw->bus.width != (unsigned int)e1000_bus_width_pcie_x2) {
        #line 3388 
        if (hw->bus.width == (unsigned int)e1000_bus_width_pcie_x1) 
                                                                    #line 3388 
                                                                    tmp_19 = (char *)"Width x1"; else 
                                                                    #line 3388 
                                                                    tmp_19 = (char *)"unknown";
        #line 3388 
        tmp_20 = tmp_19;
      }
      else 
           #line 3388 
           tmp_20 = (char *)"Width x2";
      #line 3388 
      tmp_21 = tmp_20;
    }
    else 
         #line 3388 
         tmp_21 = (char *)"Width x4";
    #line 3388 
    if (hw->bus.speed != (unsigned int)e1000_bus_speed_2500) {
      #line 3388 
      if (hw->bus.speed == (unsigned int)e1000_bus_speed_5000) 
                                                               #line 3388 
                                                               tmp_22 = (char *)"5.0Gb/s"; else 
                                                                    #line 3388 
                                                                    tmp_22 = (char *)"unknown";
      #line 3388 
      tmp_23 = tmp_22;
    }
    else 
         #line 3388 
         tmp_23 = (char *)"2.5Gb/s";
    #line 3388 
    ;
    #line 3388 
    ;
    #line 3388 
    _dev_info(& pdev->dev,(char *)"%s: (PCIe:%s:%s) %pM\n",(char *)(& netdev->name),tmp_23,tmp_21,netdev->dev_addr);
  }
  #line 3401 
  if (hw->mac.type > (unsigned int)e1000_i354) 
                                               #line 3401 
                                               goto _LOR;
  else {
    #line 3401 
    if ((int)igb_get_flash_presence_i210(hw) != 0) 
                                                   #line 3401 
                                                   _LOR: 
                                                         #line 3403 
                                                         ret_val = igb_read_part_string(hw,(u8 *)(& part_str),11U); else 
                                                                    #line 3406 
                                                                    ret_val = -19;
  }
  #line 3409 
  if (ret_val != 0) 
                    #line 3410 
                    strcpy((char *)(& part_str),(char *)"Unknown");
  #line 3411 
  _dev_info(& pdev->dev,(char *)"%s: PBA No: %s\n",(char *)(& netdev->name),(u8 *)(& part_str));
  #line 3412 
  ;
  #line 3412 
  ;
  #line 3412 
  if (((unsigned long)adapter->flags & 8192UL) == 0UL) {
    #line 3412 
    if (((unsigned long)adapter->flags & 1UL) != 0UL) 
                                                      #line 3412 
                                                      tmp_25 = (char *)"MSI"; else 
                                                                    #line 3412 
                                                                    tmp_25 = (char *)"legacy";
    #line 3412 
    tmp_26 = tmp_25;
  }
  else 
       #line 3412 
       tmp_26 = (char *)"MSI-X";
  #line 3412 
  ;
  #line 3412 
  _dev_info(& pdev->dev,(char *)"Using %s interrupts. %d rx queue(s), %d tx queue(s)\n",tmp_26,adapter->num_rx_queues,adapter->num_tx_queues);
  #line 3417 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
    #line 3418 
    switch ((unsigned int)hw->mac.type) {
      #line 3419 
      case (unsigned int)4: 
                            #line 3419 
      ;
      #line 3420 
      case (unsigned int)6: 
                            #line 3420 
      ;
      #line 3421 
      case (unsigned int)7: 
                            #line 3421 
      ;
      #line 3423 
      err = igb_set_eee_i350(hw,(_Bool)1,(_Bool)1);
      #line 3424 
      if (err == 0 && ! hw->dev_spec._82575.eee_disable) {
        #line 3426 
        adapter->eee_advert = (unsigned short)6U;
        #line 3428 
        adapter->flags |= 16384U;
      }
      #line 3430 
      break;
      #line 3431 
      case (unsigned int)5: 
                            #line 3431 
      ;
      #line 3432 
      if ((igb_rd32(hw,24U) & 8388608U) != 0U) {
        #line 3434 
        err = igb_set_eee_i354(hw,(_Bool)1,(_Bool)1);
        #line 3435 
        if (err == 0 && ! hw->dev_spec._82575.eee_disable) {
          #line 3437 
          adapter->eee_advert = (unsigned short)6U;
          #line 3439 
          adapter->flags |= 16384U;
        }
      }
      #line 3442 
      break;
      #line 3443 
      default: 
               #line 3443 
      ;
      #line 3444 
      break;
    }
  #line 3448 
  dev_pm_set_driver_flags(& pdev->dev,1U);
  #line 3450 
  pm_runtime_put_noidle(& pdev->dev);
  #line 3451 
  return 0;
  #line 3453 
  err_register: 
                #line 3453 
  ;
  #line 3454 
  igb_release_hw_control(adapter);
  #line 3455 
  memset((void *)(& adapter->i2c_adap),0,2344UL);
  #line 3456 
  err_eeprom: 
              #line 3456 
  ;
  #line 3457 
  if (igb_check_reset_block(hw) == 0) 
                                      #line 3458 
                                      igb_reset_phy(hw);
  #line 3460 
  if (hw->flash_address != (u8 *)0U) 
                                     #line 3461 
                                     iounmap((void *)hw->flash_address);
  #line 3462 
  err_sw_init: 
               #line 3462 
  ;
  #line 3463 
  kfree((void *)adapter->mac_table);
  #line 3464 
  kfree((void *)adapter->shadow_vfta);
  #line 3465 
  igb_clear_interrupt_scheme(adapter);
  #line 3467 
  igb_disable_sriov(pdev);
  #line 3469 
  pci_iounmap(pdev,(void *)adapter->io_addr);
  #line 3470 
  err_ioremap: 
               #line 3470 
  ;
  #line 3471 
  cif_free_netdev(netdev);
  #line 3472 
  err_alloc_etherdev: 
                      #line 3472 
  ;
  #line 3473 
  pci_release_mem_regions(pdev);
  #line 3474 
  err_pci_reg: 
               #line 3474 
  ;
  #line 3475 
  err_dma: 
           #line 3475 
  ;
  #line 3476 
  pci_disable_device(pdev);
  #line 3477 
  return err;
}

#line 3481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_disable_sriov(struct pci_dev *pdev)
{
  #line 3483 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 3484 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3485 
  struct e1000_hw *hw = & adapter->hw;
  #line 3488 
  if (adapter->vf_data != (struct vf_data_storage *)0) {
    #line 3490 
    if (pci_vfs_assigned(pdev) != 0) {
      #line 3491 
      _dev_warn(& pdev->dev,(char *)"Cannot deallocate SR-IOV virtual functions while they are assigned - VFs will not be deallocated\n");
      #line 3493 
      return -1;
    }
    else {
      #line 3495 
      pci_disable_sriov(pdev);
      #line 3496 
      msleep(500U);
    }
    #line 3499 
    kfree((void *)adapter->vf_mac_list);
    #line 3500 
    adapter->vf_mac_list = (struct vf_mac_filter *)0;
    #line 3501 
    kfree((void *)adapter->vf_data);
    #line 3502 
    adapter->vf_data = (struct vf_data_storage *)0;
    #line 3503 
    adapter->vfs_allocated_count = 0U;
    {
      #line 3505 
      union __anonunion___u_3393 __u;
      #line 3504 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 3504 
      u8 *hw_addr = (__u.__val);
      #line 3504 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 3504 
                                             writel(1U,(void *)(hw_addr + 23484U));
    }
    #line 3505 
    igb_rd32(hw,8U);
    #line 3506 
    msleep(100U);
    #line 3507 
    _dev_info(& pdev->dev,(char *)"IOV Disabled\n");
    #line 3510 
    adapter->flags |= 16U;
  }
  #line 3513 
  return 0;
}

#line 3516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_enable_sriov(struct pci_dev *pdev, int num_vfs)
{
  #line 3521 
  struct vf_mac_filter *mac_list;
  #line 3523 
  int num_vf_mac_filters;
  #line 3523 
  int i;
  #line 3518 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 3519 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3520 
  int old_vfs = pci_num_vf(pdev);
  #line 3522 
  int err = 0;
  #line 3525 
  if (((unsigned long)adapter->flags & 8192UL) == 0UL || num_vfs > 7) {
    #line 3526 
    err = -1;
    #line 3527 
    goto out;
  }
  #line 3529 
  if (num_vfs == 0) 
                    #line 3530 
                    goto out;
  #line 3532 
  if (old_vfs != 0) {
    #line 3533 
    _dev_info(& pdev->dev,(char *)"%d pre-allocated VFs found - override max_vfs setting of %d\n",old_vfs,max_vfs);
    #line 3535 
    adapter->vfs_allocated_count = (unsigned int)old_vfs;
  }
  else 
       #line 3537 
       adapter->vfs_allocated_count = (unsigned int)num_vfs;
  #line 3539 
  adapter->vf_data = (struct vf_data_storage *)kcalloc((unsigned long)adapter->vfs_allocated_count,88UL,3264U);
  #line 3543 
  if (adapter->vf_data == (struct vf_data_storage *)0) {
    #line 3544 
    adapter->vfs_allocated_count = 0U;
    #line 3545 
    err = -12;
    #line 3546 
    goto out;
  }
  #line 3554 
  num_vf_mac_filters = (int)(((unsigned int)adapter->hw.mac.rar_entry_count - adapter->vfs_allocated_count) + 4294967292U);
  #line 3558 
  adapter->vf_mac_list = (struct vf_mac_filter *)kcalloc((unsigned long)num_vf_mac_filters,32UL,3264U);
  #line 3562 
  mac_list = adapter->vf_mac_list;
  #line 3563 
  INIT_LIST_HEAD(& adapter->vf_macs.l);
  #line 3565 
  if (adapter->vf_mac_list != (struct vf_mac_filter *)0) {
    #line 3567 
    i = 0;
    #line 3567 
    while (i < num_vf_mac_filters) {
      #line 3568 
      mac_list->vf = -1;
      #line 3569 
      mac_list->free = (_Bool)1;
      #line 3570 
      list_add(& mac_list->l,& adapter->vf_macs.l);
      #line 3571 
      mac_list ++;
      #line 3567 
      i ++;
    }
  }
  else 
       #line 3577 
       _dev_err(& pdev->dev,(char *)"Unable to allocate memory for VF MAC filter list\n");
  #line 3582 
  if (old_vfs == 0) {
    #line 3583 
    err = pci_enable_sriov(pdev,(int)adapter->vfs_allocated_count);
    #line 3584 
    if (err != 0) 
                  #line 3585 
                  goto err_out;
  }
  #line 3587 
  _dev_info(& pdev->dev,(char *)"%d VFs allocated\n",adapter->vfs_allocated_count);
  #line 3589 
  i = 0;
  #line 3589 
  while (adapter->vfs_allocated_count > (unsigned int)i) {
    #line 3590 
    igb_vf_configure(adapter,i);
    #line 3589 
    i ++;
  }
  #line 3593 
  adapter->flags &= 4294967279U;
  #line 3594 
  goto out;
  #line 3596 
  err_out: 
           #line 3596 
  ;
  #line 3597 
  kfree((void *)adapter->vf_mac_list);
  #line 3598 
  adapter->vf_mac_list = (struct vf_mac_filter *)0;
  #line 3599 
  kfree((void *)adapter->vf_data);
  #line 3600 
  adapter->vf_data = (struct vf_data_storage *)0;
  #line 3601 
  adapter->vfs_allocated_count = 0U;
  #line 3602 
  out: 
       #line 3602 
  ;
  #line 3603 
  return err;
}

#line 3611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_remove_i2c(struct igb_adapter *adapter)
{
  #line 3614 
  i2c_del_adapter(& adapter->i2c_adap);
  #line 3615 
  return;
}

#line 3626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_remove(struct pci_dev *pdev)
{
  #line 3628 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 3629 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3630 
  struct e1000_hw *hw = & adapter->hw;
  #line 3632 
  pm_runtime_get_noresume(& pdev->dev);
  #line 3634 
  igb_sysfs_exit(adapter);
  #line 3636 
  igb_remove_i2c(adapter);
  #line 3637 
  igb_ptp_stop(adapter);
  #line 3641 
  cif_set_bit_0(2L,& adapter->state);
  #line 3642 
  cif_del_timer_sync(& adapter->watchdog_timer);
  #line 3643 
  cif_del_timer_sync(& adapter->phy_info_timer);
  #line 3645 
  cancel_work_sync(& adapter->reset_task);
  #line 3646 
  cancel_work_sync(& adapter->watchdog_task);
  #line 3649 
  if (((unsigned long)adapter->flags & 2UL) != 0UL) {
    #line 3650 
    _dev_info(& pdev->dev,(char *)"DCA disabled\n");
    #line 3651 
    dca_remove_requester(& pdev->dev);
    #line 3652 
    adapter->flags &= 4294967293U;
    {
      #line 3654 
      union __anonunion___u_3395 __u;
      #line 3653 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 3653 
      u8 *hw_addr = (__u.__val);
      #line 3653 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 3653 
                                             writel(1U,(void *)(hw_addr + 23412U));
    }
  }
  #line 3660 
  igb_release_hw_control(adapter);
  #line 3663 
  igb_disable_sriov(pdev);
  #line 3666 
  cif_unregister_netdev(netdev);
  #line 3668 
  igb_clear_interrupt_scheme(adapter);
  #line 3670 
  pci_iounmap(pdev,(void *)adapter->io_addr);
  #line 3671 
  if (hw->flash_address != (u8 *)0U) 
                                     #line 3672 
                                     iounmap((void *)hw->flash_address);
  #line 3673 
  pci_release_mem_regions(pdev);
  #line 3675 
  kfree((void *)adapter->mac_table);
  #line 3676 
  kfree((void *)adapter->shadow_vfta);
  #line 3677 
  cif_free_netdev(netdev);
  #line 3679 
  pci_disable_pcie_error_reporting(pdev);
  #line 3681 
  pci_disable_device(pdev);
  #line 3682 
  return;
}

#line 3693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_probe_vfs(struct igb_adapter *adapter)
{
  #line 3696 
  struct pci_dev *pdev = adapter->pdev;
  #line 3697 
  struct e1000_hw *hw = & adapter->hw;
  #line 3700 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U) 
                                                      #line 3701 
                                                      return;
  #line 3707 
  igb_set_interrupt_capability(adapter,(_Bool)1);
  #line 3708 
  igb_reset_interrupt_capability(adapter);
  #line 3710 
  pci_sriov_set_totalvfs(pdev,(unsigned short)7);
  #line 3711 
  igb_enable_sriov(pdev,(int)max_vfs);
  #line 3712 
  return;
}

#line 3716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
unsigned int igb_get_max_rss_queues(struct igb_adapter *adapter)
{
  #line 3719 
  unsigned int max_rss_queues;
  #line 3718 
  struct e1000_hw *hw = & adapter->hw;
  #line 3722 
  switch ((unsigned int)hw->mac.type) {
    #line 3723 
    case (unsigned int)7: 
                          #line 3723 
    ;
    #line 3724 
    max_rss_queues = 2U;
    #line 3725 
    break;
    #line 3726 
    case (unsigned int)1: 
                          #line 3726 
    ;
    #line 3727 
    case (unsigned int)6: 
                          #line 3727 
    ;
    #line 3728 
    max_rss_queues = 4U;
    #line 3729 
    break;
    #line 3730 
    case (unsigned int)4: 
                          #line 3730 
    ;
    #line 3732 
    if (adapter->vfs_allocated_count != 0U) {
      #line 3733 
      max_rss_queues = 1U;
      #line 3734 
      break;
    }
    #line 3737 
    case (unsigned int)2: 
                          #line 3737 
    ;
    #line 3738 
    if (adapter->vfs_allocated_count != 0U) {
      #line 3739 
      max_rss_queues = 2U;
      #line 3740 
      break;
    }
    #line 3743 
    case (unsigned int)3: 
                          #line 3743 
    ;
    #line 3744 
    case (unsigned int)5: 
                          #line 3744 
    ;
    #line 3745 
    default: 
             #line 3745 
    ;
    #line 3746 
    max_rss_queues = 8U;
    #line 3747 
    break;
  }
  #line 3750 
  return max_rss_queues;
}

#line 3753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_init_queue_configuration(struct igb_adapter *adapter)
{
  #line 3758 
  unsigned int __UNIQUE_ID___x565;
  #line 3758 
  unsigned int tmp_0;
  #line 3755 
  u32 max_rss_queues;
  #line 3757 
  max_rss_queues = igb_get_max_rss_queues(adapter);
  {
    #line 3758 
    __UNIQUE_ID___x565 = max_rss_queues;
    #line 3758 
    unsigned int __UNIQUE_ID___y566 = num_online_cpus();
    #line 3758 
    if (__UNIQUE_ID___x565 < __UNIQUE_ID___y566) 
                                                 #line 3758 
                                                 tmp_0 = __UNIQUE_ID___x565; else 
                                                                    #line 3758 
                                                                    tmp_0 = __UNIQUE_ID___y566;
    }
  #line 3758 
  adapter->rss_queues = tmp_0;
  #line 3760 
  igb_set_flag_queue_pairs(adapter,max_rss_queues);
  #line 3761 
  return;
}

#line 3763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_set_flag_queue_pairs(struct igb_adapter *adapter, u32 max_rss_queues)
{
  #line 3766 
  struct e1000_hw *hw = & adapter->hw;
  #line 3769 
  switch ((unsigned int)hw->mac.type) {
    #line 3770 
    case (unsigned int)1: 
                          #line 3770 
    ;
    #line 3771 
    case (unsigned int)7: 
                          #line 3771 
    ;
    #line 3773 
    break;
    #line 3774 
    case (unsigned int)2: 
                          #line 3774 
    ;
    #line 3775 
    case (unsigned int)3: 
                          #line 3775 
    ;
    #line 3776 
    case (unsigned int)4: 
                          #line 3776 
    ;
    #line 3777 
    case (unsigned int)5: 
                          #line 3777 
    ;
    #line 3778 
    case (unsigned int)6: 
                          #line 3778 
    ;
    #line 3779 
    default: 
             #line 3779 
    ;
    #line 3783 
    if (adapter->rss_queues > max_rss_queues / 2U) 
                                                   #line 3784 
                                                   adapter->flags |= 8U; else 
                                                                    #line 3786 
                                                                    adapter->flags &= 4294967287U;
    #line 3787 
    break;
  }
  #line 3789 
  return;
}

#line 3799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_sw_init(struct igb_adapter *adapter)
{
  #line 3801 
  struct e1000_hw *hw = & adapter->hw;
  #line 3802 
  struct net_device *netdev = adapter->netdev;
  #line 3803 
  struct pci_dev *pdev = adapter->pdev;
  #line 3805 
  pci_read_config_word(pdev,4,& hw->bus.pci_cmd_word);
  #line 3808 
  adapter->tx_ring_count = (unsigned short)256U;
  #line 3809 
  adapter->rx_ring_count = (unsigned short)256U;
  #line 3812 
  adapter->rx_itr_setting = 3U;
  #line 3813 
  adapter->tx_itr_setting = 3U;
  #line 3816 
  adapter->tx_work_limit = (unsigned short)128U;
  #line 3818 
  adapter->max_frame_size = netdev->mtu + 22U;
  #line 3820 
  adapter->min_frame_size = 64U;
  #line 3822 
  spinlock_check(& adapter->nfc_lock);
  {
    #line 3822 
    struct lock_class_key __key;
    #line 3822 
    __raw_spin_lock_init(& adapter->nfc_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->nfc_lock)->rlock",& __key);
  }
  #line 3823 
  spinlock_check(& adapter->stats64_lock);
  {
    #line 3823 
    struct lock_class_key __key_0;
    #line 3823 
    __raw_spin_lock_init(& adapter->stats64_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->stats64_lock)->rlock",& __key_0);
  }
  #line 3825 
  switch ((unsigned int)hw->mac.type) {
    #line 3826 
    case (unsigned int)2: 
                          #line 3826 
    ;
    #line 3827 
    case (unsigned int)4: 
                          #line 3827 
    ;
    #line 3828 
    if (max_vfs > 7U) {
      #line 3829 
      _dev_warn(& pdev->dev,(char *)"Maximum of 7 VFs per PF, using max\n");
      #line 3831 
      adapter->vfs_allocated_count = 7U;
      #line 3831 
      max_vfs = 7U;
    }
    else 
         #line 3833 
         adapter->vfs_allocated_count = max_vfs;
    #line 3834 
    if (adapter->vfs_allocated_count != 0U) 
                                            #line 3835 
                                            _dev_warn(& pdev->dev,(char *)"Enabling SR-IOV VFs using the module parameter is deprecated - please use the pci sysfs interface.\n");
    #line 3837 
    break;
    #line 3838 
    default: 
             #line 3838 
    ;
    #line 3839 
    break;
  }
  #line 3844 
  adapter->flags |= 8192U;
  #line 3846 
  adapter->mac_table = (struct igb_mac_addr *)kcalloc((unsigned long)hw->mac.rar_entry_count,8UL,3264U);
  #line 3849 
  if (adapter->mac_table == (struct igb_mac_addr *)0) 
                                                      #line 3850 
                                                      return -12;
  #line 3852 
  igb_probe_vfs(adapter);
  #line 3854 
  igb_init_queue_configuration(adapter);
  #line 3857 
  adapter->shadow_vfta = (u32 *)kcalloc(128UL,4UL,3264U);
  #line 3859 
  if (adapter->shadow_vfta == (u32 *)0U) 
                                         #line 3860 
                                         return -12;
  #line 3863 
  if (igb_init_interrupt_scheme(adapter,(_Bool)1) != 0) {
    #line 3864 
    _dev_err(& pdev->dev,(char *)"Unable to allocate memory for queues\n");
    #line 3865 
    return -12;
  }
  #line 3869 
  igb_irq_disable(adapter);
  #line 3871 
  if (hw->mac.type > (unsigned int)e1000_82580) 
                                                #line 3872 
                                                adapter->flags &= 4294967279U;
  #line 3874 
  cif_set_bit_0(2L,& adapter->state);
  #line 3875 
  return 0;
}

#line 3890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_open(struct net_device *netdev, bool resuming)
{
  #line 3895 
  int err;
  #line 3896 
  int i;
  #line 3892 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 3893 
  struct e1000_hw *hw = & adapter->hw;
  #line 3894 
  struct pci_dev *pdev = adapter->pdev;
  #line 3899 
  if ((int)test_bit(0L,& adapter->state) != 0) {
    {
      #line 3900 
      int __ret_warn_on = (int)resuming != 0;
      #line 3900 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 3901 
        ldv_inline_asm();
        #line 3902 
        ldv_inline_asm();
      }
      #line 3900 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 3901 
    return -16;
  }
  #line 3904 
  if (! resuming) 
                  #line 3905 
                  pm_runtime_get_sync(& pdev->dev);
  #line 3907 
  netif_carrier_off(netdev);
  #line 3910 
  err = igb_setup_all_tx_resources(adapter);
  #line 3911 
  if (err != 0) 
                #line 3912 
                goto err_setup_tx;
  #line 3915 
  err = igb_setup_all_rx_resources(adapter);
  #line 3916 
  if (err != 0) 
                #line 3917 
                goto err_setup_rx;
  #line 3919 
  igb_power_up_link(adapter);
  #line 3926 
  igb_configure(adapter);
  #line 3928 
  err = igb_request_irq(adapter);
  #line 3929 
  if (err != 0) 
                #line 3930 
                goto err_req_irq;
  #line 3933 
  err = netif_set_real_num_tx_queues(adapter->netdev,(unsigned int)adapter->num_tx_queues);
  #line 3935 
  if (err != 0) 
                #line 3936 
                goto err_set_queues;
  #line 3938 
  err = netif_set_real_num_rx_queues(adapter->netdev,(unsigned int)adapter->num_rx_queues);
  #line 3940 
  if (err != 0) 
                #line 3941 
                goto err_set_queues;
  #line 3944 
  cif_clear_bit_0(2L,& adapter->state);
  #line 3946 
  i = 0;
  #line 3946 
  while (adapter->num_q_vectors > (unsigned int)i) {
    #line 3947 
    napi_enable(& (adapter->q_vector[i])->napi);
    #line 3946 
    i ++;
  }
  #line 3950 
  igb_rd32(hw,46700U);
  #line 3951 
  igb_rd32(hw,192U);
  #line 3953 
  igb_irq_enable(adapter);
  #line 3956 
  if (adapter->vfs_allocated_count != 0U) {
    #line 3957 
    u32 reg_data = igb_rd32(hw,24U);
    #line 3959 
    reg_data |= 16384U;
    {
      #line 3961 
      union __anonunion___u_3397 __u;
      #line 3960 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 3960 
      u8 *hw_addr = (__u.__val);
      #line 3960 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 3960 
                                             writel(reg_data,(void *)(hw_addr + 24U));
    }
  }
  #line 3963 
  netif_tx_start_all_queues(netdev);
  #line 3965 
  if (! resuming) 
                  #line 3966 
                  pm_runtime_put(& pdev->dev);
  #line 3969 
  hw->mac.get_link_status = (_Bool)1;
  #line 3970 
  cif_schedule_work(& adapter->watchdog_task);
  #line 3972 
  return 0;
  #line 3974 
  err_set_queues: 
                  #line 3974 
  ;
  #line 3975 
  igb_free_irq(adapter);
  #line 3976 
  err_req_irq: 
               #line 3976 
  ;
  #line 3977 
  igb_release_hw_control(adapter);
  #line 3978 
  igb_power_down_link(adapter);
  #line 3979 
  igb_free_all_rx_resources(adapter);
  #line 3980 
  err_setup_rx: 
                #line 3980 
  ;
  #line 3981 
  igb_free_all_tx_resources(adapter);
  #line 3982 
  err_setup_tx: 
                #line 3982 
  ;
  #line 3983 
  igb_reset(adapter);
  #line 3984 
  if (! resuming) 
                  #line 3985 
                  pm_runtime_put(& pdev->dev);
  #line 3987 
  return err;
}

#line 3990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_open(struct net_device *netdev)
{
  #line 3992 
  return __igb_open(netdev,(_Bool)0);
}

#line 4006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_close(struct net_device *netdev, bool suspending)
{
  #line 4008 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 4009 
  struct pci_dev *pdev = adapter->pdev;
  {
    #line 4011 
    int __ret_warn_on = (int)test_bit(1L,& adapter->state) != 0;
    #line 4011 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 4012 
      ldv_inline_asm();
      #line 4013 
      ldv_inline_asm();
    }
    #line 4011 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 4013 
  if (! suspending) 
                    #line 4014 
                    pm_runtime_get_sync(& pdev->dev);
  #line 4016 
  igb_down(adapter);
  #line 4017 
  igb_free_irq(adapter);
  #line 4019 
  igb_free_all_tx_resources(adapter);
  #line 4020 
  igb_free_all_rx_resources(adapter);
  #line 4022 
  if (! suspending) 
                    #line 4023 
                    pm_runtime_put_sync(& pdev->dev);
  #line 4024 
  return 0;
}

#line 4027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_close(struct net_device *netdev)
{
  #line 4029 
  if ((int)netif_device_present(netdev) != 0) 
                                              #line 4029 
                                              goto _LOR;
  else 
    #line 4029 
    if ((int)netdev->dismantle != 0) {
      #line 4029 
      _LOR: 
      #line 4030 
      return __igb_close(netdev,(_Bool)0);
    }
  #line 4031 
  return 0;
}

#line 4040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_setup_tx_resources(struct igb_ring *tx_ring)
{
  #line 4043 
  int size;
  #line 4042 
  struct device *dev = tx_ring->dev;
  #line 4045 
  size = (int)((unsigned int)tx_ring->count * 48U);
  #line 4047 
  tx_ring->__anonCompField_igb_ring_166.tx_buffer_info = (struct igb_tx_buffer *)cif_vmalloc_0((unsigned long)size);
  #line 4048 
  if (tx_ring->__anonCompField_igb_ring_166.tx_buffer_info == (struct igb_tx_buffer *)0) 
    #line 4049 
    goto err;
  #line 4052 
  tx_ring->size = (unsigned int)tx_ring->count * 16U;
  #line 4053 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  #line 4055 
  tx_ring->desc = dma_alloc_coherent(dev,(unsigned long)tx_ring->size,& tx_ring->dma,3264U);
  #line 4057 
  if (tx_ring->desc == (void *)0) 
                                  #line 4058 
                                  goto err;
  #line 4060 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 4061 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 4063 
  return 0;
  #line 4065 
  err: 
       #line 4065 
  ;
  #line 4066 
  cif_vfree_0((void *)tx_ring->__anonCompField_igb_ring_166.tx_buffer_info);
  #line 4067 
  tx_ring->__anonCompField_igb_ring_166.tx_buffer_info = (struct igb_tx_buffer *)0;
  #line 4068 
  _dev_err(dev,(char *)"Unable to allocate memory for the Tx descriptor ring\n");
  #line 4069 
  return -12;
}

#line 4079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_setup_all_tx_resources(struct igb_adapter *adapter)
{
  #line 4082 
  int i;
  #line 4081 
  struct pci_dev *pdev = adapter->pdev;
  #line 4082 
  int err = 0;
  #line 4084 
  i = 0;
  #line 4084 
  while (adapter->num_tx_queues > i) {
    #line 4085 
    err = igb_setup_tx_resources(adapter->tx_ring[i]);
    #line 4086 
    if (err != 0) {
      #line 4087 
      _dev_err(& pdev->dev,(char *)"Allocation for Tx Queue %u failed\n",i);
      #line 4089 
      i --;
      #line 4089 
      while (i >= 0) {
        #line 4090 
        igb_free_tx_resources(adapter->tx_ring[i]);
        #line 4089 
        i --;
      }
      #line 4091 
      break;
    }
    #line 4084 
    i ++;
  }
  #line 4095 
  return err;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_setup_tctl(struct igb_adapter *adapter)
{
  #line 4105 
  u32 tctl;
  #line 4104 
  struct e1000_hw *hw = & adapter->hw;
  {
    #line 4109 
    union __anonunion___u_3399 __u;
    #line 4108 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 4108 
    u8 *hw_addr = (__u.__val);
    #line 4108 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 4108 
                                           writel(0U,(void *)(hw_addr + 14376U));
  }
  #line 4111 
  tctl = igb_rd32(hw,1024U);
  #line 4112 
  tctl &= 4294963215U;
  #line 4113 
  tctl |= 16777464U;
  #line 4116 
  igb_config_collision_dist(hw);
  #line 4119 
  tctl |= 2U;
  {
    #line 4122 
    union __anonunion___u_3401 __u_0;
    #line 4121 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 4121 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 4121 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 4121 
                                             writel(tctl,(void *)(hw_addr_0 + 1024U));
  }
  #line 4123 
  return;
}

#line 4131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_configure_tx_ring(struct igb_adapter *adapter, struct igb_ring *ring)
{
  #line 4145 
  int tmp_5;
  #line 4149 
  unsigned int tmp_8;
  #line 4151 
  unsigned int tmp_9;
  #line 4134 
  struct e1000_hw *hw = & adapter->hw;
  #line 4135 
  u32 txdctl = 0U;
  #line 4136 
  u64 tdba = ring->dma;
  #line 4137 
  int reg_idx = (int)ring->reg_idx;
  {
    #line 4140 
    union __anonunion___u_3403 __u;
    #line 4139 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 4139 
    u8 *hw_addr = (__u.__val);
    #line 4139 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      #line 4139 
      int tmp_0;
      #line 4139 
      if (reg_idx <= 3) 
                        #line 4139 
                        tmp_0 = reg_idx * 256 + 14344; else 
                                                            #line 4139 
                                                            tmp_0 = reg_idx * 64 + 57352;
      #line 4139 
      ;
      #line 4139 
      ;
      #line 4139 
      writel((unsigned int)ring->count * 16U,(void *)(hw_addr + (unsigned long)tmp_0));
    }
  }
  {
    #line 4142 
    union __anonunion___u_3405 __u_0;
    #line 4141 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 4141 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 4141 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      #line 4141 
      int tmp_2;
      #line 4141 
      if (reg_idx <= 3) 
                        #line 4141 
                        tmp_2 = (reg_idx + 56) * 256; else 
                                                           #line 4141 
                                                           tmp_2 = (reg_idx + 896) * 64;
      #line 4141 
      ;
      #line 4141 
      ;
      #line 4141 
      writel((unsigned int)tdba,(void *)(hw_addr_0 + (unsigned long)tmp_2));
    }
  }
  {
    #line 4144 
    union __anonunion___u_3407 __u_1;
    #line 4143 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 4143 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 4143 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) {
      #line 4143 
      int tmp_4;
      #line 4143 
      if (reg_idx <= 3) 
                        #line 4143 
                        tmp_4 = reg_idx * 256 + 14340; else 
                                                            #line 4143 
                                                            tmp_4 = reg_idx * 64 + 57348;
      #line 4143 
      ;
      #line 4143 
      ;
      #line 4143 
      writel((unsigned int)(tdba >> 32),(void *)(hw_addr_1 + (unsigned long)tmp_4));
    }
  }
  #line 4145 
  if (reg_idx <= 3) 
                    #line 4145 
                    tmp_5 = reg_idx * 256 + 14360; else 
                                                        #line 4145 
                                                        tmp_5 = reg_idx * 64 + 57368;
  #line 4145 
  ring->tail = (void *)(adapter->io_addr + (unsigned long)tmp_5);
  {
    #line 4147 
    union __anonunion___u_3409 __u_2;
    #line 4146 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 4146 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 4146 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) {
      #line 4146 
      int tmp_7;
      #line 4146 
      if (reg_idx <= 3) 
                        #line 4146 
                        tmp_7 = reg_idx * 256 + 14352; else 
                                                            #line 4146 
                                                            tmp_7 = reg_idx * 64 + 57360;
      #line 4146 
      ;
      #line 4146 
      writel(0U,(void *)(hw_addr_2 + (unsigned long)tmp_7));
    }
  }
  #line 4147 
  writel(0U,ring->tail);
  #line 4149 
  if (hw->mac.type == (unsigned int)e1000_i354) 
                                                #line 4149 
                                                tmp_8 = 20U; else 
                                                                  #line 4149 
                                                                  tmp_8 = 8U;
  #line 4149 
  txdctl = tmp_8 | txdctl;
  #line 4150 
  txdctl |= 256U;
  #line 4151 
  if (hw->mac.type == (unsigned int)e1000_82576 && ((unsigned long)adapter->flags & 8192UL) != 0UL) 
    #line 4151 
    tmp_9 = 65536U; else 
                         #line 4151 
                         tmp_9 = 1048576U;
  #line 4151 
  txdctl = tmp_9 | txdctl;
  #line 4154 
  memset((void *)ring->__anonCompField_igb_ring_166.tx_buffer_info,0,(unsigned long)ring->count * 48UL);
  #line 4157 
  txdctl |= 33554432U;
  {
    #line 4159 
    union __anonunion___u_3411 __u_3;
    #line 4158 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 4158 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 4158 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) {
      #line 4158 
      int tmp_11;
      #line 4158 
      if (reg_idx <= 3) 
                        #line 4158 
                        tmp_11 = reg_idx * 256 + 14376; else 
                                                             #line 4158 
                                                             tmp_11 = reg_idx * 64 + 57384;
      #line 4158 
      ;
      #line 4158 
      ;
      #line 4158 
      writel(txdctl,(void *)(hw_addr_3 + (unsigned long)tmp_11));
    }
  }
  #line 4160 
  return;
}

#line 4167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_configure_tx(struct igb_adapter *adapter)
{
  #line 4170 
  int i;
  #line 4169 
  struct e1000_hw *hw = & adapter->hw;
  #line 4173 
  i = 0;
  #line 4173 
  while (adapter->num_tx_queues > i) {
    {
      #line 4175 
      union __anonunion___u_3413 __u;
      #line 4174 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 4174 
      u8 *hw_addr = (__u.__val);
      #line 4174 
      if ((long)(hw_addr == (u8 *)0U) == 0L) {
        #line 4174 
        int tmp_0;
        #line 4174 
        if ((unsigned int)(adapter->tx_ring[i])->reg_idx <= 3U) 
                                                                #line 4174 
                                                                tmp_0 = (int)(adapter->tx_ring[i])->reg_idx * 256 + 14376; else 
                                                                    #line 4174 
                                                                    tmp_0 = (int)(adapter->tx_ring[i])->reg_idx * 64 + 57384;
        #line 4174 
        ;
        #line 4174 
        writel(0U,(void *)(hw_addr + (unsigned long)tmp_0));
      }
    }
    #line 4173 
    i ++;
  }
  #line 4176 
  igb_rd32(hw,8U);
  #line 4177 
  usleep_range(10000UL,20000UL);
  #line 4179 
  i = 0;
  #line 4179 
  while (adapter->num_tx_queues > i) {
    #line 4180 
    igb_configure_tx_ring(adapter,adapter->tx_ring[i]);
    #line 4179 
    i ++;
  }
  #line 4181 
  return;
}

#line 4189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_setup_rx_resources(struct igb_ring *rx_ring)
{
  #line 4192 
  int size;
  #line 4191 
  struct device *dev = rx_ring->dev;
  #line 4194 
  size = (int)((unsigned int)rx_ring->count * 24U);
  #line 4196 
  rx_ring->__anonCompField_igb_ring_166.rx_buffer_info = (struct igb_rx_buffer *)cif_vmalloc_0((unsigned long)size);
  #line 4197 
  if (rx_ring->__anonCompField_igb_ring_166.rx_buffer_info == (struct igb_rx_buffer *)0) 
    #line 4198 
    goto err;
  #line 4201 
  rx_ring->size = (unsigned int)rx_ring->count * 16U;
  #line 4202 
  rx_ring->size = (rx_ring->size + 4095U) & 4294963200U;
  #line 4204 
  rx_ring->desc = dma_alloc_coherent(dev,(unsigned long)rx_ring->size,& rx_ring->dma,3264U);
  #line 4206 
  if (rx_ring->desc == (void *)0) 
                                  #line 4207 
                                  goto err;
  #line 4209 
  rx_ring->next_to_alloc = (unsigned short)0U;
  #line 4210 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 4211 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 4213 
  return 0;
  #line 4215 
  err: 
       #line 4215 
  ;
  #line 4216 
  cif_vfree_0((void *)rx_ring->__anonCompField_igb_ring_166.rx_buffer_info);
  #line 4217 
  rx_ring->__anonCompField_igb_ring_166.rx_buffer_info = (struct igb_rx_buffer *)0;
  #line 4218 
  _dev_err(dev,(char *)"Unable to allocate memory for the Rx descriptor ring\n");
  #line 4219 
  return -12;
}

#line 4229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_setup_all_rx_resources(struct igb_adapter *adapter)
{
  #line 4232 
  int i;
  #line 4231 
  struct pci_dev *pdev = adapter->pdev;
  #line 4232 
  int err = 0;
  #line 4234 
  i = 0;
  #line 4234 
  while (adapter->num_rx_queues > i) {
    #line 4235 
    err = igb_setup_rx_resources(adapter->rx_ring[i]);
    #line 4236 
    if (err != 0) {
      #line 4237 
      _dev_err(& pdev->dev,(char *)"Allocation for Rx Queue %u failed\n",i);
      #line 4239 
      i --;
      #line 4239 
      while (i >= 0) {
        #line 4240 
        igb_free_rx_resources(adapter->rx_ring[i]);
        #line 4239 
        i --;
      }
      #line 4241 
      break;
    }
    #line 4234 
    i ++;
  }
  #line 4245 
  return err;
}

#line 4252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_setup_mrqc(struct igb_adapter *adapter)
{
  #line 4255 
  u32 mrqc;
  #line 4255 
  u32 rxcsum;
  #line 4256 
  u32 j;
  #line 4256 
  u32 num_rx_queues;
  #line 4257 
  u32 rss_key[10U];
  #line 4254 
  struct e1000_hw *hw = & adapter->hw;
  #line 4259 
  netdev_rss_key_fill((void *)(& rss_key),40UL);
  #line 4260 
  j = 0U;
  #line 4260 
  while (j <= 9U) {
    {
      #line 4262 
      union __anonunion___u_3415 __u;
      #line 4261 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 4261 
      u8 *hw_addr = (__u.__val);
      #line 4261 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 4261 
                                             writel(rss_key[j],(void *)(hw_addr + (unsigned long)((j + 5920U) * 4U)));
    }
    #line 4260 
    j ++;
  }
  #line 4263 
  num_rx_queues = adapter->rss_queues;
  #line 4265 
  switch ((unsigned int)hw->mac.type) {
    #line 4266 
    case (unsigned int)2: 
                          #line 4266 
    ;
    #line 4268 
    if (adapter->vfs_allocated_count != 0U) 
                                            #line 4269 
                                            num_rx_queues = 2U;
    #line 4270 
    break;
    #line 4271 
    default: 
             #line 4271 
    ;
    #line 4272 
    break;
  }
  #line 4275 
  if (adapter->rss_indir_tbl_init != num_rx_queues) {
    #line 4276 
    j = 0U;
    #line 4276 
    while (j <= 127U) {
      #line 4277 
      adapter->rss_indir_tbl[j] = (unsigned char)((j * num_rx_queues) / 128U);
      #line 4276 
      j ++;
    }
    #line 4279 
    adapter->rss_indir_tbl_init = num_rx_queues;
  }
  #line 4281 
  igb_write_rss_indir_tbl(adapter);
  #line 4287 
  rxcsum = igb_rd32(hw,20480U);
  #line 4288 
  rxcsum |= 8192U;
  #line 4290 
  if (adapter->hw.mac.type > (unsigned int)e1000_82575) 
                                                        #line 4292 
                                                        rxcsum |= 2048U;
  {
    #line 4296 
    union __anonunion___u_3417 __u_0;
    #line 4295 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 4295 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 4295 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 4295 
                                             writel(rxcsum,(void *)(hw_addr_0 + 20480U));
  }
  #line 4300 
  mrqc = 3604480U;
  #line 4306 
  if (((unsigned long)adapter->flags & 64UL) != 0UL) 
                                                     #line 4307 
                                                     mrqc |= 4194304U;
  #line 4308 
  if (((unsigned long)adapter->flags & 128UL) != 0UL) 
                                                      #line 4309 
                                                      mrqc |= 8388608U;
  #line 4315 
  if (adapter->vfs_allocated_count != 0U) {
    #line 4316 
    if (hw->mac.type > (unsigned int)e1000_82575) {
      #line 4318 
      u32 vtctl = igb_rd32(hw,22556U);
      #line 4320 
      vtctl &= 3758095487U;
      #line 4322 
      vtctl = (adapter->vfs_allocated_count << 7) | vtctl;
      {
        #line 4325 
        union __anonunion___u_3419 __u_1;
        #line 4324 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
        #line 4324 
        u8 *hw_addr_1 = (__u_1.__val);
        #line 4324 
        if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                                 #line 4324 
                                                 writel(vtctl,(void *)(hw_addr_1 + 22556U));
      }
    }
    #line 4326 
    if (adapter->rss_queues > 1U) 
                                  #line 4327 
                                  mrqc |= 5U; else 
                                                   #line 4329 
                                                   mrqc |= 3U;
  }
  else 
    #line 4331 
    if (hw->mac.type != (unsigned int)e1000_i211) 
                                                  #line 4332 
                                                  mrqc |= 2U;
  #line 4334 
  igb_vmm_control(adapter);
  {
    #line 4337 
    union __anonunion___u_3421 __u_2;
    #line 4336 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 4336 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 4336 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                             #line 4336 
                                             writel(mrqc,(void *)(hw_addr_2 + 22552U));
  }
  #line 4338 
  return;
}

#line 4343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_setup_rctl(struct igb_adapter *adapter)
{
  #line 4346 
  u32 rctl;
  #line 4345 
  struct e1000_hw *hw = & adapter->hw;
  #line 4348 
  rctl = igb_rd32(hw,256U);
  #line 4350 
  rctl &= 4294955007U;
  #line 4351 
  rctl &= 4294967103U;
  #line 4353 
  rctl = ((hw->mac.mc_filter_type << 12) | rctl) | 32770U;
  #line 4360 
  rctl |= 67108864U;
  #line 4363 
  rctl &= 4294770683U;
  #line 4366 
  rctl |= 32U;
  {
    #line 4370 
    union __anonunion___u_3423 __u;
    #line 4369 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 4369 
    u8 *hw_addr = (__u.__val);
    #line 4369 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 4369 
                                           writel(0U,(void *)(hw_addr + 10280U));
  }
  #line 4375 
  if (adapter->vfs_allocated_count != 0U) {
    #line 4378 
    union __anonunion___u_3425 __u_0;
    #line 4377 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 4377 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 4377 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 4377 
                                             writel(65535U,(void *)(hw_addr_0 + 9224U));
  }
  #line 4381 
  if (((adapter->netdev)->features & 8796093022208ULL) != 0ULL) {
    #line 4385 
    rctl |= 8421380U;
    #line 4389 
    rctl &= 4290248703U;
  }
  {
    #line 4397 
    union __anonunion___u_3427 __u_1;
    #line 4396 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 4396 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 4396 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 4396 
                                             writel(rctl,(void *)(hw_addr_1 + 256U));
  }
  #line 4398 
  return;
}

#line 4399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static int igb_set_vf_rlpml(struct igb_adapter *adapter, int size, int vfn)
{
  #line 4403 
  u32 vmolr;
  #line 4402 
  struct e1000_hw *hw = & adapter->hw;
  #line 4405 
  if (size > 9728) 
                   #line 4406 
                   size = 9728;
  #line 4408 
  vmolr = igb_rd32(hw,(unsigned int)((vfn + 5812) * 4));
  #line 4409 
  vmolr &= 4294950912U;
  #line 4410 
  vmolr = ((unsigned int)size | vmolr) | 65536U;
  {
    #line 4412 
    union __anonunion___u_3429 __u;
    #line 4411 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 4411 
    u8 *hw_addr = (__u.__val);
    #line 4411 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 4411 
                                           writel(vmolr,(void *)(hw_addr + (unsigned long)((vfn + 5812) * 4)));
  }
  #line 4413 
  return 0;
}

#line 4416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static void igb_set_vf_vlan_strip(struct igb_adapter *adapter, int vfn, bool enable)
{
  #line 4420 
  u32 val;
  #line 4420 
  u32 reg;
  #line 4419 
  struct e1000_hw *hw = & adapter->hw;
  #line 4422 
  if (hw->mac.type <= (unsigned int)e1000_82575) 
                                                 #line 4423 
                                                 return;
  #line 4425 
  if (hw->mac.type == (unsigned int)e1000_i350) 
                                                #line 4426 
                                                reg = (unsigned int)(vfn * 64 + 49208); else 
                                                                    #line 4428 
                                                                    reg = (unsigned int)((vfn + 5812) * 4);
  #line 4430 
  val = igb_rd32(hw,reg);
  #line 4431 
  if ((int)enable != 0) 
                        #line 4432 
                        val |= 1073741824U; else 
                                                 #line 4434 
                                                 val &= 3221225471U;
  {
    #line 4436 
    union __anonunion___u_3431 __u;
    #line 4435 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 4435 
    u8 *hw_addr = (__u.__val);
    #line 4435 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 4435 
                                           writel(val,(void *)(hw_addr + (unsigned long)reg));
  }
  #line 4437 
  return;
}

#line 4438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static void igb_set_vmolr(struct igb_adapter *adapter, int vfn, bool aupe)
{
  #line 4442 
  u32 vmolr;
  #line 4441 
  struct e1000_hw *hw = & adapter->hw;
  #line 4447 
  if (hw->mac.type <= (unsigned int)e1000_82575) 
                                                 #line 4448 
                                                 return;
  #line 4450 
  vmolr = igb_rd32(hw,(unsigned int)((vfn + 5812) * 4));
  #line 4451 
  if ((int)aupe != 0) 
                      #line 4452 
                      vmolr |= 16777216U; else 
                                               #line 4454 
                                               vmolr &= 4278190079U;
  #line 4457 
  vmolr &= 4160618495U;
  #line 4459 
  if (adapter->rss_queues > 1U && adapter->vfs_allocated_count == (unsigned int)vfn) 
    #line 4460 
    vmolr |= 131072U;
  #line 4464 
  if (adapter->vfs_allocated_count >= (unsigned int)vfn) 
                                                         #line 4465 
                                                         vmolr |= 134217728U;
  {
    #line 4468 
    union __anonunion___u_3433 __u;
    #line 4467 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 4467 
    u8 *hw_addr = (__u.__val);
    #line 4467 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 4467 
                                           writel(vmolr,(void *)(hw_addr + (unsigned long)((vfn + 5812) * 4)));
  }
  #line 4469 
  return;
}

#line 4477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_configure_rx_ring(struct igb_adapter *adapter, struct igb_ring *ring)
{
  #line 4481 
  union e1000_adv_rx_desc *rx_desc;
  #line 4497 
  int tmp_7;
  #line 4519 
  unsigned int tmp_13;
  #line 4521 
  unsigned int tmp_14;
  #line 4480 
  struct e1000_hw *hw = & adapter->hw;
  #line 4482 
  u64 rdba = ring->dma;
  #line 4483 
  int reg_idx = (int)ring->reg_idx;
  #line 4484 
  u32 srrctl = 0U;
  #line 4484 
  u32 rxdctl = 0U;
  {
    #line 4488 
    union __anonunion___u_3435 __u;
    #line 4487 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 4487 
    u8 *hw_addr = (__u.__val);
    #line 4487 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      #line 4487 
      int tmp_0;
      #line 4487 
      if (reg_idx <= 3) 
                        #line 4487 
                        tmp_0 = reg_idx * 256 + 10280; else 
                                                            #line 4487 
                                                            tmp_0 = reg_idx * 64 + 49192;
      #line 4487 
      ;
      #line 4487 
      writel(0U,(void *)(hw_addr + (unsigned long)tmp_0));
    }
  }
  {
    #line 4491 
    union __anonunion___u_3437 __u_0;
    #line 4490 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 4490 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 4490 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      #line 4490 
      int tmp_2;
      #line 4490 
      if (reg_idx <= 3) 
                        #line 4490 
                        tmp_2 = (reg_idx + 40) * 256; else 
                                                           #line 4490 
                                                           tmp_2 = (reg_idx + 768) * 64;
      #line 4490 
      ;
      #line 4490 
      ;
      #line 4490 
      writel((unsigned int)rdba,(void *)(hw_addr_0 + (unsigned long)tmp_2));
    }
  }
  {
    #line 4493 
    union __anonunion___u_3439 __u_1;
    #line 4492 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 4492 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 4492 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) {
      #line 4492 
      int tmp_4;
      #line 4492 
      if (reg_idx <= 3) 
                        #line 4492 
                        tmp_4 = reg_idx * 256 + 10244; else 
                                                            #line 4492 
                                                            tmp_4 = reg_idx * 64 + 49156;
      #line 4492 
      ;
      #line 4492 
      ;
      #line 4492 
      writel((unsigned int)(rdba >> 32),(void *)(hw_addr_1 + (unsigned long)tmp_4));
    }
  }
  {
    #line 4494 
    union __anonunion___u_3441 __u_2;
    #line 4493 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 4493 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 4493 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) {
      #line 4493 
      int tmp_6;
      #line 4493 
      if (reg_idx <= 3) 
                        #line 4493 
                        tmp_6 = reg_idx * 256 + 10248; else 
                                                            #line 4493 
                                                            tmp_6 = reg_idx * 64 + 49160;
      #line 4493 
      ;
      #line 4493 
      ;
      #line 4493 
      writel((unsigned int)ring->count * 16U,(void *)(hw_addr_2 + (unsigned long)tmp_6));
    }
  }
  #line 4497 
  if (reg_idx <= 3) 
                    #line 4497 
                    tmp_7 = reg_idx * 256 + 10264; else 
                                                        #line 4497 
                                                        tmp_7 = reg_idx * 64 + 49176;
  #line 4497 
  ring->tail = (void *)(adapter->io_addr + (unsigned long)tmp_7);
  {
    #line 4499 
    union __anonunion___u_3443 __u_3;
    #line 4498 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 4498 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 4498 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) {
      #line 4498 
      int tmp_9;
      #line 4498 
      if (reg_idx <= 3) 
                        #line 4498 
                        tmp_9 = reg_idx * 256 + 10256; else 
                                                            #line 4498 
                                                            tmp_9 = reg_idx * 64 + 49168;
      #line 4498 
      ;
      #line 4498 
      writel(0U,(void *)(hw_addr_3 + (unsigned long)tmp_9));
    }
  }
  #line 4499 
  writel(0U,ring->tail);
  #line 4502 
  srrctl = 1024U;
  #line 4503 
  if ((int)test_bit(0L,& ring->flags) != 0) 
                                            #line 4504 
                                            srrctl |= 3U; else 
                                                               #line 4506 
                                                               srrctl |= 2U;
  #line 4507 
  srrctl |= 33554432U;
  #line 4508 
  if (hw->mac.type > (unsigned int)e1000_82576) 
                                                #line 4509 
                                                srrctl |= 1073741824U;
  #line 4511 
  if (adapter->vfs_allocated_count != 0U || adapter->num_rx_queues > 1) 
    #line 4512 
    srrctl |= 2147483648U;
  {
    #line 4515 
    union __anonunion___u_3445 __u_4;
    #line 4514 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 4514 
    u8 *hw_addr_4 = (__u_4.__val);
    #line 4514 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) {
      #line 4514 
      int tmp_12;
      #line 4514 
      if (reg_idx <= 3) 
                        #line 4514 
                        tmp_12 = reg_idx * 256 + 10252; else 
                                                             #line 4514 
                                                             tmp_12 = reg_idx * 64 + 49164;
      #line 4514 
      ;
      #line 4514 
      ;
      #line 4514 
      writel(srrctl,(void *)(hw_addr_4 + (unsigned long)tmp_12));
    }
  }
  #line 4517 
  igb_set_vmolr(adapter,reg_idx & 7,(_Bool)1);
  #line 4519 
  if (hw->mac.type == (unsigned int)e1000_i354) 
                                                #line 4519 
                                                tmp_13 = 12U; else 
                                                                   #line 4519 
                                                                   tmp_13 = 8U;
  #line 4519 
  rxdctl = tmp_13 | rxdctl;
  #line 4520 
  rxdctl |= 2048U;
  #line 4521 
  if (hw->mac.type == (unsigned int)e1000_82576 && ((unsigned long)adapter->flags & 8192UL) != 0UL) 
    #line 4521 
    tmp_14 = 65536U; else 
                          #line 4521 
                          tmp_14 = 262144U;
  #line 4521 
  rxdctl = tmp_14 | rxdctl;
  #line 4524 
  memset((void *)ring->__anonCompField_igb_ring_166.rx_buffer_info,0,(unsigned long)ring->count * 24UL);
  #line 4528 
  rx_desc = (union e1000_adv_rx_desc *)ring->desc;
  #line 4529 
  rx_desc->wb.upper.length = (unsigned short)0U;
  #line 4532 
  rxdctl |= 33554432U;
  {
    #line 4534 
    union __anonunion___u_3447 __u_5;
    #line 4533 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
    #line 4533 
    u8 *hw_addr_5 = (__u_5.__val);
    #line 4533 
    if ((long)(hw_addr_5 == (u8 *)0U) == 0L) {
      #line 4533 
      int tmp_16;
      #line 4533 
      if (reg_idx <= 3) 
                        #line 4533 
                        tmp_16 = reg_idx * 256 + 10280; else 
                                                             #line 4533 
                                                             tmp_16 = reg_idx * 64 + 49192;
      #line 4533 
      ;
      #line 4533 
      ;
      #line 4533 
      writel(rxdctl,(void *)(hw_addr_5 + (unsigned long)tmp_16));
    }
  }
  #line 4535 
  return;
}

#line 4536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_rx_buffer_len(struct igb_adapter *adapter, struct igb_ring *rx_ring)
{
  #line 4540 
  cif_clear_bit_0(1L,& rx_ring->flags);
  #line 4541 
  cif_clear_bit_0(0L,& rx_ring->flags);
  #line 4543 
  if (((unsigned long)adapter->flags & 65536UL) != 0UL) 
                                                        #line 4544 
                                                        return;
  #line 4546 
  cif_set_bit_0(1L,& rx_ring->flags);
  #line 4549 
  if (adapter->max_frame_size <= 1648U) 
                                        #line 4550 
                                        return;
  #line 4552 
  cif_set_bit_0(0L,& rx_ring->flags);
  #line 4553 
  return;
}

#line 4562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_configure_rx(struct igb_adapter *adapter)
{
  #line 4564 
  int i;
  #line 4567 
  igb_set_default_mac_filter(adapter);
  #line 4572 
  i = 0;
  #line 4572 
  while (adapter->num_rx_queues > i) {
    {
      #line 4573 
      struct igb_ring *rx_ring = adapter->rx_ring[i];
      #line 4575 
      igb_set_rx_buffer_len(adapter,rx_ring);
      #line 4576 
      igb_configure_rx_ring(adapter,rx_ring);
    }
    #line 4572 
    i ++;
  }
  #line 4578 
  return;
}

#line 4586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_free_tx_resources(struct igb_ring *tx_ring)
{
  #line 4588 
  igb_clean_tx_ring(tx_ring);
  #line 4590 
  cif_vfree_0((void *)tx_ring->__anonCompField_igb_ring_166.tx_buffer_info);
  #line 4591 
  tx_ring->__anonCompField_igb_ring_166.tx_buffer_info = (struct igb_tx_buffer *)0;
  #line 4594 
  if (tx_ring->desc == (void *)0) 
                                  #line 4595 
                                  return;
  #line 4597 
  dma_free_coherent(tx_ring->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma);
  #line 4600 
  tx_ring->desc = (void *)0;
  #line 4601 
  return;
}

#line 4609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_all_tx_resources(struct igb_adapter *adapter)
{
  #line 4611 
  int i;
  #line 4613 
  i = 0;
  #line 4613 
  while (adapter->num_tx_queues > i) {
    #line 4614 
    if (adapter->tx_ring[i] != (struct igb_ring *)0) 
                                                     #line 4615 
                                                     igb_free_tx_resources(adapter->tx_ring[i]);
    #line 4613 
    i ++;
  }
  #line 4616 
  return;
}

#line 4622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clean_tx_ring(struct igb_ring *tx_ring)
{
  #line 4624 
  u16 i = tx_ring->next_to_clean;
  #line 4625 
  struct igb_tx_buffer *tx_buffer = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info + (unsigned long)i;
  #line 4627 
  while ((int)tx_ring->next_to_use != (int)i) {
    #line 4628 
    union e1000_adv_tx_desc *eop_desc;
    #line 4628 
    union e1000_adv_tx_desc *tx_desc;
    #line 4631 
    dev_kfree_skb_any(tx_buffer->skb);
    #line 4634 
    dma_unmap_single_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 4640 
    eop_desc = tx_buffer->next_to_watch;
    #line 4641 
    tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc + (unsigned long)i;
    #line 4644 
    while (tx_desc != eop_desc) {
      #line 4645 
      tx_buffer ++;
      #line 4646 
      tx_desc ++;
      #line 4647 
      i = (u16)((int)i + 1);
      #line 4648 
      if ((long)((int)tx_ring->count == (int)i) != 0L) {
        #line 4649 
        i = (unsigned short)0U;
        #line 4650 
        tx_buffer = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info;
        #line 4651 
        tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc;
      }
      #line 4655 
      if (tx_buffer->len != 0U) 
                                #line 4656 
                                dma_unmap_page_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    }
    #line 4663 
    tx_buffer ++;
    #line 4664 
    i = (u16)((int)i + 1);
    #line 4665 
    if ((long)((int)tx_ring->count == (int)i) != 0L) {
      #line 4666 
      i = (unsigned short)0U;
      #line 4667 
      tx_buffer = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info;
    }
  }
  #line 4672 
  netdev_tx_reset_queue_0(txring_txq(tx_ring));
  #line 4675 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 4676 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 4677 
  return;
}

#line 4683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clean_all_tx_rings(struct igb_adapter *adapter)
{
  #line 4685 
  int i;
  #line 4687 
  i = 0;
  #line 4687 
  while (adapter->num_tx_queues > i) {
    #line 4688 
    if (adapter->tx_ring[i] != (struct igb_ring *)0) 
                                                     #line 4689 
                                                     igb_clean_tx_ring(adapter->tx_ring[i]);
    #line 4687 
    i ++;
  }
  #line 4690 
  return;
}

#line 4698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_free_rx_resources(struct igb_ring *rx_ring)
{
  #line 4700 
  igb_clean_rx_ring(rx_ring);
  #line 4702 
  cif_vfree_0((void *)rx_ring->__anonCompField_igb_ring_166.rx_buffer_info);
  #line 4703 
  rx_ring->__anonCompField_igb_ring_166.rx_buffer_info = (struct igb_rx_buffer *)0;
  #line 4706 
  if (rx_ring->desc == (void *)0) 
                                  #line 4707 
                                  return;
  #line 4709 
  dma_free_coherent(rx_ring->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma);
  #line 4712 
  rx_ring->desc = (void *)0;
  #line 4713 
  return;
}

#line 4721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_all_rx_resources(struct igb_adapter *adapter)
{
  #line 4723 
  int i;
  #line 4725 
  i = 0;
  #line 4725 
  while (adapter->num_rx_queues > i) {
    #line 4726 
    if (adapter->rx_ring[i] != (struct igb_ring *)0) 
                                                     #line 4727 
                                                     igb_free_rx_resources(adapter->rx_ring[i]);
    #line 4725 
    i ++;
  }
  #line 4728 
  return;
}

#line 4734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clean_rx_ring(struct igb_ring *rx_ring)
{
  #line 4736 
  u16 i = rx_ring->next_to_clean;
  #line 4738 
  consume_skb(rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.skb);
  #line 4739 
  rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.skb = (struct sk_buff *)0;
  #line 4742 
  while ((int)rx_ring->next_to_alloc != (int)i) {
    #line 4743 
    struct igb_rx_buffer *buffer_info = rx_ring->__anonCompField_igb_ring_166.rx_buffer_info + (unsigned long)i;
    #line 4748 
    ;
    #line 4748 
    ;
    #line 4748 
    ;
    #line 4748 
    dma_sync_single_range_for_cpu(rx_ring->dev,buffer_info->dma,(unsigned long)buffer_info->page_offset,(unsigned long)igb_rx_bufsz(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE);
    #line 4755 
    ;
    #line 4755 
    ;
    #line 4755 
    dma_unmap_page_attrs(rx_ring->dev,buffer_info->dma,4096UL << igb_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
    #line 4760 
    __page_frag_cache_drain(buffer_info->page,(unsigned int)buffer_info->pagecnt_bias);
    #line 4763 
    i = (u16)((int)i + 1);
    #line 4764 
    if ((int)rx_ring->count == (int)i) 
                                       #line 4765 
                                       i = (unsigned short)0U;
  }
  #line 4768 
  rx_ring->next_to_alloc = (unsigned short)0U;
  #line 4769 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 4770 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 4771 
  return;
}

#line 4777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clean_all_rx_rings(struct igb_adapter *adapter)
{
  #line 4779 
  int i;
  #line 4781 
  i = 0;
  #line 4781 
  while (adapter->num_rx_queues > i) {
    #line 4782 
    if (adapter->rx_ring[i] != (struct igb_ring *)0) 
                                                     #line 4783 
                                                     igb_clean_rx_ring(adapter->rx_ring[i]);
    #line 4781 
    i ++;
  }
  #line 4784 
  return;
}

#line 4793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_mac(struct net_device *netdev, void *p)
{
  #line 4795 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 4796 
  struct e1000_hw *hw = & adapter->hw;
  #line 4797 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 4799 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 4800 
                                                      return -99;
  #line 4802 
  memcpy((void *)netdev->dev_addr,(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 4803 
  memcpy((void *)(& hw->mac.addr),(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 4806 
  igb_set_default_mac_filter(adapter);
  #line 4808 
  return 0;
}

#line 4820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_write_mc_addr_list(struct net_device *netdev)
{
  #line 4841 
  void *__mptr;
  #line 4824 
  struct netdev_hw_addr *ha;
  #line 4825 
  u8 *mta_list;
  #line 4826 
  int i;
  #line 4822 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 4823 
  struct e1000_hw *hw = & adapter->hw;
  #line 4828 
  if (netdev->mc.count == 0) {
    #line 4830 
    igb_update_mc_addr_list(hw,(u8 *)0U,0U);
    #line 4831 
    igb_restore_vf_multicasts(adapter);
    #line 4832 
    return 0;
  }
  #line 4835 
  mta_list = (u8 *)kcalloc((unsigned long)netdev->mc.count,6UL,2592U);
  #line 4836 
  if (mta_list == (u8 *)0U) 
                            #line 4837 
                            return -12;
  #line 4840 
  i = 0;
  #line 4841 
  __mptr = (void *)netdev->mc.list.next;
  #line 4841 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 4841 
  while (& ha->list != & netdev->mc.list) {
    #line 4841 
    void *__mptr_0;
    #line 4842 
    int tmp_3;
    #line 4842 
    ;
    #line 4842 
    tmp_3 = i;
    #line 4842 
    i ++;
    #line 4842 
    ;
    #line 4842 
    memcpy((void *)(mta_list + (unsigned long)(tmp_3 * 6)),(void *)(& ha->addr),6UL);
    #line 4841 
    __mptr_0 = (void *)ha->list.next;
    #line 4841 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 4844 
  igb_update_mc_addr_list(hw,mta_list,(unsigned int)i);
  #line 4845 
  kfree((void *)mta_list);
  #line 4847 
  return netdev->mc.count;
}

#line 4850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_vlan_promisc_enable(struct igb_adapter *adapter)
{
  #line 4853 
  u32 i;
  #line 4853 
  u32 pf_id;
  #line 4852 
  struct e1000_hw *hw = & adapter->hw;
  #line 4855 
  switch ((unsigned int)hw->mac.type) {
    #line 4856 
    case (unsigned int)6: 
                          #line 4856 
    ;
    #line 4857 
    case (unsigned int)7: 
                          #line 4857 
    ;
    #line 4858 
    case (unsigned int)4: 
                          #line 4858 
    ;
    #line 4860 
    if (((adapter->netdev)->features & 137438953472ULL) != 0ULL) 
                                                                 #line 4861 
                                                                 break;
    #line 4863 
    case (unsigned int)2: 
                          #line 4863 
    ;
    #line 4864 
    case (unsigned int)3: 
                          #line 4864 
    ;
    #line 4865 
    case (unsigned int)5: 
                          #line 4865 
    ;
    #line 4867 
    if (adapter->vfs_allocated_count != 0U) 
                                            #line 4868 
                                            break;
    #line 4870 
    default: 
             #line 4870 
    ;
    #line 4871 
    return 1;
  }
  #line 4875 
  if (((unsigned long)adapter->flags & 32768UL) != 0UL) 
                                                        #line 4876 
                                                        return 0;
  #line 4878 
  if (adapter->vfs_allocated_count == 0U) 
                                          #line 4879 
                                          goto set_vfta;
  #line 4882 
  pf_id = adapter->vfs_allocated_count + 12U;
  #line 4884 
  i = 32U;
  #line 4884 
  while (1) {
    #line 4884 
    i --;
    #line 4884 
    if (! (i != 0U)) 
                     #line 4884 
                     break;
    {
      #line 4885 
      u32 vlvf = igb_rd32(hw,(i + 5952U) * 4U);
      #line 4887 
      vlvf = (unsigned int)(1UL << pf_id) | vlvf;
      {
        #line 4889 
        union __anonunion___u_3449 __u;
        #line 4888 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 4888 
        u8 *hw_addr = (__u.__val);
        #line 4888 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 4888 
                                               writel(vlvf,(void *)(hw_addr + (unsigned long)((i + 5952U) * 4U)));
      }
    }
  }
  #line 4891 
  set_vfta: 
            #line 4891 
  ;
  #line 4893 
  i = 128U;
  #line 4893 
  while (1) {
    #line 4893 
    u32 tmp_1;
    #line 4893 
    tmp_1 = i;
    #line 4893 
    i --;
    #line 4893 
    ;
    #line 4893 
    if (! (tmp_1 != 0U)) 
                         #line 4893 
                         break;
    #line 4894 
    (*(hw->mac.ops.write_vfta))(hw,i,4294967295U);
  }
  #line 4897 
  adapter->flags |= 32768U;
  #line 4899 
  return 0;
}

#line 4903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_scrub_vfta(struct igb_adapter *adapter, u32 vfta_offset)
{
  #line 4909 
  u32 i;
  #line 4909 
  u32 vid;
  #line 4909 
  u32 word;
  #line 4909 
  u32 bits;
  #line 4909 
  u32 pf_id;
  #line 4905 
  struct e1000_hw *hw = & adapter->hw;
  #line 4906 
  u32 vfta[8U] = {0U};
  #line 4907 
  u32 vid_start = vfta_offset * 32U;
  #line 4908 
  u32 vid_end = vid_start + 256U;
  #line 4912 
  vid = (unsigned int)adapter->mng_vlan_id;
  #line 4913 
  if (vid >= vid_start && vid < vid_end) 
                                         #line 4914 
                                         vfta[(vid - vid_start) / 32U] |= (unsigned int)(1UL << (vid & 31U));
  #line 4916 
  if (adapter->vfs_allocated_count == 0U) 
                                          #line 4917 
                                          goto set_vfta;
  #line 4919 
  pf_id = adapter->vfs_allocated_count + 12U;
  #line 4921 
  i = 32U;
  #line 4921 
  while (1) {
    #line 4921 
    i --;
    #line 4921 
    if (! (i != 0U)) 
                     #line 4921 
                     break;
    {
      #line 4922 
      u32 vlvf = igb_rd32(hw,(i + 5952U) * 4U);
      #line 4925 
      vid = vlvf & 4095U;
      #line 4928 
      if (vid < vid_start || vid >= vid_end) 
                                             #line 4929 
                                             goto __Cont;
      #line 4931 
      if ((vlvf & 2147483648U) != 0U) {
        #line 4933 
        vfta[(vid - vid_start) / 32U] |= (unsigned int)(1UL << (vid & 31U));
        #line 4936 
        if ((int)test_bit((long)vid,(unsigned long *)(& adapter->active_vlans)) != 0) 
          #line 4937 
          goto __Cont;
      }
      #line 4941 
      bits = ~ ((unsigned int)(1UL << pf_id));
      #line 4942 
      bits = igb_rd32(hw,(i + 5952U) * 4U) & bits;
      {
        #line 4944 
        union __anonunion___u_3451 __u;
        #line 4943 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 4943 
        u8 *hw_addr = (__u.__val);
        #line 4943 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 4943 
                                               writel(bits,(void *)(hw_addr + (unsigned long)((i + 5952U) * 4U)));
      }
    }
    #line 4921 
    __Cont: 
            #line 4921 
    ;
  }
  #line 4946 
  set_vfta: 
            #line 4946 
  ;
  #line 4948 
  i = 8U;
  #line 4948 
  while (1) {
    #line 4948 
    u32 tmp_3;
    #line 4948 
    tmp_3 = i;
    #line 4948 
    i --;
    #line 4948 
    ;
    #line 4948 
    if (! (tmp_3 != 0U)) 
                         #line 4948 
                         break;
    #line 4949 
    vid = (vfta_offset + i) * 32U;
    #line 4950 
    word = vid / 64U;
    #line 4951 
    bits = vid & 63U;
    #line 4953 
    vfta[i] |= (unsigned int)(adapter->active_vlans[word] >> bits);
    #line 4955 
    (*(hw->mac.ops.write_vfta))(hw,vfta_offset + i,vfta[i]);
  }
  #line 4957 
  return;
}

#line 4959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_vlan_promisc_disable(struct igb_adapter *adapter)
{
  #line 4961 
  u32 i;
  #line 4964 
  if (((unsigned long)adapter->flags & 32768UL) == 0UL) 
                                                        #line 4965 
                                                        return;
  #line 4968 
  adapter->flags &= 4294934527U;
  #line 4970 
  i = 0U;
  #line 4970 
  while (i <= 127U) {
    #line 4971 
    igb_scrub_vfta(adapter,i);
    #line 4970 
    i += 8U;
  }
  #line 4972 
  return;
}

#line 4983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_rx_mode(struct net_device *netdev)
{
  #line 4989 
  int count;
  #line 4985 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 4986 
  struct e1000_hw *hw = & adapter->hw;
  #line 4987 
  unsigned int vfn = adapter->vfs_allocated_count;
  #line 4988 
  u32 rctl = 0U;
  #line 4988 
  u32 vmolr = 0U;
  #line 4988 
  u32 rlpml = 9728U;
  #line 4992 
  if ((netdev->flags & 256U) != 0U) {
    #line 4993 
    rctl |= 24U;
    #line 4994 
    vmolr |= 268435456U;
    #line 4997 
    if (hw->mac.type == (unsigned int)e1000_82576) 
                                                   #line 4998 
                                                   vmolr |= 67108864U;
  }
  else 
    #line 5000 
    if ((netdev->flags & 512U) != 0U) {
      #line 5001 
      rctl |= 16U;
      #line 5002 
      vmolr |= 268435456U;
    }
    else {
      #line 5008 
      count = igb_write_mc_addr_list(netdev);
      #line 5009 
      if (count < 0) {
        #line 5010 
        rctl |= 16U;
        #line 5011 
        vmolr |= 268435456U;
      }
      else 
        #line 5012 
        if (count != 0) 
                        #line 5013 
                        vmolr |= 33554432U;
    }
  #line 5022 
  if (__dev_uc_sync(netdev,& igb_uc_sync,& igb_uc_unsync) != 0) {
    #line 5023 
    rctl |= 8U;
    #line 5024 
    vmolr |= 67108864U;
  }
  #line 5028 
  rctl |= 262144U;
  #line 5031 
  if ((netdev->flags & 256U) != 0U || (netdev->features & 8796093022208ULL) != 0ULL) {
    #line 5034 
    if (igb_vlan_promisc_enable(adapter) != 0) 
                                               #line 5035 
                                               rctl &= 4294705151U;
  }
  else 
       #line 5037 
       igb_vlan_promisc_disable(adapter);
  #line 5042 
  rctl = (igb_rd32(hw,256U) & 4294705127U) | rctl;
  {
    #line 5044 
    union __anonunion___u_3453 __u;
    #line 5043 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 5043 
    u8 *hw_addr = (__u.__val);
    #line 5043 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 5043 
                                           writel(rctl,(void *)(hw_addr + 256U));
  }
  #line 5046 
  if (adapter->vfs_allocated_count == 0U) 
    #line 5047 
    if (adapter->max_frame_size <= 1648U) 
                                          #line 5048 
                                          rlpml = 1648U;
  {
    #line 5052 
    union __anonunion___u_3455 __u_0;
    #line 5051 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 5051 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 5051 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 5051 
                                             writel(rlpml,(void *)(hw_addr_0 + 20484U));
  }
  #line 5058 
  if ((unsigned int)hw->mac.type + 4294967294U > 2U) 
                                                     #line 5059 
                                                     return;
  #line 5062 
  igb_set_uta(adapter,(_Bool)((vmolr & 67108864U) != 0U));
  #line 5065 
  vmolr = (igb_rd32(hw,(vfn + 5812U) * 4U) & 3925868543U) | vmolr;
  #line 5068 
  vmolr &= 4294950912U;
  #line 5070 
  if (adapter->max_frame_size <= 1648U) 
                                        #line 5071 
                                        vmolr |= 1648U; else 
                                                             #line 5074 
                                                             vmolr |= 9728U;
  #line 5075 
  vmolr |= 65536U;
  {
    #line 5078 
    union __anonunion___u_3457 __u_1;
    #line 5077 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 5077 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 5077 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 5077 
                                             writel(vmolr,(void *)(hw_addr_1 + (unsigned long)((vfn + 5812U) * 4U)));
  }
  #line 5079 
  igb_restore_vf_multicasts(adapter);
  #line 5080 
  return;
}

#line 5082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_check_wvbr(struct igb_adapter *adapter)
{
  #line 5084 
  struct e1000_hw *hw = & adapter->hw;
  #line 5085 
  u32 wvbr = 0U;
  #line 5087 
  switch ((unsigned int)hw->mac.type) {
    #line 5088 
    case (unsigned int)2: 
                          #line 5088 
    ;
    #line 5089 
    case (unsigned int)4: 
                          #line 5089 
    ;
    #line 5090 
    wvbr = igb_rd32(hw,13652U);
    #line 5091 
    if (wvbr == 0U) 
                    #line 5092 
                    return;
    #line 5093 
    break;
    #line 5094 
    default: 
             #line 5094 
    ;
    #line 5095 
    break;
  }
  #line 5098 
  adapter->wvbr |= wvbr;
  #line 5099 
  return;
}

#line 5103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_spoof_check(struct igb_adapter *adapter)
{
  #line 5105 
  int j;
  #line 5107 
  if (adapter->wvbr == 0U) 
                           #line 5108 
                           return;
  #line 5110 
  j = 0;
  #line 5110 
  while (adapter->vfs_allocated_count > (unsigned int)j) {
    #line 5111 
    if ((((unsigned long)adapter->wvbr >> j) & 1UL) != 0UL || (((unsigned long)adapter->wvbr >> (j + 8)) & 1UL) != 0UL) {
      #line 5113 
      _dev_warn(& (adapter->pdev)->dev,(char *)"Spoof event(s) detected on VF %d\n",j);
      #line 5115 
      adapter->wvbr &= ~ ((unsigned int)(1UL << j) | (unsigned int)(1UL << (j + 8)));
    }
    #line 5110 
    j ++;
  }
  #line 5119 
  return;
}

#line 5125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_phy_info(struct timer_list *t)
{
  #line 5127 
  void *__mptr;
  #line 5127 
  __mptr = (void *)t;
  #line 5127 
  struct igb_adapter *adapter = ((struct igb_adapter *)(__mptr + 18446744073709550616U));
  #line 5128 
  igb_get_phy_info(& adapter->hw);
  #line 5129 
  return;
}

#line 5135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
bool igb_has_link(struct igb_adapter *adapter)
{
  #line 5137 
  struct e1000_hw *hw = & adapter->hw;
  #line 5138 
  bool link_active = (_Bool)0;
  #line 5145 
  switch ((unsigned int)hw->phy.media_type) {
    #line 5146 
    case (unsigned int)1: 
                          #line 5146 
    ;
    #line 5147 
    if (! hw->mac.get_link_status) 
                                   #line 5148 
                                   return (_Bool)1;
    #line 5150 
    case (unsigned int)3: 
                          #line 5150 
    ;
    #line 5151 
    (*(hw->mac.ops.check_for_link))(hw);
    #line 5152 
    link_active = (_Bool)(! ((int)hw->mac.get_link_status != 0));
    #line 5153 
    break;
    #line 5154 
    default: 
             #line 5154 
    ;
    #line 5155 
    case (unsigned int)0: 
                          #line 5155 
    ;
    #line 5156 
    break;
  }
  #line 5159 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U && hw->phy.id == 21040128U) {
    #line 5162 
    if (netif_carrier_ok(adapter->netdev)) {
      #line 5164 
      if (((unsigned long)adapter->flags & 512UL) == 0UL) {
        #line 5165 
        adapter->flags |= 512U;
        #line 5166 
        adapter->link_check_timeout = jiffies;
      }
    }
    else 
         #line 5163 
         adapter->flags &= 4294966783U;
  }
  #line 5170 
  return link_active;
}

#line 5173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_thermal_sensor_event(struct e1000_hw *hw, u32 event)
{
  #line 5176 
  u32 ctrl_ext;
  #line 5176 
  u32 thstat;
  #line 5175 
  bool ret = (_Bool)0;
  #line 5179 
  if (hw->mac.type == (unsigned int)e1000_i350) {
    #line 5180 
    thstat = igb_rd32(hw,33040U);
    #line 5181 
    ctrl_ext = igb_rd32(hw,24U);
    #line 5183 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (ctrl_ext & 8388608U) == 0U) 
      #line 5185 
      ret = (_Bool)((thstat & event) != 0U);
  }
  #line 5188 
  return ret;
}

#line 5196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_check_lvmmc(struct igb_adapter *adapter)
{
  #line 5199 
  u32 lvmmc;
  #line 5198 
  struct e1000_hw *hw = & adapter->hw;
  #line 5201 
  lvmmc = igb_rd32(hw,13640U);
  #line 5202 
  if (lvmmc != 0U) {
    #line 5203 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 5204 
                                            netdev_warn(adapter->netdev,(char *)"malformed Tx packet detected and dropped, LVMMC:0x%08x\n",lvmmc);
  }
  #line 5206 
  return;
}

#line 5215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_watchdog(struct timer_list *t)
{
  #line 5217 
  void *__mptr;
  #line 5217 
  __mptr = (void *)t;
  #line 5217 
  struct igb_adapter *adapter = ((struct igb_adapter *)(__mptr + 18446744073709550704U));
  #line 5219 
  cif_schedule_work(& adapter->watchdog_task);
  #line 5220 
  return;
}

#line 5222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_watchdog_task(struct work_struct *work)
{
  #line 5224 
  void *__mptr;
  #line 5230 
  u32 link;
  #line 5231 
  int i;
  #line 5232 
  u32 connsw;
  #line 5233 
  u16 phy_data;
  #line 5224 
  __mptr = (void *)work;
  #line 5224 
  struct igb_adapter *adapter = ((struct igb_adapter *)(__mptr + 18446744073709550416U));
  #line 5227 
  struct e1000_hw *hw = & adapter->hw;
  #line 5228 
  struct e1000_phy_info *phy = & hw->phy;
  #line 5229 
  struct net_device *netdev = adapter->netdev;
  #line 5233 
  u16 retry_count = (unsigned short)20U;
  #line 5235 
  link = (unsigned int)igb_has_link(adapter);
  #line 5237 
  if (((unsigned long)adapter->flags & 512UL) != 0UL) {
    {
      #line 5238 
      unsigned long __dummy;
      #line 5238 
      unsigned long __dummy2;
      }
    #line 5238 
    if (1 != 0) {
      {
        #line 5238 
        unsigned long __dummy_0;
        #line 5238 
        unsigned long __dummy2_0;
        }
      #line 5238 
      if (1 != 0) 
        #line 5238 
        if ((long)((adapter->link_check_timeout - jiffies) + 250UL) < 0L) 
          #line 5239 
          adapter->flags &= 4294966783U; else 
                                              #line 5241 
                                              link = 0U;
      else 
           #line 5241 
           link = 0U;
    }
    else 
         #line 5241 
         link = 0U;
  }
  #line 5245 
  if (((unsigned long)adapter->flags & 4096UL) != 0UL) 
    #line 5246 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
      #line 5247 
      connsw = igb_rd32(hw,52U);
      #line 5248 
      if ((connsw & 1U) == 0U) 
                               #line 5249 
                               link = 0U;
    }
  #line 5252 
  if (link != 0U) {
    #line 5254 
    if ((int)hw->dev_spec._82575.media_changed != 0) {
      #line 5255 
      hw->dev_spec._82575.media_changed = (_Bool)0;
      #line 5256 
      adapter->flags |= 1024U;
      #line 5257 
      igb_reset(adapter);
    }
    #line 5260 
    pm_runtime_resume(netdev->dev.parent);
    #line 5262 
    if (! netif_carrier_ok(netdev)) {
      #line 5279 
      char *tmp_3;
      #line 5277 
      char *tmp_4;
      #line 5263 
      u32 ctrl;
      #line 5276 
      char *tmp_5;
      #line 5274 
      char *tmp_6;
      #line 5265 
      (*(hw->mac.ops.get_speed_and_duplex))(hw,& adapter->link_speed,& adapter->link_duplex);
      #line 5269 
      ctrl = igb_rd32(hw,0U);
      #line 5276 
      if ((ctrl & 268435456U) == 0U || (ctrl & 134217728U) == 0U) {
        #line 5277 
        if ((ctrl & 134217728U) == 0U) {
          #line 5279 
          if ((ctrl & 268435456U) != 0U) 
                                         #line 5279 
                                         tmp_3 = (char *)"TX"; else 
                                                                    #line 5279 
                                                                    tmp_3 = (char *)"None";
          #line 5277 
          tmp_4 = tmp_3;
        }
        else 
             #line 5277 
             tmp_4 = (char *)"RX";
        #line 5276 
        tmp_5 = tmp_4;
      }
      else 
           #line 5276 
           tmp_5 = (char *)"RX/TX";
      #line 5274 
      if ((unsigned int)adapter->link_duplex == 2U) 
                                                    #line 5274 
                                                    tmp_6 = (char *)"Full"; else 
                                                                    #line 5274 
                                                                    tmp_6 = (char *)"Half";
      #line 5271 
      ;
      #line 5271 
      ;
      #line 5271 
      ;
      #line 5271 
      netdev_info(netdev,(char *)"igb: %s NIC Link is Up %d Mbps %s Duplex, Flow Control: %s\n",(char *)(& netdev->name),(int)adapter->link_speed,tmp_6,tmp_5);
      #line 5283 
      if (((unsigned long)adapter->flags & 16384UL) != 0UL && (unsigned int)adapter->link_duplex == 1U) {
        #line 5285 
        _dev_info(& (adapter->pdev)->dev,(char *)"EEE Disabled: unsupported at half duplex. Re-enable using ethtool when at full duplex.\n");
        #line 5287 
        adapter->hw.dev_spec._82575.eee_disable = (_Bool)1;
        #line 5288 
        adapter->flags &= 4294950911U;
      }
      #line 5292 
      igb_check_downshift(hw);
      #line 5293 
      if ((int)phy->speed_downgraded != 0) 
                                           #line 5294 
                                           netdev_warn(netdev,(char *)"Link Speed was downgraded by SmartSpeed\n");
      #line 5297 
      if ((int)igb_thermal_sensor_event(hw,2U) != 0) 
                                                     #line 5299 
                                                     netdev_info(netdev,(char *)"The network adapter link speed was downshifted because it overheated\n");
      #line 5302 
      adapter->tx_timeout_factor = (unsigned char)1U;
      #line 5303 
      switch ((int)adapter->link_speed) {
        #line 5304 
        case 10: 
                 #line 5304 
        ;
        #line 5305 
        adapter->tx_timeout_factor = (unsigned char)14U;
        #line 5306 
        break;
        #line 5307 
        case 100: 
                  #line 5307 
        ;
        #line 5309 
        break;
      }
      #line 5312 
      if ((unsigned int)adapter->link_speed != 1000U) 
                                                      #line 5313 
                                                      goto no_wait;
      #line 5316 
      retry_read_status: 
                         #line 5316 
      ;
      #line 5317 
      if (igb_read_phy_reg(hw,10U,& phy_data) == 0) {
        #line 5319 
        if (((int)phy_data & 4096) == 0 && (unsigned int)retry_count != 0U) {
          #line 5321 
          msleep(100U);
          #line 5322 
          retry_count = (u16)((int)retry_count - 1);
          #line 5323 
          goto retry_read_status;
        }
        else 
          #line 5324 
          if ((unsigned int)retry_count == 0U) 
                                               #line 5325 
                                               _dev_err(& (adapter->pdev)->dev,(char *)"exceed max 2 second\n");
      }
      else 
           #line 5328 
           _dev_err(& (adapter->pdev)->dev,(char *)"read 1000Base-T Status Reg\n");
      #line 5330 
      no_wait: 
               #line 5330 
      ;
      #line 5331 
      netif_carrier_on(netdev);
      #line 5333 
      igb_ping_all_vfs(adapter);
      #line 5334 
      igb_check_vf_rate_limit(adapter);
      #line 5337 
      if (! test_bit(2L,& adapter->state)) {
        #line 5338 
        ;
        #line 5338 
        cif_mod_timer(& adapter->phy_info_timer,round_jiffies(jiffies + 500UL));
      }
    }
  }
  else {
    #line 5342 
    if ((int)netif_carrier_ok(netdev) != 0) {
      #line 5343 
      adapter->link_speed = (unsigned short)0U;
      #line 5344 
      adapter->link_duplex = (unsigned short)0U;
      #line 5347 
      if ((int)igb_thermal_sensor_event(hw,1U) != 0) 
                                                     #line 5349 
                                                     netdev_err(netdev,(char *)"The network adapter was stopped because it overheated\n");
      #line 5353 
      netdev_info(netdev,(char *)"igb: %s NIC Link is Down\n",(char *)(& netdev->name));
      #line 5355 
      netif_carrier_off(netdev);
      #line 5357 
      igb_ping_all_vfs(adapter);
      #line 5360 
      if (! test_bit(2L,& adapter->state)) {
        #line 5361 
        ;
        #line 5361 
        cif_mod_timer(& adapter->phy_info_timer,round_jiffies(jiffies + 500UL));
      }
      #line 5365 
      if (((unsigned long)adapter->flags & 4096UL) != 0UL) {
        #line 5366 
        igb_check_swap_media(adapter);
        #line 5367 
        if (((unsigned long)adapter->flags & 1024UL) != 0UL) {
          #line 5368 
          cif_schedule_work(& adapter->reset_task);
          #line 5370 
          return;
        }
      }
      #line 5373 
      pm_schedule_suspend(netdev->dev.parent,5000U);
    }
    else {
      #line 5377 
      if (! netif_carrier_ok(netdev)) 
        #line 5377 
        if (((unsigned long)adapter->flags & 4096UL) != 0UL) {
          #line 5379 
          igb_check_swap_media(adapter);
          #line 5380 
          if (((unsigned long)adapter->flags & 1024UL) != 0UL) {
            #line 5381 
            cif_schedule_work(& adapter->reset_task);
            #line 5383 
            return;
          }
        }
    }
  }
  #line 5388 
  cif_spin_lock_stats64_lock_of_igb_adapter_0(& adapter->stats64_lock);
  #line 5389 
  igb_update_stats(adapter);
  #line 5390 
  cif_spin_unlock_stats64_lock_of_igb_adapter_0(& adapter->stats64_lock);
  #line 5392 
  i = 0;
  #line 5392 
  while (adapter->num_tx_queues > i) {
    {
      #line 5393 
      struct igb_ring *tx_ring = adapter->tx_ring[i];
      #line 5394 
      if (! netif_carrier_ok(netdev)) {
        #line 5400 
        ;
        #line 5400 
        if (igb_desc_unused(tx_ring) + 1 < (int)tx_ring->count) {
          #line 5401 
          (adapter->tx_timeout_count) ++;
          #line 5402 
          cif_schedule_work(& adapter->reset_task);
          #line 5404 
          return;
        }
      }
      #line 5409 
      cif_set_bit_0(5L,& tx_ring->flags);
    }
    #line 5392 
    i ++;
  }
  #line 5413 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 5414 
    u32 eics = 0U;
    #line 5416 
    i = 0;
    #line 5416 
    while (adapter->num_q_vectors > (unsigned int)i) {
      #line 5417 
      eics = (adapter->q_vector[i])->eims_value | eics;
      #line 5416 
      i ++;
    }
    {
      #line 5419 
      union __anonunion___u_3459 __u;
      #line 5418 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 5418 
      u8 *hw_addr = (__u.__val);
      #line 5418 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 5418 
                                             writel(eics,(void *)(hw_addr + 5408U));
    }
  }
  else {
    #line 5421 
    union __anonunion___u_3461 __u_0;
    #line 5420 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 5420 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 5420 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 5420 
                                             writel(16U,(void *)(hw_addr_0 + 200U));
  }
  #line 5423 
  igb_spoof_check(adapter);
  #line 5424 
  igb_ptp_rx_hang(adapter);
  #line 5425 
  igb_ptp_tx_hang(adapter);
  #line 5428 
  if ((unsigned int)adapter->hw.mac.type + 4294967292U <= 1U) 
                                                              #line 5430 
                                                              igb_check_lvmmc(adapter);
  #line 5433 
  if (! test_bit(2L,& adapter->state)) 
    #line 5434 
    if (((unsigned long)adapter->flags & 512UL) != 0UL) {
      #line 5435 
      ;
      #line 5435 
      cif_mod_timer(& adapter->watchdog_timer,round_jiffies(jiffies + 250UL));
    }
    else {
      #line 5438 
      ;
      #line 5438 
      cif_mod_timer(& adapter->watchdog_timer,round_jiffies(jiffies + 500UL));
    }
  #line 5440 
  return;
}

#line 5465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_ring_itr(struct igb_q_vector *q_vector)
{
  #line 5497 
  int __UNIQUE_ID___x581;
  #line 5497 
  int tmp_1;
  #line 5470 
  unsigned int packets;
  #line 5467 
  int new_val = (int)q_vector->itr_val;
  #line 5468 
  int avg_wire_size = 0;
  #line 5469 
  struct igb_adapter *adapter = q_vector->adapter;
  #line 5475 
  if ((unsigned int)adapter->link_speed != 1000U) {
    #line 5476 
    new_val = 980;
    #line 5477 
    goto set_itr_val;
  }
  #line 5480 
  packets = q_vector->rx.total_packets;
  #line 5481 
  if (packets != 0U) 
                     #line 5482 
                     avg_wire_size = (int)(q_vector->rx.total_bytes / packets);
  #line 5484 
  packets = q_vector->tx.total_packets;
  #line 5485 
  if (packets != 0U) {
    #line 5486 
    unsigned int __UNIQUE_ID___x579;
    #line 5486 
    unsigned int tmp;
    {
      #line 5486 
      __UNIQUE_ID___x579 = (unsigned int)avg_wire_size;
      #line 5486 
      unsigned int __UNIQUE_ID___y580 = q_vector->tx.total_bytes / packets;
      #line 5486 
      if (__UNIQUE_ID___x579 > __UNIQUE_ID___y580) 
                                                   #line 5486 
                                                   tmp = __UNIQUE_ID___x579; else 
                                                                    #line 5486 
                                                                    tmp = __UNIQUE_ID___y580;
      }
    #line 5486 
    avg_wire_size = (int)tmp;
  }
  #line 5490 
  if (avg_wire_size == 0) 
                          #line 5491 
                          goto clear_counts;
  #line 5494 
  avg_wire_size += 24;
  {
    #line 5497 
    __UNIQUE_ID___x581 = avg_wire_size;
    #line 5497 
    int __UNIQUE_ID___y582 = 3000;
    #line 5497 
    if (__UNIQUE_ID___x581 < __UNIQUE_ID___y582) 
                                                 #line 5497 
                                                 tmp_1 = __UNIQUE_ID___x581; else 
                                                                    #line 5497 
                                                                    tmp_1 = __UNIQUE_ID___y582;
    }
  #line 5497 
  avg_wire_size = tmp_1;
  #line 5500 
  if ((unsigned int)avg_wire_size + 4294966995U <= 898U) 
                                                         #line 5501 
                                                         new_val = avg_wire_size / 3; else 
                                                                    #line 5503 
                                                                    new_val = avg_wire_size / 2;
  #line 5506 
  if (new_val <= 195 && (q_vector->rx.ring != (struct igb_ring *)0 && adapter->rx_itr_setting == 3U || q_vector->rx.ring == (struct igb_ring *)0 && adapter->tx_itr_setting == 3U)) 
    #line 5509 
    new_val = 196;
  #line 5511 
  set_itr_val: 
               #line 5511 
  ;
  #line 5512 
  if ((int)q_vector->itr_val != new_val) {
    #line 5513 
    q_vector->itr_val = (unsigned short)new_val;
    #line 5514 
    q_vector->set_itr = (unsigned char)1U;
  }
  #line 5516 
  clear_counts: 
                #line 5516 
  ;
  #line 5517 
  q_vector->rx.total_bytes = 0U;
  #line 5518 
  q_vector->rx.total_packets = 0U;
  #line 5519 
  q_vector->tx.total_bytes = 0U;
  #line 5520 
  q_vector->tx.total_packets = 0U;
  #line 5521 
  return;
}

#line 5539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_itr(struct igb_q_vector *q_vector, struct igb_ring_container *ring_container)
{
  #line 5542 
  unsigned int packets = ring_container->total_packets;
  #line 5543 
  unsigned int bytes = ring_container->total_bytes;
  #line 5544 
  u8 itrval = ring_container->itr;
  #line 5547 
  if (packets == 0U) 
                     #line 5548 
                     return;
  #line 5550 
  switch ((int)itrval) {
    #line 5551 
    case 0: 
            #line 5551 
    ;
    #line 5553 
    if (bytes / packets > 8000U) 
                                 #line 5554 
                                 itrval = (unsigned char)2U;
    else 
      #line 5555 
      if (packets <= 4U && bytes > 512U) 
                                         #line 5556 
                                         itrval = (unsigned char)1U;
    #line 5557 
    break;
    #line 5558 
    case 1: 
            #line 5558 
    ;
    #line 5559 
    if (bytes > 10000U) {
      #line 5561 
      if (bytes / packets > 8000U) 
                                   #line 5562 
                                   itrval = (unsigned char)2U;
      else 
        #line 5563 
        if (packets <= 9U || bytes / packets > 1200U) 
                                                      #line 5564 
                                                      itrval = (unsigned char)2U;
        else 
          #line 5565 
          if (packets > 35U) 
                             #line 5566 
                             itrval = (unsigned char)0U;
    }
    else 
      #line 5567 
      if (bytes / packets > 2000U) 
                                   #line 5568 
                                   itrval = (unsigned char)2U;
      else 
        #line 5569 
        if (packets <= 2U && bytes <= 511U) 
                                            #line 5570 
                                            itrval = (unsigned char)0U;
    #line 5572 
    break;
    #line 5573 
    case 2: 
            #line 5573 
    ;
    #line 5574 
    if (bytes > 25000U) {
      #line 5575 
      if (packets > 35U) 
                         #line 5576 
                         itrval = (unsigned char)1U;
    }
    else 
      #line 5577 
      if (bytes <= 1499U) 
                          #line 5578 
                          itrval = (unsigned char)1U;
    #line 5580 
    break;
  }
  #line 5584 
  ring_container->total_bytes = 0U;
  #line 5585 
  ring_container->total_packets = 0U;
  #line 5588 
  ring_container->itr = itrval;
  #line 5589 
  return;
}

#line 5591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_itr(struct igb_q_vector *q_vector)
{
  #line 5607 
  int tmp;
  #line 5607 
  u8 __UNIQUE_ID___x583;
  #line 5593 
  struct igb_adapter *adapter = q_vector->adapter;
  #line 5594 
  u32 new_itr = (unsigned int)q_vector->itr_val;
  #line 5595 
  u8 current_itr = (unsigned char)0U;
  #line 5598 
  if ((unsigned int)adapter->link_speed != 1000U) {
    #line 5599 
    current_itr = (unsigned char)0U;
    #line 5600 
    new_itr = 980U;
    #line 5601 
    goto set_itr_now;
  }
  #line 5604 
  igb_update_itr(q_vector,& q_vector->tx);
  #line 5605 
  igb_update_itr(q_vector,& q_vector->rx);
  {
    #line 5607 
    __UNIQUE_ID___x583 = q_vector->rx.itr;
    #line 5607 
    u8 __UNIQUE_ID___y584 = q_vector->tx.itr;
    #line 5607 
    if ((int)__UNIQUE_ID___x583 > (int)__UNIQUE_ID___y584) 
                                                           #line 5607 
                                                           tmp = (int)__UNIQUE_ID___x583; else 
                                                                    #line 5607 
                                                                    tmp = (int)__UNIQUE_ID___y584;
    }
  #line 5607 
  current_itr = (unsigned char)tmp;
  #line 5610 
  if ((unsigned int)current_itr == 0U && (q_vector->rx.ring != (struct igb_ring *)0 && adapter->rx_itr_setting == 3U || q_vector->rx.ring == (struct igb_ring *)0 && adapter->tx_itr_setting == 3U)) 
    #line 5613 
    current_itr = (unsigned char)1U;
  #line 5615 
  switch ((int)current_itr) {
    #line 5617 
    case 0: 
            #line 5617 
    ;
    #line 5618 
    new_itr = 56U;
    #line 5619 
    break;
    #line 5620 
    case 1: 
            #line 5620 
    ;
    #line 5621 
    new_itr = 196U;
    #line 5622 
    break;
    #line 5623 
    case 2: 
            #line 5623 
    ;
    #line 5624 
    new_itr = 980U;
    #line 5625 
    break;
    #line 5626 
    default: 
             #line 5626 
    ;
    #line 5627 
    break;
  }
  #line 5630 
  set_itr_now: 
               #line 5630 
  ;
  #line 5631 
  if ((unsigned int)q_vector->itr_val != new_itr) {
    #line 5636 
    if ((unsigned int)q_vector->itr_val < new_itr) {
      #line 5637 
      u32 __UNIQUE_ID___x585;
      #line 5637 
      u32 tmp_1;
      {
        #line 5637 
        __UNIQUE_ID___x585 = ((unsigned int)q_vector->itr_val * new_itr) / ((unsigned int)((int)q_vector->itr_val >> 2) + new_itr);
        #line 5637 
        u32 __UNIQUE_ID___y586 = new_itr;
        #line 5637 
        if (__UNIQUE_ID___x585 > __UNIQUE_ID___y586) 
                                                     #line 5637 
                                                     tmp_1 = __UNIQUE_ID___x585; else 
                                                                    #line 5637 
                                                                    tmp_1 = __UNIQUE_ID___y586;
        }
      #line 5636 
      new_itr = tmp_1;
    }
    else 
         #line 5636 
         new_itr = new_itr;
    #line 5646 
    q_vector->itr_val = (unsigned short)new_itr;
    #line 5647 
    q_vector->set_itr = (unsigned char)1U;
  }
  #line 5649 
  return;
}

#line 5651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tx_ctxtdesc(struct igb_ring *tx_ring, struct igb_tx_buffer *first, u32 vlan_macip_lens, u32 type_tucmd, u32 mss_l4len_idx)
{
  #line 5656 
  struct e1000_adv_tx_context_desc *context_desc;
  #line 5658 
  struct timespec64 ts;
  #line 5657 
  u16 i = tx_ring->next_to_use;
  #line 5660 
  context_desc = (struct e1000_adv_tx_context_desc *)tx_ring->desc + (unsigned long)i;
  #line 5662 
  i = (u16)((int)i + 1);
  #line 5663 
  if ((int)tx_ring->count > (int)i) 
                                    #line 5663 
                                    tx_ring->next_to_use = i; else 
                                                                   #line 5663 
                                                                   tx_ring->next_to_use = (unsigned short)0U;
  #line 5666 
  type_tucmd |= 538968064U;
  #line 5669 
  if ((int)test_bit(4L,& tx_ring->flags) != 0) 
                                               #line 5670 
                                               mss_l4len_idx = (unsigned int)((int)tx_ring->reg_idx << 4) | mss_l4len_idx;
  #line 5672 
  context_desc->vlan_macip_lens = vlan_macip_lens;
  #line 5673 
  context_desc->type_tucmd_mlhl = type_tucmd;
  #line 5674 
  context_desc->mss_l4len_idx = mss_l4len_idx;
  #line 5679 
  if ((int)tx_ring->launchtime_enable != 0) {
    #line 5680 
    ts = ns_to_timespec64((first->skb)->__anonCompField_sk_buff_90.tstamp);
    #line 5681 
    (first->skb)->__anonCompField_sk_buff_90.tstamp = ktime_set(0LL,0UL);
    #line 5682 
    context_desc->seqnum_seed = (unsigned int)(ts.tv_nsec / 32L);
  }
  else 
       #line 5684 
       context_desc->seqnum_seed = 0U;
  #line 5685 
  return;
}

#line 5688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_tso(struct igb_ring *tx_ring, struct igb_tx_buffer *first, u8 *hdr_len)
{
  #line 5692 
  u32 vlan_macip_lens;
  #line 5692 
  u32 type_tucmd;
  #line 5692 
  u32 mss_l4len_idx;
  #line 5698 
  union __anonunion_ip_3464 ip;
  #line 5703 
  union __anonunion_l4_3465 l4;
  #line 5704 
  u32 paylen;
  #line 5704 
  u32 l4_offset;
  #line 5705 
  int err;
  #line 5693 
  struct sk_buff *skb = first->skb;
  #line 5707 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 5708 
                                          return 0;
  #line 5710 
  if (! skb_is_gso(skb)) 
                         #line 5711 
                         return 0;
  #line 5713 
  err = skb_cow_head(skb,0U);
  #line 5714 
  if (err < 0) 
               #line 5715 
               return err;
  #line 5717 
  ip.hdr = skb_network_header(skb);
  #line 5718 
  l4.hdr = skb_checksum_start(skb);
  #line 5721 
  ;
  #line 5721 
  if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 131072U) != 0U) 
    #line 5721 
    type_tucmd = 0U; else 
                          #line 5721 
                          type_tucmd = 2048U;
  #line 5725 
  if ((unsigned int)(ip.v4)->version == 4U) {
    #line 5726 
    unsigned char *csum_start = skb_checksum_start(skb);
    #line 5727 
    unsigned char *trans_start = ip.hdr + (unsigned long)((int)(ip.v4)->ihl * 4);
    #line 5732 
    (ip.v4)->check = csum_fold(csum_partial((void *)trans_start,(int)(csum_start - trans_start),0U));
    #line 5735 
    type_tucmd |= 1024U;
    #line 5737 
    (ip.v4)->tot_len = (unsigned short)0U;
    #line 5738 
    first->tx_flags |= 50U;
  }
  else {
    #line 5742 
    (ip.v6)->payload_len = (unsigned short)0U;
    #line 5743 
    first->tx_flags |= 34U;
  }
  #line 5748 
  l4_offset = (unsigned int)(l4.hdr - skb->data);
  #line 5751 
  paylen = skb->len - l4_offset;
  #line 5752 
  if ((type_tucmd & 2048U) != 0U) {
    #line 5754 
    *hdr_len = (unsigned char)((unsigned int)((unsigned char)(l4.tcp)->doff) * 4U + (unsigned int)((unsigned char)l4_offset));
    #line 5755 
    ;
    #line 5755 
    csum_replace_by_diff(& (l4.tcp)->check,__builtin_bswap32(paylen));
  }
  else {
    #line 5759 
    *hdr_len = (unsigned char)((unsigned int)((unsigned char)l4_offset) + 8U);
    #line 5760 
    ;
    #line 5760 
    csum_replace_by_diff(& (l4.udp)->check,__builtin_bswap32(paylen));
  }
  #line 5765 
  first->gso_segs = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs;
  #line 5766 
  first->bytecount += (unsigned int)(((int)first->gso_segs + -1) * (int)*hdr_len);
  #line 5769 
  mss_l4len_idx = ((unsigned int)*hdr_len - l4_offset) << 8;
  #line 5770 
  mss_l4len_idx = (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size << 16) | mss_l4len_idx;
  #line 5773 
  vlan_macip_lens = (unsigned int)(l4.hdr - ip.hdr);
  #line 5774 
  vlan_macip_lens = (unsigned int)(((ip.hdr - skb->data) << 9) | (long)vlan_macip_lens);
  #line 5775 
  vlan_macip_lens = (first->tx_flags & 4294901760U) | vlan_macip_lens;
  #line 5777 
  igb_tx_ctxtdesc(tx_ring,first,vlan_macip_lens,type_tucmd,mss_l4len_idx);
  #line 5780 
  return 1;
}

#line 5783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static bool igb_ipv6_csum_is_sctp(struct sk_buff *skb)
{
  #line 5785 
  unsigned int offset = 0U;
  #line 5787 
  ipv6_find_hdr(skb,& offset,132,(unsigned short *)0U,(int *)0);
  #line 5789 
  ;
  #line 5789 
  return (_Bool)((unsigned int)skb_checksum_start_offset(skb) == offset);
}

#line 5792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tx_csum(struct igb_ring *tx_ring, struct igb_tx_buffer *first)
{
  #line 5794 
  struct sk_buff *skb = first->skb;
  #line 5795 
  u32 vlan_macip_lens = 0U;
  #line 5796 
  u32 type_tucmd = 0U;
  #line 5798 
  if ((unsigned int)skb->ip_summed != 3U) {
    #line 5799 
    csum_failed: 
                 #line 5799 
    ;
    #line 5800 
    if ((first->tx_flags & 1U) == 0U && ! tx_ring->launchtime_enable) 
      #line 5802 
      return;
    #line 5803 
    goto no_csum;
  }
  #line 5806 
  switch ((int)skb->__anonCompField_sk_buff_94.__anonCompField___anonunion_526_93.csum_offset) {
    #line 5807 
    case 16: 
             #line 5807 
    ;
    #line 5808 
    type_tucmd = 2048U;
    #line 5810 
    case 6: 
            #line 5810 
    ;
    #line 5811 
    break;
    #line 5812 
    case 8: 
            #line 5812 
    ;
    #line 5814 
    if ((unsigned int)first->protocol == 8U) {
      #line 5814 
      ;
      #line 5814 
      if ((unsigned int)ip_hdr(skb)->protocol == 132U) 
                                                       #line 5814 
                                                       goto _LOR; else 
                                                                    #line 5814 
                                                                    goto _LAND;
    }
    else {
      #line 5814 
      _LAND: 
             #line 5815 
      ;
      #line 5815 
      if ((unsigned int)first->protocol == 56710U) {
        #line 5816 
        if ((int)igb_ipv6_csum_is_sctp(skb) != 0) {
          #line 5814 
          _LOR: {
                  #line 5818 
                  type_tucmd = 4096U;
                  #line 5819 
                  break;
                }
        }
      }
    }
    #line 5822 
    default: 
             #line 5822 
    ;
    #line 5823 
    skb_checksum_help(skb);
    #line 5824 
    goto csum_failed;
  }
  #line 5828 
  first->tx_flags |= 32U;
  #line 5829 
  vlan_macip_lens = (unsigned int)(skb_checksum_start_offset(skb) - skb_network_offset(skb));
  #line 5831 
  no_csum: 
           #line 5831 
  ;
  #line 5832 
  vlan_macip_lens = (unsigned int)(skb_network_offset(skb) << 9) | vlan_macip_lens;
  #line 5833 
  vlan_macip_lens = (first->tx_flags & 4294901760U) | vlan_macip_lens;
  #line 5835 
  igb_tx_ctxtdesc(tx_ring,first,vlan_macip_lens,type_tucmd,0U);
  #line 5836 
  return;
}

#line 5843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static u32 igb_tx_cmd_type(struct sk_buff *skb, u32 tx_flags)
{
  #line 5846 
  u32 cmd_type = 573571072U;
  #line 5851 
  cmd_type = (tx_flags & 1U) * 1073741824U | cmd_type;
  #line 5855 
  cmd_type = (tx_flags & 2U) * 1073741824U | cmd_type;
  #line 5859 
  cmd_type = (tx_flags & 4U) * 131072U | cmd_type;
  #line 5863 
  cmd_type = (unsigned int)skb->no_fcs * 33554432U ^ cmd_type;
  #line 5865 
  return cmd_type;
}

#line 5868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tx_olinfo_status(struct igb_ring *tx_ring, union e1000_adv_tx_desc *tx_desc, u32 tx_flags, unsigned int paylen)
{
  #line 5872 
  u32 olinfo_status = paylen << 14;
  #line 5875 
  if ((int)test_bit(4L,& tx_ring->flags) != 0) 
                                               #line 5876 
                                               olinfo_status = (unsigned int)((int)tx_ring->reg_idx << 4) | olinfo_status;
  #line 5879 
  olinfo_status = (tx_flags & 32U) * 16U | olinfo_status;
  #line 5884 
  olinfo_status = (tx_flags & 16U) * 16U | olinfo_status;
  #line 5888 
  tx_desc->read.olinfo_status = olinfo_status;
  #line 5889 
  return;
}

#line 5891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_maybe_stop_tx(struct igb_ring *tx_ring, u16 size)
{
  #line 5893 
  struct net_device *netdev = tx_ring->netdev;
  #line 5895 
  netif_stop_subqueue(netdev,(unsigned short)((int)tx_ring->queue_index));
  #line 5896 
  ldv_inline_asm();
  #line 5906 
  ;
  #line 5906 
  if (igb_desc_unused(tx_ring) < (int)size) 
                                            #line 5907 
                                            return -16;
  #line 5910 
  netif_wake_subqueue(netdev,(unsigned short)((int)tx_ring->queue_index));
  #line 5912 
  u64_stats_init(& tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp2);
  #line 5913 
  (tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.restart_queue2) ++;
  #line 5914 
  u64_stats_init(& tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp2);
  #line 5916 
  return 0;
}

#line 5919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static int igb_maybe_stop_tx(struct igb_ring *tx_ring, u16 size)
{
  #line 5921 
  ;
  #line 5921 
  if (igb_desc_unused(tx_ring) >= (int)size) 
                                             #line 5922 
                                             return 0;
  #line 5923 
  return __igb_maybe_stop_tx(tx_ring,(unsigned short)((int)size));
}

#line 5926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_tx_map(struct igb_ring *tx_ring, struct igb_tx_buffer *first, u8 hdr_len)
{
  #line 5931 
  struct igb_tx_buffer *tx_buffer;
  #line 5932 
  union e1000_adv_tx_desc *tx_desc;
  #line 5933 
  skb_frag_t *frag;
  #line 5934 
  dma_addr_t dma;
  #line 5935 
  unsigned int data_len;
  #line 5935 
  unsigned int size;
  #line 5930 
  struct sk_buff *skb = first->skb;
  #line 5936 
  u32 tx_flags = first->tx_flags;
  #line 5937 
  u32 cmd_type = igb_tx_cmd_type(skb,tx_flags);
  #line 5938 
  u16 i = tx_ring->next_to_use;
  #line 5940 
  tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 5942 
  igb_tx_olinfo_status(tx_ring,tx_desc,tx_flags,skb->len - (unsigned int)hdr_len);
  #line 5944 
  size = skb_headlen(skb);
  #line 5945 
  data_len = skb->data_len;
  #line 5947 
  dma = dma_map_single_attrs(tx_ring->dev,(void *)skb->data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 5949 
  tx_buffer = first;
  #line 5951 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 5951 
  while (1) {
    {
      #line 5952 
      if (dma_mapping_error(tx_ring->dev,dma) != 0) 
                                                    #line 5953 
                                                    goto dma_error;
      #line 5956 
      tx_buffer->len = size;
      #line 5957 
      tx_buffer->dma = dma;
      #line 5959 
      tx_desc->read.buffer_addr = dma;
      #line 5961 
      while ((long)(size > 32768U) != 0L) {
        #line 5962 
        tx_desc->read.cmd_type_len = cmd_type ^ 32768U;
        #line 5965 
        i = (u16)((int)i + 1);
        #line 5966 
        tx_desc ++;
        #line 5967 
        if ((int)tx_ring->count == (int)i) {
          #line 5968 
          tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc;
          #line 5969 
          i = (unsigned short)0U;
        }
        #line 5971 
        tx_desc->read.olinfo_status = 0U;
        #line 5973 
        dma += 32768ULL;
        #line 5974 
        size += 4294934528U;
        #line 5976 
        tx_desc->read.buffer_addr = dma;
      }
      #line 5979 
      if ((long)(data_len == 0U) != 0L) 
                                        #line 5980 
                                        break;
      #line 5982 
      tx_desc->read.cmd_type_len = cmd_type ^ size;
      #line 5984 
      i = (u16)((int)i + 1);
      #line 5985 
      tx_desc ++;
      #line 5986 
      if ((int)tx_ring->count == (int)i) {
        #line 5987 
        tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc;
        #line 5988 
        i = (unsigned short)0U;
      }
      #line 5990 
      tx_desc->read.olinfo_status = 0U;
      #line 5992 
      size = skb_frag_size(frag);
      #line 5993 
      data_len -= size;
      #line 5995 
      dma = skb_frag_dma_map(tx_ring->dev,frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 5998 
      tx_buffer = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info + (unsigned long)i;
    }
    #line 5951 
    frag ++;
  }
  #line 6002 
  cmd_type = (size | cmd_type) | 150994944U;
  #line 6003 
  tx_desc->read.cmd_type_len = cmd_type;
  #line 6005 
  ;
  #line 6005 
  netdev_tx_sent_queue(txring_txq(tx_ring),first->bytecount);
  #line 6008 
  first->time_stamp = jiffies;
  #line 6010 
  skb_tx_timestamp(skb);
  #line 6011 
  ldv_inline_asm();
  #line 6022 
  first->next_to_watch = tx_desc;
  #line 6024 
  i = (u16)((int)i + 1);
  #line 6025 
  if ((int)tx_ring->count == (int)i) 
                                     #line 6026 
                                     i = (unsigned short)0U;
  #line 6028 
  tx_ring->next_to_use = i;
  #line 6031 
  igb_maybe_stop_tx(tx_ring,(unsigned short)21);
  #line 6033 
  if ((int)netif_xmit_stopped(txring_txq(tx_ring)) != 0) 
                                                         #line 6034 
                                                         writel((unsigned int)i,tx_ring->tail);
  else {
    #line 6033 
    if (! netdev_xmit_more()) 
                              #line 6034 
                              writel((unsigned int)i,tx_ring->tail);
  }
  #line 6036 
  return 0;
  #line 6038 
  dma_error: 
             #line 6038 
  ;
  #line 6039 
  _dev_err(tx_ring->dev,(char *)"TX DMA map failed\n");
  #line 6040 
  tx_buffer = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info + (unsigned long)i;
  #line 6043 
  while (tx_buffer != first) {
    #line 6051 
    u16 tmp_6;
    #line 6044 
    if (tx_buffer->len != 0U) 
                              #line 6045 
                              dma_unmap_page_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 6049 
    tx_buffer->len = 0U;
    #line 6051 
    tmp_6 = i;
    #line 6051 
    i = (u16)((int)i - 1);
    #line 6051 
    ;
    #line 6051 
    if ((unsigned int)tmp_6 == 0U) 
                                   #line 6052 
                                   i = (unsigned short)((int)tx_ring->count + (int)i);
    #line 6053 
    tx_buffer = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info + (unsigned long)i;
  }
  #line 6056 
  if (tx_buffer->len != 0U) 
                            #line 6057 
                            dma_unmap_single_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 6061 
  tx_buffer->len = 0U;
  #line 6063 
  dev_kfree_skb_any(tx_buffer->skb);
  #line 6064 
  tx_buffer->skb = (struct sk_buff *)0;
  #line 6066 
  tx_ring->next_to_use = i;
  #line 6068 
  return -1;
}

#line 6071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
netdev_tx_t igb_xmit_frame_ring(struct sk_buff *skb, struct igb_ring *tx_ring)
{
  #line 6074 
  struct igb_tx_buffer *first;
  #line 6075 
  int tso;
  #line 6077 
  unsigned short f;
  #line 6076 
  u32 tx_flags = 0U;
  #line 6078 
  u16 count = (unsigned short)((skb_headlen(skb) + 32767U) / 32768U);
  #line 6079 
  __be16 protocol = vlan_get_protocol(skb);
  #line 6080 
  u8 hdr_len = (unsigned char)0U;
  #line 6088 
  f = (unsigned short)0U;
  #line 6088 
  while (1) {
    #line 6088 
    ;
    #line 6088 
    if (! ((int)((unsigned short)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags) > (int)f)) 
      #line 6088 
      break;
    #line 6090 
    count = (unsigned short)((int)((unsigned short)((skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)f]) + 32767U) / 32768U)) + (int)count);
    #line 6088 
    f = (unsigned short)((int)f + 1);
  }
  #line 6092 
  if (igb_maybe_stop_tx(tx_ring,
                          (unsigned short)((int)((unsigned int)count + 3U))) != 0) 
    #line 6094 
    return NETDEV_TX_BUSY;
  #line 6098 
  first = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info + (unsigned long)tx_ring->next_to_use;
  #line 6099 
  first->skb = skb;
  #line 6100 
  first->bytecount = skb->len;
  #line 6101 
  first->gso_segs = (unsigned short)1U;
  #line 6103 
  ;
  #line 6103 
  if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) != 0L) {
    #line 6104 
    struct igb_adapter *adapter = netdev_priv(tx_ring->netdev);
    #line 6106 
    if (adapter->tstamp_config.tx_type == 1) {
      #line 6107 
      if (test_and_set_bit_lock(3L,& adapter->state)) 
                                                      #line 6117 
                                                      (adapter->tx_hwtstamp_skipped) ++;
      else {
        #line 6109 
        ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
        #line 6110 
        tx_flags |= 4U;
        #line 6112 
        adapter->ptp_tx_skb = skb_get(skb);
        #line 6113 
        adapter->ptp_tx_start = jiffies;
        #line 6114 
        if (adapter->hw.mac.type == (unsigned int)e1000_82576) 
                                                               #line 6115 
                                                               cif_schedule_work(& adapter->ptp_tx_work);
      }
    }
    else 
         #line 6117 
         (adapter->tx_hwtstamp_skipped) ++;
  }
  #line 6121 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 6122 
    tx_flags |= 1U;
    #line 6123 
    tx_flags = (unsigned int)((int)skb->vlan_tci << 16) | tx_flags;
  }
  #line 6127 
  first->tx_flags = tx_flags;
  #line 6128 
  first->protocol = protocol;
  #line 6130 
  tso = igb_tso(tx_ring,first,& hdr_len);
  #line 6131 
  if (tso < 0) 
               #line 6132 
               goto out_drop;
  else 
    #line 6133 
    if (tso == 0) 
                  #line 6134 
                  igb_tx_csum(tx_ring,first);
  #line 6136 
  if (igb_tx_map(tx_ring,first,(unsigned char)((int)hdr_len)) != 0) 
                                                                    #line 6137 
                                                                    goto cleanup_tx_tstamp;
  #line 6139 
  return NETDEV_TX_OK;
  #line 6141 
  out_drop: 
            #line 6141 
  ;
  #line 6142 
  dev_kfree_skb_any(first->skb);
  #line 6143 
  first->skb = (struct sk_buff *)0;
  #line 6144 
  cleanup_tx_tstamp: 
                     #line 6144 
  ;
  #line 6145 
  if ((long)((tx_flags & 4U) != 0U) != 0L) {
    #line 6146 
    struct igb_adapter *adapter_0 = netdev_priv(tx_ring->netdev);
    #line 6148 
    dev_kfree_skb_any(adapter_0->ptp_tx_skb);
    #line 6149 
    adapter_0->ptp_tx_skb = (struct sk_buff *)0;
    #line 6150 
    if (adapter_0->hw.mac.type == (unsigned int)e1000_82576) 
                                                             #line 6151 
                                                             cancel_work_sync(& adapter_0->ptp_tx_work);
    #line 6152 
    clear_bit_unlock(3L,& adapter_0->state);
  }
  #line 6155 
  return NETDEV_TX_OK;
}

#line 6158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static struct igb_ring *igb_tx_queue_mapping(struct igb_adapter *adapter, struct sk_buff *skb)
{
  #line 6161 
  unsigned int r_idx = (unsigned int)skb->queue_mapping;
  #line 6163 
  if ((unsigned int)adapter->num_tx_queues <= r_idx) 
                                                     #line 6164 
                                                     r_idx %= (unsigned int)adapter->num_tx_queues;
  #line 6166 
  return adapter->tx_ring[r_idx];
}

#line 6169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static netdev_tx_t igb_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  #line 6172 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 6177 
  if (skb_put_padto(skb,17U) != 0) 
                                   #line 6178 
                                   return NETDEV_TX_OK;
  #line 6180 
  ;
  #line 6180 
  return igb_xmit_frame_ring(skb,igb_tx_queue_mapping(adapter,skb));
}

#line 6187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tx_timeout(struct net_device *netdev)
{
  #line 6189 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 6190 
  struct e1000_hw *hw = & adapter->hw;
  #line 6193 
  (adapter->tx_timeout_count) ++;
  #line 6195 
  if (hw->mac.type > (unsigned int)e1000_82576) 
                                                #line 6196 
                                                hw->dev_spec._82575.global_device_reset = (_Bool)1;
  #line 6198 
  cif_schedule_work(& adapter->reset_task);
  {
    #line 6200 
    union __anonunion___u_3467 __u;
    #line 6199 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 6199 
    u8 *hw_addr = (__u.__val);
    #line 6199 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 6199 
                                           writel(adapter->eims_enable_mask & ~ adapter->eims_other,(void *)(hw_addr + 5408U));
  }
  #line 6201 
  return;
}

#line 6203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_reset_task(struct work_struct *work)
{
  #line 6206 
  void *__mptr;
  #line 6205 
  struct igb_adapter *adapter;
  #line 6206 
  __mptr = (void *)work;
  #line 6206 
  adapter = ((struct igb_adapter *)(__mptr + 18446744073709550496U));
  #line 6208 
  igb_dump(adapter);
  #line 6209 
  netdev_err(adapter->netdev,(char *)"Reset adapter\n");
  #line 6210 
  igb_reinit_locked(adapter);
  #line 6211 
  return;
}

#line 6218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 6221 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 6223 
  cif_spin_lock_stats64_lock_of_igb_adapter_0(& adapter->stats64_lock);
  #line 6224 
  igb_update_stats(adapter);
  #line 6225 
  memcpy((void *)stats,(void *)(& adapter->stats64),192UL);
  #line 6226 
  cif_spin_unlock_stats64_lock_of_igb_adapter_0(& adapter->stats64_lock);
  #line 6227 
  return;
}

#line 6236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 6238 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 6239 
  int max_frame = new_mtu + 22;
  #line 6242 
  if (max_frame <= 1517) 
                         #line 6243 
                         max_frame = 1518;
  #line 6245 
  while (1) {
    #line 6245 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 6245 
                                                             break;
    #line 6246 
    usleep_range(1000UL,2000UL);
  }
  #line 6249 
  adapter->max_frame_size = (unsigned int)max_frame;
  #line 6251 
  if ((int)netif_running(netdev) != 0) 
                                       #line 6252 
                                       igb_down(adapter);
  {
    #line 6254 
    bool branch;
    #line 6254 
    struct _ddebug __UNIQUE_ID_ddebug587 = {.modname = (char *)"igb", .function = (char *)"igb_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c", .format = (char *)"changing MTU from %d to %d\n", .lineno = (unsigned int)6254U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 6254 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug587.key.dd_key_false.key,(_Bool)0);
    #line 6254 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 6254 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug587,netdev,(char *)"changing MTU from %d to %d\n",netdev->mtu,new_mtu);
  }
  #line 6256 
  netdev->mtu = (unsigned int)new_mtu;
  #line 6258 
  if ((int)netif_running(netdev) != 0) 
                                       #line 6259 
                                       igb_up(adapter); else 
                                                             #line 6261 
                                                             igb_reset(adapter);
  #line 6263 
  cif_clear_bit_0(1L,& adapter->state);
  #line 6265 
  return 0;
}

#line 6272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_update_stats(struct igb_adapter *adapter)
{
  #line 6277 
  u32 reg;
  #line 6277 
  u32 mpc;
  #line 6278 
  int i;
  #line 6279 
  u64 bytes;
  #line 6279 
  u64 packets;
  #line 6280 
  unsigned int start;
  #line 6281 
  u64 _bytes;
  #line 6281 
  u64 _packets;
  #line 6274 
  struct rtnl_link_stats64 *net_stats = & adapter->stats64;
  #line 6275 
  struct e1000_hw *hw = & adapter->hw;
  #line 6276 
  struct pci_dev *pdev = adapter->pdev;
  #line 6286 
  if ((unsigned int)adapter->link_speed == 0U) 
                                               #line 6287 
                                               return;
  #line 6288 
  if (pci_channel_offline(pdev) != 0) 
                                      #line 6289 
                                      return;
  #line 6291 
  bytes = 0ULL;
  #line 6292 
  packets = 0ULL;
  #line 6294 
  rcu_read_lock();
  #line 6295 
  i = 0;
  #line 6295 
  while (adapter->num_rx_queues > i) {
    {
      #line 6296 
      struct igb_ring *ring = adapter->rx_ring[i];
      #line 6297 
      u32 rqdpc = igb_rd32(hw,(unsigned int)(i * 64 + 49200));
      #line 6298 
      if (hw->mac.type > (unsigned int)e1000_i354) {
        #line 6300 
        union __anonunion___u_3469 __u;
        #line 6299 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 6299 
        u8 *hw_addr = (__u.__val);
        #line 6299 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 6299 
                                               writel(0U,(void *)(hw_addr + (unsigned long)(i * 64 + 49200)));
      }
      #line 6301 
      if (rqdpc != 0U) {
        #line 6302 
        ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.drops += (unsigned long long)rqdpc;
        #line 6303 
        net_stats->rx_fifo_errors += (unsigned long long)rqdpc;
      }
      #line 6306 
      while (1) {
        #line 6307 
        start = u64_stats_fetch_begin_irq(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_syncp);
        #line 6308 
        _bytes = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.bytes;
        #line 6309 
        _packets = ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.packets;
        #line 6310 
        if (! ((int)u64_stats_fetch_retry_irq(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_syncp,
                                  start) != 0)) 
          #line 6306 
          break;
      }
      #line 6311 
      bytes += _bytes;
      #line 6312 
      packets += _packets;
    }
    #line 6295 
    i ++;
  }
  #line 6315 
  net_stats->rx_bytes = bytes;
  #line 6316 
  net_stats->rx_packets = packets;
  #line 6318 
  bytes = 0ULL;
  #line 6319 
  packets = 0ULL;
  #line 6320 
  i = 0;
  #line 6320 
  while (adapter->num_tx_queues > i) {
    {
      #line 6321 
      struct igb_ring *ring_0 = adapter->tx_ring[i];
      #line 6322 
      while (1) {
        #line 6323 
        start = u64_stats_fetch_begin_irq(& ring_0->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp);
        #line 6324 
        _bytes = ring_0->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.bytes;
        #line 6325 
        _packets = ring_0->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.packets;
        #line 6326 
        if (! ((int)u64_stats_fetch_retry_irq(& ring_0->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp,
                                  start) != 0)) 
          #line 6322 
          break;
      }
      #line 6327 
      bytes += _bytes;
      #line 6328 
      packets += _packets;
    }
    #line 6320 
    i ++;
  }
  #line 6330 
  net_stats->tx_bytes = bytes;
  #line 6331 
  net_stats->tx_packets = packets;
  #line 6332 
  rcu_read_unlock();
  #line 6335 
  adapter->stats.crcerrs += (unsigned long long)igb_rd32(hw,16384U);
  #line 6336 
  adapter->stats.gprc += (unsigned long long)igb_rd32(hw,16500U);
  #line 6337 
  adapter->stats.gorc += (unsigned long long)igb_rd32(hw,16520U);
  #line 6338 
  igb_rd32(hw,16524U);
  #line 6339 
  adapter->stats.bprc += (unsigned long long)igb_rd32(hw,16504U);
  #line 6340 
  adapter->stats.mprc += (unsigned long long)igb_rd32(hw,16508U);
  #line 6341 
  adapter->stats.roc += (unsigned long long)igb_rd32(hw,16556U);
  #line 6343 
  adapter->stats.prc64 += (unsigned long long)igb_rd32(hw,16476U);
  #line 6344 
  adapter->stats.prc127 += (unsigned long long)igb_rd32(hw,16480U);
  #line 6345 
  adapter->stats.prc255 += (unsigned long long)igb_rd32(hw,16484U);
  #line 6346 
  adapter->stats.prc511 += (unsigned long long)igb_rd32(hw,16488U);
  #line 6347 
  adapter->stats.prc1023 += (unsigned long long)igb_rd32(hw,16492U);
  #line 6348 
  adapter->stats.prc1522 += (unsigned long long)igb_rd32(hw,16496U);
  #line 6349 
  adapter->stats.symerrs += (unsigned long long)igb_rd32(hw,16392U);
  #line 6350 
  adapter->stats.sec += (unsigned long long)igb_rd32(hw,16440U);
  #line 6352 
  mpc = igb_rd32(hw,16400U);
  #line 6353 
  adapter->stats.mpc += (unsigned long long)mpc;
  #line 6354 
  net_stats->rx_fifo_errors += (unsigned long long)mpc;
  #line 6355 
  adapter->stats.scc += (unsigned long long)igb_rd32(hw,16404U);
  #line 6356 
  adapter->stats.ecol += (unsigned long long)igb_rd32(hw,16408U);
  #line 6357 
  adapter->stats.mcc += (unsigned long long)igb_rd32(hw,16412U);
  #line 6358 
  adapter->stats.latecol += (unsigned long long)igb_rd32(hw,16416U);
  #line 6359 
  adapter->stats.dc += (unsigned long long)igb_rd32(hw,16432U);
  #line 6360 
  adapter->stats.rlec += (unsigned long long)igb_rd32(hw,16448U);
  #line 6361 
  adapter->stats.xonrxc += (unsigned long long)igb_rd32(hw,16456U);
  #line 6362 
  adapter->stats.xontxc += (unsigned long long)igb_rd32(hw,16460U);
  #line 6363 
  adapter->stats.xoffrxc += (unsigned long long)igb_rd32(hw,16464U);
  #line 6364 
  adapter->stats.xofftxc += (unsigned long long)igb_rd32(hw,16468U);
  #line 6365 
  adapter->stats.fcruc += (unsigned long long)igb_rd32(hw,16472U);
  #line 6366 
  adapter->stats.gptc += (unsigned long long)igb_rd32(hw,16512U);
  #line 6367 
  adapter->stats.gotc += (unsigned long long)igb_rd32(hw,16528U);
  #line 6368 
  igb_rd32(hw,16532U);
  #line 6369 
  adapter->stats.rnbc += (unsigned long long)igb_rd32(hw,16544U);
  #line 6370 
  adapter->stats.ruc += (unsigned long long)igb_rd32(hw,16548U);
  #line 6371 
  adapter->stats.rfc += (unsigned long long)igb_rd32(hw,16552U);
  #line 6372 
  adapter->stats.rjc += (unsigned long long)igb_rd32(hw,16560U);
  #line 6373 
  adapter->stats.tor += (unsigned long long)igb_rd32(hw,16580U);
  #line 6374 
  adapter->stats.tot += (unsigned long long)igb_rd32(hw,16588U);
  #line 6375 
  adapter->stats.tpr += (unsigned long long)igb_rd32(hw,16592U);
  #line 6377 
  adapter->stats.ptc64 += (unsigned long long)igb_rd32(hw,16600U);
  #line 6378 
  adapter->stats.ptc127 += (unsigned long long)igb_rd32(hw,16604U);
  #line 6379 
  adapter->stats.ptc255 += (unsigned long long)igb_rd32(hw,16608U);
  #line 6380 
  adapter->stats.ptc511 += (unsigned long long)igb_rd32(hw,16612U);
  #line 6381 
  adapter->stats.ptc1023 += (unsigned long long)igb_rd32(hw,16616U);
  #line 6382 
  adapter->stats.ptc1522 += (unsigned long long)igb_rd32(hw,16620U);
  #line 6384 
  adapter->stats.mptc += (unsigned long long)igb_rd32(hw,16624U);
  #line 6385 
  adapter->stats.bptc += (unsigned long long)igb_rd32(hw,16628U);
  #line 6387 
  adapter->stats.tpt += (unsigned long long)igb_rd32(hw,16596U);
  #line 6388 
  adapter->stats.colc += (unsigned long long)igb_rd32(hw,16424U);
  #line 6390 
  adapter->stats.algnerrc += (unsigned long long)igb_rd32(hw,16388U);
  #line 6392 
  reg = igb_rd32(hw,24U);
  #line 6393 
  if ((reg & 12582912U) == 0U) {
    #line 6394 
    adapter->stats.rxerrc += (unsigned long long)igb_rd32(hw,16396U);
    #line 6397 
    if ((unsigned int)hw->mac.type + 4294967290U > 1U) {
      #line 6399 
      adapter->stats.tncrs += (unsigned long long)igb_rd32(hw,16436U);
    }
  }
  #line 6402 
  adapter->stats.tsctc += (unsigned long long)igb_rd32(hw,16632U);
  #line 6403 
  adapter->stats.tsctfc += (unsigned long long)igb_rd32(hw,16636U);
  #line 6405 
  adapter->stats.iac += (unsigned long long)igb_rd32(hw,16640U);
  #line 6406 
  adapter->stats.icrxoc += (unsigned long long)igb_rd32(hw,16676U);
  #line 6407 
  adapter->stats.icrxptc += (unsigned long long)igb_rd32(hw,16644U);
  #line 6408 
  adapter->stats.icrxatc += (unsigned long long)igb_rd32(hw,16648U);
  #line 6409 
  adapter->stats.ictxptc += (unsigned long long)igb_rd32(hw,16652U);
  #line 6410 
  adapter->stats.ictxatc += (unsigned long long)igb_rd32(hw,16656U);
  #line 6411 
  adapter->stats.ictxqec += (unsigned long long)igb_rd32(hw,16664U);
  #line 6412 
  adapter->stats.ictxqmtc += (unsigned long long)igb_rd32(hw,16668U);
  #line 6413 
  adapter->stats.icrxdmtc += (unsigned long long)igb_rd32(hw,16672U);
  #line 6416 
  net_stats->multicast = adapter->stats.mprc;
  #line 6417 
  net_stats->collisions = adapter->stats.colc;
  #line 6424 
  net_stats->rx_errors = ((((adapter->stats.rxerrc + adapter->stats.crcerrs) + adapter->stats.algnerrc) + adapter->stats.ruc) + adapter->stats.roc) + adapter->stats.cexterr;
  #line 6428 
  net_stats->rx_length_errors = adapter->stats.ruc + adapter->stats.roc;
  #line 6430 
  net_stats->rx_crc_errors = adapter->stats.crcerrs;
  #line 6431 
  net_stats->rx_frame_errors = adapter->stats.algnerrc;
  #line 6432 
  net_stats->rx_missed_errors = adapter->stats.mpc;
  #line 6435 
  net_stats->tx_errors = adapter->stats.ecol + adapter->stats.latecol;
  #line 6437 
  net_stats->tx_aborted_errors = adapter->stats.ecol;
  #line 6438 
  net_stats->tx_window_errors = adapter->stats.latecol;
  #line 6439 
  net_stats->tx_carrier_errors = adapter->stats.tncrs;
  #line 6444 
  adapter->stats.mgptc += (unsigned long long)igb_rd32(hw,16572U);
  #line 6445 
  adapter->stats.mgprc += (unsigned long long)igb_rd32(hw,16564U);
  #line 6446 
  adapter->stats.mgpdc += (unsigned long long)igb_rd32(hw,16568U);
  #line 6449 
  reg = igb_rd32(hw,22560U);
  #line 6450 
  if ((reg & 268435456U) != 0U) {
    #line 6451 
    adapter->stats.o2bgptc += (unsigned long long)igb_rd32(hw,36836U);
    #line 6452 
    adapter->stats.o2bspc += (unsigned long long)igb_rd32(hw,16732U);
    #line 6453 
    adapter->stats.b2ospc += (unsigned long long)igb_rd32(hw,36832U);
    #line 6454 
    adapter->stats.b2ogprc += (unsigned long long)igb_rd32(hw,16728U);
  }
  #line 6456 
  return;
}

#line 6458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tsync_interrupt(struct igb_adapter *adapter)
{
  #line 6461 
  struct ptp_clock_event event;
  #line 6462 
  struct timespec64 ts;
  #line 6463 
  u32 tsauxc;
  #line 6463 
  u32 sec;
  #line 6463 
  u32 nsec;
  #line 6460 
  struct e1000_hw *hw = & adapter->hw;
  #line 6463 
  u32 ack = 0U;
  #line 6463 
  u32 tsicr = igb_rd32(hw,46700U);
  #line 6465 
  if (((unsigned long)tsicr & 1UL) != 0UL) {
    #line 6466 
    event.type = 2;
    #line 6467 
    if (adapter->ptp_caps.pps != 0) 
                                    #line 6468 
                                    ptp_clock_event(adapter->ptp_clock,& event);
    #line 6469 
    ack |= 1U;
  }
  #line 6472 
  if (((unsigned long)tsicr & 2UL) != 0UL) {
    #line 6474 
    cif_schedule_work(& adapter->ptp_tx_work);
    #line 6475 
    ack |= 2U;
  }
  #line 6478 
  if (((unsigned long)tsicr & 8UL) != 0UL) {
    #line 6479 
    cif_spin_lock_tmreg_lock_of_igb_adapter(& adapter->tmreg_lock);
    #line 6480 
    ts = timespec64_add(adapter->perout[0].start,adapter->perout[0].period);
    {
      #line 6484 
      union __anonunion___u_3471 __u;
      #line 6483 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 6483 
      u8 *hw_addr = (__u.__val);
      #line 6483 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 6483 
                                             writel((unsigned int)ts.tv_nsec,(void *)(hw_addr + 46660U));
    }
    {
      #line 6485 
      union __anonunion___u_3473 __u_0;
      #line 6484 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 6484 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 6484 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 6484 
                                               writel((unsigned int)ts.tv_sec,(void *)(hw_addr_0 + 46664U));
    }
    #line 6485 
    tsauxc = igb_rd32(hw,46656U);
    #line 6486 
    tsauxc |= 1U;
    {
      #line 6488 
      union __anonunion___u_3475 __u_1;
      #line 6487 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 6487 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 6487 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 6487 
                                               writel(tsauxc,(void *)(hw_addr_1 + 46656U));
    }
    #line 6488 
    adapter->perout[0].start = ts;
    #line 6489 
    cif_spin_unlock_tmreg_lock_of_igb_adapter(& adapter->tmreg_lock);
    #line 6490 
    ack |= 8U;
  }
  #line 6493 
  if (((unsigned long)tsicr & 16UL) != 0UL) {
    #line 6494 
    cif_spin_lock_tmreg_lock_of_igb_adapter(& adapter->tmreg_lock);
    #line 6495 
    ts = timespec64_add(adapter->perout[1].start,adapter->perout[1].period);
    {
      #line 6498 
      union __anonunion___u_3477 __u_2;
      #line 6497 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 6497 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 6497 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                               #line 6497 
                                               writel((unsigned int)ts.tv_nsec,(void *)(hw_addr_2 + 46668U));
    }
    {
      #line 6499 
      union __anonunion___u_3479 __u_3;
      #line 6498 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 6498 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 6498 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 6498 
                                               writel((unsigned int)ts.tv_sec,(void *)(hw_addr_3 + 46672U));
    }
    #line 6499 
    tsauxc = igb_rd32(hw,46656U);
    #line 6500 
    tsauxc |= 2U;
    {
      #line 6502 
      union __anonunion___u_3481 __u_4;
      #line 6501 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 6501 
      u8 *hw_addr_4 = (__u_4.__val);
      #line 6501 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                               #line 6501 
                                               writel(tsauxc,(void *)(hw_addr_4 + 46656U));
    }
    #line 6502 
    adapter->perout[1].start = ts;
    #line 6503 
    cif_spin_unlock_tmreg_lock_of_igb_adapter(& adapter->tmreg_lock);
    #line 6504 
    ack |= 16U;
  }
  #line 6507 
  if (((unsigned long)tsicr & 32UL) != 0UL) {
    #line 6508 
    nsec = igb_rd32(hw,46684U);
    #line 6509 
    sec = igb_rd32(hw,46688U);
    #line 6510 
    event.type = 1;
    #line 6511 
    event.index = 0;
    #line 6512 
    event.__anonCompField_ptp_clock_event_207.timestamp = (unsigned long long)sec * 1000000000ULL + (unsigned long long)nsec;
    #line 6513 
    ptp_clock_event(adapter->ptp_clock,& event);
    #line 6514 
    ack |= 32U;
  }
  #line 6517 
  if (((unsigned long)tsicr & 64UL) != 0UL) {
    #line 6518 
    nsec = igb_rd32(hw,46692U);
    #line 6519 
    sec = igb_rd32(hw,46696U);
    #line 6520 
    event.type = 1;
    #line 6521 
    event.index = 1;
    #line 6522 
    event.__anonCompField_ptp_clock_event_207.timestamp = (unsigned long long)sec * 1000000000ULL + (unsigned long long)nsec;
    #line 6523 
    ptp_clock_event(adapter->ptp_clock,& event);
    #line 6524 
    ack |= 64U;
  }
  {
    #line 6529 
    union __anonunion___u_3483 __u_5;
    #line 6528 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
    #line 6528 
    u8 *hw_addr_5 = (__u_5.__val);
    #line 6528 
    if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                             #line 6528 
                                             writel(ack,(void *)(hw_addr_5 + 46700U));
  }
  #line 6530 
  return;
}

#line 6531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static irqreturn_t igb_msix_other(int irq, void *data)
{
  #line 6533 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  #line 6534 
  struct e1000_hw *hw = & adapter->hw;
  #line 6535 
  u32 icr = igb_rd32(hw,192U);
  #line 6538 
  if ((icr & 1073741824U) != 0U) 
                                 #line 6539 
                                 cif_schedule_work(& adapter->reset_task);
  #line 6541 
  if ((icr & 268435456U) != 0U) {
    #line 6543 
    (adapter->stats.doosync) ++;
    #line 6548 
    igb_check_wvbr(adapter);
  }
  #line 6552 
  if ((icr & 256U) != 0U) 
                          #line 6553 
                          igb_msg_task(adapter);
  #line 6555 
  if ((icr & 4U) != 0U) {
    #line 6556 
    hw->mac.get_link_status = (_Bool)1;
    #line 6558 
    if (! test_bit(2L,& adapter->state)) 
                                         #line 6559 
                                         cif_mod_timer(& adapter->watchdog_timer,jiffies + 1UL);
  }
  #line 6562 
  if ((icr & 524288U) != 0U) 
                             #line 6563 
                             igb_tsync_interrupt(adapter);
  {
    #line 6566 
    union __anonunion___u_3485 __u;
    #line 6565 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 6565 
    u8 *hw_addr = (__u.__val);
    #line 6565 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 6565 
                                           writel(adapter->eims_other,(void *)(hw_addr + 5412U));
  }
  #line 6567 
  return IRQ_HANDLED;
}

#line 6570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_write_itr(struct igb_q_vector *q_vector)
{
  #line 6572 
  struct igb_adapter *adapter = q_vector->adapter;
  #line 6573 
  u32 itr_val = (unsigned int)q_vector->itr_val & 32764U;
  #line 6575 
  if ((unsigned int)q_vector->set_itr == 0U) 
                                             #line 6576 
                                             return;
  #line 6578 
  if (itr_val == 0U) 
                     #line 6579 
                     itr_val = 4U;
  #line 6581 
  if (adapter->hw.mac.type == (unsigned int)e1000_82575) 
                                                         #line 6582 
                                                         itr_val = (itr_val << 16) | itr_val; else 
                                                                    #line 6584 
                                                                    itr_val |= 2147483648U;
  #line 6586 
  writel(itr_val,q_vector->itr_register);
  #line 6587 
  q_vector->set_itr = (unsigned char)0U;
  #line 6588 
  return;
}

#line 6590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static irqreturn_t igb_msix_ring(int irq, void *data)
{
  #line 6592 
  struct igb_q_vector *q_vector = (struct igb_q_vector *)data;
  #line 6595 
  igb_write_itr(q_vector);
  #line 6597 
  napi_schedule(& q_vector->napi);
  #line 6599 
  return IRQ_HANDLED;
}

#line 6603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_tx_dca(struct igb_adapter *adapter, struct igb_ring *tx_ring, int cpu)
{
  #line 6607 
  struct e1000_hw *hw = & adapter->hw;
  #line 6608 
  u32 txctrl = (unsigned int)dca3_get_tag(tx_ring->dev,cpu);
  #line 6610 
  if (hw->mac.type != (unsigned int)e1000_82575) 
                                                 #line 6611 
                                                 txctrl <<= 24;
  #line 6617 
  txctrl |= 8736U;
  {
    #line 6622 
    union __anonunion___u_3487 __u;
    #line 6621 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 6621 
    u8 *hw_addr = (__u.__val);
    #line 6621 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      #line 6621 
      int tmp_1;
      #line 6621 
      if ((unsigned int)tx_ring->reg_idx <= 3U) 
                                                #line 6621 
                                                tmp_1 = (int)tx_ring->reg_idx * 256 + 14356; else 
                                                                    #line 6621 
                                                                    tmp_1 = (int)tx_ring->reg_idx * 64 + 57364;
      #line 6621 
      ;
      #line 6621 
      ;
      #line 6621 
      writel(txctrl,(void *)(hw_addr + (unsigned long)tmp_1));
    }
  }
  #line 6623 
  return;
}

#line 6624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_rx_dca(struct igb_adapter *adapter, struct igb_ring *rx_ring, int cpu)
{
  #line 6628 
  struct e1000_hw *hw = & adapter->hw;
  #line 6629 
  u32 rxctrl = (unsigned int)dca3_get_tag(& (adapter->pdev)->dev,cpu);
  #line 6631 
  if (hw->mac.type != (unsigned int)e1000_82575) 
                                                 #line 6632 
                                                 rxctrl <<= 24;
  #line 6638 
  rxctrl |= 544U;
  {
    #line 6642 
    union __anonunion___u_3489 __u;
    #line 6641 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 6641 
    u8 *hw_addr = (__u.__val);
    #line 6641 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      #line 6641 
      int tmp_1;
      #line 6641 
      if ((unsigned int)rx_ring->reg_idx <= 3U) 
                                                #line 6641 
                                                tmp_1 = (int)rx_ring->reg_idx * 256 + 10260; else 
                                                                    #line 6641 
                                                                    tmp_1 = (int)rx_ring->reg_idx * 64 + 49172;
      #line 6641 
      ;
      #line 6641 
      ;
      #line 6641 
      writel(rxctrl,(void *)(hw_addr + (unsigned long)tmp_1));
    }
  }
  #line 6643 
  return;
}

#line 6644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_dca(struct igb_q_vector *q_vector)
{
  #line 6647 
  int pscr_ret__;
  #line 6646 
  struct igb_adapter *adapter = q_vector->adapter;
  #line 6647 
  __preempt_count_add(1);
  #line 6648 
  ldv_inline_asm();
  #line 6647 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 6647 
    void *__vpp_verify = (void *)0;
    #line 6647 
    void *tmp = __vpp_verify;
  }
  #line 6647 
  switch (4UL) {
    #line 6647 
    int pfo_ret__;
    #line 6647 
    int pfo_ret___0;
    #line 6647 
    int pfo_ret___1;
    #line 6647 
    int pfo_ret___2;
    #line 6647 
    case (unsigned long)1: 
                           #line 6647 
    ;
    #line 6647 
    switch (4UL) {
      #line 6647 
      case (unsigned long)1: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)2: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)4: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)8: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      default: 
               #line 6647 
      ;
      #line 6647 
      __bad_percpu_size();
    }
    #line 6647 
    pscr_ret__ = pfo_ret__;
    #line 6647 
    break;
    #line 6647 
    case (unsigned long)2: 
                           #line 6647 
    ;
    #line 6647 
    switch (4UL) {
      #line 6647 
      case (unsigned long)1: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)2: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)4: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)8: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      default: 
               #line 6647 
      ;
      #line 6647 
      __bad_percpu_size();
    }
    #line 6647 
    pscr_ret__ = pfo_ret___0;
    #line 6647 
    break;
    #line 6647 
    case (unsigned long)4: 
                           #line 6647 
    ;
    #line 6647 
    switch (4UL) {
      #line 6647 
      case (unsigned long)1: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)2: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)4: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)8: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      default: 
               #line 6647 
      ;
      #line 6647 
      __bad_percpu_size();
    }
    #line 6647 
    pscr_ret__ = pfo_ret___1;
    #line 6647 
    break;
    #line 6647 
    case (unsigned long)8: 
                           #line 6647 
    ;
    #line 6647 
    switch (4UL) {
      #line 6647 
      case (unsigned long)1: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)2: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)4: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      case (unsigned long)8: 
                             #line 6647 
      ;
      #line 6648 
      ldv_inline_asm();
      #line 6647 
      break;
      #line 6647 
      default: 
               #line 6647 
      ;
      #line 6647 
      __bad_percpu_size();
    }
    #line 6647 
    pscr_ret__ = pfo_ret___2;
    #line 6647 
    break;
    #line 6647 
    default: 
             #line 6647 
    ;
    #line 6647 
    __bad_size_call_parameter();
    #line 6647 
    break;
  }
  #line 6647 
  int cpu = pscr_ret__;
  #line 6649 
  if (q_vector->cpu == cpu) 
                            #line 6650 
                            goto out_no_update;
  #line 6652 
  if (q_vector->tx.ring != (struct igb_ring *)0) 
                                                 #line 6653 
                                                 igb_update_tx_dca(adapter,q_vector->tx.ring,cpu);
  #line 6655 
  if (q_vector->rx.ring != (struct igb_ring *)0) 
                                                 #line 6656 
                                                 igb_update_rx_dca(adapter,q_vector->rx.ring,cpu);
  #line 6658 
  q_vector->cpu = cpu;
  #line 6659 
  out_no_update: 
                 #line 6659 
  ;
  #line 6662 
  ldv_inline_asm();
  #line 6660 
  __preempt_count_sub(1);
  #line 6662 
  return;
}

#line 6663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_setup_dca(struct igb_adapter *adapter)
{
  #line 6666 
  int i;
  #line 6665 
  struct e1000_hw *hw = & adapter->hw;
  #line 6668 
  if (((unsigned long)adapter->flags & 2UL) == 0UL) 
                                                    #line 6669 
                                                    return;
  {
    #line 6673 
    union __anonunion___u_3491 __u;
    #line 6672 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 6672 
    u8 *hw_addr = (__u.__val);
    #line 6672 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 6672 
                                           writel(2U,(void *)(hw_addr + 23412U));
  }
  #line 6674 
  i = 0;
  #line 6674 
  while (adapter->num_q_vectors > (unsigned int)i) {
    #line 6675 
    (adapter->q_vector[i])->cpu = -1;
    #line 6676 
    igb_update_dca(adapter->q_vector[i]);
    #line 6674 
    i ++;
  }
  #line 6678 
  return;
}

#line 6680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_notify_dca(struct device *dev, void *data)
{
  #line 6682 
  struct net_device *netdev = dev_get_drvdata(dev);
  #line 6683 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 6684 
  struct pci_dev *pdev = adapter->pdev;
  #line 6685 
  struct e1000_hw *hw = & adapter->hw;
  #line 6686 
  unsigned long event = *((unsigned long *)data);
  #line 6688 
  switch (event) {
    #line 6689 
    case (unsigned long)1: 
                           #line 6689 
    ;
    #line 6691 
    if (((unsigned long)adapter->flags & 2UL) != 0UL) 
                                                      #line 6692 
                                                      break;
    #line 6693 
    if (dca_add_requester(dev) == 0) {
      #line 6694 
      adapter->flags |= 2U;
      #line 6695 
      _dev_info(& pdev->dev,(char *)"DCA enabled\n");
      #line 6696 
      igb_setup_dca(adapter);
      #line 6697 
      break;
    }
    #line 6700 
    case (unsigned long)2: 
                           #line 6700 
    ;
    #line 6701 
    if (((unsigned long)adapter->flags & 2UL) != 0UL) {
      #line 6705 
      dca_remove_requester(dev);
      #line 6706 
      _dev_info(& pdev->dev,(char *)"DCA disabled\n");
      #line 6707 
      adapter->flags &= 4294967293U;
      {
        #line 6709 
        union __anonunion___u_3493 __u;
        #line 6708 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 6708 
        u8 *hw_addr = (__u.__val);
        #line 6708 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 6708 
                                               writel(1U,(void *)(hw_addr + 23412U));
      }
    }
    #line 6710 
    break;
  }
  #line 6713 
  return 0;
}

#line 6716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_notify_dca(struct notifier_block *nb, unsigned long event, void *p)
{
  #line 6719 
  int ret_val;
  #line 6724 
  int tmp;
  #line 6721 
  ret_val = driver_for_each_device(& igb_driver.driver,(struct device *)0,(void *)(& event),& __igb_notify_dca);
  #line 6724 
  if (ret_val != 0) 
                    #line 6724 
                    tmp = 32770; else 
                                      #line 6724 
                                      tmp = 0;
  #line 6724 
  return tmp;
}

#line 6729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_vf_configure(struct igb_adapter *adapter, int vf)
{
  #line 6731 
  unsigned char mac_addr[6U];
  #line 6733 
  eth_zero_addr((u8 *)(& mac_addr));
  #line 6734 
  igb_set_vf_mac(adapter,vf,(unsigned char *)(& mac_addr));
  #line 6737 
  (adapter->vf_data + (unsigned long)vf)->spoofchk_enabled = (_Bool)1;
  #line 6740 
  (adapter->vf_data + (unsigned long)vf)->trusted = (_Bool)0;
  #line 6742 
  return 0;
}

#line 6746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_ping_all_vfs(struct igb_adapter *adapter)
{
  #line 6749 
  u32 ping;
  #line 6750 
  int i;
  #line 6748 
  struct e1000_hw *hw = & adapter->hw;
  #line 6752 
  i = 0;
  #line 6752 
  while (adapter->vfs_allocated_count > (unsigned int)i) {
    #line 6753 
    ping = 256U;
    #line 6754 
    if (((adapter->vf_data + (unsigned long)i)->flags & 1U) != 0U) 
                                                                   #line 6755 
                                                                   ping |= 536870912U;
    #line 6756 
    igb_write_mbx(hw,& ping,(unsigned short)1,(unsigned short)((int)((unsigned short)i)));
    #line 6752 
    i ++;
  }
  #line 6758 
  return;
}

#line 6760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_promisc(struct igb_adapter *adapter, u32 *msgbuf, u32 vf)
{
  #line 6762 
  struct e1000_hw *hw = & adapter->hw;
  #line 6763 
  u32 vmolr = igb_rd32(hw,(vf + 5812U) * 4U);
  #line 6764 
  struct vf_data_storage *vf_data = adapter->vf_data + (unsigned long)vf;
  #line 6766 
  vf_data->flags &= 4294967289U;
  #line 6768 
  vmolr &= 3925868543U;
  #line 6770 
  if ((*msgbuf & 131072U) != 0U) {
    #line 6771 
    vmolr |= 268435456U;
    #line 6772 
    vf_data->flags |= 4U;
    #line 6773 
    *msgbuf &= 4294836223U;
  }
  else 
    #line 6779 
    if ((unsigned int)vf_data->num_vf_mc_hashes > 30U) 
                                                       #line 6780 
                                                       vmolr |= 268435456U;
    else 
      #line 6781 
      if ((unsigned int)vf_data->num_vf_mc_hashes != 0U) {
        #line 6782 
        int j;
        #line 6784 
        vmolr |= 33554432U;
        #line 6785 
        j = 0;
        #line 6785 
        while ((int)vf_data->num_vf_mc_hashes > j) {
          #line 6786 
          igb_mta_set(hw,(unsigned int)vf_data->vf_mc_hashes[j]);
          #line 6785 
          j ++;
        }
      }
  {
    #line 6791 
    union __anonunion___u_3495 __u;
    #line 6790 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 6790 
    u8 *hw_addr = (__u.__val);
    #line 6790 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 6790 
                                           writel(vmolr,(void *)(hw_addr + (unsigned long)((vf + 5812U) * 4U)));
  }
  #line 6793 
  if ((*msgbuf & 16711680U) != 0U) 
                                   #line 6794 
                                   return -22;
  #line 6796 
  return 0;
}

#line 6799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_multicasts(struct igb_adapter *adapter, u32 *msgbuf, u32 vf)
{
  #line 6805 
  int i;
  #line 6802 
  int n = (int)(*msgbuf >> 16) & 255;
  #line 6803 
  u16 *hash_list = (u16 *)(msgbuf + 1U);
  #line 6804 
  struct vf_data_storage *vf_data = adapter->vf_data + (unsigned long)vf;
  #line 6811 
  vf_data->num_vf_mc_hashes = (unsigned short)n;
  #line 6814 
  if (n > 30) 
              #line 6815 
              n = 30;
  #line 6818 
  i = 0;
  #line 6818 
  while (i < n) {
    #line 6819 
    vf_data->vf_mc_hashes[i] = *(hash_list + (unsigned long)i);
    #line 6818 
    i ++;
  }
  #line 6822 
  igb_set_rx_mode(adapter->netdev);
  #line 6824 
  return 0;
}

#line 6827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_restore_vf_multicasts(struct igb_adapter *adapter)
{
  #line 6830 
  struct vf_data_storage *vf_data;
  #line 6831 
  int i;
  #line 6831 
  int j;
  #line 6829 
  struct e1000_hw *hw = & adapter->hw;
  #line 6833 
  i = 0;
  #line 6833 
  while (adapter->vfs_allocated_count > (unsigned int)i) {
    {
      #line 6834 
      u32 vmolr = igb_rd32(hw,(unsigned int)((i + 5812) * 4));
      #line 6836 
      vmolr &= 3992977407U;
      #line 6838 
      vf_data = adapter->vf_data + (unsigned long)i;
      #line 6840 
      if ((unsigned int)vf_data->num_vf_mc_hashes > 30U || (vf_data->flags & 4U) != 0U) 
        #line 6842 
        vmolr |= 268435456U;
      else 
        #line 6843 
        if ((unsigned int)vf_data->num_vf_mc_hashes != 0U) {
          #line 6844 
          vmolr |= 33554432U;
          #line 6845 
          j = 0;
          #line 6845 
          while ((int)vf_data->num_vf_mc_hashes > j) {
            #line 6846 
            igb_mta_set(hw,(unsigned int)vf_data->vf_mc_hashes[j]);
            #line 6845 
            j ++;
          }
        }
      {
        #line 6849 
        union __anonunion___u_3497 __u;
        #line 6848 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 6848 
        u8 *hw_addr = (__u.__val);
        #line 6848 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 6848 
                                               writel(vmolr,(void *)(hw_addr + (unsigned long)((i + 5812) * 4)));
      }
    }
    #line 6833 
    i ++;
  }
  #line 6851 
  return;
}

#line 6852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clear_vf_vfta(struct igb_adapter *adapter, u32 vf)
{
  #line 6855 
  u32 pool_mask;
  #line 6855 
  u32 vlvf_mask;
  #line 6855 
  u32 i;
  #line 6854 
  struct e1000_hw *hw = & adapter->hw;
  #line 6858 
  pool_mask = 1044480U;
  #line 6859 
  vlvf_mask = (unsigned int)(1UL << (vf + 12U));
  #line 6862 
  pool_mask = ~ ((unsigned int)(1UL << (adapter->vfs_allocated_count + 12U))) & pool_mask;
  #line 6866 
  i = 32U;
  #line 6866 
  while (1) {
    #line 6866 
    u32 tmp_1;
    #line 6866 
    tmp_1 = i;
    #line 6866 
    i --;
    #line 6866 
    ;
    #line 6866 
    if (! (tmp_1 != 0U)) 
                         #line 6866 
                         break;
    {
      #line 6868 
      u32 vfta_mask;
      #line 6868 
      u32 vid;
      #line 6868 
      u32 vfta;
      #line 6867 
      u32 vlvf = igb_rd32(hw,(i + 5952U) * 4U);
      #line 6871 
      if ((vlvf & vlvf_mask) == 0U) 
                                    #line 6872 
                                    goto __Cont;
      #line 6875 
      vlvf ^= vlvf_mask;
      #line 6878 
      if ((vlvf & pool_mask) != 0U) 
                                    #line 6879 
                                    goto update_vlvfb;
      #line 6882 
      if ((vlvf & 1044480U) != 0U) 
                                   #line 6883 
                                   goto update_vlvf;
      #line 6885 
      vid = vlvf & 4095U;
      #line 6886 
      vfta_mask = (unsigned int)(1UL << (vid & 31U));
      #line 6889 
      vfta = *(adapter->shadow_vfta + (unsigned long)(vid / 32U));
      #line 6890 
      if ((vfta & vfta_mask) != 0U) 
                                    #line 6891 
                                    (*(hw->mac.ops.write_vfta))(hw,vid / 32U,vfta ^ vfta_mask);
      #line 6892 
      update_vlvf: 
                   #line 6892 
      ;
      #line 6894 
      if (((unsigned long)adapter->flags & 32768UL) != 0UL) 
                                                            #line 6895 
                                                            vlvf &= 1044480U; else 
                                                                    #line 6897 
                                                                    vlvf = 0U;
      #line 6898 
      update_vlvfb: 
                    #line 6898 
      ;
      {
        #line 6901 
        union __anonunion___u_3499 __u;
        #line 6900 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 6900 
        u8 *hw_addr = (__u.__val);
        #line 6900 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 6900 
                                               writel(vlvf,(void *)(hw_addr + (unsigned long)((i + 5952U) * 4U)));
      }
    }
    #line 6866 
    __Cont: 
            #line 6866 
    ;
  }
  #line 6903 
  return;
}

#line 6904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_find_vlvf_entry(struct e1000_hw *hw, u32 vlan)
{
  #line 6906 
  u32 vlvf;
  #line 6907 
  int idx;
  #line 6910 
  if (vlan == 0U) 
                  #line 6911 
                  return 0;
  #line 6914 
  idx = 32;
  #line 6914 
  while (1) {
    #line 6914 
    idx --;
    #line 6914 
    if (! (idx != 0)) 
                      #line 6914 
                      break;
    #line 6915 
    vlvf = igb_rd32(hw,(unsigned int)((idx + 5952) * 4));
    #line 6916 
    if ((vlvf & 4095U) == vlan) 
                                #line 6917 
                                break;
  }
  #line 6920 
  return idx;
}

#line 6923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_pf_vlvf(struct igb_adapter *adapter, u32 vid)
{
  #line 6926 
  u32 bits;
  #line 6926 
  u32 pf_id;
  #line 6927 
  int idx;
  #line 6925 
  struct e1000_hw *hw = & adapter->hw;
  #line 6929 
  idx = igb_find_vlvf_entry(hw,vid);
  #line 6930 
  if (idx == 0) 
                #line 6931 
                return;
  #line 6936 
  pf_id = adapter->vfs_allocated_count + 12U;
  #line 6937 
  bits = ~ ((unsigned int)(1UL << pf_id)) & 1044480U;
  #line 6938 
  bits = igb_rd32(hw,(unsigned int)((idx + 5952) * 4)) & bits;
  #line 6941 
  if (bits == 0U) 
    #line 6942 
    if (((unsigned long)adapter->flags & 32768UL) != 0UL) {
      #line 6944 
      union __anonunion___u_3501 __u;
      #line 6943 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 6943 
      u8 *hw_addr = (__u.__val);
      #line 6943 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 6943 
                                             writel((unsigned int)(1UL << pf_id),(void *)(hw_addr + (unsigned long)((idx + 5952) * 4)));
    }
    else {
      #line 6946 
      union __anonunion___u_3503 __u_0;
      #line 6945 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 6945 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 6945 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 6945 
                                               writel(0U,(void *)(hw_addr_0 + (unsigned long)((idx + 5952) * 4)));
    }
  #line 6947 
  return;
}

#line 6949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static s32 igb_set_vf_vlan(struct igb_adapter *adapter, u32 vid, bool add, u32 vf)
{
  #line 6954 
  int err;
  #line 6952 
  int pf_id = (int)adapter->vfs_allocated_count;
  #line 6953 
  struct e1000_hw *hw = & adapter->hw;
  #line 6961 
  if ((int)add != 0) {
    #line 6961 
    if ((int)test_bit((long)vid,(unsigned long *)(& adapter->active_vlans)) != 0) {
      #line 6962 
      err = igb_vfta_set(hw,vid,(unsigned int)pf_id,(_Bool)1,(_Bool)0);
      #line 6963 
      if (err != 0) 
                    #line 6964 
                    return err;
    }
  }
  #line 6967 
  err = igb_vfta_set(hw,vid,vf,(_Bool)((bool)((int)add) != 0),(_Bool)0);
  #line 6969 
  if ((int)add != 0 && err == 0) 
                                 #line 6970 
                                 return err;
  #line 6976 
  if ((int)test_bit((long)vid,(unsigned long *)(& adapter->active_vlans)) != 0) 
    #line 6978 
    igb_update_pf_vlvf(adapter,vid);
  else 
    #line 6976 
    if (((unsigned long)adapter->flags & 32768UL) != 0UL) 
                                                          #line 6978 
                                                          igb_update_pf_vlvf(adapter,vid);
  #line 6980 
  return err;
}

#line 6983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_vmvir(struct igb_adapter *adapter, u32 vid, u32 vf)
{
  #line 6985 
  struct e1000_hw *hw = & adapter->hw;
  #line 6987 
  if (vid != 0U) {
    #line 6989 
    union __anonunion___u_3505 __u;
    #line 6988 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 6988 
    u8 *hw_addr = (__u.__val);
    #line 6988 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 6988 
                                           writel(vid | 1073741824U,(void *)(hw_addr + (unsigned long)((vf + 3520U) * 4U)));
  }
  else {
    #line 6991 
    union __anonunion___u_3507 __u_0;
    #line 6990 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 6990 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 6990 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 6990 
                                             writel(0U,(void *)(hw_addr_0 + (unsigned long)((vf + 3520U) * 4U)));
  }
  #line 6992 
  return;
}

#line 6993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_enable_port_vlan(struct igb_adapter *adapter, int vf, u16 vlan, u8 qos)
{
  #line 6996 
  int err;
  #line 6998 
  err = igb_set_vf_vlan(adapter,(unsigned int)vlan,(_Bool)1,(unsigned int)vf);
  #line 6999 
  if (err != 0) 
                #line 7000 
                return err;
  #line 7002 
  igb_set_vmvir(adapter,(unsigned int)((int)vlan | ((int)qos << 13)),(unsigned int)vf);
  #line 7003 
  igb_set_vmolr(adapter,vf,(_Bool)((unsigned int)vlan == 0U));
  #line 7006 
  if ((int)(adapter->vf_data + (unsigned long)vf)->pf_vlan != (int)vlan) 
    #line 7007 
    igb_set_vf_vlan(adapter,(unsigned int)(adapter->vf_data + (unsigned long)vf)->pf_vlan,(_Bool)0,(unsigned int)vf);
  #line 7010 
  (adapter->vf_data + (unsigned long)vf)->pf_vlan = vlan;
  #line 7011 
  (adapter->vf_data + (unsigned long)vf)->pf_qos = (unsigned short)qos;
  #line 7012 
  igb_set_vf_vlan_strip(adapter,vf,(_Bool)1);
  #line 7013 
  _dev_info(& (adapter->pdev)->dev,(char *)"Setting VLAN %d, QOS 0x%x on VF %d\n",(int)vlan,(int)qos,vf);
  #line 7015 
  if ((int)test_bit(2L,& adapter->state) != 0) {
    #line 7016 
    _dev_warn(& (adapter->pdev)->dev,(char *)"The VF VLAN has been set, but the PF device is not up.\n");
    #line 7018 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Bring the PF device up before attempting to use the VF device.\n");
  }
  #line 7022 
  return err;
}

#line 7025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_disable_port_vlan(struct igb_adapter *adapter, int vf)
{
  #line 7028 
  igb_set_vf_vlan(adapter,0U,(_Bool)1,(unsigned int)vf);
  #line 7030 
  igb_set_vmvir(adapter,0U,(unsigned int)vf);
  #line 7031 
  igb_set_vmolr(adapter,vf,(_Bool)1);
  #line 7034 
  if ((unsigned int)(adapter->vf_data + (unsigned long)vf)->pf_vlan != 0U) 
    #line 7035 
    igb_set_vf_vlan(adapter,(unsigned int)(adapter->vf_data + (unsigned long)vf)->pf_vlan,(_Bool)0,(unsigned int)vf);
  #line 7038 
  (adapter->vf_data + (unsigned long)vf)->pf_vlan = (unsigned short)0U;
  #line 7039 
  (adapter->vf_data + (unsigned long)vf)->pf_qos = (unsigned short)0U;
  #line 7040 
  igb_set_vf_vlan_strip(adapter,vf,(_Bool)0);
  #line 7042 
  return 0;
}

#line 7045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos, __be16 vlan_proto)
{
  #line 7056 
  int tmp_2;
  #line 7048 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 7050 
  if (adapter->vfs_allocated_count <= (unsigned int)vf || ((unsigned int)vlan > 4095U || (unsigned int)qos > 7U)) 
    #line 7051 
    return -22;
  #line 7053 
  if ((unsigned int)vlan_proto != 129U) 
                                        #line 7054 
                                        return -93;
  #line 7056 
  if ((unsigned int)vlan != 0U || (unsigned int)qos != 0U) 
                                                           #line 7056 
                                                           tmp_2 = igb_enable_port_vlan(adapter,vf,(unsigned short)((int)vlan),(unsigned char)((int)qos)); else 
                                                                    #line 7056 
                                                                    tmp_2 = igb_disable_port_vlan(adapter,vf);
  #line 7056 
  return tmp_2;
}

#line 7060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_vlan_msg(struct igb_adapter *adapter, u32 *msgbuf, u32 vf)
{
  #line 7064 
  int ret;
  #line 7062 
  int add = (int)(*msgbuf >> 16) & 255;
  #line 7063 
  int vid = (int)*(msgbuf + 1U) & 4095;
  #line 7066 
  if ((unsigned int)(adapter->vf_data + (unsigned long)vf)->pf_vlan != 0U) 
    #line 7067 
    return -1;
  #line 7070 
  if (vid == 0 && add == 0) 
                            #line 7071 
                            return 0;
  #line 7073 
  ret = igb_set_vf_vlan(adapter,(unsigned int)vid,(_Bool)(add != 0),vf);
  #line 7074 
  if (ret == 0) 
                #line 7075 
                igb_set_vf_vlan_strip(adapter,(int)vf,(_Bool)(vid != 0));
  #line 7076 
  return ret;
}

#line 7079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static void igb_vf_reset(struct igb_adapter *adapter, u32 vf)
{
  #line 7081 
  struct vf_data_storage *vf_data = adapter->vf_data + (unsigned long)vf;
  #line 7084 
  vf_data->flags &= 8U;
  #line 7085 
  vf_data->last_nack = jiffies;
  #line 7088 
  igb_clear_vf_vfta(adapter,vf);
  #line 7089 
  igb_set_vf_vlan(adapter,(unsigned int)vf_data->pf_vlan,(_Bool)1,vf);
  #line 7090 
  igb_set_vmvir(adapter,(unsigned int)((int)vf_data->pf_vlan | ((int)vf_data->pf_qos << 13)),vf);
  #line 7092 
  igb_set_vmolr(adapter,(int)vf,(_Bool)((unsigned int)vf_data->pf_vlan == 0U));
  #line 7093 
  igb_set_vf_vlan_strip(adapter,(int)vf,(_Bool)((unsigned int)vf_data->pf_vlan != 0U));
  #line 7096 
  (adapter->vf_data + (unsigned long)vf)->num_vf_mc_hashes = (unsigned short)0U;
  #line 7099 
  igb_set_rx_mode(adapter->netdev);
  #line 7100 
  return;
}

#line 7102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_vf_reset_event(struct igb_adapter *adapter, u32 vf)
{
  #line 7104 
  unsigned char *vf_mac = (unsigned char *)(& (adapter->vf_data + (unsigned long)vf)->vf_mac_addresses);
  #line 7107 
  if (((adapter->vf_data + (unsigned long)vf)->flags & 8U) == 0U) 
                                                                  #line 7108 
                                                                  eth_zero_addr(vf_mac);
  #line 7111 
  igb_vf_reset(adapter,vf);
  #line 7112 
  return;
}

#line 7114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_vf_reset_msg(struct igb_adapter *adapter, u32 vf)
{
  #line 7118 
  u32 reg;
  #line 7118 
  u32 msgbuf[3U];
  #line 7116 
  struct e1000_hw *hw = & adapter->hw;
  #line 7117 
  unsigned char *vf_mac = (unsigned char *)(& (adapter->vf_data + (unsigned long)vf)->vf_mac_addresses);
  #line 7119 
  u8 *addr = (u8 *)(& msgbuf[1]);
  #line 7122 
  igb_vf_reset(adapter,vf);
  #line 7125 
  igb_set_vf_mac(adapter,(int)vf,vf_mac);
  #line 7128 
  reg = igb_rd32(hw,3216U);
  {
    #line 7130 
    union __anonunion___u_3509 __u;
    #line 7129 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 7129 
    u8 *hw_addr = (__u.__val);
    #line 7129 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 7129 
                                           writel((unsigned int)(1UL << vf) | reg,(void *)(hw_addr + 3216U));
  }
  #line 7130 
  reg = igb_rd32(hw,3212U);
  {
    #line 7132 
    union __anonunion___u_3511 __u_0;
    #line 7131 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 7131 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 7131 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 7131 
                                             writel((unsigned int)(1UL << vf) | reg,(void *)(hw_addr_0 + 3212U));
  }
  #line 7133 
  (adapter->vf_data + (unsigned long)vf)->flags |= 1U;
  #line 7136 
  if (is_zero_ether_addr(vf_mac)) 
                                  #line 7140 
                                  msgbuf[0] = 1073741825U;
  else {
    #line 7137 
    msgbuf[0] = 2147483649U;
    #line 7138 
    memcpy((void *)addr,(void *)vf_mac,6UL);
  }
  #line 7142 
  igb_write_mbx(hw,(u32 *)(& msgbuf),(unsigned short)3,(unsigned short)((int)((unsigned short)vf)));
  #line 7143 
  return;
}

#line 7145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_flush_mac_table(struct igb_adapter *adapter)
{
  #line 7148 
  int i;
  #line 7147 
  struct e1000_hw *hw = & adapter->hw;
  #line 7150 
  i = 0;
  #line 7150 
  while ((int)hw->mac.rar_entry_count > i) {
    #line 7151 
    (adapter->mac_table + (unsigned long)i)->state = (unsigned char)((unsigned int)(adapter->mac_table + (unsigned long)i)->state & 253U);
    #line 7152 
    memset((void *)(& (adapter->mac_table + (unsigned long)i)->addr),0,6UL);
    #line 7153 
    (adapter->mac_table + (unsigned long)i)->queue = (unsigned char)0U;
    #line 7154 
    igb_rar_set_index(adapter,(unsigned int)i);
    #line 7150 
    i ++;
  }
  #line 7156 
  return;
}

#line 7158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_available_rars(struct igb_adapter *adapter, u8 queue)
{
  #line 7164 
  int i;
  #line 7160 
  struct e1000_hw *hw = & adapter->hw;
  #line 7162 
  int rar_entries = (int)((unsigned int)hw->mac.rar_entry_count - adapter->vfs_allocated_count);
  #line 7164 
  int count = 0;
  #line 7166 
  i = 0;
  #line 7166 
  while (i < rar_entries) {
    #line 7168 
    if (((int)(adapter->mac_table + (unsigned long)i)->state & 1) != 0) 
      #line 7169 
      goto __Cont;
    #line 7172 
    if (((int)(adapter->mac_table + (unsigned long)i)->state & 2) != 0 && (int)(adapter->mac_table + (unsigned long)i)->queue != (int)queue) 
      #line 7174 
      goto __Cont;
    #line 7176 
    count ++;
    #line 7166 
    __Cont: 
            #line 7166 
    i ++;
  }
  #line 7179 
  return count;
}

#line 7183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_default_mac_filter(struct igb_adapter *adapter)
{
  #line 7185 
  struct igb_mac_addr *mac_table = adapter->mac_table;
  #line 7187 
  ether_addr_copy((u8 *)(& mac_table->addr),(u8 *)(& adapter->hw.mac.addr));
  #line 7188 
  mac_table->queue = (unsigned char)adapter->vfs_allocated_count;
  #line 7189 
  mac_table->state = (unsigned char)3U;
  #line 7191 
  igb_rar_set_index(adapter,0U);
  #line 7192 
  return;
}

#line 7199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_mac_entry_can_be_used(struct igb_mac_addr *entry, u8 *addr, u8 flags)
{
  #line 7202 
  if (((int)entry->state & 2) == 0) 
                                    #line 7203 
                                    return (_Bool)1;
  #line 7205 
  if ((((int)entry->state ^ (int)flags) & 4) != 0) 
                                                   #line 7207 
                                                   return (_Bool)0;
  #line 7209 
  if (! ether_addr_equal(addr,(u8 *)(& entry->addr))) 
                                                      #line 7210 
                                                      return (_Bool)0;
  #line 7212 
  return (_Bool)1;
}

#line 7220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_add_mac_filter_flags(struct igb_adapter *adapter, u8 *addr, u8 queue, u8 flags)
{
  #line 7227 
  int i;
  #line 7224 
  struct e1000_hw *hw = & adapter->hw;
  #line 7225 
  int rar_entries = (int)((unsigned int)hw->mac.rar_entry_count - adapter->vfs_allocated_count);
  #line 7229 
  if ((int)is_zero_ether_addr(addr) != 0) 
                                          #line 7230 
                                          return -22;
  #line 7236 
  i = 0;
  #line 7236 
  while (i < rar_entries) {
    {
      #line 7237 
      if (! igb_mac_entry_can_be_used(adapter->mac_table + (unsigned long)i,addr,
                                  (unsigned char)((int)flags))) 
        #line 7239 
        goto __Cont;
      #line 7241 
      ether_addr_copy((u8 *)(& (adapter->mac_table + (unsigned long)i)->addr),addr);
      #line 7242 
      (adapter->mac_table + (unsigned long)i)->queue = queue;
      #line 7243 
      (adapter->mac_table + (unsigned long)i)->state = (unsigned char)((unsigned int)((int)(adapter->mac_table + (unsigned long)i)->state | (int)flags) | 2U);
      #line 7245 
      igb_rar_set_index(adapter,(unsigned int)i);
      #line 7246 
      return i;
    }
    #line 7236 
    __Cont: 
            #line 7236 
    i ++;
  }
  #line 7249 
  return -28;
}

#line 7252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_add_mac_filter(struct igb_adapter *adapter, u8 *addr, u8 queue)
{
  #line 7255 
  return igb_add_mac_filter_flags(adapter,addr,(unsigned char)((int)queue),
                               (unsigned char)0);
}

#line 7264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_del_mac_filter_flags(struct igb_adapter *adapter, u8 *addr, u8 queue, u8 flags)
{
  #line 7271 
  int i;
  #line 7268 
  struct e1000_hw *hw = & adapter->hw;
  #line 7269 
  int rar_entries = (int)((unsigned int)hw->mac.rar_entry_count - adapter->vfs_allocated_count);
  #line 7273 
  if ((int)is_zero_ether_addr(addr) != 0) 
                                          #line 7274 
                                          return -22;
  #line 7280 
  i = 0;
  #line 7280 
  while (i < rar_entries) {
    {
      #line 7281 
      if (((int)(adapter->mac_table + (unsigned long)i)->state & 2) == 0) 
        #line 7282 
        goto __Cont;
      #line 7283 
      if (((int)(adapter->mac_table + (unsigned long)i)->state & (int)flags) != (int)flags) 
        #line 7284 
        goto __Cont;
      #line 7285 
      if ((int)(adapter->mac_table + (unsigned long)i)->queue != (int)queue) 
        #line 7286 
        goto __Cont;
      #line 7287 
      if (! ether_addr_equal((u8 *)(& (adapter->mac_table + (unsigned long)i)->addr),
                         addr)) 
        #line 7288 
        goto __Cont;
      #line 7293 
      if (((int)(adapter->mac_table + (unsigned long)i)->state & 1) != 0) {
        #line 7294 
        (adapter->mac_table + (unsigned long)i)->state = (unsigned char)3U;
        #line 7296 
        (adapter->mac_table + (unsigned long)i)->queue = (unsigned char)adapter->vfs_allocated_count;
      }
      else {
        #line 7299 
        (adapter->mac_table + (unsigned long)i)->state = (unsigned char)0U;
        #line 7300 
        (adapter->mac_table + (unsigned long)i)->queue = (unsigned char)0U;
        #line 7301 
        memset((void *)(& (adapter->mac_table + (unsigned long)i)->addr),0,6UL);
      }
      #line 7304 
      igb_rar_set_index(adapter,(unsigned int)i);
      #line 7305 
      return 0;
    }
    #line 7280 
    __Cont: 
            #line 7280 
    i ++;
  }
  #line 7308 
  return -2;
}

#line 7311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_del_mac_filter(struct igb_adapter *adapter, u8 *addr, u8 queue)
{
  #line 7314 
  return igb_del_mac_filter_flags(adapter,addr,(unsigned char)((int)queue),
                               (unsigned char)0);
}

#line 7317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_add_mac_steering_filter(struct igb_adapter *adapter, u8 *addr, u8 queue, u8 flags)
{
  #line 7320 
  struct e1000_hw *hw = & adapter->hw;
  #line 7325 
  if (hw->mac.type != (unsigned int)e1000_i210) 
                                                #line 7326 
                                                return -95;
  #line 7328 
  return igb_add_mac_filter_flags(adapter,addr,(unsigned char)((int)queue),
                               (unsigned char)((int)((unsigned int)flags | 8U)));
}

#line 7332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_del_mac_steering_filter(struct igb_adapter *adapter, u8 *addr, u8 queue, u8 flags)
{
  #line 7335 
  return igb_del_mac_filter_flags(adapter,addr,(unsigned char)((int)queue),
                               (unsigned char)((int)((unsigned int)flags | 8U)));
}

#line 7339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_uc_sync(struct net_device *netdev, unsigned char *addr)
{
  #line 7346 
  int __UNIQUE_ID___x588;
  #line 7346 
  int tmp_0;
  #line 7342 
  int ret;
  #line 7341 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 7344 
  ret = igb_add_mac_filter(adapter,addr,(unsigned char)((int)((unsigned char)adapter->vfs_allocated_count)));
  {
    #line 7346 
    __UNIQUE_ID___x588 = ret;
    #line 7346 
    int __UNIQUE_ID___y589 = 0;
    #line 7346 
    if (__UNIQUE_ID___x588 < __UNIQUE_ID___y589) 
                                                 #line 7346 
                                                 tmp_0 = __UNIQUE_ID___x588; else 
                                                                    #line 7346 
                                                                    tmp_0 = __UNIQUE_ID___y589;
    }
  #line 7346 
  return tmp_0;
}

#line 7349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_uc_unsync(struct net_device *netdev, unsigned char *addr)
{
  #line 7351 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 7353 
  igb_del_mac_filter(adapter,addr,(unsigned char)((int)((unsigned char)adapter->vfs_allocated_count)));
  #line 7355 
  return 0;
}

#line 7358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_mac_filter(struct igb_adapter *adapter, int vf, u32 info, u8 *addr)
{
  #line 7363 
  struct list_head *pos;
  #line 7361 
  struct pci_dev *pdev = adapter->pdev;
  #line 7362 
  struct vf_data_storage *vf_data = adapter->vf_data + (unsigned long)vf;
  #line 7364 
  struct vf_mac_filter *entry = (struct vf_mac_filter *)0;
  #line 7365 
  int ret = 0;
  #line 7367 
  switch (info) {
    #line 7368 
    case (u32)65536: 
                     #line 7368 
    ;
    #line 7370 
    pos = adapter->vf_macs.l.next;
    #line 7370 
    while (& adapter->vf_macs.l != pos) {
      {
        #line 7371 
        void *__mptr;
        #line 7371 
        __mptr = (void *)pos;
        #line 7371 
        entry = ((struct vf_mac_filter *)__mptr);
        #line 7372 
        if (entry->vf == vf) {
          #line 7373 
          entry->vf = -1;
          #line 7374 
          entry->free = (_Bool)1;
          #line 7375 
          igb_del_mac_filter(adapter,(u8 *)(& entry->vf_mac),(unsigned char)((int)((unsigned char)vf)));
        }
      }
      #line 7370 
      pos = pos->next;
    }
    #line 7378 
    break;
    #line 7379 
    case (u32)131072: 
                      #line 7379 
    ;
    #line 7380 
    if ((vf_data->flags & 8U) != 0U && ! vf_data->trusted) {
      #line 7382 
      _dev_warn(& pdev->dev,(char *)"VF %d requested MAC filter but is administratively denied\n",vf);
      #line 7385 
      return -22;
    }
    #line 7387 
    if (! is_valid_ether_addr(addr)) {
      #line 7388 
      _dev_warn(& pdev->dev,(char *)"VF %d attempted to set invalid MAC filter\n",vf);
      #line 7391 
      return -22;
    }
    #line 7395 
    pos = adapter->vf_macs.l.next;
    #line 7395 
    while (& adapter->vf_macs.l != pos) {
      {
        #line 7396 
        void *__mptr_0;
        #line 7396 
        __mptr_0 = (void *)pos;
        #line 7396 
        entry = ((struct vf_mac_filter *)__mptr_0);
        #line 7397 
        if ((int)entry->free != 0) 
                                   #line 7398 
                                   break;
      }
      #line 7395 
      pos = pos->next;
    }
    #line 7401 
    if (entry != (struct vf_mac_filter *)0 && (int)entry->free != 0) {
      #line 7407 
      int __UNIQUE_ID___x590;
      #line 7407 
      int tmp_2;
      #line 7402 
      entry->free = (_Bool)0;
      #line 7403 
      entry->vf = vf;
      #line 7404 
      ether_addr_copy((u8 *)(& entry->vf_mac),addr);
      #line 7406 
      ret = igb_add_mac_filter(adapter,addr,(unsigned char)((int)((unsigned char)vf)));
      {
        #line 7407 
        __UNIQUE_ID___x590 = ret;
        #line 7407 
        int __UNIQUE_ID___y591 = 0;
        #line 7407 
        if (__UNIQUE_ID___x590 < __UNIQUE_ID___y591) 
                                                     #line 7407 
                                                     tmp_2 = __UNIQUE_ID___x590; else 
                                                                    #line 7407 
                                                                    tmp_2 = __UNIQUE_ID___y591;
        }
      #line 7407 
      ret = tmp_2;
    }
    else 
         #line 7409 
         ret = -28;
    #line 7412 
    if (ret == -28) 
                    #line 7413 
                    _dev_warn(& pdev->dev,(char *)"VF %d has requested MAC filter but there is no space for it\n",vf);
    #line 7416 
    break;
    #line 7417 
    default: 
             #line 7417 
    ;
    #line 7418 
    ret = -22;
    #line 7419 
    break;
  }
  #line 7422 
  return ret;
}

#line 7425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_mac_addr(struct igb_adapter *adapter, u32 *msg, int vf)
{
  #line 7427 
  struct pci_dev *pdev = adapter->pdev;
  #line 7428 
  struct vf_data_storage *vf_data = adapter->vf_data + (unsigned long)vf;
  #line 7429 
  u32 info = *msg & 16711680U;
  #line 7434 
  unsigned char *addr = (unsigned char *)(msg + 1U);
  #line 7435 
  int ret = 0;
  #line 7437 
  if (info == 0U) {
    #line 7438 
    if ((vf_data->flags & 8U) != 0U && ! vf_data->trusted) {
      #line 7440 
      _dev_warn(& pdev->dev,(char *)"VF %d attempted to override administratively set MAC address\nReload the VF driver to resume operations\n",vf);
      #line 7443 
      return -22;
    }
    #line 7446 
    if (! is_valid_ether_addr(addr)) {
      #line 7447 
      _dev_warn(& pdev->dev,(char *)"VF %d attempted to set invalid MAC\n",vf);
      #line 7450 
      return -22;
    }
    #line 7453 
    ret = igb_set_vf_mac(adapter,vf,addr);
  }
  else 
       #line 7455 
       ret = igb_set_vf_mac_filter(adapter,vf,info,addr);
  #line 7458 
  return ret;
}

#line 7461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_rcv_ack_from_vf(struct igb_adapter *adapter, u32 vf)
{
  #line 7463 
  struct e1000_hw *hw = & adapter->hw;
  #line 7464 
  struct vf_data_storage *vf_data = adapter->vf_data + (unsigned long)vf;
  #line 7465 
  u32 msg = 1073741824U;
  {
    #line 7469 
    unsigned long __dummy;
    #line 7469 
    unsigned long __dummy2;
    }
  #line 7468 
  if (1 != 0) {
    {
      #line 7469 
      unsigned long __dummy_0;
      #line 7469 
      unsigned long __dummy2_0;
      }
    #line 7469 
    if (1 != 0) 
      #line 7469 
      if ((long)((vf_data->last_nack - jiffies) + 500UL) < 0L) 
        #line 7468 
        if ((vf_data->flags & 1U) == 0U) {
          #line 7470 
          igb_write_mbx(hw,& msg,(unsigned short)1,(unsigned short)((int)((unsigned short)vf)));
          #line 7471 
          vf_data->last_nack = jiffies;
        }
  }
  #line 7473 
  return;
}

#line 7475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_rcv_msg_from_vf(struct igb_adapter *adapter, u32 vf)
{
  #line 7478 
  u32 msgbuf[16U];
  #line 7481 
  s32 retval;
  #line 7477 
  struct pci_dev *pdev = adapter->pdev;
  #line 7479 
  struct e1000_hw *hw = & adapter->hw;
  #line 7480 
  struct vf_data_storage *vf_data = adapter->vf_data + (unsigned long)vf;
  #line 7483 
  retval = igb_read_mbx(hw,(u32 *)(& msgbuf),(unsigned short)16,(unsigned short)((int)((unsigned short)vf)),(_Bool)0);
  #line 7485 
  if (retval != 0) {
    #line 7487 
    _dev_err(& pdev->dev,(char *)"Error receiving message from VF\n");
    #line 7488 
    vf_data->flags &= 4294967294U;
    {
      #line 7489 
      unsigned long __dummy;
      #line 7489 
      unsigned long __dummy2;
      }
    #line 7489 
    if (1 == 0) 
                #line 7489 
                goto _LOR;
    else {
      {
        #line 7489 
        unsigned long __dummy_0;
        #line 7489 
        unsigned long __dummy2_0;
        }
      #line 7489 
      if (1 == 0) 
                  #line 7489 
                  goto _LOR;
      else 
        #line 7489 
        if ((long)((vf_data->last_nack - jiffies) + 500UL) >= 0L) 
                                                                  #line 7489 
                                                                  _LOR: 
                                                                    #line 7490 
                                                                    goto unlock;
    }
    #line 7491 
    goto out;
  }
  #line 7495 
  if ((msgbuf[0] & 3221225472U) != 0U) 
                                       #line 7496 
                                       goto unlock;
  #line 7501 
  if (msgbuf[0] == 1U) {
    #line 7503 
    igb_vf_reset_msg(adapter,vf);
    #line 7504 
    return;
  }
  #line 7507 
  if ((vf_data->flags & 1U) == 0U) {
    {
      #line 7508 
      unsigned long __dummy_1;
      #line 7508 
      unsigned long __dummy2_1;
      }
    #line 7508 
    if (1 == 0) 
                #line 7508 
                goto _LOR_0;
    else {
      {
        #line 7508 
        unsigned long __dummy_2;
        #line 7508 
        unsigned long __dummy2_2;
        }
      #line 7508 
      if (1 == 0) 
                  #line 7508 
                  goto _LOR_0;
      else 
        #line 7508 
        if ((long)((vf_data->last_nack - jiffies) + 500UL) >= 0L) 
                                                                  #line 7508 
                                                                  _LOR_0: 
                                                                    #line 7509 
                                                                    goto unlock;
    }
    #line 7510 
    retval = -1;
    #line 7511 
    goto out;
  }
  #line 7514 
  switch (msgbuf[0] & 65535U) {
    #line 7515 
    case (unsigned int)2: 
                          #line 7515 
    ;
    #line 7516 
    retval = igb_set_vf_mac_addr(adapter,(u32 *)(& msgbuf),(int)vf);
    #line 7517 
    break;
    #line 7518 
    case (unsigned int)6: 
                          #line 7518 
    ;
    #line 7519 
    retval = igb_set_vf_promisc(adapter,(u32 *)(& msgbuf),vf);
    #line 7520 
    break;
    #line 7521 
    case (unsigned int)3: 
                          #line 7521 
    ;
    #line 7522 
    retval = igb_set_vf_multicasts(adapter,(u32 *)(& msgbuf),vf);
    #line 7523 
    break;
    #line 7524 
    case (unsigned int)5: 
                          #line 7524 
    ;
    #line 7525 
    retval = igb_set_vf_rlpml(adapter,(int)msgbuf[1],(int)vf);
    #line 7526 
    break;
    #line 7527 
    case (unsigned int)4: 
                          #line 7527 
    ;
    #line 7528 
    retval = -1;
    #line 7529 
    if ((unsigned int)vf_data->pf_vlan != 0U) 
                                              #line 7530 
                                              _dev_warn(& pdev->dev,(char *)"VF %d attempted to override administratively set VLAN tag\nReload the VF driver to resume operations\n",vf); else 
                                                                    #line 7534 
                                                                    retval = igb_set_vf_vlan_msg(adapter,(u32 *)(& msgbuf),vf);
    #line 7535 
    break;
    #line 7536 
    default: 
             #line 7536 
    ;
    #line 7537 
    _dev_err(& pdev->dev,(char *)"Unhandled Msg %08x\n",msgbuf[0]);
    #line 7538 
    retval = -1;
    #line 7539 
    break;
  }
  #line 7542 
  msgbuf[0] |= 536870912U;
  #line 7543 
  out: 
       #line 7543 
  ;
  #line 7545 
  if (retval != 0) 
                   #line 7546 
                   msgbuf[0] |= 1073741824U; else 
                                                  #line 7548 
                                                  msgbuf[0] |= 2147483648U;
  #line 7551 
  igb_write_mbx(hw,(u32 *)(& msgbuf),(unsigned short)1,(unsigned short)((int)((unsigned short)vf)));
  #line 7552 
  return;
  #line 7554 
  unlock: 
          #line 7554 
  ;
  #line 7555 
  igb_unlock_mbx(hw,(unsigned short)((int)((unsigned short)vf)));
  #line 7556 
  return;
}

#line 7558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_msg_task(struct igb_adapter *adapter)
{
  #line 7561 
  u32 vf;
  #line 7560 
  struct e1000_hw *hw = & adapter->hw;
  #line 7563 
  vf = 0U;
  #line 7563 
  while (adapter->vfs_allocated_count > vf) {
    {
      #line 7565 
      if (igb_check_for_rst(hw,(unsigned short)((int)((unsigned short)vf))) == 0) 
        #line 7566 
        igb_vf_reset_event(adapter,vf);
      #line 7569 
      if (igb_check_for_msg(hw,(unsigned short)((int)((unsigned short)vf))) == 0) 
        #line 7570 
        igb_rcv_msg_from_vf(adapter,vf);
      #line 7573 
      if (igb_check_for_ack(hw,(unsigned short)((int)((unsigned short)vf))) == 0) 
        #line 7574 
        igb_rcv_ack_from_vf(adapter,vf);
    }
    #line 7563 
    vf ++;
  }
  #line 7576 
  return;
}

#line 7589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_uta(struct igb_adapter *adapter, bool set)
{
  #line 7592 
  unsigned int tmp;
  #line 7593 
  int i;
  #line 7591 
  struct e1000_hw *hw = & adapter->hw;
  #line 7592 
  if ((int)set != 0) 
                     #line 7592 
                     tmp = 4294967295U; else 
                                             #line 7592 
                                             tmp = 0U;
  #line 7592 
  u32 uta = tmp;
  #line 7596 
  if (adapter->vfs_allocated_count == 0U) 
                                          #line 7597 
                                          return;
  #line 7599 
  i = (int)hw->mac.uta_reg_count;
  #line 7599 
  while (1) {
    #line 7599 
    int tmp_1;
    #line 7599 
    tmp_1 = i;
    #line 7599 
    i --;
    #line 7599 
    ;
    #line 7599 
    if (! (tmp_1 != 0)) 
                        #line 7599 
                        break;
    {
      #line 7601 
      union __anonunion___u_3513 __u;
      #line 7600 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 7600 
      u8 *hw_addr = (__u.__val);
      #line 7600 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 7600 
                                             writel(uta,(void *)(hw_addr + (unsigned long)((i << 2) + 40960)));
    }
  }
  #line 7602 
  return;
}

#line 7608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static irqreturn_t igb_intr_msi(int irq, void *data)
{
  #line 7610 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  #line 7611 
  struct igb_q_vector *q_vector = adapter->q_vector[0];
  #line 7612 
  struct e1000_hw *hw = & adapter->hw;
  #line 7614 
  u32 icr = igb_rd32(hw,192U);
  #line 7616 
  igb_write_itr(q_vector);
  #line 7618 
  if ((icr & 1073741824U) != 0U) 
                                 #line 7619 
                                 cif_schedule_work(& adapter->reset_task);
  #line 7621 
  if ((icr & 268435456U) != 0U) 
                                #line 7623 
                                (adapter->stats.doosync) ++;
  #line 7626 
  if ((icr & 12U) != 0U) {
    #line 7627 
    hw->mac.get_link_status = (_Bool)1;
    #line 7628 
    if (! test_bit(2L,& adapter->state)) 
                                         #line 7629 
                                         cif_mod_timer(& adapter->watchdog_timer,jiffies + 1UL);
  }
  #line 7632 
  if ((icr & 524288U) != 0U) 
                             #line 7633 
                             igb_tsync_interrupt(adapter);
  #line 7635 
  napi_schedule(& q_vector->napi);
  #line 7637 
  return IRQ_HANDLED;
}

#line 7645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static irqreturn_t igb_intr(int irq, void *data)
{
  #line 7647 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  #line 7648 
  struct igb_q_vector *q_vector = adapter->q_vector[0];
  #line 7649 
  struct e1000_hw *hw = & adapter->hw;
  #line 7653 
  u32 icr = igb_rd32(hw,192U);
  #line 7658 
  if ((icr & 2147483648U) == 0U) 
                                 #line 7659 
                                 return IRQ_NONE;
  #line 7661 
  igb_write_itr(q_vector);
  #line 7663 
  if ((icr & 1073741824U) != 0U) 
                                 #line 7664 
                                 cif_schedule_work(& adapter->reset_task);
  #line 7666 
  if ((icr & 268435456U) != 0U) 
                                #line 7668 
                                (adapter->stats.doosync) ++;
  #line 7671 
  if ((icr & 12U) != 0U) {
    #line 7672 
    hw->mac.get_link_status = (_Bool)1;
    #line 7674 
    if (! test_bit(2L,& adapter->state)) 
                                         #line 7675 
                                         cif_mod_timer(& adapter->watchdog_timer,jiffies + 1UL);
  }
  #line 7678 
  if ((icr & 524288U) != 0U) 
                             #line 7679 
                             igb_tsync_interrupt(adapter);
  #line 7681 
  napi_schedule(& q_vector->napi);
  #line 7683 
  return IRQ_HANDLED;
}

#line 7686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_ring_irq_enable(struct igb_q_vector *q_vector)
{
  #line 7688 
  struct igb_adapter *adapter = q_vector->adapter;
  #line 7689 
  struct e1000_hw *hw = & adapter->hw;
  #line 7691 
  if (q_vector->rx.ring != (struct igb_ring *)0 && (adapter->rx_itr_setting & 3U) != 0U || q_vector->rx.ring == (struct igb_ring *)0 && (adapter->tx_itr_setting & 3U) != 0U) 
    #line 7693 
    if (adapter->num_q_vectors == 1U && adapter->vf_data == (struct vf_data_storage *)0) 
      #line 7694 
      igb_set_itr(q_vector); else 
                                  #line 7696 
                                  igb_update_ring_itr(q_vector);
  #line 7699 
  if (! test_bit(2L,& adapter->state)) 
    #line 7700 
    if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
      #line 7702 
      union __anonunion___u_3515 __u;
      #line 7701 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 7701 
      u8 *hw_addr = (__u.__val);
      #line 7701 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 7701 
                                             writel(q_vector->eims_value,(void *)(hw_addr + 5412U));
    }
    else 
         #line 7703 
         igb_irq_enable(adapter);
  #line 7704 
  return;
}

#line 7712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_poll(struct napi_struct *napi, int budget)
{
  #line 7745 
  int __UNIQUE_ID___x592;
  #line 7745 
  int tmp_2;
  #line 7714 
  void *__mptr;
  #line 7714 
  __mptr = (void *)napi;
  #line 7714 
  struct igb_q_vector *q_vector = ((struct igb_q_vector *)(__mptr + 18446744073709551536U));
  #line 7717 
  bool clean_complete = (_Bool)1;
  #line 7718 
  int work_done = 0;
  #line 7721 
  if (((unsigned long)(q_vector->adapter)->flags & 2UL) != 0UL) 
                                                                #line 7722 
                                                                igb_update_dca(q_vector);
  #line 7724 
  if (q_vector->tx.ring != (struct igb_ring *)0) 
                                                 #line 7725 
                                                 clean_complete = igb_clean_tx_irq(q_vector,budget);
  #line 7727 
  if (q_vector->rx.ring != (struct igb_ring *)0) {
    #line 7728 
    int cleaned = igb_clean_rx_irq(q_vector,budget);
    #line 7730 
    work_done += cleaned;
    #line 7731 
    if (cleaned >= budget) 
                           #line 7732 
                           clean_complete = (_Bool)0;
  }
  #line 7736 
  if (! clean_complete) 
                        #line 7737 
                        return budget;
  #line 7742 
  if ((long)((int)napi_complete_done(napi,work_done) != 0) != 0L) 
                                                                  #line 7743 
                                                                  igb_ring_irq_enable(q_vector);
  {
    #line 7745 
    __UNIQUE_ID___x592 = work_done;
    #line 7745 
    int __UNIQUE_ID___y593 = budget + -1;
    #line 7745 
    if (__UNIQUE_ID___x592 < __UNIQUE_ID___y593) 
                                                 #line 7745 
                                                 tmp_2 = __UNIQUE_ID___x592; else 
                                                                    #line 7745 
                                                                    tmp_2 = __UNIQUE_ID___y593;
    }
  #line 7745 
  return tmp_2;
}

#line 7755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_clean_tx_irq(struct igb_q_vector *q_vector, int napi_budget)
{
  #line 7759 
  struct igb_tx_buffer *tx_buffer;
  #line 7760 
  union e1000_adv_tx_desc *tx_desc;
  #line 7897 
  int tmp_11;
  #line 7757 
  struct igb_adapter *adapter = q_vector->adapter;
  #line 7758 
  struct igb_ring *tx_ring = q_vector->tx.ring;
  #line 7761 
  unsigned int total_bytes = 0U;
  #line 7761 
  unsigned int total_packets = 0U;
  #line 7762 
  unsigned int budget = (unsigned int)q_vector->tx.work_limit;
  #line 7763 
  unsigned int i = (unsigned int)tx_ring->next_to_clean;
  #line 7765 
  if ((int)test_bit(2L,& adapter->state) != 0) 
                                               #line 7766 
                                               return (_Bool)1;
  #line 7768 
  tx_buffer = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info + (unsigned long)i;
  #line 7769 
  tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 7770 
  i -= (unsigned int)tx_ring->count;
  #line 7772 
  while (1) {
    {
      #line 7773 
      union e1000_adv_tx_desc *eop_desc = tx_buffer->next_to_watch;
      #line 7776 
      if (eop_desc == (union e1000_adv_tx_desc *)0) 
                                                    #line 7777 
                                                    break;
      #line 7778 
      ldv_inline_asm();
      #line 7783 
      if ((eop_desc->wb.status & 1U) == 0U) 
                                            #line 7784 
                                            break;
      #line 7787 
      tx_buffer->next_to_watch = (union e1000_adv_tx_desc *)0;
      #line 7790 
      total_bytes = tx_buffer->bytecount + total_bytes;
      #line 7791 
      total_packets = (unsigned int)tx_buffer->gso_segs + total_packets;
      #line 7794 
      napi_consume_skb(tx_buffer->skb,napi_budget);
      #line 7797 
      dma_unmap_single_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 7803 
      tx_buffer->len = 0U;
      #line 7806 
      while (tx_desc != eop_desc) {
        #line 7807 
        tx_buffer ++;
        #line 7808 
        tx_desc ++;
        #line 7809 
        i ++;
        #line 7810 
        if ((long)(i == 0U) != 0L) {
          #line 7811 
          i -= (unsigned int)tx_ring->count;
          #line 7812 
          tx_buffer = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info;
          #line 7813 
          tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc;
        }
        #line 7817 
        if (tx_buffer->len != 0U) {
          #line 7818 
          dma_unmap_page_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 7822 
          tx_buffer->len = 0U;
        }
      }
      #line 7827 
      tx_buffer ++;
      #line 7828 
      tx_desc ++;
      #line 7829 
      i ++;
      #line 7830 
      if ((long)(i == 0U) != 0L) {
        #line 7831 
        i -= (unsigned int)tx_ring->count;
        #line 7832 
        tx_buffer = tx_ring->__anonCompField_igb_ring_166.tx_buffer_info;
        #line 7833 
        tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc;
      }
      #line 7837 
      __builtin_prefetch((void const *)((void *)tx_desc));
      #line 7840 
      budget --;
    }
    #line 7841 
    if (! ((long)(budget != 0U) != 0L)) 
                                        #line 7772 
                                        break;
  }
  #line 7843 
  ;
  #line 7843 
  ;
  #line 7843 
  netdev_tx_completed_queue(txring_txq(tx_ring),total_packets,total_bytes);
  #line 7845 
  i = (unsigned int)tx_ring->count + i;
  #line 7846 
  tx_ring->next_to_clean = (unsigned short)i;
  #line 7847 
  u64_stats_init(& tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp);
  #line 7848 
  tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.bytes += (unsigned long long)total_bytes;
  #line 7849 
  tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.packets += (unsigned long long)total_packets;
  #line 7850 
  u64_stats_init(& tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp);
  #line 7851 
  q_vector->tx.total_bytes += total_bytes;
  #line 7852 
  q_vector->tx.total_packets += total_packets;
  #line 7854 
  if ((int)test_bit(5L,& tx_ring->flags) != 0) {
    #line 7855 
    struct e1000_hw *hw = & adapter->hw;
    #line 7860 
    cif_clear_bit_0(5L,& tx_ring->flags);
    {
      #line 7862 
      unsigned long __dummy;
      #line 7862 
      unsigned long __dummy2;
      }
    #line 7861 
    if (1 != 0) {
      {
        #line 7862 
        unsigned long __dummy_0;
        #line 7862 
        unsigned long __dummy2_0;
        }
      #line 7862 
      if (1 != 0) 
        #line 7862 
        if ((long)((tx_buffer->time_stamp + (unsigned long)((int)adapter->tx_timeout_factor * 250)) - jiffies) < 0L) 
          #line 7861 
          if (tx_buffer->next_to_watch != (union e1000_adv_tx_desc *)0) {
            #line 7863 
            if ((igb_rd32(hw,8U) & 16U) == 0U) {
              #line 7867 
              unsigned int tmp_1;
              #line 7867 
              int tmp_2;
              #line 7867 
              ;
              #line 7867 
              ;
              #line 7867 
              ;
              #line 7867 
              ;
              #line 7867 
              ;
              #line 7867 
              ;
              #line 7867 
              tmp_1 = readl(tx_ring->tail);
              #line 7867 
              if ((unsigned int)tx_ring->reg_idx <= 3U) 
                                                        #line 7867 
                                                        tmp_2 = (int)tx_ring->reg_idx * 256 + 14352; else 
                                                                    #line 7867 
                                                                    tmp_2 = (int)tx_ring->reg_idx * 64 + 57360;
              #line 7867 
              ;
              #line 7867 
              ;
              #line 7867 
              ;
              #line 7867 
              _dev_err(tx_ring->dev,(char *)"Detected Tx Unit Hang\n",(int)tx_ring->queue_index,igb_rd32(hw,(unsigned int)tmp_2),tmp_1,(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,tx_buffer->time_stamp,tx_buffer->next_to_watch,jiffies,(tx_buffer->next_to_watch)->wb.status);
              #line 7888 
              netif_stop_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
              #line 7892 
              return (_Bool)1;
            }
          }
    }
  }
  #line 7897 
  if ((long)(total_packets != 0U) != 0L) {
    #line 7897 
    if ((long)((int)netif_carrier_ok(tx_ring->netdev) != 0) != 0L) 
                                                                   #line 7897 
                                                                   tmp_11 = 1; else 
                                                                    #line 7897 
                                                                    tmp_11 = 0;
  }
  else 
       #line 7897 
       tmp_11 = 0;
  #line 7897 
  if (tmp_11 != 0) {
    #line 7897 
    if ((long)((unsigned int)igb_desc_unused(tx_ring) > 41U) != 0L) {
      #line 7899 
      ldv_inline_asm();
      #line 7904 
      if ((int)__netif_subqueue_stopped(tx_ring->netdev,
                                 (unsigned short)((int)tx_ring->queue_index)) != 0) {
        #line 7906 
        if (! test_bit(2L,& adapter->state)) {
          #line 7907 
          netif_wake_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
          #line 7910 
          u64_stats_init(& tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp);
          #line 7911 
          (tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_stats.restart_queue) ++;
          #line 7912 
          u64_stats_init(& tx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_167.tx_syncp);
        }
      }
    }
  }
  #line 7916 
  return (_Bool)(budget != 0U);
}

#line 7926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_reuse_rx_page(struct igb_ring *rx_ring, struct igb_rx_buffer *old_buff)
{
  #line 7929 
  struct igb_rx_buffer *new_buff;
  #line 7930 
  u16 nta = rx_ring->next_to_alloc;
  #line 7932 
  new_buff = rx_ring->__anonCompField_igb_ring_166.rx_buffer_info + (unsigned long)nta;
  #line 7935 
  nta = (u16)((int)nta + 1);
  #line 7936 
  if ((int)rx_ring->count > (int)nta) 
                                      #line 7936 
                                      rx_ring->next_to_alloc = nta; else 
                                                                    #line 7936 
                                                                    rx_ring->next_to_alloc = (unsigned short)0U;
  #line 7942 
  new_buff->dma = old_buff->dma;
  #line 7943 
  new_buff->page = old_buff->page;
  #line 7944 
  new_buff->page_offset = old_buff->page_offset;
  #line 7945 
  new_buff->pagecnt_bias = old_buff->pagecnt_bias;
  #line 7946 
  return;
}

#line 7948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static bool igb_page_is_reserved(struct page *page)
{
  #line 7950 
  int tmp_2;
  #line 7950 
  if (page_to_nid(page) != numa_mem_id()) 
                                          #line 7950 
                                          tmp_2 = 1;
  else {
    #line 7950 
    if ((int)page_is_pfmemalloc(page) != 0) 
                                            #line 7950 
                                            tmp_2 = 1; else 
                                                            #line 7950 
                                                            tmp_2 = 0;
  }
  #line 7950 
  return (_Bool)(tmp_2 != 0);
}

#line 7953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_can_reuse_rx_page(struct igb_rx_buffer *rx_buffer)
{
  #line 7955 
  unsigned int pagecnt_bias = (unsigned int)rx_buffer->pagecnt_bias;
  #line 7956 
  struct page *page = rx_buffer->page;
  #line 7959 
  if ((long)((int)igb_page_is_reserved(page) != 0) != 0L) 
                                                          #line 7960 
                                                          return (_Bool)0;
  #line 7964 
  ;
  #line 7964 
  if ((long)((unsigned int)page_ref_count(page) - pagecnt_bias > 1U) != 0L) 
    #line 7965 
    return (_Bool)0;
  #line 7978 
  if ((long)(pagecnt_bias == 0U) != 0L) {
    #line 7979 
    page_ref_add(page,65535);
    #line 7980 
    rx_buffer->pagecnt_bias = (unsigned short)65535U;
  }
  #line 7983 
  return (_Bool)1;
}

#line 7995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_add_rx_frag(struct igb_ring *rx_ring, struct igb_rx_buffer *rx_buffer, struct sk_buff *skb, unsigned int size)
{
  #line 8001 
  unsigned int truesize = (unsigned int)((4096UL << igb_rx_pg_order(rx_ring)) / 2UL);
  #line 8007 
  ;
  #line 8007 
  ;
  #line 8007 
  ;
  #line 8007 
  ;
  #line 8007 
  ;
  #line 8007 
  skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,rx_buffer->page,(int)rx_buffer->page_offset,(int)size,truesize);
  #line 8010 
  rx_buffer->page_offset ^= truesize;
  #line 8011 
  return;
}

#line 8016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct sk_buff *igb_construct_skb(struct igb_ring *rx_ring, struct igb_rx_buffer *rx_buffer, union e1000_adv_rx_desc *rx_desc, unsigned int size)
{
  #line 8027 
  unsigned int headlen;
  #line 8028 
  struct sk_buff *skb;
  #line 8021 
  void *va = lowmem_page_address(rx_buffer->page) + (unsigned long)rx_buffer->page_offset;
  #line 8023 
  unsigned int truesize = (unsigned int)((4096UL << igb_rx_pg_order(rx_ring)) / 2UL);
  #line 8031 
  __builtin_prefetch((void const *)va);
  #line 8033 
  __builtin_prefetch((void const *)(va + 64U));
  #line 8037 
  skb = napi_alloc_skb(& (rx_ring->q_vector)->napi,256U);
  #line 8038 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 8039 
                                                return (struct sk_buff *)0;
  #line 8041 
  if ((long)(igb_test_staterr(rx_desc,32768U) != 0U) != 0L) {
    #line 8042 
    igb_ptp_rx_pktstamp(rx_ring->q_vector,va,skb);
    #line 8043 
    va += 16U;
    #line 8044 
    size += 4294967280U;
  }
  #line 8048 
  headlen = size;
  #line 8049 
  if (headlen > 256U) 
                      #line 8050 
                      headlen = eth_get_headlen(skb->__anonCompField_sk_buff_88.__anonCompField___anonunion_519_87.__anonCompField___anonstruct_520_86.dev,va,256U);
  #line 8053 
  ;
  #line 8053 
  ;
  #line 8053 
  memcpy(__skb_put(skb,headlen),va,(unsigned long)(headlen + 7U) & 4294967288UL);
  #line 8056 
  size -= headlen;
  #line 8057 
  if (size != 0U) {
    #line 8058 
    ;
    #line 8058 
    ;
    #line 8058 
    ;
    #line 8058 
    ;
    #line 8058 
    ;
    #line 8058 
    skb_add_rx_frag(skb,0,rx_buffer->page,(int)((va + (unsigned long)headlen) - lowmem_page_address(rx_buffer->page)),(int)size,truesize);
    #line 8062 
    rx_buffer->page_offset ^= truesize;
  }
  else 
       #line 8067 
       rx_buffer->pagecnt_bias = (__u16)((int)rx_buffer->pagecnt_bias + 1);
  #line 8070 
  return skb;
}

#line 8073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct sk_buff *igb_build_skb(struct igb_ring *rx_ring, struct igb_rx_buffer *rx_buffer, union e1000_adv_rx_desc *rx_desc, unsigned int size)
{
  #line 8085 
  struct sk_buff *skb;
  #line 8078 
  void *va = lowmem_page_address(rx_buffer->page) + (unsigned long)rx_buffer->page_offset;
  #line 8080 
  unsigned int truesize = (unsigned int)((4096UL << igb_rx_pg_order(rx_ring)) / 2UL);
  #line 8088 
  __builtin_prefetch((void const *)va);
  #line 8090 
  __builtin_prefetch((void const *)(va + 64U));
  #line 8094 
  skb = build_skb(va + 18446744073709551552U,truesize);
  #line 8095 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 8096 
                                                return (struct sk_buff *)0;
  #line 8099 
  skb_reserve(skb,64);
  #line 8100 
  __skb_put(skb,size);
  #line 8103 
  if (igb_test_staterr(rx_desc,32768U) != 0U) {
    #line 8104 
    igb_ptp_rx_pktstamp(rx_ring->q_vector,(void *)skb->data,skb);
    #line 8105 
    __skb_pull(skb,16U);
  }
  #line 8110 
  rx_buffer->page_offset ^= truesize;
  #line 8115 
  return skb;
}

#line 8118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static void igb_rx_checksum(struct igb_ring *ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 8122 
  skb_checksum_none_assert(skb);
  #line 8125 
  if (igb_test_staterr(rx_desc,4U) != 0U) 
                                          #line 8126 
                                          return;
  #line 8129 
  if (((ring->netdev)->features & 549755813888ULL) == 0ULL) 
                                                            #line 8130 
                                                            return;
  #line 8133 
  if (igb_test_staterr(rx_desc,1610612736U) != 0U) {
    #line 8140 
    if (skb->len != 60U) 
                         #line 8140 
                         goto _LOR;
    else {
      #line 8140 
      if (! test_bit(2L,& ring->flags)) {
        #line 8140 
        _LOR: {
                #line 8142 
                u64_stats_init(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_syncp);
                #line 8143 
                (ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.csum_err) ++;
                #line 8144 
                u64_stats_init(& ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_syncp);
              }
      }
    }
    #line 8147 
    return;
  }
  #line 8150 
  if (igb_test_staterr(rx_desc,48U) != 0U) 
                                           #line 8152 
                                           skb->ip_summed = (unsigned char)1U;
  {
    #line 8154 
    bool branch;
    #line 8154 
    struct _ddebug __UNIQUE_ID_ddebug598 = {.modname = (char *)"igb", .function = (char *)"igb_rx_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c", .format = (char *)"cksum success: bits %08X\n", .lineno = (unsigned int)8154U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 8154 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug598.key.dd_key_false.key,(_Bool)0);
    #line 8154 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 8154 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug598,ring->dev,(char *)"cksum success: bits %08X\n",rx_desc->wb.upper.status_error);
  }
  #line 8156 
  return;
}

#line 8158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static void igb_rx_hash(struct igb_ring *ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 8162 
  if (((ring->netdev)->features & 274877906944ULL) != 0ULL) 
                                                            #line 8163 
                                                            skb_set_hash(skb,rx_desc->wb.lower.hi_dword.rss,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
  #line 8165 
  return;
}

#line 8179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_is_non_eop(struct igb_ring *rx_ring, union e1000_adv_rx_desc *rx_desc)
{
  #line 8182 
  u32 ntc = (unsigned int)((int)rx_ring->next_to_clean + 1);
  #line 8185 
  if ((unsigned int)rx_ring->count > ntc) 
                                          #line 8185 
                                          ntc = ntc; else 
                                                          #line 8185 
                                                          ntc = 0U;
  #line 8186 
  rx_ring->next_to_clean = (unsigned short)ntc;
  #line 8188 
  __builtin_prefetch((void const *)((void *)((union e1000_adv_rx_desc *)rx_ring->desc + (unsigned long)ntc)));
  #line 8190 
  if ((long)(igb_test_staterr(rx_desc,2U) != 0U) != 0L) 
                                                        #line 8191 
                                                        return (_Bool)0;
  #line 8193 
  return (_Bool)1;
}

#line 8210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_cleanup_headers(struct igb_ring *rx_ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 8214 
  if ((long)(igb_test_staterr(rx_desc,2533359616U) != 0U) != 0L) {
    #line 8216 
    struct net_device *netdev = rx_ring->netdev;
    #line 8217 
    if ((netdev->features & 8796093022208ULL) == 0ULL) {
      #line 8218 
      dev_kfree_skb_any(skb);
      #line 8219 
      return (_Bool)1;
    }
  }
  #line 8224 
  if (eth_skb_pad(skb) != 0) 
                             #line 8225 
                             return (_Bool)1;
  #line 8227 
  return (_Bool)0;
}

#line 8240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_process_skb_fields(struct igb_ring *rx_ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 8244 
  struct net_device *dev = rx_ring->netdev;
  #line 8246 
  igb_rx_hash(rx_ring,rx_desc,skb);
  #line 8248 
  igb_rx_checksum(rx_ring,rx_desc,skb);
  #line 8250 
  if (igb_test_staterr(rx_desc,65536U) != 0U) {
    #line 8250 
    if (igb_test_staterr(rx_desc,32768U) == 0U) 
                                                #line 8252 
                                                igb_ptp_rx_rgtstamp(rx_ring->q_vector,skb);
  }
  #line 8254 
  if ((dev->features & 256ULL) != 0ULL) {
    #line 8254 
    if (igb_test_staterr(rx_desc,8U) != 0U) {
      #line 8256 
      u16 vid;
      #line 8258 
      if (igb_test_staterr(rx_desc,262144U) != 0U) {
        #line 8258 
        if ((int)test_bit(3L,& rx_ring->flags) != 0) 
                                                     #line 8260 
                                                     vid = __builtin_bswap16((unsigned short)((int)rx_desc->wb.upper.vlan)); else 
                                                                    #line 8262 
                                                                    vid = rx_desc->wb.upper.vlan;
      }
      else 
           #line 8262 
           vid = rx_desc->wb.upper.vlan;
      #line 8264 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
    }
  }
  #line 8267 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->queue_index));
  #line 8269 
  skb->protocol = eth_type_trans(skb,rx_ring->netdev);
  #line 8270 
  return;
}

#line 8272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static struct igb_rx_buffer *igb_get_rx_buffer(struct igb_ring *rx_ring, unsigned int size)
{
  #line 8275 
  struct igb_rx_buffer *rx_buffer;
  #line 8277 
  rx_buffer = rx_ring->__anonCompField_igb_ring_166.rx_buffer_info + (unsigned long)rx_ring->next_to_clean;
  #line 8278 
  prefetchw((void *)rx_buffer->page);
  #line 8281 
  dma_sync_single_range_for_cpu(rx_ring->dev,rx_buffer->dma,(unsigned long)rx_buffer->page_offset,(unsigned long)size,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 8287 
  rx_buffer->pagecnt_bias = (__u16)((int)rx_buffer->pagecnt_bias - 1);
  #line 8289 
  return rx_buffer;
}

#line 8292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_put_rx_buffer(struct igb_ring *rx_ring, struct igb_rx_buffer *rx_buffer)
{
  #line 8295 
  if ((int)igb_can_reuse_rx_page(rx_buffer) != 0) 
                                                  #line 8297 
                                                  igb_reuse_rx_page(rx_ring,rx_buffer);
  else {
    #line 8302 
    ;
    #line 8302 
    ;
    #line 8302 
    dma_unmap_page_attrs(rx_ring->dev,rx_buffer->dma,4096UL << igb_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
    #line 8305 
    __page_frag_cache_drain(rx_buffer->page,(unsigned int)rx_buffer->pagecnt_bias);
  }
  #line 8310 
  rx_buffer->page = (struct page *)0;
  #line 8311 
  return;
}

#line 8313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_clean_rx_irq(struct igb_q_vector *q_vector, int budget)
{
  #line 8315 
  struct igb_ring *rx_ring = q_vector->rx.ring;
  #line 8316 
  struct sk_buff *skb = rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.skb;
  #line 8317 
  unsigned int total_bytes = 0U;
  #line 8317 
  unsigned int total_packets = 0U;
  #line 8318 
  u16 cleaned_count = (unsigned short)igb_desc_unused(rx_ring);
  #line 8320 
  while ((long)(total_packets < (unsigned int)budget) != 0L) {
    #line 8321 
    union e1000_adv_rx_desc *rx_desc;
    #line 8322 
    struct igb_rx_buffer *rx_buffer;
    #line 8323 
    unsigned int size;
    #line 8326 
    if ((unsigned int)cleaned_count > 15U) {
      #line 8327 
      igb_alloc_rx_buffers(rx_ring,(unsigned short)((int)cleaned_count));
      #line 8328 
      cleaned_count = (unsigned short)0U;
    }
    #line 8331 
    rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (unsigned long)rx_ring->next_to_clean;
    #line 8332 
    size = (unsigned int)rx_desc->wb.upper.length;
    #line 8333 
    if (size == 0U) 
                    #line 8334 
                    break;
    #line 8335 
    ldv_inline_asm();
    #line 8342 
    rx_buffer = igb_get_rx_buffer(rx_ring,size);
    #line 8345 
    if (skb != (struct sk_buff *)0) 
                                    #line 8346 
                                    igb_add_rx_frag(rx_ring,rx_buffer,skb,size);
    else {
      #line 8347 
      if ((int)test_bit(1L,& rx_ring->flags) != 0) 
                                                   #line 8348 
                                                   skb = igb_build_skb(rx_ring,rx_buffer,rx_desc,size); else 
                                                                    #line 8350 
                                                                    skb = igb_construct_skb(rx_ring,rx_buffer,rx_desc,size);
    }
    #line 8354 
    if (skb == (struct sk_buff *)0) {
      #line 8355 
      (rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.alloc_failed) ++;
      #line 8356 
      rx_buffer->pagecnt_bias = (__u16)((int)rx_buffer->pagecnt_bias + 1);
      #line 8357 
      break;
    }
    #line 8360 
    igb_put_rx_buffer(rx_ring,rx_buffer);
    #line 8361 
    cleaned_count = (u16)((int)cleaned_count + 1);
    #line 8364 
    if ((int)igb_is_non_eop(rx_ring,rx_desc) != 0) 
                                                   #line 8365 
                                                   continue;
    #line 8368 
    if ((int)igb_cleanup_headers(rx_ring,rx_desc,skb) != 0) {
      #line 8369 
      skb = (struct sk_buff *)0;
      #line 8370 
      continue;
    }
    #line 8374 
    total_bytes = skb->len + total_bytes;
    #line 8377 
    igb_process_skb_fields(rx_ring,rx_desc,skb);
    #line 8379 
    napi_gro_receive(& q_vector->napi,skb);
    #line 8382 
    skb = (struct sk_buff *)0;
    #line 8385 
    total_packets ++;
  }
  #line 8389 
  rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.skb = skb;
  #line 8391 
  u64_stats_init(& rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_syncp);
  #line 8392 
  rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.packets += (unsigned long long)total_packets;
  #line 8393 
  rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.bytes += (unsigned long long)total_bytes;
  #line 8394 
  u64_stats_init(& rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_syncp);
  #line 8395 
  q_vector->rx.total_packets += total_packets;
  #line 8396 
  q_vector->rx.total_bytes += total_bytes;
  #line 8398 
  if ((unsigned int)cleaned_count != 0U) 
                                         #line 8399 
                                         igb_alloc_rx_buffers(rx_ring,(unsigned short)((int)cleaned_count));
  #line 8401 
  return (int)total_packets;
}

#line 8404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static unsigned int igb_rx_offset(struct igb_ring *rx_ring)
{
  #line 8406 
  unsigned int tmp_0;
  #line 8406 
  if ((int)test_bit(1L,& rx_ring->flags) != 0) 
                                               #line 8406 
                                               tmp_0 = 64U; else 
                                                                 #line 8406 
                                                                 tmp_0 = 0U;
  #line 8406 
  return tmp_0;
}

#line 8409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_alloc_mapped_page(struct igb_ring *rx_ring, struct igb_rx_buffer *bi)
{
  #line 8413 
  dma_addr_t dma;
  #line 8412 
  struct page *page = bi->page;
  #line 8416 
  if ((long)(page != (struct page *)0) != 0L) 
                                              #line 8417 
                                              return (_Bool)1;
  #line 8420 
  page = dev_alloc_pages(igb_rx_pg_order(rx_ring));
  #line 8421 
  if ((long)(page == (struct page *)0) != 0L) {
    #line 8422 
    (rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.alloc_failed) ++;
    #line 8423 
    return (_Bool)0;
  }
  #line 8427 
  ;
  #line 8427 
  ;
  #line 8427 
  dma = dma_map_page_attrs(rx_ring->dev,page,0UL,4096UL << igb_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
  #line 8435 
  if (dma_mapping_error(rx_ring->dev,dma) != 0) {
    #line 8436 
    ;
    #line 8436 
    __free_pages(page,igb_rx_pg_order(rx_ring));
    #line 8438 
    (rx_ring->__anonCompField_igb_ring_169.__anonCompField___anonunion_728_168.rx_stats.alloc_failed) ++;
    #line 8439 
    return (_Bool)0;
  }
  #line 8442 
  bi->dma = dma;
  #line 8443 
  bi->page = page;
  #line 8444 
  bi->page_offset = igb_rx_offset(rx_ring);
  #line 8445 
  bi->pagecnt_bias = (unsigned short)1U;
  #line 8447 
  return (_Bool)1;
}

#line 8454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_alloc_rx_buffers(struct igb_ring *rx_ring, u16 cleaned_count)
{
  #line 8456 
  union e1000_adv_rx_desc *rx_desc;
  #line 8457 
  struct igb_rx_buffer *bi;
  #line 8459 
  u16 bufsz;
  #line 8458 
  u16 i = rx_ring->next_to_use;
  #line 8462 
  if ((unsigned int)cleaned_count == 0U) 
                                         #line 8463 
                                         return;
  #line 8465 
  rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (unsigned long)i;
  #line 8466 
  bi = rx_ring->__anonCompField_igb_ring_166.rx_buffer_info + (unsigned long)i;
  #line 8467 
  i = (unsigned short)((int)i - (int)rx_ring->count);
  #line 8469 
  bufsz = (unsigned short)igb_rx_bufsz(rx_ring);
  #line 8471 
  while (1) {
    {
      #line 8472 
      if (! igb_alloc_mapped_page(rx_ring,bi)) 
                                               #line 8473 
                                               break;
      #line 8476 
      dma_sync_single_range_for_device(rx_ring->dev,bi->dma,(unsigned long)bi->page_offset,(unsigned long)bufsz,(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 8483 
      rx_desc->read.pkt_addr = bi->dma + (unsigned long long)bi->page_offset;
      #line 8485 
      rx_desc ++;
      #line 8486 
      bi ++;
      #line 8487 
      i = (u16)((int)i + 1);
      #line 8488 
      if ((long)((unsigned int)i == 0U) != 0L) {
        #line 8489 
        rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc;
        #line 8490 
        bi = rx_ring->__anonCompField_igb_ring_166.rx_buffer_info;
        #line 8491 
        i = (unsigned short)((int)i - (int)rx_ring->count);
      }
      #line 8495 
      rx_desc->wb.upper.length = (unsigned short)0U;
      #line 8497 
      cleaned_count = (u16)((int)cleaned_count - 1);
    }
    #line 8498 
    if (! ((unsigned int)cleaned_count != 0U)) 
                                               #line 8471 
                                               break;
  }
  #line 8500 
  i = (unsigned short)((int)rx_ring->count + (int)i);
  #line 8502 
  if ((int)rx_ring->next_to_use != (int)i) {
    #line 8504 
    rx_ring->next_to_use = i;
    #line 8507 
    rx_ring->next_to_alloc = i;
    #line 8508 
    ldv_inline_asm();
    #line 8515 
    writel((unsigned int)i,rx_ring->tail);
  }
  #line 8517 
  return;
}

#line 8525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_mii_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  #line 8527 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 8528 
  struct mii_ioctl_data *data = if_mii(ifr);
  #line 8530 
  if (adapter->hw.phy.media_type != (unsigned int)e1000_media_type_copper) 
    #line 8531 
    return -95;
  #line 8533 
  switch (cmd) {
    #line 8534 
    case 35143: 
                #line 8534 
    ;
    #line 8535 
    data->phy_id = (unsigned short)adapter->hw.phy.addr;
    #line 8536 
    break;
    #line 8537 
    case 35144: 
                #line 8537 
    ;
    #line 8538 
    if (igb_read_phy_reg(& adapter->hw,(unsigned int)data->reg_num & 31U,
                         & data->val_out) != 0) 
      #line 8540 
      return -5;
    #line 8541 
    break;
    #line 8542 
    case 35145: 
                #line 8542 
    ;
    #line 8543 
    default: 
             #line 8543 
    ;
    #line 8544 
    return -95;
  }
  #line 8546 
  return 0;
}

#line 8555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  #line 8557 
  switch (cmd) {
    #line 8558 
    case 35143: 
                #line 8558 
    ;
    #line 8559 
    case 35144: 
                #line 8559 
    ;
    #line 8560 
    case 35145: 
                #line 8560 
    ;
    #line 8561 
    return igb_mii_ioctl(netdev,ifr,cmd);
    #line 8562 
    case 35249: 
                #line 8562 
    ;
    #line 8563 
    return igb_ptp_get_ts_config(netdev,ifr);
    #line 8564 
    case 35248: 
                #line 8564 
    ;
    #line 8565 
    return igb_ptp_set_ts_config(netdev,ifr);
    #line 8566 
    default: 
             #line 8566 
    ;
    #line 8567 
    return -95;
  }
}

#line 8571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_read_pci_cfg(struct e1000_hw *hw, u32 reg, u16 *value)
{
  #line 8573 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  #line 8575 
  pci_read_config_word(adapter->pdev,(int)reg,value);
  #line 8576 
  return;
}

#line 8578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_write_pci_cfg(struct e1000_hw *hw, u32 reg, u16 *value)
{
  #line 8580 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  #line 8582 
  pci_write_config_word(adapter->pdev,(int)reg,(unsigned short)((int)*value));
  #line 8583 
  return;
}

#line 8585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_read_pcie_cap_reg(struct e1000_hw *hw, u32 reg, u16 *value)
{
  #line 8587 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  #line 8589 
  if (pcie_capability_read_word(adapter->pdev,(int)reg,value) != 0) 
                                                                    #line 8590 
                                                                    return -3;
  #line 8592 
  return 0;
}

#line 8595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_write_pcie_cap_reg(struct e1000_hw *hw, u32 reg, u16 *value)
{
  #line 8597 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  #line 8599 
  if (pcie_capability_write_word(adapter->pdev,(int)reg,
                                 (unsigned short)((int)*value)) != 0) 
    #line 8600 
    return -3;
  #line 8602 
  return 0;
}

#line 8605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_vlan_mode(struct net_device *netdev, netdev_features_t features)
{
  #line 8609 
  u32 ctrl;
  #line 8609 
  u32 rctl;
  #line 8607 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 8608 
  struct e1000_hw *hw = & adapter->hw;
  #line 8610 
  bool enable = (_Bool)((features & 256ULL) != 0ULL);
  #line 8612 
  if ((int)enable != 0) {
    #line 8614 
    ctrl = igb_rd32(hw,0U);
    #line 8615 
    ctrl |= 1073741824U;
    {
      #line 8617 
      union __anonunion___u_3517 __u;
      #line 8616 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 8616 
      u8 *hw_addr = (__u.__val);
      #line 8616 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 8616 
                                             writel(ctrl,(void *)hw_addr);
    }
    #line 8619 
    rctl = igb_rd32(hw,256U);
    #line 8620 
    rctl &= 4294443007U;
    {
      #line 8622 
      union __anonunion___u_3519 __u_0;
      #line 8621 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 8621 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 8621 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 8621 
                                               writel(rctl,(void *)(hw_addr_0 + 256U));
    }
  }
  else {
    #line 8624 
    ctrl = igb_rd32(hw,0U);
    #line 8625 
    ctrl &= 3221225471U;
    {
      #line 8627 
      union __anonunion___u_3521 __u_1;
      #line 8626 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 8626 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 8626 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 8626 
                                               writel(ctrl,(void *)hw_addr_1);
    }
  }
  #line 8629 
  igb_set_vf_vlan_strip(adapter,(int)adapter->vfs_allocated_count,(_Bool)((bool)((int)enable) != 0));
  #line 8630 
  return;
}

#line 8632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 8635 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 8636 
  struct e1000_hw *hw = & adapter->hw;
  #line 8637 
  int pf_id = (int)adapter->vfs_allocated_count;
  #line 8640 
  if ((unsigned int)vid == 0U || ((unsigned long)adapter->flags & 32768UL) == 0UL) 
    #line 8641 
    igb_vfta_set(hw,(unsigned int)vid,(unsigned int)pf_id,(_Bool)1,(_Bool)((unsigned int)vid != 0U));
  #line 8643 
  cif_set_bit_0((long)vid,(unsigned long *)(& adapter->active_vlans));
  #line 8645 
  return 0;
}

#line 8648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 8651 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 8652 
  int pf_id = (int)adapter->vfs_allocated_count;
  #line 8653 
  struct e1000_hw *hw = & adapter->hw;
  #line 8656 
  if ((unsigned int)vid != 0U && ((unsigned long)adapter->flags & 32768UL) == 0UL) 
    #line 8657 
    igb_vfta_set(hw,(unsigned int)vid,(unsigned int)pf_id,(_Bool)0,(_Bool)1);
  #line 8659 
  cif_clear_bit_0((long)vid,(unsigned long *)(& adapter->active_vlans));
  #line 8661 
  return 0;
}

#line 8664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_restore_vlan(struct igb_adapter *adapter)
{
  #line 8666 
  u16 vid = (unsigned short)1U;
  #line 8668 
  igb_vlan_mode(adapter->netdev,(adapter->netdev)->features);
  #line 8669 
  igb_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)0);
  #line 8671 
  vid = (unsigned short)cif_find_next_bit((unsigned long *)(& adapter->active_vlans),4096UL,
                        (unsigned long)vid);
  #line 8671 
  while ((unsigned int)vid <= 4095U) {
    #line 8672 
    igb_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)((int)vid));
    #line 8671 
    vid = (unsigned short)cif_find_next_bit((unsigned long *)(& adapter->active_vlans),4096UL,
                          (unsigned long)((int)vid + 1));
  }
  #line 8673 
  return;
}

#line 8675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_set_spd_dplx(struct igb_adapter *adapter, u32 spd, u8 dplx)
{
  #line 8677 
  struct pci_dev *pdev = adapter->pdev;
  #line 8678 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  #line 8680 
  mac->autoneg = (_Bool)0;
  #line 8685 
  if ((spd & 1U) != 0U || ((int)dplx & -2) != 0) 
                                                 #line 8686 
                                                 goto err_inval;
  #line 8691 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_internal_serdes) 
    #line 8692 
    switch ((unsigned int)dplx + spd) {
      #line 8693 
      case (unsigned int)10: 
                             #line 8693 
      ;
      #line 8694 
      case (unsigned int)11: 
                             #line 8694 
      ;
      #line 8695 
      case (unsigned int)100: 
                              #line 8695 
      ;
      #line 8696 
      goto err_inval;
      #line 8697 
      default: 
               #line 8697 
      ;
      #line 8698 
      break;
    }
  #line 8702 
  switch ((unsigned int)dplx + spd) {
    #line 8703 
    case (unsigned int)10: 
                           #line 8703 
    ;
    #line 8704 
    mac->forced_speed_duplex = (unsigned char)1U;
    #line 8705 
    break;
    #line 8706 
    case (unsigned int)11: 
                           #line 8706 
    ;
    #line 8707 
    mac->forced_speed_duplex = (unsigned char)2U;
    #line 8708 
    break;
    #line 8709 
    case (unsigned int)100: 
                            #line 8709 
    ;
    #line 8710 
    mac->forced_speed_duplex = (unsigned char)4U;
    #line 8711 
    break;
    #line 8712 
    case (unsigned int)101: 
                            #line 8712 
    ;
    #line 8713 
    mac->forced_speed_duplex = (unsigned char)8U;
    #line 8714 
    break;
    #line 8715 
    case (unsigned int)1001: 
                             #line 8715 
    ;
    #line 8716 
    mac->autoneg = (_Bool)1;
    #line 8717 
    adapter->hw.phy.autoneg_advertised = (unsigned short)32U;
    #line 8718 
    break;
    #line 8719 
    case (unsigned int)1000: 
                             #line 8719 
    ;
    #line 8720 
    default: 
             #line 8720 
    ;
    #line 8721 
    goto err_inval;
  }
  #line 8725 
  adapter->hw.phy.mdix = (unsigned char)0U;
  #line 8727 
  return 0;
  #line 8729 
  err_inval: 
             #line 8729 
  ;
  #line 8730 
  _dev_err(& pdev->dev,(char *)"Unsupported Speed/Duplex configuration\n");
  #line 8731 
  return -22;
}

#line 8734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_shutdown(struct pci_dev *pdev, bool *enable_wake, bool runtime)
{
  #line 8740 
  u32 ctrl;
  #line 8740 
  u32 rctl;
  #line 8740 
  u32 status;
  #line 8741 
  unsigned int tmp_1;
  #line 8742 
  bool wake;
  #line 8737 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 8738 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 8739 
  struct e1000_hw *hw = & adapter->hw;
  #line 8741 
  if (runtime) 
               #line 8741 
               tmp_1 = 1U; else 
                                #line 8741 
                                tmp_1 = adapter->wol;
  #line 8741 
  u32 wufc = tmp_1;
  #line 8744 
  rtnl_lock();
  #line 8745 
  netif_device_detach(netdev);
  #line 8747 
  if ((int)netif_running(netdev) != 0) 
                                       #line 8748 
                                       __igb_close(netdev,(_Bool)1);
  #line 8750 
  igb_ptp_suspend(adapter);
  #line 8752 
  igb_clear_interrupt_scheme(adapter);
  #line 8753 
  rtnl_unlock();
  #line 8755 
  status = igb_rd32(hw,8U);
  #line 8756 
  if ((status & 2U) != 0U) 
                           #line 8757 
                           wufc &= 4294967294U;
  #line 8759 
  if (wufc != 0U) {
    #line 8760 
    igb_setup_rctl(adapter);
    #line 8761 
    igb_set_rx_mode(netdev);
    #line 8764 
    if ((wufc & 8U) != 0U) {
      #line 8765 
      rctl = igb_rd32(hw,256U);
      #line 8766 
      rctl |= 16U;
      {
        #line 8768 
        union __anonunion___u_3523 __u;
        #line 8767 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 8767 
        u8 *hw_addr = (__u.__val);
        #line 8767 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 8767 
                                               writel(rctl,(void *)(hw_addr + 256U));
      }
    }
    #line 8770 
    ctrl = igb_rd32(hw,0U);
    #line 8771 
    ctrl |= 1048576U;
    {
      #line 8773 
      union __anonunion___u_3525 __u_0;
      #line 8772 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 8772 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 8772 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 8772 
                                               writel(ctrl,(void *)hw_addr_0);
    }
    #line 8775 
    igb_disable_pcie_master(hw);
    {
      #line 8778 
      union __anonunion___u_3527 __u_1;
      #line 8777 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 8777 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 8777 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 8777 
                                               writel(2U,(void *)(hw_addr_1 + 22528U));
    }
    {
      #line 8779 
      union __anonunion___u_3529 __u_2;
      #line 8778 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 8778 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 8778 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                               #line 8778 
                                               writel(wufc,(void *)(hw_addr_2 + 22536U));
    }
  }
  else {
    {
      #line 8781 
      union __anonunion___u_3531 __u_3;
      #line 8780 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 8780 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 8780 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 8780 
                                               writel(0U,(void *)(hw_addr_3 + 22528U));
    }
    {
      #line 8782 
      union __anonunion___u_3533 __u_4;
      #line 8781 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 8781 
      u8 *hw_addr_4 = (__u_4.__val);
      #line 8781 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                               #line 8781 
                                               writel(0U,(void *)(hw_addr_4 + 22536U));
    }
  }
  #line 8784 
  wake = (_Bool)((wufc != 0U || adapter->en_mng_pt != 0U) != 0);
  #line 8785 
  if (! wake) 
              #line 8786 
              igb_power_down_link(adapter); else 
                                                 #line 8788 
                                                 igb_power_up_link(adapter);
  #line 8790 
  if (enable_wake != (bool *)0) 
                                #line 8791 
                                *enable_wake = wake;
  #line 8796 
  igb_release_hw_control(adapter);
  #line 8798 
  pci_disable_device(pdev);
  #line 8800 
  return 0;
}

#line 8803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_deliver_wake_packet(struct net_device *netdev)
{
  #line 8825 
  int __y;
  #line 8807 
  struct sk_buff *skb;
  #line 8808 
  u32 wupl;
  #line 8805 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 8806 
  struct e1000_hw *hw = & adapter->hw;
  #line 8810 
  wupl = igb_rd32(hw,22784U) & 4095U;
  #line 8815 
  if (wupl + 4294967295U > 127U) 
                                 #line 8816 
                                 return;
  #line 8818 
  skb = netdev_alloc_skb_ip_align(netdev,128U);
  #line 8819 
  if (skb == (struct sk_buff *)0) 
                                  #line 8820 
                                  return;
  #line 8822 
  skb_put(skb,wupl);
  #line 8825 
  __y = 4;
  #line 8825 
  wupl = (((((unsigned int)__y + wupl) + 4294967295U) / (unsigned int)__y) * (unsigned int)__y);
  #line 8827 
  memcpy_fromio((void *)skb->data,(void *)(hw->hw_addr + 23040U),(unsigned long)wupl);
  #line 8829 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 8830 
  netif_rx(skb);
  #line 8831 
  return;
}

#line 8833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_suspend(struct device *dev)
{
  #line 8835 
  void *__mptr;
  #line 8835 
  __mptr = (void *)dev;
  #line 8835 
  return __igb_shutdown(((struct pci_dev *)(__mptr + 18446744073709551440U)),
                       (bool *)0,(_Bool)0);
}

#line 8838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_resume(struct device *dev)
{
  #line 8840 
  void *__mptr;
  #line 8844 
  u32 err;
  #line 8844 
  u32 val;
  #line 8840 
  __mptr = (void *)dev;
  #line 8840 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 8841 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 8842 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 8843 
  struct e1000_hw *hw = & adapter->hw;
  #line 8846 
  pci_set_power_state(pdev,0);
  #line 8847 
  pci_restore_state(pdev);
  #line 8848 
  pci_save_state(pdev);
  #line 8850 
  if (! pci_device_is_present(pdev)) 
                                     #line 8851 
                                     return -19;
  #line 8852 
  err = (unsigned int)pci_enable_device_mem(pdev);
  #line 8853 
  if (err != 0U) {
    #line 8854 
    _dev_err(& pdev->dev,(char *)"igb: Cannot enable PCI device from suspend\n");
    #line 8856 
    return (int)err;
  }
  #line 8858 
  pci_set_master(pdev);
  #line 8860 
  pci_enable_wake(pdev,3,(_Bool)0);
  #line 8861 
  pci_enable_wake(pdev,4,(_Bool)0);
  #line 8863 
  if (igb_init_interrupt_scheme(adapter,(_Bool)1) != 0) {
    #line 8864 
    _dev_err(& pdev->dev,(char *)"Unable to allocate memory for queues\n");
    #line 8865 
    return -12;
  }
  #line 8868 
  igb_reset(adapter);
  #line 8873 
  igb_get_hw_control(adapter);
  #line 8875 
  val = igb_rd32(hw,22544U);
  #line 8876 
  if ((val & 1252U) != 0U) 
                           #line 8877 
                           igb_deliver_wake_packet(netdev);
  {
    #line 8880 
    union __anonunion___u_3535 __u;
    #line 8879 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 8879 
    u8 *hw_addr = (__u.__val);
    #line 8879 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 8879 
                                           writel(4294967295U,(void *)(hw_addr + 22544U));
  }
  #line 8881 
  rtnl_lock();
  #line 8882 
  if (err == 0U) {
    #line 8882 
    if ((int)netif_running(netdev) != 0) {
      #line 8883 
      err = (unsigned int)__igb_open(netdev,(_Bool)1);
    }
  }
  #line 8885 
  if (err == 0U) 
                 #line 8886 
                 netif_device_attach(netdev);
  #line 8887 
  rtnl_unlock();
  #line 8889 
  return (int)err;
}

#line 8892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_runtime_idle(struct device *dev)
{
  #line 8894 
  struct net_device *netdev = dev_get_drvdata(dev);
  #line 8895 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 8897 
  if (! igb_has_link(adapter)) 
                               #line 8898 
                               pm_schedule_suspend(dev,5000U);
  #line 8900 
  return -16;
}

#line 8903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_runtime_suspend(struct device *dev)
{
  #line 8905 
  void *__mptr;
  #line 8905 
  __mptr = (void *)dev;
  #line 8905 
  return __igb_shutdown(((struct pci_dev *)(__mptr + 18446744073709551440U)),
                       (bool *)0,(_Bool)1);
}

#line 8908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_runtime_resume(struct device *dev)
{
  #line 8910 
  return igb_resume(dev);
}

#line 8913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_shutdown(struct pci_dev *pdev)
{
  #line 8915 
  bool wake;
  #line 8917 
  __igb_shutdown(pdev,& wake,(_Bool)0);
  #line 8919 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) {
    #line 8920 
    pci_wake_from_d3(pdev,(_Bool)((bool)((int)wake) != 0));
    #line 8921 
    pci_set_power_state(pdev,3);
  }
  #line 8923 
  return;
}

#line 8926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_sriov_reinit(struct pci_dev *dev)
{
  #line 8928 
  struct net_device *netdev = pci_get_drvdata(dev);
  #line 8929 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 8930 
  struct pci_dev *pdev = adapter->pdev;
  #line 8932 
  rtnl_lock();
  #line 8934 
  if ((int)netif_running(netdev) != 0) 
                                       #line 8935 
                                       igb_close(netdev); else 
                                                               #line 8937 
                                                               igb_reset(adapter);
  #line 8939 
  igb_clear_interrupt_scheme(adapter);
  #line 8941 
  igb_init_queue_configuration(adapter);
  #line 8943 
  if (igb_init_interrupt_scheme(adapter,(_Bool)1) != 0) {
    #line 8944 
    rtnl_unlock();
    #line 8945 
    _dev_err(& pdev->dev,(char *)"Unable to allocate memory for queues\n");
    #line 8946 
    return -12;
  }
  #line 8949 
  if ((int)netif_running(netdev) != 0) 
                                       #line 8950 
                                       igb_open(netdev);
  #line 8952 
  rtnl_unlock();
  #line 8954 
  return 0;
}

#line 8957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_pci_disable_sriov(struct pci_dev *dev)
{
  #line 8959 
  int err = igb_disable_sriov(dev);
  #line 8961 
  if (err == 0) 
                #line 8962 
                err = igb_sriov_reinit(dev);
  #line 8964 
  return err;
}

#line 8967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_pci_enable_sriov(struct pci_dev *dev, int num_vfs)
{
  #line 8969 
  int err = igb_enable_sriov(dev,num_vfs);
  #line 8971 
  if (err != 0) 
                #line 8972 
                goto out;
  #line 8974 
  err = igb_sriov_reinit(dev);
  #line 8975 
  if (err == 0) 
                #line 8976 
                return num_vfs;
  #line 8978 
  out: 
       #line 8978 
  ;
  #line 8979 
  return err;
}

#line 8983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_pci_sriov_configure(struct pci_dev *dev, int num_vfs)
{
  #line 8986 
  if (num_vfs == 0) {
    #line 8987 
    return igb_pci_disable_sriov(dev);
  }
  else {
    #line 8989 
    return igb_pci_enable_sriov(dev,num_vfs);
  }
  #line 8991 
  return 0;
}

#line 9002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static pci_ers_result_t igb_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 9005 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 9006 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 9008 
  netif_device_detach(netdev);
  #line 9010 
  if (state == 3U) 
                   #line 9011 
                   return 4U;
  #line 9013 
  if ((int)netif_running(netdev) != 0) 
                                       #line 9014 
                                       igb_down(adapter);
  #line 9015 
  pci_disable_device(pdev);
  #line 9018 
  return 3U;
}

#line 9028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static pci_ers_result_t igb_io_slot_reset(struct pci_dev *pdev)
{
  #line 9033 
  pci_ers_result_t result;
  #line 9030 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 9031 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 9032 
  struct e1000_hw *hw = & adapter->hw;
  #line 9035 
  if (pci_enable_device_mem(pdev) != 0) {
    #line 9036 
    _dev_err(& pdev->dev,(char *)"Cannot re-enable PCI device after reset.\n");
    #line 9038 
    result = 4U;
  }
  else {
    #line 9040 
    pci_set_master(pdev);
    #line 9041 
    pci_restore_state(pdev);
    #line 9042 
    pci_save_state(pdev);
    #line 9044 
    pci_enable_wake(pdev,3,(_Bool)0);
    #line 9045 
    pci_enable_wake(pdev,4,(_Bool)0);
    #line 9050 
    hw->hw_addr = adapter->io_addr;
    #line 9052 
    igb_reset(adapter);
    {
      #line 9054 
      union __anonunion___u_3537 __u;
      #line 9053 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 9053 
      u8 *hw_addr = (__u.__val);
      #line 9053 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 9053 
                                             writel(4294967295U,(void *)(hw_addr + 22544U));
    }
    #line 9054 
    result = 5U;
  }
  #line 9057 
  return result;
}

#line 9068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_io_resume(struct pci_dev *pdev)
{
  #line 9070 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 9071 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 9073 
  if ((int)netif_running(netdev) != 0) {
    #line 9074 
    if (igb_up(adapter) != 0) {
      #line 9075 
      _dev_err(& pdev->dev,(char *)"igb_up failed after reset\n");
      #line 9076 
      return;
    }
  }
  #line 9080 
  netif_device_attach(netdev);
  #line 9085 
  igb_get_hw_control(adapter);
  #line 9086 
  return;
}

#line 9093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_rar_set_index(struct igb_adapter *adapter, u32 index)
{
  #line 9096 
  u32 rar_low;
  #line 9096 
  u32 rar_high;
  #line 9095 
  struct e1000_hw *hw = & adapter->hw;
  #line 9097 
  u8 *addr = (u8 *)(& (adapter->mac_table + (unsigned long)index)->addr);
  #line 9104 
  rar_low = __le32_to_cpup((__le32 *)addr);
  #line 9105 
  rar_high = (unsigned int)__le16_to_cpup((__le16 *)(addr + 4U));
  #line 9108 
  if (((int)(adapter->mac_table + (unsigned long)index)->state & 2) != 0) {
    #line 9109 
    if ((int)is_valid_ether_addr(addr) != 0) 
                                             #line 9110 
                                             rar_high |= 2147483648U;
    #line 9112 
    if (((int)(adapter->mac_table + (unsigned long)index)->state & 4) != 0) 
      #line 9113 
      rar_high |= 65536U;
    #line 9115 
    switch ((unsigned int)hw->mac.type) {
      #line 9116 
      case (unsigned int)1: 
                            #line 9116 
      ;
      #line 9117 
      case (unsigned int)6: 
                            #line 9117 
      ;
      #line 9118 
      if (((int)(adapter->mac_table + (unsigned long)index)->state & 8) != 0) 
        #line 9120 
        rar_high |= 268435456U;
      #line 9122 
      rar_high = (unsigned int)((int)(adapter->mac_table + (unsigned long)index)->queue * 262144) | rar_high;
      #line 9124 
      break;
      #line 9125 
      default: 
               #line 9125 
      ;
      #line 9126 
      rar_high = (unsigned int)(262144 << (int)(adapter->mac_table + (unsigned long)index)->queue) | rar_high;
      #line 9128 
      break;
    }
  }
  {
    #line 9133 
    union __anonunion___u_3539 __u;
    #line 9132 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 9132 
    u8 *hw_addr = (__u.__val);
    #line 9132 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      #line 9132 
      u32 tmp_2;
      #line 9132 
      if (index <= 15U) 
                        #line 9132 
                        tmp_2 = (index + 2688U) * 8U; else 
                                                           #line 9132 
                                                           tmp_2 = (index + 2700U) * 8U;
      #line 9132 
      ;
      #line 9132 
      ;
      #line 9132 
      writel(rar_low,(void *)(hw_addr + (unsigned long)tmp_2));
    }
  }
  #line 9133 
  igb_rd32(hw,8U);
  {
    #line 9135 
    union __anonunion___u_3541 __u_0;
    #line 9134 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 9134 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 9134 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      #line 9134 
      u32 tmp_4;
      #line 9134 
      if (index <= 15U) 
                        #line 9134 
                        tmp_4 = index * 8U + 21508U; else 
                                                          #line 9134 
                                                          tmp_4 = (index + 4294967280U) * 8U + 21732U;
      #line 9134 
      ;
      #line 9134 
      ;
      #line 9134 
      writel(rar_high,(void *)(hw_addr_0 + (unsigned long)tmp_4));
    }
  }
  #line 9135 
  igb_rd32(hw,8U);
  #line 9136 
  return;
}

#line 9138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_mac(struct igb_adapter *adapter, int vf, unsigned char *mac_addr)
{
  #line 9141 
  struct e1000_hw *hw = & adapter->hw;
  #line 9145 
  int rar_entry = (int)hw->mac.rar_entry_count - (vf + 1);
  #line 9146 
  unsigned char *vf_mac_addr = (unsigned char *)(& (adapter->vf_data + (unsigned long)vf)->vf_mac_addresses);
  #line 9148 
  ether_addr_copy(vf_mac_addr,mac_addr);
  #line 9149 
  ether_addr_copy((u8 *)(& (adapter->mac_table + (unsigned long)rar_entry)->addr),mac_addr);
  #line 9150 
  (adapter->mac_table + (unsigned long)rar_entry)->queue = (unsigned char)vf;
  #line 9151 
  (adapter->mac_table + (unsigned long)rar_entry)->state = (unsigned char)((unsigned int)(adapter->mac_table + (unsigned long)rar_entry)->state | 2U);
  #line 9152 
  igb_rar_set_index(adapter,(unsigned int)rar_entry);
  #line 9154 
  return 0;
}

#line 9157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_set_vf_mac(struct net_device *netdev, int vf, u8 *mac)
{
  #line 9159 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 9161 
  if (adapter->vfs_allocated_count <= (unsigned int)vf) 
                                                        #line 9162 
                                                        return -22;
  #line 9170 
  if ((int)is_zero_ether_addr(mac) != 0) {
    #line 9171 
    (adapter->vf_data + (unsigned long)vf)->flags &= 4294967287U;
    #line 9172 
    _dev_info(& (adapter->pdev)->dev,(char *)"remove administratively set MAC on VF %d\n",vf);
  }
  else {
    #line 9175 
    if ((int)is_valid_ether_addr(mac) != 0) {
      #line 9176 
      (adapter->vf_data + (unsigned long)vf)->flags |= 8U;
      #line 9177 
      _dev_info(& (adapter->pdev)->dev,(char *)"setting MAC %pM on VF %d\n",mac,vf);
      #line 9179 
      _dev_info(& (adapter->pdev)->dev,(char *)"Reload the VF driver to make this change effective.");
      #line 9182 
      if ((int)test_bit(2L,& adapter->state) != 0) {
        #line 9183 
        _dev_warn(& (adapter->pdev)->dev,(char *)"The VF MAC address has been set, but the PF device is not up.\n");
        #line 9185 
        _dev_warn(& (adapter->pdev)->dev,(char *)"Bring the PF device up before attempting to use the VF device.\n");
      }
    }
    else 
         #line 9189 
         return -22;
  }
  #line 9191 
  return igb_set_vf_mac(adapter,vf,mac);
}

#line 9194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_link_mbps(int internal_link_speed)
{
  #line 9196 
  switch (internal_link_speed) {
    #line 9197 
    case 100: 
              #line 9197 
    ;
    #line 9198 
    return 100;
    #line 9199 
    case 1000: 
               #line 9199 
    ;
    #line 9200 
    return 1000;
    #line 9201 
    default: 
             #line 9201 
    ;
    #line 9202 
    return 0;
  }
}

#line 9206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_vf_rate_limit(struct e1000_hw *hw, int vf, int tx_rate, int link_speed)
{
  #line 9209 
  int rf_dec;
  #line 9209 
  int rf_int;
  #line 9210 
  u32 bcnrc_val;
  #line 9212 
  if (tx_rate != 0) {
    #line 9214 
    rf_int = link_speed / tx_rate;
    #line 9215 
    rf_dec = link_speed - rf_int * tx_rate;
    #line 9216 
    rf_dec = (int)(((unsigned long)rf_dec * 16384UL) / (unsigned long)tx_rate);
    #line 9219 
    bcnrc_val = 2147483648U;
    #line 9220 
    bcnrc_val = ((unsigned int)(rf_int << 14) & 268419072U) | bcnrc_val;
    #line 9222 
    bcnrc_val = ((unsigned int)rf_dec & 16383U) | bcnrc_val;
  }
  else 
       #line 9224 
       bcnrc_val = 0U;
  {
    #line 9228 
    union __anonunion___u_3543 __u;
    #line 9227 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 9227 
    u8 *hw_addr = (__u.__val);
    #line 9227 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 9227 
                                           writel((unsigned int)vf,(void *)(hw_addr + 13828U));
  }
  {
    #line 9232 
    union __anonunion___u_3545 __u_0;
    #line 9231 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 9231 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 9231 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 9231 
                                             writel(20U,(void *)(hw_addr_0 + 13968U));
  }
  {
    #line 9233 
    union __anonunion___u_3547 __u_1;
    #line 9232 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 9232 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 9232 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 9232 
                                             writel(bcnrc_val,(void *)(hw_addr_1 + 14000U));
  }
  #line 9234 
  return;
}

#line 9235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_check_vf_rate_limit(struct igb_adapter *adapter)
{
  #line 9237 
  int actual_link_speed;
  #line 9237 
  int i;
  #line 9238 
  bool reset_rate = (_Bool)0;
  #line 9241 
  if (adapter->vf_rate_link_speed == 0 || adapter->hw.mac.type != (unsigned int)e1000_82576) 
    #line 9243 
    return;
  #line 9245 
  actual_link_speed = igb_link_mbps((int)adapter->link_speed);
  #line 9246 
  if (adapter->vf_rate_link_speed != actual_link_speed) {
    #line 9247 
    reset_rate = (_Bool)1;
    #line 9248 
    adapter->vf_rate_link_speed = 0;
    #line 9249 
    _dev_info(& (adapter->pdev)->dev,(char *)"Link speed has been changed. VF Transmit rate is disabled\n");
  }
  #line 9253 
  i = 0;
  #line 9253 
  while (adapter->vfs_allocated_count > (unsigned int)i) {
    #line 9254 
    if ((int)reset_rate != 0) 
                              #line 9255 
                              (adapter->vf_data + (unsigned long)i)->tx_rate = (unsigned short)0U;
    #line 9257 
    igb_set_vf_rate_limit(& adapter->hw,i,(int)(adapter->vf_data + (unsigned long)i)->tx_rate,actual_link_speed);
    #line 9253 
    i ++;
  }
  #line 9260 
  return;
}

#line 9263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_set_vf_bw(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate)
{
  #line 9268 
  int actual_link_speed;
  #line 9266 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 9267 
  struct e1000_hw *hw = & adapter->hw;
  #line 9270 
  if (hw->mac.type != (unsigned int)e1000_82576) 
                                                 #line 9271 
                                                 return -95;
  #line 9273 
  if (min_tx_rate != 0) 
                        #line 9274 
                        return -22;
  #line 9276 
  actual_link_speed = igb_link_mbps((int)adapter->link_speed);
  #line 9277 
  if (adapter->vfs_allocated_count <= (unsigned int)vf) 
                                                        #line 9281 
                                                        return -22;
  else {
    #line 9277 
    if ((igb_rd32(hw,8U) & 2U) == 0U) 
                                      #line 9281 
                                      return -22;
    else 
      #line 9279 
      if (max_tx_rate < 0 || max_tx_rate > actual_link_speed) 
                                                              #line 9281 
                                                              return -22;
  }
  #line 9283 
  adapter->vf_rate_link_speed = actual_link_speed;
  #line 9284 
  (adapter->vf_data + (unsigned long)vf)->tx_rate = (unsigned short)max_tx_rate;
  #line 9285 
  igb_set_vf_rate_limit(hw,vf,max_tx_rate,actual_link_speed);
  #line 9287 
  return 0;
}

#line 9290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_set_vf_spoofchk(struct net_device *netdev, int vf, bool setting)
{
  #line 9295 
  u32 reg_val;
  #line 9295 
  u32 reg_offset;
  #line 9293 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 9294 
  struct e1000_hw *hw = & adapter->hw;
  #line 9297 
  if (adapter->vfs_allocated_count == 0U) 
                                          #line 9298 
                                          return -95;
  #line 9300 
  if (adapter->vfs_allocated_count <= (unsigned int)vf) 
                                                        #line 9301 
                                                        return -22;
  #line 9303 
  if (hw->mac.type == (unsigned int)e1000_82576) 
                                                 #line 9303 
                                                 reg_offset = 13568U; else 
                                                                    #line 9303 
                                                                    reg_offset = 23244U;
  #line 9304 
  reg_val = igb_rd32(hw,reg_offset);
  #line 9305 
  if ((int)setting != 0) 
                         #line 9306 
                         reg_val = ((unsigned int)(1UL << vf) | (unsigned int)(1UL << (vf + 8))) | reg_val; else 
                                                                    #line 9309 
                                                                    reg_val = ~ ((unsigned int)(1UL << vf) | (unsigned int)(1UL << (vf + 8))) & reg_val;
  {
    #line 9312 
    union __anonunion___u_3549 __u;
    #line 9311 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 9311 
    u8 *hw_addr = (__u.__val);
    #line 9311 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 9311 
                                           writel(reg_val,(void *)(hw_addr + (unsigned long)reg_offset));
  }
  #line 9313 
  (adapter->vf_data + (unsigned long)vf)->spoofchk_enabled = setting;
  #line 9314 
  return 0;
}

#line 9317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_set_vf_trust(struct net_device *netdev, int vf, bool setting)
{
  #line 9328 
  char *tmp_0;
  #line 9319 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 9321 
  if (adapter->vfs_allocated_count <= (unsigned int)vf) 
                                                        #line 9322 
                                                        return -22;
  #line 9323 
  if ((int)(adapter->vf_data + (unsigned long)vf)->trusted == (int)setting) 
    #line 9324 
    return 0;
  #line 9326 
  (adapter->vf_data + (unsigned long)vf)->trusted = setting;
  #line 9328 
  if ((int)setting != 0) 
                         #line 9328 
                         tmp_0 = (char *)""; else 
                                                  #line 9328 
                                                  tmp_0 = (char *)"not ";
  #line 9328 
  ;
  #line 9328 
  ;
  #line 9328 
  _dev_info(& (adapter->pdev)->dev,(char *)"VF %u is %strusted\n",vf,tmp_0);
  #line 9330 
  return 0;
}

#line 9333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi)
{
  #line 9336 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 9337 
  if (adapter->vfs_allocated_count <= (unsigned int)vf) 
                                                        #line 9338 
                                                        return -22;
  #line 9339 
  ivi->vf = (unsigned int)vf;
  #line 9340 
  memcpy((void *)(& ivi->mac),(void *)(& (adapter->vf_data + (unsigned long)vf)->vf_mac_addresses),6UL);
  #line 9341 
  ivi->max_tx_rate = (unsigned int)(adapter->vf_data + (unsigned long)vf)->tx_rate;
  #line 9342 
  ivi->min_tx_rate = 0U;
  #line 9343 
  ivi->vlan = (unsigned int)(adapter->vf_data + (unsigned long)vf)->pf_vlan;
  #line 9344 
  ivi->qos = (unsigned int)(adapter->vf_data + (unsigned long)vf)->pf_qos;
  #line 9345 
  ivi->spoofchk = (unsigned int)(adapter->vf_data + (unsigned long)vf)->spoofchk_enabled;
  #line 9346 
  ivi->trusted = (unsigned int)(adapter->vf_data + (unsigned long)vf)->trusted;
  #line 9347 
  return 0;
}

#line 9350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_vmm_control(struct igb_adapter *adapter)
{
  #line 9353 
  u32 reg;
  #line 9352 
  struct e1000_hw *hw = & adapter->hw;
  #line 9355 
  switch ((unsigned int)hw->mac.type) {
    #line 9356 
    case (unsigned int)1: 
                          #line 9356 
    ;
    #line 9357 
    case (unsigned int)6: 
                          #line 9357 
    ;
    #line 9358 
    case (unsigned int)7: 
                          #line 9358 
    ;
    #line 9359 
    case (unsigned int)5: 
                          #line 9359 
    ;
    #line 9360 
    default: 
             #line 9360 
    ;
    #line 9362 
    return;
    #line 9363 
    case (unsigned int)2: 
                          #line 9363 
    ;
    #line 9365 
    reg = igb_rd32(hw,13712U);
    #line 9366 
    reg |= 8U;
    {
      #line 9368 
      union __anonunion___u_3551 __u;
      #line 9367 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 9367 
      u8 *hw_addr = (__u.__val);
      #line 9367 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 9367 
                                             writel(reg,(void *)(hw_addr + 13712U));
    }
    #line 9369 
    case (unsigned int)3: 
                          #line 9369 
    ;
    #line 9371 
    reg = igb_rd32(hw,23280U);
    #line 9372 
    reg |= 1073741824U;
    {
      #line 9374 
      union __anonunion___u_3553 __u_0;
      #line 9373 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 9373 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 9373 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 9373 
                                               writel(reg,(void *)(hw_addr_0 + 23280U));
    }
    #line 9375 
    case (unsigned int)4: 
                          #line 9375 
    ;
    #line 9377 
    break;
  }
  #line 9380 
  if (adapter->vfs_allocated_count != 0U) {
    #line 9381 
    igb_vmdq_set_loopback_pf(hw,(_Bool)1);
    #line 9382 
    igb_vmdq_set_replication_pf(hw,(_Bool)1);
    #line 9383 
    igb_vmdq_set_anti_spoofing_pf(hw,(_Bool)1,(int)adapter->vfs_allocated_count);
  }
  else {
    #line 9386 
    igb_vmdq_set_loopback_pf(hw,(_Bool)0);
    #line 9387 
    igb_vmdq_set_replication_pf(hw,(_Bool)0);
  }
  #line 9389 
  return;
}

#line 9391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_init_dmac(struct igb_adapter *adapter, u32 pba)
{
  #line 9394 
  u32 dmac_thr;
  #line 9395 
  u16 hwm;
  #line 9393 
  struct e1000_hw *hw = & adapter->hw;
  #line 9397 
  if (hw->mac.type > (unsigned int)e1000_82580) {
    #line 9398 
    if (((unsigned long)adapter->flags & 16UL) != 0UL) {
      #line 9399 
      u32 reg;
      {
        #line 9403 
        union __anonunion___u_3555 __u;
        #line 9402 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 9402 
        u8 *hw_addr = (__u.__val);
        #line 9402 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 9402 
                                               writel(0U,(void *)(hw_addr + 13648U));
      }
      #line 9408 
      hwm = (unsigned short)((unsigned int)((unsigned short)(pba + 4294967290U)) * 64U);
      #line 9409 
      reg = igb_rd32(hw,8560U);
      #line 9410 
      reg &= 4294705167U;
      #line 9411 
      reg = ((unsigned int)((int)hwm << 4) & 262128U) | reg;
      {
        #line 9414 
        union __anonunion___u_3557 __u_0;
        #line 9413 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
        #line 9413 
        u8 *hw_addr_0 = (__u_0.__val);
        #line 9413 
        if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                                 #line 9413 
                                                 writel(reg,(void *)(hw_addr_0 + 8560U));
      }
      #line 9418 
      dmac_thr = pba + 4294967286U;
      #line 9419 
      reg = igb_rd32(hw,9480U);
      #line 9420 
      reg &= 4278255615U;
      #line 9421 
      reg = ((dmac_thr << 16) & 16711680U) | reg;
      #line 9425 
      reg |= 2952790016U;
      #line 9428 
      reg |= 31U;
      #line 9431 
      if (hw->mac.type != (unsigned int)e1000_i354) 
                                                    #line 9432 
                                                    reg &= 4294934527U;
      {
        #line 9435 
        union __anonunion___u_3559 __u_1;
        #line 9434 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
        #line 9434 
        u8 *hw_addr_1 = (__u_1.__val);
        #line 9434 
        if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                                 #line 9434 
                                                 writel(reg,(void *)(hw_addr_1 + 9480U));
      }
      {
        #line 9440 
        union __anonunion___u_3561 __u_2;
        #line 9439 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
        #line 9439 
        u8 *hw_addr_2 = (__u_2.__val);
        #line 9439 
        if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                                 #line 9439 
                                                 writel(0U,(void *)(hw_addr_2 + 24016U));
      }
      #line 9441 
      reg = 2147483652U;
      {
        #line 9444 
        union __anonunion___u_3563 __u_3;
        #line 9443 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
        #line 9443 
        u8 *hw_addr_3 = (__u_3.__val);
        #line 9443 
        if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                                 #line 9443 
                                                 writel(reg,(void *)(hw_addr_3 + 9492U));
      }
      {
        #line 9449 
        union __anonunion___u_3565 __u_4;
        #line 9448 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
        #line 9448 
        u8 *hw_addr_4 = (__u_4.__val);
        #line 9448 
        if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                                 #line 9448 
                                                 writel((16312U - adapter->max_frame_size) >> 6,(void *)(hw_addr_4 + 13648U));
      }
      #line 9454 
      reg = igb_rd32(hw,23480U);
      #line 9455 
      reg &= 4294967167U;
      {
        #line 9457 
        union __anonunion___u_3567 __u_5;
        #line 9456 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
        #line 9456 
        u8 *hw_addr_5 = (__u_5.__val);
        #line 9456 
        if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                                 #line 9456 
                                                 writel(reg,(void *)(hw_addr_5 + 23480U));
      }
    }
  }
  else 
    #line 9458 
    if (hw->mac.type == (unsigned int)e1000_82580) {
      #line 9459 
      u32 reg_0 = igb_rd32(hw,23480U);
      {
        #line 9462 
        union __anonunion___u_3569 __u_6;
        #line 9461 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
        #line 9461 
        u8 *hw_addr_6 = (__u_6.__val);
        #line 9461 
        if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
                                                 #line 9461 
                                                 writel(reg_0 & 4294967167U,(void *)(hw_addr_6 + 23480U));
      }
      {
        #line 9463 
        union __anonunion___u_3571 __u_7;
        #line 9462 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
        #line 9462 
        u8 *hw_addr_7 = (__u_7.__val);
        #line 9462 
        if ((long)(hw_addr_7 == (u8 *)0U) == 0L) 
                                                 #line 9462 
                                                 writel(0U,(void *)(hw_addr_7 + 9480U));
      }
    }
  #line 9465 
  return;
}

#line 9476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_read_i2c_byte(struct e1000_hw *hw, u8 byte_offset, u8 dev_addr, u8 *data)
{
  #line 9479 
  void *__mptr;
  #line 9481 
  s32 status;
  #line 9479 
  __mptr = (void *)hw;
  #line 9479 
  struct igb_adapter *adapter = ((struct igb_adapter *)(__mptr + 18446744073709549960U));
  #line 9480 
  struct i2c_client *this_client = adapter->i2c_client;
  #line 9482 
  u16 swfw_mask = (unsigned short)0U;
  #line 9484 
  if (this_client == (struct i2c_client *)0) 
                                             #line 9485 
                                             return 20;
  #line 9487 
  swfw_mask = (unsigned short)2U;
  #line 9489 
  if ((*(hw->mac.ops.acquire_swfw_sync))(hw,
                                           (unsigned short)((int)swfw_mask)) != 0) 
    #line 9490 
    return 13;
  #line 9492 
  status = i2c_smbus_read_byte_data(this_client,(unsigned char)((int)byte_offset));
  #line 9493 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)((int)swfw_mask));
  #line 9495 
  if (status < 0) 
                  #line 9496 
                  return 20;
  else {
    #line 9498 
    *data = (unsigned char)status;
    #line 9499 
    return 0;
  }
}

#line 9513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_write_i2c_byte(struct e1000_hw *hw, u8 byte_offset, u8 dev_addr, u8 data)
{
  #line 9516 
  void *__mptr;
  #line 9518 
  s32 status;
  #line 9516 
  __mptr = (void *)hw;
  #line 9516 
  struct igb_adapter *adapter = ((struct igb_adapter *)(__mptr + 18446744073709549960U));
  #line 9517 
  struct i2c_client *this_client = adapter->i2c_client;
  #line 9519 
  u16 swfw_mask = (unsigned short)2U;
  #line 9521 
  if (this_client == (struct i2c_client *)0) 
                                             #line 9522 
                                             return 20;
  #line 9524 
  if ((*(hw->mac.ops.acquire_swfw_sync))(hw,
                                           (unsigned short)((int)swfw_mask)) != 0) 
    #line 9525 
    return 13;
  #line 9526 
  status = i2c_smbus_write_byte_data(this_client,(unsigned char)((int)byte_offset),(unsigned char)((int)data));
  #line 9527 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)((int)swfw_mask));
  #line 9529 
  if (status != 0) 
                   #line 9530 
                   return 20; else 
                                   #line 9532 
                                   return 0;
}

#line 9536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_reinit_queues(struct igb_adapter *adapter)
{
  #line 9538 
  struct net_device *netdev = adapter->netdev;
  #line 9539 
  struct pci_dev *pdev = adapter->pdev;
  #line 9540 
  int err = 0;
  #line 9542 
  if ((int)netif_running(netdev) != 0) 
                                       #line 9543 
                                       igb_close(netdev);
  #line 9545 
  igb_reset_interrupt_capability(adapter);
  #line 9547 
  if (igb_init_interrupt_scheme(adapter,(_Bool)1) != 0) {
    #line 9548 
    _dev_err(& pdev->dev,(char *)"Unable to allocate memory for queues\n");
    #line 9549 
    return -12;
  }
  #line 9552 
  if ((int)netif_running(netdev) != 0) 
                                       #line 9553 
                                       err = igb_open(netdev);
  #line 9555 
  return err;
}

#line 9558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_nfc_filter_exit(struct igb_adapter *adapter)
{
  #line 9564 
  struct igb_nfc_filter *tmp_0;
  #line 9567 
  struct igb_nfc_filter *tmp_6;
  #line 9564 
  void *__mptr;
  #line 9567 
  void *__mptr_1;
  #line 9560 
  struct igb_nfc_filter *rule;
  #line 9562 
  cif_spin_lock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
  {
    #line 9564 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 9564 
    if (____ptr != (struct hlist_node *)0) {
      #line 9564 
      __mptr = (void *)____ptr;
      #line 9564 
      tmp_0 = ((struct igb_nfc_filter *)__mptr);
    }
    else 
         #line 9564 
         tmp_0 = (struct igb_nfc_filter *)0;
    }
  #line 9564 
  rule = tmp_0;
  #line 9564 
  while (rule != (struct igb_nfc_filter *)0) {
    #line 9564 
    void *__mptr_0;
    #line 9564 
    struct igb_nfc_filter *tmp_3;
    #line 9565 
    igb_erase_filter(adapter,rule);
    {
      #line 9564 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 9564 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 9564 
        __mptr_0 = (void *)____ptr_0;
        #line 9564 
        tmp_3 = ((struct igb_nfc_filter *)__mptr_0);
      }
      else 
           #line 9564 
           tmp_3 = (struct igb_nfc_filter *)0;
      }
    #line 9564 
    rule = tmp_3;
  }
  {
    #line 9567 
    struct hlist_node *____ptr_1 = adapter->cls_flower_list.first;
    #line 9567 
    if (____ptr_1 != (struct hlist_node *)0) {
      #line 9567 
      __mptr_1 = (void *)____ptr_1;
      #line 9567 
      tmp_6 = ((struct igb_nfc_filter *)__mptr_1);
    }
    else 
         #line 9567 
         tmp_6 = (struct igb_nfc_filter *)0;
    }
  #line 9567 
  rule = tmp_6;
  #line 9567 
  while (rule != (struct igb_nfc_filter *)0) {
    #line 9567 
    void *__mptr_2;
    #line 9567 
    struct igb_nfc_filter *tmp_9;
    #line 9568 
    igb_erase_filter(adapter,rule);
    {
      #line 9567 
      struct hlist_node *____ptr_2 = rule->nfc_node.next;
      #line 9567 
      if (____ptr_2 != (struct hlist_node *)0) {
        #line 9567 
        __mptr_2 = (void *)____ptr_2;
        #line 9567 
        tmp_9 = ((struct igb_nfc_filter *)__mptr_2);
      }
      else 
           #line 9567 
           tmp_9 = (struct igb_nfc_filter *)0;
      }
    #line 9567 
    rule = tmp_9;
  }
  #line 9570 
  cif_spin_unlock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
  #line 9571 
  return;
}

#line 9573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_nfc_filter_restore(struct igb_adapter *adapter)
{
  #line 9579 
  void *__mptr;
  #line 9579 
  struct igb_nfc_filter *tmp_0;
  #line 9575 
  struct igb_nfc_filter *rule;
  #line 9577 
  cif_spin_lock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
  {
    #line 9579 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 9579 
    if (____ptr != (struct hlist_node *)0) {
      #line 9579 
      __mptr = (void *)____ptr;
      #line 9579 
      tmp_0 = ((struct igb_nfc_filter *)__mptr);
    }
    else 
         #line 9579 
         tmp_0 = (struct igb_nfc_filter *)0;
    }
  #line 9579 
  rule = tmp_0;
  #line 9579 
  while (rule != (struct igb_nfc_filter *)0) {
    #line 9579 
    void *__mptr_0;
    #line 9579 
    struct igb_nfc_filter *tmp_3;
    #line 9580 
    igb_add_filter(adapter,rule);
    {
      #line 9579 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 9579 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 9579 
        __mptr_0 = (void *)____ptr_0;
        #line 9579 
        tmp_3 = ((struct igb_nfc_filter *)__mptr_0);
      }
      else 
           #line 9579 
           tmp_3 = (struct igb_nfc_filter *)0;
      }
    #line 9579 
    rule = tmp_3;
  }
  #line 9582 
  cif_spin_unlock_nfc_lock_of_igb_adapter_0(& adapter->nfc_lock);
  #line 9583 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
struct pci_driver *emg_alias_igb_driver = & igb_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
struct pci_device_id (*emg_alias_igb_pci_tbl)[36U] = & igb_pci_tbl;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
struct dev_pm_ops *emg_alias_igb_pm_ops = & igb_pm_ops;
#line 99 
#line 99 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 100 
#line 100 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 101 
#line 101 
int emg_del_timer_sync(struct timer_list *arg0);
#line 103 
#line 103 
void emg_free_netdev(struct net_device *arg0);
#line 104 
#line 104 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 105 
#line 105 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 106 
#line 106 
int emg_register_netdev(struct net_device *arg0);
#line 109 
#line 109 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 110 
#line 110 
void emg_unregister_netdev(struct net_device *arg0);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_change_mtu(struct net_device *arg0, int arg1)
{
  #line 115 
  return igb_change_mtu(arg0,arg1);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_close(struct net_device *arg0)
{
  #line 120 
  return igb_close(arg0);
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
unsigned long long emg_wrapper_igb_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 125 
  return igb_features_check(arg0,arg1,arg2);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
unsigned long long emg_wrapper_igb_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 130 
  return igb_fix_features(arg0,arg1);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
void emg_wrapper_igb_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 135 
  igb_get_stats64(arg0,arg1);
  #line 136 
  return;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
enum irqreturn emg_wrapper_igb_intr(int arg0, void *arg1)
{
  #line 140 
  return igb_intr(arg0,arg1);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
enum irqreturn emg_wrapper_igb_intr_msi(int arg0, void *arg1)
{
  #line 145 
  return igb_intr_msi(arg0,arg1);
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 150 
  return igb_ioctl(arg0,arg1,arg2);
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
enum irqreturn emg_wrapper_igb_msix_other(int arg0, void *arg1)
{
  #line 155 
  return igb_msix_other(arg0,arg1);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
enum irqreturn emg_wrapper_igb_msix_ring(int arg0, void *arg1)
{
  #line 160 
  return igb_msix_ring(arg0,arg1);
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_ndo_fdb_add(struct ndmsg *arg0, struct nlattr **arg1, struct net_device *arg2, unsigned char *arg3, unsigned short arg4, unsigned short arg5, struct netlink_ext_ack *arg6)
{
  #line 165 
  return igb_ndo_fdb_add(arg0,arg1,arg2,arg3,(unsigned short)((int)arg4),
                      (unsigned short)((int)arg5),arg6);
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_ndo_get_vf_config(struct net_device *arg0, int arg1, struct ifla_vf_info *arg2)
{
  #line 170 
  return igb_ndo_get_vf_config(arg0,arg1,arg2);
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_ndo_set_vf_bw(struct net_device *arg0, int arg1, int arg2, int arg3)
{
  #line 175 
  return igb_ndo_set_vf_bw(arg0,arg1,arg2,arg3);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_ndo_set_vf_mac(struct net_device *arg0, int arg1, unsigned char *arg2)
{
  #line 180 
  return igb_ndo_set_vf_mac(arg0,arg1,arg2);
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_ndo_set_vf_spoofchk(struct net_device *arg0, int arg1, _Bool arg2)
{
  #line 185 
  return igb_ndo_set_vf_spoofchk(arg0,arg1,(_Bool)((bool)((int)arg2) != 0));
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_ndo_set_vf_trust(struct net_device *arg0, int arg1, _Bool arg2)
{
  #line 190 
  return igb_ndo_set_vf_trust(arg0,arg1,(_Bool)((bool)((int)arg2) != 0));
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_ndo_set_vf_vlan(struct net_device *arg0, int arg1, unsigned short arg2, unsigned char arg3, unsigned short arg4)
{
  #line 195 
  return igb_ndo_set_vf_vlan(arg0,arg1,(unsigned short)((int)arg2),
                          (unsigned char)((int)arg3),
                          (unsigned short)((int)arg4));
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_open(struct net_device *arg0)
{
  #line 200 
  return igb_open(arg0);
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_pci_sriov_configure(struct pci_dev *arg0, int arg1)
{
  #line 205 
  return igb_pci_sriov_configure(arg0,arg1);
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 210 
  return igb_probe(arg0,arg1);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
void emg_wrapper_igb_remove(struct pci_dev *arg0)
{
  #line 215 
  igb_remove(arg0);
  #line 216 
  return;
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_resume(struct device *arg0)
{
  #line 220 
  return igb_resume(arg0);
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_runtime_idle(struct device *arg0)
{
  #line 225 
  return igb_runtime_idle(arg0);
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_runtime_resume(struct device *arg0)
{
  #line 230 
  return igb_runtime_resume(arg0);
}

#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_runtime_suspend(struct device *arg0)
{
  #line 235 
  return igb_runtime_suspend(arg0);
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 240 
  return igb_set_features(arg0,arg1);
}

#line 244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_set_mac(struct net_device *arg0, void *arg1)
{
  #line 245 
  return igb_set_mac(arg0,arg1);
}

#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
void emg_wrapper_igb_set_rx_mode(struct net_device *arg0)
{
  #line 250 
  igb_set_rx_mode(arg0);
  #line 251 
  return;
}

#line 254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_setup_tc(struct net_device *arg0, enum tc_setup_type arg1, void *arg2)
{
  #line 255 
  return igb_setup_tc(arg0,arg1,arg2);
}

#line 259  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
void emg_wrapper_igb_shutdown(struct pci_dev *arg0)
{
  #line 260 
  igb_shutdown(arg0);
  #line 261 
  return;
}

#line 264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_suspend(struct device *arg0)
{
  #line 265 
  return igb_suspend(arg0);
}

#line 269  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
void emg_wrapper_igb_tx_timeout(struct net_device *arg0)
{
  #line 270 
  igb_tx_timeout(arg0);
  #line 271 
  return;
}

#line 274  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 275 
  return igb_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                          (unsigned short)((int)arg2));
}

#line 279  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_wrapper_igb_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 280 
  return igb_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                           (unsigned short)((int)arg2));
}

#line 284  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
enum netdev_tx emg_wrapper_igb_xmit_frame(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 285 
  return igb_xmit_frame(arg0,arg1);
}

#line 289  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
void emg_igb_exit_module(void)
{
  #line 290 
  igb_exit_module();
  #line 291 
  return;
}

#line 293  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
int emg_igb_init_module(void)
{
  #line 294 
  return igb_init_module();
}

#line 305  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 308 
  return ldv_find_next_bit(addr,size,offset);
}

#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 315 
  ldv_set_bit(nr,addr);
  #line 316 
  return;
}

#line 319  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 322 
  ldv_clear_bit(nr,addr);
  #line 323 
  return;
}

#line 326  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 329 
  ldv_init_list_head(list);
  #line 330 
  return;
}

#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void atomic_add(int i, atomic_t *v)
{
  #line 357 
  ldv_atomic_add(i,v);
  #line 358 
  return;
}

#line 375  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 378 
  ldv_atomic_inc(v);
  #line 379 
  return;
}

#line 591  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 594 
  return ldv_kcalloc(n,size,flags);
}

#line 612  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 615 
  return ldv_kzalloc(size,flags);
}

#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 880 
  return emg_schedule_work(work);
}

#line 1016  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1020 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1024  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1028 
  emg_pci_unregister_driver(dev);
  #line 1029 
  return;
}

#line 1032  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1036 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1040  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1044 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1048  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 1052 
  return emg_del_timer_sync(timer);
}

#line 1056  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_lock_stats64_lock_of_igb_adapter_0(spinlock_t *lock)
{
  #line 1059 
  ldv_spin_model_lock((char *)"stats64_lock_of_igb_adapter");
  #line 1061 
  spin_lock_0(lock);
  #line 1062 
  return;
}

#line 1065  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_unlock_stats64_lock_of_igb_adapter_0(spinlock_t *lock)
{
  #line 1068 
  ldv_spin_model_unlock((char *)"stats64_lock_of_igb_adapter");
  #line 1070 
  spin_unlock_0(lock);
  #line 1071 
  return;
}

#line 1074  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_lock_nfc_lock_of_igb_adapter_0(spinlock_t *lock)
{
  #line 1077 
  ldv_spin_model_lock((char *)"nfc_lock_of_igb_adapter");
  #line 1079 
  spin_lock_0(lock);
  #line 1080 
  return;
}

#line 1083  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_unlock_nfc_lock_of_igb_adapter_0(spinlock_t *lock)
{
  #line 1086 
  ldv_spin_model_unlock((char *)"nfc_lock_of_igb_adapter");
  #line 1088 
  spin_unlock_0(lock);
  #line 1089 
  return;
}

#line 1092  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1096 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1104 
  return emg_register_netdev(dev);
}

#line 1108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1112 
  emg_free_netdev(dev);
  #line 1113 
  return;
}

#line 1116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1120 
  emg_unregister_netdev(dev);
  #line 1121 
  return;
}

#line 1124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void *cif_vmalloc_0(unsigned long size)
{
  #line 1127 
  return ldv_vmalloc(size);
}

#line 1131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_vfree_0(void *addr)
{
  #line 1134 
  ldv_vfree(addr);
  #line 1135 
  return;
}

#line 1138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 1142 
  return emg_mod_timer(timer,expires);
}

#line 1146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_lock_tmreg_lock_of_igb_adapter(spinlock_t *lock)
{
  #line 1149 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  #line 1151 
  spin_lock_0(lock);
  #line 1152 
  return;
}

#line 1155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_main.i.aux"
static void cif_spin_unlock_tmreg_lock_of_igb_adapter(spinlock_t *lock)
{
  #line 1158 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  #line 1160 
  spin_unlock_0(lock);
  #line 1161 
  return;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.h"
#line 22 
s32 igb_copper_link_setup_igp(struct e1000_hw *hw);
#line 23 
#line 23 
s32 igb_copper_link_setup_m88(struct e1000_hw *hw);
#line 24 
#line 24 
s32 igb_copper_link_setup_m88_gen2(struct e1000_hw *hw);
#line 25 
#line 25 
s32 igb_phy_force_speed_duplex_igp(struct e1000_hw *hw);
#line 26 
#line 26 
s32 igb_phy_force_speed_duplex_m88(struct e1000_hw *hw);
#line 27 
#line 27 
s32 igb_get_cable_length_m88(struct e1000_hw *hw);
#line 28 
#line 28 
s32 igb_get_cable_length_m88_gen2(struct e1000_hw *hw);
#line 29 
#line 29 
s32 igb_get_cable_length_igp_2(struct e1000_hw *hw);
#line 30 
#line 30 
s32 igb_get_phy_id(struct e1000_hw *hw);
#line 31 
#line 31 
s32 igb_get_phy_info_igp(struct e1000_hw *hw);
#line 32 
#line 32 
s32 igb_get_phy_info_m88(struct e1000_hw *hw);
#line 34 
#line 34 
s32 igb_phy_hw_reset(struct e1000_hw *hw);
#line 35 
#line 35 
s32 igb_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data);
#line 36 
#line 36 
s32 igb_set_d3_lplu_state(struct e1000_hw *hw, bool active);
#line 37 
#line 37 
s32 igb_setup_copper_link(struct e1000_hw *hw);
#line 38 
#line 38 
s32 igb_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data);
#line 42 
#line 42 
void igb_power_down_phy_copper(struct e1000_hw *hw);
#line 43 
#line 43 
s32 igb_phy_init_script_igp3(struct e1000_hw *hw);
#line 44 
#line 44 
s32 igb_initialize_M88E1512_phy(struct e1000_hw *hw);
#line 45 
#line 45 
s32 igb_initialize_M88E1543_phy(struct e1000_hw *hw);
#line 46 
#line 46 
s32 igb_read_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 *data);
#line 47 
#line 47 
s32 igb_write_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 data);
#line 49 
#line 49 
s32 igb_write_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 data);
#line 50 
#line 50 
s32 igb_read_sfp_data_byte(struct e1000_hw *hw, u16 offset, u8 *data);
#line 51 
#line 51 
s32 igb_copper_link_setup_82580(struct e1000_hw *hw);
#line 52 
#line 52 
s32 igb_get_phy_info_82580(struct e1000_hw *hw);
#line 53 
#line 53 
s32 igb_phy_force_speed_duplex_82580(struct e1000_hw *hw);
#line 54 
#line 54 
s32 igb_get_cable_length_82580(struct e1000_hw *hw);
#line 55 
#line 2165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_read_phy_reg_82580(struct e1000_hw *hw, u32 offset, u16 *data);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.h"
#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_write_phy_reg_82580(struct e1000_hw *hw, u32 offset, u16 data);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.h"
#line 57 
s32 igb_check_polarity_m88(struct e1000_hw *hw);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.h"
#line 7 
s32 igb_acquire_nvm(struct e1000_hw *hw);
#line 8 
#line 8 
void igb_release_nvm(struct e1000_hw *hw);
#line 9 
#line 9 
s32 igb_read_mac_addr(struct e1000_hw *hw);
#line 13 
#line 13 
s32 igb_read_nvm_eerd(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 14 
#line 14 
s32 igb_read_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 15 
#line 15 
s32 igb_write_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 16 
#line 16 
s32 igb_validate_nvm_checksum(struct e1000_hw *hw);
#line 17 
#line 17 
s32 igb_update_nvm_checksum(struct e1000_hw *hw);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.h"
#line 7 
s32 igb_acquire_swfw_sync_i210(struct e1000_hw *hw, u16 mask);
#line 8 
#line 8 
void igb_release_swfw_sync_i210(struct e1000_hw *hw, u16 mask);
#line 13 
#line 13 
s32 igb_write_xmdio_reg(struct e1000_hw *hw, u16 addr, u8 dev_addr, u16 data);
#line 14 
#line 14 
s32 igb_init_nvm_params_i210(struct e1000_hw *hw);
#line 16 
#line 16 
s32 igb_pll_workaround_i210(struct e1000_hw *hw);
#line 17 
#line 17 
s32 igb_get_cfg_done_i210(struct e1000_hw *hw);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.h"
#line 18 
s32 igb_check_for_copper_link(struct e1000_hw *hw);
#line 20 
#line 20 
s32 igb_config_fc_after_link_up(struct e1000_hw *hw);
#line 23 
#line 23 
s32 igb_get_auto_rd_done(struct e1000_hw *hw);
#line 25 
#line 25 
s32 igb_get_hw_semaphore(struct e1000_hw *hw);
#line 26 
#line 26 
s32 igb_get_speed_and_duplex_copper(struct e1000_hw *hw, u16 *speed, u16 *duplex);
#line 28 
#line 28 
s32 igb_id_led_init(struct e1000_hw *hw);
#line 34 
#line 34 
s32 igb_write_8bit_ctrl_reg(struct e1000_hw *hw, u32 reg, u32 offset, u8 data);
#line 37 
#line 37 
void igb_clear_hw_cntrs_base(struct e1000_hw *hw);
#line 38 
#line 38 
void igb_clear_vfta(struct e1000_hw *hw);
#line 39 
#line 39 
void igb_write_vfta(struct e1000_hw *hw, u32 offset, u32 value);
#line 43 
#line 43 
void igb_init_rx_addrs(struct e1000_hw *hw, u16 rar_count);
#line 45 
#line 45 
void igb_put_hw_semaphore(struct e1000_hw *hw);
#line 46 
#line 46 
void igb_rar_set(struct e1000_hw *hw, u8 *addr, u32 index);
#line 47 
#line 47 
s32 igb_check_alt_mac_addr(struct e1000_hw *hw);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
#line 554 
static s32 igb_get_invariants_82575(struct e1000_hw *hw);
#line 20 
#line 718 
static s32 igb_acquire_phy_82575(struct e1000_hw *hw);
#line 21 
#line 739 
static void igb_release_phy_82575(struct e1000_hw *hw);
#line 22 
#line 1119 
static s32 igb_acquire_nvm_82575(struct e1000_hw *hw);
#line 23 
#line 1143 
static void igb_release_nvm_82575(struct e1000_hw *hw);
#line 24 
#line 1291 
static s32 igb_check_for_link_82575(struct e1000_hw *hw);
#line 25 
#line 1230 
static s32 igb_get_cfg_done_82575(struct e1000_hw *hw);
#line 26 
#line 1511 
static s32 igb_init_hw_82575(struct e1000_hw *hw);
#line 27 
#line 918 
static s32 igb_phy_hw_reset_sgmii_82575(struct e1000_hw *hw);
#line 28 
#line 762 
static s32 igb_read_phy_reg_sgmii_82575(struct e1000_hw *hw, u32 offset, u16 *data);
#line 29 
#line 1451 
static s32 igb_reset_hw_82575(struct e1000_hw *hw);
#line 30 
#line 2250 
static s32 igb_reset_hw_82580(struct e1000_hw *hw);
#line 31 
#line 961 
static s32 igb_set_d0_lplu_state_82575(struct e1000_hw *hw, bool active);
#line 32 
#line 1037 
static s32 igb_set_d0_lplu_state_82580(struct e1000_hw *hw, bool active);
#line 33 
#line 1080 
static s32 igb_set_d3_lplu_state_82580(struct e1000_hw *hw, bool active);
#line 34 
#line 1568 
static s32 igb_setup_copper_link_82575(struct e1000_hw *hw);
#line 35 
#line 1654 
static s32 igb_setup_serdes_link_82575(struct e1000_hw *hw);
#line 36 
#line 793 
static s32 igb_write_phy_reg_sgmii_82575(struct e1000_hw *hw, u32 offset, u16 data);
#line 37 
#line 1879 
static void igb_clear_hw_cntrs_82575(struct e1000_hw *hw);
#line 38 
#line 1157 
static s32 igb_acquire_swfw_sync_82575(struct e1000_hw *hw, u16 mask);
#line 39 
#line 1357 
static s32 igb_get_pcs_speed_and_duplex_82575(struct e1000_hw *hw, u16 *speed, u16 *duplex);
#line 41 
#line 823 
static s32 igb_get_phy_id_82575(struct e1000_hw *hw);
#line 42 
#line 1206 
static void igb_release_swfw_sync_82575(struct e1000_hw *hw, u16 mask);
#line 43 
#line 1795 
static bool igb_sgmii_active_82575(struct e1000_hw *hw);
#line 44 
#line 1808 
static s32 igb_reset_init_script_82575(struct e1000_hw *hw);
#line 45 
#line 1841 
static s32 igb_read_mac_addr_82575(struct e1000_hw *hw);
#line 46 
#line 2023 
static s32 igb_set_pcie_completion_timeout(struct e1000_hw *hw);
#line 47 
#line 2214 
static s32 igb_reset_mdicnfg_82580(struct e1000_hw *hw);
#line 48 
#line 2429 
static s32 igb_validate_nvm_checksum_82580(struct e1000_hw *hw);
#line 49 
#line 2469 
static s32 igb_update_nvm_checksum_82580(struct e1000_hw *hw);
#line 50 
#line 2511 
static s32 igb_validate_nvm_checksum_i350(struct e1000_hw *hw);
#line 51 
#line 2537 
static s32 igb_update_nvm_checksum_i350(struct e1000_hw *hw);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static u16 e1000_82580_rxpbs_table[11U] = {(unsigned short)36U, (unsigned short)72U, (unsigned short)144U, (unsigned short)1U, (unsigned short)2U, (unsigned short)4U, (unsigned short)8U, (unsigned short)16U, (unsigned short)35U, (unsigned short)70U, (unsigned short)140U};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static void igb_write_vfta_i350(struct e1000_hw *hw, u32 offset, u32 value)
{
  #line 56 
  int i;
  #line 55 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  #line 74 
  i = 10;
  #line 74 
  while (1) {
    #line 74 
    int tmp_0;
    #line 74 
    tmp_0 = i;
    #line 74 
    i --;
    #line 74 
    ;
    #line 74 
    if (! (tmp_0 != 0)) 
                        #line 74 
                        break;
    {
      #line 76 
      union __anonunion___u_4304 __u;
      #line 75 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 75 
      u8 *hw_addr = (__u.__val);
      #line 75 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 75 
                                             writel(value,(void *)(hw_addr + (unsigned long)((offset << 2) + 22016U)));
    }
  }
  #line 77 
  igb_rd32(hw,8U);
  #line 78 
  *(adapter->shadow_vfta + (unsigned long)offset) = value;
  #line 79 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static bool igb_sgmii_uses_mdio_82575(struct e1000_hw *hw)
{
  #line 90 
  u32 reg = 0U;
  #line 91 
  bool ext_mdio = (_Bool)0;
  #line 93 
  switch ((unsigned int)hw->mac.type) {
    #line 94 
    case (unsigned int)1: 
                          #line 94 
    ;
    #line 95 
    case (unsigned int)2: 
                          #line 95 
    ;
    #line 96 
    reg = igb_rd32(hw,32U);
    #line 97 
    ext_mdio = (_Bool)((reg & 2147483648U) != 0U);
    #line 98 
    break;
    #line 99 
    case (unsigned int)3: 
                          #line 99 
    ;
    #line 100 
    case (unsigned int)4: 
                          #line 100 
    ;
    #line 101 
    case (unsigned int)5: 
                          #line 101 
    ;
    #line 102 
    case (unsigned int)6: 
                          #line 102 
    ;
    #line 103 
    case (unsigned int)7: 
                          #line 103 
    ;
    #line 104 
    reg = igb_rd32(hw,3588U);
    #line 105 
    ext_mdio = (_Bool)((reg & 2147483648U) != 0U);
    #line 106 
    break;
    #line 107 
    default: 
             #line 107 
    ;
    #line 108 
    break;
  }
  #line 110 
  return ext_mdio;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_check_for_link_media_swap(struct e1000_hw *hw)
{
  #line 122 
  s32 ret_val;
  #line 123 
  u16 data;
  #line 121 
  struct e1000_phy_info *phy = & hw->phy;
  #line 124 
  u8 port = (unsigned char)0U;
  #line 127 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
  #line 128 
  if (ret_val != 0) 
                    #line 129 
                    return ret_val;
  #line 131 
  ret_val = (*(phy->ops.read_reg))(hw,1U,& data);
  #line 132 
  if (ret_val != 0) 
                    #line 133 
                    return ret_val;
  #line 135 
  if (((int)data & 4) != 0) 
                            #line 136 
                            port = (unsigned char)1U;
  #line 139 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)1);
  #line 140 
  if (ret_val != 0) 
                    #line 141 
                    return ret_val;
  #line 143 
  ret_val = (*(phy->ops.read_reg))(hw,1U,& data);
  #line 144 
  if (ret_val != 0) 
                    #line 145 
                    return ret_val;
  #line 148 
  if (((int)data & 4) != 0) 
                            #line 149 
                            port = (unsigned char)2U;
  #line 152 
  if ((unsigned int)port != 0U && (int)hw->dev_spec._82575.media_port != (int)port) {
    #line 153 
    hw->dev_spec._82575.media_port = port;
    #line 154 
    hw->dev_spec._82575.media_changed = (_Bool)1;
  }
  #line 157 
  if ((unsigned int)port == 1U) {
    #line 159 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
    #line 160 
    if (ret_val != 0) 
                      #line 161 
                      return ret_val;
    #line 162 
    igb_check_for_link_82575(hw);
  }
  else {
    #line 164 
    igb_check_for_link_82575(hw);
    #line 166 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
    #line 167 
    if (ret_val != 0) 
                      #line 168 
                      return ret_val;
  }
  #line 171 
  return 0;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_phy_params_82575(struct e1000_hw *hw)
{
  #line 182 
  u32 ctrl_ext;
  #line 180 
  struct e1000_phy_info *phy = & hw->phy;
  #line 181 
  s32 ret_val = 0;
  #line 184 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    #line 185 
    phy->type = e1000_phy_none;
    #line 186 
    goto out;
  }
  #line 189 
  phy->autoneg_mask = (unsigned short)47U;
  #line 190 
  phy->reset_delay_us = 100U;
  #line 192 
  ctrl_ext = igb_rd32(hw,24U);
  #line 194 
  if ((int)igb_sgmii_active_82575(hw) != 0) {
    #line 195 
    phy->ops.reset = & igb_phy_hw_reset_sgmii_82575;
    #line 196 
    ctrl_ext |= 33554432U;
  }
  else {
    #line 198 
    phy->ops.reset = & igb_phy_hw_reset;
    #line 199 
    ctrl_ext &= 4261412863U;
  }
  {
    #line 203 
    union __anonunion___u_4306 __u;
    #line 202 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 202 
    u8 *hw_addr = (__u.__val);
    #line 202 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 202 
                                           writel(ctrl_ext,(void *)(hw_addr + 24U));
  }
  #line 203 
  igb_reset_mdicnfg_82580(hw);
  #line 205 
  if ((int)igb_sgmii_active_82575(hw) != 0) {
    #line 205 
    if (igb_sgmii_uses_mdio_82575(hw)) 
                                       #line 205 
                                       goto _LAND;
    else {
      #line 206 
      phy->ops.read_reg = & igb_read_phy_reg_sgmii_82575;
      #line 207 
      phy->ops.write_reg = & igb_write_phy_reg_sgmii_82575;
    }
  }
  else {
    #line 205 
    _LAND: 
           #line 209 
    ;
    #line 209 
    switch ((unsigned int)hw->mac.type) {
      #line 210 
      case (unsigned int)3: 
                            #line 210 
      ;
      #line 211 
      case (unsigned int)4: 
                            #line 211 
      ;
      #line 212 
      case (unsigned int)5: 
                            #line 212 
      ;
      #line 213 
      case (unsigned int)6: 
                            #line 213 
      ;
      #line 214 
      case (unsigned int)7: 
                            #line 214 
      ;
      #line 215 
      phy->ops.read_reg = & igb_read_phy_reg_82580;
      #line 216 
      phy->ops.write_reg = & igb_write_phy_reg_82580;
      #line 217 
      break;
      #line 218 
      default: 
               #line 218 
      ;
      #line 219 
      phy->ops.read_reg = & igb_read_phy_reg_igp;
      #line 220 
      phy->ops.write_reg = & igb_write_phy_reg_igp;
    }
  }
  #line 225 
  hw->bus.func = (unsigned short)((unsigned int)((unsigned short)(igb_rd32(hw,8U) >> 2)) & 3U);
  #line 229 
  ret_val = igb_get_phy_id_82575(hw);
  #line 230 
  if (ret_val != 0) 
                    #line 231 
                    return ret_val;
  #line 234 
  switch (phy->id) {
    #line 235 
    case (u32)21040800: 
                        #line 235 
    ;
    #line 236 
    case (u32)21040592: 
                        #line 236 
    ;
    #line 237 
    case (u32)21040576: 
                        #line 237 
    ;
    #line 238 
    case (u32)21040272: 
                        #line 238 
    ;
    #line 239 
    case (u32)21040320: 
                        #line 239 
    ;
    #line 240 
    phy->type = e1000_phy_m88;
    #line 241 
    phy->ops.check_polarity = & igb_check_polarity_m88;
    #line 242 
    phy->ops.get_phy_info = & igb_get_phy_info_m88;
    #line 243 
    if (phy->id != 21040320U) 
                              #line 244 
                              phy->ops.get_cable_length = & igb_get_cable_length_m88_gen2; else 
                                                                    #line 247 
                                                                    phy->ops.get_cable_length = & igb_get_cable_length_m88;
    #line 248 
    phy->ops.force_speed_duplex = & igb_phy_force_speed_duplex_m88;
    #line 250 
    if (phy->id == 21040272U) {
      #line 251 
      u16 data;
      #line 253 
      ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)2);
      #line 256 
      if (ret_val != 0) 
                        #line 257 
                        goto out;
      #line 259 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      #line 262 
      if (ret_val != 0) 
                        #line 263 
                        goto out;
      #line 265 
      data = (unsigned short)((unsigned int)((unsigned short)((int)data >> 7)) & 7U);
      #line 267 
      if ((unsigned int)data + 65534U <= 1U) 
                                             #line 269 
                                             hw->mac.ops.check_for_link = & igb_check_for_link_media_swap;
    }
    #line 272 
    if (phy->id == 21040592U) {
      #line 273 
      ret_val = igb_initialize_M88E1512_phy(hw);
      #line 274 
      if (ret_val != 0) 
                        #line 275 
                        goto out;
    }
    #line 277 
    if (phy->id == 21040800U) {
      #line 278 
      ret_val = igb_initialize_M88E1543_phy(hw);
      #line 279 
      if (ret_val != 0) 
                        #line 280 
                        goto out;
    }
    #line 282 
    break;
    #line 283 
    case (u32)44565392: 
                        #line 283 
    ;
    #line 284 
    phy->type = e1000_phy_igp_3;
    #line 285 
    phy->ops.get_phy_info = & igb_get_phy_info_igp;
    #line 286 
    phy->ops.get_cable_length = & igb_get_cable_length_igp_2;
    #line 287 
    phy->ops.force_speed_duplex = & igb_phy_force_speed_duplex_igp;
    #line 288 
    phy->ops.set_d0_lplu_state = & igb_set_d0_lplu_state_82575;
    #line 289 
    phy->ops.set_d3_lplu_state = & igb_set_d3_lplu_state;
    #line 290 
    break;
    #line 291 
    case (u32)22283168: 
                        #line 291 
    ;
    #line 292 
    case (u32)22283184: 
                        #line 292 
    ;
    #line 293 
    phy->type = e1000_phy_82580;
    #line 294 
    phy->ops.force_speed_duplex = & igb_phy_force_speed_duplex_82580;
    #line 296 
    phy->ops.get_cable_length = & igb_get_cable_length_82580;
    #line 297 
    phy->ops.get_phy_info = & igb_get_phy_info_82580;
    #line 298 
    phy->ops.set_d0_lplu_state = & igb_set_d0_lplu_state_82580;
    #line 299 
    phy->ops.set_d3_lplu_state = & igb_set_d3_lplu_state_82580;
    #line 300 
    break;
    #line 301 
    case (u32)21040128: 
                        #line 301 
    ;
    #line 302 
    phy->type = e1000_phy_i210;
    #line 303 
    phy->ops.check_polarity = & igb_check_polarity_m88;
    #line 304 
    phy->ops.get_cfg_done = & igb_get_cfg_done_i210;
    #line 305 
    phy->ops.get_phy_info = & igb_get_phy_info_m88;
    #line 306 
    phy->ops.get_cable_length = & igb_get_cable_length_m88_gen2;
    #line 307 
    phy->ops.set_d0_lplu_state = & igb_set_d0_lplu_state_82580;
    #line 308 
    phy->ops.set_d3_lplu_state = & igb_set_d3_lplu_state_82580;
    #line 309 
    phy->ops.force_speed_duplex = & igb_phy_force_speed_duplex_m88;
    #line 310 
    break;
    #line 311 
    case (u32)56778000: 
                        #line 311 
    ;
    #line 312 
    phy->type = e1000_phy_bcm54616;
    #line 313 
    break;
    #line 314 
    default: 
             #line 314 
    ;
    #line 315 
    ret_val = -2;
    #line 316 
    goto out;
  }
  #line 319 
  out: 
       #line 319 
  ;
  #line 320 
  return ret_val;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_nvm_params_82575(struct e1000_hw *hw)
{
  #line 331 
  u16 size;
  #line 329 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 330 
  u32 eecd = igb_rd32(hw,16U);
  #line 333 
  size = (unsigned short)((unsigned int)((unsigned short)(eecd >> 11)) & 15U);
  #line 339 
  size = (unsigned short)((unsigned int)size + 6U);
  #line 344 
  if ((unsigned int)size > 15U) 
                                #line 345 
                                size = (unsigned short)15U;
  #line 347 
  nvm->word_size = (unsigned short)(1UL << (int)size);
  #line 348 
  nvm->opcode_bits = (unsigned short)8U;
  #line 349 
  nvm->delay_usec = (unsigned short)1U;
  #line 351 
  switch ((unsigned int)nvm->override) {
    #line 352 
    case (unsigned int)2: 
                          #line 352 
    ;
    #line 353 
    nvm->page_size = (unsigned short)32U;
    #line 354 
    nvm->address_bits = (unsigned short)16U;
    #line 355 
    break;
    #line 356 
    case (unsigned int)1: 
                          #line 356 
    ;
    #line 357 
    nvm->page_size = (unsigned short)8U;
    #line 358 
    nvm->address_bits = (unsigned short)8U;
    #line 359 
    break;
    #line 360 
    default: 
             #line 360 
    ;
    #line 361 
    if ((eecd & 1024U) != 0U) 
                              #line 361 
                              nvm->page_size = (unsigned short)32U; else 
                                                                    #line 361 
                                                                    nvm->page_size = (unsigned short)8U;
    #line 362 
    if ((eecd & 1024U) != 0U) 
                              #line 362 
                              nvm->address_bits = (unsigned short)16U; else 
                                                                    #line 362 
                                                                    nvm->address_bits = (unsigned short)8U;
    #line 364 
    break;
  }
  #line 366 
  if ((unsigned int)nvm->word_size == 32768U) 
                                              #line 367 
                                              nvm->page_size = (unsigned short)128U;
  #line 369 
  nvm->type = e1000_nvm_eeprom_spi;
  #line 372 
  nvm->ops.acquire = & igb_acquire_nvm_82575;
  #line 373 
  nvm->ops.release = & igb_release_nvm_82575;
  #line 374 
  nvm->ops.write = & igb_write_nvm_spi;
  #line 375 
  nvm->ops.validate = & igb_validate_nvm_checksum;
  #line 376 
  nvm->ops.update = & igb_update_nvm_checksum;
  #line 377 
  if ((int)nvm->word_size >= 0) 
                                #line 378 
                                nvm->ops.read = & igb_read_nvm_eerd; else 
                                                                    #line 380 
                                                                    nvm->ops.read = & igb_read_nvm_spi;
  #line 383 
  switch ((unsigned int)hw->mac.type) {
    #line 384 
    case (unsigned int)3: 
                          #line 384 
    ;
    #line 385 
    nvm->ops.validate = & igb_validate_nvm_checksum_82580;
    #line 386 
    nvm->ops.update = & igb_update_nvm_checksum_82580;
    #line 387 
    break;
    #line 388 
    case (unsigned int)5: 
                          #line 388 
    ;
    #line 389 
    case (unsigned int)4: 
                          #line 389 
    ;
    #line 390 
    nvm->ops.validate = & igb_validate_nvm_checksum_i350;
    #line 391 
    nvm->ops.update = & igb_update_nvm_checksum_i350;
    #line 392 
    break;
    #line 393 
    default: 
             #line 393 
    ;
    #line 394 
    break;
  }
  #line 397 
  return 0;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_mac_params_82575(struct e1000_hw *hw)
{
  #line 406 
  struct e1000_mac_info *mac = & hw->mac;
  #line 407 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  #line 410 
  mac->mta_reg_count = (unsigned short)128U;
  #line 412 
  if (hw->mac.type == (unsigned int)e1000_82575) 
                                                 #line 412 
                                                 mac->uta_reg_count = (unsigned short)0U; else 
                                                                    #line 412 
                                                                    mac->uta_reg_count = (unsigned short)128U;
  #line 414 
  switch ((unsigned int)mac->type) {
    #line 415 
    case (unsigned int)2: 
                          #line 415 
    ;
    #line 416 
    mac->rar_entry_count = (unsigned short)24U;
    #line 417 
    break;
    #line 418 
    case (unsigned int)3: 
                          #line 418 
    ;
    #line 419 
    mac->rar_entry_count = (unsigned short)24U;
    #line 420 
    break;
    #line 421 
    case (unsigned int)4: 
                          #line 421 
    ;
    #line 422 
    case (unsigned int)5: 
                          #line 422 
    ;
    #line 423 
    mac->rar_entry_count = (unsigned short)32U;
    #line 424 
    break;
    #line 425 
    default: 
             #line 425 
    ;
    #line 426 
    mac->rar_entry_count = (unsigned short)16U;
    #line 427 
    break;
  }
  #line 430 
  if (mac->type > (unsigned int)e1000_82576) 
                                             #line 431 
                                             mac->ops.reset_hw = & igb_reset_hw_82580; else 
                                                                    #line 433 
                                                                    mac->ops.reset_hw = & igb_reset_hw_82575;
  #line 435 
  if (mac->type > (unsigned int)e1000_i354) {
    #line 436 
    mac->ops.acquire_swfw_sync = & igb_acquire_swfw_sync_i210;
    #line 437 
    mac->ops.release_swfw_sync = & igb_release_swfw_sync_i210;
  }
  else {
    #line 440 
    mac->ops.acquire_swfw_sync = & igb_acquire_swfw_sync_82575;
    #line 441 
    mac->ops.release_swfw_sync = & igb_release_swfw_sync_82575;
  }
  #line 444 
  if ((unsigned int)hw->mac.type + 4294967292U <= 1U) 
                                                      #line 445 
                                                      mac->ops.write_vfta = & igb_write_vfta_i350; else 
                                                                    #line 447 
                                                                    mac->ops.write_vfta = & igb_write_vfta;
  #line 450 
  mac->asf_firmware_present = (_Bool)1;
  #line 452 
  mac->arc_subsystem_valid = (_Bool)((igb_rd32(hw,23380U) & 14U) != 0U);
  #line 456 
  if (mac->type > (unsigned int)e1000_82580) 
                                             #line 457 
                                             dev_spec->eee_disable = (_Bool)0; else 
                                                                    #line 459 
                                                                    dev_spec->eee_disable = (_Bool)1;
  #line 461 
  if (mac->type > (unsigned int)e1000_i354) 
                                            #line 462 
                                            dev_spec->clear_semaphore_once = (_Bool)1;
  #line 464 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
                                                                   #line 464 
                                                                   mac->ops.setup_physical_interface = & igb_setup_copper_link_82575; else 
                                                                    #line 464 
                                                                    mac->ops.setup_physical_interface = & igb_setup_serdes_link_82575;
  #line 469 
  if ((unsigned int)mac->type + 4294967293U <= 1U) 
    #line 470 
    switch ((int)hw->device_id) {
      #line 472 
      case 1080: 
                 #line 472 
      ;
      #line 473 
      case 1082: 
                 #line 473 
      ;
      #line 474 
      case 1084: 
                 #line 474 
      ;
      #line 475 
      case 1088: 
                 #line 475 
      ;
      #line 476 
      break;
      #line 477 
      default: 
               #line 477 
      ;
      #line 478 
      hw->dev_spec._82575.mas_capable = (_Bool)1;
      #line 479 
      break;
    }
  #line 482 
  return 0;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_sfp_media_type_82575(struct e1000_hw *hw)
{
  #line 494 
  s32 ret_val = 3;
  #line 495 
  u32 ctrl_ext = 0U;
  #line 496 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  #line 497 
  struct e1000_sfp_flags *eth_flags = & dev_spec->eth_flags;
  #line 498 
  u8 tranceiver_type = (unsigned char)0U;
  #line 499 
  s32 timeout = 3;
  #line 502 
  ctrl_ext = igb_rd32(hw,24U);
  #line 503 
  ctrl_ext &= 4294967167U;
  {
    #line 505 
    union __anonunion___u_4308 __u;
    #line 504 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 504 
    u8 *hw_addr = (__u.__val);
    #line 504 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 504 
                                           writel(ctrl_ext | 33554432U,(void *)(hw_addr + 24U));
  }
  #line 506 
  igb_rd32(hw,8U);
  #line 509 
  while (timeout != 0) {
    #line 510 
    ret_val = igb_read_sfp_data_byte(hw,(unsigned short)0,& tranceiver_type);
    #line 513 
    if (ret_val == 0) 
                      #line 514 
                      break;
    #line 515 
    msleep(100U);
    #line 516 
    timeout --;
  }
  #line 518 
  if (ret_val != 0) 
                    #line 519 
                    goto out;
  #line 521 
  ret_val = igb_read_sfp_data_byte(hw,(unsigned short)6,(u8 *)eth_flags);
  #line 524 
  if (ret_val != 0) 
                    #line 525 
                    goto out;
  #line 528 
  if ((unsigned int)tranceiver_type + 254U <= 1U) {
    #line 530 
    dev_spec->module_plugged = (_Bool)1;
    #line 531 
    if ((unsigned int)eth_flags->e1000_base_lx != 0U || (unsigned int)eth_flags->e1000_base_sx != 0U) 
      #line 532 
      hw->phy.media_type = e1000_media_type_internal_serdes;
    else 
      #line 533 
      if ((unsigned int)eth_flags->e100_base_fx != 0U || (unsigned int)eth_flags->e100_base_lx != 0U) {
        #line 534 
        dev_spec->sgmii_active = (_Bool)1;
        #line 535 
        hw->phy.media_type = e1000_media_type_internal_serdes;
      }
      else 
        #line 536 
        if ((unsigned int)eth_flags->e1000_base_t != 0U) {
          #line 537 
          dev_spec->sgmii_active = (_Bool)1;
          #line 538 
          hw->phy.media_type = e1000_media_type_copper;
        }
        else {
          #line 540 
          hw->phy.media_type = e1000_media_type_unknown;
          {
            #line 541 
            bool branch;
            #line 541 
            struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igb", .function = (char *)"igb_set_sfp_media_type_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"PHY module has not been recognized\n", .lineno = (unsigned int)541U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 541 
            branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
            #line 541 
            if ((long)((long)((int)branch != 0)) != 0L) {
              #line 541 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,igb_get_hw_dev(hw),(char *)"PHY module has not been recognized\n");
            }
          }
          #line 542 
          goto out;
        }
  }
  else 
       #line 545 
       hw->phy.media_type = e1000_media_type_unknown;
  #line 547 
  ret_val = 0;
  #line 548 
  out: 
       #line 548 
  ;
  {
    #line 551 
    union __anonunion___u_4310 __u_0;
    #line 550 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 550 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 550 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 550 
                                             writel(ctrl_ext,(void *)(hw_addr_0 + 24U));
  }
  #line 551 
  return ret_val;
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_invariants_82575(struct e1000_hw *hw)
{
  #line 558 
  s32 ret_val;
  #line 556 
  struct e1000_mac_info *mac = & hw->mac;
  #line 557 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  #line 559 
  u32 ctrl_ext = 0U;
  #line 560 
  u32 link_mode = 0U;
  #line 562 
  switch ((int)hw->device_id) {
    #line 563 
    case 4263: 
               #line 563 
    ;
    #line 564 
    case 4265: 
               #line 564 
    ;
    #line 565 
    case 4310: 
               #line 565 
    ;
    #line 566 
    mac->type = e1000_82575;
    #line 567 
    break;
    #line 568 
    case 4297: 
               #line 568 
    ;
    #line 569 
    case 5386: 
               #line 569 
    ;
    #line 570 
    case 5400: 
               #line 570 
    ;
    #line 571 
    case 4326: 
               #line 571 
    ;
    #line 572 
    case 4327: 
               #line 572 
    ;
    #line 573 
    case 4328: 
               #line 573 
    ;
    #line 574 
    case 5414: 
               #line 574 
    ;
    #line 575 
    case 5389: 
               #line 575 
    ;
    #line 576 
    mac->type = e1000_82576;
    #line 577 
    break;
    #line 578 
    case 5390: 
               #line 578 
    ;
    #line 579 
    case 5391: 
               #line 579 
    ;
    #line 580 
    case 5415: 
               #line 580 
    ;
    #line 581 
    case 5392: 
               #line 581 
    ;
    #line 582 
    case 5393: 
               #line 582 
    ;
    #line 583 
    case 5398: 
               #line 583 
    ;
    #line 584 
    case 1080: 
               #line 584 
    ;
    #line 585 
    case 1082: 
               #line 585 
    ;
    #line 586 
    case 1084: 
               #line 586 
    ;
    #line 587 
    case 1088: 
               #line 587 
    ;
    #line 588 
    mac->type = e1000_82580;
    #line 589 
    break;
    #line 590 
    case 5409: 
               #line 590 
    ;
    #line 591 
    case 5410: 
               #line 591 
    ;
    #line 592 
    case 5411: 
               #line 592 
    ;
    #line 593 
    case 5412: 
               #line 593 
    ;
    #line 594 
    mac->type = e1000_i350;
    #line 595 
    break;
    #line 596 
    case 5427: 
               #line 596 
    ;
    #line 597 
    case 5430: 
               #line 597 
    ;
    #line 598 
    case 5431: 
               #line 598 
    ;
    #line 599 
    case 5432: 
               #line 599 
    ;
    #line 600 
    case 5499: 
               #line 600 
    ;
    #line 601 
    case 5500: 
               #line 601 
    ;
    #line 602 
    mac->type = e1000_i210;
    #line 603 
    break;
    #line 604 
    case 5433: 
               #line 604 
    ;
    #line 605 
    mac->type = e1000_i211;
    #line 606 
    break;
    #line 607 
    case 8000: 
               #line 607 
    ;
    #line 608 
    case 8001: 
               #line 608 
    ;
    #line 609 
    case 8005: 
               #line 609 
    ;
    #line 610 
    mac->type = e1000_i354;
    #line 611 
    break;
    #line 612 
    default: 
             #line 612 
    ;
    #line 613 
    return -5;
  }
  #line 623 
  hw->phy.media_type = e1000_media_type_copper;
  #line 624 
  dev_spec->sgmii_active = (_Bool)0;
  #line 625 
  dev_spec->module_plugged = (_Bool)0;
  #line 627 
  ctrl_ext = igb_rd32(hw,24U);
  #line 629 
  link_mode = ctrl_ext & 12582912U;
  #line 630 
  switch (link_mode) {
    #line 631 
    case (u32)4194304: 
                       #line 631 
    ;
    #line 632 
    hw->phy.media_type = e1000_media_type_internal_serdes;
    #line 633 
    break;
    #line 634 
    case (u32)8388608: 
                       #line 634 
    ;
    #line 636 
    if ((int)igb_sgmii_uses_mdio_82575(hw) != 0) {
      #line 637 
      hw->phy.media_type = e1000_media_type_copper;
      #line 638 
      dev_spec->sgmii_active = (_Bool)1;
      #line 639 
      break;
    }
    #line 642 
    case (u32)12582912: 
                        #line 642 
    ;
    #line 644 
    ret_val = igb_set_sfp_media_type_82575(hw);
    #line 645 
    if (ret_val != 0 || hw->phy.media_type == (unsigned int)e1000_media_type_unknown) {
      #line 650 
      hw->phy.media_type = e1000_media_type_internal_serdes;
      #line 652 
      if (link_mode == 8388608U) {
        #line 653 
        hw->phy.media_type = e1000_media_type_copper;
        #line 654 
        dev_spec->sgmii_active = (_Bool)1;
      }
      #line 657 
      break;
    }
    #line 661 
    ctrl_ext &= 4282384383U;
    #line 663 
    if ((int)dev_spec->sgmii_active != 0) 
                                          #line 664 
                                          ctrl_ext |= 8388608U; else 
                                                                  #line 666 
                                                                  ctrl_ext |= 12582912U;
    {
      #line 669 
      union __anonunion___u_4312 __u;
      #line 668 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 668 
      u8 *hw_addr = (__u.__val);
      #line 668 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 668 
                                             writel(ctrl_ext,(void *)(hw_addr + 24U));
    }
    #line 670 
    break;
    #line 671 
    default: 
             #line 671 
    ;
    #line 672 
    break;
  }
  #line 676 
  ret_val = igb_init_mac_params_82575(hw);
  #line 677 
  if (ret_val != 0) 
                    #line 678 
                    goto out;
  #line 681 
  ret_val = igb_init_nvm_params_82575(hw);
  #line 682 
  switch ((unsigned int)hw->mac.type) {
    #line 683 
    case (unsigned int)6: 
                          #line 683 
    ;
    #line 684 
    case (unsigned int)7: 
                          #line 684 
    ;
    #line 685 
    ret_val = igb_init_nvm_params_i210(hw);
    #line 686 
    break;
    #line 687 
    default: 
             #line 687 
    ;
    #line 688 
    break;
  }
  #line 691 
  if (ret_val != 0) 
                    #line 692 
                    goto out;
  #line 695 
  switch ((unsigned int)mac->type) {
    #line 696 
    case (unsigned int)2: 
                          #line 696 
    ;
    #line 697 
    case (unsigned int)4: 
                          #line 697 
    ;
    #line 698 
    igb_init_mbx_params_pf(hw);
    #line 699 
    break;
    #line 700 
    default: 
             #line 700 
    ;
    #line 701 
    break;
  }
  #line 705 
  ret_val = igb_init_phy_params_82575(hw);
  #line 707 
  out: 
       #line 707 
  ;
  #line 708 
  return ret_val;
}

#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_acquire_phy_82575(struct e1000_hw *hw)
{
  #line 720 
  u16 mask = (unsigned short)2U;
  #line 722 
  if ((unsigned int)hw->bus.func == 1U) 
                                        #line 723 
                                        mask = (unsigned short)4U;
  else 
    #line 724 
    if ((unsigned int)hw->bus.func == 2U) 
                                          #line 725 
                                          mask = (unsigned short)32U;
    else 
      #line 726 
      if ((unsigned int)hw->bus.func == 3U) 
                                            #line 727 
                                            mask = (unsigned short)64U;
  #line 729 
  return (*(hw->mac.ops.acquire_swfw_sync))(hw,(unsigned short)((int)mask));
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static void igb_release_phy_82575(struct e1000_hw *hw)
{
  #line 741 
  u16 mask = (unsigned short)2U;
  #line 743 
  if ((unsigned int)hw->bus.func == 1U) 
                                        #line 744 
                                        mask = (unsigned short)4U;
  else 
    #line 745 
    if ((unsigned int)hw->bus.func == 2U) 
                                          #line 746 
                                          mask = (unsigned short)32U;
    else 
      #line 747 
      if ((unsigned int)hw->bus.func == 3U) 
                                            #line 748 
                                            mask = (unsigned short)64U;
  #line 750 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)((int)mask));
  #line 751 
  return;
}

#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_read_phy_reg_sgmii_82575(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 765 
  s32 ret_val = -4;
  #line 767 
  if (offset > 255U) {
    {
      #line 768 
      bool branch;
      #line 768 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"igb", .function = (char *)"igb_read_phy_reg_sgmii_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"PHY Address %u is out of range\n", .lineno = (unsigned int)768U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 768 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 768 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 768 
        ;
        #line 768 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,igb_get_hw_dev(hw),(char *)"PHY Address %u is out of range\n",offset);
      }
    }
    #line 769 
    goto out;
  }
  #line 772 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 773 
  if (ret_val != 0) 
                    #line 774 
                    goto out;
  #line 776 
  ret_val = igb_read_phy_reg_i2c(hw,offset,data);
  #line 778 
  (*(hw->phy.ops.release))(hw);
  #line 780 
  out: 
       #line 780 
  ;
  #line 781 
  return ret_val;
}

#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_write_phy_reg_sgmii_82575(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 796 
  s32 ret_val = -4;
  #line 799 
  if (offset > 255U) {
    {
      #line 800 
      bool branch;
      #line 800 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"igb", .function = (char *)"igb_write_phy_reg_sgmii_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"PHY Address %d is out of range\n", .lineno = (unsigned int)800U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 800 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 800 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 800 
        ;
        #line 800 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,igb_get_hw_dev(hw),(char *)"PHY Address %d is out of range\n",offset);
      }
    }
    #line 801 
    goto out;
  }
  #line 804 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 805 
  if (ret_val != 0) 
                    #line 806 
                    goto out;
  #line 808 
  ret_val = igb_write_phy_reg_i2c(hw,offset,(unsigned short)((int)data));
  #line 810 
  (*(hw->phy.ops.release))(hw);
  #line 812 
  out: 
       #line 812 
  ;
  #line 813 
  return ret_val;
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_phy_id_82575(struct e1000_hw *hw)
{
  #line 827 
  u16 phy_id;
  #line 828 
  u32 ctrl_ext;
  #line 829 
  u32 mdic;
  #line 825 
  struct e1000_phy_info *phy = & hw->phy;
  #line 826 
  s32 ret_val = 0;
  #line 832 
  if (hw->mac.type == (unsigned int)e1000_i354) 
                                                #line 833 
                                                igb_get_phy_id(hw);
  #line 841 
  if (! igb_sgmii_active_82575(hw)) {
    #line 842 
    phy->addr = 1U;
    #line 843 
    ret_val = igb_get_phy_id(hw);
    #line 844 
    goto out;
  }
  #line 847 
  if ((int)igb_sgmii_uses_mdio_82575(hw) != 0) {
    #line 848 
    switch ((unsigned int)hw->mac.type) {
      #line 849 
      case (unsigned int)1: 
                            #line 849 
      ;
      #line 850 
      case (unsigned int)2: 
                            #line 850 
      ;
      #line 851 
      mdic = igb_rd32(hw,32U);
      #line 852 
      mdic &= 65011712U;
      #line 853 
      phy->addr = mdic >> 21;
      #line 854 
      break;
      #line 855 
      case (unsigned int)3: 
                            #line 855 
      ;
      #line 856 
      case (unsigned int)4: 
                            #line 856 
      ;
      #line 857 
      case (unsigned int)5: 
                            #line 857 
      ;
      #line 858 
      case (unsigned int)6: 
                            #line 858 
      ;
      #line 859 
      case (unsigned int)7: 
                            #line 859 
      ;
      #line 860 
      mdic = igb_rd32(hw,3588U);
      #line 861 
      mdic &= 65011712U;
      #line 862 
      phy->addr = mdic >> 21;
      #line 863 
      break;
      #line 864 
      default: 
               #line 864 
      ;
      #line 865 
      ret_val = -2;
      #line 866 
      goto out;
    }
    #line 868 
    ret_val = igb_get_phy_id(hw);
    #line 869 
    goto out;
  }
  #line 873 
  ctrl_ext = igb_rd32(hw,24U);
  {
    #line 875 
    union __anonunion___u_4314 __u;
    #line 874 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 874 
    u8 *hw_addr = (__u.__val);
    #line 874 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 874 
                                           writel(ctrl_ext & 4294967167U,(void *)(hw_addr + 24U));
  }
  #line 875 
  igb_rd32(hw,8U);
  #line 876 
  msleep(300U);
  #line 881 
  phy->addr = 1U;
  #line 881 
  while (phy->addr <= 7U) {
    #line 882 
    ret_val = igb_read_phy_reg_sgmii_82575(hw,2U,& phy_id);
    #line 883 
    if (ret_val == 0) {
      {
        #line 884 
        bool branch;
        #line 884 
        struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"igb", .function = (char *)"igb_get_phy_id_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Vendor ID 0x%08X read at address %u\n", .lineno = (unsigned int)884U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 884 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
        #line 884 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 884 
          ;
          #line 884 
          ;
          #line 884 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,igb_get_hw_dev(hw),(char *)"Vendor ID 0x%08X read at address %u\n",(int)phy_id,phy->addr);
        }
      }
      #line 889 
      if ((unsigned int)phy_id == 321U) 
                                        #line 890 
                                        break;
    }
    else {
      #line 892 
      bool branch_0;
      #line 892 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"igb", .function = (char *)"igb_get_phy_id_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"PHY address %u was unreadable\n", .lineno = (unsigned int)892U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 892 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 892 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 892 
        ;
        #line 892 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,igb_get_hw_dev(hw),(char *)"PHY address %u was unreadable\n",phy->addr);
      }
    }
    #line 881 
    (phy->addr) ++;
  }
  #line 897 
  if (phy->addr == 8U) {
    #line 898 
    phy->addr = 0U;
    #line 899 
    ret_val = -2;
    #line 900 
    goto out;
  }
  else 
       #line 902 
       ret_val = igb_get_phy_id(hw);
  {
    #line 907 
    union __anonunion___u_4316 __u_0;
    #line 906 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 906 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 906 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 906 
                                             writel(ctrl_ext,(void *)(hw_addr_0 + 24U));
  }
  #line 908 
  out: 
       #line 908 
  ;
  #line 909 
  return ret_val;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_phy_hw_reset_sgmii_82575(struct e1000_hw *hw)
{
  #line 921 
  s32 ret_val;
  #line 920 
  struct e1000_phy_info *phy = & hw->phy;
  {
    #line 927 
    bool branch;
    #line 927 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"igb", .function = (char *)"igb_phy_hw_reset_sgmii_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Soft resetting SGMII attached PHY...\n", .lineno = (unsigned int)927U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 927 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 927 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 927 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,igb_get_hw_dev(hw),(char *)"Soft resetting SGMII attached PHY...\n");
    }
  }
  #line 932 
  ret_val = (*(hw->phy.ops.write_reg))(hw,27U,(unsigned short)32900);
  #line 933 
  if (ret_val != 0) 
                    #line 934 
                    goto out;
  #line 936 
  ret_val = igb_phy_sw_reset(hw);
  #line 937 
  if (ret_val != 0) 
                    #line 938 
                    goto out;
  #line 940 
  if (phy->id == 21040592U) 
                            #line 941 
                            ret_val = igb_initialize_M88E1512_phy(hw);
  #line 942 
  if (phy->id == 21040800U) 
                            #line 943 
                            ret_val = igb_initialize_M88E1543_phy(hw);
  #line 944 
  out: 
       #line 944 
  ;
  #line 945 
  return ret_val;
}

#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_d0_lplu_state_82575(struct e1000_hw *hw, bool active)
{
  #line 964 
  s32 ret_val;
  #line 965 
  u16 data;
  #line 963 
  struct e1000_phy_info *phy = & hw->phy;
  #line 967 
  ret_val = (*(phy->ops.read_reg))(hw,25U,& data);
  #line 968 
  if (ret_val != 0) 
                    #line 969 
                    goto out;
  #line 971 
  if ((int)active != 0) {
    #line 972 
    data = (unsigned short)((unsigned int)data | 2U);
    #line 973 
    ret_val = (*(phy->ops.write_reg))(hw,25U,(unsigned short)((int)data));
    #line 975 
    if (ret_val != 0) 
                      #line 976 
                      goto out;
    #line 979 
    ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
    #line 981 
    data = (unsigned short)((unsigned int)data & 65407U);
    #line 982 
    ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
    #line 984 
    if (ret_val != 0) 
                      #line 985 
                      goto out;
  }
  else {
    #line 987 
    data = (unsigned short)((unsigned int)data & 65533U);
    #line 988 
    ret_val = (*(phy->ops.write_reg))(hw,25U,(unsigned short)((int)data));
    #line 995 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      #line 996 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      #line 998 
      if (ret_val != 0) 
                        #line 999 
                        goto out;
      #line 1001 
      data = (unsigned short)((unsigned int)data | 128U);
      #line 1002 
      ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
      #line 1004 
      if (ret_val != 0) 
                        #line 1005 
                        goto out;
    }
    else 
      #line 1006 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        #line 1007 
        ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
        #line 1009 
        if (ret_val != 0) 
                          #line 1010 
                          goto out;
        #line 1012 
        data = (unsigned short)((unsigned int)data & 65407U);
        #line 1013 
        ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
        #line 1015 
        if (ret_val != 0) 
                          #line 1016 
                          goto out;
      }
  }
  #line 1020 
  out: 
       #line 1020 
  ;
  #line 1021 
  return ret_val;
}

#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_d0_lplu_state_82580(struct e1000_hw *hw, bool active)
{
  #line 1040 
  u16 data;
  #line 1039 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1042 
  data = (unsigned short)igb_rd32(hw,3604U);
  #line 1044 
  if ((int)active != 0) {
    #line 1045 
    data = (unsigned short)((unsigned int)data | 2U);
    #line 1048 
    data = (unsigned short)((unsigned int)data & 65534U);
  }
  else {
    #line 1050 
    data = (unsigned short)((unsigned int)data & 65533U);
    #line 1057 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) 
                                                                #line 1058 
                                                                data = (unsigned short)((unsigned int)data | 1U);
    else 
      #line 1059 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) 
                                                                   #line 1060 
                                                                   data = (unsigned short)((unsigned int)data & 65534U);
  }
  {
    #line 1063 
    union __anonunion___u_4318 __u;
    #line 1062 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1062 
    u8 *hw_addr = (__u.__val);
    #line 1062 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1062 
                                           writel((unsigned int)data,(void *)(hw_addr + 3604U));
  }
  #line 1063 
  return 0;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_d3_lplu_state_82580(struct e1000_hw *hw, bool active)
{
  #line 1083 
  u16 data;
  #line 1082 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1085 
  data = (unsigned short)igb_rd32(hw,3604U);
  #line 1087 
  if (! active) {
    #line 1088 
    data = (unsigned short)((unsigned int)data & 65531U);
    #line 1094 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) 
                                                                #line 1095 
                                                                data = (unsigned short)((unsigned int)data | 1U);
    else 
      #line 1096 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) 
                                                                   #line 1097 
                                                                   data = (unsigned short)((unsigned int)data & 65534U);
  }
  else 
    #line 1098 
    if (((unsigned int)phy->autoneg_advertised == 47U || (unsigned int)phy->autoneg_advertised == 15U) || (unsigned int)phy->autoneg_advertised == 3U) {
      #line 1101 
      data = (unsigned short)((unsigned int)data | 4U);
      #line 1103 
      data = (unsigned short)((unsigned int)data & 65534U);
    }
  {
    #line 1107 
    union __anonunion___u_4320 __u;
    #line 1106 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1106 
    u8 *hw_addr = (__u.__val);
    #line 1106 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1106 
                                           writel((unsigned int)data,(void *)(hw_addr + 3604U));
  }
  #line 1107 
  return 0;
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_acquire_nvm_82575(struct e1000_hw *hw)
{
  #line 1121 
  s32 ret_val;
  #line 1123 
  ret_val = (*(hw->mac.ops.acquire_swfw_sync))(hw,(unsigned short)1);
  #line 1124 
  if (ret_val != 0) 
                    #line 1125 
                    goto out;
  #line 1127 
  ret_val = igb_acquire_nvm(hw);
  #line 1129 
  if (ret_val != 0) 
                    #line 1130 
                    (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)1);
  #line 1132 
  out: 
       #line 1132 
  ;
  #line 1133 
  return ret_val;
}

#line 1143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static void igb_release_nvm_82575(struct e1000_hw *hw)
{
  #line 1145 
  igb_release_nvm(hw);
  #line 1146 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)1);
  #line 1147 
  return;
}

#line 1157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_acquire_swfw_sync_82575(struct e1000_hw *hw, u16 mask)
{
  #line 1159 
  u32 swfw_sync;
  #line 1160 
  u32 swmask = (unsigned int)mask;
  #line 1161 
  u32 fwmask = (unsigned int)((int)mask << 16);
  #line 1162 
  s32 ret_val = 0;
  #line 1163 
  s32 i = 0;
  #line 1163 
  s32 timeout = 200;
  #line 1165 
  while (i < timeout) {
    #line 1166 
    if (igb_get_hw_semaphore(hw) != 0) {
      #line 1167 
      ret_val = -13;
      #line 1168 
      goto out;
    }
    #line 1171 
    swfw_sync = igb_rd32(hw,23388U);
    #line 1172 
    if (((fwmask | swmask) & swfw_sync) == 0U) 
                                               #line 1173 
                                               break;
    #line 1178 
    igb_put_hw_semaphore(hw);
    #line 1179 
    __const_udelay(21475000UL);
    #line 1180 
    i ++;
  }
  #line 1183 
  if (i == timeout) {
    {
      #line 1184 
      bool branch;
      #line 1184 
      struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"igb", .function = (char *)"igb_acquire_swfw_sync_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Driver can\'t access resource, SW_FW_SYNC timeout.\n", .lineno = (unsigned int)1184U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1184 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
      #line 1184 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1184 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,igb_get_hw_dev(hw),(char *)"Driver can\'t access resource, SW_FW_SYNC timeout.\n");
      }
    }
    #line 1185 
    ret_val = -13;
    #line 1186 
    goto out;
  }
  #line 1189 
  swfw_sync |= swmask;
  {
    #line 1191 
    union __anonunion___u_4322 __u;
    #line 1190 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1190 
    u8 *hw_addr = (__u.__val);
    #line 1190 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1190 
                                           writel(swfw_sync,(void *)(hw_addr + 23388U));
  }
  #line 1192 
  igb_put_hw_semaphore(hw);
  #line 1194 
  out: 
       #line 1194 
  ;
  #line 1195 
  return ret_val;
}

#line 1206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static void igb_release_swfw_sync_82575(struct e1000_hw *hw, u16 mask)
{
  #line 1208 
  u32 swfw_sync;
  #line 1210 
  while (1) {
    #line 1210 
    if (! (igb_get_hw_semaphore(hw) != 0)) 
                                           #line 1210 
                                           break;
  }
  #line 1213 
  swfw_sync = igb_rd32(hw,23388U);
  #line 1214 
  swfw_sync = (unsigned int)(~ ((int)mask)) & swfw_sync;
  {
    #line 1216 
    union __anonunion___u_4324 __u;
    #line 1215 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1215 
    u8 *hw_addr = (__u.__val);
    #line 1215 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1215 
                                           writel(swfw_sync,(void *)(hw_addr + 23388U));
  }
  #line 1217 
  igb_put_hw_semaphore(hw);
  #line 1218 
  return;
}

#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_cfg_done_82575(struct e1000_hw *hw)
{
  #line 1232 
  s32 timeout = 100;
  #line 1233 
  u32 mask = 262144U;
  #line 1235 
  if ((unsigned int)hw->bus.func == 1U) 
                                        #line 1236 
                                        mask = 524288U;
  else 
    #line 1237 
    if ((unsigned int)hw->bus.func == 2U) 
                                          #line 1238 
                                          mask = 1048576U;
    else 
      #line 1239 
      if ((unsigned int)hw->bus.func == 3U) 
                                            #line 1240 
                                            mask = 2097152U;
  #line 1242 
  while (timeout != 0) {
    #line 1243 
    ;
    #line 1243 
    if ((igb_rd32(hw,4112U) & mask) != 0U) 
                                           #line 1244 
                                           break;
    #line 1245 
    usleep_range(1000UL,2000UL);
    #line 1246 
    timeout --;
  }
  #line 1248 
  if (timeout == 0) {
    #line 1249 
    bool branch;
    #line 1249 
    struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"igb", .function = (char *)"igb_get_cfg_done_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"MNG configuration cycle has not completed.\n", .lineno = (unsigned int)1249U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1249 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
    #line 1249 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1249 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,igb_get_hw_dev(hw),(char *)"MNG configuration cycle has not completed.\n");
    }
  }
  #line 1252 
  if ((igb_rd32(hw,16U) & 256U) == 0U) 
    #line 1252 
    if (hw->phy.type == (unsigned int)e1000_phy_igp_3) 
                                                       #line 1254 
                                                       igb_phy_init_script_igp3(hw);
  #line 1256 
  return 0;
}

#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_link_up_info_82575(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  #line 1272 
  s32 ret_val;
  #line 1274 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
                                                                   #line 1275 
                                                                   ret_val = igb_get_pcs_speed_and_duplex_82575(hw,speed,duplex); else 
                                                                    #line 1278 
                                                                    ret_val = igb_get_speed_and_duplex_copper(hw,speed,duplex);
  #line 1281 
  return ret_val;
}

#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_check_for_link_82575(struct e1000_hw *hw)
{
  #line 1293 
  s32 ret_val;
  #line 1294 
  u16 speed;
  #line 1294 
  u16 duplex;
  #line 1296 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    #line 1297 
    ret_val = igb_get_pcs_speed_and_duplex_82575(hw,& speed,& duplex);
    #line 1303 
    hw->mac.get_link_status = (_Bool)(! ((int)hw->mac.serdes_has_link != 0));
    #line 1310 
    ret_val = igb_config_fc_after_link_up(hw);
    #line 1311 
    if (ret_val != 0) {
      #line 1312 
      bool branch;
      #line 1312 
      struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"igb", .function = (char *)"igb_check_for_link_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Error configuring flow control\n", .lineno = (unsigned int)1312U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1312 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
      #line 1312 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1312 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,igb_get_hw_dev(hw),(char *)"Error configuring flow control\n");
      }
    }
  }
  else 
       #line 1314 
       ret_val = igb_check_for_copper_link(hw);
  #line 1317 
  return ret_val;
}

#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_power_up_serdes_link_82575(struct e1000_hw *hw)
{
  #line 1326 
  u32 reg;
  #line 1329 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_internal_serdes) {
    #line 1330 
    if (! igb_sgmii_active_82575(hw)) 
                                      #line 1331 
                                      return;
  }
  #line 1334 
  reg = igb_rd32(hw,16896U);
  #line 1335 
  reg |= 8U;
  {
    #line 1337 
    union __anonunion___u_4326 __u;
    #line 1336 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1336 
    u8 *hw_addr = (__u.__val);
    #line 1336 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1336 
                                           writel(reg,(void *)(hw_addr + 16896U));
  }
  #line 1339 
  reg = igb_rd32(hw,24U);
  #line 1340 
  reg &= 4294967167U;
  {
    #line 1342 
    union __anonunion___u_4328 __u_0;
    #line 1341 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1341 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 1341 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 1341 
                                             writel(reg,(void *)(hw_addr_0 + 24U));
  }
  #line 1344 
  igb_rd32(hw,8U);
  #line 1345 
  usleep_range(1000UL,2000UL);
  #line 1346 
  return;
}

#line 1357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_pcs_speed_and_duplex_82575(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  #line 1361 
  u32 pcs;
  #line 1361 
  u32 status;
  #line 1360 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1364 
  mac->serdes_has_link = (_Bool)0;
  #line 1365 
  *speed = (unsigned short)0U;
  #line 1366 
  *duplex = (unsigned short)0U;
  #line 1372 
  pcs = igb_rd32(hw,16908U);
  #line 1378 
  if ((pcs & 1U) != 0U && (pcs & 16U) != 0U) {
    #line 1379 
    mac->serdes_has_link = (_Bool)1;
    #line 1382 
    if ((pcs & 4U) != 0U) 
                          #line 1383 
                          *speed = (unsigned short)1000U;
    else 
      #line 1384 
      if ((pcs & 2U) != 0U) 
                            #line 1385 
                            *speed = (unsigned short)100U; else 
                                                                #line 1387 
                                                                *speed = (unsigned short)10U;
    #line 1390 
    if ((pcs & 8U) != 0U) 
                          #line 1391 
                          *duplex = (unsigned short)2U; else 
                                                             #line 1393 
                                                             *duplex = (unsigned short)1U;
    #line 1396 
    if (mac->type == (unsigned int)e1000_i354) {
      #line 1397 
      status = igb_rd32(hw,8U);
      #line 1398 
      if ((status & 4096U) != 0U && (status & 8192U) == 0U) {
        #line 1400 
        *speed = (unsigned short)2500U;
        #line 1401 
        *duplex = (unsigned short)2U;
        {
          #line 1402 
          bool branch;
          #line 1402 
          struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"igb", .function = (char *)"igb_get_pcs_speed_and_duplex_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"2500 Mbs, ", .lineno = (unsigned int)1402U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1402 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
          #line 1402 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 1402 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,igb_get_hw_dev(hw),(char *)"2500 Mbs, ");
          }
        }
        {
          #line 1403 
          bool branch_0;
          #line 1403 
          struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"igb", .function = (char *)"igb_get_pcs_speed_and_duplex_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Full Duplex\n", .lineno = (unsigned int)1403U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1403 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
          #line 1403 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 1403 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,igb_get_hw_dev(hw),(char *)"Full Duplex\n");
          }
        }
      }
    }
  }
  #line 1409 
  return 0;
}

#line 1419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_shutdown_serdes_link_82575(struct e1000_hw *hw)
{
  #line 1421 
  u32 reg;
  #line 1423 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_internal_serdes) {
    #line 1423 
    if ((int)igb_sgmii_active_82575(hw) != 0) 
                                              #line 1425 
                                              return;
  }
  #line 1427 
  if (! igb_enable_mng_pass_thru(hw)) {
    #line 1429 
    reg = igb_rd32(hw,16896U);
    #line 1430 
    reg &= 4294967287U;
    {
      #line 1432 
      union __anonunion___u_4330 __u;
      #line 1431 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1431 
      u8 *hw_addr = (__u.__val);
      #line 1431 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1431 
                                             writel(reg,(void *)(hw_addr + 16896U));
    }
    #line 1434 
    reg = igb_rd32(hw,24U);
    #line 1435 
    reg |= 128U;
    {
      #line 1437 
      union __anonunion___u_4332 __u_0;
      #line 1436 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1436 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 1436 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 1436 
                                               writel(reg,(void *)(hw_addr_0 + 24U));
    }
    #line 1439 
    igb_rd32(hw,8U);
    #line 1440 
    usleep_range(1000UL,2000UL);
  }
  #line 1442 
  return;
}

#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_reset_hw_82575(struct e1000_hw *hw)
{
  #line 1453 
  u32 ctrl;
  #line 1454 
  s32 ret_val;
  #line 1459 
  ret_val = igb_disable_pcie_master(hw);
  #line 1460 
  if (ret_val != 0) {
    #line 1461 
    bool branch;
    #line 1461 
    struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"igb", .function = (char *)"igb_reset_hw_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"PCI-E Master disable polling has failed.\n", .lineno = (unsigned int)1461U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1461 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
    #line 1461 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1461 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,igb_get_hw_dev(hw),(char *)"PCI-E Master disable polling has failed.\n");
    }
  }
  #line 1464 
  ret_val = igb_set_pcie_completion_timeout(hw);
  #line 1465 
  if (ret_val != 0) {
    #line 1466 
    bool branch_0;
    #line 1466 
    struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"igb", .function = (char *)"igb_reset_hw_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"PCI-E Set completion timeout has failed.\n", .lineno = (unsigned int)1466U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1466 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
    #line 1466 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 1466 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,igb_get_hw_dev(hw),(char *)"PCI-E Set completion timeout has failed.\n");
    }
  }
  {
    #line 1468 
    bool branch_1;
    #line 1468 
    struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"igb", .function = (char *)"igb_reset_hw_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Masking off all interrupts\n", .lineno = (unsigned int)1468U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1468 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
    #line 1468 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 1468 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,igb_get_hw_dev(hw),(char *)"Masking off all interrupts\n");
    }
  }
  {
    #line 1470 
    union __anonunion___u_4334 __u;
    #line 1469 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1469 
    u8 *hw_addr = (__u.__val);
    #line 1469 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1469 
                                           writel(4294967295U,(void *)(hw_addr + 216U));
  }
  {
    #line 1472 
    union __anonunion___u_4336 __u_0;
    #line 1471 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1471 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 1471 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 1471 
                                             writel(0U,(void *)(hw_addr_0 + 256U));
  }
  {
    #line 1473 
    union __anonunion___u_4338 __u_1;
    #line 1472 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 1472 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 1472 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 1472 
                                             writel(8U,(void *)(hw_addr_1 + 1024U));
  }
  #line 1473 
  igb_rd32(hw,8U);
  #line 1475 
  usleep_range(10000UL,20000UL);
  #line 1477 
  ctrl = igb_rd32(hw,0U);
  {
    #line 1479 
    bool branch_2;
    #line 1479 
    struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"igb", .function = (char *)"igb_reset_hw_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Issuing a global reset to MAC\n", .lineno = (unsigned int)1479U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1479 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
    #line 1479 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 1479 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,igb_get_hw_dev(hw),(char *)"Issuing a global reset to MAC\n");
    }
  }
  {
    #line 1481 
    union __anonunion___u_4340 __u_2;
    #line 1480 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 1480 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 1480 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                             #line 1480 
                                             writel(ctrl | 67108864U,(void *)hw_addr_2);
  }
  #line 1482 
  ret_val = igb_get_auto_rd_done(hw);
  #line 1483 
  if (ret_val != 0) {
    #line 1488 
    bool branch_3;
    #line 1488 
    struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"igb", .function = (char *)"igb_reset_hw_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Auto Read Done did not complete\n", .lineno = (unsigned int)1488U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1488 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
    #line 1488 
    if ((long)((long)((int)branch_3 != 0)) != 0L) {
      #line 1488 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,igb_get_hw_dev(hw),(char *)"Auto Read Done did not complete\n");
    }
  }
  #line 1492 
  if ((igb_rd32(hw,16U) & 256U) == 0U) 
                                       #line 1493 
                                       igb_reset_init_script_82575(hw);
  {
    #line 1497 
    union __anonunion___u_4342 __u_3;
    #line 1496 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 1496 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 1496 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                             #line 1496 
                                             writel(4294967295U,(void *)(hw_addr_3 + 216U));
  }
  #line 1497 
  igb_rd32(hw,192U);
  #line 1500 
  ret_val = igb_check_alt_mac_addr(hw);
  #line 1502 
  return ret_val;
}

#line 1511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_hw_82575(struct e1000_hw *hw)
{
  #line 1514 
  s32 ret_val;
  #line 1515 
  u16 i;
  #line 1513 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1515 
  u16 rar_count = mac->rar_entry_count;
  #line 1517 
  if (hw->mac.type > (unsigned int)e1000_i354) {
    #line 1518 
    if (! igb_get_flash_presence_i210(hw)) {
      #line 1519 
      ret_val = igb_pll_workaround_i210(hw);
      #line 1520 
      if (ret_val != 0) 
                        #line 1521 
                        return ret_val;
    }
  }
  #line 1525 
  ret_val = igb_id_led_init(hw);
  #line 1526 
  if (ret_val != 0) {
    #line 1527 
    bool branch;
    #line 1527 
    struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"igb", .function = (char *)"igb_init_hw_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Error initializing identification LED\n", .lineno = (unsigned int)1527U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1527 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
    #line 1527 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1527 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,igb_get_hw_dev(hw),(char *)"Error initializing identification LED\n");
    }
  }
  {
    #line 1532 
    bool branch_0;
    #line 1532 
    struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"igb", .function = (char *)"igb_init_hw_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Initializing the IEEE VLAN\n", .lineno = (unsigned int)1532U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1532 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
    #line 1532 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 1532 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,igb_get_hw_dev(hw),(char *)"Initializing the IEEE VLAN\n");
    }
  }
  #line 1533 
  igb_clear_vfta(hw);
  #line 1536 
  igb_init_rx_addrs(hw,(unsigned short)((int)rar_count));
  {
    #line 1539 
    bool branch_1;
    #line 1539 
    struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"igb", .function = (char *)"igb_init_hw_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Zeroing the MTA\n", .lineno = (unsigned int)1539U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1539 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
    #line 1539 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 1539 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug462,igb_get_hw_dev(hw),(char *)"Zeroing the MTA\n");
    }
  }
  #line 1540 
  i = (unsigned short)0U;
  #line 1540 
  while ((int)mac->mta_reg_count > (int)i) {
    {
      #line 1542 
      union __anonunion___u_4344 __u;
      #line 1541 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1541 
      u8 *hw_addr = (__u.__val);
      #line 1541 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1541 
                                             writel(0U,(void *)(hw_addr + (unsigned long)(((int)i << 2) + 20992)));
    }
    #line 1540 
    i = (u16)((int)i + 1);
  }
  {
    #line 1544 
    bool branch_2;
    #line 1544 
    struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"igb", .function = (char *)"igb_init_hw_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Zeroing the UTA\n", .lineno = (unsigned int)1544U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1544 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
    #line 1544 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 1544 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug463,igb_get_hw_dev(hw),(char *)"Zeroing the UTA\n");
    }
  }
  #line 1545 
  i = (unsigned short)0U;
  #line 1545 
  while ((int)mac->uta_reg_count > (int)i) {
    {
      #line 1547 
      union __anonunion___u_4346 __u_0;
      #line 1546 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1546 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 1546 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 1546 
                                               writel(0U,(void *)(hw_addr_0 + (unsigned long)(((int)i << 2) + 40960)));
    }
    #line 1545 
    i = (u16)((int)i + 1);
  }
  #line 1549 
  ret_val = igb_setup_link(hw);
  #line 1556 
  igb_clear_hw_cntrs_82575(hw);
  #line 1557 
  return ret_val;
}

#line 1568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_setup_copper_link_82575(struct e1000_hw *hw)
{
  #line 1570 
  u32 ctrl;
  #line 1571 
  s32 ret_val;
  #line 1572 
  u32 phpm_reg;
  #line 1574 
  ctrl = igb_rd32(hw,0U);
  #line 1575 
  ctrl |= 64U;
  #line 1576 
  ctrl &= 4294961151U;
  {
    #line 1578 
    union __anonunion___u_4348 __u;
    #line 1577 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1577 
    u8 *hw_addr = (__u.__val);
    #line 1577 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1577 
                                           writel(ctrl,(void *)hw_addr);
  }
  #line 1580 
  switch ((unsigned int)hw->mac.type) {
    #line 1581 
    case (unsigned int)3: 
                          #line 1581 
    ;
    #line 1582 
    case (unsigned int)4: 
                          #line 1582 
    ;
    #line 1583 
    case (unsigned int)6: 
                          #line 1583 
    ;
    #line 1584 
    case (unsigned int)7: 
                          #line 1584 
    ;
    #line 1585 
    phpm_reg = igb_rd32(hw,3604U);
    #line 1586 
    phpm_reg &= 4294967263U;
    {
      #line 1588 
      union __anonunion___u_4350 __u_0;
      #line 1587 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1587 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 1587 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 1587 
                                               writel(phpm_reg,(void *)(hw_addr_0 + 3604U));
    }
    #line 1588 
    break;
    #line 1589 
    default: 
             #line 1589 
    ;
    #line 1590 
    break;
  }
  #line 1593 
  ret_val = igb_setup_serdes_link_82575(hw);
  #line 1594 
  if (ret_val != 0) 
                    #line 1595 
                    goto out;
  #line 1597 
  if ((int)igb_sgmii_active_82575(hw) != 0) 
    #line 1597 
    if (! hw->phy.reset_disable) {
      #line 1599 
      msleep(300U);
      #line 1601 
      ret_val = (*(hw->phy.ops.reset))(hw);
      #line 1602 
      if (ret_val != 0) {
        {
          #line 1603 
          bool branch;
          #line 1603 
          struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"igb", .function = (char *)"igb_setup_copper_link_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Error resetting the PHY.\n", .lineno = (unsigned int)1603U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1603 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
          #line 1603 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 1603 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug464,igb_get_hw_dev(hw),(char *)"Error resetting the PHY.\n");
          }
        }
        #line 1604 
        goto out;
      }
    }
  #line 1607 
  switch ((unsigned int)hw->phy.type) {
    #line 1608 
    case (unsigned int)9: 
                          #line 1608 
    ;
    #line 1609 
    case (unsigned int)2: 
                          #line 1609 
    ;
    #line 1610 
    switch (hw->phy.id) {
      #line 1611 
      case (u32)21040576: 
                          #line 1611 
      ;
      #line 1612 
      case (u32)21040272: 
                          #line 1612 
      ;
      #line 1613 
      case (u32)21040800: 
                          #line 1613 
      ;
      #line 1614 
      case (u32)21040592: 
                          #line 1614 
      ;
      #line 1615 
      case (u32)21040128: 
                          #line 1615 
      ;
      #line 1616 
      ret_val = igb_copper_link_setup_m88_gen2(hw);
      #line 1617 
      break;
      #line 1618 
      default: 
               #line 1618 
      ;
      #line 1619 
      ret_val = igb_copper_link_setup_m88(hw);
      #line 1620 
      break;
    }
    #line 1622 
    break;
    #line 1623 
    case (unsigned int)6: 
                          #line 1623 
    ;
    #line 1624 
    ret_val = igb_copper_link_setup_igp(hw);
    #line 1625 
    break;
    #line 1626 
    case (unsigned int)8: 
                          #line 1626 
    ;
    #line 1627 
    ret_val = igb_copper_link_setup_82580(hw);
    #line 1628 
    break;
    #line 1629 
    case (unsigned int)10: 
                           #line 1629 
    ;
    #line 1630 
    ret_val = 0;
    #line 1631 
    break;
    #line 1632 
    default: 
             #line 1632 
    ;
    #line 1633 
    ret_val = -2;
    #line 1634 
    break;
  }
  #line 1637 
  if (ret_val != 0) 
                    #line 1638 
                    goto out;
  #line 1640 
  ret_val = igb_setup_copper_link(hw);
  #line 1641 
  out: 
       #line 1641 
  ;
  #line 1642 
  return ret_val;
}

#line 1654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_setup_serdes_link_82575(struct e1000_hw *hw)
{
  #line 1656 
  u32 ctrl_ext;
  #line 1656 
  u32 ctrl_reg;
  #line 1656 
  u32 reg;
  #line 1656 
  u32 anadv_reg;
  #line 1657 
  bool pcs_autoneg;
  #line 1659 
  u16 data;
  #line 1658 
  s32 ret_val = 0;
  #line 1661 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_internal_serdes) {
    #line 1662 
    if (! igb_sgmii_active_82575(hw)) 
                                      #line 1663 
                                      return ret_val;
  }
  {
    #line 1672 
    union __anonunion___u_4352 __u;
    #line 1671 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1671 
    u8 *hw_addr = (__u.__val);
    #line 1671 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1671 
                                           writel(1024U,(void *)(hw_addr + 36U));
  }
  #line 1674 
  ctrl_ext = igb_rd32(hw,24U);
  #line 1675 
  ctrl_ext &= 4294967167U;
  #line 1676 
  ctrl_ext |= 33554432U;
  {
    #line 1678 
    union __anonunion___u_4354 __u_0;
    #line 1677 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1677 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 1677 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 1677 
                                             writel(ctrl_ext,(void *)(hw_addr_0 + 24U));
  }
  #line 1679 
  ctrl_reg = igb_rd32(hw,0U);
  #line 1680 
  ctrl_reg |= 64U;
  #line 1682 
  if ((unsigned int)hw->mac.type + 4294967295U <= 1U) {
    #line 1684 
    ctrl_reg |= 786432U;
    #line 1687 
    reg = igb_rd32(hw,52U);
    #line 1688 
    reg |= 4U;
    {
      #line 1690 
      union __anonunion___u_4356 __u_1;
      #line 1689 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 1689 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 1689 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 1689 
                                               writel(reg,(void *)(hw_addr_1 + 52U));
    }
  }
  #line 1692 
  reg = igb_rd32(hw,16904U);
  #line 1695 
  pcs_autoneg = hw->mac.autoneg;
  #line 1697 
  switch (ctrl_ext & 12582912U) {
    #line 1698 
    case (unsigned int)8388608: 
                                #line 1698 
    ;
    #line 1700 
    pcs_autoneg = (_Bool)1;
    #line 1702 
    reg &= 4294705151U;
    #line 1703 
    break;
    #line 1704 
    case (unsigned int)4194304: 
                                #line 1704 
    ;
    #line 1706 
    pcs_autoneg = (_Bool)0;
    #line 1708 
    default: 
             #line 1708 
    ;
    #line 1709 
    if ((unsigned int)hw->mac.type + 4294967295U <= 1U) {
      #line 1711 
      ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)3,(unsigned short)1,& data);
      #line 1712 
      if (ret_val != 0) {
        {
          #line 1713 
          bool branch;
          #line 1713 
          struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"igb", .function = (char *)"igb_setup_serdes_link_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"\001", .lineno = (unsigned int)1713U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1713 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
          #line 1713 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 1713 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug465,igb_get_hw_dev(hw),(char *)"\001");
          }
        }
        #line 1714 
        return ret_val;
      }
      #line 1717 
      if (((unsigned long)data & 16384UL) != 0UL) 
                                                  #line 1718 
                                                  pcs_autoneg = (_Bool)0;
    }
    #line 1725 
    ctrl_reg |= 6657U;
    #line 1729 
    reg |= 12U;
    #line 1730 
    break;
  }
  {
    #line 1734 
    union __anonunion___u_4358 __u_2;
    #line 1733 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 1733 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 1733 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                             #line 1733 
                                             writel(ctrl_reg,(void *)hw_addr_2);
  }
  #line 1740 
  reg &= 4294901710U;
  #line 1743 
  if ((int)pcs_autoneg != 0) {
    #line 1745 
    reg |= 196608U;
    #line 1749 
    reg &= 4294967167U;
    #line 1752 
    anadv_reg = igb_rd32(hw,16920U);
    #line 1753 
    anadv_reg &= 4294966911U;
    #line 1754 
    switch ((unsigned int)hw->fc.requested_mode) {
      #line 1755 
      case (unsigned int)3: 
                            #line 1755 
      ;
      #line 1756 
      case (unsigned int)1: 
                            #line 1756 
      ;
      #line 1757 
      anadv_reg |= 256U;
      #line 1758 
      anadv_reg |= 128U;
      #line 1759 
      break;
      #line 1760 
      case (unsigned int)2: 
                            #line 1760 
      ;
      #line 1761 
      anadv_reg |= 256U;
      #line 1762 
      break;
      #line 1763 
      default: 
               #line 1763 
      ;
      #line 1764 
      break;
    }
    {
      #line 1767 
      union __anonunion___u_4360 __u_3;
      #line 1766 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 1766 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 1766 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 1766 
                                               writel(anadv_reg,(void *)(hw_addr_3 + 16920U));
    }
    {
      #line 1768 
      bool branch_0;
      #line 1768 
      struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"igb", .function = (char *)"igb_setup_serdes_link_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Configuring Autoneg:PCS_LCTL=0x%08X\n", .lineno = (unsigned int)1768U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1768 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
      #line 1768 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1768 
        ;
        #line 1768 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug466,igb_get_hw_dev(hw),(char *)"Configuring Autoneg:PCS_LCTL=0x%08X\n",reg);
      }
    }
  }
  else {
    #line 1771 
    reg |= 16U;
    #line 1774 
    reg |= 128U;
    {
      #line 1776 
      bool branch_1;
      #line 1776 
      struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"igb", .function = (char *)"igb_setup_serdes_link_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Configuring Forced Link:PCS_LCTL=0x%08X\n", .lineno = (unsigned int)1776U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1776 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
      #line 1776 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 1776 
        ;
        #line 1776 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug467,igb_get_hw_dev(hw),(char *)"Configuring Forced Link:PCS_LCTL=0x%08X\n",reg);
      }
    }
  }
  {
    #line 1780 
    union __anonunion___u_4362 __u_4;
    #line 1779 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 1779 
    u8 *hw_addr_4 = (__u_4.__val);
    #line 1779 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                             #line 1779 
                                             writel(reg,(void *)(hw_addr_4 + 16904U));
  }
  #line 1781 
  if (! pcs_autoneg) {
    #line 1781 
    if (! igb_sgmii_active_82575(hw)) 
                                      #line 1782 
                                      igb_force_mac_fc(hw);
  }
  #line 1784 
  return ret_val;
}

#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static bool igb_sgmii_active_82575(struct e1000_hw *hw)
{
  #line 1797 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  #line 1798 
  return dev_spec->sgmii_active;
}

#line 1808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_reset_init_script_82575(struct e1000_hw *hw)
{
  #line 1810 
  if (hw->mac.type == (unsigned int)e1000_82575) {
    {
      #line 1811 
      bool branch;
      #line 1811 
      struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"igb", .function = (char *)"igb_reset_init_script_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Running reset init script for 82575\n", .lineno = (unsigned int)1811U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1811 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
      #line 1811 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1811 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug468,igb_get_hw_dev(hw),(char *)"Running reset init script for 82575\n");
      }
    }
    #line 1813 
    igb_write_8bit_ctrl_reg(hw,36U,0U,(unsigned char)12);
    #line 1814 
    igb_write_8bit_ctrl_reg(hw,36U,1U,(unsigned char)120);
    #line 1815 
    igb_write_8bit_ctrl_reg(hw,36U,27U,(unsigned char)35);
    #line 1816 
    igb_write_8bit_ctrl_reg(hw,36U,35U,(unsigned char)21);
    #line 1819 
    igb_write_8bit_ctrl_reg(hw,23368U,20U,(unsigned char)0);
    #line 1820 
    igb_write_8bit_ctrl_reg(hw,23368U,16U,(unsigned char)0);
    #line 1823 
    igb_write_8bit_ctrl_reg(hw,23364U,0U,(unsigned char)236);
    #line 1824 
    igb_write_8bit_ctrl_reg(hw,23364U,97U,(unsigned char)223);
    #line 1825 
    igb_write_8bit_ctrl_reg(hw,23364U,52U,(unsigned char)5);
    #line 1826 
    igb_write_8bit_ctrl_reg(hw,23364U,47U,(unsigned char)129);
    #line 1829 
    igb_write_8bit_ctrl_reg(hw,23372U,2U,(unsigned char)71);
    #line 1830 
    igb_write_8bit_ctrl_reg(hw,23372U,20U,(unsigned char)0);
    #line 1831 
    igb_write_8bit_ctrl_reg(hw,23372U,16U,(unsigned char)0);
  }
  #line 1834 
  return 0;
}

#line 1841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_read_mac_addr_82575(struct e1000_hw *hw)
{
  #line 1843 
  s32 ret_val = 0;
  #line 1849 
  ret_val = igb_check_alt_mac_addr(hw);
  #line 1850 
  if (ret_val != 0) 
                    #line 1851 
                    goto out;
  #line 1853 
  ret_val = igb_read_mac_addr(hw);
  #line 1855 
  out: 
       #line 1855 
  ;
  #line 1856 
  return ret_val;
}

#line 1866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_power_down_phy_copper_82575(struct e1000_hw *hw)
{
  #line 1869 
  if (! igb_enable_mng_pass_thru(hw)) {
    #line 1869 
    if (igb_check_reset_block(hw) == 0) 
                                        #line 1870 
                                        igb_power_down_phy_copper(hw);
  }
  #line 1871 
  return;
}

#line 1879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static void igb_clear_hw_cntrs_82575(struct e1000_hw *hw)
{
  #line 1881 
  igb_clear_hw_cntrs_base(hw);
  #line 1883 
  igb_rd32(hw,16476U);
  #line 1884 
  igb_rd32(hw,16480U);
  #line 1885 
  igb_rd32(hw,16484U);
  #line 1886 
  igb_rd32(hw,16488U);
  #line 1887 
  igb_rd32(hw,16492U);
  #line 1888 
  igb_rd32(hw,16496U);
  #line 1889 
  igb_rd32(hw,16600U);
  #line 1890 
  igb_rd32(hw,16604U);
  #line 1891 
  igb_rd32(hw,16608U);
  #line 1892 
  igb_rd32(hw,16612U);
  #line 1893 
  igb_rd32(hw,16616U);
  #line 1894 
  igb_rd32(hw,16620U);
  #line 1896 
  igb_rd32(hw,16388U);
  #line 1897 
  igb_rd32(hw,16396U);
  #line 1898 
  igb_rd32(hw,16436U);
  #line 1899 
  igb_rd32(hw,16444U);
  #line 1900 
  igb_rd32(hw,16632U);
  #line 1901 
  igb_rd32(hw,16636U);
  #line 1903 
  igb_rd32(hw,16564U);
  #line 1904 
  igb_rd32(hw,16568U);
  #line 1905 
  igb_rd32(hw,16572U);
  #line 1907 
  igb_rd32(hw,16640U);
  #line 1908 
  igb_rd32(hw,16676U);
  #line 1910 
  igb_rd32(hw,16644U);
  #line 1911 
  igb_rd32(hw,16648U);
  #line 1912 
  igb_rd32(hw,16652U);
  #line 1913 
  igb_rd32(hw,16656U);
  #line 1914 
  igb_rd32(hw,16664U);
  #line 1915 
  igb_rd32(hw,16668U);
  #line 1916 
  igb_rd32(hw,16672U);
  #line 1918 
  igb_rd32(hw,16428U);
  #line 1919 
  igb_rd32(hw,16444U);
  #line 1920 
  igb_rd32(hw,16636U);
  #line 1921 
  igb_rd32(hw,16644U);
  #line 1922 
  igb_rd32(hw,16664U);
  #line 1923 
  igb_rd32(hw,16676U);
  #line 1924 
  igb_rd32(hw,16680U);
  #line 1925 
  igb_rd32(hw,16684U);
  #line 1926 
  igb_rd32(hw,16688U);
  #line 1927 
  igb_rd32(hw,16692U);
  #line 1928 
  igb_rd32(hw,16696U);
  #line 1931 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) 
    #line 1933 
    igb_rd32(hw,16936U);
  else {
    #line 1931 
    if ((int)igb_sgmii_active_82575(hw) != 0) 
                                              #line 1933 
                                              igb_rd32(hw,16936U);
  }
  #line 1934 
  return;
}

#line 1945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_rx_fifo_flush_82575(struct e1000_hw *hw)
{
  #line 1947 
  u32 rctl;
  #line 1947 
  u32 rlpml;
  #line 1947 
  u32 rxdctl[4U];
  #line 1947 
  u32 rfctl;
  #line 1947 
  u32 temp_rctl;
  #line 1947 
  u32 rx_enabled;
  #line 1948 
  int i;
  #line 1948 
  int ms_wait;
  #line 1951 
  rfctl = igb_rd32(hw,20488U);
  #line 1952 
  rfctl |= 65536U;
  {
    #line 1954 
    union __anonunion___u_4364 __u;
    #line 1953 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1953 
    u8 *hw_addr = (__u.__val);
    #line 1953 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1953 
                                           writel(rfctl,(void *)(hw_addr + 20488U));
  }
  #line 1955 
  if (hw->mac.type != (unsigned int)e1000_82575) 
                                                 #line 1957 
                                                 return;
  else {
    #line 1955 
    if ((igb_rd32(hw,22560U) & 131072U) == 0U) 
                                               #line 1957 
                                               return;
  }
  #line 1960 
  i = 0;
  #line 1960 
  while (i <= 3) {
    {
      #line 1961 
      int tmp_1;
      #line 1961 
      if (i <= 3) 
                  #line 1961 
                  tmp_1 = i * 256 + 10280; else 
                                                #line 1961 
                                                tmp_1 = i * 64 + 49192;
      #line 1961 
      ;
      #line 1961 
      rxdctl[i] = igb_rd32(hw,(unsigned int)tmp_1);
      {
        #line 1963 
        union __anonunion___u_4366 __u_0;
        #line 1962 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
        #line 1962 
        u8 *hw_addr_0 = (__u_0.__val);
        #line 1962 
        if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
          #line 1962 
          int tmp_3;
          #line 1962 
          if (i <= 3) 
                      #line 1962 
                      tmp_3 = i * 256 + 10280; else 
                                                    #line 1962 
                                                    tmp_3 = i * 64 + 49192;
          #line 1962 
          ;
          #line 1962 
          ;
          #line 1962 
          writel(rxdctl[i] & 4261412863U,(void *)(hw_addr_0 + (unsigned long)tmp_3));
        }
      }
    }
    #line 1960 
    i ++;
  }
  #line 1966 
  ms_wait = 0;
  #line 1966 
  while (ms_wait <= 9) {
    #line 1967 
    usleep_range(1000UL,2000UL);
    #line 1968 
    rx_enabled = 0U;
    #line 1969 
    i = 0;
    #line 1969 
    while (i <= 3) {
      #line 1970 
      int tmp_4;
      #line 1970 
      if (i <= 3) 
                  #line 1970 
                  tmp_4 = i * 256 + 10280; else 
                                                #line 1970 
                                                tmp_4 = i * 64 + 49192;
      #line 1970 
      ;
      #line 1970 
      rx_enabled = igb_rd32(hw,(unsigned int)tmp_4) | rx_enabled;
      #line 1969 
      i ++;
    }
    #line 1971 
    if ((rx_enabled & 33554432U) == 0U) 
                                        #line 1972 
                                        break;
    #line 1966 
    ms_wait ++;
  }
  #line 1975 
  if (ms_wait == 10) {
    #line 1976 
    bool branch;
    #line 1976 
    struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"igb", .function = (char *)"igb_rx_fifo_flush_82575", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Queue disable timed out after 10ms\n", .lineno = (unsigned int)1976U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1976 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
    #line 1976 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1976 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug469,igb_get_hw_dev(hw),(char *)"Queue disable timed out after 10ms\n");
    }
  }
  {
    #line 1983 
    union __anonunion___u_4368 __u_1;
    #line 1982 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 1982 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 1982 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 1982 
                                             writel(rfctl & 4294705151U,(void *)(hw_addr_1 + 20488U));
  }
  #line 1984 
  rlpml = igb_rd32(hw,20484U);
  {
    #line 1986 
    union __anonunion___u_4370 __u_2;
    #line 1985 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 1985 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 1985 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                             #line 1985 
                                             writel(0U,(void *)(hw_addr_2 + 20484U));
  }
  #line 1987 
  rctl = igb_rd32(hw,256U);
  #line 1988 
  temp_rctl = rctl & 4294967289U;
  #line 1989 
  temp_rctl |= 32U;
  {
    #line 1992 
    union __anonunion___u_4372 __u_3;
    #line 1991 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 1991 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 1991 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                             #line 1991 
                                             writel(temp_rctl,(void *)(hw_addr_3 + 256U));
  }
  {
    #line 1993 
    union __anonunion___u_4374 __u_4;
    #line 1992 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 1992 
    u8 *hw_addr_4 = (__u_4.__val);
    #line 1992 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                             #line 1992 
                                             writel(temp_rctl | 2U,(void *)(hw_addr_4 + 256U));
  }
  #line 1993 
  igb_rd32(hw,8U);
  #line 1994 
  usleep_range(2000UL,3000UL);
  #line 1999 
  i = 0;
  #line 1999 
  while (i <= 3) {
    {
      #line 2001 
      union __anonunion___u_4376 __u_5;
      #line 2000 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 2000 
      u8 *hw_addr_5 = (__u_5.__val);
      #line 2000 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) {
        #line 2000 
        int tmp_13;
        #line 2000 
        if (i <= 3) 
                    #line 2000 
                    tmp_13 = i * 256 + 10280; else 
                                                   #line 2000 
                                                   tmp_13 = i * 64 + 49192;
        #line 2000 
        ;
        #line 2000 
        ;
        #line 2000 
        writel(rxdctl[i],(void *)(hw_addr_5 + (unsigned long)tmp_13));
      }
    }
    #line 1999 
    i ++;
  }
  {
    #line 2002 
    union __anonunion___u_4378 __u_6;
    #line 2001 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
    #line 2001 
    u8 *hw_addr_6 = (__u_6.__val);
    #line 2001 
    if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
                                             #line 2001 
                                             writel(rctl,(void *)(hw_addr_6 + 256U));
  }
  #line 2002 
  igb_rd32(hw,8U);
  {
    #line 2005 
    union __anonunion___u_4380 __u_7;
    #line 2004 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
    #line 2004 
    u8 *hw_addr_7 = (__u_7.__val);
    #line 2004 
    if ((long)(hw_addr_7 == (u8 *)0U) == 0L) 
                                             #line 2004 
                                             writel(rlpml,(void *)(hw_addr_7 + 20484U));
  }
  {
    #line 2006 
    union __anonunion___u_4382 __u_8;
    #line 2005 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_8.__c),8);
    #line 2005 
    u8 *hw_addr_8 = (__u_8.__val);
    #line 2005 
    if ((long)(hw_addr_8 == (u8 *)0U) == 0L) 
                                             #line 2005 
                                             writel(rfctl,(void *)(hw_addr_8 + 20488U));
  }
  #line 2008 
  igb_rd32(hw,16556U);
  #line 2009 
  igb_rd32(hw,16544U);
  #line 2010 
  igb_rd32(hw,16400U);
  #line 2011 
  return;
}

#line 2023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_pcie_completion_timeout(struct e1000_hw *hw)
{
  #line 2027 
  u16 pcie_devctl2;
  #line 2025 
  u32 gcr = igb_rd32(hw,23296U);
  #line 2026 
  s32 ret_val = 0;
  #line 2030 
  if ((gcr & 61440U) != 0U) 
                            #line 2031 
                            goto out;
  #line 2036 
  if ((gcr & 262144U) == 0U) {
    #line 2037 
    gcr |= 4096U;
    #line 2038 
    goto out;
  }
  #line 2045 
  ret_val = igb_read_pcie_cap_reg(hw,40U,& pcie_devctl2);
  #line 2047 
  if (ret_val != 0) 
                    #line 2048 
                    goto out;
  #line 2050 
  pcie_devctl2 = (unsigned short)((unsigned int)pcie_devctl2 | 5U);
  #line 2052 
  ret_val = igb_write_pcie_cap_reg(hw,40U,& pcie_devctl2);
  #line 2054 
  out: 
       #line 2054 
  ;
  #line 2056 
  gcr &= 4294901759U;
  {
    #line 2059 
    union __anonunion___u_4384 __u;
    #line 2058 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2058 
    u8 *hw_addr = (__u.__val);
    #line 2058 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2058 
                                           writel(gcr,(void *)(hw_addr + 23296U));
  }
  #line 2059 
  return ret_val;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_vmdq_set_anti_spoofing_pf(struct e1000_hw *hw, bool enable, int pf)
{
  #line 2072 
  u32 reg_val;
  #line 2072 
  u32 reg_offset;
  #line 2074 
  switch ((unsigned int)hw->mac.type) {
    #line 2075 
    case (unsigned int)2: 
                          #line 2075 
    ;
    #line 2076 
    reg_offset = 13568U;
    #line 2077 
    break;
    #line 2078 
    case (unsigned int)4: 
                          #line 2078 
    ;
    #line 2079 
    case (unsigned int)5: 
                          #line 2079 
    ;
    #line 2080 
    reg_offset = 23244U;
    #line 2081 
    break;
    #line 2082 
    default: 
             #line 2082 
    ;
    #line 2083 
    return;
  }
  #line 2086 
  reg_val = igb_rd32(hw,reg_offset);
  #line 2087 
  if ((int)enable != 0) {
    #line 2088 
    reg_val |= 65535U;
    #line 2093 
    reg_val = ((unsigned int)(1UL << pf) | (unsigned int)(1UL << (pf + 8))) ^ reg_val;
  }
  else 
       #line 2095 
       reg_val &= 4294901760U;
  {
    #line 2099 
    union __anonunion___u_4386 __u;
    #line 2098 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2098 
    u8 *hw_addr = (__u.__val);
    #line 2098 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2098 
                                           writel(reg_val,(void *)(hw_addr + (unsigned long)reg_offset));
  }
  #line 2100 
  return;
}

#line 2108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_vmdq_set_loopback_pf(struct e1000_hw *hw, bool enable)
{
  #line 2110 
  u32 dtxswc;
  #line 2112 
  switch ((unsigned int)hw->mac.type) {
    #line 2113 
    case (unsigned int)2: 
                          #line 2113 
    ;
    #line 2114 
    dtxswc = igb_rd32(hw,13568U);
    #line 2115 
    if ((int)enable != 0) 
                          #line 2116 
                          dtxswc |= 2147483648U; else 
                                                      #line 2118 
                                                      dtxswc &= 2147483647U;
    {
      #line 2120 
      union __anonunion___u_4388 __u;
      #line 2119 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 2119 
      u8 *hw_addr = (__u.__val);
      #line 2119 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 2119 
                                             writel(dtxswc,(void *)(hw_addr + 13568U));
    }
    #line 2120 
    break;
    #line 2121 
    case (unsigned int)5: 
                          #line 2121 
    ;
    #line 2122 
    case (unsigned int)4: 
                          #line 2122 
    ;
    #line 2123 
    dtxswc = igb_rd32(hw,23244U);
    #line 2124 
    if ((int)enable != 0) 
                          #line 2125 
                          dtxswc |= 2147483648U; else 
                                                      #line 2127 
                                                      dtxswc &= 2147483647U;
    {
      #line 2129 
      union __anonunion___u_4390 __u_0;
      #line 2128 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 2128 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 2128 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 2128 
                                               writel(dtxswc,(void *)(hw_addr_0 + 23244U));
    }
    #line 2129 
    break;
    #line 2130 
    default: 
             #line 2130 
    ;
    #line 2132 
    break;
  }
  #line 2134 
  return;
}

#line 2144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_vmdq_set_replication_pf(struct e1000_hw *hw, bool enable)
{
  #line 2146 
  u32 vt_ctl = igb_rd32(hw,22556U);
  #line 2148 
  if ((int)enable != 0) 
                        #line 2149 
                        vt_ctl |= 1073741824U; else 
                                                    #line 2151 
                                                    vt_ctl &= 3221225471U;
  {
    #line 2154 
    union __anonunion___u_4392 __u;
    #line 2153 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2153 
    u8 *hw_addr = (__u.__val);
    #line 2153 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2153 
                                           writel(vt_ctl,(void *)(hw_addr + 22556U));
  }
  #line 2155 
  return;
}

#line 2165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_read_phy_reg_82580(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 2167 
  s32 ret_val;
  #line 2169 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2170 
  if (ret_val != 0) 
                    #line 2171 
                    goto out;
  #line 2173 
  ret_val = igb_read_phy_reg_mdic(hw,offset,data);
  #line 2175 
  (*(hw->phy.ops.release))(hw);
  #line 2177 
  out: 
       #line 2177 
  ;
  #line 2178 
  return ret_val;
}

#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_write_phy_reg_82580(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 2191 
  s32 ret_val;
  #line 2194 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2195 
  if (ret_val != 0) 
                    #line 2196 
                    goto out;
  #line 2198 
  ret_val = igb_write_phy_reg_mdic(hw,offset,(unsigned short)((int)data));
  #line 2200 
  (*(hw->phy.ops.release))(hw);
  #line 2202 
  out: 
       #line 2202 
  ;
  #line 2203 
  return ret_val;
}

#line 2214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_reset_mdicnfg_82580(struct e1000_hw *hw)
{
  #line 2217 
  u32 mdicnfg;
  #line 2225 
  int tmp_0;
  #line 2216 
  s32 ret_val = 0;
  #line 2218 
  u16 nvm_data = (unsigned short)0U;
  #line 2220 
  if (hw->mac.type != (unsigned int)e1000_82580) 
                                                 #line 2221 
                                                 goto out;
  #line 2222 
  if (! igb_sgmii_active_82575(hw)) 
                                    #line 2223 
                                    goto out;
  #line 2225 
  if ((unsigned int)hw->bus.func != 0U) 
                                        #line 2225 
                                        tmp_0 = (int)(((unsigned int)hw->bus.func + 1U) * 64U + 36U); else 
                                                                    #line 2225 
                                                                    tmp_0 = 36;
  #line 2225 
  ;
  #line 2225 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)tmp_0,(unsigned short)1,& nvm_data);
  #line 2228 
  if (ret_val != 0) {
    {
      #line 2229 
      bool branch;
      #line 2229 
      struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"igb", .function = (char *)"igb_reset_mdicnfg_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)2229U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2229 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
      #line 2229 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2229 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug470,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
      }
    }
    #line 2230 
    goto out;
  }
  #line 2233 
  mdicnfg = igb_rd32(hw,3588U);
  #line 2234 
  if (((int)nvm_data & 4) != 0) 
                                #line 2235 
                                mdicnfg |= 2147483648U;
  #line 2236 
  if (((int)nvm_data & 8) != 0) 
                                #line 2237 
                                mdicnfg |= 1073741824U;
  {
    #line 2239 
    union __anonunion___u_4394 __u;
    #line 2238 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2238 
    u8 *hw_addr = (__u.__val);
    #line 2238 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2238 
                                           writel(mdicnfg,(void *)(hw_addr + 3588U));
  }
  #line 2239 
  out: 
       #line 2239 
  ;
  #line 2240 
  return ret_val;
}

#line 2250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_reset_hw_82580(struct e1000_hw *hw)
{
  #line 2255 
  u32 ctrl;
  #line 2252 
  s32 ret_val = 0;
  #line 2254 
  u16 swmbsw_mask = (unsigned short)256U;
  #line 2256 
  bool global_device_reset = hw->dev_spec._82575.global_device_reset;
  #line 2258 
  hw->dev_spec._82575.global_device_reset = (_Bool)0;
  #line 2263 
  if (hw->mac.type == (unsigned int)e1000_82580) 
                                                 #line 2264 
                                                 global_device_reset = (_Bool)0;
  #line 2267 
  ctrl = igb_rd32(hw,0U);
  #line 2272 
  ret_val = igb_disable_pcie_master(hw);
  #line 2273 
  if (ret_val != 0) {
    #line 2274 
    bool branch;
    #line 2274 
    struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"igb", .function = (char *)"igb_reset_hw_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"PCI-E Master disable polling has failed.\n", .lineno = (unsigned int)2274U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2274 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
    #line 2274 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2274 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug471,igb_get_hw_dev(hw),(char *)"PCI-E Master disable polling has failed.\n");
    }
  }
  {
    #line 2276 
    bool branch_0;
    #line 2276 
    struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"igb", .function = (char *)"igb_reset_hw_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Masking off all interrupts\n", .lineno = (unsigned int)2276U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2276 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
    #line 2276 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 2276 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug472,igb_get_hw_dev(hw),(char *)"Masking off all interrupts\n");
    }
  }
  {
    #line 2278 
    union __anonunion___u_4396 __u;
    #line 2277 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2277 
    u8 *hw_addr = (__u.__val);
    #line 2277 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2277 
                                           writel(4294967295U,(void *)(hw_addr + 216U));
  }
  {
    #line 2279 
    union __anonunion___u_4398 __u_0;
    #line 2278 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 2278 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 2278 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 2278 
                                             writel(0U,(void *)(hw_addr_0 + 256U));
  }
  {
    #line 2280 
    union __anonunion___u_4400 __u_1;
    #line 2279 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 2279 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 2279 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 2279 
                                             writel(8U,(void *)(hw_addr_1 + 1024U));
  }
  #line 2280 
  igb_rd32(hw,8U);
  #line 2282 
  usleep_range(10000UL,11000UL);
  #line 2285 
  if ((int)global_device_reset != 0) {
    #line 2285 
    if ((*(hw->mac.ops.acquire_swfw_sync))(hw,
                                           (unsigned short)((int)swmbsw_mask)) != 0) 
      #line 2287 
      global_device_reset = (_Bool)0;
  }
  #line 2289 
  if ((int)global_device_reset != 0) {
    #line 2289 
    if ((igb_rd32(hw,8U) & 1048576U) == 0U) 
                                            #line 2291 
                                            ctrl |= 536870912U; else 
                                                                  #line 2293 
                                                                  ctrl |= 67108864U;
  }
  else 
       #line 2293 
       ctrl |= 67108864U;
  {
    #line 2296 
    union __anonunion___u_4402 __u_2;
    #line 2295 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 2295 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 2295 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                             #line 2295 
                                             writel(ctrl,(void *)hw_addr_2);
  }
  #line 2296 
  igb_rd32(hw,8U);
  #line 2299 
  if ((int)global_device_reset != 0) 
                                     #line 2300 
                                     usleep_range(5000UL,6000UL);
  #line 2302 
  ret_val = igb_get_auto_rd_done(hw);
  #line 2303 
  if (ret_val != 0) {
    #line 2308 
    bool branch_1;
    #line 2308 
    struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"igb", .function = (char *)"igb_reset_hw_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Auto Read Done did not complete\n", .lineno = (unsigned int)2308U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2308 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
    #line 2308 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 2308 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug473,igb_get_hw_dev(hw),(char *)"Auto Read Done did not complete\n");
    }
  }
  {
    #line 2313 
    union __anonunion___u_4404 __u_3;
    #line 2312 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 2312 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 2312 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                             #line 2312 
                                             writel(1048576U,(void *)(hw_addr_3 + 8U));
  }
  {
    #line 2316 
    union __anonunion___u_4406 __u_4;
    #line 2315 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 2315 
    u8 *hw_addr_4 = (__u_4.__val);
    #line 2315 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                             #line 2315 
                                             writel(4294967295U,(void *)(hw_addr_4 + 216U));
  }
  #line 2316 
  igb_rd32(hw,192U);
  #line 2318 
  ret_val = igb_reset_mdicnfg_82580(hw);
  #line 2319 
  if (ret_val != 0) {
    #line 2320 
    bool branch_2;
    #line 2320 
    struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"igb", .function = (char *)"igb_reset_hw_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"Could not reset MDICNFG based on EEPROM\n", .lineno = (unsigned int)2320U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2320 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
    #line 2320 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 2320 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug474,igb_get_hw_dev(hw),(char *)"Could not reset MDICNFG based on EEPROM\n");
    }
  }
  #line 2323 
  ret_val = igb_check_alt_mac_addr(hw);
  #line 2326 
  if ((int)global_device_reset != 0) 
                                     #line 2327 
                                     (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)((int)swmbsw_mask));
  #line 2329 
  return ret_val;
}

#line 2342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
u16 igb_rxpbs_adjust_82580(u32 data)
{
  #line 2344 
  u16 ret_val = (unsigned short)0U;
  #line 2346 
  if (data <= 10U) 
                   #line 2347 
                   ret_val = e1000_82580_rxpbs_table[data];
  #line 2349 
  return ret_val;
}

#line 2361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_validate_nvm_checksum_with_offset(struct e1000_hw *hw, u16 offset)
{
  #line 2366 
  u16 i;
  #line 2366 
  u16 nvm_data;
  #line 2364 
  s32 ret_val = 0;
  #line 2365 
  u16 checksum = (unsigned short)0U;
  #line 2368 
  i = offset;
  #line 2368 
  while ((int)offset + 63 >= (int)i) {
    #line 2369 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    #line 2370 
    if (ret_val != 0) {
      {
        #line 2371 
        bool branch;
        #line 2371 
        struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"igb", .function = (char *)"igb_validate_nvm_checksum_with_offset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)2371U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2371 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
        #line 2371 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 2371 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug475,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
        }
      }
      #line 2372 
      goto out;
    }
    #line 2374 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    #line 2368 
    i = (u16)((int)i + 1);
  }
  #line 2377 
  if ((unsigned int)checksum != 47802U) {
    {
      #line 2378 
      bool branch_0;
      #line 2378 
      struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"igb", .function = (char *)"igb_validate_nvm_checksum_with_offset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"NVM Checksum Invalid\n", .lineno = (unsigned int)2378U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2378 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
      #line 2378 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 2378 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug476,igb_get_hw_dev(hw),(char *)"NVM Checksum Invalid\n");
      }
    }
    #line 2379 
    ret_val = -1;
    #line 2380 
    goto out;
  }
  #line 2383 
  out: 
       #line 2383 
  ;
  #line 2384 
  return ret_val;
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_update_nvm_checksum_with_offset(struct e1000_hw *hw, u16 offset)
{
  #line 2399 
  s32 ret_val;
  #line 2401 
  u16 i;
  #line 2401 
  u16 nvm_data;
  #line 2400 
  u16 checksum = (unsigned short)0U;
  #line 2403 
  i = offset;
  #line 2403 
  while ((int)offset + 62 >= (int)i) {
    #line 2404 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    #line 2405 
    if (ret_val != 0) {
      {
        #line 2406 
        bool branch;
        #line 2406 
        struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"igb", .function = (char *)"igb_update_nvm_checksum_with_offset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"NVM Read Error while updating checksum.\n", .lineno = (unsigned int)2406U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2406 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
        #line 2406 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 2406 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug477,igb_get_hw_dev(hw),(char *)"NVM Read Error while updating checksum.\n");
        }
      }
      #line 2407 
      goto out;
    }
    #line 2409 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    #line 2403 
    i = (u16)((int)i + 1);
  }
  #line 2411 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  #line 2412 
  ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)((int)((unsigned int)offset + 63U)),(unsigned short)1,& checksum);
  #line 2414 
  if (ret_val != 0) {
    #line 2415 
    bool branch_0;
    #line 2415 
    struct _ddebug __UNIQUE_ID_ddebug478 = {.modname = (char *)"igb", .function = (char *)"igb_update_nvm_checksum_with_offset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"NVM Write Error while updating checksum.\n", .lineno = (unsigned int)2415U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2415 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug478.key.dd_key_false.key,(_Bool)0);
    #line 2415 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 2415 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug478,igb_get_hw_dev(hw),(char *)"NVM Write Error while updating checksum.\n");
    }
  }
  #line 2417 
  out: 
       #line 2417 
  ;
  #line 2418 
  return ret_val;
}

#line 2429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_validate_nvm_checksum_82580(struct e1000_hw *hw)
{
  #line 2433 
  u16 j;
  #line 2433 
  u16 nvm_data;
  #line 2434 
  u16 nvm_offset;
  #line 2431 
  s32 ret_val = 0;
  #line 2432 
  u16 eeprom_regions_count = (unsigned short)1U;
  #line 2436 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)3,(unsigned short)1,& nvm_data);
  #line 2437 
  if (ret_val != 0) {
    {
      #line 2438 
      bool branch;
      #line 2438 
      struct _ddebug __UNIQUE_ID_ddebug479 = {.modname = (char *)"igb", .function = (char *)"igb_validate_nvm_checksum_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)2438U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2438 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug479.key.dd_key_false.key,(_Bool)0);
      #line 2438 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2438 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug479,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
      }
    }
    #line 2439 
    goto out;
  }
  #line 2442 
  if (((int)nvm_data & 32768) != 0) 
                                    #line 2446 
                                    eeprom_regions_count = (unsigned short)4U;
  #line 2449 
  j = (unsigned short)0U;
  #line 2449 
  while ((int)j < (int)eeprom_regions_count) {
    #line 2450 
    if ((unsigned int)j != 0U) 
                               #line 2450 
                               nvm_offset = (unsigned short)(((unsigned int)j + 1U) * 64U); else 
                                                                    #line 2450 
                                                                    nvm_offset = (unsigned short)0U;
    #line 2451 
    ret_val = igb_validate_nvm_checksum_with_offset(hw,(unsigned short)((int)nvm_offset));
    #line 2453 
    if (ret_val != 0) 
                      #line 2454 
                      goto out;
    #line 2449 
    j = (u16)((int)j + 1);
  }
  #line 2457 
  out: 
       #line 2457 
  ;
  #line 2458 
  return ret_val;
}

#line 2469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_update_nvm_checksum_82580(struct e1000_hw *hw)
{
  #line 2471 
  s32 ret_val;
  #line 2472 
  u16 j;
  #line 2472 
  u16 nvm_data;
  #line 2473 
  u16 nvm_offset;
  #line 2475 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)3,(unsigned short)1,& nvm_data);
  #line 2476 
  if (ret_val != 0) {
    {
      #line 2477 
      bool branch;
      #line 2477 
      struct _ddebug __UNIQUE_ID_ddebug480 = {.modname = (char *)"igb", .function = (char *)"igb_update_nvm_checksum_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"NVM Read Error while updating checksum compatibility bit.\n", .lineno = (unsigned int)2477U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2477 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug480.key.dd_key_false.key,(_Bool)0);
      #line 2477 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2477 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug480,igb_get_hw_dev(hw),(char *)"NVM Read Error while updating checksum compatibility bit.\n");
      }
    }
    #line 2478 
    goto out;
  }
  #line 2481 
  if (((int)nvm_data & 32768) == 0) {
    #line 2483 
    nvm_data = (unsigned short)((unsigned int)nvm_data | 32768U);
    #line 2484 
    ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)3,(unsigned short)1,& nvm_data);
    #line 2486 
    if (ret_val != 0) {
      {
        #line 2487 
        bool branch_0;
        #line 2487 
        struct _ddebug __UNIQUE_ID_ddebug481 = {.modname = (char *)"igb", .function = (char *)"igb_update_nvm_checksum_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"NVM Write Error while updating checksum compatibility bit.\n", .lineno = (unsigned int)2487U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2487 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug481.key.dd_key_false.key,(_Bool)0);
        #line 2487 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 2487 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug481,igb_get_hw_dev(hw),(char *)"NVM Write Error while updating checksum compatibility bit.\n");
        }
      }
      #line 2488 
      goto out;
    }
  }
  #line 2492 
  j = (unsigned short)0U;
  #line 2492 
  while ((unsigned int)j <= 3U) {
    #line 2493 
    if ((unsigned int)j != 0U) 
                               #line 2493 
                               nvm_offset = (unsigned short)(((unsigned int)j + 1U) * 64U); else 
                                                                    #line 2493 
                                                                    nvm_offset = (unsigned short)0U;
    #line 2494 
    ret_val = igb_update_nvm_checksum_with_offset(hw,(unsigned short)((int)nvm_offset));
    #line 2495 
    if (ret_val != 0) 
                      #line 2496 
                      goto out;
    #line 2492 
    j = (u16)((int)j + 1);
  }
  #line 2499 
  out: 
       #line 2499 
  ;
  #line 2500 
  return ret_val;
}

#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_validate_nvm_checksum_i350(struct e1000_hw *hw)
{
  #line 2514 
  u16 j;
  #line 2515 
  u16 nvm_offset;
  #line 2513 
  s32 ret_val = 0;
  #line 2517 
  j = (unsigned short)0U;
  #line 2517 
  while ((unsigned int)j <= 3U) {
    #line 2518 
    if ((unsigned int)j != 0U) 
                               #line 2518 
                               nvm_offset = (unsigned short)(((unsigned int)j + 1U) * 64U); else 
                                                                    #line 2518 
                                                                    nvm_offset = (unsigned short)0U;
    #line 2519 
    ret_val = igb_validate_nvm_checksum_with_offset(hw,(unsigned short)((int)nvm_offset));
    #line 2521 
    if (ret_val != 0) 
                      #line 2522 
                      goto out;
    #line 2517 
    j = (u16)((int)j + 1);
  }
  #line 2525 
  out: 
       #line 2525 
  ;
  #line 2526 
  return ret_val;
}

#line 2537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_update_nvm_checksum_i350(struct e1000_hw *hw)
{
  #line 2540 
  u16 j;
  #line 2541 
  u16 nvm_offset;
  #line 2539 
  s32 ret_val = 0;
  #line 2543 
  j = (unsigned short)0U;
  #line 2543 
  while ((unsigned int)j <= 3U) {
    #line 2544 
    if ((unsigned int)j != 0U) 
                               #line 2544 
                               nvm_offset = (unsigned short)(((unsigned int)j + 1U) * 64U); else 
                                                                    #line 2544 
                                                                    nvm_offset = (unsigned short)0U;
    #line 2545 
    ret_val = igb_update_nvm_checksum_with_offset(hw,(unsigned short)((int)nvm_offset));
    #line 2546 
    if (ret_val != 0) 
                      #line 2547 
                      goto out;
    #line 2543 
    j = (u16)((int)j + 1);
  }
  #line 2550 
  out: 
       #line 2550 
  ;
  #line 2551 
  return ret_val;
}

#line 2561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 __igb_access_emi_reg(struct e1000_hw *hw, u16 address, u16 *data, bool read)
{
  #line 2564 
  s32 ret_val = 0;
  #line 2566 
  ret_val = (*(hw->phy.ops.write_reg))(hw,16U,(unsigned short)((int)address));
  #line 2567 
  if (ret_val != 0) 
                    #line 2568 
                    return ret_val;
  #line 2570 
  if ((int)read != 0) 
                      #line 2571 
                      ret_val = (*(hw->phy.ops.read_reg))(hw,17U,data); else 
                                                                    #line 2573 
                                                                    ret_val = (*(hw->phy.ops.write_reg))(hw,17U,(unsigned short)((int)*data));
  #line 2575 
  return ret_val;
}

#line 2584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_read_emi_reg(struct e1000_hw *hw, u16 addr, u16 *data)
{
  #line 2586 
  return __igb_access_emi_reg(hw,(unsigned short)((int)addr),data,(_Bool)1);
}

#line 2598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_set_eee_i350(struct e1000_hw *hw, bool adv1G, bool adv100M)
{
  #line 2600 
  u32 ipcnfg;
  #line 2600 
  u32 eeer;
  #line 2602 
  if (hw->mac.type <= (unsigned int)e1000_82580 || hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
    #line 2604 
    goto out;
  #line 2605 
  ipcnfg = igb_rd32(hw,3640U);
  #line 2606 
  eeer = igb_rd32(hw,3632U);
  #line 2609 
  if (! hw->dev_spec._82575.eee_disable) {
    #line 2610 
    u32 eee_su = igb_rd32(hw,3636U);
    #line 2612 
    if ((int)adv100M != 0) 
                           #line 2613 
                           ipcnfg |= 4U; else 
                                              #line 2615 
                                              ipcnfg &= 4294967291U;
    #line 2617 
    if ((int)adv1G != 0) 
                         #line 2618 
                         ipcnfg |= 8U; else 
                                            #line 2620 
                                            ipcnfg &= 4294967287U;
    #line 2622 
    eeer |= 458752U;
    #line 2626 
    if ((eee_su & 8388608U) != 0U) {
      #line 2627 
      bool branch;
      #line 2627 
      struct _ddebug __UNIQUE_ID_ddebug482 = {.modname = (char *)"igb", .function = (char *)"igb_set_eee_i350", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = (char *)"LPI Clock Stop Bit should not be set!\n", .lineno = (unsigned int)2627U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2627 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug482.key.dd_key_false.key,(_Bool)0);
      #line 2627 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2627 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug482,igb_get_hw_dev(hw),(char *)"LPI Clock Stop Bit should not be set!\n");
      }
    }
  }
  else {
    #line 2630 
    ipcnfg &= 4294967283U;
    #line 2632 
    eeer &= 4294508543U;
  }
  {
    #line 2637 
    union __anonunion___u_4409 __u;
    #line 2636 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2636 
    u8 *hw_addr = (__u.__val);
    #line 2636 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2636 
                                           writel(ipcnfg,(void *)(hw_addr + 3640U));
  }
  {
    #line 2638 
    union __anonunion___u_4411 __u_0;
    #line 2637 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 2637 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 2637 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 2637 
                                             writel(eeer,(void *)(hw_addr_0 + 3632U));
  }
  #line 2638 
  igb_rd32(hw,3640U);
  #line 2639 
  igb_rd32(hw,3632U);
  #line 2640 
  out: 
       #line 2640 
  ;
  #line 2642 
  return 0;
}

#line 2654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_set_eee_i354(struct e1000_hw *hw, bool adv1G, bool adv100M)
{
  #line 2658 
  u16 phy_data;
  #line 2656 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2657 
  s32 ret_val = 0;
  #line 2660 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper || phy->id != 21040800U && phy->id != 21040592U) 
    #line 2663 
    goto out;
  #line 2665 
  if (! hw->dev_spec._82575.eee_disable) {
    #line 2667 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)18);
    #line 2668 
    if (ret_val != 0) 
                      #line 2669 
                      goto out;
    #line 2671 
    ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_data);
    #line 2673 
    if (ret_val != 0) 
                      #line 2674 
                      goto out;
    #line 2676 
    phy_data = (unsigned short)((unsigned int)phy_data | 1U);
    #line 2677 
    ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_data));
    #line 2679 
    if (ret_val != 0) 
                      #line 2680 
                      goto out;
    #line 2683 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
    #line 2684 
    if (ret_val != 0) 
                      #line 2685 
                      goto out;
    #line 2688 
    ret_val = igb_read_xmdio_reg(hw,(unsigned short)60,(unsigned char)7,& phy_data);
    #line 2691 
    if (ret_val != 0) 
                      #line 2692 
                      goto out;
    #line 2694 
    if ((int)adv100M != 0) 
                           #line 2695 
                           phy_data = (unsigned short)((unsigned int)phy_data | 2U); else 
                                                                    #line 2697 
                                                                    phy_data = (unsigned short)((unsigned int)phy_data & 65533U);
    #line 2699 
    if ((int)adv1G != 0) 
                         #line 2700 
                         phy_data = (unsigned short)((unsigned int)phy_data | 4U); else 
                                                                    #line 2702 
                                                                    phy_data = (unsigned short)((unsigned int)phy_data & 65531U);
    #line 2704 
    ret_val = igb_write_xmdio_reg(hw,(unsigned short)60,(unsigned char)7,(unsigned short)((int)phy_data));
  }
  else {
    #line 2709 
    ret_val = igb_read_xmdio_reg(hw,(unsigned short)60,(unsigned char)7,& phy_data);
    #line 2712 
    if (ret_val != 0) 
                      #line 2713 
                      goto out;
    #line 2715 
    phy_data = (unsigned short)((unsigned int)phy_data & 65529U);
    #line 2717 
    ret_val = igb_write_xmdio_reg(hw,(unsigned short)60,(unsigned char)7,(unsigned short)((int)phy_data));
  }
  #line 2722 
  out: 
       #line 2722 
  ;
  #line 2723 
  return ret_val;
}

#line 2734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_get_eee_status_i354(struct e1000_hw *hw, bool *status)
{
  #line 2738 
  u16 phy_data;
  #line 2736 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2737 
  s32 ret_val = 0;
  #line 2741 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper || phy->id != 21040800U && phy->id != 21040592U) 
    #line 2744 
    goto out;
  #line 2746 
  ret_val = igb_read_xmdio_reg(hw,(unsigned short)1,(unsigned char)3,& phy_data);
  #line 2749 
  if (ret_val != 0) 
                    #line 2750 
                    goto out;
  #line 2752 
  *status = (_Bool)(((int)phy_data & 3072) != 0);
  #line 2755 
  out: 
       #line 2755 
  ;
  #line 2756 
  return ret_val;
}

#line 2759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static u8 e1000_emc_temp_data[4U] = {[1] = (unsigned char)1U, (unsigned char)35U, (unsigned char)42U};
#line 2765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static u8 e1000_emc_therm_limit[4U] = {(unsigned char)32U, (unsigned char)25U, (unsigned char)26U, (unsigned char)48U};
#line 2779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_thermal_sensor_data_generic(struct e1000_hw *hw)
{
  #line 2781 
  u16 ets_offset;
  #line 2782 
  u16 ets_cfg;
  #line 2783 
  u16 ets_sensor;
  #line 2784 
  u8 num_sensors;
  #line 2785 
  u8 sensor_index;
  #line 2786 
  u8 sensor_location;
  #line 2787 
  u8 i;
  #line 2788 
  struct e1000_thermal_sensor_data *data = & hw->mac.thermal_sensor_data;
  #line 2790 
  if (hw->mac.type != (unsigned int)e1000_i350 || (unsigned int)hw->bus.func != 0U) 
    #line 2791 
    return 14;
  #line 2793 
  data->sensor[0].temp = (unsigned char)igb_rd32(hw,33024U);
  #line 2796 
  (*(hw->nvm.ops.read))(hw,(unsigned short)62,(unsigned short)1,& ets_offset);
  #line 2797 
  if ((unsigned int)ets_offset + 65535U > 65533U) 
                                                  #line 2798 
                                                  return 0;
  #line 2800 
  (*(hw->nvm.ops.read))(hw,(unsigned short)((int)ets_offset),(unsigned short)1,& ets_cfg);
  #line 2801 
  if ((((int)ets_cfg >> 3) & 7) != 0) 
                                      #line 2803 
                                      return 14;
  #line 2805 
  num_sensors = (unsigned char)((unsigned int)((unsigned char)ets_cfg) & 7U);
  #line 2806 
  if ((unsigned int)num_sensors > 3U) 
                                      #line 2807 
                                      num_sensors = (unsigned char)3U;
  #line 2809 
  i = (unsigned char)1U;
  #line 2809 
  while ((int)i < (int)num_sensors) {
    #line 2810 
    (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)i) + (int)ets_offset),(unsigned short)1,& ets_sensor);
    #line 2811 
    sensor_index = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 8)) & 3U);
    #line 2813 
    sensor_location = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 10)) & 15U);
    #line 2816 
    if ((unsigned int)sensor_location != 0U) 
                                             #line 2817 
                                             (*(hw->phy.ops.read_i2c_byte))(hw,(unsigned char)((int)e1000_emc_temp_data[(int)sensor_index]),(unsigned char)248,& data->sensor[(int)i].temp);
    #line 2809 
    i = (u8)((int)i + 1);
  }
  #line 2822 
  return 0;
}

#line 2832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_thermal_sensor_thresh_generic(struct e1000_hw *hw)
{
  #line 2834 
  u16 ets_offset;
  #line 2835 
  u16 ets_cfg;
  #line 2836 
  u16 ets_sensor;
  #line 2837 
  u8 low_thresh_delta;
  #line 2838 
  u8 num_sensors;
  #line 2839 
  u8 sensor_index;
  #line 2840 
  u8 sensor_location;
  #line 2841 
  u8 therm_limit;
  #line 2842 
  u8 i;
  #line 2843 
  struct e1000_thermal_sensor_data *data = & hw->mac.thermal_sensor_data;
  #line 2845 
  if (hw->mac.type != (unsigned int)e1000_i350 || (unsigned int)hw->bus.func != 0U) 
    #line 2846 
    return 14;
  #line 2848 
  memset((void *)data,0,12UL);
  #line 2850 
  data->sensor[0].location = (unsigned char)1U;
  #line 2851 
  data->sensor[0].caution_thresh = (unsigned char)igb_rd32(hw,33036U);
  #line 2853 
  data->sensor[0].max_op_thresh = (unsigned char)igb_rd32(hw,33028U);
  #line 2857 
  (*(hw->nvm.ops.read))(hw,(unsigned short)62,(unsigned short)1,& ets_offset);
  #line 2858 
  if ((unsigned int)ets_offset + 65535U > 65533U) 
                                                  #line 2859 
                                                  return 0;
  #line 2861 
  (*(hw->nvm.ops.read))(hw,(unsigned short)((int)ets_offset),(unsigned short)1,& ets_cfg);
  #line 2862 
  if ((((int)ets_cfg >> 3) & 7) != 0) 
                                      #line 2864 
                                      return 14;
  #line 2866 
  low_thresh_delta = (unsigned char)((unsigned int)((unsigned char)((int)ets_cfg >> 6)) & 31U);
  #line 2868 
  num_sensors = (unsigned char)((unsigned int)((unsigned char)ets_cfg) & 7U);
  #line 2870 
  i = (unsigned char)1U;
  #line 2870 
  while ((int)i <= (int)num_sensors) {
    #line 2871 
    (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)i) + (int)ets_offset),(unsigned short)1,& ets_sensor);
    #line 2872 
    sensor_index = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 8)) & 3U);
    #line 2874 
    sensor_location = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 10)) & 15U);
    #line 2876 
    therm_limit = (unsigned char)ets_sensor;
    #line 2878 
    (*(hw->phy.ops.write_i2c_byte))(hw,(unsigned char)((int)e1000_emc_therm_limit[(int)sensor_index]),(unsigned char)248,(unsigned char)((int)therm_limit));
    #line 2883 
    if ((unsigned int)i <= 2U && (unsigned int)sensor_location != 0U) {
      #line 2884 
      data->sensor[(int)i].location = sensor_location;
      #line 2885 
      data->sensor[(int)i].caution_thresh = therm_limit;
      #line 2886 
      data->sensor[(int)i].max_op_thresh = (unsigned char)((int)therm_limit - (int)low_thresh_delta);
    }
    #line 2870 
    i = (u8)((int)i + 1);
  }
  #line 2890 
  return 0;
}

#line 2894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static struct e1000_mac_operations e1000_mac_ops_82575 = {.check_for_link = & igb_check_for_link_82575, .init_hw = & igb_init_hw_82575, .rar_set = & igb_rar_set, .read_mac_addr = & igb_read_mac_addr_82575, .get_speed_and_duplex = & igb_get_link_up_info_82575, .get_thermal_sensor_data = & igb_get_thermal_sensor_data_generic, .init_thermal_sensor_thresh = & igb_init_thermal_sensor_thresh_generic};
#line 2906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static struct e1000_phy_operations e1000_phy_ops_82575 = {.acquire = & igb_acquire_phy_82575, .get_cfg_done = & igb_get_cfg_done_82575, .release = & igb_release_phy_82575, .read_i2c_byte = & igb_read_i2c_byte, .write_i2c_byte = & igb_write_i2c_byte};
#line 2914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
static struct e1000_nvm_operations e1000_nvm_ops_82575 = {.acquire = & igb_acquire_nvm_82575, .read = & igb_read_nvm_eerd, .release = & igb_release_nvm_82575, .write = & igb_write_nvm_spi};
#line 2921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_82575.c"
struct e1000_info e1000_82575_info = {.get_invariants = & igb_get_invariants_82575, .mac_ops = & e1000_mac_ops_82575, .phy_ops = & e1000_phy_ops_82575, .nvm_ops = & e1000_nvm_ops_82575};
/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 56 
void __dynamic_pr_debug(struct _ddebug *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  #line 26 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  #line 27 
  return dividend / (unsigned long long)divisor;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  #line 125 
  u32 remainder;
  #line 126 
  return div_u64_rem(dividend,divisor,& remainder);
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
__inline static s64 timespec64_to_ns(struct timespec64 *ts)
{
  #line 135 
  return ts->tv_sec * 1000000000LL + (long long)ts->tv_nsec;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static bool IS_ERR_0(void *ptr);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 667  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static void cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 658 
static void cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(spinlock_t *lock);
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_to_ns(ktime_t kt)
{
  #line 99 
  return kt;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  #line 267 
  return (long long)ns;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 43 
void ktime_get_real_ts64(struct timespec64 *);
#line 68 
#line 68 
ktime_t ktime_get_with_offset(enum tk_offsets);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  #line 79 
  return ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 554 
#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static bool cif_schedule_work_0(struct work_struct *work);
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  #line 1407 
  return & ((struct skb_shared_info *)skb_end_pointer(skb))->hwtstamps;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
__inline static void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
  #line 86 
  tc->nsec += (unsigned long long)delta;
  #line 87 
  return;
}

#line 99 
#line 99 
void timecounter_init(struct timecounter *, struct cyclecounter *, u64);
#line 111 
#line 111 
u64 timecounter_read(struct timecounter *);
#line 127 
#line 127 
u64 timecounter_cyc2time(struct timecounter *, u64);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 186 
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);
#line 195 
#line 195 
int ptp_clock_unregister(struct ptp_clock *);
#line 233 
#line 233 
int ptp_find_pin(struct ptp_clock *, enum ptp_pin_function, unsigned int);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
__inline static void ptp_read_system_prets(struct ptp_system_timestamp *sts)
{
  #line 268 
  if (sts != (struct ptp_system_timestamp *)0) 
                                               #line 269 
                                               ktime_get_real_ts64(& sts->pre_ts);
  #line 270 
  return;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
__inline static void ptp_read_system_postts(struct ptp_system_timestamp *sts)
{
  #line 274 
  if (sts != (struct ptp_system_timestamp *)0) 
                                               #line 275 
                                               ktime_get_real_ts64(& sts->post_ts);
  #line 276 
  return;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
#line 816 
static void igb_ptp_tx_hwtstamp(struct igb_adapter *adapter);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static u64 igb_ptp_read_82576(struct cyclecounter *cc)
{
  #line 76 
  void *__mptr;
  #line 78 
  u64 val;
  #line 79 
  u32 lo;
  #line 79 
  u32 hi;
  #line 76 
  __mptr = (void *)cc;
  #line 76 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709538672U));
  #line 77 
  struct e1000_hw *hw = & igb->hw;
  #line 81 
  lo = igb_rd32(hw,46592U);
  #line 82 
  hi = igb_rd32(hw,46596U);
  #line 84 
  val = (unsigned long long)hi << 32;
  #line 85 
  val = (unsigned long long)lo | val;
  #line 87 
  return val;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static u64 igb_ptp_read_82580(struct cyclecounter *cc)
{
  #line 93 
  void *__mptr;
  #line 95 
  u32 lo;
  #line 95 
  u32 hi;
  #line 96 
  u64 val;
  #line 93 
  __mptr = (void *)cc;
  #line 93 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709538672U));
  #line 94 
  struct e1000_hw *hw = & igb->hw;
  #line 102 
  igb_rd32(hw,46840U);
  #line 103 
  lo = igb_rd32(hw,46592U);
  #line 104 
  hi = igb_rd32(hw,46596U);
  #line 106 
  val = (unsigned long long)hi << 32;
  #line 107 
  val = (unsigned long long)lo | val;
  #line 109 
  return val;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_read_i210(struct igb_adapter *adapter, struct timespec64 *ts)
{
  #line 117 
  u32 sec;
  #line 117 
  u32 nsec;
  #line 116 
  struct e1000_hw *hw = & adapter->hw;
  #line 123 
  igb_rd32(hw,46840U);
  #line 124 
  nsec = igb_rd32(hw,46592U);
  #line 125 
  sec = igb_rd32(hw,46596U);
  #line 127 
  ts->tv_sec = (long long)sec;
  #line 128 
  ts->tv_nsec = (long)nsec;
  #line 129 
  return;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_write_i210(struct igb_adapter *adapter, struct timespec64 *ts)
{
  #line 134 
  struct e1000_hw *hw = & adapter->hw;
  {
    #line 140 
    union __anonunion___u_5144 __u;
    #line 139 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 139 
    u8 *hw_addr = (__u.__val);
    #line 139 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 139 
                                           writel((unsigned int)ts->tv_nsec,(void *)(hw_addr + 46592U));
  }
  {
    #line 141 
    union __anonunion___u_5146 __u_0;
    #line 140 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 140 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 140 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 140 
                                             writel((unsigned int)ts->tv_sec,(void *)(hw_addr_0 + 46596U));
  }
  #line 142 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_systim_to_hwtstamp(struct igb_adapter *adapter, struct skb_shared_hwtstamps *hwtstamps, u64 systim)
{
  #line 164 
  unsigned long flags;
  #line 165 
  u64 ns;
  #line 167 
  switch ((unsigned int)adapter->hw.mac.type) {
    #line 168 
    case (unsigned int)2: 
                          #line 168 
    ;
    #line 169 
    case (unsigned int)3: 
                          #line 169 
    ;
    #line 170 
    case (unsigned int)5: 
                          #line 170 
    ;
    #line 171 
    case (unsigned int)4: 
                          #line 171 
    ;
    #line 172 
    cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& adapter->tmreg_lock);
    #line 174 
    ns = timecounter_cyc2time(& adapter->tc,systim);
    #line 176 
    cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& adapter->tmreg_lock,flags);
    #line 178 
    memset((void *)hwtstamps,0,8UL);
    #line 179 
    hwtstamps->hwtstamp = ns_to_ktime(ns);
    #line 180 
    break;
    #line 181 
    case (unsigned int)6: 
                          #line 181 
    ;
    #line 182 
    case (unsigned int)7: 
                          #line 182 
    ;
    #line 183 
    memset((void *)hwtstamps,0,8UL);
    #line 185 
    hwtstamps->hwtstamp = ktime_set((long long)(systim >> 32),(unsigned long)systim & 4294967295UL);
    #line 187 
    break;
    #line 188 
    default: 
             #line 188 
    ;
    #line 189 
    break;
  }
  #line 191 
  return;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_adjfreq_82576(struct ptp_clock_info *ptp, s32 ppb)
{
  #line 196 
  void *__mptr;
  #line 200 
  u64 rate;
  #line 201 
  u32 incvalue;
  #line 196 
  __mptr = (void *)ptp;
  #line 196 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 198 
  struct e1000_hw *hw = & igb->hw;
  #line 199 
  int neg_adj = 0;
  #line 203 
  if (ppb < 0) {
    #line 204 
    neg_adj = 1;
    #line 205 
    ppb = - ppb;
  }
  #line 207 
  rate = (unsigned long long)ppb;
  #line 208 
  rate <<= 14;
  #line 209 
  rate = div_u64(rate,1953125U);
  #line 211 
  incvalue = 8388608U;
  #line 213 
  if (neg_adj != 0) 
                    #line 214 
                    incvalue -= (unsigned int)rate; else 
                                                         #line 216 
                                                         incvalue = (unsigned int)rate + incvalue;
  {
    #line 219 
    union __anonunion___u_5148 __u;
    #line 218 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 218 
    u8 *hw_addr = (__u.__val);
    #line 218 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 218 
                                           writel((incvalue & 16777215U) | 16777216U,(void *)(hw_addr + 46600U));
  }
  #line 220 
  return 0;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_adjfine_82580(struct ptp_clock_info *ptp, long scaled_ppm)
{
  #line 225 
  void *__mptr;
  #line 229 
  u64 rate;
  #line 230 
  u32 inca;
  #line 225 
  __mptr = (void *)ptp;
  #line 225 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 227 
  struct e1000_hw *hw = & igb->hw;
  #line 228 
  int neg_adj = 0;
  #line 232 
  if (scaled_ppm < 0L) {
    #line 233 
    neg_adj = 1;
    #line 234 
    scaled_ppm = - scaled_ppm;
  }
  #line 236 
  rate = (unsigned long long)scaled_ppm;
  #line 237 
  rate <<= 13;
  #line 238 
  rate = div_u64(rate,15625U);
  #line 240 
  inca = (unsigned int)rate & 2147483647U;
  #line 241 
  if (neg_adj != 0) 
                    #line 242 
                    inca |= 2147483648U;
  {
    #line 245 
    union __anonunion___u_5150 __u;
    #line 244 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 244 
    u8 *hw_addr = (__u.__val);
    #line 244 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 244 
                                           writel(inca,(void *)(hw_addr + 46600U));
  }
  #line 246 
  return 0;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_adjtime_82576(struct ptp_clock_info *ptp, s64 delta)
{
  #line 251 
  void *__mptr;
  #line 253 
  unsigned long flags;
  #line 251 
  __mptr = (void *)ptp;
  #line 251 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 255 
  cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
  #line 256 
  timecounter_adjtime(& igb->tc,delta);
  #line 257 
  cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
  #line 259 
  return 0;
}

#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_adjtime_i210(struct ptp_clock_info *ptp, s64 delta)
{
  #line 264 
  void *__mptr;
  #line 266 
  unsigned long flags;
  #line 267 
  struct timespec64 now;
  #line 264 
  __mptr = (void *)ptp;
  #line 264 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 267 
  struct timespec64 then = ns_to_timespec64(delta);
  #line 269 
  cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
  #line 271 
  igb_ptp_read_i210(igb,& now);
  #line 272 
  now = timespec64_add(now,then);
  #line 273 
  igb_ptp_write_i210(igb,& now);
  #line 275 
  cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
  #line 277 
  return 0;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_gettimex_82576(struct ptp_clock_info *ptp, struct timespec64 *ts, struct ptp_system_timestamp *sts)
{
  #line 284 
  void *__mptr;
  #line 287 
  unsigned long flags;
  #line 288 
  u32 lo;
  #line 288 
  u32 hi;
  #line 289 
  u64 ns;
  #line 284 
  __mptr = (void *)ptp;
  #line 284 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 286 
  struct e1000_hw *hw = & igb->hw;
  #line 291 
  cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
  #line 293 
  ptp_read_system_prets(sts);
  #line 294 
  lo = igb_rd32(hw,46592U);
  #line 295 
  ptp_read_system_postts(sts);
  #line 296 
  hi = igb_rd32(hw,46596U);
  #line 298 
  ns = timecounter_cyc2time(& igb->tc,((unsigned long long)hi << 32) | (unsigned long long)lo);
  #line 300 
  cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
  #line 302 
  *ts = ns_to_timespec64((long long)ns);
  #line 304 
  return 0;
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_gettimex_82580(struct ptp_clock_info *ptp, struct timespec64 *ts, struct ptp_system_timestamp *sts)
{
  #line 311 
  void *__mptr;
  #line 314 
  unsigned long flags;
  #line 315 
  u32 lo;
  #line 315 
  u32 hi;
  #line 316 
  u64 ns;
  #line 311 
  __mptr = (void *)ptp;
  #line 311 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 313 
  struct e1000_hw *hw = & igb->hw;
  #line 318 
  cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
  #line 320 
  ptp_read_system_prets(sts);
  #line 321 
  igb_rd32(hw,46840U);
  #line 322 
  ptp_read_system_postts(sts);
  #line 323 
  lo = igb_rd32(hw,46592U);
  #line 324 
  hi = igb_rd32(hw,46596U);
  #line 326 
  ns = timecounter_cyc2time(& igb->tc,((unsigned long long)hi << 32) | (unsigned long long)lo);
  #line 328 
  cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
  #line 330 
  *ts = ns_to_timespec64((long long)ns);
  #line 332 
  return 0;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_gettimex_i210(struct ptp_clock_info *ptp, struct timespec64 *ts, struct ptp_system_timestamp *sts)
{
  #line 339 
  void *__mptr;
  #line 342 
  unsigned long flags;
  #line 339 
  __mptr = (void *)ptp;
  #line 339 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 341 
  struct e1000_hw *hw = & igb->hw;
  #line 344 
  cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
  #line 346 
  ptp_read_system_prets(sts);
  #line 347 
  igb_rd32(hw,46840U);
  #line 348 
  ptp_read_system_postts(sts);
  #line 349 
  ts->tv_nsec = (long)igb_rd32(hw,46592U);
  #line 350 
  ts->tv_sec = (long long)igb_rd32(hw,46596U);
  #line 352 
  cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
  #line 354 
  return 0;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_settime_82576(struct ptp_clock_info *ptp, struct timespec64 *ts)
{
  #line 360 
  void *__mptr;
  #line 362 
  unsigned long flags;
  #line 363 
  u64 ns;
  #line 360 
  __mptr = (void *)ptp;
  #line 360 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 365 
  ns = (unsigned long long)timespec64_to_ns(ts);
  #line 367 
  cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
  #line 369 
  timecounter_init(& igb->tc,& igb->cc,ns);
  #line 371 
  cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
  #line 373 
  return 0;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_settime_i210(struct ptp_clock_info *ptp, struct timespec64 *ts)
{
  #line 379 
  void *__mptr;
  #line 381 
  unsigned long flags;
  #line 379 
  __mptr = (void *)ptp;
  #line 379 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 383 
  cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
  #line 385 
  igb_ptp_write_i210(igb,ts);
  #line 387 
  cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
  #line 389 
  return 0;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_pin_direction(int pin, int input, u32 *ctrl, u32 *ctrl_ext)
{
  #line 394 
  u32 *tmp;
  #line 394 
  if (pin <= 1) 
                #line 394 
                tmp = ctrl; else 
                                 #line 394 
                                 tmp = ctrl_ext;
  #line 394 
  u32 *ptr = tmp;
  #line 395 
  u32 mask[4U] = {4194304U, 8388608U, 1024U, 2048U};
  #line 402 
  if (input != 0) 
                  #line 403 
                  *ptr &= ~ mask[pin]; else 
                                            #line 405 
                                            *ptr |= mask[pin];
  #line 406 
  return;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_pin_extts(struct igb_adapter *igb, int chan, int pin)
{
  #line 420 
  u32 ctrl;
  #line 420 
  u32 ctrl_ext;
  #line 410 
  u32 aux0_sel_sdp[4U] = {0U, 1U, 2U, 3U};
  #line 413 
  u32 aux1_sel_sdp[4U] = {0U, 8U, 16U, 24U};
  #line 416 
  u32 ts_sdp_en[4U] = {256U, 2048U, 16384U, 131072U};
  #line 419 
  struct e1000_hw *hw = & igb->hw;
  #line 420 
  u32 tssdp = 0U;
  #line 422 
  ctrl = igb_rd32(hw,0U);
  #line 423 
  ctrl_ext = igb_rd32(hw,24U);
  #line 424 
  tssdp = igb_rd32(hw,60U);
  #line 426 
  igb_pin_direction(pin,1,& ctrl,& ctrl_ext);
  #line 429 
  tssdp = ~ ts_sdp_en[pin] & tssdp;
  #line 431 
  if (chan == 1) {
    #line 432 
    tssdp &= 4294967271U;
    #line 433 
    tssdp = (aux1_sel_sdp[pin] | tssdp) | 32U;
  }
  else {
    #line 435 
    tssdp &= 4294967292U;
    #line 436 
    tssdp = (aux0_sel_sdp[pin] | tssdp) | 4U;
  }
  {
    #line 440 
    union __anonunion___u_5152 __u;
    #line 439 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 439 
    u8 *hw_addr = (__u.__val);
    #line 439 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 439 
                                           writel(tssdp,(void *)(hw_addr + 60U));
  }
  {
    #line 441 
    union __anonunion___u_5154 __u_0;
    #line 440 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 440 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 440 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 440 
                                             writel(ctrl,(void *)hw_addr_0);
  }
  {
    #line 442 
    union __anonunion___u_5156 __u_1;
    #line 441 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 441 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 441 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 441 
                                             writel(ctrl_ext,(void *)(hw_addr_1 + 24U));
  }
  #line 443 
  return;
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_pin_perout(struct igb_adapter *igb, int chan, int pin, int freq)
{
  #line 476 
  u32 ctrl;
  #line 476 
  u32 ctrl_ext;
  #line 446 
  u32 aux0_sel_sdp[4U] = {0U, 1U, 2U, 3U};
  #line 449 
  u32 aux1_sel_sdp[4U] = {0U, 8U, 16U, 24U};
  #line 452 
  u32 ts_sdp_en[4U] = {256U, 2048U, 16384U, 131072U};
  #line 455 
  u32 ts_sdp_sel_tt0[4U] = {0U, 0U, 0U, 0U};
  #line 459 
  u32 ts_sdp_sel_tt1[4U] = {64U, 512U, 4096U, 32768U};
  #line 463 
  u32 ts_sdp_sel_fc0[4U] = {128U, 1024U, 8192U, 65536U};
  #line 467 
  u32 ts_sdp_sel_fc1[4U] = {192U, 1536U, 12288U, 98304U};
  #line 471 
  u32 ts_sdp_sel_clr[4U] = {192U, 1536U, 12288U, 98304U};
  #line 475 
  struct e1000_hw *hw = & igb->hw;
  #line 476 
  u32 tssdp = 0U;
  #line 478 
  ctrl = igb_rd32(hw,0U);
  #line 479 
  ctrl_ext = igb_rd32(hw,24U);
  #line 480 
  tssdp = igb_rd32(hw,60U);
  #line 482 
  igb_pin_direction(pin,0,& ctrl,& ctrl_ext);
  #line 485 
  if ((tssdp & 3U) == aux0_sel_sdp[pin]) 
                                         #line 486 
                                         tssdp &= 4294967291U;
  #line 488 
  if ((tssdp & 24U) == aux1_sel_sdp[pin]) 
                                          #line 489 
                                          tssdp &= 4294967263U;
  #line 491 
  tssdp = ~ ts_sdp_sel_clr[pin] & tssdp;
  #line 492 
  if (freq != 0) 
    #line 493 
    if (chan == 1) 
                   #line 494 
                   tssdp = ts_sdp_sel_fc1[pin] | tssdp; else 
                                                             #line 496 
                                                             tssdp = ts_sdp_sel_fc0[pin] | tssdp;
  else 
    #line 498 
    if (chan == 1) 
                   #line 499 
                   tssdp = ts_sdp_sel_tt1[pin] | tssdp; else 
                                                             #line 501 
                                                             tssdp = ts_sdp_sel_tt0[pin] | tssdp;
  #line 503 
  tssdp = ts_sdp_en[pin] | tssdp;
  {
    #line 506 
    union __anonunion___u_5158 __u;
    #line 505 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 505 
    u8 *hw_addr = (__u.__val);
    #line 505 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 505 
                                           writel(tssdp,(void *)(hw_addr + 60U));
  }
  {
    #line 507 
    union __anonunion___u_5160 __u_0;
    #line 506 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 506 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 506 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 506 
                                             writel(ctrl,(void *)hw_addr_0);
  }
  {
    #line 508 
    union __anonunion___u_5162 __u_1;
    #line 507 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 507 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 507 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 507 
                                             writel(ctrl_ext,(void *)(hw_addr_1 + 24U));
  }
  #line 509 
  return;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_feature_enable_i210(struct ptp_clock_info *ptp, struct ptp_clock_request *rq, int on)
{
  #line 514 
  void *__mptr;
  #line 516 
  u32 tsauxc;
  #line 516 
  u32 tsim;
  #line 516 
  u32 tsauxc_mask;
  #line 516 
  u32 tsim_mask;
  #line 516 
  u32 trgttiml;
  #line 516 
  u32 trgttimh;
  #line 516 
  u32 freqout;
  #line 517 
  unsigned long flags;
  #line 518 
  struct timespec64 ts;
  #line 520 
  s64 ns;
  #line 514 
  __mptr = (void *)ptp;
  #line 513 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539200U));
  #line 515 
  struct e1000_hw *hw = & igb->hw;
  #line 519 
  int use_freq = 0;
  #line 519 
  int pin = -1;
  #line 522 
  switch ((unsigned int)rq->type) {
    #line 523 
    case (unsigned int)0: 
                          #line 523 
    ;
    #line 525 
    if ((rq->__anonCompField_ptp_clock_request_160.extts.flags & 4294967280U) != 0U) 
      #line 529 
      return -95;
    #line 532 
    if (((rq->__anonCompField_ptp_clock_request_160.extts.flags & 8U) != 0U && (rq->__anonCompField_ptp_clock_request_160.extts.flags & 1U) != 0U) && (rq->__anonCompField_ptp_clock_request_160.extts.flags & 6U) != 6U) 
      #line 535 
      return -95;
    #line 537 
    if (on != 0) {
      #line 538 
      pin = ptp_find_pin(igb->ptp_clock,(enum ptp_pin_function)PTP_PF_EXTTS,rq->__anonCompField_ptp_clock_request_160.extts.index);
      #line 540 
      if (pin < 0) 
                   #line 541 
                   return -16;
    }
    #line 543 
    if (rq->__anonCompField_ptp_clock_request_160.extts.index == 1U) {
      #line 544 
      tsauxc_mask = 1024U;
      #line 545 
      tsim_mask = 64U;
    }
    else {
      #line 547 
      tsauxc_mask = 256U;
      #line 548 
      tsim_mask = 32U;
    }
    #line 550 
    cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
    #line 551 
    tsauxc = igb_rd32(hw,46656U);
    #line 552 
    tsim = igb_rd32(hw,46708U);
    #line 553 
    if (on != 0) {
      #line 554 
      igb_pin_extts(igb,(int)rq->__anonCompField_ptp_clock_request_160.extts.index,pin);
      #line 555 
      tsauxc |= tsauxc_mask;
      #line 556 
      tsim |= tsim_mask;
    }
    else {
      #line 558 
      tsauxc = ~ tsauxc_mask & tsauxc;
      #line 559 
      tsim = ~ tsim_mask & tsim;
    }
    {
      #line 562 
      union __anonunion___u_5164 __u;
      #line 561 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 561 
      u8 *hw_addr = (__u.__val);
      #line 561 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 561 
                                             writel(tsauxc,(void *)(hw_addr + 46656U));
    }
    {
      #line 563 
      union __anonunion___u_5166 __u_0;
      #line 562 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 562 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 562 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 562 
                                               writel(tsim,(void *)(hw_addr_0 + 46708U));
    }
    #line 563 
    cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
    #line 564 
    return 0;
    #line 566 
    case (unsigned int)1: 
                          #line 566 
    ;
    #line 568 
    if (rq->__anonCompField_ptp_clock_request_160.perout.flags != 0U) 
      #line 569 
      return -95;
    #line 571 
    if (on != 0) {
      #line 572 
      pin = ptp_find_pin(igb->ptp_clock,(enum ptp_pin_function)PTP_PF_PEROUT,rq->__anonCompField_ptp_clock_request_160.perout.index);
      #line 574 
      if (pin < 0) 
                   #line 575 
                   return -16;
    }
    #line 577 
    ts.tv_sec = rq->__anonCompField_ptp_clock_request_160.perout.period.sec;
    #line 578 
    ts.tv_nsec = (long)rq->__anonCompField_ptp_clock_request_160.perout.period.nsec;
    #line 579 
    ns = timespec64_to_ns(& ts);
    #line 580 
    ns >>= 1;
    #line 581 
    if (on != 0 && ((ns <= 70000000LL || ns == 125000000LL) || (ns == 250000000LL || ns == 500000000LL))) {
      #line 583 
      if (ns <= 7LL) 
                     #line 584 
                     return -22;
      #line 585 
      use_freq = 1;
    }
    #line 587 
    ts = ns_to_timespec64(ns);
    #line 588 
    if (rq->__anonCompField_ptp_clock_request_160.perout.index == 1U) {
      #line 589 
      if (use_freq != 0) {
        #line 590 
        tsauxc_mask = 160U;
        #line 591 
        tsim_mask = 0U;
      }
      else {
        #line 593 
        tsauxc_mask = 2U;
        #line 594 
        tsim_mask = 16U;
      }
      #line 596 
      trgttiml = 46668U;
      #line 597 
      trgttimh = 46672U;
      #line 598 
      freqout = 46680U;
    }
    else {
      #line 600 
      if (use_freq != 0) {
        #line 601 
        tsauxc_mask = 20U;
        #line 602 
        tsim_mask = 0U;
      }
      else {
        #line 604 
        tsauxc_mask = 1U;
        #line 605 
        tsim_mask = 8U;
      }
      #line 607 
      trgttiml = 46660U;
      #line 608 
      trgttimh = 46664U;
      #line 609 
      freqout = 46676U;
    }
    #line 611 
    cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
    #line 612 
    tsauxc = igb_rd32(hw,46656U);
    #line 613 
    tsim = igb_rd32(hw,46708U);
    #line 614 
    if (rq->__anonCompField_ptp_clock_request_160.perout.index == 1U) {
      #line 615 
      tsauxc &= 4294967133U;
      #line 616 
      tsim &= 4294967279U;
    }
    else {
      #line 618 
      tsauxc &= 4294967274U;
      #line 619 
      tsim &= 4294967287U;
    }
    #line 621 
    if (on != 0) {
      #line 622 
      int i = (int)rq->__anonCompField_ptp_clock_request_160.perout.index;
      #line 623 
      igb_pin_perout(igb,i,pin,use_freq);
      #line 624 
      igb->perout[i].start.tv_sec = rq->__anonCompField_ptp_clock_request_160.perout.start.sec;
      #line 625 
      igb->perout[i].start.tv_nsec = (long)rq->__anonCompField_ptp_clock_request_160.perout.start.nsec;
      #line 626 
      igb->perout[i].period.tv_sec = ts.tv_sec;
      #line 627 
      igb->perout[i].period.tv_nsec = ts.tv_nsec;
      {
        #line 629 
        union __anonunion___u_5168 __u_1;
        #line 628 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
        #line 628 
        u8 *hw_addr_1 = (__u_1.__val);
        #line 628 
        if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                                 #line 628 
                                                 writel((unsigned int)rq->__anonCompField_ptp_clock_request_160.perout.start.sec,(void *)(hw_addr_1 + (unsigned long)trgttimh));
      }
      {
        #line 630 
        union __anonunion___u_5170 __u_2;
        #line 629 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
        #line 629 
        u8 *hw_addr_2 = (__u_2.__val);
        #line 629 
        if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                                 #line 629 
                                                 writel(rq->__anonCompField_ptp_clock_request_160.perout.start.nsec,(void *)(hw_addr_2 + (unsigned long)trgttiml));
      }
      #line 630 
      if (use_freq != 0) {
        #line 632 
        union __anonunion___u_5172 __u_3;
        #line 631 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
        #line 631 
        u8 *hw_addr_3 = (__u_3.__val);
        #line 631 
        if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                                 #line 631 
                                                 writel((unsigned int)ns,(void *)(hw_addr_3 + (unsigned long)freqout));
      }
      #line 632 
      tsauxc |= tsauxc_mask;
      #line 633 
      tsim |= tsim_mask;
    }
    {
      #line 636 
      union __anonunion___u_5174 __u_4;
      #line 635 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 635 
      u8 *hw_addr_4 = (__u_4.__val);
      #line 635 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                               #line 635 
                                               writel(tsauxc,(void *)(hw_addr_4 + 46656U));
    }
    {
      #line 637 
      union __anonunion___u_5176 __u_5;
      #line 636 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 636 
      u8 *hw_addr_5 = (__u_5.__val);
      #line 636 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                               #line 636 
                                               writel(tsim,(void *)(hw_addr_5 + 46708U));
    }
    #line 637 
    cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
    #line 638 
    return 0;
    #line 640 
    case (unsigned int)2: 
                          #line 640 
    ;
    #line 641 
    cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& igb->tmreg_lock);
    #line 642 
    tsim = igb_rd32(hw,46708U);
    #line 643 
    if (on != 0) 
                 #line 644 
                 tsim |= 1U; else 
                                  #line 646 
                                  tsim &= 4294967294U;
    #line 647 
    igb->pps_sys_wrap_on = (_Bool)(on != 0);
    {
      #line 649 
      union __anonunion___u_5178 __u_6;
      #line 648 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
      #line 648 
      u8 *hw_addr_6 = (__u_6.__val);
      #line 648 
      if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
                                               #line 648 
                                               writel(tsim,(void *)(hw_addr_6 + 46708U));
    }
    #line 649 
    cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& igb->tmreg_lock,flags);
    #line 650 
    return 0;
  }
  #line 653 
  return -95;
}

#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_feature_enable(struct ptp_clock_info *ptp, struct ptp_clock_request *rq, int on)
{
  #line 659 
  return -95;
}

#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_verify_pin(struct ptp_clock_info *ptp, unsigned int pin, enum ptp_pin_function func, unsigned int chan)
{
  #line 665 
  switch ((unsigned int)func) {
    #line 666 
    case (unsigned int)0: 
                          #line 666 
    ;
    #line 667 
    case (unsigned int)1: 
                          #line 667 
    ;
    #line 668 
    case (unsigned int)2: 
                          #line 668 
    ;
    #line 669 
    break;
    #line 670 
    case (unsigned int)3: 
                          #line 670 
    ;
    #line 671 
    return -1;
  }
  #line 673 
  return 0;
}

#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_tx_work(struct work_struct *work)
{
  #line 685 
  void *__mptr;
  #line 688 
  u32 tsynctxctl;
  #line 685 
  __mptr = (void *)work;
  #line 685 
  struct igb_adapter *adapter = ((struct igb_adapter *)(__mptr + 18446744073709538880U));
  #line 687 
  struct e1000_hw *hw = & adapter->hw;
  #line 690 
  if (adapter->ptp_tx_skb == (struct sk_buff *)0) 
                                                  #line 691 
                                                  return;
  {
    #line 693 
    unsigned long __dummy;
    #line 693 
    unsigned long __dummy2;
    }
  #line 693 
  if (1 != 0) {
    {
      #line 693 
      unsigned long __dummy_0;
      #line 693 
      unsigned long __dummy2_0;
      }
    #line 693 
    if (1 != 0) 
      #line 693 
      if ((long)((adapter->ptp_tx_start - jiffies) + 3750UL) < 0L) {
        #line 695 
        dev_kfree_skb_any(adapter->ptp_tx_skb);
        #line 696 
        adapter->ptp_tx_skb = (struct sk_buff *)0;
        #line 697 
        clear_bit_unlock(3L,& adapter->state);
        #line 698 
        (adapter->tx_hwtstamp_timeouts) ++;
        #line 702 
        igb_rd32(hw,46620U);
        #line 703 
        _dev_warn(& (adapter->pdev)->dev,(char *)"clearing Tx timestamp hang\n");
        #line 704 
        return;
      }
  }
  #line 707 
  tsynctxctl = igb_rd32(hw,46612U);
  #line 708 
  if ((tsynctxctl & 1U) != 0U) 
                               #line 709 
                               igb_ptp_tx_hwtstamp(adapter); else 
                                                                  #line 712 
                                                                  cif_schedule_work_0(& adapter->ptp_tx_work);
  #line 713 
  return;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_overflow_check(struct work_struct *work)
{
  #line 718 
  void *__mptr;
  #line 719 
  struct timespec64 ts;
  #line 720 
  u64 ns;
  #line 718 
  __mptr = (void *)work;
  #line 717 
  struct igb_adapter *igb = ((struct igb_adapter *)(__mptr + 18446744073709539064U));
  #line 723 
  ns = timecounter_read(& igb->tc);
  #line 725 
  ts = ns_to_timespec64((long long)ns);
  {
    #line 726 
    bool branch;
    #line 726 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igb", .function = (char *)"igb_ptp_overflow_check", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c", .format = (char *)"igb overflow check at %lld.%09lu\n", .lineno = (unsigned int)726U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 726 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 726 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 726 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug444,(char *)"igb overflow check at %lld.%09lu\n",ts.tv_sec,ts.tv_nsec);
  }
  #line 729 
  cif_schedule_delayed_work(& igb->ptp_overflow_work,90000UL);
  #line 730 
  return;
}

#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_rx_hang(struct igb_adapter *adapter)
{
  #line 746 
  unsigned long rx_event;
  #line 744 
  struct e1000_hw *hw = & adapter->hw;
  #line 745 
  u32 tsyncrxctl = igb_rd32(hw,46624U);
  #line 749 
  if (hw->mac.type != (unsigned int)e1000_82576) 
                                                 #line 750 
                                                 return;
  #line 755 
  if ((tsyncrxctl & 1U) == 0U) {
    #line 756 
    adapter->last_rx_ptp_check = jiffies;
    #line 757 
    return;
  }
  #line 761 
  rx_event = adapter->last_rx_ptp_check;
  {
    #line 762 
    unsigned long __dummy;
    #line 762 
    unsigned long __dummy2;
    }
  #line 762 
  if (1 != 0) {
    {
      #line 762 
      unsigned long __dummy_0;
      #line 762 
      unsigned long __dummy2_0;
      }
    #line 762 
    if (1 != 0) 
      #line 762 
      if ((long)(rx_event - adapter->last_rx_timestamp) < 0L) 
                                                              #line 763 
                                                              rx_event = adapter->last_rx_timestamp;
  }
  {
    #line 766 
    unsigned long __dummy_1;
    #line 766 
    unsigned long __dummy2_1;
    }
  #line 766 
  if (1 != 0) {
    {
      #line 766 
      unsigned long __dummy_2;
      #line 766 
      unsigned long __dummy2_2;
      }
    #line 766 
    if (1 != 0) 
      #line 766 
      if ((long)((rx_event - jiffies) + 1250UL) < 0L) {
        #line 767 
        igb_rd32(hw,46632U);
        #line 768 
        adapter->last_rx_ptp_check = jiffies;
        #line 769 
        (adapter->rx_hwtstamp_cleared) ++;
        #line 770 
        _dev_warn(& (adapter->pdev)->dev,(char *)"clearing Rx timestamp hang\n");
      }
  }
  #line 772 
  return;
}

#line 778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_tx_hang(struct igb_adapter *adapter)
{
  #line 781 
  int tmp_1;
  #line 780 
  struct e1000_hw *hw = & adapter->hw;
  {
    #line 781 
    unsigned long __dummy;
    #line 781 
    unsigned long __dummy2;
    }
  #line 781 
  if (1 != 0) {
    {
      #line 781 
      unsigned long __dummy_0;
      #line 781 
      unsigned long __dummy2_0;
      }
    #line 781 
    if (1 != 0) 
      #line 781 
      if ((long)((adapter->ptp_tx_start - jiffies) + 3750UL) < 0L) 
                                                                   #line 781 
                                                                   tmp_1 = 1; else 
                                                                    #line 781 
                                                                    tmp_1 = 0;
    else 
         #line 781 
         tmp_1 = 0;
  }
  else 
       #line 781 
       tmp_1 = 0;
  #line 781 
  bool timeout = (_Bool)(tmp_1 != 0);
  #line 784 
  if (adapter->ptp_tx_skb == (struct sk_buff *)0) 
                                                  #line 785 
                                                  return;
  #line 787 
  if (! test_bit(3L,& adapter->state)) 
                                       #line 788 
                                       return;
  #line 794 
  if ((int)timeout != 0) {
    #line 795 
    cancel_work_sync(& adapter->ptp_tx_work);
    #line 796 
    dev_kfree_skb_any(adapter->ptp_tx_skb);
    #line 797 
    adapter->ptp_tx_skb = (struct sk_buff *)0;
    #line 798 
    clear_bit_unlock(3L,& adapter->state);
    #line 799 
    (adapter->tx_hwtstamp_timeouts) ++;
    #line 803 
    igb_rd32(hw,46620U);
    #line 804 
    _dev_warn(& (adapter->pdev)->dev,(char *)"clearing Tx timestamp hang\n");
  }
  #line 806 
  return;
}

#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_tx_hwtstamp(struct igb_adapter *adapter)
{
  #line 820 
  struct skb_shared_hwtstamps shhwtstamps;
  #line 821 
  u64 regval;
  #line 818 
  struct sk_buff *skb = adapter->ptp_tx_skb;
  #line 819 
  struct e1000_hw *hw = & adapter->hw;
  #line 822 
  int adjust = 0;
  #line 824 
  regval = (unsigned long long)igb_rd32(hw,46616U);
  #line 825 
  regval = ((unsigned long long)igb_rd32(hw,46620U) << 32) | regval;
  #line 827 
  igb_ptp_systim_to_hwtstamp(adapter,& shhwtstamps,regval);
  #line 829 
  if (adapter->hw.mac.type == (unsigned int)e1000_i210) 
    #line 830 
    switch ((int)adapter->link_speed) {
      #line 831 
      case 10: 
               #line 831 
      ;
      #line 832 
      adjust = 9542;
      #line 833 
      break;
      #line 834 
      case 100: 
                #line 834 
      ;
      #line 835 
      adjust = 1024;
      #line 836 
      break;
      #line 837 
      case 1000: 
                 #line 837 
      ;
      #line 838 
      adjust = 178;
      #line 839 
      break;
    }
  #line 843 
  shhwtstamps.hwtstamp += (long long)adjust;
  #line 851 
  adapter->ptp_tx_skb = (struct sk_buff *)0;
  #line 852 
  clear_bit_unlock(3L,& adapter->state);
  #line 855 
  skb_tstamp_tx(skb,& shhwtstamps);
  #line 856 
  dev_kfree_skb_any(skb);
  #line 857 
  return;
}

#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_rx_pktstamp(struct igb_q_vector *q_vector, void *va, struct sk_buff *skb)
{
  #line 872 
  __le64 *regval = (__le64 *)va;
  #line 873 
  struct igb_adapter *adapter = q_vector->adapter;
  #line 874 
  int adjust = 0;
  #line 880 
  ;
  #line 880 
  ;
  #line 880 
  igb_ptp_systim_to_hwtstamp(adapter,skb_hwtstamps(skb),*(regval + 1U));
  #line 884 
  if (adapter->hw.mac.type == (unsigned int)e1000_i210) 
    #line 885 
    switch ((int)adapter->link_speed) {
      #line 886 
      case 10: 
               #line 886 
      ;
      #line 887 
      adjust = 20662;
      #line 888 
      break;
      #line 889 
      case 100: 
                #line 889 
      ;
      #line 890 
      adjust = 2213;
      #line 891 
      break;
      #line 892 
      case 1000: 
                 #line 892 
      ;
      #line 893 
      adjust = 448;
      #line 894 
      break;
    }
  #line 897 
  skb_hwtstamps(skb)->hwtstamp = skb_hwtstamps(skb)->hwtstamp - (long long)adjust;
  #line 899 
  return;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_rx_rgtstamp(struct igb_q_vector *q_vector, struct sk_buff *skb)
{
  #line 914 
  u64 regval;
  #line 912 
  struct igb_adapter *adapter = q_vector->adapter;
  #line 913 
  struct e1000_hw *hw = & adapter->hw;
  #line 915 
  int adjust = 0;
  #line 927 
  if ((igb_rd32(hw,46624U) & 1U) == 0U) 
                                        #line 928 
                                        return;
  #line 930 
  regval = (unsigned long long)igb_rd32(hw,46628U);
  #line 931 
  regval = ((unsigned long long)igb_rd32(hw,46632U) << 32) | regval;
  #line 933 
  ;
  #line 933 
  ;
  #line 933 
  igb_ptp_systim_to_hwtstamp(adapter,skb_hwtstamps(skb),regval);
  #line 936 
  if (adapter->hw.mac.type == (unsigned int)e1000_i210) 
    #line 937 
    switch ((int)adapter->link_speed) {
      #line 938 
      case 10: 
               #line 938 
      ;
      #line 939 
      adjust = 20662;
      #line 940 
      break;
      #line 941 
      case 100: 
                #line 941 
      ;
      #line 942 
      adjust = 2213;
      #line 943 
      break;
      #line 944 
      case 1000: 
                 #line 944 
      ;
      #line 945 
      adjust = 448;
      #line 946 
      break;
    }
  #line 949 
  skb_hwtstamps(skb)->hwtstamp = skb_hwtstamps(skb)->hwtstamp - (long long)adjust;
  #line 955 
  adapter->last_rx_timestamp = jiffies;
  #line 956 
  return;
}

#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
int igb_ptp_get_ts_config(struct net_device *netdev, struct ifreq *ifr)
{
  #line 973 
  int tmp_1;
  #line 969 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 970 
  struct hwtstamp_config *config = & adapter->tstamp_config;
  #line 973 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)config,12UL) != 0UL) 
    #line 973 
    tmp_1 = -14; else 
                      #line 973 
                      tmp_1 = 0;
  #line 973 
  return tmp_1;
}

#line 993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_set_timestamp_mode(struct igb_adapter *adapter, struct hwtstamp_config *config)
{
  #line 1002 
  u32 regval;
  #line 996 
  struct e1000_hw *hw = & adapter->hw;
  #line 997 
  u32 tsync_tx_ctl = 16U;
  #line 998 
  u32 tsync_rx_ctl = 16U;
  #line 999 
  u32 tsync_rx_cfg = 0U;
  #line 1000 
  bool is_l4 = (_Bool)0;
  #line 1001 
  bool is_l2 = (_Bool)0;
  #line 1005 
  if (config->flags != 0) 
                          #line 1006 
                          return -22;
  #line 1008 
  switch (config->tx_type) {
    #line 1009 
    case 0: 
            #line 1009 
    ;
    #line 1010 
    tsync_tx_ctl = 0U;
    #line 1011 
    case 1: 
            #line 1011 
    ;
    #line 1012 
    break;
    #line 1013 
    default: 
             #line 1013 
    ;
    #line 1014 
    return -34;
  }
  #line 1017 
  switch (config->rx_filter) {
    #line 1018 
    case 0: 
            #line 1018 
    ;
    #line 1019 
    tsync_rx_ctl = 0U;
    #line 1020 
    break;
    #line 1021 
    case 4: 
            #line 1021 
    ;
    #line 1022 
    tsync_rx_ctl |= 2U;
    #line 1023 
    tsync_rx_cfg = 0U;
    #line 1024 
    is_l4 = (_Bool)1;
    #line 1025 
    break;
    #line 1026 
    case 5: 
            #line 1026 
    ;
    #line 1027 
    tsync_rx_ctl |= 2U;
    #line 1028 
    tsync_rx_cfg = 1U;
    #line 1029 
    is_l4 = (_Bool)1;
    #line 1030 
    break;
    #line 1031 
    case 12: 
             #line 1031 
    ;
    #line 1032 
    case 9: 
            #line 1032 
    ;
    #line 1033 
    case 6: 
            #line 1033 
    ;
    #line 1034 
    case 13: 
             #line 1034 
    ;
    #line 1035 
    case 10: 
             #line 1035 
    ;
    #line 1036 
    case 7: 
            #line 1036 
    ;
    #line 1037 
    case 14: 
             #line 1037 
    ;
    #line 1038 
    case 11: 
             #line 1038 
    ;
    #line 1039 
    case 8: 
            #line 1039 
    ;
    #line 1040 
    tsync_rx_ctl |= 10U;
    #line 1041 
    config->rx_filter = 12;
    #line 1042 
    is_l2 = (_Bool)1;
    #line 1043 
    is_l4 = (_Bool)1;
    #line 1044 
    break;
    #line 1045 
    case 3: 
            #line 1045 
    ;
    #line 1046 
    case 15: 
             #line 1046 
    ;
    #line 1047 
    case 1: 
            #line 1047 
    ;
    #line 1051 
    if (hw->mac.type != (unsigned int)e1000_82576) {
      #line 1052 
      tsync_rx_ctl |= 8U;
      #line 1053 
      config->rx_filter = 1;
      #line 1054 
      break;
    }
    #line 1057 
    default: 
             #line 1057 
    ;
    #line 1058 
    config->rx_filter = 0;
    #line 1059 
    return -34;
  }
  #line 1062 
  if (hw->mac.type == (unsigned int)e1000_82575) {
    #line 1063 
    if ((tsync_rx_ctl | tsync_tx_ctl) != 0U) 
                                             #line 1064 
                                             return -22;
    #line 1065 
    return 0;
  }
  #line 1072 
  if (hw->mac.type > (unsigned int)e1000_82576 && tsync_rx_ctl != 0U) {
    #line 1073 
    tsync_rx_ctl = 16U;
    #line 1074 
    tsync_rx_ctl |= 8U;
    #line 1075 
    config->rx_filter = 1;
    #line 1076 
    is_l2 = (_Bool)1;
    #line 1077 
    is_l4 = (_Bool)1;
    #line 1079 
    if ((unsigned int)hw->mac.type + 4294967290U <= 1U) {
      #line 1081 
      regval = igb_rd32(hw,9220U);
      #line 1082 
      regval |= 2147483648U;
      {
        #line 1084 
        union __anonunion___u_5180 __u;
        #line 1083 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 1083 
        u8 *hw_addr = (__u.__val);
        #line 1083 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 1083 
                                               writel(regval,(void *)(hw_addr + 9220U));
      }
    }
  }
  #line 1088 
  regval = igb_rd32(hw,46612U);
  #line 1089 
  regval &= 4294967279U;
  #line 1090 
  regval |= tsync_tx_ctl;
  {
    #line 1092 
    union __anonunion___u_5182 __u_0;
    #line 1091 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1091 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 1091 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 1091 
                                             writel(regval,(void *)(hw_addr_0 + 46612U));
  }
  #line 1094 
  regval = igb_rd32(hw,46624U);
  #line 1095 
  regval &= 4294967265U;
  #line 1096 
  regval |= tsync_rx_ctl;
  {
    #line 1098 
    union __anonunion___u_5184 __u_1;
    #line 1097 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 1097 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 1097 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 1097 
                                             writel(regval,(void *)(hw_addr_1 + 46624U));
  }
  {
    #line 1101 
    union __anonunion___u_5186 __u_2;
    #line 1100 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 1100 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 1100 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                             #line 1100 
                                             writel(tsync_rx_cfg,(void *)(hw_addr_2 + 24400U));
  }
  #line 1103 
  if ((int)is_l2 != 0) {
    #line 1105 
    union __anonunion___u_5188 __u_3;
    #line 1104 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 1104 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 1104 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                             #line 1104 
                                             writel(1140885751U,(void *)(hw_addr_3 + 23740U));
  }
  else {
    #line 1110 
    union __anonunion___u_5190 __u_4;
    #line 1109 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 1109 
    u8 *hw_addr_4 = (__u_4.__val);
    #line 1109 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                             #line 1109 
                                             writel(0U,(void *)(hw_addr_4 + 23740U));
  }
  #line 1112 
  if ((int)is_l4 != 0) {
    #line 1113 
    u32 ftqf = 4160782353U;
    #line 1117 
    ftqf &= 4026531839U;
    {
      #line 1120 
      union __anonunion___u_5192 __u_5;
      #line 1119 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 1119 
      u8 *hw_addr_5 = (__u_5.__val);
      #line 1119 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                               #line 1119 
                                               writel(16129U,(void *)(hw_addr_5 + 23180U));
    }
    {
      #line 1121 
      union __anonunion___u_5194 __u_6;
      #line 1120 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
      #line 1120 
      u8 *hw_addr_6 = (__u_6.__val);
      #line 1120 
      if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
                                               #line 1120 
                                               writel(528384U,(void *)(hw_addr_6 + 23212U));
    }
    #line 1122 
    if (hw->mac.type == (unsigned int)e1000_82576) {
      {
        #line 1125 
        union __anonunion___u_5196 __u_7;
        #line 1124 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
        #line 1124 
        u8 *hw_addr_7 = (__u_7.__val);
        #line 1124 
        if ((long)(hw_addr_7 == (u8 *)0U) == 0L) 
                                                 #line 1124 
                                                 writel(16129U,(void *)(hw_addr_7 + 22988U));
      }
      #line 1125 
      ftqf &= 2147483647U;
    }
    {
      #line 1128 
      union __anonunion___u_5198 __u_8;
      #line 1127 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_8.__c),8);
      #line 1127 
      u8 *hw_addr_8 = (__u_8.__val);
      #line 1127 
      if ((long)(hw_addr_8 == (u8 *)0U) == 0L) 
                                               #line 1127 
                                               writel(ftqf,(void *)(hw_addr_8 + 23020U));
    }
  }
  else {
    #line 1130 
    union __anonunion___u_5200 __u_9;
    #line 1129 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_9.__c),8);
    #line 1129 
    u8 *hw_addr_9 = (__u_9.__val);
    #line 1129 
    if ((long)(hw_addr_9 == (u8 *)0U) == 0L) 
                                             #line 1129 
                                             writel(4026531840U,(void *)(hw_addr_9 + 23020U));
  }
  #line 1131 
  igb_rd32(hw,8U);
  #line 1134 
  regval = igb_rd32(hw,46616U);
  #line 1135 
  regval = igb_rd32(hw,46620U);
  #line 1136 
  regval = igb_rd32(hw,46628U);
  #line 1137 
  regval = igb_rd32(hw,46632U);
  #line 1139 
  return 0;
}

#line 1148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
int igb_ptp_set_ts_config(struct net_device *netdev, struct ifreq *ifr)
{
  #line 1151 
  struct hwtstamp_config config;
  #line 1152 
  int err;
  #line 1166 
  int tmp_2;
  #line 1150 
  struct igb_adapter *adapter = netdev_priv(netdev);
  #line 1154 
  if (copy_from_user((void *)(& config),ifr->ifr_ifru.ifru_data,12UL) != 0UL) 
    #line 1155 
    return -14;
  #line 1157 
  err = igb_ptp_set_timestamp_mode(adapter,& config);
  #line 1158 
  if (err != 0) 
                #line 1159 
                return err;
  #line 1162 
  memcpy((void *)(& adapter->tstamp_config),(void *)(& config),12UL);
  #line 1166 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)(& config),12UL) != 0UL) 
    #line 1166 
    tmp_2 = -14; else 
                      #line 1166 
                      tmp_2 = 0;
  #line 1166 
  return tmp_2;
}

#line 1176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_init(struct igb_adapter *adapter)
{
  #line 1180 
  int i;
  #line 1178 
  struct e1000_hw *hw = & adapter->hw;
  #line 1179 
  struct net_device *netdev = adapter->netdev;
  #line 1182 
  switch ((unsigned int)hw->mac.type) {
    #line 1183 
    case (unsigned int)2: 
                          #line 1183 
    ;
    #line 1184 
    snprintf((char *)(& adapter->ptp_caps.name),16UL,(char *)"%pm",netdev->dev_addr);
    #line 1185 
    adapter->ptp_caps.owner = & __this_module;
    #line 1186 
    adapter->ptp_caps.max_adj = 999999881;
    #line 1187 
    adapter->ptp_caps.n_ext_ts = 0;
    #line 1188 
    adapter->ptp_caps.pps = 0;
    #line 1189 
    adapter->ptp_caps.adjfreq = & igb_ptp_adjfreq_82576;
    #line 1190 
    adapter->ptp_caps.adjtime = & igb_ptp_adjtime_82576;
    #line 1191 
    adapter->ptp_caps.gettimex64 = & igb_ptp_gettimex_82576;
    #line 1192 
    adapter->ptp_caps.settime64 = & igb_ptp_settime_82576;
    #line 1193 
    adapter->ptp_caps.enable = & igb_ptp_feature_enable;
    #line 1194 
    adapter->cc.read = & igb_ptp_read_82576;
    #line 1195 
    adapter->cc.mask = 18446744073709551615ULL;
    #line 1196 
    adapter->cc.mult = 1U;
    #line 1197 
    adapter->cc.shift = 19U;
    #line 1198 
    adapter->ptp_flags |= 2U;
    #line 1199 
    break;
    #line 1200 
    case (unsigned int)3: 
                          #line 1200 
    ;
    #line 1201 
    case (unsigned int)5: 
                          #line 1201 
    ;
    #line 1202 
    case (unsigned int)4: 
                          #line 1202 
    ;
    #line 1203 
    snprintf((char *)(& adapter->ptp_caps.name),16UL,(char *)"%pm",netdev->dev_addr);
    #line 1204 
    adapter->ptp_caps.owner = & __this_module;
    #line 1205 
    adapter->ptp_caps.max_adj = 62499999;
    #line 1206 
    adapter->ptp_caps.n_ext_ts = 0;
    #line 1207 
    adapter->ptp_caps.pps = 0;
    #line 1208 
    adapter->ptp_caps.adjfine = & igb_ptp_adjfine_82580;
    #line 1209 
    adapter->ptp_caps.adjtime = & igb_ptp_adjtime_82576;
    #line 1210 
    adapter->ptp_caps.gettimex64 = & igb_ptp_gettimex_82580;
    #line 1211 
    adapter->ptp_caps.settime64 = & igb_ptp_settime_82576;
    #line 1212 
    adapter->ptp_caps.enable = & igb_ptp_feature_enable;
    #line 1213 
    adapter->cc.read = & igb_ptp_read_82580;
    #line 1214 
    adapter->cc.mask = 1099511627775ULL;
    #line 1215 
    adapter->cc.mult = 1U;
    #line 1216 
    adapter->cc.shift = 0U;
    #line 1217 
    adapter->ptp_flags |= 2U;
    #line 1218 
    break;
    #line 1219 
    case (unsigned int)6: 
                          #line 1219 
    ;
    #line 1220 
    case (unsigned int)7: 
                          #line 1220 
    ;
    #line 1221 
    i = 0;
    #line 1221 
    while (i <= 3) {
      {
        #line 1222 
        struct ptp_pin_desc *ppd = & adapter->sdp_config[i];
        #line 1224 
        snprintf((char *)(& ppd->name),64UL,(char *)"SDP%d",i);
        #line 1225 
        ppd->index = (unsigned int)i;
        #line 1226 
        ppd->func = 0U;
      }
      #line 1221 
      i ++;
    }
    #line 1228 
    snprintf((char *)(& adapter->ptp_caps.name),16UL,(char *)"%pm",netdev->dev_addr);
    #line 1229 
    adapter->ptp_caps.owner = & __this_module;
    #line 1230 
    adapter->ptp_caps.max_adj = 62499999;
    #line 1231 
    adapter->ptp_caps.n_ext_ts = 2;
    #line 1232 
    adapter->ptp_caps.n_per_out = 2;
    #line 1233 
    adapter->ptp_caps.n_pins = 4;
    #line 1234 
    adapter->ptp_caps.pps = 1;
    #line 1235 
    adapter->ptp_caps.pin_config = (struct ptp_pin_desc *)(& adapter->sdp_config);
    #line 1236 
    adapter->ptp_caps.adjfine = & igb_ptp_adjfine_82580;
    #line 1237 
    adapter->ptp_caps.adjtime = & igb_ptp_adjtime_i210;
    #line 1238 
    adapter->ptp_caps.gettimex64 = & igb_ptp_gettimex_i210;
    #line 1239 
    adapter->ptp_caps.settime64 = & igb_ptp_settime_i210;
    #line 1240 
    adapter->ptp_caps.enable = & igb_ptp_feature_enable_i210;
    #line 1241 
    adapter->ptp_caps.verify = & igb_ptp_verify_pin;
    #line 1242 
    break;
    #line 1243 
    default: 
             #line 1243 
    ;
    #line 1244 
    adapter->ptp_clock = (struct ptp_clock *)0;
    #line 1245 
    return;
  }
  #line 1248 
  spinlock_check(& adapter->tmreg_lock);
  {
    #line 1248 
    struct lock_class_key __key;
    #line 1248 
    __raw_spin_lock_init(& adapter->tmreg_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->tmreg_lock)->rlock",& __key);
  }
  {
    #line 1249 
    struct lock_class_key __key_0;
    #line 1249 
    __init_work(& adapter->ptp_tx_work,0);
    #line 1249 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 1249 
    adapter->ptp_tx_work.data = __constr_expr_34;
    #line 1249 
    lockdep_init_map(& adapter->ptp_tx_work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 1249 
    INIT_LIST_HEAD_0(& adapter->ptp_tx_work.entry);
    #line 1249 
    adapter->ptp_tx_work.func = & igb_ptp_tx_work;
  }
  #line 1251 
  if (((unsigned long)adapter->ptp_flags & 2UL) != 0UL) {
    {
      #line 1252 
      struct lock_class_key __key_1;
      #line 1252 
      __init_work(& adapter->ptp_overflow_work.work,0);
      #line 1252 
      atomic_long_t __constr_expr_35 = {.counter = 137438953408LL};
      #line 1252 
      adapter->ptp_overflow_work.work.data = __constr_expr_35;
      #line 1252 
      lockdep_init_map(& adapter->ptp_overflow_work.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
      #line 1252 
      INIT_LIST_HEAD_0(& adapter->ptp_overflow_work.work.entry);
      #line 1252 
      adapter->ptp_overflow_work.work.func = & igb_ptp_overflow_check;
    }
    {
      #line 1252 
      struct lock_class_key __key_2;
      #line 1252 
      init_timer_key(& adapter->ptp_overflow_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->ptp_overflow_work)->timer",& __key_2);
    }
  }
  #line 1255 
  adapter->tstamp_config.rx_filter = 0;
  #line 1256 
  adapter->tstamp_config.tx_type = 0;
  #line 1258 
  igb_ptp_reset(adapter);
  #line 1260 
  adapter->ptp_clock = ptp_clock_register(& adapter->ptp_caps,& (adapter->pdev)->dev);
  #line 1262 
  if ((int)IS_ERR_0((void *)adapter->ptp_clock) != 0) {
    #line 1263 
    adapter->ptp_clock = (struct ptp_clock *)0;
    #line 1264 
    _dev_err(& (adapter->pdev)->dev,(char *)"ptp_clock_register failed\n");
  }
  else 
    #line 1265 
    if (adapter->ptp_clock != (struct ptp_clock *)0) {
      #line 1266 
      _dev_info(& (adapter->pdev)->dev,(char *)"added PHC on %s\n",(char *)(& (adapter->netdev)->name));
      #line 1268 
      adapter->ptp_flags |= 1U;
    }
  #line 1270 
  return;
}

#line 1279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_suspend(struct igb_adapter *adapter)
{
  #line 1281 
  if (((unsigned long)adapter->ptp_flags & 1UL) == 0UL) 
                                                        #line 1282 
                                                        return;
  #line 1284 
  if (((unsigned long)adapter->ptp_flags & 2UL) != 0UL) 
                                                        #line 1285 
                                                        cancel_delayed_work_sync(& adapter->ptp_overflow_work);
  #line 1287 
  cancel_work_sync(& adapter->ptp_tx_work);
  #line 1288 
  if (adapter->ptp_tx_skb != (struct sk_buff *)0) {
    #line 1289 
    dev_kfree_skb_any(adapter->ptp_tx_skb);
    #line 1290 
    adapter->ptp_tx_skb = (struct sk_buff *)0;
    #line 1291 
    clear_bit_unlock(3L,& adapter->state);
  }
  #line 1293 
  return;
}

#line 1301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_stop(struct igb_adapter *adapter)
{
  #line 1303 
  igb_ptp_suspend(adapter);
  #line 1305 
  if (adapter->ptp_clock != (struct ptp_clock *)0) {
    #line 1306 
    ptp_clock_unregister(adapter->ptp_clock);
    #line 1307 
    _dev_info(& (adapter->pdev)->dev,(char *)"removed PHC on %s\n",(char *)(& (adapter->netdev)->name));
    #line 1309 
    adapter->ptp_flags &= 4294967294U;
  }
  #line 1311 
  return;
}

#line 1319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_reset(struct igb_adapter *adapter)
{
  #line 1322 
  unsigned long flags;
  #line 1321 
  struct e1000_hw *hw = & adapter->hw;
  #line 1325 
  igb_ptp_set_timestamp_mode(adapter,& adapter->tstamp_config);
  #line 1327 
  cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(& adapter->tmreg_lock);
  #line 1329 
  switch ((unsigned int)adapter->hw.mac.type) {
    #line 1330 
    case (unsigned int)2: 
                          #line 1330 
    ;
    {
      #line 1333 
      union __anonunion___u_5202 __u;
      #line 1332 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1332 
      u8 *hw_addr = (__u.__val);
      #line 1332 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1332 
                                             writel(25165824U,(void *)(hw_addr + 46600U));
    }
    #line 1333 
    break;
    #line 1334 
    case (unsigned int)3: 
                          #line 1334 
    ;
    #line 1335 
    case (unsigned int)5: 
                          #line 1335 
    ;
    #line 1336 
    case (unsigned int)4: 
                          #line 1336 
    ;
    #line 1337 
    case (unsigned int)6: 
                          #line 1337 
    ;
    #line 1338 
    case (unsigned int)7: 
                          #line 1338 
    ;
    {
      #line 1340 
      union __anonunion___u_5204 __u_0;
      #line 1339 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1339 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 1339 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 1339 
                                               writel(0U,(void *)(hw_addr_0 + 46656U));
    }
    {
      #line 1341 
      union __anonunion___u_5206 __u_1;
      #line 1340 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 1340 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 1340 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 1340 
                                               writel(0U,(void *)(hw_addr_1 + 60U));
    }
    {
      #line 1342 
      union __anonunion___u_5208 __u_2;
      #line 1341 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 1341 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 1341 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) {
        #line 1341 
        unsigned int tmp_3;
        #line 1341 
        ;
        #line 1341 
        if ((int)adapter->pps_sys_wrap_on != 0) 
                                                #line 1341 
                                                tmp_3 = 3U; else 
                                                                 #line 1341 
                                                                 tmp_3 = 2U;
        #line 1341 
        writel(tmp_3,(void *)(hw_addr_2 + 46708U));
      }
    }
    {
      #line 1345 
      union __anonunion___u_5210 __u_3;
      #line 1344 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 1344 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 1344 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 1344 
                                               writel(524288U,(void *)(hw_addr_3 + 208U));
    }
    #line 1345 
    break;
    #line 1346 
    default: 
             #line 1346 
    ;
    #line 1348 
    goto out;
  }
  #line 1352 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U) {
    #line 1353 
    struct timespec64 ts = ns_to_timespec64(ktime_get_real());
    #line 1355 
    igb_ptp_write_i210(adapter,& ts);
  }
  else {
    #line 1357 
    ;
    #line 1357 
    ;
    #line 1357 
    timecounter_init(& adapter->tc,& adapter->cc,(unsigned long long)ktime_to_ns(ktime_get_real()));
  }
  #line 1360 
  out: 
       #line 1360 
  ;
  #line 1361 
  cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(& adapter->tmreg_lock,flags);
  #line 1363 
  igb_rd32(hw,8U);
  #line 1365 
  if (((unsigned long)adapter->ptp_flags & 2UL) != 0UL) 
                                                        #line 1366 
                                                        cif_schedule_delayed_work(& adapter->ptp_overflow_work,90000UL);
  #line 1367 
  return;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
#line 102 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 222 
  return ldv_is_err(ptr);
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static void cif___ldv_spin_lock_tmreg_lock_of_igb_adapter(spinlock_t *lock)
{
  #line 661 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  #line 663 
  __ldv_spin_lock(lock);
  #line 664 
  return;
}

#line 667  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static void cif_spin_unlock_irqrestore_tmreg_lock_of_igb_adapter(spinlock_t *lock, unsigned long flags)
{
  #line 670 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  #line 672 
  spin_unlock_irqrestore(lock,flags);
  #line 673 
  return;
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static bool cif_schedule_work_0(struct work_struct *work)
{
  #line 680 
  return emg_schedule_work(work);
}

#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/0/concurrency safety/weaver/igb_ptp.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 688 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.h"
#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_has_link(struct e1000_hw *hw, u32 iterations, u32 usec_interval, bool *success);
#line 10 
#line 923 
static s32 igb_phy_setup_autoneg(struct e1000_hw *hw);
#line 11 
#line 1331 
static void igb_phy_force_speed_duplex_setup(struct e1000_hw *hw, u16 *phy_ctrl);
#line 13 
#line 1588 
static s32 igb_wait_autoneg(struct e1000_hw *hw);
#line 14 
#line 2598 
static s32 igb_set_master_slave_mode(struct e1000_hw *hw);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static u16 e1000_m88_cable_length_table[7U] = {[1] = (unsigned short)50U, (unsigned short)80U, (unsigned short)110U, (unsigned short)140U, (unsigned short)140U, (unsigned short)255U};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static u16 e1000_igp_2_cable_length_table[113U] = {[8] = (unsigned short)3U, (unsigned short)5U, (unsigned short)8U, (unsigned short)11U, (unsigned short)13U, (unsigned short)16U, (unsigned short)18U, (unsigned short)21U, [19] = (unsigned short)3U, (unsigned short)6U, (unsigned short)10U, (unsigned short)13U, (unsigned short)16U, (unsigned short)19U, (unsigned short)23U, (unsigned short)26U, (unsigned short)29U, (unsigned short)32U, (unsigned short)35U, (unsigned short)38U, (unsigned short)41U, (unsigned short)6U, (unsigned short)10U, (unsigned short)14U, (unsigned short)18U, (unsigned short)22U, (unsigned short)26U, (unsigned short)30U, (unsigned short)33U, (unsigned short)37U, (unsigned short)41U, (unsigned short)44U, (unsigned short)48U, (unsigned short)51U, (unsigned short)54U, (unsigned short)58U, (unsigned short)61U, (unsigned short)21U, (unsigned short)26U, (unsigned short)31U, (unsigned short)35U, (unsigned short)40U, (unsigned short)44U, (unsigned short)49U, (unsigned short)53U, (unsigned short)57U, (unsigned short)61U, (unsigned short)65U, (unsigned short)68U, (unsigned short)72U, (unsigned short)75U, (unsigned short)79U, (unsigned short)82U, (unsigned short)40U, (unsigned short)45U, (unsigned short)51U, (unsigned short)56U, (unsigned short)61U, (unsigned short)66U, (unsigned short)70U, (unsigned short)75U, (unsigned short)79U, (unsigned short)83U, (unsigned short)87U, (unsigned short)91U, (unsigned short)94U, (unsigned short)98U, (unsigned short)101U, (unsigned short)104U, (unsigned short)60U, (unsigned short)66U, (unsigned short)72U, (unsigned short)77U, (unsigned short)82U, (unsigned short)87U, (unsigned short)92U, (unsigned short)96U, (unsigned short)100U, (unsigned short)104U, (unsigned short)108U, (unsigned short)111U, (unsigned short)114U, (unsigned short)117U, (unsigned short)119U, (unsigned short)121U, (unsigned short)83U, (unsigned short)89U, (unsigned short)95U, (unsigned short)100U, (unsigned short)105U, (unsigned short)109U, (unsigned short)113U, (unsigned short)116U, (unsigned short)119U, (unsigned short)122U, (unsigned short)124U, (unsigned short)104U, (unsigned short)109U, (unsigned short)114U, (unsigned short)118U, (unsigned short)121U, (unsigned short)124U};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_check_reset_block(struct e1000_hw *hw)
{
  #line 40 
  u32 manc;
  #line 44 
  int tmp;
  #line 42 
  manc = igb_rd32(hw,22560U);
  #line 44 
  if ((manc & 262144U) != 0U) 
                              #line 44 
                              tmp = 12; else 
                                             #line 44 
                                             tmp = 0;
  #line 44 
  return tmp;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_phy_id(struct e1000_hw *hw)
{
  #line 58 
  u16 phy_id;
  #line 56 
  struct e1000_phy_info *phy = & hw->phy;
  #line 57 
  s32 ret_val = 0;
  #line 61 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U) 
                                                      #line 62 
                                                      (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
  #line 64 
  ret_val = (*(phy->ops.read_reg))(hw,2U,& phy_id);
  #line 65 
  if (ret_val != 0) 
                    #line 66 
                    goto out;
  #line 68 
  phy->id = (unsigned int)((int)phy_id << 16);
  #line 69 
  __const_udelay(85900UL);
  #line 70 
  ret_val = (*(phy->ops.read_reg))(hw,3U,& phy_id);
  #line 71 
  if (ret_val != 0) 
                    #line 72 
                    goto out;
  #line 74 
  phy->id |= (unsigned int)phy_id & 4294967280U;
  #line 75 
  phy->revision = (unsigned int)phy_id & 15U;
  #line 77 
  out: 
       #line 77 
  ;
  #line 78 
  return ret_val;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_phy_reset_dsp(struct e1000_hw *hw)
{
  #line 89 
  s32 ret_val = 0;
  #line 91 
  if (hw->phy.ops.write_reg == (s32 (*)(struct e1000_hw *, u32 , u16 ))0) 
    #line 92 
    goto out;
  #line 94 
  ret_val = (*(hw->phy.ops.write_reg))(hw,30U,(unsigned short)193);
  #line 95 
  if (ret_val != 0) 
                    #line 96 
                    goto out;
  #line 98 
  ret_val = (*(hw->phy.ops.write_reg))(hw,30U,(unsigned short)0);
  #line 100 
  out: 
       #line 100 
  ;
  #line 101 
  return ret_val;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_read_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 116 
  u32 i;
  #line 115 
  struct e1000_phy_info *phy = & hw->phy;
  #line 116 
  u32 mdic = 0U;
  #line 117 
  s32 ret_val = 0;
  #line 119 
  if (offset > 31U) {
    {
      #line 120 
      bool branch;
      #line 120 
      struct _ddebug __UNIQUE_ID_ddebug436 = {.modname = (char *)"igb", .function = (char *)"igb_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"PHY Address %d is out of range\n", .lineno = (unsigned int)120U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 120 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug436.key.dd_key_false.key,(_Bool)0);
      #line 120 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 120 
        ;
        #line 120 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug436,igb_get_hw_dev(hw),(char *)"PHY Address %d is out of range\n",offset);
      }
    }
    #line 121 
    ret_val = -4;
    #line 122 
    goto out;
  }
  #line 129 
  mdic = ((offset << 16) | (phy->addr << 21)) | 134217728U;
  {
    #line 134 
    union __anonunion___u_5899 __u;
    #line 133 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 133 
    u8 *hw_addr = (__u.__val);
    #line 133 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 133 
                                           writel(mdic,(void *)(hw_addr + 32U));
  }
  #line 139 
  i = 0U;
  #line 139 
  while (i <= 1919U) {
    #line 140 
    __const_udelay(214750UL);
    #line 141 
    mdic = igb_rd32(hw,32U);
    #line 142 
    if ((mdic & 268435456U) != 0U) 
                                   #line 143 
                                   break;
    #line 139 
    i ++;
  }
  #line 145 
  if ((mdic & 268435456U) == 0U) {
    {
      #line 146 
      bool branch_0;
      #line 146 
      struct _ddebug __UNIQUE_ID_ddebug437 = {.modname = (char *)"igb", .function = (char *)"igb_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"MDI Read did not complete\n", .lineno = (unsigned int)146U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 146 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug437.key.dd_key_false.key,(_Bool)0);
      #line 146 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 146 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug437,igb_get_hw_dev(hw),(char *)"MDI Read did not complete\n");
      }
    }
    #line 147 
    ret_val = -2;
    #line 148 
    goto out;
  }
  #line 150 
  if ((mdic & 1073741824U) != 0U) {
    {
      #line 151 
      bool branch_1;
      #line 151 
      struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"igb", .function = (char *)"igb_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"MDI Error\n", .lineno = (unsigned int)151U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 151 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
      #line 151 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 151 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug438,igb_get_hw_dev(hw),(char *)"MDI Error\n");
      }
    }
    #line 152 
    ret_val = -2;
    #line 153 
    goto out;
  }
  #line 155 
  *data = (unsigned short)mdic;
  #line 157 
  out: 
       #line 157 
  ;
  #line 158 
  return ret_val;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_write_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 172 
  u32 i;
  #line 171 
  struct e1000_phy_info *phy = & hw->phy;
  #line 172 
  u32 mdic = 0U;
  #line 173 
  s32 ret_val = 0;
  #line 175 
  if (offset > 31U) {
    {
      #line 176 
      bool branch;
      #line 176 
      struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"igb", .function = (char *)"igb_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"PHY Address %d is out of range\n", .lineno = (unsigned int)176U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 176 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
      #line 176 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 176 
        ;
        #line 176 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug439,igb_get_hw_dev(hw),(char *)"PHY Address %d is out of range\n",offset);
      }
    }
    #line 177 
    ret_val = -4;
    #line 178 
    goto out;
  }
  #line 185 
  mdic = (((unsigned int)data | (offset << 16)) | (phy->addr << 21)) | 67108864U;
  {
    #line 191 
    union __anonunion___u_5901 __u;
    #line 190 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 190 
    u8 *hw_addr = (__u.__val);
    #line 190 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 190 
                                           writel(mdic,(void *)(hw_addr + 32U));
  }
  #line 196 
  i = 0U;
  #line 196 
  while (i <= 1919U) {
    #line 197 
    __const_udelay(214750UL);
    #line 198 
    mdic = igb_rd32(hw,32U);
    #line 199 
    if ((mdic & 268435456U) != 0U) 
                                   #line 200 
                                   break;
    #line 196 
    i ++;
  }
  #line 202 
  if ((mdic & 268435456U) == 0U) {
    {
      #line 203 
      bool branch_0;
      #line 203 
      struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"igb", .function = (char *)"igb_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"MDI Write did not complete\n", .lineno = (unsigned int)203U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 203 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
      #line 203 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 203 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug440,igb_get_hw_dev(hw),(char *)"MDI Write did not complete\n");
      }
    }
    #line 204 
    ret_val = -2;
    #line 205 
    goto out;
  }
  #line 207 
  if ((mdic & 1073741824U) != 0U) {
    {
      #line 208 
      bool branch_1;
      #line 208 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"igb", .function = (char *)"igb_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"MDI Error\n", .lineno = (unsigned int)208U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 208 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 208 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 208 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,igb_get_hw_dev(hw),(char *)"MDI Error\n");
      }
    }
    #line 209 
    ret_val = -2;
    #line 210 
    goto out;
  }
  #line 213 
  out: 
       #line 213 
  ;
  #line 214 
  return ret_val;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_read_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 229 
  u32 i;
  #line 228 
  struct e1000_phy_info *phy = & hw->phy;
  #line 229 
  u32 i2ccmd = 0U;
  #line 235 
  i2ccmd = ((offset << 16) | (phy->addr << 24)) | 134217728U;
  {
    #line 240 
    union __anonunion___u_5903 __u;
    #line 239 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 239 
    u8 *hw_addr = (__u.__val);
    #line 239 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 239 
                                           writel(i2ccmd,(void *)(hw_addr + 4136U));
  }
  #line 242 
  i = 0U;
  #line 242 
  while (i <= 199U) {
    #line 243 
    __const_udelay(214750UL);
    #line 244 
    i2ccmd = igb_rd32(hw,4136U);
    #line 245 
    if ((i2ccmd & 536870912U) != 0U) 
                                     #line 246 
                                     break;
    #line 242 
    i ++;
  }
  #line 248 
  if ((i2ccmd & 536870912U) == 0U) {
    {
      #line 249 
      bool branch;
      #line 249 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"igb", .function = (char *)"igb_read_phy_reg_i2c", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"I2CCMD Read did not complete\n", .lineno = (unsigned int)249U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 249 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 249 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 249 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,igb_get_hw_dev(hw),(char *)"I2CCMD Read did not complete\n");
      }
    }
    #line 250 
    return -2;
  }
  #line 252 
  if ((i2ccmd & 2147483648U) != 0U) {
    {
      #line 253 
      bool branch_0;
      #line 253 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"igb", .function = (char *)"igb_read_phy_reg_i2c", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"I2CCMD Error bit set\n", .lineno = (unsigned int)253U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 253 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 253 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 253 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,igb_get_hw_dev(hw),(char *)"I2CCMD Error bit set\n");
      }
    }
    #line 254 
    return -2;
  }
  #line 258 
  *data = (unsigned short)(((unsigned int)((unsigned short)(i2ccmd >> 8)) & 255U) | (unsigned int)((int)((unsigned short)i2ccmd) << 8U));
  #line 260 
  return 0;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_write_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 274 
  u32 i;
  #line 275 
  u16 phy_data_swapped;
  #line 273 
  struct e1000_phy_info *phy = & hw->phy;
  #line 274 
  u32 i2ccmd = 0U;
  #line 278 
  if (hw->phy.addr + 4294967295U > 6U) {
    {
      #line 279 
      bool branch;
      #line 279 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igb", .function = (char *)"igb_write_phy_reg_i2c", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"PHY I2C Address %d is out of range.\n", .lineno = (unsigned int)279U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 279 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 279 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 279 
        ;
        #line 279 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,igb_get_hw_dev(hw),(char *)"PHY I2C Address %d is out of range.\n",hw->phy.addr);
      }
    }
    #line 281 
    return -3;
  }
  #line 285 
  phy_data_swapped = (unsigned short)(((int)data >> 8) | ((int)data << 8));
  #line 291 
  i2ccmd = ((offset << 16) | (phy->addr << 24)) | (unsigned int)phy_data_swapped;
  {
    #line 297 
    union __anonunion___u_5905 __u;
    #line 296 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 296 
    u8 *hw_addr = (__u.__val);
    #line 296 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 296 
                                           writel(i2ccmd,(void *)(hw_addr + 4136U));
  }
  #line 299 
  i = 0U;
  #line 299 
  while (i <= 199U) {
    #line 300 
    __const_udelay(214750UL);
    #line 301 
    i2ccmd = igb_rd32(hw,4136U);
    #line 302 
    if ((i2ccmd & 536870912U) != 0U) 
                                     #line 303 
                                     break;
    #line 299 
    i ++;
  }
  #line 305 
  if ((i2ccmd & 536870912U) == 0U) {
    {
      #line 306 
      bool branch_0;
      #line 306 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"igb", .function = (char *)"igb_write_phy_reg_i2c", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"I2CCMD Write did not complete\n", .lineno = (unsigned int)306U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 306 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 306 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 306 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,igb_get_hw_dev(hw),(char *)"I2CCMD Write did not complete\n");
      }
    }
    #line 307 
    return -2;
  }
  #line 309 
  if ((i2ccmd & 2147483648U) != 0U) {
    {
      #line 310 
      bool branch_1;
      #line 310 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"igb", .function = (char *)"igb_write_phy_reg_i2c", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"I2CCMD Error bit set\n", .lineno = (unsigned int)310U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 310 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 310 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 310 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,igb_get_hw_dev(hw),(char *)"I2CCMD Error bit set\n");
      }
    }
    #line 311 
    return -2;
  }
  #line 314 
  return 0;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_read_sfp_data_byte(struct e1000_hw *hw, u16 offset, u8 *data)
{
  #line 332 
  u32 i = 0U;
  #line 333 
  u32 i2ccmd = 0U;
  #line 334 
  u32 data_local = 0U;
  #line 336 
  if ((unsigned int)offset > 511U) {
    {
      #line 337 
      bool branch;
      #line 337 
      struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"igb", .function = (char *)"igb_read_sfp_data_byte", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"I2CCMD command address exceeds upper limit\n", .lineno = (unsigned int)337U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 337 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
      #line 337 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 337 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,igb_get_hw_dev(hw),(char *)"I2CCMD command address exceeds upper limit\n");
      }
    }
    #line 338 
    return -2;
  }
  #line 345 
  i2ccmd = (unsigned int)(((int)offset << 16) | 134217728);
  {
    #line 349 
    union __anonunion___u_5907 __u;
    #line 348 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 348 
    u8 *hw_addr = (__u.__val);
    #line 348 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 348 
                                           writel(i2ccmd,(void *)(hw_addr + 4136U));
  }
  #line 351 
  i = 0U;
  #line 351 
  while (i <= 199U) {
    #line 352 
    __const_udelay(214750UL);
    #line 353 
    data_local = igb_rd32(hw,4136U);
    #line 354 
    if ((data_local & 536870912U) != 0U) 
                                         #line 355 
                                         break;
    #line 351 
    i ++;
  }
  #line 357 
  if ((data_local & 536870912U) == 0U) {
    {
      #line 358 
      bool branch_0;
      #line 358 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"igb", .function = (char *)"igb_read_sfp_data_byte", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"I2CCMD Read did not complete\n", .lineno = (unsigned int)358U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 358 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 358 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 358 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,igb_get_hw_dev(hw),(char *)"I2CCMD Read did not complete\n");
      }
    }
    #line 359 
    return -2;
  }
  #line 361 
  if ((data_local & 2147483648U) != 0U) {
    {
      #line 362 
      bool branch_1;
      #line 362 
      struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"igb", .function = (char *)"igb_read_sfp_data_byte", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"I2CCMD Error bit set\n", .lineno = (unsigned int)362U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 362 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
      #line 362 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 362 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,igb_get_hw_dev(hw),(char *)"I2CCMD Error bit set\n");
      }
    }
    #line 363 
    return -2;
  }
  #line 365 
  *data = (unsigned char)data_local;
  #line 367 
  return 0;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 382 
  s32 ret_val = 0;
  #line 384 
  if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) 
                                                            #line 385 
                                                            goto out;
  #line 387 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 388 
  if (ret_val != 0) 
                    #line 389 
                    goto out;
  #line 391 
  if (offset > 15U) {
    #line 392 
    ret_val = igb_write_phy_reg_mdic(hw,31U,(unsigned short)((int)((unsigned short)offset)));
    #line 395 
    if (ret_val != 0) {
      #line 396 
      (*(hw->phy.ops.release))(hw);
      #line 397 
      goto out;
    }
  }
  #line 401 
  ret_val = igb_read_phy_reg_mdic(hw,offset & 31U,data);
  #line 404 
  (*(hw->phy.ops.release))(hw);
  #line 406 
  out: 
       #line 406 
  ;
  #line 407 
  return ret_val;
}

#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 421 
  s32 ret_val = 0;
  #line 423 
  if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) 
                                                            #line 424 
                                                            goto out;
  #line 426 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 427 
  if (ret_val != 0) 
                    #line 428 
                    goto out;
  #line 430 
  if (offset > 15U) {
    #line 431 
    ret_val = igb_write_phy_reg_mdic(hw,31U,(unsigned short)((int)((unsigned short)offset)));
    #line 434 
    if (ret_val != 0) {
      #line 435 
      (*(hw->phy.ops.release))(hw);
      #line 436 
      goto out;
    }
  }
  #line 440 
  ret_val = igb_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  #line 443 
  (*(hw->phy.ops.release))(hw);
  #line 445 
  out: 
       #line 445 
  ;
  #line 446 
  return ret_val;
}

#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_copper_link_setup_82580(struct e1000_hw *hw)
{
  #line 458 
  s32 ret_val;
  #line 459 
  u16 phy_data;
  #line 457 
  struct e1000_phy_info *phy = & hw->phy;
  #line 461 
  if ((int)phy->reset_disable != 0) {
    #line 462 
    ret_val = 0;
    #line 463 
    goto out;
  }
  #line 466 
  if (phy->type == (unsigned int)e1000_phy_82580) {
    #line 467 
    ret_val = (*(hw->phy.ops.reset))(hw);
    #line 468 
    if (ret_val != 0) {
      {
        #line 469 
        bool branch;
        #line 469 
        struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_setup_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error resetting the PHY.\n", .lineno = (unsigned int)469U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 469 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
        #line 469 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 469 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,igb_get_hw_dev(hw),(char *)"Error resetting the PHY.\n");
        }
      }
      #line 470 
      goto out;
    }
  }
  #line 475 
  ret_val = (*(phy->ops.read_reg))(hw,22U,& phy_data);
  #line 476 
  if (ret_val != 0) 
                    #line 477 
                    goto out;
  #line 479 
  phy_data = (unsigned short)((unsigned int)phy_data | 32768U);
  #line 482 
  phy_data = (unsigned short)((unsigned int)phy_data | 3072U);
  #line 484 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)((int)phy_data));
  #line 485 
  if (ret_val != 0) 
                    #line 486 
                    goto out;
  #line 489 
  ret_val = (*(phy->ops.read_reg))(hw,18U,& phy_data);
  #line 490 
  if (ret_val != 0) 
                    #line 491 
                    goto out;
  #line 492 
  phy_data = (unsigned short)((unsigned int)phy_data & 63999U);
  #line 498 
  switch ((int)hw->phy.mdix) {
    #line 499 
    case 1: 
            #line 499 
    ;
    #line 500 
    break;
    #line 501 
    case 2: 
            #line 501 
    ;
    #line 502 
    phy_data = (unsigned short)((unsigned int)phy_data | 512U);
    #line 503 
    break;
    #line 504 
    case 0: 
            #line 504 
    ;
    #line 505 
    default: 
             #line 505 
    ;
    #line 506 
    phy_data = (unsigned short)((unsigned int)phy_data | 1024U);
    #line 507 
    break;
  }
  #line 509 
  ret_val = (*(hw->phy.ops.write_reg))(hw,18U,(unsigned short)((int)phy_data));
  #line 511 
  out: 
       #line 511 
  ;
  #line 512 
  return ret_val;
}

#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_copper_link_setup_m88(struct e1000_hw *hw)
{
  #line 525 
  s32 ret_val;
  #line 526 
  u16 phy_data;
  #line 524 
  struct e1000_phy_info *phy = & hw->phy;
  #line 528 
  if ((int)phy->reset_disable != 0) {
    #line 529 
    ret_val = 0;
    #line 530 
    goto out;
  }
  #line 534 
  ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
  #line 535 
  if (ret_val != 0) 
                    #line 536 
                    goto out;
  #line 538 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  #line 547 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  #line 549 
  switch ((int)phy->mdix) {
    #line 550 
    case 1: 
            #line 550 
    ;
    #line 551 
    phy_data = phy_data;
    #line 552 
    break;
    #line 553 
    case 2: 
            #line 553 
    ;
    #line 554 
    phy_data = (unsigned short)((unsigned int)phy_data | 32U);
    #line 555 
    break;
    #line 556 
    case 3: 
            #line 556 
    ;
    #line 557 
    phy_data = (unsigned short)((unsigned int)phy_data | 64U);
    #line 558 
    break;
    #line 559 
    case 0: 
            #line 559 
    ;
    #line 560 
    default: 
             #line 560 
    ;
    #line 561 
    phy_data = (unsigned short)((unsigned int)phy_data | 96U);
    #line 562 
    break;
  }
  #line 571 
  phy_data = (unsigned short)((unsigned int)phy_data & 65533U);
  #line 572 
  if ((int)phy->disable_polarity_correction == 1) 
                                                  #line 573 
                                                  phy_data = (unsigned short)((unsigned int)phy_data | 2U);
  #line 575 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
  #line 576 
  if (ret_val != 0) 
                    #line 577 
                    goto out;
  #line 579 
  if (phy->revision <= 3U) {
    #line 583 
    ret_val = (*(phy->ops.read_reg))(hw,20U,& phy_data);
    #line 585 
    if (ret_val != 0) 
                      #line 586 
                      goto out;
    #line 588 
    phy_data = (unsigned short)((unsigned int)phy_data | 112U);
    #line 590 
    if (phy->revision == 2U && phy->id == 21040320U) {
      #line 593 
      phy_data = (unsigned short)((unsigned int)phy_data & 61951U);
      #line 594 
      phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
    }
    else {
      #line 597 
      phy_data = (unsigned short)((unsigned int)phy_data & 61695U);
      #line 599 
      phy_data = (unsigned short)((unsigned int)phy_data | 256U);
    }
    #line 602 
    ret_val = (*(phy->ops.write_reg))(hw,20U,(unsigned short)((int)phy_data));
    #line 604 
    if (ret_val != 0) 
                      #line 605 
                      goto out;
  }
  #line 609 
  ret_val = igb_phy_sw_reset(hw);
  #line 610 
  if (ret_val != 0) {
    {
      #line 611 
      bool branch;
      #line 611 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_setup_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error committing the PHY changes\n", .lineno = (unsigned int)611U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 611 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 611 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 611 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,igb_get_hw_dev(hw),(char *)"Error committing the PHY changes\n");
      }
    }
    #line 612 
    goto out;
  }
  #line 615 
  out: 
       #line 615 
  ;
  #line 616 
  return ret_val;
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_copper_link_setup_m88_gen2(struct e1000_hw *hw)
{
  #line 629 
  s32 ret_val;
  #line 630 
  u16 phy_data;
  #line 628 
  struct e1000_phy_info *phy = & hw->phy;
  #line 632 
  if ((int)phy->reset_disable != 0) 
                                    #line 633 
                                    return 0;
  #line 636 
  ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
  #line 637 
  if (ret_val != 0) 
                    #line 638 
                    return ret_val;
  #line 647 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  #line 649 
  switch ((int)phy->mdix) {
    #line 650 
    case 1: 
            #line 650 
    ;
    #line 651 
    phy_data = phy_data;
    #line 652 
    break;
    #line 653 
    case 2: 
            #line 653 
    ;
    #line 654 
    phy_data = (unsigned short)((unsigned int)phy_data | 32U);
    #line 655 
    break;
    #line 656 
    case 3: 
            #line 656 
    ;
    #line 658 
    if (phy->id != 21040272U) {
      #line 659 
      phy_data = (unsigned short)((unsigned int)phy_data | 64U);
      #line 660 
      break;
    }
    #line 663 
    case 0: 
            #line 663 
    ;
    #line 664 
    default: 
             #line 664 
    ;
    #line 665 
    phy_data = (unsigned short)((unsigned int)phy_data | 96U);
    #line 666 
    break;
  }
  #line 675 
  phy_data = (unsigned short)((unsigned int)phy_data & 65533U);
  #line 676 
  if ((int)phy->disable_polarity_correction == 1) 
                                                  #line 677 
                                                  phy_data = (unsigned short)((unsigned int)phy_data | 2U);
  #line 680 
  if (phy->id == 21040800U) {
    #line 681 
    phy_data = (unsigned short)((unsigned int)phy_data & 63487U);
    #line 682 
    ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
    #line 684 
    if (ret_val != 0) 
                      #line 685 
                      return ret_val;
    #line 687 
    ret_val = igb_phy_sw_reset(hw);
    #line 688 
    if (ret_val != 0) {
      {
        #line 689 
        bool branch;
        #line 689 
        struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_setup_m88_gen2", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error committing the PHY changes\n", .lineno = (unsigned int)689U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 689 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
        #line 689 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 689 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,igb_get_hw_dev(hw),(char *)"Error committing the PHY changes\n");
        }
      }
      #line 690 
      return ret_val;
    }
  }
  #line 694 
  phy_data = (unsigned short)((unsigned int)phy_data & 36863U);
  #line 695 
  phy_data = (unsigned short)((unsigned int)phy_data | 20480U);
  #line 696 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  #line 698 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
  #line 699 
  if (ret_val != 0) 
                    #line 700 
                    return ret_val;
  #line 703 
  ret_val = igb_phy_sw_reset(hw);
  #line 704 
  if (ret_val != 0) {
    {
      #line 705 
      bool branch_0;
      #line 705 
      struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_setup_m88_gen2", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error committing the PHY changes\n", .lineno = (unsigned int)705U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 705 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
      #line 705 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 705 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,igb_get_hw_dev(hw),(char *)"Error committing the PHY changes\n");
      }
    }
    #line 706 
    return ret_val;
  }
  #line 708 
  ret_val = igb_set_master_slave_mode(hw);
  #line 709 
  if (ret_val != 0) 
                    #line 710 
                    return ret_val;
  #line 712 
  return 0;
}

#line 722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_copper_link_setup_igp(struct e1000_hw *hw)
{
  #line 725 
  s32 ret_val;
  #line 726 
  u16 data;
  #line 724 
  struct e1000_phy_info *phy = & hw->phy;
  #line 728 
  if ((int)phy->reset_disable != 0) {
    #line 729 
    ret_val = 0;
    #line 730 
    goto out;
  }
  #line 733 
  ret_val = (*(phy->ops.reset))(hw);
  #line 734 
  if (ret_val != 0) {
    {
      #line 735 
      bool branch;
      #line 735 
      struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_setup_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error resetting the PHY.\n", .lineno = (unsigned int)735U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 735 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
      #line 735 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 735 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,igb_get_hw_dev(hw),(char *)"Error resetting the PHY.\n");
      }
    }
    #line 736 
    goto out;
  }
  #line 742 
  msleep(100U);
  #line 747 
  if (phy->type == (unsigned int)e1000_phy_igp) {
    #line 749 
    if (phy->ops.set_d3_lplu_state != (s32 (*)(struct e1000_hw *, bool ))0) 
      #line 750 
      ret_val = (*(phy->ops.set_d3_lplu_state))(hw,(_Bool)0);
    #line 751 
    if (ret_val != 0) {
      {
        #line 752 
        bool branch_0;
        #line 752 
        struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_setup_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error Disabling LPLU D3\n", .lineno = (unsigned int)752U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 752 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
        #line 752 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 752 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,igb_get_hw_dev(hw),(char *)"Error Disabling LPLU D3\n");
        }
      }
      #line 753 
      goto out;
    }
  }
  #line 758 
  ret_val = (*(phy->ops.set_d0_lplu_state))(hw,(_Bool)0);
  #line 759 
  if (ret_val != 0) {
    {
      #line 760 
      bool branch_1;
      #line 760 
      struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_setup_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error Disabling LPLU D0\n", .lineno = (unsigned int)760U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 760 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
      #line 760 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 760 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,igb_get_hw_dev(hw),(char *)"Error Disabling LPLU D0\n");
      }
    }
    #line 761 
    goto out;
  }
  #line 764 
  ret_val = (*(phy->ops.read_reg))(hw,18U,& data);
  #line 765 
  if (ret_val != 0) 
                    #line 766 
                    goto out;
  #line 768 
  data = (unsigned short)((unsigned int)data & 61439U);
  #line 770 
  switch ((int)phy->mdix) {
    #line 771 
    case 1: 
            #line 771 
    ;
    #line 772 
    data = (unsigned short)((unsigned int)data & 57343U);
    #line 773 
    break;
    #line 774 
    case 2: 
            #line 774 
    ;
    #line 775 
    data = (unsigned short)((unsigned int)data | 8192U);
    #line 776 
    break;
    #line 777 
    case 0: 
            #line 777 
    ;
    #line 778 
    default: 
             #line 778 
    ;
    #line 779 
    data = (unsigned short)((unsigned int)data | 4096U);
    #line 780 
    break;
  }
  #line 782 
  ret_val = (*(phy->ops.write_reg))(hw,18U,(unsigned short)((int)data));
  #line 783 
  if (ret_val != 0) 
                    #line 784 
                    goto out;
  #line 787 
  if ((int)hw->mac.autoneg != 0) {
    #line 792 
    if ((unsigned int)phy->autoneg_advertised == 32U) {
      #line 794 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      #line 797 
      if (ret_val != 0) 
                        #line 798 
                        goto out;
      #line 800 
      data = (unsigned short)((unsigned int)data & 65407U);
      #line 801 
      ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
      #line 804 
      if (ret_val != 0) 
                        #line 805 
                        goto out;
      #line 808 
      ret_val = (*(phy->ops.read_reg))(hw,9U,& data);
      #line 809 
      if (ret_val != 0) 
                        #line 810 
                        goto out;
      #line 812 
      data = (unsigned short)((unsigned int)data & 61439U);
      #line 813 
      ret_val = (*(phy->ops.write_reg))(hw,9U,(unsigned short)((int)data));
      #line 814 
      if (ret_val != 0) 
                        #line 815 
                        goto out;
    }
    #line 818 
    ret_val = (*(phy->ops.read_reg))(hw,9U,& data);
    #line 819 
    if (ret_val != 0) 
                      #line 820 
                      goto out;
    #line 823 
    if (((int)data & 4096) != 0) {
      #line 823 
      int tmp_5;
      #line 823 
      if (((int)data & 2048) != 0) 
                                   #line 823 
                                   tmp_5 = e1000_ms_force_master; else 
                                                                    #line 823 
                                                                    tmp_5 = e1000_ms_force_slave;
      #line 823 
      phy->original_ms_type = (enum e1000_ms_type)tmp_5;
    }
    else 
         #line 823 
         phy->original_ms_type = e1000_ms_auto;
    #line 829 
    switch ((unsigned int)phy->ms_type) {
      #line 830 
      case (unsigned int)1: 
                            #line 830 
      ;
      #line 831 
      data = (unsigned short)((unsigned int)data | 6144U);
      #line 832 
      break;
      #line 833 
      case (unsigned int)2: 
                            #line 833 
      ;
      #line 834 
      data = (unsigned short)((unsigned int)data | 4096U);
      #line 835 
      data = (unsigned short)((unsigned int)data & 63487U);
      #line 836 
      break;
      #line 837 
      case (unsigned int)3: 
                            #line 837 
      ;
      #line 838 
      data = (unsigned short)((unsigned int)data & 61439U);
      #line 839 
      default: 
               #line 839 
      ;
      #line 840 
      break;
    }
    #line 842 
    ret_val = (*(phy->ops.write_reg))(hw,9U,(unsigned short)((int)data));
    #line 843 
    if (ret_val != 0) 
                      #line 844 
                      goto out;
  }
  #line 847 
  out: 
       #line 847 
  ;
  #line 848 
  return ret_val;
}

#line 860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_copper_link_autoneg(struct e1000_hw *hw)
{
  #line 863 
  s32 ret_val;
  #line 864 
  u16 phy_ctrl;
  #line 862 
  struct e1000_phy_info *phy = & hw->phy;
  #line 869 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  #line 874 
  if ((unsigned int)phy->autoneg_advertised == 0U) 
                                                   #line 875 
                                                   phy->autoneg_advertised = phy->autoneg_mask;
  {
    #line 877 
    bool branch;
    #line 877 
    struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Reconfiguring auto-neg advertisement params\n", .lineno = (unsigned int)877U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 877 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
    #line 877 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 877 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,igb_get_hw_dev(hw),(char *)"Reconfiguring auto-neg advertisement params\n");
    }
  }
  #line 878 
  ret_val = igb_phy_setup_autoneg(hw);
  #line 879 
  if (ret_val != 0) {
    {
      #line 880 
      bool branch_0;
      #line 880 
      struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error Setting up Auto-Negotiation\n", .lineno = (unsigned int)880U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 880 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
      #line 880 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 880 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,igb_get_hw_dev(hw),(char *)"Error Setting up Auto-Negotiation\n");
      }
    }
    #line 881 
    goto out;
  }
  {
    #line 883 
    bool branch_1;
    #line 883 
    struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Restarting Auto-Neg\n", .lineno = (unsigned int)883U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 883 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
    #line 883 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 883 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,igb_get_hw_dev(hw),(char *)"Restarting Auto-Neg\n");
    }
  }
  #line 888 
  ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_ctrl);
  #line 889 
  if (ret_val != 0) 
                    #line 890 
                    goto out;
  #line 892 
  phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 4608U);
  #line 893 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_ctrl));
  #line 894 
  if (ret_val != 0) 
                    #line 895 
                    goto out;
  #line 900 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    #line 901 
    ret_val = igb_wait_autoneg(hw);
    #line 902 
    if (ret_val != 0) {
      {
        #line 903 
        bool branch_2;
        #line 903 
        struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"igb", .function = (char *)"igb_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error while waiting for autoneg to complete\n", .lineno = (unsigned int)903U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 903 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
        #line 903 
        if ((long)((long)((int)branch_2 != 0)) != 0L) {
          #line 903 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,igb_get_hw_dev(hw),(char *)"Error while waiting for autoneg to complete\n");
        }
      }
      #line 904 
      goto out;
    }
  }
  #line 908 
  hw->mac.get_link_status = (_Bool)1;
  #line 910 
  out: 
       #line 910 
  ;
  #line 911 
  return ret_val;
}

#line 923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_phy_setup_autoneg(struct e1000_hw *hw)
{
  #line 926 
  s32 ret_val;
  #line 927 
  u16 mii_autoneg_adv_reg;
  #line 925 
  struct e1000_phy_info *phy = & hw->phy;
  #line 928 
  u16 mii_1000t_ctrl_reg = (unsigned short)0U;
  #line 930 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  #line 933 
  ret_val = (*(phy->ops.read_reg))(hw,4U,& mii_autoneg_adv_reg);
  #line 934 
  if (ret_val != 0) 
                    #line 935 
                    goto out;
  #line 937 
  if (((int)phy->autoneg_mask & 32) != 0) {
    #line 939 
    ret_val = (*(phy->ops.read_reg))(hw,9U,& mii_1000t_ctrl_reg);
    #line 941 
    if (ret_val != 0) 
                      #line 942 
                      goto out;
  }
  #line 956 
  mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 65055U);
  #line 960 
  mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg & 64767U);
  {
    #line 962 
    bool branch;
    #line 962 
    struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"igb", .function = (char *)"igb_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"autoneg_advertised %x\n", .lineno = (unsigned int)962U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 962 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
    #line 962 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 962 
      ;
      #line 962 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,igb_get_hw_dev(hw),(char *)"autoneg_advertised %x\n",(int)phy->autoneg_advertised);
    }
  }
  #line 965 
  if (((int)phy->autoneg_advertised & 1) != 0) {
    {
      #line 966 
      bool branch_0;
      #line 966 
      struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"igb", .function = (char *)"igb_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Advertise 10mb Half duplex\n", .lineno = (unsigned int)966U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 966 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
      #line 966 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 966 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug462,igb_get_hw_dev(hw),(char *)"Advertise 10mb Half duplex\n");
      }
    }
    #line 967 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 32U);
  }
  #line 971 
  if (((int)phy->autoneg_advertised & 2) != 0) {
    {
      #line 972 
      bool branch_1;
      #line 972 
      struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"igb", .function = (char *)"igb_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Advertise 10mb Full duplex\n", .lineno = (unsigned int)972U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 972 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
      #line 972 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 972 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug463,igb_get_hw_dev(hw),(char *)"Advertise 10mb Full duplex\n");
      }
    }
    #line 973 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 64U);
  }
  #line 977 
  if (((int)phy->autoneg_advertised & 4) != 0) {
    {
      #line 978 
      bool branch_2;
      #line 978 
      struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"igb", .function = (char *)"igb_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Advertise 100mb Half duplex\n", .lineno = (unsigned int)978U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 978 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
      #line 978 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 978 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug464,igb_get_hw_dev(hw),(char *)"Advertise 100mb Half duplex\n");
      }
    }
    #line 979 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 128U);
  }
  #line 983 
  if (((int)phy->autoneg_advertised & 8) != 0) {
    {
      #line 984 
      bool branch_3;
      #line 984 
      struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"igb", .function = (char *)"igb_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Advertise 100mb Full duplex\n", .lineno = (unsigned int)984U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 984 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
      #line 984 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 984 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug465,igb_get_hw_dev(hw),(char *)"Advertise 100mb Full duplex\n");
      }
    }
    #line 985 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 256U);
  }
  #line 989 
  if (((int)phy->autoneg_advertised & 16) != 0) {
    #line 990 
    bool branch_4;
    #line 990 
    struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"igb", .function = (char *)"igb_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Advertise 1000mb Half duplex request denied!\n", .lineno = (unsigned int)990U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 990 
    branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
    #line 990 
    if ((long)((long)((int)branch_4 != 0)) != 0L) {
      #line 990 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug466,igb_get_hw_dev(hw),(char *)"Advertise 1000mb Half duplex request denied!\n");
    }
  }
  #line 993 
  if (((int)phy->autoneg_advertised & 32) != 0) {
    {
      #line 994 
      bool branch_5;
      #line 994 
      struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"igb", .function = (char *)"igb_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Advertise 1000mb Full duplex\n", .lineno = (unsigned int)994U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 994 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
      #line 994 
      if ((long)((long)((int)branch_5 != 0)) != 0L) {
        #line 994 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug467,igb_get_hw_dev(hw),(char *)"Advertise 1000mb Full duplex\n");
      }
    }
    #line 995 
    mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg | 512U);
  }
  #line 1015 
  switch ((unsigned int)hw->fc.current_mode) {
    #line 1016 
    case (unsigned int)0: 
                          #line 1016 
    ;
    #line 1020 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 62463U);
    #line 1021 
    break;
    #line 1022 
    case (unsigned int)1: 
                          #line 1022 
    ;
    #line 1032 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    #line 1033 
    break;
    #line 1034 
    case (unsigned int)2: 
                          #line 1034 
    ;
    #line 1038 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 2048U);
    #line 1039 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 64511U);
    #line 1040 
    break;
    #line 1041 
    case (unsigned int)3: 
                          #line 1041 
    ;
    #line 1045 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    #line 1046 
    break;
    #line 1047 
    default: 
             #line 1047 
    ;
    {
      #line 1048 
      bool branch_6;
      #line 1048 
      struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"igb", .function = (char *)"igb_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)1048U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1048 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
      #line 1048 
      if ((long)((long)((int)branch_6 != 0)) != 0L) {
        #line 1048 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug468,igb_get_hw_dev(hw),(char *)"Flow control param set incorrectly\n");
      }
    }
    #line 1049 
    ret_val = -3;
    #line 1050 
    goto out;
  }
  #line 1053 
  ret_val = (*(phy->ops.write_reg))(hw,4U,(unsigned short)((int)mii_autoneg_adv_reg));
  #line 1054 
  if (ret_val != 0) 
                    #line 1055 
                    goto out;
  {
    #line 1057 
    bool branch_7;
    #line 1057 
    struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"igb", .function = (char *)"igb_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Auto-Neg Advertising %x\n", .lineno = (unsigned int)1057U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1057 
    branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
    #line 1057 
    if ((long)((long)((int)branch_7 != 0)) != 0L) {
      #line 1057 
      ;
      #line 1057 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug469,igb_get_hw_dev(hw),(char *)"Auto-Neg Advertising %x\n",(int)mii_autoneg_adv_reg);
    }
  }
  #line 1059 
  if (((int)phy->autoneg_mask & 32) != 0) {
    #line 1060 
    ret_val = (*(phy->ops.write_reg))(hw,9U,(unsigned short)((int)mii_1000t_ctrl_reg));
    #line 1063 
    if (ret_val != 0) 
                      #line 1064 
                      goto out;
  }
  #line 1067 
  out: 
       #line 1067 
  ;
  #line 1068 
  return ret_val;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_setup_copper_link(struct e1000_hw *hw)
{
  #line 1082 
  s32 ret_val;
  #line 1083 
  bool link;
  #line 1085 
  if ((int)hw->mac.autoneg != 0) {
    #line 1089 
    ret_val = igb_copper_link_autoneg(hw);
    #line 1090 
    if (ret_val != 0) 
                      #line 1091 
                      goto out;
  }
  else {
    {
      #line 1096 
      bool branch;
      #line 1096 
      struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"igb", .function = (char *)"igb_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Forcing Speed and Duplex\n", .lineno = (unsigned int)1096U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1096 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
      #line 1096 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1096 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug470,igb_get_hw_dev(hw),(char *)"Forcing Speed and Duplex\n");
      }
    }
    #line 1097 
    ret_val = (*(hw->phy.ops.force_speed_duplex))(hw);
    #line 1098 
    if (ret_val != 0) {
      {
        #line 1099 
        bool branch_0;
        #line 1099 
        struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"igb", .function = (char *)"igb_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error Forcing Speed and Duplex\n", .lineno = (unsigned int)1099U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1099 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
        #line 1099 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 1099 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug471,igb_get_hw_dev(hw),(char *)"Error Forcing Speed and Duplex\n");
        }
      }
      #line 1100 
      goto out;
    }
  }
  #line 1107 
  ret_val = igb_phy_has_link(hw,10U,10U,& link);
  #line 1108 
  if (ret_val != 0) 
                    #line 1109 
                    goto out;
  #line 1111 
  if ((int)link != 0) {
    {
      #line 1112 
      bool branch_1;
      #line 1112 
      struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"igb", .function = (char *)"igb_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Valid link established!!!\n", .lineno = (unsigned int)1112U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1112 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
      #line 1112 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 1112 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug472,igb_get_hw_dev(hw),(char *)"Valid link established!!!\n");
      }
    }
    #line 1113 
    igb_config_collision_dist(hw);
    #line 1114 
    ret_val = igb_config_fc_after_link_up(hw);
  }
  else {
    #line 1116 
    bool branch_2;
    #line 1116 
    struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"igb", .function = (char *)"igb_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Unable to establish link!!!\n", .lineno = (unsigned int)1116U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1116 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
    #line 1116 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 1116 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug473,igb_get_hw_dev(hw),(char *)"Unable to establish link!!!\n");
    }
  }
  #line 1119 
  out: 
       #line 1119 
  ;
  #line 1120 
  return ret_val;
}

#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_force_speed_duplex_igp(struct e1000_hw *hw)
{
  #line 1134 
  s32 ret_val;
  #line 1135 
  u16 phy_data;
  #line 1136 
  bool link;
  #line 1133 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1138 
  ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_data);
  #line 1139 
  if (ret_val != 0) 
                    #line 1140 
                    goto out;
  #line 1142 
  igb_phy_force_speed_duplex_setup(hw,& phy_data);
  #line 1144 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_data));
  #line 1145 
  if (ret_val != 0) 
                    #line 1146 
                    goto out;
  #line 1151 
  ret_val = (*(phy->ops.read_reg))(hw,18U,& phy_data);
  #line 1152 
  if (ret_val != 0) 
                    #line 1153 
                    goto out;
  #line 1155 
  phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
  #line 1156 
  phy_data = (unsigned short)((unsigned int)phy_data & 57343U);
  #line 1158 
  ret_val = (*(phy->ops.write_reg))(hw,18U,(unsigned short)((int)phy_data));
  #line 1159 
  if (ret_val != 0) 
                    #line 1160 
                    goto out;
  {
    #line 1162 
    bool branch;
    #line 1162 
    struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"IGP PSCR: %X\n", .lineno = (unsigned int)1162U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1162 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
    #line 1162 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1162 
      ;
      #line 1162 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug474,igb_get_hw_dev(hw),(char *)"IGP PSCR: %X\n",(int)phy_data);
    }
  }
  #line 1164 
  __const_udelay(4295UL);
  #line 1166 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      #line 1167 
      bool branch_0;
      #line 1167 
      struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Waiting for forced speed/duplex link on IGP phy.\n", .lineno = (unsigned int)1167U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1167 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
      #line 1167 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1167 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug475,igb_get_hw_dev(hw),(char *)"Waiting for forced speed/duplex link on IGP phy.\n");
      }
    }
    #line 1169 
    ret_val = igb_phy_has_link(hw,20U,10000U,& link);
    #line 1170 
    if (ret_val != 0) 
                      #line 1171 
                      goto out;
    #line 1173 
    if (! link) {
      #line 1174 
      bool branch_1;
      #line 1174 
      struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Link taking longer than expected.\n", .lineno = (unsigned int)1174U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1174 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
      #line 1174 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 1174 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug476,igb_get_hw_dev(hw),(char *)"Link taking longer than expected.\n");
      }
    }
    #line 1177 
    ret_val = igb_phy_has_link(hw,20U,10000U,& link);
    #line 1178 
    if (ret_val != 0) 
                      #line 1179 
                      goto out;
  }
  #line 1182 
  out: 
       #line 1182 
  ;
  #line 1183 
  return ret_val;
}

#line 1196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_force_speed_duplex_m88(struct e1000_hw *hw)
{
  #line 1199 
  s32 ret_val;
  #line 1200 
  u16 phy_data;
  #line 1201 
  bool link;
  #line 1198 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1204 
  if (phy->type != (unsigned int)e1000_phy_i210) {
    #line 1208 
    ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
    #line 1210 
    if (ret_val != 0) 
                      #line 1211 
                      goto out;
    #line 1213 
    phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
    #line 1214 
    ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
    #line 1216 
    if (ret_val != 0) 
                      #line 1217 
                      goto out;
    {
      #line 1219 
      bool branch;
      #line 1219 
      struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"M88E1000 PSCR: %X\n", .lineno = (unsigned int)1219U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1219 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
      #line 1219 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1219 
        ;
        #line 1219 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug477,igb_get_hw_dev(hw),(char *)"M88E1000 PSCR: %X\n",(int)phy_data);
      }
    }
  }
  #line 1222 
  ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_data);
  #line 1223 
  if (ret_val != 0) 
                    #line 1224 
                    goto out;
  #line 1226 
  igb_phy_force_speed_duplex_setup(hw,& phy_data);
  #line 1228 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_data));
  #line 1229 
  if (ret_val != 0) 
                    #line 1230 
                    goto out;
  #line 1233 
  ret_val = igb_phy_sw_reset(hw);
  #line 1234 
  if (ret_val != 0) 
                    #line 1235 
                    goto out;
  #line 1237 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      #line 1238 
      bool branch_0;
      #line 1238 
      struct _ddebug __UNIQUE_ID_ddebug478 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Waiting for forced speed/duplex link on M88 phy.\n", .lineno = (unsigned int)1238U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1238 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug478.key.dd_key_false.key,(_Bool)0);
      #line 1238 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1238 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug478,igb_get_hw_dev(hw),(char *)"Waiting for forced speed/duplex link on M88 phy.\n");
      }
    }
    #line 1240 
    ret_val = igb_phy_has_link(hw,20U,100000U,& link);
    #line 1241 
    if (ret_val != 0) 
                      #line 1242 
                      goto out;
    #line 1244 
    if (! link) {
      #line 1245 
      bool reset_dsp = (_Bool)1;
      #line 1247 
      switch (hw->phy.id) {
        #line 1248 
        case (u32)21040576: 
                            #line 1248 
        ;
        #line 1249 
        case (u32)21040272: 
                            #line 1249 
        ;
        #line 1250 
        case (u32)21040800: 
                            #line 1250 
        ;
        #line 1251 
        case (u32)21040592: 
                            #line 1251 
        ;
        #line 1252 
        case (u32)21040128: 
                            #line 1252 
        ;
        #line 1253 
        reset_dsp = (_Bool)0;
        #line 1254 
        break;
        #line 1255 
        default: 
                 #line 1255 
        ;
        #line 1256 
        if (hw->phy.type != (unsigned int)e1000_phy_m88) 
                                                         #line 1257 
                                                         reset_dsp = (_Bool)0;
        #line 1258 
        break;
      }
      #line 1260 
      if (! reset_dsp) {
        #line 1261 
        bool branch_1;
        #line 1261 
        struct _ddebug __UNIQUE_ID_ddebug479 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Link taking longer than expected.\n", .lineno = (unsigned int)1261U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1261 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug479.key.dd_key_false.key,(_Bool)0);
        #line 1261 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 1261 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug479,igb_get_hw_dev(hw),(char *)"Link taking longer than expected.\n");
        }
      }
      else {
        #line 1266 
        ret_val = (*(phy->ops.write_reg))(hw,29U,(unsigned short)29);
        #line 1269 
        if (ret_val != 0) 
                          #line 1270 
                          goto out;
        #line 1271 
        ret_val = igb_phy_reset_dsp(hw);
        #line 1272 
        if (ret_val != 0) 
                          #line 1273 
                          goto out;
      }
    }
    #line 1278 
    ret_val = igb_phy_has_link(hw,20U,100000U,& link);
    #line 1280 
    if (ret_val != 0) 
                      #line 1281 
                      goto out;
  }
  #line 1284 
  if (((((hw->phy.type != (unsigned int)e1000_phy_m88 || hw->phy.id == 21040576U) || hw->phy.id == 21040272U) || hw->phy.id == 21040800U) || hw->phy.id == 21040592U) || hw->phy.id == 21040128U) 
    #line 1290 
    goto out;
  #line 1292 
  ret_val = (*(phy->ops.read_reg))(hw,20U,& phy_data);
  #line 1293 
  if (ret_val != 0) 
                    #line 1294 
                    goto out;
  #line 1300 
  phy_data = (unsigned short)((unsigned int)phy_data | 112U);
  #line 1301 
  ret_val = (*(phy->ops.write_reg))(hw,20U,(unsigned short)((int)phy_data));
  #line 1302 
  if (ret_val != 0) 
                    #line 1303 
                    goto out;
  #line 1308 
  ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
  #line 1309 
  if (ret_val != 0) 
                    #line 1310 
                    goto out;
  #line 1312 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  #line 1313 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
  #line 1315 
  out: 
       #line 1315 
  ;
  #line 1316 
  return ret_val;
}

#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static void igb_phy_force_speed_duplex_setup(struct e1000_hw *hw, u16 *phy_ctrl)
{
  #line 1335 
  u32 ctrl;
  #line 1334 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1338 
  hw->fc.current_mode = e1000_fc_none;
  #line 1341 
  ctrl = igb_rd32(hw,0U);
  #line 1342 
  ctrl |= 6144U;
  #line 1343 
  ctrl &= 4294966527U;
  #line 1346 
  ctrl &= 4294967263U;
  #line 1349 
  *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 61439U);
  #line 1352 
  if (((int)mac->forced_speed_duplex & 5) != 0) {
    #line 1353 
    ctrl &= 4294967294U;
    #line 1354 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 65279U);
    {
      #line 1355 
      bool branch;
      #line 1355 
      struct _ddebug __UNIQUE_ID_ddebug480 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Half Duplex\n", .lineno = (unsigned int)1355U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1355 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug480.key.dd_key_false.key,(_Bool)0);
      #line 1355 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1355 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug480,igb_get_hw_dev(hw),(char *)"Half Duplex\n");
      }
    }
  }
  else {
    #line 1357 
    ctrl |= 1U;
    #line 1358 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl | 256U);
    {
      #line 1359 
      bool branch_0;
      #line 1359 
      struct _ddebug __UNIQUE_ID_ddebug481 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Full Duplex\n", .lineno = (unsigned int)1359U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1359 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug481.key.dd_key_false.key,(_Bool)0);
      #line 1359 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1359 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug481,igb_get_hw_dev(hw),(char *)"Full Duplex\n");
      }
    }
  }
  #line 1363 
  if (((int)mac->forced_speed_duplex & 12) != 0) {
    #line 1364 
    ctrl |= 256U;
    #line 1365 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl | 8192U);
    #line 1366 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 65471U);
    {
      #line 1367 
      bool branch_1;
      #line 1367 
      struct _ddebug __UNIQUE_ID_ddebug482 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Forcing 100mb\n", .lineno = (unsigned int)1367U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1367 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug482.key.dd_key_false.key,(_Bool)0);
      #line 1367 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 1367 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug482,igb_get_hw_dev(hw),(char *)"Forcing 100mb\n");
      }
    }
  }
  else {
    #line 1369 
    ctrl &= 4294966527U;
    #line 1370 
    *phy_ctrl = *phy_ctrl;
    #line 1371 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 57279U);
    {
      #line 1372 
      bool branch_2;
      #line 1372 
      struct _ddebug __UNIQUE_ID_ddebug483 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Forcing 10mb\n", .lineno = (unsigned int)1372U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1372 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug483.key.dd_key_false.key,(_Bool)0);
      #line 1372 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 1372 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug483,igb_get_hw_dev(hw),(char *)"Forcing 10mb\n");
      }
    }
  }
  #line 1375 
  igb_config_collision_dist(hw);
  {
    #line 1378 
    union __anonunion___u_5909 __u;
    #line 1377 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1377 
    u8 *hw_addr = (__u.__val);
    #line 1377 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1377 
                                           writel(ctrl,(void *)hw_addr);
  }
  #line 1379 
  return;
}

#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_set_d3_lplu_state(struct e1000_hw *hw, bool active)
{
  #line 1398 
  u16 data;
  #line 1396 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1397 
  s32 ret_val = 0;
  #line 1400 
  if (hw->phy.ops.read_reg == (s32 (*)(struct e1000_hw *, u32 , u16 *))0) 
    #line 1401 
    goto out;
  #line 1403 
  ret_val = (*(phy->ops.read_reg))(hw,25U,& data);
  #line 1404 
  if (ret_val != 0) 
                    #line 1405 
                    goto out;
  #line 1407 
  if (! active) {
    #line 1408 
    data = (unsigned short)((unsigned int)data & 65531U);
    #line 1409 
    ret_val = (*(phy->ops.write_reg))(hw,25U,(unsigned short)((int)data));
    #line 1411 
    if (ret_val != 0) 
                      #line 1412 
                      goto out;
    #line 1418 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      #line 1419 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      #line 1422 
      if (ret_val != 0) 
                        #line 1423 
                        goto out;
      #line 1425 
      data = (unsigned short)((unsigned int)data | 128U);
      #line 1426 
      ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
      #line 1429 
      if (ret_val != 0) 
                        #line 1430 
                        goto out;
    }
    else 
      #line 1431 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        #line 1432 
        ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
        #line 1435 
        if (ret_val != 0) 
                          #line 1436 
                          goto out;
        #line 1438 
        data = (unsigned short)((unsigned int)data & 65407U);
        #line 1439 
        ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
        #line 1442 
        if (ret_val != 0) 
                          #line 1443 
                          goto out;
      }
  }
  else 
    #line 1445 
    if (((unsigned int)phy->autoneg_advertised == 47U || (unsigned int)phy->autoneg_advertised == 15U) || (unsigned int)phy->autoneg_advertised == 3U) {
      #line 1448 
      data = (unsigned short)((unsigned int)data | 4U);
      #line 1449 
      ret_val = (*(phy->ops.write_reg))(hw,25U,(unsigned short)((int)data));
      #line 1451 
      if (ret_val != 0) 
                        #line 1452 
                        goto out;
      #line 1455 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      #line 1457 
      if (ret_val != 0) 
                        #line 1458 
                        goto out;
      #line 1460 
      data = (unsigned short)((unsigned int)data & 65407U);
      #line 1461 
      ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
    }
  #line 1465 
  out: 
       #line 1465 
  ;
  #line 1466 
  return ret_val;
}

#line 1477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_check_downshift(struct e1000_hw *hw)
{
  #line 1480 
  s32 ret_val;
  #line 1481 
  u16 phy_data;
  #line 1481 
  u16 offset;
  #line 1481 
  u16 mask;
  #line 1479 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1483 
  switch ((unsigned int)phy->type) {
    #line 1484 
    case (unsigned int)9: 
                          #line 1484 
    ;
    #line 1485 
    case (unsigned int)2: 
                          #line 1485 
    ;
    #line 1486 
    case (unsigned int)5: 
                          #line 1486 
    ;
    #line 1487 
    offset = (unsigned short)17U;
    #line 1488 
    mask = (unsigned short)32U;
    #line 1489 
    break;
    #line 1490 
    case (unsigned int)4: 
                          #line 1490 
    ;
    #line 1491 
    case (unsigned int)3: 
                          #line 1491 
    ;
    #line 1492 
    case (unsigned int)6: 
                          #line 1492 
    ;
    #line 1493 
    offset = (unsigned short)19U;
    #line 1494 
    mask = (unsigned short)32768U;
    #line 1495 
    break;
    #line 1496 
    default: 
             #line 1496 
    ;
    #line 1498 
    phy->speed_downgraded = (_Bool)0;
    #line 1499 
    ret_val = 0;
    #line 1500 
    goto out;
  }
  #line 1503 
  ret_val = (*(phy->ops.read_reg))(hw,(unsigned int)offset,& phy_data);
  #line 1505 
  if (ret_val == 0) 
                    #line 1506 
                    phy->speed_downgraded = (_Bool)((unsigned int)((int)phy_data & (int)mask) != 0U);
  #line 1508 
  out: 
       #line 1508 
  ;
  #line 1509 
  return ret_val;
}

#line 1520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_check_polarity_m88(struct e1000_hw *hw)
{
  #line 1523 
  s32 ret_val;
  #line 1524 
  u16 data;
  #line 1522 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1526 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& data);
  #line 1528 
  if (ret_val == 0) 
                    #line 1529 
                    phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 1) & 1);
  #line 1533 
  return ret_val;
}

#line 1545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_check_polarity_igp(struct e1000_hw *hw)
{
  #line 1548 
  s32 ret_val;
  #line 1549 
  u16 data;
  #line 1549 
  u16 offset;
  #line 1549 
  u16 mask;
  #line 1547 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1554 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& data);
  #line 1555 
  if (ret_val != 0) 
                    #line 1556 
                    goto out;
  #line 1558 
  if (((int)data & 49152) == 49152) {
    #line 1560 
    offset = (unsigned short)180U;
    #line 1561 
    mask = (unsigned short)120U;
  }
  else {
    #line 1566 
    offset = (unsigned short)17U;
    #line 1567 
    mask = (unsigned short)2U;
  }
  #line 1570 
  ret_val = (*(phy->ops.read_reg))(hw,(unsigned int)offset,& data);
  #line 1572 
  if (ret_val == 0) 
                    #line 1573 
                    phy->cable_polarity = (enum e1000_rev_polarity)((unsigned int)((int)data & (int)mask) != 0U);
  #line 1577 
  out: 
       #line 1577 
  ;
  #line 1578 
  return ret_val;
}

#line 1588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_wait_autoneg(struct e1000_hw *hw)
{
  #line 1591 
  u16 i;
  #line 1591 
  u16 phy_status;
  #line 1590 
  s32 ret_val = 0;
  #line 1594 
  i = (unsigned short)45U;
  #line 1594 
  while ((unsigned int)i != 0U) {
    #line 1595 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
    #line 1596 
    if (ret_val != 0) 
                      #line 1597 
                      break;
    #line 1598 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
    #line 1599 
    if (ret_val != 0) 
                      #line 1600 
                      break;
    #line 1601 
    if (((int)phy_status & 32) != 0) 
                                     #line 1602 
                                     break;
    #line 1603 
    msleep(100U);
    #line 1594 
    i = (u16)((int)i - 1);
  }
  #line 1609 
  return ret_val;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_has_link(struct e1000_hw *hw, u32 iterations, u32 usec_interval, bool *success)
{
  #line 1625 
  u16 i;
  #line 1625 
  u16 phy_status;
  #line 1624 
  s32 ret_val = 0;
  #line 1627 
  i = (unsigned short)0U;
  #line 1627 
  while ((unsigned int)i < iterations) {
    #line 1632 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
    #line 1633 
    if (ret_val != 0 && usec_interval != 0U) 
      #line 1638 
      if (usec_interval > 999U) 
        #line 1639 
        if (0 != 0 && usec_interval <= 5999U) 
          #line 1639 
          if (0 != 0) 
            #line 1639 
            if ((usec_interval / 1000U) * 1000U > 19999U) 
                                                          #line 1639 
                                                          __bad_udelay(); else 
                                                                    #line 1639 
                                                                    __const_udelay((unsigned long)((usec_interval / 1000U) * 1000U) * 4295UL);
          else 
               #line 1639 
               __udelay((unsigned long)((usec_interval / 1000U) * 1000U));
        else {
          #line 1639 
          unsigned long __ms = (unsigned long)(usec_interval / 1000U);
          #line 1639 
          while (1) {
            #line 1639 
            unsigned long tmp;
            #line 1639 
            tmp = __ms;
            #line 1639 
            __ms --;
            #line 1639 
            ;
            #line 1639 
            if (! (tmp != 0UL)) 
                                #line 1639 
                                break;
            #line 1639 
            __const_udelay(4295000UL);
          }
        }
      else 
        #line 1641 
        if (0 != 0) 
          #line 1641 
          if (usec_interval > 19999U) 
                                      #line 1641 
                                      __bad_udelay(); else 
                                                           #line 1641 
                                                           __const_udelay((unsigned long)usec_interval * 4295UL);
        else 
             #line 1641 
             __udelay((unsigned long)usec_interval);
    #line 1643 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
    #line 1644 
    if (ret_val != 0) 
                      #line 1645 
                      break;
    #line 1646 
    if (((int)phy_status & 4) != 0) 
                                    #line 1647 
                                    break;
    #line 1648 
    if (usec_interval > 999U) 
      #line 1649 
      if (0 != 0 && usec_interval <= 5999U) 
        #line 1649 
        if (0 != 0) 
          #line 1649 
          if ((usec_interval / 1000U) * 1000U > 19999U) 
                                                        #line 1649 
                                                        __bad_udelay(); else 
                                                                    #line 1649 
                                                                    __const_udelay((unsigned long)((usec_interval / 1000U) * 1000U) * 4295UL);
        else 
             #line 1649 
             __udelay((unsigned long)((usec_interval / 1000U) * 1000U));
      else {
        #line 1649 
        unsigned long __ms_0 = (unsigned long)(usec_interval / 1000U);
        #line 1649 
        while (1) {
          #line 1649 
          unsigned long tmp_0;
          #line 1649 
          tmp_0 = __ms_0;
          #line 1649 
          __ms_0 --;
          #line 1649 
          ;
          #line 1649 
          if (! (tmp_0 != 0UL)) 
                                #line 1649 
                                break;
          #line 1649 
          __const_udelay(4295000UL);
        }
      }
    else 
      #line 1651 
      if (0 != 0) 
        #line 1651 
        if (usec_interval > 19999U) 
                                    #line 1651 
                                    __bad_udelay(); else 
                                                         #line 1651 
                                                         __const_udelay((unsigned long)usec_interval * 4295UL);
      else 
           #line 1651 
           __udelay((unsigned long)usec_interval);
    #line 1627 
    i = (u16)((int)i + 1);
  }
  #line 1654 
  *success = (_Bool)((unsigned int)i < iterations);
  #line 1656 
  return ret_val;
}

#line 1674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_cable_length_m88(struct e1000_hw *hw)
{
  #line 1677 
  s32 ret_val;
  #line 1678 
  u16 phy_data;
  #line 1678 
  u16 index;
  #line 1676 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1680 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& phy_data);
  #line 1681 
  if (ret_val != 0) 
                    #line 1682 
                    goto out;
  #line 1684 
  index = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 7)) & 7U);
  #line 1686 
  if ((unsigned int)index > 5U) {
    #line 1687 
    ret_val = -2;
    #line 1688 
    goto out;
  }
  #line 1691 
  phy->min_cable_length = e1000_m88_cable_length_table[(int)index];
  #line 1692 
  phy->max_cable_length = e1000_m88_cable_length_table[(int)index + 1];
  #line 1694 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  #line 1696 
  out: 
       #line 1696 
  ;
  #line 1697 
  return ret_val;
}

#line 1700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_cable_length_m88_gen2(struct e1000_hw *hw)
{
  #line 1703 
  s32 ret_val;
  #line 1704 
  u16 phy_data;
  #line 1704 
  u16 phy_data2;
  #line 1704 
  u16 index;
  #line 1704 
  u16 default_page;
  #line 1704 
  u16 is_cm;
  #line 1706 
  u16 len_min;
  #line 1707 
  u16 len_max;
  #line 1702 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1705 
  int len_tot = 0;
  #line 1709 
  switch (hw->phy.id) {
    #line 1768 
    int tmp_11;
    #line 1749 
    u16 __UNIQUE_ID___x486;
    #line 1769 
    u16 __UNIQUE_ID___x494;
    #line 1749 
    int tmp_3;
    #line 1769 
    int tmp_13;
    #line 1758 
    u16 __UNIQUE_ID___x488;
    #line 1758 
    int tmp_6;
    #line 1759 
    u16 __UNIQUE_ID___x490;
    #line 1759 
    int tmp_8;
    #line 1748 
    u16 __UNIQUE_ID___x484;
    #line 1768 
    u16 __UNIQUE_ID___x492;
    #line 1748 
    int tmp_1;
    #line 1736 
    int tmp;
    #line 1746 
    int tmp_0;
    #line 1756 
    int tmp_5;
    #line 1766 
    int tmp_10;
    #line 1710 
    case (u32)21040800: 
                        #line 1710 
    ;
    #line 1711 
    case (u32)21040592: 
                        #line 1711 
    ;
    #line 1712 
    case (u32)21040576: 
                        #line 1712 
    ;
    #line 1713 
    case (u32)21040128: 
                        #line 1713 
    ;
    #line 1715 
    ret_val = (*(phy->ops.read_reg))(hw,22U,& default_page);
    #line 1717 
    if (ret_val != 0) 
                      #line 1718 
                      goto out;
    #line 1720 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)7);
    #line 1721 
    if (ret_val != 0) 
                      #line 1722 
                      goto out;
    #line 1725 
    ret_val = (*(phy->ops.read_reg))(hw,21U,& phy_data2);
    #line 1726 
    if (ret_val != 0) 
                      #line 1727 
                      goto out;
    #line 1729 
    is_cm = (unsigned short)(((int)phy_data2 & 1024) == 0);
    #line 1732 
    ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
    #line 1733 
    if (ret_val != 0) 
                      #line 1734 
                      goto out;
    #line 1736 
    if ((unsigned int)is_cm != 0U) 
                                   #line 1736 
                                   tmp = 100; else 
                                                   #line 1736 
                                                   tmp = 1;
    #line 1736 
    phy->pair_length[0] = (unsigned short)((int)phy_data / tmp);
    #line 1737 
    len_tot = (int)phy->pair_length[0];
    #line 1738 
    len_min = phy->pair_length[0];
    #line 1739 
    len_max = phy->pair_length[0];
    #line 1742 
    ret_val = (*(phy->ops.read_reg))(hw,17U,& phy_data);
    #line 1743 
    if (ret_val != 0) 
                      #line 1744 
                      goto out;
    #line 1746 
    if ((unsigned int)is_cm != 0U) 
                                   #line 1746 
                                   tmp_0 = 100; else 
                                                     #line 1746 
                                                     tmp_0 = 1;
    #line 1746 
    phy->pair_length[1] = (unsigned short)((int)phy_data / tmp_0);
    #line 1747 
    len_tot = (int)phy->pair_length[1] + len_tot;
    {
      #line 1748 
      __UNIQUE_ID___x484 = len_min;
      #line 1748 
      u16 __UNIQUE_ID___y485 = phy->pair_length[1];
      #line 1748 
      if ((int)__UNIQUE_ID___x484 < (int)__UNIQUE_ID___y485) 
                                                             #line 1748 
                                                             tmp_1 = (int)__UNIQUE_ID___x484; else 
                                                                    #line 1748 
                                                                    tmp_1 = (int)__UNIQUE_ID___y485;
      }
    #line 1748 
    len_min = (unsigned short)tmp_1;
    {
      #line 1749 
      __UNIQUE_ID___x486 = len_max;
      #line 1749 
      u16 __UNIQUE_ID___y487 = phy->pair_length[1];
      #line 1749 
      if ((int)__UNIQUE_ID___x486 > (int)__UNIQUE_ID___y487) 
                                                             #line 1749 
                                                             tmp_3 = (int)__UNIQUE_ID___x486; else 
                                                                    #line 1749 
                                                                    tmp_3 = (int)__UNIQUE_ID___y487;
      }
    #line 1749 
    len_max = (unsigned short)tmp_3;
    #line 1752 
    ret_val = (*(phy->ops.read_reg))(hw,18U,& phy_data);
    #line 1753 
    if (ret_val != 0) 
                      #line 1754 
                      goto out;
    #line 1756 
    if ((unsigned int)is_cm != 0U) 
                                   #line 1756 
                                   tmp_5 = 100; else 
                                                     #line 1756 
                                                     tmp_5 = 1;
    #line 1756 
    phy->pair_length[2] = (unsigned short)((int)phy_data / tmp_5);
    #line 1757 
    len_tot = (int)phy->pair_length[2] + len_tot;
    {
      #line 1758 
      __UNIQUE_ID___x488 = len_min;
      #line 1758 
      u16 __UNIQUE_ID___y489 = phy->pair_length[2];
      #line 1758 
      if ((int)__UNIQUE_ID___x488 < (int)__UNIQUE_ID___y489) 
                                                             #line 1758 
                                                             tmp_6 = (int)__UNIQUE_ID___x488; else 
                                                                    #line 1758 
                                                                    tmp_6 = (int)__UNIQUE_ID___y489;
      }
    #line 1758 
    len_min = (unsigned short)tmp_6;
    {
      #line 1759 
      __UNIQUE_ID___x490 = len_max;
      #line 1759 
      u16 __UNIQUE_ID___y491 = phy->pair_length[2];
      #line 1759 
      if ((int)__UNIQUE_ID___x490 > (int)__UNIQUE_ID___y491) 
                                                             #line 1759 
                                                             tmp_8 = (int)__UNIQUE_ID___x490; else 
                                                                    #line 1759 
                                                                    tmp_8 = (int)__UNIQUE_ID___y491;
      }
    #line 1759 
    len_max = (unsigned short)tmp_8;
    #line 1762 
    ret_val = (*(phy->ops.read_reg))(hw,19U,& phy_data);
    #line 1763 
    if (ret_val != 0) 
                      #line 1764 
                      goto out;
    #line 1766 
    if ((unsigned int)is_cm != 0U) 
                                   #line 1766 
                                   tmp_10 = 100; else 
                                                      #line 1766 
                                                      tmp_10 = 1;
    #line 1766 
    phy->pair_length[3] = (unsigned short)((int)phy_data / tmp_10);
    #line 1767 
    len_tot = (int)phy->pair_length[3] + len_tot;
    {
      #line 1768 
      __UNIQUE_ID___x492 = len_min;
      #line 1768 
      u16 __UNIQUE_ID___y493 = phy->pair_length[3];
      #line 1768 
      if ((int)__UNIQUE_ID___x492 < (int)__UNIQUE_ID___y493) 
                                                             #line 1768 
                                                             tmp_11 = (int)__UNIQUE_ID___x492; else 
                                                                    #line 1768 
                                                                    tmp_11 = (int)__UNIQUE_ID___y493;
      }
    #line 1768 
    len_min = (unsigned short)tmp_11;
    {
      #line 1769 
      __UNIQUE_ID___x494 = len_max;
      #line 1769 
      u16 __UNIQUE_ID___y495 = phy->pair_length[3];
      #line 1769 
      if ((int)__UNIQUE_ID___x494 > (int)__UNIQUE_ID___y495) 
                                                             #line 1769 
                                                             tmp_13 = (int)__UNIQUE_ID___x494; else 
                                                                    #line 1769 
                                                                    tmp_13 = (int)__UNIQUE_ID___y495;
      }
    #line 1769 
    len_max = (unsigned short)tmp_13;
    #line 1772 
    phy->min_cable_length = len_min;
    #line 1773 
    phy->max_cable_length = len_max;
    #line 1774 
    phy->cable_length = (unsigned short)(len_tot / 4);
    #line 1777 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)((int)default_page));
    #line 1779 
    if (ret_val != 0) 
                      #line 1780 
                      goto out;
    #line 1781 
    break;
    #line 1782 
    case (u32)21040272: 
                        #line 1782 
    ;
    #line 1784 
    ret_val = (*(phy->ops.read_reg))(hw,22U,& default_page);
    #line 1786 
    if (ret_val != 0) 
                      #line 1787 
                      goto out;
    #line 1789 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)5);
    #line 1790 
    if (ret_val != 0) 
                      #line 1791 
                      goto out;
    #line 1793 
    ret_val = (*(phy->ops.read_reg))(hw,26U,& phy_data);
    #line 1795 
    if (ret_val != 0) 
                      #line 1796 
                      goto out;
    #line 1798 
    index = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 7)) & 7U);
    #line 1800 
    if ((unsigned int)index > 5U) {
      #line 1801 
      ret_val = -2;
      #line 1802 
      goto out;
    }
    #line 1805 
    phy->min_cable_length = e1000_m88_cable_length_table[(int)index];
    #line 1806 
    phy->max_cable_length = e1000_m88_cable_length_table[(int)index + 1];
    #line 1808 
    phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
    #line 1812 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)((int)default_page));
    #line 1814 
    if (ret_val != 0) 
                      #line 1815 
                      goto out;
    #line 1817 
    break;
    #line 1818 
    default: 
             #line 1818 
    ;
    #line 1819 
    ret_val = -2;
    #line 1820 
    goto out;
  }
  #line 1823 
  out: 
       #line 1823 
  ;
  #line 1824 
  return ret_val;
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_cable_length_igp_2(struct e1000_hw *hw)
{
  #line 1842 
  u16 phy_data;
  #line 1842 
  u16 i;
  #line 1843 
  u16 cur_agc_index;
  #line 1889 
  unsigned int tmp;
  #line 1840 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1841 
  s32 ret_val = 0;
  #line 1842 
  u16 agc_value = (unsigned short)0U;
  #line 1843 
  u16 max_agc_index = (unsigned short)0U;
  #line 1844 
  u16 min_agc_index = (unsigned short)112U;
  #line 1845 
  u16 agc_reg_array[4U] = {(unsigned short)4529U, (unsigned short)4785U, (unsigned short)5297U, (unsigned short)6321U};
  #line 1853 
  i = (unsigned short)0U;
  #line 1853 
  while ((unsigned int)i <= 3U) {
    #line 1854 
    ret_val = (*(phy->ops.read_reg))(hw,(unsigned int)agc_reg_array[(int)i],& phy_data);
    #line 1855 
    if (ret_val != 0) 
                      #line 1856 
                      goto out;
    #line 1863 
    cur_agc_index = (unsigned short)((int)phy_data >> 9);
    #line 1867 
    if ((unsigned int)cur_agc_index + 65535U > 111U) {
      #line 1869 
      ret_val = -2;
      #line 1870 
      goto out;
    }
    #line 1874 
    if ((int)e1000_igp_2_cable_length_table[(int)min_agc_index] > (int)e1000_igp_2_cable_length_table[(int)cur_agc_index]) 
      #line 1876 
      min_agc_index = cur_agc_index;
    #line 1877 
    if ((int)e1000_igp_2_cable_length_table[(int)max_agc_index] < (int)e1000_igp_2_cable_length_table[(int)cur_agc_index]) 
      #line 1879 
      max_agc_index = cur_agc_index;
    #line 1881 
    agc_value = (unsigned short)((int)e1000_igp_2_cable_length_table[(int)cur_agc_index] + (int)agc_value);
    #line 1853 
    i = (u16)((int)i + 1);
  }
  #line 1884 
  agc_value = (unsigned short)((int)agc_value - ((int)e1000_igp_2_cable_length_table[(int)min_agc_index] + (int)e1000_igp_2_cable_length_table[(int)max_agc_index]));
  #line 1886 
  agc_value = (unsigned short)((unsigned int)agc_value / 2U);
  #line 1889 
  if (15U > (unsigned int)agc_value) 
                                     #line 1889 
                                     tmp = 15U; else 
                                                     #line 1889 
                                                     tmp = (unsigned int)agc_value;
  #line 1889 
  phy->min_cable_length = (unsigned short)(tmp + 65521U);
  #line 1891 
  phy->max_cable_length = (unsigned short)((unsigned int)agc_value + 15U);
  #line 1893 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  #line 1895 
  out: 
       #line 1895 
  ;
  #line 1896 
  return ret_val;
}

#line 1909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_phy_info_m88(struct e1000_hw *hw)
{
  #line 1912 
  s32 ret_val;
  #line 1913 
  u16 phy_data;
  #line 1914 
  bool link;
  #line 1911 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1916 
  if (phy->media_type != (unsigned int)e1000_media_type_copper) {
    {
      #line 1917 
      bool branch;
      #line 1917 
      struct _ddebug __UNIQUE_ID_ddebug496 = {.modname = (char *)"igb", .function = (char *)"igb_get_phy_info_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Phy info is only valid for copper media\n", .lineno = (unsigned int)1917U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1917 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug496.key.dd_key_false.key,(_Bool)0);
      #line 1917 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1917 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug496,igb_get_hw_dev(hw),(char *)"Phy info is only valid for copper media\n");
      }
    }
    #line 1918 
    ret_val = -3;
    #line 1919 
    goto out;
  }
  #line 1922 
  ret_val = igb_phy_has_link(hw,1U,0U,& link);
  #line 1923 
  if (ret_val != 0) 
                    #line 1924 
                    goto out;
  #line 1926 
  if (! link) {
    {
      #line 1927 
      bool branch_0;
      #line 1927 
      struct _ddebug __UNIQUE_ID_ddebug497 = {.modname = (char *)"igb", .function = (char *)"igb_get_phy_info_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Phy info is only valid if link is up\n", .lineno = (unsigned int)1927U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1927 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug497.key.dd_key_false.key,(_Bool)0);
      #line 1927 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1927 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug497,igb_get_hw_dev(hw),(char *)"Phy info is only valid if link is up\n");
      }
    }
    #line 1928 
    ret_val = -3;
    #line 1929 
    goto out;
  }
  #line 1932 
  ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
  #line 1933 
  if (ret_val != 0) 
                    #line 1934 
                    goto out;
  #line 1936 
  phy->polarity_correction = (_Bool)((((int)phy_data >> 1) & 1) != 0);
  #line 1939 
  ret_val = igb_check_polarity_m88(hw);
  #line 1940 
  if (ret_val != 0) 
                    #line 1941 
                    goto out;
  #line 1943 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& phy_data);
  #line 1944 
  if (ret_val != 0) 
                    #line 1945 
                    goto out;
  #line 1947 
  phy->is_mdix = (_Bool)((((int)phy_data >> 6) & 1) != 0);
  #line 1949 
  if (((int)phy_data & 49152) == 32768) {
    #line 1950 
    ret_val = (*(phy->ops.get_cable_length))(hw);
    #line 1951 
    if (ret_val != 0) 
                      #line 1952 
                      goto out;
    #line 1954 
    ret_val = (*(phy->ops.read_reg))(hw,10U,& phy_data);
    #line 1955 
    if (ret_val != 0) 
                      #line 1956 
                      goto out;
    #line 1958 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)phy_data >> 13) & 1);
    #line 1962 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)phy_data >> 12) & 1);
  }
  else {
    #line 1967 
    phy->cable_length = (unsigned short)255U;
    #line 1968 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    #line 1969 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  #line 1972 
  out: 
       #line 1972 
  ;
  #line 1973 
  return ret_val;
}

#line 1985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_phy_info_igp(struct e1000_hw *hw)
{
  #line 1988 
  s32 ret_val;
  #line 1989 
  u16 data;
  #line 1990 
  bool link;
  #line 1987 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1992 
  ret_val = igb_phy_has_link(hw,1U,0U,& link);
  #line 1993 
  if (ret_val != 0) 
                    #line 1994 
                    goto out;
  #line 1996 
  if (! link) {
    {
      #line 1997 
      bool branch;
      #line 1997 
      struct _ddebug __UNIQUE_ID_ddebug498 = {.modname = (char *)"igb", .function = (char *)"igb_get_phy_info_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Phy info is only valid if link is up\n", .lineno = (unsigned int)1997U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1997 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug498.key.dd_key_false.key,(_Bool)0);
      #line 1997 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1997 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug498,igb_get_hw_dev(hw),(char *)"Phy info is only valid if link is up\n");
      }
    }
    #line 1998 
    ret_val = -3;
    #line 1999 
    goto out;
  }
  #line 2002 
  phy->polarity_correction = (_Bool)1;
  #line 2004 
  ret_val = igb_check_polarity_igp(hw);
  #line 2005 
  if (ret_val != 0) 
                    #line 2006 
                    goto out;
  #line 2008 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& data);
  #line 2009 
  if (ret_val != 0) 
                    #line 2010 
                    goto out;
  #line 2012 
  phy->is_mdix = (_Bool)((((int)data >> 11) & 1) != 0);
  #line 2014 
  if (((int)data & 49152) == 49152) {
    #line 2016 
    ret_val = (*(phy->ops.get_cable_length))(hw);
    #line 2017 
    if (ret_val != 0) 
                      #line 2018 
                      goto out;
    #line 2020 
    ret_val = (*(phy->ops.read_reg))(hw,10U,& data);
    #line 2021 
    if (ret_val != 0) 
                      #line 2022 
                      goto out;
    #line 2024 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)data >> 13) & 1);
    #line 2028 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)data >> 12) & 1);
  }
  else {
    #line 2032 
    phy->cable_length = (unsigned short)255U;
    #line 2033 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    #line 2034 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  #line 2037 
  out: 
       #line 2037 
  ;
  #line 2038 
  return ret_val;
}

#line 2048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_sw_reset(struct e1000_hw *hw)
{
  #line 2051 
  u16 phy_ctrl;
  #line 2050 
  s32 ret_val = 0;
  #line 2053 
  if (hw->phy.ops.read_reg == (s32 (*)(struct e1000_hw *, u32 , u16 *))0) 
    #line 2054 
    goto out;
  #line 2056 
  ret_val = (*(hw->phy.ops.read_reg))(hw,0U,& phy_ctrl);
  #line 2057 
  if (ret_val != 0) 
                    #line 2058 
                    goto out;
  #line 2060 
  phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 32768U);
  #line 2061 
  ret_val = (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)((int)phy_ctrl));
  #line 2062 
  if (ret_val != 0) 
                    #line 2063 
                    goto out;
  #line 2065 
  __const_udelay(4295UL);
  #line 2067 
  out: 
       #line 2067 
  ;
  #line 2068 
  return ret_val;
}

#line 2080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_hw_reset(struct e1000_hw *hw)
{
  #line 2083 
  s32 ret_val;
  #line 2084 
  u32 ctrl;
  #line 2082 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2086 
  ret_val = igb_check_reset_block(hw);
  #line 2087 
  if (ret_val != 0) {
    #line 2088 
    ret_val = 0;
    #line 2089 
    goto out;
  }
  #line 2092 
  ret_val = (*(phy->ops.acquire))(hw);
  #line 2093 
  if (ret_val != 0) 
                    #line 2094 
                    goto out;
  #line 2096 
  ctrl = igb_rd32(hw,0U);
  {
    #line 2098 
    union __anonunion___u_5915 __u;
    #line 2097 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2097 
    u8 *hw_addr = (__u.__val);
    #line 2097 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 2097 
                                           writel(ctrl | 2147483648U,(void *)hw_addr);
  }
  #line 2098 
  igb_rd32(hw,8U);
  #line 2100 
  if (0 != 0) 
    #line 2100 
    if (phy->reset_delay_us > 19999U) 
                                      #line 2100 
                                      __bad_udelay(); else 
                                                           #line 2100 
                                                           __const_udelay((unsigned long)phy->reset_delay_us * 4295UL);
  else 
       #line 2100 
       __udelay((unsigned long)phy->reset_delay_us);
  {
    #line 2103 
    union __anonunion___u_5917 __u_0;
    #line 2102 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 2102 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 2102 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 2102 
                                             writel(ctrl,(void *)hw_addr_0);
  }
  #line 2103 
  igb_rd32(hw,8U);
  #line 2105 
  __const_udelay(644250UL);
  #line 2107 
  (*(phy->ops.release))(hw);
  #line 2109 
  ret_val = (*(phy->ops.get_cfg_done))(hw);
  #line 2111 
  out: 
       #line 2111 
  ;
  #line 2112 
  return ret_val;
}

#line 2121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_init_script_igp3(struct e1000_hw *hw)
{
  {
    #line 2123 
    bool branch;
    #line 2123 
    struct _ddebug __UNIQUE_ID_ddebug499 = {.modname = (char *)"igb", .function = (char *)"igb_phy_init_script_igp3", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Running IGP 3 PHY init script\n", .lineno = (unsigned int)2123U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2123 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug499.key.dd_key_false.key,(_Bool)0);
    #line 2123 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2123 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug499,igb_get_hw_dev(hw),(char *)"Running IGP 3 PHY init script\n");
    }
  }
  #line 2127 
  (*(hw->phy.ops.write_reg))(hw,12123U,(unsigned short)36888);
  #line 2129 
  (*(hw->phy.ops.write_reg))(hw,12114U,(unsigned short)0);
  #line 2131 
  (*(hw->phy.ops.write_reg))(hw,12209U,(unsigned short)35620);
  #line 2133 
  (*(hw->phy.ops.write_reg))(hw,12210U,(unsigned short)63728);
  #line 2135 
  (*(hw->phy.ops.write_reg))(hw,8208U,(unsigned short)4272);
  #line 2137 
  (*(hw->phy.ops.write_reg))(hw,8209U,(unsigned short)0);
  #line 2139 
  (*(hw->phy.ops.write_reg))(hw,8413U,(unsigned short)9370);
  #line 2141 
  (*(hw->phy.ops.write_reg))(hw,8414U,(unsigned short)211);
  #line 2143 
  (*(hw->phy.ops.write_reg))(hw,10420U,(unsigned short)1230);
  #line 2145 
  (*(hw->phy.ops.write_reg))(hw,12144U,(unsigned short)10724);
  #line 2147 
  (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)320);
  #line 2149 
  (*(hw->phy.ops.write_reg))(hw,7984U,(unsigned short)5638);
  #line 2151 
  (*(hw->phy.ops.write_reg))(hw,7985U,(unsigned short)47124);
  #line 2153 
  (*(hw->phy.ops.write_reg))(hw,7989U,(unsigned short)42);
  #line 2155 
  (*(hw->phy.ops.write_reg))(hw,7998U,(unsigned short)103);
  #line 2157 
  (*(hw->phy.ops.write_reg))(hw,8020U,(unsigned short)101);
  #line 2159 
  (*(hw->phy.ops.write_reg))(hw,8021U,(unsigned short)42);
  #line 2161 
  (*(hw->phy.ops.write_reg))(hw,8022U,(unsigned short)42);
  #line 2163 
  (*(hw->phy.ops.write_reg))(hw,8050U,(unsigned short)16304);
  #line 2165 
  (*(hw->phy.ops.write_reg))(hw,8054U,(unsigned short)49407);
  #line 2167 
  (*(hw->phy.ops.write_reg))(hw,8055U,(unsigned short)7660);
  #line 2169 
  (*(hw->phy.ops.write_reg))(hw,8056U,(unsigned short)63983);
  #line 2171 
  (*(hw->phy.ops.write_reg))(hw,8057U,(unsigned short)528);
  #line 2173 
  (*(hw->phy.ops.write_reg))(hw,6293U,(unsigned short)3);
  #line 2175 
  (*(hw->phy.ops.write_reg))(hw,6038U,(unsigned short)8);
  #line 2177 
  (*(hw->phy.ops.write_reg))(hw,6040U,(unsigned short)53256);
  #line 2181 
  (*(hw->phy.ops.write_reg))(hw,6296U,(unsigned short)55576);
  #line 2183 
  (*(hw->phy.ops.write_reg))(hw,6266U,(unsigned short)2048);
  #line 2187 
  (*(hw->phy.ops.write_reg))(hw,25U,(unsigned short)141);
  #line 2189 
  (*(hw->phy.ops.write_reg))(hw,27U,(unsigned short)8320);
  #line 2191 
  (*(hw->phy.ops.write_reg))(hw,20U,(unsigned short)69);
  #line 2193 
  (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)4928);
  #line 2195 
  return 0;
}

#line 2204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_initialize_M88E1512_phy(struct e1000_hw *hw)
{
  #line 2206 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2207 
  s32 ret_val = 0;
  #line 2210 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)255);
  #line 2211 
  if (ret_val != 0) 
                    #line 2212 
                    goto out;
  #line 2214 
  ret_val = (*(phy->ops.write_reg))(hw,17U,(unsigned short)8523);
  #line 2215 
  if (ret_val != 0) 
                    #line 2216 
                    goto out;
  #line 2218 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)8516);
  #line 2219 
  if (ret_val != 0) 
                    #line 2220 
                    goto out;
  #line 2222 
  ret_val = (*(phy->ops.write_reg))(hw,17U,(unsigned short)3112);
  #line 2223 
  if (ret_val != 0) 
                    #line 2224 
                    goto out;
  #line 2226 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)8518);
  #line 2227 
  if (ret_val != 0) 
                    #line 2228 
                    goto out;
  #line 2230 
  ret_val = (*(phy->ops.write_reg))(hw,17U,(unsigned short)45619);
  #line 2231 
  if (ret_val != 0) 
                    #line 2232 
                    goto out;
  #line 2234 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)8525);
  #line 2235 
  if (ret_val != 0) 
                    #line 2236 
                    goto out;
  #line 2238 
  ret_val = (*(phy->ops.write_reg))(hw,17U,(unsigned short)52236);
  #line 2239 
  if (ret_val != 0) 
                    #line 2240 
                    goto out;
  #line 2242 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)8537);
  #line 2243 
  if (ret_val != 0) 
                    #line 2244 
                    goto out;
  #line 2247 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)251);
  #line 2248 
  if (ret_val != 0) 
                    #line 2249 
                    goto out;
  #line 2251 
  ret_val = (*(phy->ops.write_reg))(hw,7U,(unsigned short)13);
  #line 2252 
  if (ret_val != 0) 
                    #line 2253 
                    goto out;
  #line 2256 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)18);
  #line 2257 
  if (ret_val != 0) 
                    #line 2258 
                    goto out;
  #line 2261 
  ret_val = (*(phy->ops.write_reg))(hw,20U,(unsigned short)32769);
  #line 2262 
  if (ret_val != 0) 
                    #line 2263 
                    goto out;
  #line 2266 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
  #line 2267 
  if (ret_val != 0) 
                    #line 2268 
                    goto out;
  #line 2270 
  ret_val = igb_phy_sw_reset(hw);
  #line 2271 
  if (ret_val != 0) {
    {
      #line 2272 
      bool branch;
      #line 2272 
      struct _ddebug __UNIQUE_ID_ddebug500 = {.modname = (char *)"igb", .function = (char *)"igb_initialize_M88E1512_phy", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error committing the PHY changes\n", .lineno = (unsigned int)2272U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2272 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug500.key.dd_key_false.key,(_Bool)0);
      #line 2272 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2272 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug500,igb_get_hw_dev(hw),(char *)"Error committing the PHY changes\n");
      }
    }
    #line 2273 
    return ret_val;
  }
  #line 2277 
  usleep_range(1000UL,2000UL);
  #line 2278 
  out: 
       #line 2278 
  ;
  #line 2279 
  return ret_val;
}

#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_initialize_M88E1543_phy(struct e1000_hw *hw)
{
  #line 2290 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2291 
  s32 ret_val = 0;
  #line 2294 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)255);
  #line 2295 
  if (ret_val != 0) 
                    #line 2296 
                    goto out;
  #line 2298 
  ret_val = (*(phy->ops.write_reg))(hw,17U,(unsigned short)8523);
  #line 2299 
  if (ret_val != 0) 
                    #line 2300 
                    goto out;
  #line 2302 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)8516);
  #line 2303 
  if (ret_val != 0) 
                    #line 2304 
                    goto out;
  #line 2306 
  ret_val = (*(phy->ops.write_reg))(hw,17U,(unsigned short)3112);
  #line 2307 
  if (ret_val != 0) 
                    #line 2308 
                    goto out;
  #line 2310 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)8518);
  #line 2311 
  if (ret_val != 0) 
                    #line 2312 
                    goto out;
  #line 2314 
  ret_val = (*(phy->ops.write_reg))(hw,17U,(unsigned short)45619);
  #line 2315 
  if (ret_val != 0) 
                    #line 2316 
                    goto out;
  #line 2318 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)8525);
  #line 2319 
  if (ret_val != 0) 
                    #line 2320 
                    goto out;
  #line 2322 
  ret_val = (*(phy->ops.write_reg))(hw,17U,(unsigned short)56332);
  #line 2323 
  if (ret_val != 0) 
                    #line 2324 
                    goto out;
  #line 2326 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)8537);
  #line 2327 
  if (ret_val != 0) 
                    #line 2328 
                    goto out;
  #line 2331 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)251);
  #line 2332 
  if (ret_val != 0) 
                    #line 2333 
                    goto out;
  #line 2335 
  ret_val = (*(phy->ops.write_reg))(hw,7U,(unsigned short)3085);
  #line 2336 
  if (ret_val != 0) 
                    #line 2337 
                    goto out;
  #line 2340 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)18);
  #line 2341 
  if (ret_val != 0) 
                    #line 2342 
                    goto out;
  #line 2345 
  ret_val = (*(phy->ops.write_reg))(hw,20U,(unsigned short)32769);
  #line 2346 
  if (ret_val != 0) 
                    #line 2347 
                    goto out;
  #line 2350 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)1);
  #line 2351 
  if (ret_val != 0) 
                    #line 2352 
                    goto out;
  #line 2355 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)37184);
  #line 2356 
  if (ret_val != 0) 
                    #line 2357 
                    goto out;
  #line 2360 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
  #line 2361 
  if (ret_val != 0) 
                    #line 2362 
                    goto out;
  #line 2364 
  ret_val = igb_phy_sw_reset(hw);
  #line 2365 
  if (ret_val != 0) {
    {
      #line 2366 
      bool branch;
      #line 2366 
      struct _ddebug __UNIQUE_ID_ddebug501 = {.modname = (char *)"igb", .function = (char *)"igb_initialize_M88E1543_phy", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Error committing the PHY changes\n", .lineno = (unsigned int)2366U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2366 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug501.key.dd_key_false.key,(_Bool)0);
      #line 2366 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2366 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug501,igb_get_hw_dev(hw),(char *)"Error committing the PHY changes\n");
      }
    }
    #line 2367 
    return ret_val;
  }
  #line 2371 
  usleep_range(1000UL,2000UL);
  #line 2372 
  out: 
       #line 2372 
  ;
  #line 2373 
  return ret_val;
}

#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
void igb_power_up_phy_copper(struct e1000_hw *hw)
{
  #line 2385 
  u16 mii_reg = (unsigned short)0U;
  #line 2388 
  (*(hw->phy.ops.read_reg))(hw,0U,& mii_reg);
  #line 2389 
  mii_reg = (unsigned short)((unsigned int)mii_reg & 63487U);
  #line 2390 
  (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)((int)mii_reg));
  #line 2391 
  return;
}

#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
void igb_power_down_phy_copper(struct e1000_hw *hw)
{
  #line 2402 
  u16 mii_reg = (unsigned short)0U;
  #line 2405 
  (*(hw->phy.ops.read_reg))(hw,0U,& mii_reg);
  #line 2406 
  mii_reg = (unsigned short)((unsigned int)mii_reg | 2048U);
  #line 2407 
  (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)((int)mii_reg));
  #line 2408 
  usleep_range(1000UL,2000UL);
  #line 2409 
  return;
}

#line 2419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_check_polarity_82580(struct e1000_hw *hw)
{
  #line 2422 
  s32 ret_val;
  #line 2423 
  u16 data;
  #line 2421 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2426 
  ret_val = (*(phy->ops.read_reg))(hw,26U,& data);
  #line 2428 
  if (ret_val == 0) 
                    #line 2429 
                    phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 10) & 1);
  #line 2433 
  return ret_val;
}

#line 2444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_force_speed_duplex_82580(struct e1000_hw *hw)
{
  #line 2447 
  s32 ret_val;
  #line 2448 
  u16 phy_data;
  #line 2449 
  bool link;
  #line 2446 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2451 
  ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_data);
  #line 2452 
  if (ret_val != 0) 
                    #line 2453 
                    goto out;
  #line 2455 
  igb_phy_force_speed_duplex_setup(hw,& phy_data);
  #line 2457 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_data));
  #line 2458 
  if (ret_val != 0) 
                    #line 2459 
                    goto out;
  #line 2464 
  ret_val = (*(phy->ops.read_reg))(hw,18U,& phy_data);
  #line 2465 
  if (ret_val != 0) 
                    #line 2466 
                    goto out;
  #line 2468 
  phy_data = (unsigned short)((unsigned int)phy_data & 63999U);
  #line 2470 
  ret_val = (*(phy->ops.write_reg))(hw,18U,(unsigned short)((int)phy_data));
  #line 2471 
  if (ret_val != 0) 
                    #line 2472 
                    goto out;
  {
    #line 2474 
    bool branch;
    #line 2474 
    struct _ddebug __UNIQUE_ID_ddebug502 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"I82580_PHY_CTRL_2: %X\n", .lineno = (unsigned int)2474U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2474 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug502.key.dd_key_false.key,(_Bool)0);
    #line 2474 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2474 
      ;
      #line 2474 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug502,igb_get_hw_dev(hw),(char *)"I82580_PHY_CTRL_2: %X\n",(int)phy_data);
    }
  }
  #line 2476 
  __const_udelay(4295UL);
  #line 2478 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      #line 2479 
      bool branch_0;
      #line 2479 
      struct _ddebug __UNIQUE_ID_ddebug503 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Waiting for forced speed/duplex link on 82580 phy\n", .lineno = (unsigned int)2479U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2479 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug503.key.dd_key_false.key,(_Bool)0);
      #line 2479 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 2479 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug503,igb_get_hw_dev(hw),(char *)"Waiting for forced speed/duplex link on 82580 phy\n");
      }
    }
    #line 2481 
    ret_val = igb_phy_has_link(hw,20U,100000U,& link);
    #line 2482 
    if (ret_val != 0) 
                      #line 2483 
                      goto out;
    #line 2485 
    if (! link) {
      #line 2486 
      bool branch_1;
      #line 2486 
      struct _ddebug __UNIQUE_ID_ddebug504 = {.modname = (char *)"igb", .function = (char *)"igb_phy_force_speed_duplex_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Link taking longer than expected.\n", .lineno = (unsigned int)2486U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2486 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug504.key.dd_key_false.key,(_Bool)0);
      #line 2486 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 2486 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug504,igb_get_hw_dev(hw),(char *)"Link taking longer than expected.\n");
      }
    }
    #line 2489 
    ret_val = igb_phy_has_link(hw,20U,100000U,& link);
    #line 2490 
    if (ret_val != 0) 
                      #line 2491 
                      goto out;
  }
  #line 2494 
  out: 
       #line 2494 
  ;
  #line 2495 
  return ret_val;
}

#line 2507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_phy_info_82580(struct e1000_hw *hw)
{
  #line 2510 
  s32 ret_val;
  #line 2511 
  u16 data;
  #line 2512 
  bool link;
  #line 2509 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2514 
  ret_val = igb_phy_has_link(hw,1U,0U,& link);
  #line 2515 
  if (ret_val != 0) 
                    #line 2516 
                    goto out;
  #line 2518 
  if (! link) {
    {
      #line 2519 
      bool branch;
      #line 2519 
      struct _ddebug __UNIQUE_ID_ddebug505 = {.modname = (char *)"igb", .function = (char *)"igb_get_phy_info_82580", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = (char *)"Phy info is only valid if link is up\n", .lineno = (unsigned int)2519U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2519 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug505.key.dd_key_false.key,(_Bool)0);
      #line 2519 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2519 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug505,igb_get_hw_dev(hw),(char *)"Phy info is only valid if link is up\n");
      }
    }
    #line 2520 
    ret_val = -3;
    #line 2521 
    goto out;
  }
  #line 2524 
  phy->polarity_correction = (_Bool)1;
  #line 2526 
  ret_val = igb_check_polarity_82580(hw);
  #line 2527 
  if (ret_val != 0) 
                    #line 2528 
                    goto out;
  #line 2530 
  ret_val = (*(phy->ops.read_reg))(hw,26U,& data);
  #line 2531 
  if (ret_val != 0) 
                    #line 2532 
                    goto out;
  #line 2534 
  phy->is_mdix = (_Bool)((((int)data >> 11) & 1) != 0);
  #line 2536 
  if (((int)data & 768) == 512) {
    #line 2538 
    ret_val = (*(hw->phy.ops.get_cable_length))(hw);
    #line 2539 
    if (ret_val != 0) 
                      #line 2540 
                      goto out;
    #line 2542 
    ret_val = (*(phy->ops.read_reg))(hw,10U,& data);
    #line 2543 
    if (ret_val != 0) 
                      #line 2544 
                      goto out;
    #line 2546 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)data >> 13) & 1);
    #line 2550 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)data >> 12) & 1);
  }
  else {
    #line 2554 
    phy->cable_length = (unsigned short)255U;
    #line 2555 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    #line 2556 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  #line 2559 
  out: 
       #line 2559 
  ;
  #line 2560 
  return ret_val;
}

#line 2570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_cable_length_82580(struct e1000_hw *hw)
{
  #line 2573 
  s32 ret_val;
  #line 2574 
  u16 phy_data;
  #line 2574 
  u16 length;
  #line 2572 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2576 
  ret_val = (*(phy->ops.read_reg))(hw,31U,& phy_data);
  #line 2577 
  if (ret_val != 0) 
                    #line 2578 
                    goto out;
  #line 2580 
  length = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 2)) & 255U);
  #line 2583 
  if ((unsigned int)length == 255U) 
                                    #line 2584 
                                    ret_val = -2;
  #line 2586 
  phy->cable_length = length;
  #line 2588 
  out: 
       #line 2588 
  ;
  #line 2589 
  return ret_val;
}

#line 2598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_set_master_slave_mode(struct e1000_hw *hw)
{
  #line 2600 
  s32 ret_val;
  #line 2601 
  u16 phy_data;
  #line 2604 
  ret_val = (*(hw->phy.ops.read_reg))(hw,9U,& phy_data);
  #line 2605 
  if (ret_val != 0) 
                    #line 2606 
                    return ret_val;
  #line 2609 
  if (((int)phy_data & 4096) != 0) {
    #line 2609 
    int tmp;
    #line 2609 
    if (((int)phy_data & 2048) != 0) 
                                     #line 2609 
                                     tmp = e1000_ms_force_master; else 
                                                                    #line 2609 
                                                                    tmp = e1000_ms_force_slave;
    #line 2609 
    hw->phy.original_ms_type = (enum e1000_ms_type)tmp;
  }
  else 
       #line 2609 
       hw->phy.original_ms_type = e1000_ms_auto;
  #line 2614 
  switch ((unsigned int)hw->phy.ms_type) {
    #line 2615 
    case (unsigned int)1: 
                          #line 2615 
    ;
    #line 2616 
    phy_data = (unsigned short)((unsigned int)phy_data | 6144U);
    #line 2617 
    break;
    #line 2618 
    case (unsigned int)2: 
                          #line 2618 
    ;
    #line 2619 
    phy_data = (unsigned short)((unsigned int)phy_data | 4096U);
    #line 2620 
    phy_data = (unsigned short)((unsigned int)phy_data & 63487U);
    #line 2621 
    break;
    #line 2622 
    case (unsigned int)3: 
                          #line 2622 
    ;
    #line 2623 
    phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
    #line 2625 
    default: 
             #line 2625 
    ;
    #line 2626 
    break;
  }
  #line 2629 
  return (*(hw->phy.ops.write_reg))(hw,9U,(unsigned short)((int)phy_data));
}

#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.h"
#line 10 
s32 igb_read_invm_version(struct e1000_hw *hw, struct e1000_fw_version *invm_ver);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void igb_raise_eec_clk(struct e1000_hw *hw, u32 *eecd)
{
  #line 19 
  *eecd |= 1U;
  {
    #line 21 
    union __anonunion___u_6606 __u;
    #line 20 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 20 
    u8 *hw_addr = (__u.__val);
    #line 20 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 20 
                                           writel(*eecd,(void *)(hw_addr + 16U));
  }
  #line 21 
  igb_rd32(hw,8U);
  #line 22 
  if (0 != 0) 
    #line 22 
    if ((unsigned int)hw->nvm.delay_usec > 19999U) 
                                                   #line 22 
                                                   __bad_udelay(); else 
                                                                    #line 22 
                                                                    __const_udelay((unsigned long)hw->nvm.delay_usec * 4295UL);
  else 
       #line 22 
       __udelay((unsigned long)hw->nvm.delay_usec);
  #line 24 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void igb_lower_eec_clk(struct e1000_hw *hw, u32 *eecd)
{
  #line 34 
  *eecd &= 4294967294U;
  {
    #line 36 
    union __anonunion___u_6608 __u;
    #line 35 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 35 
    u8 *hw_addr = (__u.__val);
    #line 35 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 35 
                                           writel(*eecd,(void *)(hw_addr + 16U));
  }
  #line 36 
  igb_rd32(hw,8U);
  #line 37 
  if (0 != 0) 
    #line 37 
    if ((unsigned int)hw->nvm.delay_usec > 19999U) 
                                                   #line 37 
                                                   __bad_udelay(); else 
                                                                    #line 37 
                                                                    __const_udelay((unsigned long)hw->nvm.delay_usec * 4295UL);
  else 
       #line 37 
       __udelay((unsigned long)hw->nvm.delay_usec);
  #line 39 
  return;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void igb_shift_out_eec_bits(struct e1000_hw *hw, u16 data, u16 count)
{
  #line 54 
  u32 mask;
  #line 52 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 53 
  u32 eecd = igb_rd32(hw,16U);
  #line 56 
  mask = 1U << ((int)count + -1);
  #line 57 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) 
                                                       #line 58 
                                                       eecd |= 8U;
  #line 60 
  while (1) {
    #line 61 
    eecd &= 4294967291U;
    #line 63 
    if (((unsigned int)data & mask) != 0U) 
                                           #line 64 
                                           eecd |= 4U;
    {
      #line 67 
      union __anonunion___u_6610 __u;
      #line 66 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 66 
      u8 *hw_addr = (__u.__val);
      #line 66 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 66 
                                             writel(eecd,(void *)(hw_addr + 16U));
    }
    #line 67 
    igb_rd32(hw,8U);
    #line 69 
    if (0 != 0) 
      #line 69 
      if ((unsigned int)nvm->delay_usec > 19999U) 
                                                  #line 69 
                                                  __bad_udelay(); else 
                                                                    #line 69 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
         #line 69 
         __udelay((unsigned long)nvm->delay_usec);
    #line 71 
    igb_raise_eec_clk(hw,& eecd);
    #line 72 
    igb_lower_eec_clk(hw,& eecd);
    #line 74 
    mask >>= 1;
    #line 75 
    if (! (mask != 0U)) 
                        #line 60 
                        break;
  }
  #line 77 
  eecd &= 4294967291U;
  {
    #line 79 
    union __anonunion___u_6612 __u_0;
    #line 78 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 78 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 78 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 78 
                                             writel(eecd,(void *)(hw_addr_0 + 16U));
  }
  #line 80 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static u16 igb_shift_in_eec_bits(struct e1000_hw *hw, u16 count)
{
  #line 94 
  u32 eecd;
  #line 95 
  u32 i;
  #line 96 
  u16 data;
  #line 98 
  eecd = igb_rd32(hw,16U);
  #line 100 
  eecd &= 4294967283U;
  #line 101 
  data = (unsigned short)0U;
  #line 103 
  i = 0U;
  #line 103 
  while ((unsigned int)count > i) {
    #line 104 
    data = (unsigned short)((int)data << 1U);
    #line 105 
    igb_raise_eec_clk(hw,& eecd);
    #line 107 
    eecd = igb_rd32(hw,16U);
    #line 109 
    eecd &= 4294967291U;
    #line 110 
    if ((eecd & 8U) != 0U) 
                           #line 111 
                           data = (unsigned short)((unsigned int)data | 1U);
    #line 113 
    igb_lower_eec_clk(hw,& eecd);
    #line 103 
    i ++;
  }
  #line 116 
  return data;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static s32 igb_poll_eerd_eewr_done(struct e1000_hw *hw, int ee_reg)
{
  #line 130 
  u32 i;
  #line 129 
  u32 attempts = 100000U;
  #line 130 
  u32 reg = 0U;
  #line 131 
  s32 ret_val = -1;
  #line 133 
  i = 0U;
  #line 133 
  while (i < attempts) {
    #line 134 
    if (ee_reg == 0) 
                     #line 135 
                     reg = igb_rd32(hw,20U); else 
                                                  #line 137 
                                                  reg = igb_rd32(hw,4140U);
    #line 139 
    if ((reg & 2U) != 0U) {
      #line 140 
      ret_val = 0;
      #line 141 
      break;
    }
    #line 144 
    __const_udelay(21475UL);
    #line 133 
    i ++;
  }
  #line 147 
  return ret_val;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_acquire_nvm(struct e1000_hw *hw)
{
  #line 160 
  u32 eecd = igb_rd32(hw,16U);
  #line 161 
  s32 timeout = 1000;
  #line 162 
  s32 ret_val = 0;
  {
    #line 166 
    union __anonunion___u_6614 __u;
    #line 165 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 165 
    u8 *hw_addr = (__u.__val);
    #line 165 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 165 
                                           writel(eecd | 64U,(void *)(hw_addr + 16U));
  }
  #line 166 
  eecd = igb_rd32(hw,16U);
  #line 168 
  while (timeout != 0) {
    #line 169 
    if ((eecd & 128U) != 0U) 
                             #line 170 
                             break;
    #line 171 
    __const_udelay(21475UL);
    #line 172 
    eecd = igb_rd32(hw,16U);
    #line 173 
    timeout --;
  }
  #line 176 
  if (timeout == 0) {
    #line 177 
    eecd &= 4294967231U;
    {
      #line 179 
      union __anonunion___u_6616 __u_0;
      #line 178 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 178 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 178 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 178 
                                               writel(eecd,(void *)(hw_addr_0 + 16U));
    }
    {
      #line 179 
      bool branch;
      #line 179 
      struct _ddebug __UNIQUE_ID_ddebug436 = {.modname = (char *)"igb", .function = (char *)"igb_acquire_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"Could not acquire NVM grant\n", .lineno = (unsigned int)179U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 179 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug436.key.dd_key_false.key,(_Bool)0);
      #line 179 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 179 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug436,igb_get_hw_dev(hw),(char *)"Could not acquire NVM grant\n");
      }
    }
    #line 180 
    ret_val = -1;
  }
  #line 183 
  return ret_val;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void igb_standby_nvm(struct e1000_hw *hw)
{
  #line 194 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 195 
  u32 eecd = igb_rd32(hw,16U);
  #line 197 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) {
    #line 199 
    eecd |= 2U;
    {
      #line 201 
      union __anonunion___u_6618 __u;
      #line 200 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 200 
      u8 *hw_addr = (__u.__val);
      #line 200 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 200 
                                             writel(eecd,(void *)(hw_addr + 16U));
    }
    #line 201 
    igb_rd32(hw,8U);
    #line 202 
    if (0 != 0) 
      #line 202 
      if ((unsigned int)nvm->delay_usec > 19999U) 
                                                  #line 202 
                                                  __bad_udelay(); else 
                                                                    #line 202 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
         #line 202 
         __udelay((unsigned long)nvm->delay_usec);
    #line 203 
    eecd &= 4294967293U;
    {
      #line 205 
      union __anonunion___u_6620 __u_0;
      #line 204 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 204 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 204 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 204 
                                               writel(eecd,(void *)(hw_addr_0 + 16U));
    }
    #line 205 
    igb_rd32(hw,8U);
    #line 206 
    if (0 != 0) 
      #line 206 
      if ((unsigned int)nvm->delay_usec > 19999U) 
                                                  #line 206 
                                                  __bad_udelay(); else 
                                                                    #line 206 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
         #line 206 
         __udelay((unsigned long)nvm->delay_usec);
  }
  #line 209 
  return;
}

#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void e1000_stop_nvm(struct e1000_hw *hw)
{
  #line 218 
  u32 eecd;
  #line 220 
  eecd = igb_rd32(hw,16U);
  #line 221 
  if (hw->nvm.type == (unsigned int)e1000_nvm_eeprom_spi) {
    #line 223 
    eecd |= 2U;
    #line 224 
    igb_lower_eec_clk(hw,& eecd);
  }
  #line 226 
  return;
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
void igb_release_nvm(struct e1000_hw *hw)
{
  #line 236 
  u32 eecd;
  #line 238 
  e1000_stop_nvm(hw);
  #line 240 
  eecd = igb_rd32(hw,16U);
  #line 241 
  eecd &= 4294967231U;
  {
    #line 243 
    union __anonunion___u_6622 __u;
    #line 242 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 242 
    u8 *hw_addr = (__u.__val);
    #line 242 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 242 
                                           writel(eecd,(void *)(hw_addr + 16U));
  }
  #line 244 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static s32 igb_ready_nvm_eeprom(struct e1000_hw *hw)
{
  #line 257 
  u8 spi_stat_reg;
  #line 253 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 254 
  u32 eecd = igb_rd32(hw,16U);
  #line 255 
  s32 ret_val = 0;
  #line 256 
  u16 timeout = (unsigned short)0U;
  #line 260 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) {
    #line 262 
    eecd &= 4294967292U;
    {
      #line 264 
      union __anonunion___u_6624 __u;
      #line 263 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 263 
      u8 *hw_addr = (__u.__val);
      #line 263 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 263 
                                             writel(eecd,(void *)(hw_addr + 16U));
    }
    #line 264 
    igb_rd32(hw,8U);
    #line 265 
    __const_udelay(4295UL);
    #line 266 
    timeout = (unsigned short)5000U;
    #line 273 
    while ((unsigned int)timeout != 0U) {
      #line 274 
      igb_shift_out_eec_bits(hw,(unsigned short)5,(unsigned short)((int)hw->nvm.opcode_bits));
      #line 276 
      spi_stat_reg = (unsigned char)igb_shift_in_eec_bits(hw,(unsigned short)8);
      #line 277 
      if (((int)spi_stat_reg & 1) == 0) 
                                        #line 278 
                                        break;
      #line 280 
      __const_udelay(21475UL);
      #line 281 
      igb_standby_nvm(hw);
      #line 282 
      timeout = (u16)((int)timeout - 1);
    }
    #line 285 
    if ((unsigned int)timeout == 0U) {
      {
        #line 286 
        bool branch;
        #line 286 
        struct _ddebug __UNIQUE_ID_ddebug437 = {.modname = (char *)"igb", .function = (char *)"igb_ready_nvm_eeprom", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"SPI NVM Status error\n", .lineno = (unsigned int)286U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 286 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug437.key.dd_key_false.key,(_Bool)0);
        #line 286 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 286 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug437,igb_get_hw_dev(hw),(char *)"SPI NVM Status error\n");
        }
      }
      #line 287 
      ret_val = -1;
      #line 288 
      goto out;
    }
  }
  #line 292 
  out: 
       #line 292 
  ;
  #line 293 
  return ret_val;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_read_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 309 
  s32 ret_val;
  #line 310 
  u16 word_in;
  #line 307 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 308 
  u32 i = 0U;
  #line 311 
  u8 read_opcode = (unsigned char)3U;
  #line 316 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 318 
      bool branch;
      #line 318 
      struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"igb", .function = (char *)"igb_read_nvm_spi", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)318U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 318 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
      #line 318 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 318 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug438,igb_get_hw_dev(hw),(char *)"nvm parameter(s) out of bounds\n");
      }
    }
    #line 319 
    ret_val = -1;
    #line 320 
    goto out;
  }
  #line 323 
  ret_val = (*(nvm->ops.acquire))(hw);
  #line 324 
  if (ret_val != 0) 
                    #line 325 
                    goto out;
  #line 327 
  ret_val = igb_ready_nvm_eeprom(hw);
  #line 328 
  if (ret_val != 0) 
                    #line 329 
                    goto release;
  #line 331 
  igb_standby_nvm(hw);
  #line 333 
  if ((unsigned int)nvm->address_bits == 8U && (unsigned int)offset > 127U) 
    #line 334 
    read_opcode = (unsigned char)((unsigned int)read_opcode | 8U);
  #line 337 
  igb_shift_out_eec_bits(hw,(unsigned short)((int)read_opcode),(unsigned short)((int)nvm->opcode_bits));
  #line 338 
  igb_shift_out_eec_bits(hw,(unsigned short)((int)((unsigned int)offset * 2U)),(unsigned short)((int)nvm->address_bits));
  #line 344 
  i = 0U;
  #line 344 
  while ((unsigned int)words > i) {
    #line 345 
    word_in = igb_shift_in_eec_bits(hw,(unsigned short)16);
    #line 346 
    *(data + (unsigned long)i) = (unsigned short)(((int)word_in >> 8) | ((int)word_in << 8));
    #line 344 
    i ++;
  }
  #line 349 
  release: 
           #line 349 
  ;
  #line 350 
  (*(nvm->ops.release))(hw);
  #line 352 
  out: 
       #line 352 
  ;
  #line 353 
  return ret_val;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_read_nvm_eerd(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 368 
  u32 i;
  #line 367 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 368 
  u32 eerd = 0U;
  #line 369 
  s32 ret_val = 0;
  #line 374 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 376 
      bool branch;
      #line 376 
      struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"igb", .function = (char *)"igb_read_nvm_eerd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)376U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 376 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
      #line 376 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 376 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug439,igb_get_hw_dev(hw),(char *)"nvm parameter(s) out of bounds\n");
      }
    }
    #line 377 
    ret_val = -1;
    #line 378 
    goto out;
  }
  #line 381 
  i = 0U;
  #line 381 
  while ((unsigned int)words > i) {
    {
      #line 382 
      eerd = (((unsigned int)offset + i) << 2) + 1U;
      {
        #line 386 
        union __anonunion___u_6626 __u;
        #line 385 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 385 
        u8 *hw_addr = (__u.__val);
        #line 385 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 385 
                                               writel(eerd,(void *)(hw_addr + 20U));
      }
      #line 386 
      ret_val = igb_poll_eerd_eewr_done(hw,0);
      #line 387 
      if (ret_val != 0) 
                        #line 388 
                        break;
      #line 390 
      *(data + (unsigned long)i) = (unsigned short)(igb_rd32(hw,20U) >> 16);
    }
    #line 381 
    i ++;
  }
  #line 394 
  out: 
       #line 394 
  ;
  #line 395 
  return ret_val;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_write_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 412 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 413 
  s32 ret_val = -1;
  #line 414 
  u16 widx = (unsigned short)0U;
  #line 419 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 421 
      bool branch;
      #line 421 
      struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"igb", .function = (char *)"igb_write_nvm_spi", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)421U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 421 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
      #line 421 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 421 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug440,igb_get_hw_dev(hw),(char *)"nvm parameter(s) out of bounds\n");
      }
    }
    #line 422 
    return ret_val;
  }
  #line 425 
  while ((int)widx < (int)words) {
    #line 426 
    u8 write_opcode = (unsigned char)2U;
    #line 428 
    ret_val = (*(nvm->ops.acquire))(hw);
    #line 429 
    if (ret_val != 0) 
                      #line 430 
                      return ret_val;
    #line 432 
    ret_val = igb_ready_nvm_eeprom(hw);
    #line 433 
    if (ret_val != 0) {
      #line 434 
      (*(nvm->ops.release))(hw);
      #line 435 
      return ret_val;
    }
    #line 438 
    igb_standby_nvm(hw);
    #line 441 
    igb_shift_out_eec_bits(hw,(unsigned short)6,(unsigned short)((int)nvm->opcode_bits));
    #line 444 
    igb_standby_nvm(hw);
    #line 449 
    if ((unsigned int)nvm->address_bits == 8U && (unsigned int)offset > 127U) 
      #line 450 
      write_opcode = (unsigned char)((unsigned int)write_opcode | 8U);
    #line 453 
    igb_shift_out_eec_bits(hw,(unsigned short)((int)write_opcode),(unsigned short)((int)nvm->opcode_bits));
    #line 454 
    igb_shift_out_eec_bits(hw,(unsigned short)((int)((unsigned int)((int)offset + (int)widx) * 2U)),(unsigned short)((int)nvm->address_bits));
    #line 458 
    while ((int)widx < (int)words) {
      #line 459 
      u16 word_out = *(data + (unsigned long)widx);
      #line 461 
      word_out = (unsigned short)(((int)word_out >> 8) | ((int)word_out << 8));
      #line 462 
      igb_shift_out_eec_bits(hw,(unsigned short)((int)word_out),(unsigned short)16);
      #line 463 
      widx = (u16)((int)widx + 1);
      #line 465 
      if ((((int)offset + (int)widx) * 2) % (int)nvm->page_size == 0) {
        #line 466 
        igb_standby_nvm(hw);
        #line 467 
        break;
      }
    }
    #line 470 
    usleep_range(1000UL,2000UL);
    #line 471 
    (*(nvm->ops.release))(hw);
  }
  #line 474 
  return ret_val;
}

#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_read_part_string(struct e1000_hw *hw, u8 *part_num, u32 part_num_size)
{
  #line 488 
  s32 ret_val;
  #line 489 
  u16 nvm_data;
  #line 490 
  u16 pointer;
  #line 491 
  u16 offset;
  #line 492 
  u16 length;
  #line 494 
  if (part_num == (u8 *)0U) {
    {
      #line 495 
      bool branch;
      #line 495 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"igb", .function = (char *)"igb_read_part_string", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"PBA string buffer was null\n", .lineno = (unsigned int)495U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 495 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 495 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 495 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,igb_get_hw_dev(hw),(char *)"PBA string buffer was null\n");
      }
    }
    #line 496 
    ret_val = 16;
    #line 497 
    goto out;
  }
  #line 500 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)8,(unsigned short)1,& nvm_data);
  #line 501 
  if (ret_val != 0) {
    {
      #line 502 
      bool branch_0;
      #line 502 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"igb", .function = (char *)"igb_read_part_string", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)502U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 502 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 502 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 502 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
      }
    }
    #line 503 
    goto out;
  }
  #line 506 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)9,(unsigned short)1,& pointer);
  #line 507 
  if (ret_val != 0) {
    {
      #line 508 
      bool branch_1;
      #line 508 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"igb", .function = (char *)"igb_read_part_string", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)508U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 508 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 508 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 508 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
      }
    }
    #line 509 
    goto out;
  }
  #line 516 
  if ((unsigned int)nvm_data != 64250U) {
    {
      #line 517 
      bool branch_2;
      #line 517 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igb", .function = (char *)"igb_read_part_string", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM PBA number is not stored as string\n", .lineno = (unsigned int)517U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 517 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 517 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 517 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,igb_get_hw_dev(hw),(char *)"NVM PBA number is not stored as string\n");
      }
    }
    #line 520 
    if (part_num_size <= 10U) {
      {
        #line 521 
        bool branch_3;
        #line 521 
        struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"igb", .function = (char *)"igb_read_part_string", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"PBA string buffer too small\n", .lineno = (unsigned int)521U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 521 
        branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
        #line 521 
        if ((long)((long)((int)branch_3 != 0)) != 0L) {
          #line 521 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,igb_get_hw_dev(hw),(char *)"PBA string buffer too small\n");
        }
      }
      #line 522 
      return 17;
    }
    #line 526 
    *part_num = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 12)) & 15U);
    #line 527 
    *(part_num + 1U) = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 8)) & 15U);
    #line 528 
    *(part_num + 2U) = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 4)) & 15U);
    #line 529 
    *(part_num + 3U) = (unsigned char)((unsigned int)((unsigned char)nvm_data) & 15U);
    #line 530 
    *(part_num + 4U) = (unsigned char)((unsigned int)((unsigned char)((int)pointer >> 12)) & 15U);
    #line 531 
    *(part_num + 5U) = (unsigned char)((unsigned int)((unsigned char)((int)pointer >> 8)) & 15U);
    #line 532 
    *(part_num + 6U) = (unsigned char)45U;
    #line 533 
    *(part_num + 7U) = (unsigned char)0U;
    #line 534 
    *(part_num + 8U) = (unsigned char)((unsigned int)((unsigned char)((int)pointer >> 4)) & 15U);
    #line 535 
    *(part_num + 9U) = (unsigned char)((unsigned int)((unsigned char)pointer) & 15U);
    #line 538 
    *(part_num + 10U) = (unsigned char)0U;
    #line 541 
    offset = (unsigned short)0U;
    #line 541 
    while ((unsigned int)offset <= 9U) {
      #line 542 
      if ((unsigned int)*(part_num + (unsigned long)offset) <= 9U) 
                                                                   #line 543 
                                                                   *(part_num + (unsigned long)offset) = (unsigned char)((unsigned int)*(part_num + (unsigned long)offset) + 48U);
      else 
        #line 544 
        if ((unsigned int)*(part_num + (unsigned long)offset) <= 15U) 
          #line 545 
          *(part_num + (unsigned long)offset) = (unsigned char)((unsigned int)*(part_num + (unsigned long)offset) + 55U);
      #line 541 
      offset = (u16)((int)offset + 1);
    }
    #line 548 
    goto out;
  }
  #line 551 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)pointer),(unsigned short)1,& length);
  #line 552 
  if (ret_val != 0) {
    {
      #line 553 
      bool branch_4;
      #line 553 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"igb", .function = (char *)"igb_read_part_string", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)553U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 553 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 553 
      if ((long)((long)((int)branch_4 != 0)) != 0L) {
        #line 553 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
      }
    }
    #line 554 
    goto out;
  }
  #line 557 
  if ((unsigned int)length + 65535U > 65533U) {
    {
      #line 558 
      bool branch_5;
      #line 558 
      struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"igb", .function = (char *)"igb_read_part_string", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM PBA number section invalid length\n", .lineno = (unsigned int)558U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 558 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
      #line 558 
      if ((long)((long)((int)branch_5 != 0)) != 0L) {
        #line 558 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,igb_get_hw_dev(hw),(char *)"NVM PBA number section invalid length\n");
      }
    }
    #line 559 
    ret_val = 18;
    #line 560 
    goto out;
  }
  #line 563 
  if ((unsigned int)length * 2U + 4294967295U > part_num_size) {
    {
      #line 564 
      bool branch_6;
      #line 564 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"igb", .function = (char *)"igb_read_part_string", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"PBA string buffer too small\n", .lineno = (unsigned int)564U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 564 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 564 
      if ((long)((long)((int)branch_6 != 0)) != 0L) {
        #line 564 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,igb_get_hw_dev(hw),(char *)"PBA string buffer too small\n");
      }
    }
    #line 565 
    ret_val = 17;
    #line 566 
    goto out;
  }
  #line 570 
  pointer = (u16)((int)pointer + 1);
  #line 571 
  length = (u16)((int)length - 1);
  #line 573 
  offset = (unsigned short)0U;
  #line 573 
  while ((int)offset < (int)length) {
    #line 574 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)pointer + (int)offset),(unsigned short)1,& nvm_data);
    #line 575 
    if (ret_val != 0) {
      {
        #line 576 
        bool branch_7;
        #line 576 
        struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"igb", .function = (char *)"igb_read_part_string", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)576U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 576 
        branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
        #line 576 
        if ((long)((long)((int)branch_7 != 0)) != 0L) {
          #line 576 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
        }
      }
      #line 577 
      goto out;
    }
    #line 579 
    *(part_num + (unsigned long)((int)offset * 2)) = (unsigned char)((int)nvm_data >> 8);
    #line 580 
    *(part_num + ((unsigned long)((int)offset * 2) + (unsigned long)1U)) = (unsigned char)nvm_data;
    #line 573 
    offset = (u16)((int)offset + 1);
  }
  #line 582 
  *(part_num + (unsigned long)((int)offset * 2)) = (unsigned char)0U;
  #line 584 
  out: 
       #line 584 
  ;
  #line 585 
  return ret_val;
}

#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_read_mac_addr(struct e1000_hw *hw)
{
  #line 598 
  u32 rar_high;
  #line 599 
  u32 rar_low;
  #line 600 
  u16 i;
  #line 602 
  rar_high = igb_rd32(hw,21508U);
  #line 603 
  rar_low = igb_rd32(hw,21504U);
  #line 605 
  i = (unsigned short)0U;
  #line 605 
  while ((unsigned int)i <= 3U) {
    #line 606 
    hw->mac.perm_addr[(int)i] = (unsigned char)(rar_low >> (int)i * 8);
    #line 605 
    i = (u16)((int)i + 1);
  }
  #line 608 
  i = (unsigned short)0U;
  #line 608 
  while ((unsigned int)i <= 1U) {
    #line 609 
    hw->mac.perm_addr[(int)i + 4] = (unsigned char)(rar_high >> (int)i * 8);
    #line 608 
    i = (u16)((int)i + 1);
  }
  #line 611 
  i = (unsigned short)0U;
  #line 611 
  while ((unsigned int)i <= 5U) {
    #line 612 
    hw->mac.addr[(int)i] = hw->mac.perm_addr[(int)i];
    #line 611 
    i = (u16)((int)i + 1);
  }
  #line 614 
  return 0;
}

#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_validate_nvm_checksum(struct e1000_hw *hw)
{
  #line 628 
  u16 i;
  #line 628 
  u16 nvm_data;
  #line 626 
  s32 ret_val = 0;
  #line 627 
  u16 checksum = (unsigned short)0U;
  #line 630 
  i = (unsigned short)0U;
  #line 630 
  while ((unsigned int)i <= 63U) {
    #line 631 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    #line 632 
    if (ret_val != 0) {
      {
        #line 633 
        bool branch;
        #line 633 
        struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"igb", .function = (char *)"igb_validate_nvm_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)633U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 633 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
        #line 633 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 633 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
        }
      }
      #line 634 
      goto out;
    }
    #line 636 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    #line 630 
    i = (u16)((int)i + 1);
  }
  #line 639 
  if ((unsigned int)checksum != 47802U) {
    {
      #line 640 
      bool branch_0;
      #line 640 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"igb", .function = (char *)"igb_validate_nvm_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM Checksum Invalid\n", .lineno = (unsigned int)640U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 640 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 640 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 640 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,igb_get_hw_dev(hw),(char *)"NVM Checksum Invalid\n");
      }
    }
    #line 641 
    ret_val = -1;
    #line 642 
    goto out;
  }
  #line 645 
  out: 
       #line 645 
  ;
  #line 646 
  return ret_val;
}

#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_update_nvm_checksum(struct e1000_hw *hw)
{
  #line 659 
  s32 ret_val;
  #line 661 
  u16 i;
  #line 661 
  u16 nvm_data;
  #line 660 
  u16 checksum = (unsigned short)0U;
  #line 663 
  i = (unsigned short)0U;
  #line 663 
  while ((unsigned int)i <= 62U) {
    #line 664 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    #line 665 
    if (ret_val != 0) {
      {
        #line 666 
        bool branch;
        #line 666 
        struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"igb", .function = (char *)"igb_update_nvm_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM Read Error while updating checksum.\n", .lineno = (unsigned int)666U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 666 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
        #line 666 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 666 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,igb_get_hw_dev(hw),(char *)"NVM Read Error while updating checksum.\n");
        }
      }
      #line 667 
      goto out;
    }
    #line 669 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    #line 663 
    i = (u16)((int)i + 1);
  }
  #line 671 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  #line 672 
  ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)63,(unsigned short)1,& checksum);
  #line 673 
  if (ret_val != 0) {
    #line 674 
    bool branch_0;
    #line 674 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"igb", .function = (char *)"igb_update_nvm_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = (char *)"NVM Write Error while updating checksum.\n", .lineno = (unsigned int)674U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 674 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 674 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 674 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,igb_get_hw_dev(hw),(char *)"NVM Write Error while updating checksum.\n");
    }
  }
  #line 676 
  out: 
       #line 676 
  ;
  #line 677 
  return ret_val;
}

#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_nvm.c"
void igb_get_fw_version(struct e1000_hw *hw, struct e1000_fw_version *fw_vers)
{
  #line 689 
  u16 eeprom_verh;
  #line 689 
  u16 eeprom_verl;
  #line 689 
  u16 etrack_test;
  #line 689 
  u16 fw_version;
  #line 690 
  u8 q;
  #line 690 
  u8 hval;
  #line 690 
  u8 rem;
  #line 690 
  u8 result;
  #line 691 
  u16 comb_verh;
  #line 691 
  u16 comb_verl;
  #line 691 
  u16 comb_offset;
  #line 693 
  memset((void *)fw_vers,0,20UL);
  #line 698 
  (*(hw->nvm.ops.read))(hw,(unsigned short)67,(unsigned short)1,& etrack_test);
  #line 699 
  switch ((unsigned int)hw->mac.type) {
    #line 700 
    case (unsigned int)7: 
                          #line 700 
    ;
    #line 701 
    igb_read_invm_version(hw,fw_vers);
    #line 702 
    return;
    #line 703 
    case (unsigned int)1: 
                          #line 703 
    ;
    #line 704 
    case (unsigned int)2: 
                          #line 704 
    ;
    #line 705 
    case (unsigned int)3: 
                          #line 705 
    ;
    #line 709 
    if (((int)etrack_test & 61440) != 32768) {
      #line 710 
      (*(hw->nvm.ops.read))(hw,(unsigned short)5,(unsigned short)1,& fw_version);
      #line 711 
      fw_vers->eep_major = (unsigned short)((int)fw_version >> 12);
      #line 713 
      fw_vers->eep_minor = (unsigned short)((unsigned int)((unsigned short)((int)fw_version >> 4)) & 255U);
      #line 715 
      fw_vers->eep_build = (unsigned short)((unsigned int)fw_version & 15U);
      #line 716 
      goto etrack_id;
    }
    #line 718 
    break;
    #line 719 
    case (unsigned int)6: 
                          #line 719 
    ;
    #line 720 
    if (! igb_get_flash_presence_i210(hw)) {
      #line 721 
      igb_read_invm_version(hw,fw_vers);
      #line 722 
      return;
    }
    #line 725 
    case (unsigned int)4: 
                          #line 725 
    ;
    #line 727 
    (*(hw->nvm.ops.read))(hw,(unsigned short)61,(unsigned short)1,& comb_offset);
    #line 728 
    if ((unsigned int)comb_offset + 65535U <= 65533U) {
      #line 731 
      (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned int)comb_offset + 132U)),(unsigned short)1,& comb_verh);
      #line 733 
      (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned int)comb_offset + 131U)),(unsigned short)1,& comb_verl);
      #line 737 
      if (((unsigned int)comb_verh != 65535U && (unsigned int)comb_verl != 65535U) && ((unsigned int)comb_verh != 0U && (unsigned int)comb_verl != 0U)) {
        #line 741 
        fw_vers->or_valid = (_Bool)1;
        #line 742 
        fw_vers->or_major = (unsigned short)((int)comb_verl >> 8);
        #line 744 
        fw_vers->or_build = (unsigned short)(((int)comb_verl << 8) | ((int)comb_verh >> 8));
        #line 747 
        fw_vers->or_patch = (unsigned short)((unsigned int)comb_verh & 255U);
      }
    }
    #line 751 
    break;
    #line 752 
    default: 
             #line 752 
    ;
    #line 753 
    return;
  }
  #line 755 
  (*(hw->nvm.ops.read))(hw,(unsigned short)5,(unsigned short)1,& fw_version);
  #line 756 
  fw_vers->eep_major = (unsigned short)((int)fw_version >> 12);
  #line 760 
  if (((int)fw_version & 3840) == 0) 
                                     #line 761 
                                     eeprom_verl = (unsigned short)((unsigned int)fw_version & 255U); else 
                                                                    #line 763 
                                                                    eeprom_verl = (unsigned short)((unsigned int)((unsigned short)((int)fw_version >> 4)) & 255U);
  #line 769 
  q = (unsigned char)((unsigned int)eeprom_verl / 16U);
  #line 770 
  hval = (unsigned char)((unsigned int)q * 10U);
  #line 771 
  rem = (unsigned char)((unsigned int)((unsigned char)eeprom_verl) & 15U);
  #line 772 
  result = (unsigned char)((int)hval + (int)rem);
  #line 773 
  fw_vers->eep_minor = (unsigned short)result;
  #line 775 
  etrack_id: 
             #line 775 
  ;
  #line 776 
  if (((int)etrack_test & 61440) == 32768) {
    #line 777 
    (*(hw->nvm.ops.read))(hw,(unsigned short)66,(unsigned short)1,& eeprom_verl);
    #line 778 
    (*(hw->nvm.ops.read))(hw,(unsigned short)67,(unsigned short)1,& eeprom_verh);
    #line 779 
    fw_vers->etrack_id = (unsigned int)(((int)eeprom_verh << 16) | (int)eeprom_verl);
  }
  #line 782 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.h"
#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_valid_led_default_i210(struct e1000_hw *hw, u16 *data);
#line 14 
#line 666 
static s32 igb_update_flash_i210(struct e1000_hw *hw);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_get_hw_semaphore_i210(struct e1000_hw *hw)
{
  #line 24 
  u32 swsm;
  #line 25 
  s32 timeout = (int)hw->nvm.word_size + 1;
  #line 26 
  s32 i = 0;
  #line 29 
  while (i < timeout) {
    #line 30 
    swsm = igb_rd32(hw,23376U);
    #line 31 
    if ((swsm & 1U) == 0U) 
                           #line 32 
                           break;
    #line 34 
    __const_udelay(214750UL);
    #line 35 
    i ++;
  }
  #line 38 
  if (i == timeout) {
    #line 42 
    if ((int)hw->dev_spec._82575.clear_semaphore_once != 0) {
      #line 43 
      hw->dev_spec._82575.clear_semaphore_once = (_Bool)0;
      #line 44 
      igb_put_hw_semaphore(hw);
      #line 45 
      i = 0;
      #line 45 
      while (i < timeout) {
        #line 46 
        swsm = igb_rd32(hw,23376U);
        #line 47 
        if ((swsm & 1U) == 0U) 
                               #line 48 
                               break;
        #line 50 
        __const_udelay(214750UL);
        #line 45 
        i ++;
      }
    }
    #line 55 
    if (i == timeout) {
      {
        #line 56 
        bool branch;
        #line 56 
        struct _ddebug __UNIQUE_ID_ddebug436 = {.modname = (char *)"igb", .function = (char *)"igb_get_hw_semaphore_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"Driver can\'t access device - SMBI bit is set.\n", .lineno = (unsigned int)56U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 56 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug436.key.dd_key_false.key,(_Bool)0);
        #line 56 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 56 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug436,igb_get_hw_dev(hw),(char *)"Driver can\'t access device - SMBI bit is set.\n");
        }
      }
      #line 57 
      return -1;
    }
  }
  #line 62 
  i = 0;
  #line 62 
  while (i < timeout) {
    {
      #line 63 
      swsm = igb_rd32(hw,23376U);
      {
        #line 65 
        union __anonunion___u_7315 __u;
        #line 64 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 64 
        u8 *hw_addr = (__u.__val);
        #line 64 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 64 
                                               writel(swsm | 2U,(void *)(hw_addr + 23376U));
      }
      #line 67 
      if ((igb_rd32(hw,23376U) & 2U) != 0U) 
                                            #line 68 
                                            break;
      #line 70 
      __const_udelay(214750UL);
    }
    #line 62 
    i ++;
  }
  #line 73 
  if (i == timeout) {
    #line 75 
    igb_put_hw_semaphore(hw);
    {
      #line 76 
      bool branch_0;
      #line 76 
      struct _ddebug __UNIQUE_ID_ddebug437 = {.modname = (char *)"igb", .function = (char *)"igb_get_hw_semaphore_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"Driver can\'t access the NVM\n", .lineno = (unsigned int)76U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 76 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug437.key.dd_key_false.key,(_Bool)0);
      #line 76 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 76 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug437,igb_get_hw_dev(hw),(char *)"Driver can\'t access the NVM\n");
      }
    }
    #line 77 
    return -1;
  }
  #line 80 
  return 0;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_acquire_nvm_i210(struct e1000_hw *hw)
{
  #line 94 
  return igb_acquire_swfw_sync_i210(hw,(unsigned short)1);
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static void igb_release_nvm_i210(struct e1000_hw *hw)
{
  #line 106 
  igb_release_swfw_sync_i210(hw,(unsigned short)1);
  #line 107 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_acquire_swfw_sync_i210(struct e1000_hw *hw, u16 mask)
{
  #line 119 
  u32 swfw_sync;
  #line 120 
  u32 swmask = (unsigned int)mask;
  #line 121 
  u32 fwmask = (unsigned int)((int)mask << 16);
  #line 122 
  s32 ret_val = 0;
  #line 123 
  s32 i = 0;
  #line 123 
  s32 timeout = 200;
  #line 125 
  while (i < timeout) {
    #line 126 
    if (igb_get_hw_semaphore_i210(hw) != 0) {
      #line 127 
      ret_val = -13;
      #line 128 
      goto out;
    }
    #line 131 
    swfw_sync = igb_rd32(hw,23388U);
    #line 132 
    if (((fwmask | swmask) & swfw_sync) == 0U) 
                                               #line 133 
                                               break;
    #line 136 
    igb_put_hw_semaphore(hw);
    #line 137 
    __const_udelay(21475000UL);
    #line 138 
    i ++;
  }
  #line 141 
  if (i == timeout) {
    {
      #line 142 
      bool branch;
      #line 142 
      struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"igb", .function = (char *)"igb_acquire_swfw_sync_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"Driver can\'t access resource, SW_FW_SYNC timeout.\n", .lineno = (unsigned int)142U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 142 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
      #line 142 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 142 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug438,igb_get_hw_dev(hw),(char *)"Driver can\'t access resource, SW_FW_SYNC timeout.\n");
      }
    }
    #line 143 
    ret_val = -13;
    #line 144 
    goto out;
  }
  #line 147 
  swfw_sync |= swmask;
  {
    #line 149 
    union __anonunion___u_7317 __u;
    #line 148 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 148 
    u8 *hw_addr = (__u.__val);
    #line 148 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 148 
                                           writel(swfw_sync,(void *)(hw_addr + 23388U));
  }
  #line 150 
  igb_put_hw_semaphore(hw);
  #line 151 
  out: 
       #line 151 
  ;
  #line 152 
  return ret_val;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
void igb_release_swfw_sync_i210(struct e1000_hw *hw, u16 mask)
{
  #line 165 
  u32 swfw_sync;
  #line 167 
  while (1) {
    #line 167 
    if (! (igb_get_hw_semaphore_i210(hw) != 0)) 
                                                #line 167 
                                                break;
  }
  #line 170 
  swfw_sync = igb_rd32(hw,23388U);
  #line 171 
  swfw_sync = (unsigned int)(~ ((int)mask)) & swfw_sync;
  {
    #line 173 
    union __anonunion___u_7319 __u;
    #line 172 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 172 
    u8 *hw_addr = (__u.__val);
    #line 172 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 172 
                                           writel(swfw_sync,(void *)(hw_addr + 23388U));
  }
  #line 174 
  igb_put_hw_semaphore(hw);
  #line 175 
  return;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_read_nvm_srrd_i210(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 191 
  u16 i;
  #line 191 
  u16 count;
  #line 190 
  s32 status = 0;
  #line 197 
  i = (unsigned short)0U;
  #line 197 
  while ((int)i < (int)words) {
    {
      #line 198 
      int tmp;
      #line 198 
      if (512 < (int)words - (int)i) 
                                     #line 198 
                                     tmp = 512; else 
                                                     #line 198 
                                                     tmp = (int)words - (int)i;
      #line 198 
      count = (unsigned short)tmp;
      #line 200 
      if ((*(hw->nvm.ops.acquire))(hw) == 0) {
        #line 201 
        status = igb_read_nvm_eerd(hw,(unsigned short)((int)offset),(unsigned short)((int)count),data + (unsigned long)i);
        #line 203 
        (*(hw->nvm.ops.release))(hw);
      }
      else 
           #line 205 
           status = 13;
      #line 208 
      if (status != 0) 
                       #line 209 
                       break;
    }
    #line 197 
    i = (unsigned short)((unsigned int)i + 512U);
  }
  #line 212 
  return status;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_write_nvm_srwr(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 231 
  u32 i;
  #line 231 
  u32 k;
  #line 230 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 231 
  u32 eewr = 0U;
  #line 232 
  u32 attempts = 100000U;
  #line 233 
  s32 ret_val = 0;
  #line 238 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 240 
      bool branch;
      #line 240 
      struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"igb", .function = (char *)"igb_write_nvm_srwr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)240U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 240 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
      #line 240 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 240 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug439,igb_get_hw_dev(hw),(char *)"nvm parameter(s) out of bounds\n");
      }
    }
    #line 241 
    ret_val = -1;
    #line 242 
    goto out;
  }
  #line 245 
  i = 0U;
  #line 245 
  while ((unsigned int)words > i) {
    #line 246 
    eewr = ((((unsigned int)offset + i) << 2) | (unsigned int)((int)*(data + (unsigned long)i) << 16)) | 1U;
    {
      #line 251 
      union __anonunion___u_7321 __u;
      #line 250 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 250 
      u8 *hw_addr = (__u.__val);
      #line 250 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 250 
                                             writel(eewr,(void *)(hw_addr + 73752U));
    }
    #line 252 
    k = 0U;
    #line 252 
    while (k < attempts) {
      {
        #line 253 
        if ((igb_rd32(hw,73752U) & 2U) != 0U) {
          #line 255 
          ret_val = 0;
          #line 256 
          break;
        }
        #line 258 
        __const_udelay(21475UL);
      }
      #line 252 
      k ++;
    }
    #line 261 
    if (ret_val != 0) {
      {
        #line 262 
        bool branch_0;
        #line 262 
        struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"igb", .function = (char *)"igb_write_nvm_srwr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"Shadow RAM write EEWR timed out\n", .lineno = (unsigned int)262U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 262 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
        #line 262 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 262 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug440,igb_get_hw_dev(hw),(char *)"Shadow RAM write EEWR timed out\n");
        }
      }
      #line 263 
      break;
    }
    #line 245 
    i ++;
  }
  #line 267 
  out: 
       #line 267 
  ;
  #line 268 
  return ret_val;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_write_nvm_srwr_i210(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 291 
  u16 i;
  #line 291 
  u16 count;
  #line 290 
  s32 status = 0;
  #line 297 
  i = (unsigned short)0U;
  #line 297 
  while ((int)i < (int)words) {
    {
      #line 298 
      int tmp;
      #line 298 
      if (512 < (int)words - (int)i) 
                                     #line 298 
                                     tmp = 512; else 
                                                     #line 298 
                                                     tmp = (int)words - (int)i;
      #line 298 
      count = (unsigned short)tmp;
      #line 300 
      if ((*(hw->nvm.ops.acquire))(hw) == 0) {
        #line 301 
        status = igb_write_nvm_srwr(hw,(unsigned short)((int)offset),(unsigned short)((int)count),data + (unsigned long)i);
        #line 303 
        (*(hw->nvm.ops.release))(hw);
      }
      else 
           #line 305 
           status = 13;
      #line 308 
      if (status != 0) 
                       #line 309 
                       break;
    }
    #line 297 
    i = (unsigned short)((unsigned int)i + 512U);
  }
  #line 312 
  return status;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_read_invm_word_i210(struct e1000_hw *hw, u8 address, u16 *data)
{
  #line 327 
  u32 invm_dword;
  #line 328 
  u16 i;
  #line 329 
  u8 record_type;
  #line 329 
  u8 word_address;
  #line 326 
  s32 status = -19;
  #line 331 
  i = (unsigned short)0U;
  #line 331 
  while ((unsigned int)i <= 63U) {
    #line 332 
    invm_dword = igb_rd32(hw,(unsigned int)(((int)i + 18504) * 4));
    #line 334 
    record_type = (unsigned char)((unsigned int)((unsigned char)invm_dword) & 7U);
    #line 335 
    if ((unsigned int)record_type == 0U) 
                                         #line 336 
                                         break;
    #line 337 
    if ((unsigned int)record_type == 2U) 
                                         #line 338 
                                         i = (unsigned short)((unsigned int)i + 1U);
    #line 339 
    if ((unsigned int)record_type == 4U) 
                                         #line 340 
                                         i = (unsigned short)((unsigned int)i + 8U);
    #line 341 
    if ((unsigned int)record_type == 1U) {
      #line 342 
      word_address = (unsigned char)((unsigned int)((unsigned char)(invm_dword >> 9)) & 127U);
      #line 343 
      if ((int)word_address == (int)address) {
        #line 344 
        *data = (unsigned short)(invm_dword >> 16);
        {
          #line 345 
          bool branch;
          #line 345 
          struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"igb", .function = (char *)"igb_read_invm_word_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"Read INVM Word 0x%02x = %x\n", .lineno = (unsigned int)345U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 345 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
          #line 345 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 345 
            ;
            #line 345 
            ;
            #line 345 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,igb_get_hw_dev(hw),(char *)"Read INVM Word 0x%02x = %x\n",(int)address,(int)*data);
          }
        }
        #line 347 
        status = 0;
        #line 348 
        break;
      }
    }
    #line 331 
    i = (u16)((int)i + 1);
  }
  #line 352 
  if (status != 0) {
    #line 353 
    bool branch_0;
    #line 353 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"igb", .function = (char *)"igb_read_invm_word_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"Requested word 0x%02x not found in OTP\n", .lineno = (unsigned int)353U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 353 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 353 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 353 
      ;
      #line 353 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,igb_get_hw_dev(hw),(char *)"Requested word 0x%02x not found in OTP\n",(int)address);
    }
  }
  #line 354 
  return status;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_read_invm_i210(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 368 
  s32 ret_val = 0;
  #line 371 
  switch ((int)offset) {
    #line 372 
    case 0: 
            #line 372 
    ;
    #line 373 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    #line 375 
    ret_val = igb_read_invm_word_i210(hw,
                              (unsigned char)((int)((unsigned int)((unsigned char)offset) + 1U)),
                              data + 1U) | ret_val;
    #line 377 
    ret_val = igb_read_invm_word_i210(hw,
                                (unsigned char)((int)((unsigned int)((unsigned char)offset) + 2U)),
                                data + 2U) | ret_val;
    #line 378 
    if (ret_val != 0) {
      #line 379 
      bool branch;
      #line 379 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"igb", .function = (char *)"igb_read_invm_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"MAC Addr not found in iNVM\n", .lineno = (unsigned int)379U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 379 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 379 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 379 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,igb_get_hw_dev(hw),(char *)"MAC Addr not found in iNVM\n");
      }
    }
    #line 380 
    break;
    #line 381 
    case 15: 
             #line 381 
    ;
    #line 382 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    #line 383 
    if (ret_val != 0) {
      #line 384 
      *data = (unsigned short)29251U;
      #line 385 
      ret_val = 0;
    }
    #line 387 
    break;
    #line 388 
    case 19: 
             #line 388 
    ;
    #line 389 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    #line 390 
    if (ret_val != 0) {
      #line 391 
      *data = (unsigned short)193U;
      #line 392 
      ret_val = 0;
    }
    #line 394 
    break;
    #line 395 
    case 28: 
             #line 395 
    ;
    #line 396 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    #line 397 
    if (ret_val != 0) {
      #line 398 
      *data = (unsigned short)388U;
      #line 399 
      ret_val = 0;
    }
    #line 401 
    break;
    #line 402 
    case 31: 
             #line 402 
    ;
    #line 403 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    #line 404 
    if (ret_val != 0) {
      #line 405 
      *data = (unsigned short)8204U;
      #line 406 
      ret_val = 0;
    }
    #line 408 
    break;
    #line 409 
    case 4: 
            #line 409 
    ;
    #line 410 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    #line 411 
    if (ret_val != 0) {
      #line 412 
      *data = (unsigned short)65535U;
      #line 413 
      ret_val = 0;
    }
    #line 415 
    break;
    #line 416 
    case 11: 
             #line 416 
    ;
    #line 417 
    *data = hw->subsystem_device_id;
    #line 418 
    break;
    #line 419 
    case 12: 
             #line 419 
    ;
    #line 420 
    *data = hw->subsystem_vendor_id;
    #line 421 
    break;
    #line 422 
    case 13: 
             #line 422 
    ;
    #line 423 
    *data = hw->device_id;
    #line 424 
    break;
    #line 425 
    case 14: 
             #line 425 
    ;
    #line 426 
    *data = hw->vendor_id;
    #line 427 
    break;
    #line 428 
    default: 
             #line 428 
    ;
    {
      #line 429 
      bool branch_0;
      #line 429 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igb", .function = (char *)"igb_read_invm_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"NVM word 0x%02x is not mapped.\n", .lineno = (unsigned int)429U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 429 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 429 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 429 
        ;
        #line 429 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,igb_get_hw_dev(hw),(char *)"NVM word 0x%02x is not mapped.\n",(int)offset);
      }
    }
    #line 430 
    *data = (unsigned short)65535U;
    #line 431 
    break;
  }
  #line 433 
  return ret_val;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_read_invm_version(struct e1000_hw *hw, struct e1000_fw_version *invm_ver)
{
  #line 451 
  u32 buffer[64U];
  #line 445 
  u32 *record = (u32 *)0U;
  #line 446 
  u32 *next_record = (u32 *)0U;
  #line 447 
  u32 i = 0U;
  #line 448 
  u32 invm_dword = 0U;
  #line 449 
  u32 invm_blocks = 62U;
  #line 452 
  s32 status = -19;
  #line 453 
  u16 version = (unsigned short)0U;
  #line 456 
  i = 0U;
  #line 456 
  while (i <= 63U) {
    #line 457 
    invm_dword = igb_rd32(hw,(i + 18504U) * 4U);
    #line 458 
    buffer[i] = invm_dword;
    #line 456 
    i ++;
  }
  #line 462 
  i = 1U;
  #line 462 
  while (i < invm_blocks) {
    #line 463 
    record = & buffer[invm_blocks - i];
    #line 464 
    next_record = & buffer[(invm_blocks - i) + 1U];
    #line 467 
    if (i == 1U && (*record & 8184U) == 0U) {
      #line 468 
      version = (unsigned short)0U;
      #line 469 
      status = 0;
      #line 470 
      break;
    }
    else 
      #line 473 
      if (i == 1U && (*record & 8380416U) == 0U) {
        #line 475 
        version = (unsigned short)((unsigned int)((unsigned short)(*record >> 3)) & 1023U);
        #line 476 
        status = 0;
        #line 477 
        break;
      }
      else 
        #line 482 
        if ((*record & 8184U) == 0U && (*record & 3U) == 0U || (*record & 3U) != 0U && i != 1U) {
          #line 485 
          version = (unsigned short)((unsigned int)((unsigned short)(*next_record >> 13)) & 1023U);
          #line 487 
          status = 0;
          #line 488 
          break;
        }
        else 
          #line 493 
          if ((*record & 8380416U) == 0U && (*record & 3U) == 0U) {
            #line 495 
            version = (unsigned short)((unsigned int)((unsigned short)(*record >> 3)) & 1023U);
            #line 496 
            status = 0;
            #line 497 
            break;
          }
    #line 462 
    i ++;
  }
  #line 501 
  if (status == 0) {
    #line 502 
    invm_ver->invm_major = (unsigned char)((unsigned int)((unsigned char)((int)version >> 4)) & 63U);
    #line 504 
    invm_ver->invm_minor = (unsigned char)((unsigned int)((unsigned char)version) & 15U);
  }
  #line 507 
  i = 1U;
  #line 507 
  while (i < invm_blocks) {
    #line 508 
    record = & buffer[invm_blocks - i];
    #line 509 
    next_record = & buffer[(invm_blocks - i) + 1U];
    #line 512 
    if (i == 1U && (*record & 528482304U) == 0U) {
      #line 513 
      invm_ver->invm_img_type = (unsigned char)0U;
      #line 514 
      status = 0;
      #line 515 
      break;
    }
    else 
      #line 518 
      if ((*record & 3U) == 0U && (*record & 528482304U) == 0U || (*record & 3U) != 0U && i != 1U) {
        #line 521 
        invm_ver->invm_img_type = (unsigned char)((unsigned int)((unsigned char)(*next_record >> 23)) & 63U);
        #line 523 
        status = 0;
        #line 524 
        break;
      }
    #line 507 
    i ++;
  }
  #line 527 
  return status;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_validate_nvm_checksum_i210(struct e1000_hw *hw)
{
  #line 540 
  s32 (*read_op_ptr)(struct e1000_hw *, u16 , u16 , u16 *);
  #line 539 
  s32 status = 0;
  #line 542 
  if ((*(hw->nvm.ops.acquire))(hw) == 0) {
    #line 548 
    read_op_ptr = hw->nvm.ops.read;
    #line 549 
    hw->nvm.ops.read = & igb_read_nvm_eerd;
    #line 551 
    status = igb_validate_nvm_checksum(hw);
    #line 554 
    hw->nvm.ops.read = read_op_ptr;
    #line 556 
    (*(hw->nvm.ops.release))(hw);
  }
  else 
       #line 558 
       status = 13;
  #line 561 
  return status;
}

#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_update_nvm_checksum_i210(struct e1000_hw *hw)
{
  #line 576 
  u16 i;
  #line 576 
  u16 nvm_data;
  #line 574 
  s32 ret_val = 0;
  #line 575 
  u16 checksum = (unsigned short)0U;
  #line 582 
  ret_val = igb_read_nvm_eerd(hw,(unsigned short)0,(unsigned short)1,& nvm_data);
  #line 583 
  if (ret_val != 0) {
    {
      #line 584 
      bool branch;
      #line 584 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"igb", .function = (char *)"igb_update_nvm_checksum_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"EEPROM read failed\n", .lineno = (unsigned int)584U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 584 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 584 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 584 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,igb_get_hw_dev(hw),(char *)"EEPROM read failed\n");
      }
    }
    #line 585 
    goto out;
  }
  #line 588 
  if ((*(hw->nvm.ops.acquire))(hw) == 0) {
    #line 594 
    i = (unsigned short)0U;
    #line 594 
    while ((unsigned int)i <= 62U) {
      #line 595 
      ret_val = igb_read_nvm_eerd(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
      #line 596 
      if (ret_val != 0) {
        #line 597 
        (*(hw->nvm.ops.release))(hw);
        {
          #line 598 
          bool branch_0;
          #line 598 
          struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"igb", .function = (char *)"igb_update_nvm_checksum_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"NVM Read Error while updating checksum.\n", .lineno = (unsigned int)598U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 598 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
          #line 598 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 598 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,igb_get_hw_dev(hw),(char *)"NVM Read Error while updating checksum.\n");
          }
        }
        #line 599 
        goto out;
      }
      #line 601 
      checksum = (unsigned short)((int)checksum + (int)nvm_data);
      #line 594 
      i = (u16)((int)i + 1);
    }
    #line 603 
    checksum = (unsigned short)(47802U - (unsigned int)checksum);
    #line 604 
    ret_val = igb_write_nvm_srwr(hw,(unsigned short)63,(unsigned short)1,& checksum);
    #line 606 
    if (ret_val != 0) {
      #line 607 
      (*(hw->nvm.ops.release))(hw);
      {
        #line 608 
        bool branch_1;
        #line 608 
        struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"igb", .function = (char *)"igb_update_nvm_checksum_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"NVM Write Error while updating checksum.\n", .lineno = (unsigned int)608U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 608 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
        #line 608 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 608 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,igb_get_hw_dev(hw),(char *)"NVM Write Error while updating checksum.\n");
        }
      }
      #line 609 
      goto out;
    }
    #line 612 
    (*(hw->nvm.ops.release))(hw);
    #line 614 
    ret_val = igb_update_flash_i210(hw);
  }
  else 
       #line 616 
       ret_val = -13;
  #line 618 
  out: 
       #line 618 
  ;
  #line 619 
  return ret_val;
}

#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_pool_flash_update_done_i210(struct e1000_hw *hw)
{
  #line 630 
  u32 i;
  #line 630 
  u32 reg;
  #line 629 
  s32 ret_val = -1;
  #line 632 
  i = 0U;
  #line 632 
  while (i <= 19999U) {
    #line 633 
    reg = igb_rd32(hw,16U);
    #line 634 
    if ((reg & 67108864U) != 0U) {
      #line 635 
      ret_val = 0;
      #line 636 
      break;
    }
    #line 638 
    __const_udelay(21475UL);
    #line 632 
    i ++;
  }
  #line 641 
  return ret_val;
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
bool igb_get_flash_presence_i210(struct e1000_hw *hw)
{
  #line 651 
  u32 eec = 0U;
  #line 652 
  bool ret_val = (_Bool)0;
  #line 654 
  eec = igb_rd32(hw,16U);
  #line 655 
  if ((eec & 524288U) != 0U) 
                             #line 656 
                             ret_val = (_Bool)1;
  #line 658 
  return ret_val;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_update_flash_i210(struct e1000_hw *hw)
{
  #line 669 
  u32 flup;
  #line 668 
  s32 ret_val = 0;
  #line 671 
  ret_val = igb_pool_flash_update_done_i210(hw);
  #line 672 
  if (ret_val == -1) {
    {
      #line 673 
      bool branch;
      #line 673 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"igb", .function = (char *)"igb_update_flash_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"Flash update time out\n", .lineno = (unsigned int)673U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 673 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 673 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 673 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,igb_get_hw_dev(hw),(char *)"Flash update time out\n");
      }
    }
    #line 674 
    goto out;
  }
  #line 677 
  flup = igb_rd32(hw,16U) | 8388608U;
  {
    #line 679 
    union __anonunion___u_7323 __u;
    #line 678 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 678 
    u8 *hw_addr = (__u.__val);
    #line 678 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 678 
                                           writel(flup,(void *)(hw_addr + 16U));
  }
  #line 680 
  ret_val = igb_pool_flash_update_done_i210(hw);
  #line 681 
  if (ret_val != 0) {
    #line 682 
    bool branch_0;
    #line 682 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"igb", .function = (char *)"igb_update_flash_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"Flash update time out\n", .lineno = (unsigned int)682U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 682 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 682 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 682 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,igb_get_hw_dev(hw),(char *)"Flash update time out\n");
    }
  }
  else {
    #line 684 
    bool branch_1;
    #line 684 
    struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"igb", .function = (char *)"igb_update_flash_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"Flash update complete\n", .lineno = (unsigned int)684U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 684 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
    #line 684 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 684 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,igb_get_hw_dev(hw),(char *)"Flash update complete\n");
    }
  }
  #line 686 
  out: 
       #line 686 
  ;
  #line 687 
  return ret_val;
}

#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_valid_led_default_i210(struct e1000_hw *hw, u16 *data)
{
  #line 700 
  s32 ret_val;
  #line 702 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)4,(unsigned short)1,data);
  #line 703 
  if (ret_val != 0) {
    {
      #line 704 
      bool branch;
      #line 704 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"igb", .function = (char *)"igb_valid_led_default_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)704U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 704 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 704 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 704 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
      }
    }
    #line 705 
    goto out;
  }
  #line 708 
  if ((unsigned int)*data + 65535U > 65533U) 
    #line 709 
    switch ((unsigned int)hw->phy.media_type) {
      #line 710 
      case (unsigned int)3: 
                            #line 710 
      ;
      #line 711 
      *data = (unsigned short)280U;
      #line 712 
      break;
      #line 713 
      case (unsigned int)1: 
                            #line 713 
      ;
      #line 714 
      default: 
               #line 714 
      ;
      #line 715 
      *data = (unsigned short)2073U;
      #line 716 
      break;
    }
  #line 719 
  out: 
       #line 719 
  ;
  #line 720 
  return ret_val;
}

#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 __igb_access_xmdio_reg(struct e1000_hw *hw, u16 address, u8 dev_addr, u16 *data, bool read)
{
  #line 734 
  s32 ret_val = 0;
  #line 736 
  ret_val = (*(hw->phy.ops.write_reg))(hw,13U,(unsigned short)((int)dev_addr));
  #line 737 
  if (ret_val != 0) 
                    #line 738 
                    return ret_val;
  #line 740 
  ret_val = (*(hw->phy.ops.write_reg))(hw,14U,(unsigned short)((int)address));
  #line 741 
  if (ret_val != 0) 
                    #line 742 
                    return ret_val;
  #line 744 
  ret_val = (*(hw->phy.ops.write_reg))(hw,13U,(unsigned short)((int)((unsigned short)((int)dev_addr | 16384))));
  #line 746 
  if (ret_val != 0) 
                    #line 747 
                    return ret_val;
  #line 749 
  if ((int)read != 0) 
                      #line 750 
                      ret_val = (*(hw->phy.ops.read_reg))(hw,14U,data); else 
                                                                    #line 752 
                                                                    ret_val = (*(hw->phy.ops.write_reg))(hw,14U,(unsigned short)((int)*data));
  #line 753 
  if (ret_val != 0) 
                    #line 754 
                    return ret_val;
  #line 757 
  ret_val = (*(hw->phy.ops.write_reg))(hw,13U,(unsigned short)0);
  #line 758 
  if (ret_val != 0) 
                    #line 759 
                    return ret_val;
  #line 761 
  return ret_val;
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_read_xmdio_reg(struct e1000_hw *hw, u16 addr, u8 dev_addr, u16 *data)
{
  #line 773 
  return __igb_access_xmdio_reg(hw,(unsigned short)((int)addr),
                             (unsigned char)((int)dev_addr),data,(_Bool)1);
}

#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_write_xmdio_reg(struct e1000_hw *hw, u16 addr, u8 dev_addr, u16 data)
{
  #line 785 
  return __igb_access_xmdio_reg(hw,(unsigned short)((int)addr),
                             (unsigned char)((int)dev_addr),& data,(_Bool)0);
}

#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_init_nvm_params_i210(struct e1000_hw *hw)
{
  #line 794 
  s32 ret_val = 0;
  #line 795 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 797 
  nvm->ops.acquire = & igb_acquire_nvm_i210;
  #line 798 
  nvm->ops.release = & igb_release_nvm_i210;
  #line 799 
  nvm->ops.valid_led_default = & igb_valid_led_default_i210;
  #line 802 
  if ((int)igb_get_flash_presence_i210(hw) != 0) {
    #line 803 
    hw->nvm.type = e1000_nvm_flash_hw;
    #line 804 
    nvm->ops.read = & igb_read_nvm_srrd_i210;
    #line 805 
    nvm->ops.write = & igb_write_nvm_srwr_i210;
    #line 806 
    nvm->ops.validate = & igb_validate_nvm_checksum_i210;
    #line 807 
    nvm->ops.update = & igb_update_nvm_checksum_i210;
  }
  else {
    #line 809 
    hw->nvm.type = e1000_nvm_invm;
    #line 810 
    nvm->ops.read = & igb_read_invm_i210;
    #line 811 
    nvm->ops.write = (s32 (*)(struct e1000_hw *, u16 , u16 , u16 *))0;
    #line 812 
    nvm->ops.validate = (s32 (*)(struct e1000_hw *))0;
    #line 813 
    nvm->ops.update = (s32 (*)(struct e1000_hw *))0;
  }
  #line 815 
  return ret_val;
}

#line 825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_pll_workaround_i210(struct e1000_hw *hw)
{
  #line 827 
  s32 ret_val;
  #line 828 
  u32 wuc;
  #line 828 
  u32 mdicnfg;
  #line 828 
  u32 ctrl;
  #line 828 
  u32 ctrl_ext;
  #line 828 
  u32 reg_val;
  #line 829 
  u16 nvm_word;
  #line 829 
  u16 phy_word;
  #line 829 
  u16 pci_word;
  #line 829 
  u16 tmp_nvm;
  #line 830 
  int i;
  #line 833 
  wuc = igb_rd32(hw,22528U);
  #line 834 
  mdicnfg = igb_rd32(hw,3588U);
  #line 835 
  reg_val = mdicnfg & 2147483647U;
  {
    #line 837 
    union __anonunion___u_7325 __u;
    #line 836 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 836 
    u8 *hw_addr = (__u.__val);
    #line 836 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 836 
                                           writel(reg_val,(void *)(hw_addr + 3588U));
  }
  #line 839 
  ret_val = igb_read_invm_word_i210(hw,(unsigned char)10,& nvm_word);
  #line 841 
  if (ret_val != 0) 
                    #line 842 
                    nvm_word = (unsigned short)8239U;
  #line 843 
  tmp_nvm = (unsigned short)((unsigned int)nvm_word | 16U);
  #line 844 
  igb_write_phy_reg_82580(hw,22U,(unsigned short)252);
  #line 845 
  phy_word = (unsigned short)255U;
  #line 846 
  i = 0;
  #line 846 
  while (i <= 4) {
    #line 848 
    igb_read_phy_reg_82580(hw,14U,& phy_word);
    #line 849 
    if (((int)phy_word & 255) != 255) {
      #line 851 
      ret_val = 0;
      #line 852 
      break;
    }
    else 
         #line 854 
         ret_val = -2;
    #line 857 
    ctrl = igb_rd32(hw,0U);
    {
      #line 859 
      union __anonunion___u_7327 __u_0;
      #line 858 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 858 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 858 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                               #line 858 
                                               writel(ctrl | 2147483648U,(void *)hw_addr_0);
    }
    #line 860 
    ctrl_ext = igb_rd32(hw,24U);
    #line 861 
    ctrl_ext |= 1310720U;
    {
      #line 863 
      union __anonunion___u_7329 __u_1;
      #line 862 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 862 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 862 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                               #line 862 
                                               writel(ctrl_ext,(void *)(hw_addr_1 + 24U));
    }
    {
      #line 865 
      union __anonunion___u_7331 __u_2;
      #line 864 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 864 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 864 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                               #line 864 
                                               writel(0U,(void *)(hw_addr_2 + 22528U));
    }
    #line 865 
    reg_val = (unsigned int)(((int)tmp_nvm << 16) | 160);
    {
      #line 867 
      union __anonunion___u_7333 __u_3;
      #line 866 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 866 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 866 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
                                               #line 866 
                                               writel(reg_val,(void *)(hw_addr_3 + 73764U));
    }
    #line 868 
    igb_read_pci_cfg(hw,68U,& pci_word);
    #line 869 
    pci_word = (unsigned short)((unsigned int)pci_word | 3U);
    #line 870 
    igb_write_pci_cfg(hw,68U,& pci_word);
    #line 871 
    usleep_range(1000UL,2000UL);
    #line 872 
    pci_word = (unsigned short)((unsigned int)pci_word & 65532U);
    #line 873 
    igb_write_pci_cfg(hw,68U,& pci_word);
    #line 874 
    reg_val = (unsigned int)(((int)nvm_word << 16) | 160);
    {
      #line 876 
      union __anonunion___u_7335 __u_4;
      #line 875 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 875 
      u8 *hw_addr_4 = (__u_4.__val);
      #line 875 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
                                               #line 875 
                                               writel(reg_val,(void *)(hw_addr_4 + 73764U));
    }
    {
      #line 879 
      union __anonunion___u_7337 __u_5;
      #line 878 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 878 
      u8 *hw_addr_5 = (__u_5.__val);
      #line 878 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
                                               #line 878 
                                               writel(wuc,(void *)(hw_addr_5 + 22528U));
    }
    #line 846 
    i ++;
  }
  #line 880 
  igb_write_phy_reg_82580(hw,22U,(unsigned short)0);
  {
    #line 883 
    union __anonunion___u_7339 __u_6;
    #line 882 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
    #line 882 
    u8 *hw_addr_6 = (__u_6.__val);
    #line 882 
    if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
                                             #line 882 
                                             writel(mdicnfg,(void *)(hw_addr_6 + 3588U));
  }
  #line 883 
  return ret_val;
}

#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_get_cfg_done_i210(struct e1000_hw *hw)
{
  #line 898 
  s32 timeout = 100;
  #line 899 
  u32 mask = 262144U;
  #line 901 
  while (timeout != 0) {
    #line 902 
    ;
    #line 902 
    if ((igb_rd32(hw,73776U) & mask) != 0U) 
                                            #line 903 
                                            break;
    #line 904 
    usleep_range(1000UL,2000UL);
    #line 905 
    timeout --;
  }
  #line 907 
  if (timeout == 0) {
    #line 908 
    bool branch;
    #line 908 
    struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"igb", .function = (char *)"igb_get_cfg_done_i210", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = (char *)"MNG configuration cycle has not completed.\n", .lineno = (unsigned int)908U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 908 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
    #line 908 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 908 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,igb_get_hw_dev(hw),(char *)"MNG configuration cycle has not completed.\n");
    }
  }
  #line 910 
  return 0;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
#line 761 
static s32 igb_set_default_fc(struct e1000_hw *hw);
#line 15 
#line 726 
static s32 igb_set_fc_watermarks(struct e1000_hw *hw);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_get_bus_info_pcie(struct e1000_hw *hw)
{
  #line 28 
  s32 ret_val;
  #line 29 
  u32 reg;
  #line 30 
  u16 pcie_link_status;
  #line 27 
  struct e1000_bus_info *bus = & hw->bus;
  #line 32 
  bus->type = e1000_bus_type_pci_express;
  #line 34 
  ret_val = igb_read_pcie_cap_reg(hw,18U,& pcie_link_status);
  #line 37 
  if (ret_val != 0) {
    #line 38 
    bus->width = e1000_bus_width_unknown;
    #line 39 
    bus->speed = e1000_bus_speed_unknown;
  }
  else {
    #line 41 
    switch ((int)pcie_link_status & 15) {
      #line 42 
      case 1: 
              #line 42 
      ;
      #line 43 
      bus->speed = e1000_bus_speed_2500;
      #line 44 
      break;
      #line 45 
      case 2: 
              #line 45 
      ;
      #line 46 
      bus->speed = e1000_bus_speed_5000;
      #line 47 
      break;
      #line 48 
      default: 
               #line 48 
      ;
      #line 49 
      bus->speed = e1000_bus_speed_unknown;
      #line 50 
      break;
    }
    #line 53 
    bus->width = (enum e1000_bus_width)(((int)pcie_link_status >> 4) & 63);
  }
  #line 58 
  reg = igb_rd32(hw,8U);
  #line 59 
  bus->func = (unsigned short)((unsigned int)((unsigned short)(reg >> 2)) & 3U);
  #line 61 
  return 0;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_clear_vfta(struct e1000_hw *hw)
{
  #line 73 
  u32 offset;
  #line 75 
  offset = 128U;
  #line 75 
  while (1) {
    #line 75 
    u32 tmp;
    #line 75 
    tmp = offset;
    #line 75 
    offset --;
    #line 75 
    ;
    #line 75 
    if (! (tmp != 0U)) 
                       #line 75 
                       break;
    #line 76 
    (*(hw->mac.ops.write_vfta))(hw,offset,0U);
  }
  #line 77 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_write_vfta(struct e1000_hw *hw, u32 offset, u32 value)
{
  #line 90 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  {
    #line 93 
    union __anonunion___u_8072 __u;
    #line 92 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 92 
    u8 *hw_addr = (__u.__val);
    #line 92 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 92 
                                           writel(value,(void *)(hw_addr + (unsigned long)((offset << 2) + 22016U)));
  }
  #line 93 
  igb_rd32(hw,8U);
  #line 95 
  *(adapter->shadow_vfta + (unsigned long)offset) = value;
  #line 96 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_init_rx_addrs(struct e1000_hw *hw, u16 rar_count)
{
  #line 109 
  u32 i;
  #line 110 
  u8 mac_addr[6U] = {(unsigned char)0U};
  {
    #line 113 
    bool branch;
    #line 113 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igb", .function = (char *)"igb_init_rx_addrs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Programming MAC Address into RAR[0]\n", .lineno = (unsigned int)113U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 113 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 113 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 113 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,igb_get_hw_dev(hw),(char *)"Programming MAC Address into RAR[0]\n");
    }
  }
  #line 115 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& hw->mac.addr),0U);
  {
    #line 118 
    bool branch_0;
    #line 118 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"igb", .function = (char *)"igb_init_rx_addrs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Clearing RAR[1-%u]\n", .lineno = (unsigned int)118U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 118 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 118 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 118 
      ;
      #line 118 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,igb_get_hw_dev(hw),(char *)"Clearing RAR[1-%u]\n",(int)rar_count + -1);
    }
  }
  #line 119 
  i = 1U;
  #line 119 
  while ((unsigned int)rar_count > i) {
    #line 120 
    (*(hw->mac.ops.rar_set))(hw,(u8 *)(& mac_addr),i);
    #line 119 
    i ++;
  }
  #line 121 
  return;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
static s32 igb_find_vlvf_slot(struct e1000_hw *hw, u32 vlan, bool vlvf_bypass)
{
  #line 134 
  s32 regindex;
  #line 134 
  s32 first_empty_slot;
  #line 135 
  u32 bits;
  #line 160 
  int tmp_0;
  #line 138 
  if (vlan == 0U) 
                  #line 139 
                  return 0;
  #line 145 
  if ((int)vlvf_bypass != 0) 
                             #line 145 
                             first_empty_slot = -17; else 
                                                          #line 145 
                                                          first_empty_slot = 0;
  #line 152 
  regindex = 32;
  #line 152 
  while (1) {
    #line 152 
    regindex --;
    #line 152 
    if (! (regindex > 0)) 
                          #line 152 
                          break;
    {
      #line 153 
      bits = igb_rd32(hw,(unsigned int)((regindex + 5952) * 4)) & 4095U;
      #line 154 
      if (bits == vlan) 
                        #line 155 
                        return regindex;
      #line 156 
      if (first_empty_slot == 0 && bits == 0U) 
                                               #line 157 
                                               first_empty_slot = regindex;
    }
  }
  #line 160 
  tmp_0 = first_empty_slot != 0;
  #line 160 
  if (! tmp_0) 
               #line 160 
               tmp_0 = -17;
  #line 160 
  return tmp_0;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_vfta_set(struct e1000_hw *hw, u32 vlan, u32 vind, bool vlan_on, bool vlvf_bypass)
{
  #line 177 
  u32 regidx;
  #line 177 
  u32 vfta_delta;
  #line 177 
  u32 vfta;
  #line 177 
  u32 bits;
  #line 178 
  s32 vlvf_index;
  #line 202 
  u32 tmp;
  #line 176 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  #line 180 
  if (vlan > 4095U || vind > 7U) 
                                 #line 181 
                                 return -4;
  #line 194 
  regidx = vlan / 32U;
  #line 195 
  vfta_delta = (unsigned int)(1UL << (vlan & 31U));
  #line 196 
  vfta = *(adapter->shadow_vfta + (unsigned long)regidx);
  #line 202 
  if ((int)vlan_on != 0) 
                         #line 202 
                         tmp = ~ vfta; else 
                                            #line 202 
                                            tmp = vfta;
  #line 202 
  vfta_delta = tmp & vfta_delta;
  #line 203 
  vfta ^= vfta_delta;
  #line 213 
  if (adapter->vfs_allocated_count == 0U) 
                                          #line 214 
                                          goto vfta_update;
  #line 216 
  vlvf_index = igb_find_vlvf_slot(hw,vlan,(_Bool)((bool)((int)vlvf_bypass) != 0));
  #line 217 
  if (vlvf_index < 0) {
    #line 218 
    if ((int)vlvf_bypass != 0) 
                               #line 219 
                               goto vfta_update;
    #line 220 
    return vlvf_index;
  }
  #line 223 
  bits = igb_rd32(hw,(unsigned int)((vlvf_index + 5952) * 4));
  #line 226 
  bits = (unsigned int)(1UL << (vind + 12U)) | bits;
  #line 227 
  if ((int)vlan_on != 0) 
                         #line 228 
                         goto vlvf_update;
  #line 231 
  bits = (unsigned int)(1UL << (vind + 12U)) ^ bits;
  #line 233 
  if ((bits & 1044480U) == 0U) {
    #line 238 
    if (vfta_delta != 0U) 
                          #line 239 
                          (*(hw->mac.ops.write_vfta))(hw,regidx,vfta);
    {
      #line 243 
      union __anonunion___u_8074 __u;
      #line 242 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 242 
      u8 *hw_addr = (__u.__val);
      #line 242 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 242 
                                             writel(0U,(void *)(hw_addr + (unsigned long)((vlvf_index + 5952) * 4)));
    }
    #line 244 
    return 0;
  }
  #line 261 
  vfta_delta = 0U;
  #line 263 
  vlvf_update: 
               #line 263 
  ;
  {
    #line 266 
    union __anonunion___u_8076 __u_0;
    #line 265 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 265 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 265 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 265 
                                             writel((bits | vlan) | 2147483648U,(void *)(hw_addr_0 + (unsigned long)((vlvf_index + 5952) * 4)));
  }
  #line 267 
  vfta_update: 
               #line 267 
  ;
  #line 269 
  if (vfta_delta != 0U) 
                        #line 270 
                        (*(hw->mac.ops.write_vfta))(hw,regidx,vfta);
  #line 272 
  return 0;
}

#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_check_alt_mac_addr(struct e1000_hw *hw)
{
  #line 288 
  u32 i;
  #line 290 
  u16 offset;
  #line 290 
  u16 nvm_alt_mac_addr_offset;
  #line 290 
  u16 nvm_data;
  #line 291 
  u8 alt_mac_addr[6U];
  #line 289 
  s32 ret_val = 0;
  #line 296 
  if (hw->mac.type > (unsigned int)e1000_82576) 
                                                #line 297 
                                                goto out;
  #line 299 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)55,(unsigned short)1,& nvm_alt_mac_addr_offset);
  #line 301 
  if (ret_val != 0) {
    {
      #line 302 
      bool branch;
      #line 302 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"igb", .function = (char *)"igb_check_alt_mac_addr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)302U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 302 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 302 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 302 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
      }
    }
    #line 303 
    goto out;
  }
  #line 306 
  if ((unsigned int)nvm_alt_mac_addr_offset + 65535U > 65533U) 
                                                               #line 309 
                                                               goto out;
  #line 311 
  if ((unsigned int)hw->bus.func == 1U) 
                                        #line 312 
                                        nvm_alt_mac_addr_offset = (unsigned short)((unsigned int)nvm_alt_mac_addr_offset + 3U);
  #line 313 
  if ((unsigned int)hw->bus.func == 2U) 
                                        #line 314 
                                        nvm_alt_mac_addr_offset = (unsigned short)((unsigned int)nvm_alt_mac_addr_offset + 6U);
  #line 316 
  if ((unsigned int)hw->bus.func == 3U) 
                                        #line 317 
                                        nvm_alt_mac_addr_offset = (unsigned short)((unsigned int)nvm_alt_mac_addr_offset + 9U);
  #line 318 
  i = 0U;
  #line 318 
  while (i <= 5U) {
    #line 319 
    offset = (unsigned short)((int)((unsigned short)(i >> 1)) + (int)nvm_alt_mac_addr_offset);
    #line 320 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)offset),(unsigned short)1,& nvm_data);
    #line 321 
    if (ret_val != 0) {
      {
        #line 322 
        bool branch_0;
        #line 322 
        struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"igb", .function = (char *)"igb_check_alt_mac_addr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)322U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 322 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
        #line 322 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 322 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
        }
      }
      #line 323 
      goto out;
    }
    #line 326 
    alt_mac_addr[i] = (unsigned char)nvm_data;
    #line 327 
    alt_mac_addr[i + 1U] = (unsigned char)((int)nvm_data >> 8);
    #line 318 
    i += 2U;
  }
  #line 331 
  if ((int)is_multicast_ether_addr((u8 *)(& alt_mac_addr)) != 0) {
    {
      #line 332 
      bool branch_1;
      #line 332 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"igb", .function = (char *)"igb_check_alt_mac_addr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Ignoring Alternate Mac Address with MC bit set\n", .lineno = (unsigned int)332U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 332 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 332 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 332 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,igb_get_hw_dev(hw),(char *)"Ignoring Alternate Mac Address with MC bit set\n");
      }
    }
    #line 333 
    goto out;
  }
  #line 340 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& alt_mac_addr),0U);
  #line 342 
  out: 
       #line 342 
  ;
  #line 343 
  return ret_val;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_rar_set(struct e1000_hw *hw, u8 *addr, u32 index)
{
  #line 357 
  u32 rar_low;
  #line 357 
  u32 rar_high;
  #line 362 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  #line 366 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  #line 369 
  if (rar_low != 0U || rar_high != 0U) 
                                       #line 370 
                                       rar_high |= 2147483648U;
  {
    #line 377 
    union __anonunion___u_8078 __u;
    #line 376 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 376 
    u8 *hw_addr = (__u.__val);
    #line 376 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      #line 376 
      u32 tmp_0;
      #line 376 
      if (index <= 15U) 
                        #line 376 
                        tmp_0 = (index + 2688U) * 8U; else 
                                                           #line 376 
                                                           tmp_0 = (index + 2700U) * 8U;
      #line 376 
      ;
      #line 376 
      ;
      #line 376 
      writel(rar_low,(void *)(hw_addr + (unsigned long)tmp_0));
    }
  }
  #line 377 
  igb_rd32(hw,8U);
  {
    #line 379 
    union __anonunion___u_8080 __u_0;
    #line 378 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 378 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 378 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      #line 378 
      u32 tmp_2;
      #line 378 
      if (index <= 15U) 
                        #line 378 
                        tmp_2 = index * 8U + 21508U; else 
                                                          #line 378 
                                                          tmp_2 = (index + 4294967280U) * 8U + 21732U;
      #line 378 
      ;
      #line 378 
      ;
      #line 378 
      writel(rar_high,(void *)(hw_addr_0 + (unsigned long)tmp_2));
    }
  }
  #line 379 
  igb_rd32(hw,8U);
  #line 380 
  return;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_mta_set(struct e1000_hw *hw, u32 hash_value)
{
  #line 394 
  u32 hash_bit;
  #line 394 
  u32 hash_reg;
  #line 394 
  u32 mta;
  #line 405 
  hash_reg = (hash_value >> 5) & (unsigned int)((int)hw->mac.mta_reg_count + -1);
  #line 406 
  hash_bit = hash_value & 31U;
  #line 408 
  mta = igb_rd32(hw,(hash_reg << 2) + 20992U);
  #line 410 
  mta = (unsigned int)(1UL << hash_bit) | mta;
  {
    #line 413 
    union __anonunion___u_8082 __u;
    #line 412 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 412 
    u8 *hw_addr = (__u.__val);
    #line 412 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 412 
                                           writel(mta,(void *)(hw_addr + (unsigned long)((hash_reg << 2) + 20992U)));
  }
  #line 413 
  igb_rd32(hw,8U);
  #line 414 
  return;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
static u32 igb_hash_mc_addr(struct e1000_hw *hw, u8 *mc_addr)
{
  #line 427 
  u32 hash_value;
  #line 427 
  u32 hash_mask;
  #line 428 
  u8 bit_shift = (unsigned char)0U;
  #line 431 
  hash_mask = (unsigned int)((int)hw->mac.mta_reg_count * 32 + -1);
  #line 436 
  while (hash_mask >> (int)bit_shift != 255U) 
                                              #line 437 
                                              bit_shift = (u8)((int)bit_shift + 1);
  #line 464 
  switch (hw->mac.mc_filter_type) {
    #line 465 
    default: 
             #line 465 
    ;
    #line 466 
    case (u32)0: 
                 #line 466 
    ;
    #line 467 
    break;
    #line 468 
    case (u32)1: 
                 #line 468 
    ;
    #line 469 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 1U);
    #line 470 
    break;
    #line 471 
    case (u32)2: 
                 #line 471 
    ;
    #line 472 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 2U);
    #line 473 
    break;
    #line 474 
    case (u32)3: 
                 #line 474 
    ;
    #line 475 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 4U);
    #line 476 
    break;
  }
  #line 479 
  hash_value = (unsigned int)(((int)*(mc_addr + 4U) >> (8 - (int)bit_shift)) | ((int)*(mc_addr + 5U) << (int)bit_shift)) & hash_mask;
  #line 482 
  return hash_value;
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_update_mc_addr_list(struct e1000_hw *hw, u8 *mc_addr_list, u32 mc_addr_count)
{
  #line 497 
  u32 hash_value;
  #line 497 
  u32 hash_bit;
  #line 497 
  u32 hash_reg;
  #line 498 
  int i;
  #line 501 
  memset((void *)(& hw->mac.mta_shadow),0,512UL);
  #line 504 
  i = 0;
  #line 504 
  while ((unsigned int)i < mc_addr_count) {
    #line 505 
    hash_value = igb_hash_mc_addr(hw,mc_addr_list);
    #line 507 
    hash_reg = (hash_value >> 5) & (unsigned int)((int)hw->mac.mta_reg_count + -1);
    #line 508 
    hash_bit = hash_value & 31U;
    #line 510 
    hw->mac.mta_shadow[hash_reg] |= (unsigned int)(1UL << hash_bit);
    #line 511 
    mc_addr_list += 6U;
    #line 504 
    i ++;
  }
  #line 515 
  i = (int)hw->mac.mta_reg_count + -1;
  #line 515 
  while (i >= 0) {
    {
      #line 517 
      union __anonunion___u_8084 __u;
      #line 516 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 516 
      u8 *hw_addr = (__u.__val);
      #line 516 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 516 
                                             writel(hw->mac.mta_shadow[i],(void *)(hw_addr + (unsigned long)((i << 2) + 20992)));
    }
    #line 515 
    i --;
  }
  #line 517 
  igb_rd32(hw,8U);
  #line 518 
  return;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_clear_hw_cntrs_base(struct e1000_hw *hw)
{
  #line 528 
  igb_rd32(hw,16384U);
  #line 529 
  igb_rd32(hw,16392U);
  #line 530 
  igb_rd32(hw,16400U);
  #line 531 
  igb_rd32(hw,16404U);
  #line 532 
  igb_rd32(hw,16408U);
  #line 533 
  igb_rd32(hw,16412U);
  #line 534 
  igb_rd32(hw,16416U);
  #line 535 
  igb_rd32(hw,16424U);
  #line 536 
  igb_rd32(hw,16432U);
  #line 537 
  igb_rd32(hw,16440U);
  #line 538 
  igb_rd32(hw,16448U);
  #line 539 
  igb_rd32(hw,16456U);
  #line 540 
  igb_rd32(hw,16460U);
  #line 541 
  igb_rd32(hw,16464U);
  #line 542 
  igb_rd32(hw,16468U);
  #line 543 
  igb_rd32(hw,16472U);
  #line 544 
  igb_rd32(hw,16500U);
  #line 545 
  igb_rd32(hw,16504U);
  #line 546 
  igb_rd32(hw,16508U);
  #line 547 
  igb_rd32(hw,16512U);
  #line 548 
  igb_rd32(hw,16520U);
  #line 549 
  igb_rd32(hw,16524U);
  #line 550 
  igb_rd32(hw,16528U);
  #line 551 
  igb_rd32(hw,16532U);
  #line 552 
  igb_rd32(hw,16544U);
  #line 553 
  igb_rd32(hw,16548U);
  #line 554 
  igb_rd32(hw,16552U);
  #line 555 
  igb_rd32(hw,16556U);
  #line 556 
  igb_rd32(hw,16560U);
  #line 557 
  igb_rd32(hw,16576U);
  #line 558 
  igb_rd32(hw,16580U);
  #line 559 
  igb_rd32(hw,16584U);
  #line 560 
  igb_rd32(hw,16588U);
  #line 561 
  igb_rd32(hw,16592U);
  #line 562 
  igb_rd32(hw,16596U);
  #line 563 
  igb_rd32(hw,16624U);
  #line 564 
  igb_rd32(hw,16628U);
  #line 565 
  return;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_check_for_copper_link(struct e1000_hw *hw)
{
  #line 578 
  s32 ret_val;
  #line 579 
  bool link;
  #line 577 
  struct e1000_mac_info *mac = & hw->mac;
  #line 586 
  if (! mac->get_link_status) {
    #line 587 
    ret_val = 0;
    #line 588 
    goto out;
  }
  #line 595 
  ret_val = igb_phy_has_link(hw,1U,0U,& link);
  #line 596 
  if (ret_val != 0) 
                    #line 597 
                    goto out;
  #line 599 
  if (! link) 
              #line 600 
              goto out;
  #line 602 
  mac->get_link_status = (_Bool)0;
  #line 607 
  igb_check_downshift(hw);
  #line 612 
  if (! mac->autoneg) {
    #line 613 
    ret_val = -3;
    #line 614 
    goto out;
  }
  #line 621 
  igb_config_collision_dist(hw);
  #line 628 
  ret_val = igb_config_fc_after_link_up(hw);
  #line 629 
  if (ret_val != 0) {
    #line 630 
    bool branch;
    #line 630 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"igb", .function = (char *)"igb_check_for_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Error configuring flow control\n", .lineno = (unsigned int)630U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 630 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 630 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 630 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,igb_get_hw_dev(hw),(char *)"Error configuring flow control\n");
    }
  }
  #line 632 
  out: 
       #line 632 
  ;
  #line 633 
  return ret_val;
}

#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_setup_link(struct e1000_hw *hw)
{
  #line 648 
  s32 ret_val = 0;
  #line 653 
  if (igb_check_reset_block(hw) != 0) 
                                      #line 654 
                                      goto out;
  #line 659 
  if (hw->fc.requested_mode == (unsigned int)e1000_fc_default) {
    #line 660 
    ret_val = igb_set_default_fc(hw);
    #line 661 
    if (ret_val != 0) 
                      #line 662 
                      goto out;
  }
  #line 669 
  hw->fc.current_mode = hw->fc.requested_mode;
  {
    #line 671 
    bool branch;
    #line 671 
    struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"igb", .function = (char *)"igb_setup_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"After fix-ups FlowControl is now = %x\n", .lineno = (unsigned int)671U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 671 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
    #line 671 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 671 
      ;
      #line 671 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,igb_get_hw_dev(hw),(char *)"After fix-ups FlowControl is now = %x\n",(unsigned int)hw->fc.current_mode);
    }
  }
  #line 674 
  ret_val = (*(hw->mac.ops.setup_physical_interface))(hw);
  #line 675 
  if (ret_val != 0) 
                    #line 676 
                    goto out;
  {
    #line 683 
    bool branch_0;
    #line 683 
    struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"igb", .function = (char *)"igb_setup_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Initializing the Flow Control address, type and timer regs\n", .lineno = (unsigned int)683U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 683 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
    #line 683 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 683 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,igb_get_hw_dev(hw),(char *)"Initializing the Flow Control address, type and timer regs\n");
    }
  }
  {
    #line 685 
    union __anonunion___u_8086 __u;
    #line 684 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 684 
    u8 *hw_addr = (__u.__val);
    #line 684 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 684 
                                           writel(34824U,(void *)(hw_addr + 48U));
  }
  {
    #line 686 
    union __anonunion___u_8088 __u_0;
    #line 685 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 685 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 685 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 685 
                                             writel(256U,(void *)(hw_addr_0 + 44U));
  }
  {
    #line 687 
    union __anonunion___u_8090 __u_1;
    #line 686 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 686 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 686 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
                                             #line 686 
                                             writel(12746753U,(void *)(hw_addr_1 + 40U));
  }
  {
    #line 689 
    union __anonunion___u_8092 __u_2;
    #line 688 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 688 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 688 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
                                             #line 688 
                                             writel((unsigned int)hw->fc.pause_time,(void *)(hw_addr_2 + 368U));
  }
  #line 690 
  ret_val = igb_set_fc_watermarks(hw);
  #line 692 
  out: 
       #line 692 
  ;
  #line 694 
  return ret_val;
}

#line 705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_config_collision_dist(struct e1000_hw *hw)
{
  #line 707 
  u32 tctl;
  #line 709 
  tctl = igb_rd32(hw,1024U);
  #line 711 
  tctl &= 4290777087U;
  #line 712 
  tctl |= 258048U;
  {
    #line 715 
    union __anonunion___u_8094 __u;
    #line 714 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 714 
    u8 *hw_addr = (__u.__val);
    #line 714 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 714 
                                           writel(tctl,(void *)(hw_addr + 1024U));
  }
  #line 715 
  igb_rd32(hw,8U);
  #line 716 
  return;
}

#line 726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
static s32 igb_set_fc_watermarks(struct e1000_hw *hw)
{
  #line 728 
  s32 ret_val = 0;
  #line 729 
  u32 fcrtl = 0U;
  #line 729 
  u32 fcrth = 0U;
  #line 737 
  if (((unsigned int)hw->fc.current_mode & 2U) != 0U) {
    #line 742 
    fcrtl = hw->fc.low_water;
    #line 743 
    if ((int)hw->fc.send_xon != 0) 
                                   #line 744 
                                   fcrtl |= 2147483648U;
    #line 746 
    fcrth = hw->fc.high_water;
  }
  {
    #line 749 
    union __anonunion___u_8096 __u;
    #line 748 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 748 
    u8 *hw_addr = (__u.__val);
    #line 748 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 748 
                                           writel(fcrtl,(void *)(hw_addr + 8544U));
  }
  {
    #line 750 
    union __anonunion___u_8098 __u_0;
    #line 749 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 749 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 749 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
                                             #line 749 
                                             writel(fcrth,(void *)(hw_addr_0 + 8552U));
  }
  #line 751 
  return ret_val;
}

#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
static s32 igb_set_default_fc(struct e1000_hw *hw)
{
  #line 764 
  u16 lan_offset;
  #line 765 
  u16 nvm_data;
  #line 763 
  s32 ret_val = 0;
  #line 775 
  if (hw->mac.type == (unsigned int)e1000_i350) 
    #line 776 
    if ((unsigned int)hw->bus.func != 0U) 
                                          #line 776 
                                          lan_offset = (unsigned short)(((unsigned int)hw->bus.func + 1U) * 64U); else 
                                                                    #line 776 
                                                                    lan_offset = (unsigned short)0U;
  else 
       #line 778 
       lan_offset = (unsigned short)0U;
  #line 780 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned int)lan_offset + 15U)),(unsigned short)1,& nvm_data);
  #line 782 
  if (ret_val != 0) {
    {
      #line 783 
      bool branch;
      #line 783 
      struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"igb", .function = (char *)"igb_set_default_fc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)783U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 783 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
      #line 783 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 783 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
      }
    }
    #line 784 
    goto out;
  }
  #line 787 
  if (((int)nvm_data & 12288) == 0) 
                                    #line 788 
                                    hw->fc.requested_mode = e1000_fc_none;
  else 
    #line 789 
    if (((int)nvm_data & 12288) == 8192) 
                                         #line 790 
                                         hw->fc.requested_mode = e1000_fc_tx_pause; else 
                                                                    #line 792 
                                                                    hw->fc.requested_mode = e1000_fc_full;
  #line 794 
  out: 
       #line 794 
  ;
  #line 795 
  return ret_val;
}

#line 808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_force_mac_fc(struct e1000_hw *hw)
{
  #line 810 
  u32 ctrl;
  #line 811 
  s32 ret_val = 0;
  #line 813 
  ctrl = igb_rd32(hw,0U);
  {
    #line 832 
    bool branch;
    #line 832 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"igb", .function = (char *)"igb_force_mac_fc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"hw->fc.current_mode = %u\n", .lineno = (unsigned int)832U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 832 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 832 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 832 
      ;
      #line 832 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,igb_get_hw_dev(hw),(char *)"hw->fc.current_mode = %u\n",(unsigned int)hw->fc.current_mode);
    }
  }
  #line 834 
  switch ((unsigned int)hw->fc.current_mode) {
    #line 835 
    case (unsigned int)0: 
                          #line 835 
    ;
    #line 836 
    ctrl &= 3892314111U;
    #line 837 
    break;
    #line 838 
    case (unsigned int)1: 
                          #line 838 
    ;
    #line 839 
    ctrl &= 4026531839U;
    #line 840 
    ctrl |= 134217728U;
    #line 841 
    break;
    #line 842 
    case (unsigned int)2: 
                          #line 842 
    ;
    #line 843 
    ctrl &= 4160749567U;
    #line 844 
    ctrl |= 268435456U;
    #line 845 
    break;
    #line 846 
    case (unsigned int)3: 
                          #line 846 
    ;
    #line 847 
    ctrl |= 402653184U;
    #line 848 
    break;
    #line 849 
    default: 
             #line 849 
    ;
    {
      #line 850 
      bool branch_0;
      #line 850 
      struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"igb", .function = (char *)"igb_force_mac_fc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)850U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 850 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
      #line 850 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 850 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,igb_get_hw_dev(hw),(char *)"Flow control param set incorrectly\n");
      }
    }
    #line 851 
    ret_val = -3;
    #line 852 
    goto out;
  }
  {
    #line 856 
    union __anonunion___u_8100 __u;
    #line 855 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 855 
    u8 *hw_addr = (__u.__val);
    #line 855 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 855 
                                           writel(ctrl,(void *)hw_addr);
  }
  #line 857 
  out: 
       #line 857 
  ;
  #line 858 
  return ret_val;
}

#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_config_fc_after_link_up(struct e1000_hw *hw)
{
  #line 875 
  u32 pcs_status_reg;
  #line 875 
  u32 pcs_adv_reg;
  #line 875 
  u32 pcs_lp_ability_reg;
  #line 875 
  u32 pcs_ctrl_reg;
  #line 876 
  u16 mii_status_reg;
  #line 876 
  u16 mii_nway_adv_reg;
  #line 876 
  u16 mii_nway_lp_ability_reg;
  #line 877 
  u16 speed;
  #line 877 
  u16 duplex;
  #line 873 
  struct e1000_mac_info *mac = & hw->mac;
  #line 874 
  s32 ret_val = 0;
  #line 883 
  if ((int)mac->autoneg_failed != 0) {
    #line 884 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) 
      #line 885 
      ret_val = igb_force_mac_fc(hw);
  }
  else 
    #line 887 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
      #line 888 
      ret_val = igb_force_mac_fc(hw);
  #line 891 
  if (ret_val != 0) {
    {
      #line 892 
      bool branch;
      #line 892 
      struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)892U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 892 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
      #line 892 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 892 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,igb_get_hw_dev(hw),(char *)"Error forcing flow control settings\n");
      }
    }
    #line 893 
    goto out;
  }
  #line 901 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (int)mac->autoneg != 0) {
    #line 906 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& mii_status_reg);
    #line 908 
    if (ret_val != 0) 
                      #line 909 
                      goto out;
    #line 910 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& mii_status_reg);
    #line 912 
    if (ret_val != 0) 
                      #line 913 
                      goto out;
    #line 915 
    if (((int)mii_status_reg & 32) == 0) {
      {
        #line 916 
        bool branch_0;
        #line 916 
        struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Copper PHY and Auto Neg has not completed.\n", .lineno = (unsigned int)916U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 916 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
        #line 916 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 916 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,igb_get_hw_dev(hw),(char *)"Copper PHY and Auto Neg has not completed.\n");
        }
      }
      #line 917 
      goto out;
    }
    #line 926 
    ret_val = (*(hw->phy.ops.read_reg))(hw,4U,& mii_nway_adv_reg);
    #line 928 
    if (ret_val != 0) 
                      #line 929 
                      goto out;
    #line 930 
    ret_val = (*(hw->phy.ops.read_reg))(hw,5U,& mii_nway_lp_ability_reg);
    #line 932 
    if (ret_val != 0) 
                      #line 933 
                      goto out;
    #line 968 
    if (((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_lp_ability_reg & 1024) != 0) 
      #line 976 
      if (hw->fc.requested_mode == (unsigned int)e1000_fc_full) {
        #line 977 
        hw->fc.current_mode = e1000_fc_full;
        {
          #line 978 
          bool branch_1;
          #line 978 
          struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = FULL.\n", .lineno = (unsigned int)978U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 978 
          branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
          #line 978 
          if ((long)((long)((int)branch_1 != 0)) != 0L) {
            #line 978 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,igb_get_hw_dev(hw),(char *)"Flow Control = FULL.\n");
          }
        }
      }
      else {
        #line 980 
        hw->fc.current_mode = e1000_fc_rx_pause;
        {
          #line 981 
          bool branch_2;
          #line 981 
          struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int)981U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 981 
          branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
          #line 981 
          if ((long)((long)((int)branch_2 != 0)) != 0L) {
            #line 981 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,igb_get_hw_dev(hw),(char *)"Flow Control = RX PAUSE frames only.\n");
          }
        }
      }
    else 
      #line 991 
      if (((((int)mii_nway_adv_reg & 1024) == 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) != 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
        #line 995 
        hw->fc.current_mode = e1000_fc_tx_pause;
        {
          #line 996 
          bool branch_3;
          #line 996 
          struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = TX PAUSE frames only.\n", .lineno = (unsigned int)996U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 996 
          branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
          #line 996 
          if ((long)((long)((int)branch_3 != 0)) != 0L) {
            #line 996 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,igb_get_hw_dev(hw),(char *)"Flow Control = TX PAUSE frames only.\n");
          }
        }
      }
      else 
        #line 1005 
        if (((((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) == 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
          #line 1009 
          hw->fc.current_mode = e1000_fc_rx_pause;
          {
            #line 1010 
            bool branch_4;
            #line 1010 
            struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int)1010U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1010 
            branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
            #line 1010 
            if ((long)((long)((int)branch_4 != 0)) != 0L) {
              #line 1010 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,igb_get_hw_dev(hw),(char *)"Flow Control = RX PAUSE frames only.\n");
            }
          }
        }
        else 
          #line 1032 
          if ((hw->fc.requested_mode == (unsigned int)e1000_fc_none || hw->fc.requested_mode == (unsigned int)e1000_fc_tx_pause) || (int)hw->fc.strict_ieee != 0) {
            #line 1035 
            hw->fc.current_mode = e1000_fc_none;
            {
              #line 1036 
              bool branch_5;
              #line 1036 
              struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = NONE.\n", .lineno = (unsigned int)1036U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 1036 
              branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
              #line 1036 
              if ((long)((long)((int)branch_5 != 0)) != 0L) {
                #line 1036 
                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,igb_get_hw_dev(hw),(char *)"Flow Control = NONE.\n");
              }
            }
          }
          else {
            #line 1038 
            hw->fc.current_mode = e1000_fc_rx_pause;
            {
              #line 1039 
              bool branch_6;
              #line 1039 
              struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int)1039U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 1039 
              branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
              #line 1039 
              if ((long)((long)((int)branch_6 != 0)) != 0L) {
                #line 1039 
                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug462,igb_get_hw_dev(hw),(char *)"Flow Control = RX PAUSE frames only.\n");
              }
            }
          }
    #line 1046 
    ret_val = (*(hw->mac.ops.get_speed_and_duplex))(hw,& speed,& duplex);
    #line 1047 
    if (ret_val != 0) {
      {
        #line 1048 
        bool branch_7;
        #line 1048 
        struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Error getting link speed and duplex\n", .lineno = (unsigned int)1048U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1048 
        branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
        #line 1048 
        if ((long)((long)((int)branch_7 != 0)) != 0L) {
          #line 1048 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug463,igb_get_hw_dev(hw),(char *)"Error getting link speed and duplex\n");
        }
      }
      #line 1049 
      goto out;
    }
    #line 1052 
    if ((unsigned int)duplex == 1U) 
                                    #line 1053 
                                    hw->fc.current_mode = e1000_fc_none;
    #line 1058 
    ret_val = igb_force_mac_fc(hw);
    #line 1059 
    if (ret_val != 0) {
      {
        #line 1060 
        bool branch_8;
        #line 1060 
        struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)1060U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1060 
        branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
        #line 1060 
        if ((long)((long)((int)branch_8 != 0)) != 0L) {
          #line 1060 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug464,igb_get_hw_dev(hw),(char *)"Error forcing flow control settings\n");
        }
      }
      #line 1061 
      goto out;
    }
  }
  #line 1069 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes && (int)mac->autoneg != 0) {
    #line 1074 
    pcs_status_reg = igb_rd32(hw,16908U);
    #line 1076 
    if ((pcs_status_reg & 65536U) == 0U) {
      {
        #line 1077 
        bool branch_9;
        #line 1077 
        struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"PCS Auto Neg has not completed.\n", .lineno = (unsigned int)1077U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1077 
        branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
        #line 1077 
        if ((long)((long)((int)branch_9 != 0)) != 0L) {
          #line 1077 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug465,igb_get_hw_dev(hw),(char *)"PCS Auto Neg has not completed.\n");
        }
      }
      #line 1078 
      return ret_val;
    }
    #line 1087 
    pcs_adv_reg = igb_rd32(hw,16920U);
    #line 1088 
    pcs_lp_ability_reg = igb_rd32(hw,16924U);
    #line 1123 
    if ((pcs_adv_reg & 128U) != 0U && (pcs_lp_ability_reg & 128U) != 0U) 
      #line 1131 
      if (hw->fc.requested_mode == (unsigned int)e1000_fc_full) {
        #line 1132 
        hw->fc.current_mode = e1000_fc_full;
        {
          #line 1133 
          bool branch_10;
          #line 1133 
          struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = FULL.\n", .lineno = (unsigned int)1133U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1133 
          branch_10 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
          #line 1133 
          if ((long)((long)((int)branch_10 != 0)) != 0L) {
            #line 1133 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug466,igb_get_hw_dev(hw),(char *)"Flow Control = FULL.\n");
          }
        }
      }
      else {
        #line 1135 
        hw->fc.current_mode = e1000_fc_rx_pause;
        {
          #line 1136 
          bool branch_11;
          #line 1136 
          struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int)1136U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1136 
          branch_11 = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
          #line 1136 
          if ((long)((long)((int)branch_11 != 0)) != 0L) {
            #line 1136 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug467,igb_get_hw_dev(hw),(char *)"Flow Control = Rx PAUSE frames only.\n");
          }
        }
      }
    else 
      #line 1146 
      if ((((pcs_adv_reg & 128U) == 0U && (pcs_adv_reg & 256U) != 0U) && (pcs_lp_ability_reg & 128U) != 0U) && (pcs_lp_ability_reg & 256U) != 0U) {
        #line 1150 
        hw->fc.current_mode = e1000_fc_tx_pause;
        {
          #line 1151 
          bool branch_12;
          #line 1151 
          struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = Tx PAUSE frames only.\n", .lineno = (unsigned int)1151U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1151 
          branch_12 = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
          #line 1151 
          if ((long)((long)((int)branch_12 != 0)) != 0L) {
            #line 1151 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug468,igb_get_hw_dev(hw),(char *)"Flow Control = Tx PAUSE frames only.\n");
          }
        }
      }
      else 
        #line 1160 
        if ((((pcs_adv_reg & 128U) != 0U && (pcs_adv_reg & 256U) != 0U) && (pcs_lp_ability_reg & 128U) == 0U) && (pcs_lp_ability_reg & 256U) != 0U) {
          #line 1164 
          hw->fc.current_mode = e1000_fc_rx_pause;
          {
            #line 1165 
            bool branch_13;
            #line 1165 
            struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int)1165U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1165 
            branch_13 = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
            #line 1165 
            if ((long)((long)((int)branch_13 != 0)) != 0L) {
              #line 1165 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug469,igb_get_hw_dev(hw),(char *)"Flow Control = Rx PAUSE frames only.\n");
            }
          }
        }
        else {
          #line 1170 
          hw->fc.current_mode = e1000_fc_none;
          {
            #line 1171 
            bool branch_14;
            #line 1171 
            struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Flow Control = NONE.\n", .lineno = (unsigned int)1171U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1171 
            branch_14 = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
            #line 1171 
            if ((long)((long)((int)branch_14 != 0)) != 0L) {
              #line 1171 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug470,igb_get_hw_dev(hw),(char *)"Flow Control = NONE.\n");
            }
          }
        }
    #line 1177 
    pcs_ctrl_reg = igb_rd32(hw,16904U);
    #line 1178 
    pcs_ctrl_reg |= 128U;
    {
      #line 1180 
      union __anonunion___u_8102 __u;
      #line 1179 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1179 
      u8 *hw_addr = (__u.__val);
      #line 1179 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1179 
                                             writel(pcs_ctrl_reg,(void *)(hw_addr + 16904U));
    }
    #line 1181 
    ret_val = igb_force_mac_fc(hw);
    #line 1182 
    if (ret_val != 0) {
      {
        #line 1183 
        bool branch_15;
        #line 1183 
        struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"igb", .function = (char *)"igb_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)1183U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1183 
        branch_15 = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
        #line 1183 
        if ((long)((long)((int)branch_15 != 0)) != 0L) {
          #line 1183 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug471,igb_get_hw_dev(hw),(char *)"Error forcing flow control settings\n");
        }
      }
      #line 1184 
      return ret_val;
    }
  }
  #line 1188 
  out: 
       #line 1188 
  ;
  #line 1189 
  return ret_val;
}

#line 1201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_get_speed_and_duplex_copper(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  #line 1204 
  u32 status;
  #line 1206 
  status = igb_rd32(hw,8U);
  #line 1207 
  if ((status & 128U) != 0U) {
    #line 1208 
    *speed = (unsigned short)1000U;
    {
      #line 1209 
      bool branch;
      #line 1209 
      struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"igb", .function = (char *)"igb_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"1000 Mbs, ", .lineno = (unsigned int)1209U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1209 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
      #line 1209 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1209 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug472,igb_get_hw_dev(hw),(char *)"1000 Mbs, ");
      }
    }
  }
  else 
    #line 1210 
    if ((status & 64U) != 0U) {
      #line 1211 
      *speed = (unsigned short)100U;
      {
        #line 1212 
        bool branch_0;
        #line 1212 
        struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"igb", .function = (char *)"igb_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"100 Mbs, ", .lineno = (unsigned int)1212U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1212 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
        #line 1212 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 1212 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug473,igb_get_hw_dev(hw),(char *)"100 Mbs, ");
        }
      }
    }
    else {
      #line 1214 
      *speed = (unsigned short)10U;
      {
        #line 1215 
        bool branch_1;
        #line 1215 
        struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"igb", .function = (char *)"igb_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"10 Mbs, ", .lineno = (unsigned int)1215U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1215 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
        #line 1215 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 1215 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug474,igb_get_hw_dev(hw),(char *)"10 Mbs, ");
        }
      }
    }
  #line 1218 
  if ((status & 1U) != 0U) {
    #line 1219 
    *duplex = (unsigned short)2U;
    {
      #line 1220 
      bool branch_2;
      #line 1220 
      struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"igb", .function = (char *)"igb_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Full Duplex\n", .lineno = (unsigned int)1220U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1220 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
      #line 1220 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 1220 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug475,igb_get_hw_dev(hw),(char *)"Full Duplex\n");
      }
    }
  }
  else {
    #line 1222 
    *duplex = (unsigned short)1U;
    {
      #line 1223 
      bool branch_3;
      #line 1223 
      struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"igb", .function = (char *)"igb_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Half Duplex\n", .lineno = (unsigned int)1223U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1223 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
      #line 1223 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 1223 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug476,igb_get_hw_dev(hw),(char *)"Half Duplex\n");
      }
    }
  }
  #line 1226 
  return 0;
}

#line 1235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_get_hw_semaphore(struct e1000_hw *hw)
{
  #line 1237 
  u32 swsm;
  #line 1238 
  s32 ret_val = 0;
  #line 1239 
  s32 timeout = (int)hw->nvm.word_size + 1;
  #line 1240 
  s32 i = 0;
  #line 1243 
  while (i < timeout) {
    #line 1244 
    swsm = igb_rd32(hw,23376U);
    #line 1245 
    if ((swsm & 1U) == 0U) 
                           #line 1246 
                           break;
    #line 1248 
    __const_udelay(214750UL);
    #line 1249 
    i ++;
  }
  #line 1252 
  if (i == timeout) {
    {
      #line 1253 
      bool branch;
      #line 1253 
      struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"igb", .function = (char *)"igb_get_hw_semaphore", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Driver can\'t access device - SMBI bit is set.\n", .lineno = (unsigned int)1253U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1253 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
      #line 1253 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1253 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug477,igb_get_hw_dev(hw),(char *)"Driver can\'t access device - SMBI bit is set.\n");
      }
    }
    #line 1254 
    ret_val = -1;
    #line 1255 
    goto out;
  }
  #line 1259 
  i = 0;
  #line 1259 
  while (i < timeout) {
    {
      #line 1260 
      swsm = igb_rd32(hw,23376U);
      {
        #line 1262 
        union __anonunion___u_8104 __u;
        #line 1261 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 1261 
        u8 *hw_addr = (__u.__val);
        #line 1261 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                               #line 1261 
                                               writel(swsm | 2U,(void *)(hw_addr + 23376U));
      }
      #line 1264 
      if ((igb_rd32(hw,23376U) & 2U) != 0U) 
                                            #line 1265 
                                            break;
      #line 1267 
      __const_udelay(214750UL);
    }
    #line 1259 
    i ++;
  }
  #line 1270 
  if (i == timeout) {
    #line 1272 
    igb_put_hw_semaphore(hw);
    {
      #line 1273 
      bool branch_0;
      #line 1273 
      struct _ddebug __UNIQUE_ID_ddebug478 = {.modname = (char *)"igb", .function = (char *)"igb_get_hw_semaphore", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Driver can\'t access the NVM\n", .lineno = (unsigned int)1273U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1273 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug478.key.dd_key_false.key,(_Bool)0);
      #line 1273 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1273 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug478,igb_get_hw_dev(hw),(char *)"Driver can\'t access the NVM\n");
      }
    }
    #line 1274 
    ret_val = -1;
    #line 1275 
    goto out;
  }
  #line 1278 
  out: 
       #line 1278 
  ;
  #line 1279 
  return ret_val;
}

#line 1288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_put_hw_semaphore(struct e1000_hw *hw)
{
  #line 1290 
  u32 swsm;
  #line 1292 
  swsm = igb_rd32(hw,23376U);
  #line 1294 
  swsm &= 4294967292U;
  {
    #line 1297 
    union __anonunion___u_8106 __u;
    #line 1296 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1296 
    u8 *hw_addr = (__u.__val);
    #line 1296 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1296 
                                           writel(swsm,(void *)(hw_addr + 23376U));
  }
  #line 1298 
  return;
}

#line 1305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_get_auto_rd_done(struct e1000_hw *hw)
{
  #line 1307 
  s32 i = 0;
  #line 1308 
  s32 ret_val = 0;
  #line 1311 
  while (i <= 9) {
    #line 1312 
    if ((igb_rd32(hw,16U) & 512U) != 0U) 
                                         #line 1313 
                                         break;
    #line 1314 
    usleep_range(1000UL,2000UL);
    #line 1315 
    i ++;
  }
  #line 1318 
  if (i == 10) {
    {
      #line 1319 
      bool branch;
      #line 1319 
      struct _ddebug __UNIQUE_ID_ddebug479 = {.modname = (char *)"igb", .function = (char *)"igb_get_auto_rd_done", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Auto read by HW from NVM has not completed.\n", .lineno = (unsigned int)1319U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1319 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug479.key.dd_key_false.key,(_Bool)0);
      #line 1319 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1319 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug479,igb_get_hw_dev(hw),(char *)"Auto read by HW from NVM has not completed.\n");
      }
    }
    #line 1320 
    ret_val = -9;
    #line 1321 
    goto out;
  }
  #line 1324 
  out: 
       #line 1324 
  ;
  #line 1325 
  return ret_val;
}

#line 1336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
static s32 igb_valid_led_default(struct e1000_hw *hw, u16 *data)
{
  #line 1338 
  s32 ret_val;
  #line 1340 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)4,(unsigned short)1,data);
  #line 1341 
  if (ret_val != 0) {
    {
      #line 1342 
      bool branch;
      #line 1342 
      struct _ddebug __UNIQUE_ID_ddebug480 = {.modname = (char *)"igb", .function = (char *)"igb_valid_led_default", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)1342U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1342 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug480.key.dd_key_false.key,(_Bool)0);
      #line 1342 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1342 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug480,igb_get_hw_dev(hw),(char *)"NVM Read Error\n");
      }
    }
    #line 1343 
    goto out;
  }
  #line 1346 
  if ((unsigned int)*data + 65535U > 65533U) 
    #line 1347 
    switch ((unsigned int)hw->phy.media_type) {
      #line 1348 
      case (unsigned int)3: 
                            #line 1348 
      ;
      #line 1349 
      *data = (unsigned short)4376U;
      #line 1350 
      break;
      #line 1351 
      case (unsigned int)1: 
                            #line 1351 
      ;
      #line 1352 
      default: 
               #line 1352 
      ;
      #line 1353 
      *data = (unsigned short)35089U;
      #line 1354 
      break;
    }
  #line 1357 
  out: 
       #line 1357 
  ;
  #line 1358 
  return ret_val;
}

#line 1366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_id_led_init(struct e1000_hw *hw)
{
  #line 1369 
  s32 ret_val;
  #line 1373 
  u16 data;
  #line 1373 
  u16 i;
  #line 1373 
  u16 temp;
  #line 1368 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1370 
  u32 ledctl_mask = 255U;
  #line 1371 
  u32 ledctl_on = 14U;
  #line 1372 
  u32 ledctl_off = 15U;
  #line 1374 
  u16 led_mask = (unsigned short)15U;
  #line 1377 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U) 
                                                      #line 1379 
                                                      ret_val = igb_valid_led_default_i210(hw,& data); else 
                                                                    #line 1381 
                                                                    ret_val = igb_valid_led_default(hw,& data);
  #line 1383 
  if (ret_val != 0) 
                    #line 1384 
                    goto out;
  #line 1386 
  mac->ledctl_default = igb_rd32(hw,3584U);
  #line 1387 
  mac->ledctl_mode1 = mac->ledctl_default;
  #line 1388 
  mac->ledctl_mode2 = mac->ledctl_default;
  #line 1390 
  i = (unsigned short)0U;
  #line 1390 
  while ((unsigned int)i <= 3U) {
    #line 1391 
    temp = (unsigned short)((unsigned int)((unsigned short)((int)data >> ((int)i << 2))) & 15U);
    #line 1392 
    switch ((int)temp) {
      #line 1393 
      case 4: 
              #line 1393 
      ;
      #line 1394 
      case 5: 
              #line 1394 
      ;
      #line 1395 
      case 6: 
              #line 1395 
      ;
      #line 1396 
      mac->ledctl_mode1 &= ~ (255U << ((int)i << 3));
      #line 1397 
      mac->ledctl_mode1 |= 14U << ((int)i << 3);
      #line 1398 
      break;
      #line 1399 
      case 7: 
              #line 1399 
      ;
      #line 1400 
      case 8: 
              #line 1400 
      ;
      #line 1401 
      case 9: 
              #line 1401 
      ;
      #line 1402 
      mac->ledctl_mode1 &= ~ (255U << ((int)i << 3));
      #line 1403 
      mac->ledctl_mode1 |= 15U << ((int)i << 3);
      #line 1404 
      break;
      #line 1405 
      default: 
               #line 1405 
      ;
      #line 1407 
      break;
    }
    #line 1409 
    switch ((int)temp) {
      #line 1410 
      case 2: 
              #line 1410 
      ;
      #line 1411 
      case 5: 
              #line 1411 
      ;
      #line 1412 
      case 8: 
              #line 1412 
      ;
      #line 1413 
      mac->ledctl_mode2 &= ~ (255U << ((int)i << 3));
      #line 1414 
      mac->ledctl_mode2 |= 14U << ((int)i << 3);
      #line 1415 
      break;
      #line 1416 
      case 3: 
              #line 1416 
      ;
      #line 1417 
      case 6: 
              #line 1417 
      ;
      #line 1418 
      case 9: 
              #line 1418 
      ;
      #line 1419 
      mac->ledctl_mode2 &= ~ (255U << ((int)i << 3));
      #line 1420 
      mac->ledctl_mode2 |= 15U << ((int)i << 3);
      #line 1421 
      break;
      #line 1422 
      default: 
               #line 1422 
      ;
      #line 1424 
      break;
    }
    #line 1390 
    i = (u16)((int)i + 1);
  }
  #line 1428 
  out: 
       #line 1428 
  ;
  #line 1429 
  return ret_val;
}

#line 1439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_cleanup_led(struct e1000_hw *hw)
{
  {
    #line 1442 
    union __anonunion___u_8108 __u;
    #line 1441 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1441 
    u8 *hw_addr = (__u.__val);
    #line 1441 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1441 
                                           writel(hw->mac.ledctl_default,(void *)(hw_addr + 3584U));
  }
  #line 1442 
  return 0;
}

#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_blink_led(struct e1000_hw *hw)
{
  #line 1454 
  u32 i;
  #line 1453 
  u32 ledctl_blink = 0U;
  #line 1456 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) 
                                                                  #line 1458 
                                                                  ledctl_blink = 142U;
  else {
    #line 1467 
    ledctl_blink = hw->mac.ledctl_mode2;
    #line 1468 
    i = 0U;
    #line 1468 
    while (i <= 31U) {
      {
        #line 1469 
        u32 mode = (hw->mac.ledctl_mode2 >> i) & 15U;
        #line 1471 
        u32 led_default = hw->mac.ledctl_default >> i;
        #line 1473 
        if ((led_default & 64U) == 0U && mode == 14U || (led_default & 64U) != 0U && mode == 15U) {
          #line 1477 
          ledctl_blink = (unsigned int)(~ (15 << i)) & ledctl_blink;
          #line 1479 
          ledctl_blink = (unsigned int)(142 << i) | ledctl_blink;
        }
      }
      #line 1468 
      i += 8U;
    }
  }
  {
    #line 1486 
    union __anonunion___u_8110 __u;
    #line 1485 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1485 
    u8 *hw_addr = (__u.__val);
    #line 1485 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1485 
                                           writel(ledctl_blink,(void *)(hw_addr + 3584U));
  }
  #line 1487 
  return 0;
}

#line 1496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_led_off(struct e1000_hw *hw)
{
  #line 1498 
  switch ((unsigned int)hw->phy.media_type) {
    #line 1499 
    case (unsigned int)1: 
                          #line 1499 
    ;
    {
      #line 1501 
      union __anonunion___u_8112 __u;
      #line 1500 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1500 
      u8 *hw_addr = (__u.__val);
      #line 1500 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                             #line 1500 
                                             writel(hw->mac.ledctl_mode1,(void *)(hw_addr + 3584U));
    }
    #line 1501 
    break;
    #line 1502 
    default: 
             #line 1502 
    ;
    #line 1503 
    break;
  }
  #line 1506 
  return 0;
}

#line 1520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_disable_pcie_master(struct e1000_hw *hw)
{
  #line 1522 
  u32 ctrl;
  #line 1523 
  s32 timeout = 800;
  #line 1524 
  s32 ret_val = 0;
  #line 1526 
  if (hw->bus.type != (unsigned int)e1000_bus_type_pci_express) 
                                                                #line 1527 
                                                                goto out;
  #line 1529 
  ctrl = igb_rd32(hw,0U);
  #line 1530 
  ctrl |= 4U;
  {
    #line 1532 
    union __anonunion___u_8114 __u;
    #line 1531 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1531 
    u8 *hw_addr = (__u.__val);
    #line 1531 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1531 
                                           writel(ctrl,(void *)hw_addr);
  }
  #line 1533 
  while (timeout != 0) {
    #line 1534 
    if ((igb_rd32(hw,8U) & 524288U) == 0U) 
                                           #line 1536 
                                           break;
    #line 1537 
    __const_udelay(429500UL);
    #line 1538 
    timeout --;
  }
  #line 1541 
  if (timeout == 0) {
    {
      #line 1542 
      bool branch;
      #line 1542 
      struct _ddebug __UNIQUE_ID_ddebug481 = {.modname = (char *)"igb", .function = (char *)"igb_disable_pcie_master", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Master requests are pending.\n", .lineno = (unsigned int)1542U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1542 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug481.key.dd_key_false.key,(_Bool)0);
      #line 1542 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1542 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug481,igb_get_hw_dev(hw),(char *)"Master requests are pending.\n");
      }
    }
    #line 1543 
    ret_val = -10;
    #line 1544 
    goto out;
  }
  #line 1547 
  out: 
       #line 1547 
  ;
  #line 1548 
  return ret_val;
}

#line 1558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_validate_mdi_setting(struct e1000_hw *hw)
{
  #line 1560 
  s32 ret_val = 0;
  #line 1563 
  if (hw->mac.type > (unsigned int)e1000_82576) 
                                                #line 1564 
                                                goto out;
  #line 1566 
  if (! hw->mac.autoneg && ((unsigned int)hw->phy.mdix == 0U || (unsigned int)hw->phy.mdix == 3U)) {
    {
      #line 1567 
      bool branch;
      #line 1567 
      struct _ddebug __UNIQUE_ID_ddebug482 = {.modname = (char *)"igb", .function = (char *)"igb_validate_mdi_setting", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Invalid MDI setting detected\n", .lineno = (unsigned int)1567U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1567 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug482.key.dd_key_false.key,(_Bool)0);
      #line 1567 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1567 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug482,igb_get_hw_dev(hw),(char *)"Invalid MDI setting detected\n");
      }
    }
    #line 1568 
    hw->phy.mdix = (unsigned char)1U;
    #line 1569 
    ret_val = -3;
    #line 1570 
    goto out;
  }
  #line 1573 
  out: 
       #line 1573 
  ;
  #line 1574 
  return ret_val;
}

#line 1588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_write_8bit_ctrl_reg(struct e1000_hw *hw, u32 reg, u32 offset, u8 data)
{
  #line 1591 
  u32 i;
  #line 1591 
  u32 regvalue = 0U;
  #line 1592 
  s32 ret_val = 0;
  #line 1595 
  regvalue = (unsigned int)data | (offset << 8);
  {
    #line 1597 
    union __anonunion___u_8116 __u;
    #line 1596 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1596 
    u8 *hw_addr = (__u.__val);
    #line 1596 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
                                           #line 1596 
                                           writel(regvalue,(void *)(hw_addr + (unsigned long)reg));
  }
  #line 1599 
  i = 0U;
  #line 1599 
  while (i <= 639U) {
    #line 1600 
    __const_udelay(21475UL);
    #line 1601 
    regvalue = igb_rd32(hw,reg);
    #line 1602 
    if ((regvalue & 2147483648U) != 0U) 
                                        #line 1603 
                                        break;
    #line 1599 
    i ++;
  }
  #line 1605 
  if ((regvalue & 2147483648U) == 0U) {
    {
      #line 1606 
      bool branch;
      #line 1606 
      struct _ddebug __UNIQUE_ID_ddebug483 = {.modname = (char *)"igb", .function = (char *)"igb_write_8bit_ctrl_reg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = (char *)"Reg %08x did not indicate ready\n", .lineno = (unsigned int)1606U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1606 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug483.key.dd_key_false.key,(_Bool)0);
      #line 1606 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1606 
        ;
        #line 1606 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug483,igb_get_hw_dev(hw),(char *)"Reg %08x did not indicate ready\n",reg);
      }
    }
    #line 1607 
    ret_val = -2;
    #line 1608 
    goto out;
  }
  #line 1611 
  out: 
       #line 1611 
  ;
  #line 1612 
  return ret_val;
}

#line 1622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igb/e1000_mac.c"
bool igb_enable_mng_pass_thru(struct e1000_hw *hw)
{
  #line 1624 
  u32 manc;
  #line 1625 
  u32 fwsm;
  #line 1625 
  u32 factps;
  #line 1626 
  bool ret_val = (_Bool)0;
  #line 1628 
  if (! hw->mac.asf_firmware_present) 
                                      #line 1629 
                                      goto out;
  #line 1631 
  manc = igb_rd32(hw,22560U);
  #line 1633 
  if ((manc & 131072U) == 0U) 
                              #line 1634 
                              goto out;
  #line 1636 
  if ((int)hw->mac.arc_subsystem_valid != 0) {
    #line 1637 
    fwsm = igb_rd32(hw,23380U);
    #line 1638 
    factps = igb_rd32(hw,23344U);
    #line 1640 
    if ((factps & 536870912U) == 0U && (fwsm & 14U) == 4U) {
      #line 1643 
      ret_val = (_Bool)1;
      #line 1644 
      goto out;
    }
  }
  else 
    #line 1647 
    if ((manc & 1U) != 0U && (manc & 2U) == 0U) {
      #line 1649 
      ret_val = (_Bool)1;
      #line 1650 
      goto out;
    }
  #line 1654 
  out: 
       #line 1654 
  ;
  #line 1655 
  return ret_val;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 136 
#line 332 
void emg_dispatch_deregister_13(struct net_device *arg0);
#line 137 
#line 248 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 138 
#line 189 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 139 
#line 237 
void emg_dispatch_instance_register_7(struct timer_list *arg0);
#line 140 
#line 198 
void emg_dispatch_irq_deregister_5(int arg0);
#line 141 
#line 268 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 142 
#line 178 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 143 
#line 257 
void emg_dispatch_register_9(struct net_device *arg0);
#line 144 
#line 3011 
void *emg_entry_point_insmod(void *arg0);
#line 147 
#line 341 
void *emg_interrupt_interrupt_scenario_igb_intr(void *arg0);
#line 148 
#line 404 
void *emg_interrupt_interrupt_scenario_igb_intr_msi(void *arg0);
#line 149 
#line 467 
void *emg_interrupt_interrupt_scenario_igb_msix_other(void *arg0);
#line 150 
#line 530 
void *emg_interrupt_interrupt_scenario_igb_msix_ring(void *arg0);
#line 151 
#line 593 
void *emg_interrupt_interrupt_scenario_igb_test_intr(void *arg0);
#line 153 
#line 656 
void *emg_net_random_allocationless_scenario_igb_ethtool_begin(void *arg0);
#line 154 
#line 1492 
void *emg_pci_pci_scenario_igb_driver(void *arg0);
#line 156 
#line 1669 
void *emg_pm_pm_ops_scenario_igb_pm_ops(void *arg0);
#line 161 
#line 2652 
void *emg_timer_timer_scenario_8(void *arg0);
#line 163 
#line 3040 
int main(void);
#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 179 
  int ret;
  #line 180 
  struct emg_struct_pci_scenario_igb_driver_20 *cf_arg_20;
  #line 181 
  cf_arg_20 = (struct emg_struct_pci_scenario_igb_driver_20 *)ldv_xmalloc(16UL);
  #line 182 
  cf_arg_20->arg0 = arg0;
  #line 183 
  ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_pci_pci_scenario_igb_driver,(void *)cf_arg_20);
  #line 184 
  __VERIFIER_assume(ret == 0);
  #line 185 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 190 
  int ret;
  #line 191 
  struct emg_struct_timer_scenario_8_22 *cf_arg_22;
  #line 192 
  ret = pthread_join(emg_thread_22,(void **)0);
  #line 193 
  __VERIFIER_assume(ret == 0);
  #line 194 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 199 
  int ret;
  #line 200 
  struct emg_struct_free_irq_5 *cf_arg_14;
  #line 201 
  struct emg_struct_free_irq_5 *cf_arg_15;
  #line 202 
  struct emg_struct_free_irq_5 *cf_arg_16;
  #line 203 
  struct emg_struct_free_irq_5 *cf_arg_17;
  #line 204 
  struct emg_struct_free_irq_5 *cf_arg_18;
  #line 205 
  switch (ldv_undef_int()) {
    #line 206 
    case 0: 
            #line 206 
    ;
    #line 207 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 208 
    __VERIFIER_assume(ret == 0);
    #line 209 
    break;
    #line 211 
    case 1: 
            #line 211 
    ;
    #line 212 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 213 
    __VERIFIER_assume(ret == 0);
    #line 214 
    break;
    #line 216 
    case 2: 
            #line 216 
    ;
    #line 217 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 218 
    __VERIFIER_assume(ret == 0);
    #line 219 
    break;
    #line 221 
    case 3: 
            #line 221 
    ;
    #line 222 
    ret = pthread_join(emg_thread_17,(void **)0);
    #line 223 
    __VERIFIER_assume(ret == 0);
    #line 224 
    break;
    #line 226 
    case 4: 
            #line 226 
    ;
    #line 227 
    ret = pthread_join(emg_thread_18,(void **)0);
    #line 228 
    __VERIFIER_assume(ret == 0);
    #line 229 
    break;
    #line 231 
    default: 
             #line 231 
    ;
    #line 231 
    __VERIFIER_assume(0);
  }
  #line 233 
  return;
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_7(struct timer_list *arg0)
{
  #line 238 
  int ret;
  #line 239 
  struct emg_struct_timer_scenario_8_22 *cf_arg_22;
  #line 240 
  cf_arg_22 = (struct emg_struct_timer_scenario_8_22 *)ldv_xmalloc(16UL);
  #line 241 
  cf_arg_22->arg0 = arg0;
  #line 242 
  ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_timer_timer_scenario_8,(void *)cf_arg_22);
  #line 243 
  __VERIFIER_assume(ret == 0);
  #line 244 
  return;
}

#line 248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 249 
  int ret;
  #line 250 
  struct emg_struct_pci_scenario_igb_driver_20 *cf_arg_20;
  #line 251 
  ret = pthread_join(emg_thread_20,(void **)0);
  #line 252 
  __VERIFIER_assume(ret == 0);
  #line 253 
  return;
}

#line 257  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 258 
  int ret;
  #line 259 
  struct emg_struct_random_allocationless_scenario_igb_ethtool_begin_19 *cf_arg_19;
  #line 260 
  cf_arg_19 = (struct emg_struct_random_allocationless_scenario_igb_ethtool_begin_19 *)ldv_xmalloc(16UL);
  #line 261 
  cf_arg_19->arg0 = arg0;
  #line 262 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_igb_ethtool_begin,(void *)cf_arg_19);
  #line 263 
  __VERIFIER_assume(ret == 0);
  #line 264 
  return;
}

#line 268  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 269 
  int ret;
  #line 270 
  struct emg_struct_interrupt_scenario_igb_intr_14 *cf_arg_14;
  #line 271 
  struct emg_struct_interrupt_scenario_igb_intr_14 *cf_arg_15;
  #line 272 
  struct emg_struct_interrupt_scenario_igb_intr_14 *cf_arg_16;
  #line 273 
  struct emg_struct_interrupt_scenario_igb_intr_14 *cf_arg_17;
  #line 274 
  struct emg_struct_interrupt_scenario_igb_intr_14 *cf_arg_18;
  #line 275 
  switch (ldv_undef_int()) {
    #line 276 
    case 0: 
            #line 276 
    ;
    #line 277 
    cf_arg_14 = (struct emg_struct_interrupt_scenario_igb_intr_14 *)ldv_xmalloc(40UL);
    #line 278 
    cf_arg_14->arg0 = arg0;
    #line 279 
    cf_arg_14->arg1 = arg1;
    #line 280 
    cf_arg_14->arg2 = arg2;
    #line 281 
    cf_arg_14->arg3 = arg3;
    #line 282 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_igb_intr,(void *)cf_arg_14);
    #line 283 
    __VERIFIER_assume(ret == 0);
    #line 284 
    break;
    #line 286 
    case 1: 
            #line 286 
    ;
    #line 287 
    cf_arg_15 = (struct emg_struct_interrupt_scenario_igb_intr_14 *)ldv_xmalloc(40UL);
    #line 288 
    cf_arg_15->arg0 = arg0;
    #line 289 
    cf_arg_15->arg1 = arg1;
    #line 290 
    cf_arg_15->arg2 = arg2;
    #line 291 
    cf_arg_15->arg3 = arg3;
    #line 292 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_igb_intr_msi,(void *)cf_arg_15);
    #line 293 
    __VERIFIER_assume(ret == 0);
    #line 294 
    break;
    #line 296 
    case 2: 
            #line 296 
    ;
    #line 297 
    cf_arg_16 = (struct emg_struct_interrupt_scenario_igb_intr_14 *)ldv_xmalloc(40UL);
    #line 298 
    cf_arg_16->arg0 = arg0;
    #line 299 
    cf_arg_16->arg1 = arg1;
    #line 300 
    cf_arg_16->arg2 = arg2;
    #line 301 
    cf_arg_16->arg3 = arg3;
    #line 302 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_igb_msix_other,(void *)cf_arg_16);
    #line 303 
    __VERIFIER_assume(ret == 0);
    #line 304 
    break;
    #line 306 
    case 3: 
            #line 306 
    ;
    #line 307 
    cf_arg_17 = (struct emg_struct_interrupt_scenario_igb_intr_14 *)ldv_xmalloc(40UL);
    #line 308 
    cf_arg_17->arg0 = arg0;
    #line 309 
    cf_arg_17->arg1 = arg1;
    #line 310 
    cf_arg_17->arg2 = arg2;
    #line 311 
    cf_arg_17->arg3 = arg3;
    #line 312 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_igb_msix_ring,(void *)cf_arg_17);
    #line 313 
    __VERIFIER_assume(ret == 0);
    #line 314 
    break;
    #line 316 
    case 4: 
            #line 316 
    ;
    #line 317 
    cf_arg_18 = (struct emg_struct_interrupt_scenario_igb_intr_14 *)ldv_xmalloc(40UL);
    #line 318 
    cf_arg_18->arg0 = arg0;
    #line 319 
    cf_arg_18->arg1 = arg1;
    #line 320 
    cf_arg_18->arg2 = arg2;
    #line 321 
    cf_arg_18->arg3 = arg3;
    #line 322 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_igb_test_intr,(void *)cf_arg_18);
    #line 323 
    __VERIFIER_assume(ret == 0);
    #line 324 
    break;
    #line 326 
    default: 
             #line 326 
    ;
    #line 326 
    __VERIFIER_assume(0);
  }
  #line 328 
  return;
}

#line 332  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_13(struct net_device *arg0)
{
  #line 333 
  int ret;
  #line 334 
  struct emg_struct_random_allocationless_scenario_igb_ethtool_begin_19 *cf_arg_19;
  #line 335 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 336 
  __VERIFIER_assume(ret == 0);
  #line 337 
  return;
}

#line 341  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_igb_intr(void *arg0)
{
  #line 344 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 345 
  void *emg_14_data;
  #line 346 
  int emg_14_line;
  #line 347 
  enum irqreturn emg_14_ret_val;
  #line 348 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 350 
  struct emg_struct_interrupt_scenario_igb_intr_14 *data = (struct emg_struct_interrupt_scenario_igb_intr_14 *)arg0;
  #line 353 
  emg_14_callback = & emg_wrapper_igb_intr;
  #line 356 
  if (data != (struct emg_struct_interrupt_scenario_igb_intr_14 *)0) {
    #line 357 
    emg_14_line = data->arg0;
    #line 358 
    emg_14_callback = data->arg1;
    #line 359 
    emg_14_thread = data->arg2;
    #line 360 
    emg_14_data = data->arg3;
    #line 361 
    ldv_free((void *)data);
  }
  #line 367 
  ldv_switch_to_interrupt_context();
  #line 371 
  emg_14_ret_val = emg_wrapper_igb_intr(emg_14_line,emg_14_data);
  #line 376 
  ldv_switch_to_process_context();
  #line 379 
  if (ldv_undef_int() != 0) {
    #line 381 
    __VERIFIER_assume(emg_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 385 
    if (emg_14_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 386 
                                                              (*emg_14_thread)(emg_14_line,emg_14_data);
  }
  else 
       #line 391 
       __VERIFIER_assume(emg_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 399 
  return (void *)0;
}

#line 404  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_igb_intr_msi(void *arg0)
{
  #line 407 
  enum irqreturn (*emg_15_callback)(int , void *);
  #line 408 
  void *emg_15_data;
  #line 409 
  int emg_15_line;
  #line 410 
  enum irqreturn emg_15_ret_val;
  #line 411 
  enum irqreturn (*emg_15_thread)(int , void *);
  #line 413 
  struct emg_struct_interrupt_scenario_igb_intr_14 *data = (struct emg_struct_interrupt_scenario_igb_intr_14 *)arg0;
  #line 416 
  emg_15_callback = & emg_wrapper_igb_intr_msi;
  #line 419 
  if (data != (struct emg_struct_interrupt_scenario_igb_intr_14 *)0) {
    #line 420 
    emg_15_line = data->arg0;
    #line 421 
    emg_15_callback = data->arg1;
    #line 422 
    emg_15_thread = data->arg2;
    #line 423 
    emg_15_data = data->arg3;
    #line 424 
    ldv_free((void *)data);
  }
  #line 430 
  ldv_switch_to_interrupt_context();
  #line 434 
  emg_15_ret_val = emg_wrapper_igb_intr_msi(emg_15_line,emg_15_data);
  #line 439 
  ldv_switch_to_process_context();
  #line 442 
  if (ldv_undef_int() != 0) {
    #line 444 
    __VERIFIER_assume(emg_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 448 
    if (emg_15_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 449 
                                                              (*emg_15_thread)(emg_15_line,emg_15_data);
  }
  else 
       #line 454 
       __VERIFIER_assume(emg_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 462 
  return (void *)0;
}

#line 467  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_igb_msix_other(void *arg0)
{
  #line 470 
  enum irqreturn (*emg_16_callback)(int , void *);
  #line 471 
  void *emg_16_data;
  #line 472 
  int emg_16_line;
  #line 473 
  enum irqreturn emg_16_ret_val;
  #line 474 
  enum irqreturn (*emg_16_thread)(int , void *);
  #line 476 
  struct emg_struct_interrupt_scenario_igb_intr_14 *data = (struct emg_struct_interrupt_scenario_igb_intr_14 *)arg0;
  #line 479 
  emg_16_callback = & emg_wrapper_igb_msix_other;
  #line 482 
  if (data != (struct emg_struct_interrupt_scenario_igb_intr_14 *)0) {
    #line 483 
    emg_16_line = data->arg0;
    #line 484 
    emg_16_callback = data->arg1;
    #line 485 
    emg_16_thread = data->arg2;
    #line 486 
    emg_16_data = data->arg3;
    #line 487 
    ldv_free((void *)data);
  }
  #line 493 
  ldv_switch_to_interrupt_context();
  #line 497 
  emg_16_ret_val = emg_wrapper_igb_msix_other(emg_16_line,emg_16_data);
  #line 502 
  ldv_switch_to_process_context();
  #line 505 
  if (ldv_undef_int() != 0) {
    #line 507 
    __VERIFIER_assume(emg_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 511 
    if (emg_16_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 512 
                                                              (*emg_16_thread)(emg_16_line,emg_16_data);
  }
  else 
       #line 517 
       __VERIFIER_assume(emg_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 525 
  return (void *)0;
}

#line 530  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_igb_msix_ring(void *arg0)
{
  #line 533 
  enum irqreturn (*emg_17_callback)(int , void *);
  #line 534 
  void *emg_17_data;
  #line 535 
  int emg_17_line;
  #line 536 
  enum irqreturn emg_17_ret_val;
  #line 537 
  enum irqreturn (*emg_17_thread)(int , void *);
  #line 539 
  struct emg_struct_interrupt_scenario_igb_intr_14 *data = (struct emg_struct_interrupt_scenario_igb_intr_14 *)arg0;
  #line 542 
  emg_17_callback = & emg_wrapper_igb_msix_ring;
  #line 545 
  if (data != (struct emg_struct_interrupt_scenario_igb_intr_14 *)0) {
    #line 546 
    emg_17_line = data->arg0;
    #line 547 
    emg_17_callback = data->arg1;
    #line 548 
    emg_17_thread = data->arg2;
    #line 549 
    emg_17_data = data->arg3;
    #line 550 
    ldv_free((void *)data);
  }
  #line 556 
  ldv_switch_to_interrupt_context();
  #line 560 
  emg_17_ret_val = emg_wrapper_igb_msix_ring(emg_17_line,emg_17_data);
  #line 565 
  ldv_switch_to_process_context();
  #line 568 
  if (ldv_undef_int() != 0) {
    #line 570 
    __VERIFIER_assume(emg_17_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 574 
    if (emg_17_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 575 
                                                              (*emg_17_thread)(emg_17_line,emg_17_data);
  }
  else 
       #line 580 
       __VERIFIER_assume(emg_17_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 588 
  return (void *)0;
}

#line 593  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_igb_test_intr(void *arg0)
{
  #line 596 
  enum irqreturn (*emg_18_callback)(int , void *);
  #line 597 
  void *emg_18_data;
  #line 598 
  int emg_18_line;
  #line 599 
  enum irqreturn emg_18_ret_val;
  #line 600 
  enum irqreturn (*emg_18_thread)(int , void *);
  #line 602 
  struct emg_struct_interrupt_scenario_igb_intr_14 *data = (struct emg_struct_interrupt_scenario_igb_intr_14 *)arg0;
  #line 605 
  emg_18_callback = & emg_wrapper_igb_test_intr;
  #line 608 
  if (data != (struct emg_struct_interrupt_scenario_igb_intr_14 *)0) {
    #line 609 
    emg_18_line = data->arg0;
    #line 610 
    emg_18_callback = data->arg1;
    #line 611 
    emg_18_thread = data->arg2;
    #line 612 
    emg_18_data = data->arg3;
    #line 613 
    ldv_free((void *)data);
  }
  #line 619 
  ldv_switch_to_interrupt_context();
  #line 623 
  emg_18_ret_val = emg_wrapper_igb_test_intr(emg_18_line,emg_18_data);
  #line 628 
  ldv_switch_to_process_context();
  #line 631 
  if (ldv_undef_int() != 0) {
    #line 633 
    __VERIFIER_assume(emg_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 637 
    if (emg_18_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 638 
                                                              (*emg_18_thread)(emg_18_line,emg_18_data);
  }
  else 
       #line 643 
       __VERIFIER_assume(emg_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 651 
  return (void *)0;
}

#line 656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_igb_ethtool_begin(void *arg0)
{
  #line 659 
  struct net_device *emg_19_container;
  #line 660 
  struct ndmsg *emg_19_emg_param_0_29;
  #line 661 
  struct sk_buff *emg_19_emg_param_0_35;
  #line 662 
  struct sk_buff *emg_19_emg_param_0_58;
  #line 663 
  struct ethtool_channels *emg_19_emg_param_1_0;
  #line 664 
  struct ethtool_coalesce *emg_19_emg_param_1_1;
  #line 665 
  struct ethtool_modinfo *emg_19_emg_param_1_11;
  #line 666 
  struct ethtool_pauseparam *emg_19_emg_param_1_12;
  #line 667 
  struct ethtool_regs *emg_19_emg_param_1_13;
  #line 668 
  struct ethtool_ringparam *emg_19_emg_param_1_15;
  #line 669 
  unsigned int *emg_19_emg_param_1_16;
  #line 670 
  struct ethtool_rxnfc *emg_19_emg_param_1_19;
  #line 671 
  struct ethtool_drvinfo *emg_19_emg_param_1_2;
  #line 672 
  int emg_19_emg_param_1_21;
  #line 673 
  unsigned int emg_19_emg_param_1_22;
  #line 674 
  struct ethtool_ts_info *emg_19_emg_param_1_24;
  #line 675 
  struct ethtool_wolinfo *emg_19_emg_param_1_25;
  #line 676 
  int emg_19_emg_param_1_26;
  #line 677 
  struct ifreq *emg_19_emg_param_1_27;
  #line 678 
  struct ethtool_eee *emg_19_emg_param_1_3;
  #line 679 
  struct nlattr **emg_19_emg_param_1_30;
  #line 680 
  unsigned long long emg_19_emg_param_1_37;
  #line 681 
  struct rtnl_link_stats64 *emg_19_emg_param_1_38;
  #line 682 
  int emg_19_emg_param_1_39;
  #line 683 
  struct ethtool_eeprom *emg_19_emg_param_1_4;
  #line 684 
  unsigned long long emg_19_emg_param_1_41;
  #line 685 
  void *emg_19_emg_param_1_42;
  #line 686 
  int emg_19_emg_param_1_43;
  #line 687 
  int emg_19_emg_param_1_45;
  #line 688 
  int emg_19_emg_param_1_48;
  #line 689 
  int emg_19_emg_param_1_50;
  #line 690 
  int emg_19_emg_param_1_52;
  #line 691 
  enum tc_setup_type *emg_19_emg_param_1_56;
  #line 692 
  unsigned short emg_19_emg_param_1_59;
  #line 693 
  struct ethtool_stats *emg_19_emg_param_1_6;
  #line 694 
  unsigned short emg_19_emg_param_1_61;
  #line 695 
  struct ethtool_test *emg_19_emg_param_1_63;
  #line 696 
  struct ethtool_channels *emg_19_emg_param_1_65;
  #line 697 
  struct ethtool_coalesce *emg_19_emg_param_1_66;
  #line 698 
  struct ethtool_eee *emg_19_emg_param_1_67;
  #line 699 
  struct ethtool_eeprom *emg_19_emg_param_1_68;
  #line 700 
  struct ethtool_link_ksettings *emg_19_emg_param_1_70;
  #line 701 
  unsigned int emg_19_emg_param_1_71;
  #line 702 
  struct ethtool_pauseparam *emg_19_emg_param_1_72;
  #line 703 
  enum ethtool_phys_id_state *emg_19_emg_param_1_73;
  #line 704 
  unsigned int emg_19_emg_param_1_74;
  #line 705 
  struct ethtool_ringparam *emg_19_emg_param_1_75;
  #line 706 
  unsigned int *emg_19_emg_param_1_76;
  #line 707 
  struct ethtool_rxnfc *emg_19_emg_param_1_79;
  #line 708 
  struct ethtool_link_ksettings *emg_19_emg_param_1_8;
  #line 709 
  struct ethtool_wolinfo *emg_19_emg_param_1_80;
  #line 710 
  struct ethtool_eeprom *emg_19_emg_param_1_9;
  #line 711 
  unsigned char *emg_19_emg_param_2_10;
  #line 712 
  void *emg_19_emg_param_2_14;
  #line 713 
  unsigned char *emg_19_emg_param_2_17;
  #line 714 
  unsigned int *emg_19_emg_param_2_20;
  #line 715 
  unsigned char *emg_19_emg_param_2_23;
  #line 716 
  int emg_19_emg_param_2_28;
  #line 717 
  unsigned long long emg_19_emg_param_2_36;
  #line 718 
  struct ifla_vf_info *emg_19_emg_param_2_40;
  #line 719 
  unsigned char *emg_19_emg_param_2_44;
  #line 720 
  int emg_19_emg_param_2_46;
  #line 721 
  _Bool emg_19_emg_param_2_49;
  #line 722 
  unsigned char *emg_19_emg_param_2_5;
  #line 723 
  _Bool emg_19_emg_param_2_51;
  #line 724 
  unsigned short emg_19_emg_param_2_53;
  #line 725 
  void *emg_19_emg_param_2_57;
  #line 726 
  unsigned short emg_19_emg_param_2_60;
  #line 727 
  unsigned short emg_19_emg_param_2_62;
  #line 728 
  unsigned long long *emg_19_emg_param_2_64;
  #line 729 
  unsigned char *emg_19_emg_param_2_69;
  #line 730 
  unsigned long long *emg_19_emg_param_2_7;
  #line 731 
  unsigned char *emg_19_emg_param_2_77;
  #line 732 
  unsigned char *emg_19_emg_param_3_18;
  #line 733 
  unsigned char *emg_19_emg_param_3_31;
  #line 734 
  int emg_19_emg_param_3_47;
  #line 735 
  unsigned char emg_19_emg_param_3_54;
  #line 736 
  unsigned char emg_19_emg_param_3_78;
  #line 737 
  unsigned short emg_19_emg_param_4_32;
  #line 738 
  unsigned short emg_19_emg_param_4_55;
  #line 739 
  unsigned short emg_19_emg_param_5_33;
  #line 740 
  struct netlink_ext_ack *emg_19_emg_param_6_34;
  #line 741 
  int emg_repeat_cnt_call_19 = 1;
  #line 743 
  struct emg_struct_random_allocationless_scenario_igb_ethtool_begin_19 *data = (struct emg_struct_random_allocationless_scenario_igb_ethtool_begin_19 *)arg0;
  #line 748 
  if (data != (struct emg_struct_random_allocationless_scenario_igb_ethtool_begin_19 *)0) {
    #line 749 
    emg_19_container = data->arg0;
    #line 750 
    ldv_free((void *)data);
  }
  #line 755 
  goto emg_call_19;
  #line 759 
  return (void *)0;
  #line 762 
  emg_call_19: 
               #line 762 
  ;
  #line 763 
  switch (ldv_undef_int()) {
    #line 764 
    case 0: 
            #line 764 
    ;
    #line 766 
    emg_19_emg_param_1_80 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 766 
    emg_19_emg_param_1_80 = emg_19_emg_param_1_80;
    #line 770 
    emg_wrapper_igb_set_wol(emg_19_container,emg_19_emg_param_1_80);
    #line 774 
    ldv_free((void *)emg_19_emg_param_1_80);
    #line 776 
    break;
    #line 778 
    case 1: 
            #line 778 
    ;
    #line 780 
    emg_19_emg_param_1_79 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 780 
    emg_19_emg_param_1_79 = emg_19_emg_param_1_79;
    #line 784 
    emg_wrapper_igb_set_rxnfc(emg_19_container,emg_19_emg_param_1_79);
    #line 788 
    ldv_free((void *)emg_19_emg_param_1_79);
    #line 790 
    break;
    #line 792 
    case 2: 
            #line 792 
    ;
    #line 794 
    emg_19_emg_param_1_76 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 794 
    emg_19_emg_param_1_76 = emg_19_emg_param_1_76;
    #line 795 
    emg_19_emg_param_2_77 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 795 
    emg_19_emg_param_2_77 = emg_19_emg_param_2_77;
    #line 799 
    emg_wrapper_igb_set_rxfh(emg_19_container,emg_19_emg_param_1_76,emg_19_emg_param_2_77,(unsigned char)((int)emg_19_emg_param_3_78));
    #line 803 
    ldv_free((void *)emg_19_emg_param_1_76);
    #line 804 
    ldv_free((void *)emg_19_emg_param_2_77);
    #line 806 
    break;
    #line 808 
    case 3: 
            #line 808 
    ;
    #line 810 
    emg_19_emg_param_1_75 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 810 
    emg_19_emg_param_1_75 = emg_19_emg_param_1_75;
    #line 814 
    emg_wrapper_igb_set_ringparam(emg_19_container,emg_19_emg_param_1_75);
    #line 818 
    ldv_free((void *)emg_19_emg_param_1_75);
    #line 820 
    break;
    #line 822 
    case 4: 
            #line 822 
    ;
    #line 824 
    emg_wrapper_igb_set_priv_flags(emg_19_container,emg_19_emg_param_1_74);
    #line 826 
    break;
    #line 828 
    case 5: 
            #line 828 
    ;
    #line 830 
    emg_19_emg_param_1_73 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 830 
    emg_19_emg_param_1_73 = emg_19_emg_param_1_73;
    #line 834 
    emg_wrapper_igb_set_phys_id(emg_19_container,*emg_19_emg_param_1_73);
    #line 838 
    ldv_free((void *)emg_19_emg_param_1_73);
    #line 840 
    break;
    #line 842 
    case 6: 
            #line 842 
    ;
    #line 844 
    emg_19_emg_param_1_72 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 844 
    emg_19_emg_param_1_72 = emg_19_emg_param_1_72;
    #line 848 
    emg_wrapper_igb_set_pauseparam(emg_19_container,emg_19_emg_param_1_72);
    #line 852 
    ldv_free((void *)emg_19_emg_param_1_72);
    #line 854 
    break;
    #line 856 
    case 7: 
            #line 856 
    ;
    #line 858 
    emg_wrapper_igb_set_msglevel(emg_19_container,emg_19_emg_param_1_71);
    #line 860 
    break;
    #line 862 
    case 8: 
            #line 862 
    ;
    #line 864 
    emg_19_emg_param_1_70 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 864 
    emg_19_emg_param_1_70 = emg_19_emg_param_1_70;
    #line 868 
    emg_wrapper_igb_set_link_ksettings(emg_19_container,emg_19_emg_param_1_70);
    #line 872 
    ldv_free((void *)emg_19_emg_param_1_70);
    #line 874 
    break;
    #line 876 
    case 9: 
            #line 876 
    ;
    #line 878 
    emg_19_emg_param_1_68 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 878 
    emg_19_emg_param_1_68 = emg_19_emg_param_1_68;
    #line 879 
    emg_19_emg_param_2_69 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 879 
    emg_19_emg_param_2_69 = emg_19_emg_param_2_69;
    #line 883 
    emg_wrapper_igb_set_eeprom(emg_19_container,emg_19_emg_param_1_68,emg_19_emg_param_2_69);
    #line 887 
    ldv_free((void *)emg_19_emg_param_1_68);
    #line 888 
    ldv_free((void *)emg_19_emg_param_2_69);
    #line 890 
    break;
    #line 892 
    case 10: 
             #line 892 
    ;
    #line 894 
    emg_19_emg_param_1_67 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 894 
    emg_19_emg_param_1_67 = emg_19_emg_param_1_67;
    #line 898 
    emg_wrapper_igb_set_eee(emg_19_container,emg_19_emg_param_1_67);
    #line 902 
    ldv_free((void *)emg_19_emg_param_1_67);
    #line 904 
    break;
    #line 906 
    case 11: 
             #line 906 
    ;
    #line 908 
    emg_19_emg_param_1_66 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 908 
    emg_19_emg_param_1_66 = emg_19_emg_param_1_66;
    #line 912 
    emg_wrapper_igb_set_coalesce(emg_19_container,emg_19_emg_param_1_66);
    #line 916 
    ldv_free((void *)emg_19_emg_param_1_66);
    #line 918 
    break;
    #line 920 
    case 12: 
             #line 920 
    ;
    #line 922 
    emg_19_emg_param_1_65 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 922 
    emg_19_emg_param_1_65 = emg_19_emg_param_1_65;
    #line 926 
    emg_wrapper_igb_set_channels(emg_19_container,emg_19_emg_param_1_65);
    #line 930 
    ldv_free((void *)emg_19_emg_param_1_65);
    #line 932 
    break;
    #line 934 
    case 13: 
             #line 934 
    ;
    #line 936 
    emg_19_emg_param_1_63 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 936 
    emg_19_emg_param_1_63 = emg_19_emg_param_1_63;
    #line 937 
    emg_19_emg_param_2_64 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 937 
    emg_19_emg_param_2_64 = emg_19_emg_param_2_64;
    #line 941 
    emg_wrapper_igb_diag_test(emg_19_container,emg_19_emg_param_1_63,emg_19_emg_param_2_64);
    #line 945 
    ldv_free((void *)emg_19_emg_param_1_63);
    #line 946 
    ldv_free((void *)emg_19_emg_param_2_64);
    #line 948 
    break;
    #line 950 
    case 14: 
             #line 950 
    ;
    #line 952 
    emg_wrapper_igb_nway_reset(emg_19_container);
    #line 954 
    break;
    #line 956 
    case 15: 
             #line 956 
    ;
    #line 958 
    emg_wrapper_igb_vlan_rx_kill_vid(emg_19_container,(unsigned short)((int)emg_19_emg_param_1_61),(unsigned short)((int)emg_19_emg_param_2_62));
    #line 960 
    break;
    #line 962 
    case 16: 
             #line 962 
    ;
    #line 964 
    emg_wrapper_igb_vlan_rx_add_vid(emg_19_container,(unsigned short)((int)emg_19_emg_param_1_59),(unsigned short)((int)emg_19_emg_param_2_60));
    #line 966 
    break;
    #line 968 
    case 17: 
             #line 968 
    ;
    #line 970 
    (*emg_alias_eth_validate_addr)(emg_19_container);
    #line 972 
    break;
    #line 974 
    case 18: 
             #line 974 
    ;
    #line 976 
    emg_wrapper_igb_tx_timeout(emg_19_container);
    #line 978 
    break;
    #line 980 
    case 19: 
             #line 980 
    ;
    #line 982 
    emg_19_emg_param_0_58 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 982 
    emg_19_emg_param_0_58 = emg_19_emg_param_0_58;
    #line 986 
    emg_wrapper_igb_xmit_frame(emg_19_emg_param_0_58,emg_19_container);
    #line 990 
    ldv_free((void *)emg_19_emg_param_0_58);
    #line 992 
    break;
    #line 994 
    case 20: 
             #line 994 
    ;
    #line 996 
    emg_19_emg_param_1_56 = (enum tc_setup_type *)ldv_xmalloc_unknown_size(0UL);
    #line 996 
    emg_19_emg_param_1_56 = emg_19_emg_param_1_56;
    #line 997 
    emg_19_emg_param_2_57 = ldv_xmalloc_unknown_size(0UL);
    #line 997 
    emg_19_emg_param_2_57 = emg_19_emg_param_2_57;
    #line 1001 
    emg_wrapper_igb_setup_tc(emg_19_container,*emg_19_emg_param_1_56,emg_19_emg_param_2_57);
    #line 1005 
    ldv_free((void *)emg_19_emg_param_1_56);
    #line 1006 
    ldv_free(emg_19_emg_param_2_57);
    #line 1008 
    break;
    #line 1010 
    case 21: 
             #line 1010 
    ;
    #line 1012 
    emg_wrapper_igb_ndo_set_vf_vlan(emg_19_container,emg_19_emg_param_1_52,(unsigned short)((int)emg_19_emg_param_2_53),(unsigned char)((int)emg_19_emg_param_3_54),(unsigned short)((int)emg_19_emg_param_4_55));
    #line 1014 
    break;
    #line 1016 
    case 22: 
             #line 1016 
    ;
    #line 1018 
    emg_wrapper_igb_ndo_set_vf_trust(emg_19_container,emg_19_emg_param_1_50,(_Bool)((_Bool)((int)emg_19_emg_param_2_51) != 0));
    #line 1020 
    break;
    #line 1022 
    case 23: 
             #line 1022 
    ;
    #line 1024 
    emg_wrapper_igb_ndo_set_vf_spoofchk(emg_19_container,emg_19_emg_param_1_48,(_Bool)((_Bool)((int)emg_19_emg_param_2_49) != 0));
    #line 1026 
    break;
    #line 1028 
    case 24: 
             #line 1028 
    ;
    #line 1030 
    emg_wrapper_igb_ndo_set_vf_bw(emg_19_container,emg_19_emg_param_1_45,emg_19_emg_param_2_46,emg_19_emg_param_3_47);
    #line 1032 
    break;
    #line 1034 
    case 25: 
             #line 1034 
    ;
    #line 1036 
    emg_19_emg_param_2_44 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1036 
    emg_19_emg_param_2_44 = emg_19_emg_param_2_44;
    #line 1040 
    emg_wrapper_igb_ndo_set_vf_mac(emg_19_container,emg_19_emg_param_1_43,emg_19_emg_param_2_44);
    #line 1044 
    ldv_free((void *)emg_19_emg_param_2_44);
    #line 1046 
    break;
    #line 1048 
    case 26: 
             #line 1048 
    ;
    #line 1050 
    emg_wrapper_igb_set_rx_mode(emg_19_container);
    #line 1052 
    break;
    #line 1054 
    case 27: 
             #line 1054 
    ;
    #line 1056 
    emg_19_emg_param_1_42 = ldv_xmalloc_unknown_size(0UL);
    #line 1056 
    emg_19_emg_param_1_42 = emg_19_emg_param_1_42;
    #line 1060 
    emg_wrapper_igb_set_mac(emg_19_container,emg_19_emg_param_1_42);
    #line 1064 
    ldv_free(emg_19_emg_param_1_42);
    #line 1066 
    break;
    #line 1068 
    case 28: 
             #line 1068 
    ;
    #line 1070 
    emg_wrapper_igb_set_features(emg_19_container,emg_19_emg_param_1_41);
    #line 1072 
    break;
    #line 1074 
    case 29: 
             #line 1074 
    ;
    #line 1076 
    emg_19_emg_param_2_40 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1076 
    emg_19_emg_param_2_40 = emg_19_emg_param_2_40;
    #line 1080 
    emg_wrapper_igb_ndo_get_vf_config(emg_19_container,emg_19_emg_param_1_39,emg_19_emg_param_2_40);
    #line 1084 
    ldv_free((void *)emg_19_emg_param_2_40);
    #line 1086 
    break;
    #line 1088 
    case 30: 
             #line 1088 
    ;
    #line 1090 
    emg_19_emg_param_1_38 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 1090 
    emg_19_emg_param_1_38 = emg_19_emg_param_1_38;
    #line 1094 
    emg_wrapper_igb_get_stats64(emg_19_container,emg_19_emg_param_1_38);
    #line 1098 
    ldv_free((void *)emg_19_emg_param_1_38);
    #line 1100 
    break;
    #line 1102 
    case 31: 
             #line 1102 
    ;
    #line 1104 
    emg_wrapper_igb_fix_features(emg_19_container,emg_19_emg_param_1_37);
    #line 1106 
    break;
    #line 1108 
    case 32: 
             #line 1108 
    ;
    #line 1110 
    emg_19_emg_param_0_35 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1110 
    emg_19_emg_param_0_35 = emg_19_emg_param_0_35;
    #line 1114 
    emg_wrapper_igb_features_check(emg_19_emg_param_0_35,emg_19_container,emg_19_emg_param_2_36);
    #line 1118 
    ldv_free((void *)emg_19_emg_param_0_35);
    #line 1120 
    break;
    #line 1122 
    case 33: 
             #line 1122 
    ;
    #line 1124 
    emg_19_emg_param_0_29 = (struct ndmsg *)ldv_xmalloc_unknown_size(0UL);
    #line 1124 
    emg_19_emg_param_0_29 = emg_19_emg_param_0_29;
    #line 1125 
    emg_19_emg_param_1_30 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
    #line 1125 
    emg_19_emg_param_1_30 = emg_19_emg_param_1_30;
    #line 1126 
    emg_19_emg_param_3_31 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1126 
    emg_19_emg_param_3_31 = emg_19_emg_param_3_31;
    #line 1127 
    emg_19_emg_param_6_34 = (struct netlink_ext_ack *)ldv_xmalloc_unknown_size(0UL);
    #line 1127 
    emg_19_emg_param_6_34 = emg_19_emg_param_6_34;
    #line 1131 
    emg_wrapper_igb_ndo_fdb_add(emg_19_emg_param_0_29,emg_19_emg_param_1_30,emg_19_container,emg_19_emg_param_3_31,(unsigned short)((int)emg_19_emg_param_4_32),(unsigned short)((int)emg_19_emg_param_5_33),emg_19_emg_param_6_34);
    #line 1135 
    ldv_free((void *)emg_19_emg_param_0_29);
    #line 1136 
    ldv_free((void *)emg_19_emg_param_1_30);
    #line 1137 
    ldv_free((void *)emg_19_emg_param_3_31);
    #line 1138 
    ldv_free((void *)emg_19_emg_param_6_34);
    #line 1140 
    break;
    #line 1142 
    case 34: 
             #line 1142 
    ;
    #line 1144 
    emg_19_emg_param_1_27 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 1144 
    emg_19_emg_param_1_27 = emg_19_emg_param_1_27;
    #line 1148 
    emg_wrapper_igb_ioctl(emg_19_container,emg_19_emg_param_1_27,emg_19_emg_param_2_28);
    #line 1152 
    ldv_free((void *)emg_19_emg_param_1_27);
    #line 1154 
    break;
    #line 1156 
    case 35: 
             #line 1156 
    ;
    #line 1158 
    emg_wrapper_igb_change_mtu(emg_19_container,emg_19_emg_param_1_26);
    #line 1160 
    break;
    #line 1162 
    case 36: 
             #line 1162 
    ;
    #line 1164 
    emg_19_emg_param_1_25 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1164 
    emg_19_emg_param_1_25 = emg_19_emg_param_1_25;
    #line 1168 
    emg_wrapper_igb_get_wol(emg_19_container,emg_19_emg_param_1_25);
    #line 1172 
    ldv_free((void *)emg_19_emg_param_1_25);
    #line 1174 
    break;
    #line 1176 
    case 37: 
             #line 1176 
    ;
    #line 1178 
    emg_19_emg_param_1_24 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1178 
    emg_19_emg_param_1_24 = emg_19_emg_param_1_24;
    #line 1182 
    emg_wrapper_igb_get_ts_info(emg_19_container,emg_19_emg_param_1_24);
    #line 1186 
    ldv_free((void *)emg_19_emg_param_1_24);
    #line 1188 
    break;
    #line 1190 
    case 38: 
             #line 1190 
    ;
    #line 1192 
    emg_19_emg_param_2_23 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1192 
    emg_19_emg_param_2_23 = emg_19_emg_param_2_23;
    #line 1196 
    emg_wrapper_igb_get_strings(emg_19_container,emg_19_emg_param_1_22,emg_19_emg_param_2_23);
    #line 1200 
    ldv_free((void *)emg_19_emg_param_2_23);
    #line 1202 
    break;
    #line 1204 
    case 39: 
             #line 1204 
    ;
    #line 1206 
    emg_wrapper_igb_get_sset_count(emg_19_container,emg_19_emg_param_1_21);
    #line 1208 
    break;
    #line 1210 
    case 40: 
             #line 1210 
    ;
    #line 1212 
    emg_19_emg_param_1_19 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 1212 
    emg_19_emg_param_1_19 = emg_19_emg_param_1_19;
    #line 1213 
    emg_19_emg_param_2_20 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1213 
    emg_19_emg_param_2_20 = emg_19_emg_param_2_20;
    #line 1217 
    emg_wrapper_igb_get_rxnfc(emg_19_container,emg_19_emg_param_1_19,emg_19_emg_param_2_20);
    #line 1221 
    ldv_free((void *)emg_19_emg_param_1_19);
    #line 1222 
    ldv_free((void *)emg_19_emg_param_2_20);
    #line 1224 
    break;
    #line 1226 
    case 41: 
             #line 1226 
    ;
    #line 1228 
    emg_wrapper_igb_get_rxfh_indir_size(emg_19_container);
    #line 1230 
    break;
    #line 1232 
    case 42: 
             #line 1232 
    ;
    #line 1234 
    emg_19_emg_param_1_16 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1234 
    emg_19_emg_param_1_16 = emg_19_emg_param_1_16;
    #line 1235 
    emg_19_emg_param_2_17 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1235 
    emg_19_emg_param_2_17 = emg_19_emg_param_2_17;
    #line 1236 
    emg_19_emg_param_3_18 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1236 
    emg_19_emg_param_3_18 = emg_19_emg_param_3_18;
    #line 1240 
    emg_wrapper_igb_get_rxfh(emg_19_container,emg_19_emg_param_1_16,emg_19_emg_param_2_17,emg_19_emg_param_3_18);
    #line 1244 
    ldv_free((void *)emg_19_emg_param_1_16);
    #line 1245 
    ldv_free((void *)emg_19_emg_param_2_17);
    #line 1246 
    ldv_free((void *)emg_19_emg_param_3_18);
    #line 1248 
    break;
    #line 1250 
    case 43: 
             #line 1250 
    ;
    #line 1252 
    emg_19_emg_param_1_15 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1252 
    emg_19_emg_param_1_15 = emg_19_emg_param_1_15;
    #line 1256 
    emg_wrapper_igb_get_ringparam(emg_19_container,emg_19_emg_param_1_15);
    #line 1260 
    ldv_free((void *)emg_19_emg_param_1_15);
    #line 1262 
    break;
    #line 1264 
    case 44: 
             #line 1264 
    ;
    #line 1266 
    emg_wrapper_igb_get_regs_len(emg_19_container);
    #line 1268 
    break;
    #line 1270 
    case 45: 
             #line 1270 
    ;
    #line 1272 
    emg_19_emg_param_1_13 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1272 
    emg_19_emg_param_1_13 = emg_19_emg_param_1_13;
    #line 1273 
    emg_19_emg_param_2_14 = ldv_xmalloc_unknown_size(0UL);
    #line 1273 
    emg_19_emg_param_2_14 = emg_19_emg_param_2_14;
    #line 1277 
    emg_wrapper_igb_get_regs(emg_19_container,emg_19_emg_param_1_13,emg_19_emg_param_2_14);
    #line 1281 
    ldv_free((void *)emg_19_emg_param_1_13);
    #line 1282 
    ldv_free(emg_19_emg_param_2_14);
    #line 1284 
    break;
    #line 1286 
    case 46: 
             #line 1286 
    ;
    #line 1288 
    emg_wrapper_igb_get_priv_flags(emg_19_container);
    #line 1290 
    break;
    #line 1292 
    case 47: 
             #line 1292 
    ;
    #line 1294 
    emg_19_emg_param_1_12 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1294 
    emg_19_emg_param_1_12 = emg_19_emg_param_1_12;
    #line 1298 
    emg_wrapper_igb_get_pauseparam(emg_19_container,emg_19_emg_param_1_12);
    #line 1302 
    ldv_free((void *)emg_19_emg_param_1_12);
    #line 1304 
    break;
    #line 1306 
    case 48: 
             #line 1306 
    ;
    #line 1308 
    emg_wrapper_igb_get_msglevel(emg_19_container);
    #line 1310 
    break;
    #line 1312 
    case 49: 
             #line 1312 
    ;
    #line 1314 
    emg_19_emg_param_1_11 = (struct ethtool_modinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1314 
    emg_19_emg_param_1_11 = emg_19_emg_param_1_11;
    #line 1318 
    emg_wrapper_igb_get_module_info(emg_19_container,emg_19_emg_param_1_11);
    #line 1322 
    ldv_free((void *)emg_19_emg_param_1_11);
    #line 1324 
    break;
    #line 1326 
    case 50: 
             #line 1326 
    ;
    #line 1328 
    emg_19_emg_param_1_9 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1328 
    emg_19_emg_param_1_9 = emg_19_emg_param_1_9;
    #line 1329 
    emg_19_emg_param_2_10 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1329 
    emg_19_emg_param_2_10 = emg_19_emg_param_2_10;
    #line 1333 
    emg_wrapper_igb_get_module_eeprom(emg_19_container,emg_19_emg_param_1_9,emg_19_emg_param_2_10);
    #line 1337 
    ldv_free((void *)emg_19_emg_param_1_9);
    #line 1338 
    ldv_free((void *)emg_19_emg_param_2_10);
    #line 1340 
    break;
    #line 1342 
    case 51: 
             #line 1342 
    ;
    #line 1344 
    emg_19_emg_param_1_8 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1344 
    emg_19_emg_param_1_8 = emg_19_emg_param_1_8;
    #line 1348 
    emg_wrapper_igb_get_link_ksettings(emg_19_container,emg_19_emg_param_1_8);
    #line 1352 
    ldv_free((void *)emg_19_emg_param_1_8);
    #line 1354 
    break;
    #line 1356 
    case 52: 
             #line 1356 
    ;
    #line 1358 
    emg_wrapper_igb_get_link(emg_19_container);
    #line 1360 
    break;
    #line 1362 
    case 53: 
             #line 1362 
    ;
    #line 1364 
    emg_19_emg_param_1_6 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1364 
    emg_19_emg_param_1_6 = emg_19_emg_param_1_6;
    #line 1365 
    emg_19_emg_param_2_7 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1365 
    emg_19_emg_param_2_7 = emg_19_emg_param_2_7;
    #line 1369 
    emg_wrapper_igb_get_ethtool_stats(emg_19_container,emg_19_emg_param_1_6,emg_19_emg_param_2_7);
    #line 1373 
    ldv_free((void *)emg_19_emg_param_1_6);
    #line 1374 
    ldv_free((void *)emg_19_emg_param_2_7);
    #line 1376 
    break;
    #line 1378 
    case 54: 
             #line 1378 
    ;
    #line 1380 
    emg_wrapper_igb_get_eeprom_len(emg_19_container);
    #line 1382 
    break;
    #line 1384 
    case 55: 
             #line 1384 
    ;
    #line 1386 
    emg_19_emg_param_1_4 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1386 
    emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
    #line 1387 
    emg_19_emg_param_2_5 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1387 
    emg_19_emg_param_2_5 = emg_19_emg_param_2_5;
    #line 1391 
    emg_wrapper_igb_get_eeprom(emg_19_container,emg_19_emg_param_1_4,emg_19_emg_param_2_5);
    #line 1395 
    ldv_free((void *)emg_19_emg_param_1_4);
    #line 1396 
    ldv_free((void *)emg_19_emg_param_2_5);
    #line 1398 
    break;
    #line 1400 
    case 56: 
             #line 1400 
    ;
    #line 1402 
    emg_19_emg_param_1_3 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 1402 
    emg_19_emg_param_1_3 = emg_19_emg_param_1_3;
    #line 1406 
    emg_wrapper_igb_get_eee(emg_19_container,emg_19_emg_param_1_3);
    #line 1410 
    ldv_free((void *)emg_19_emg_param_1_3);
    #line 1412 
    break;
    #line 1414 
    case 57: 
             #line 1414 
    ;
    #line 1416 
    emg_19_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1416 
    emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
    #line 1420 
    emg_wrapper_igb_get_drvinfo(emg_19_container,emg_19_emg_param_1_2);
    #line 1424 
    ldv_free((void *)emg_19_emg_param_1_2);
    #line 1426 
    break;
    #line 1428 
    case 58: 
             #line 1428 
    ;
    #line 1430 
    emg_19_emg_param_1_1 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1430 
    emg_19_emg_param_1_1 = emg_19_emg_param_1_1;
    #line 1434 
    emg_wrapper_igb_get_coalesce(emg_19_container,emg_19_emg_param_1_1);
    #line 1438 
    ldv_free((void *)emg_19_emg_param_1_1);
    #line 1440 
    break;
    #line 1442 
    case 59: 
             #line 1442 
    ;
    #line 1444 
    emg_19_emg_param_1_0 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1444 
    emg_19_emg_param_1_0 = emg_19_emg_param_1_0;
    #line 1448 
    emg_wrapper_igb_get_channels(emg_19_container,emg_19_emg_param_1_0);
    #line 1452 
    ldv_free((void *)emg_19_emg_param_1_0);
    #line 1454 
    break;
    #line 1456 
    case 60: 
             #line 1456 
    ;
    #line 1458 
    emg_wrapper_igb_ethtool_complete(emg_19_container);
    #line 1460 
    break;
    #line 1462 
    case 61: 
             #line 1462 
    ;
    #line 1464 
    emg_wrapper_igb_ethtool_begin(emg_19_container);
    #line 1467 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 1468 
      emg_repeat_cnt_call_19 --;
      #line 1470 
      goto emg_call_19;
    }
    else 
         #line 1472 
         __VERIFIER_assume(0);
    #line 1476 
    break;
    #line 1478 
    case 62: 
             #line 1478 
    ;
    #line 1482 
    break;
    #line 1484 
    default: 
             #line 1484 
    ;
    #line 1484 
    __VERIFIER_assume(0);
  }
  #line 1487 
  return (void *)0;
}

#line 1492  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_igb_driver(void *arg0)
{
  #line 1495 
  int emg_20_choice;
  #line 1496 
  struct pci_driver *emg_20_container;
  #line 1497 
  struct pci_device_id *emg_20_device_id;
  #line 1498 
  int emg_20_emg_param_1_0;
  #line 1499 
  struct pci_dev *emg_20_resource_0;
  #line 1500 
  struct pm_message emg_20_resource_1;
  #line 1501 
  int emg_20_ret;
  #line 1502 
  int emg_repeat_cnt_call_20_1 = 1;
  #line 1503 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 1504 
  int emg_repeat_cnt_call_20_0 = 1;
  #line 1505 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 1507 
  struct emg_struct_pci_scenario_igb_driver_20 *data = (struct emg_struct_pci_scenario_igb_driver_20 *)arg0;
  #line 1511 
  emg_20_choice = 0;
  #line 1512 
  emg_20_ret = ldv_undef_int();
  #line 1513 
  emg_20_choice = 0;
  #line 1514 
  emg_20_container = emg_alias_igb_driver;
  #line 1515 
  emg_20_ret = ldv_undef_int();
  #line 1517 
  __VERIFIER_assume(data->arg0 == emg_alias_igb_driver);
  #line 1519 
  if (data != (struct emg_struct_pci_scenario_igb_driver_20 *)0) {
    #line 1520 
    emg_20_container = data->arg0;
    #line 1521 
    ldv_free((void *)data);
  }
  #line 1526 
  emg_20_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1527 
  emg_20_choice = __ldv_undef_int_range(0,35);
  #line 1528 
  emg_20_device_id = emg_20_container->id_table + (unsigned long)emg_20_choice;
  #line 1532 
  goto emg_main_20;
  #line 1536 
  return (void *)0;
  #line 1539 
  emg_call_20: 
               #line 1539 
  ;
  #line 1540 
  switch (ldv_undef_int()) {
    #line 1541 
    case 0: 
            #line 1541 
    ;
    #line 1543 
    emg_wrapper_igb_pci_sriov_configure(emg_20_resource_0,emg_20_emg_param_1_0);
    #line 1546 
    if (emg_repeat_cnt_call_20_1 > 0) {
      #line 1547 
      emg_repeat_cnt_call_20_1 --;
      #line 1549 
      goto emg_call_20;
    }
    else 
         #line 1551 
         __VERIFIER_assume(0);
    #line 1555 
    break;
    #line 1557 
    case 1: 
            #line 1557 
    ;
    #line 1559 
    if (emg_20_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1560 
      emg_20_ret = (*(emg_20_container->suspend))(emg_20_resource_0,emg_20_resource_1); else 
                                                                    #line 1562 
                                                                    emg_20_ret = ldv_undef_int();
    #line 1568 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 1572 
    if (emg_20_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1573 
                                                                  (*(emg_20_container->resume))(emg_20_resource_0);
    #line 1577 
    if (emg_repeat_cnt_call_20_0 > 0) {
      #line 1578 
      emg_repeat_cnt_call_20_0 --;
      #line 1580 
      goto emg_call_20;
    }
    else 
         #line 1582 
         __VERIFIER_assume(0);
    #line 1586 
    break;
    #line 1588 
    case 2: 
            #line 1588 
    ;
    #line 1590 
    emg_wrapper_igb_shutdown(emg_20_resource_0);
    #line 1594 
    emg_wrapper_igb_remove(emg_20_resource_0);
    #line 1597 
    if (emg_repeat_cnt_main_20_1 > 0) {
      #line 1598 
      emg_repeat_cnt_main_20_1 --;
      #line 1600 
      goto emg_main_20;
    }
    else 
         #line 1602 
         __VERIFIER_assume(0);
    #line 1606 
    break;
    #line 1608 
    default: 
             #line 1608 
    ;
    #line 1608 
    __VERIFIER_assume(0);
  }
  #line 1611 
  return (void *)0;
  #line 1614 
  emg_main_20: 
               #line 1614 
  ;
  #line 1615 
  if (ldv_undef_int() != 0) {
    #line 1618 
    ldv_pre_probe();
    #line 1622 
    emg_20_ret = emg_wrapper_igb_probe(emg_20_resource_0,emg_20_device_id);
    #line 1627 
    emg_20_ret = ldv_post_probe(emg_20_ret);
    #line 1630 
    if (ldv_undef_int() != 0) {
      #line 1632 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 1636 
      goto emg_call_20;
    }
    else 
         #line 1641 
         __VERIFIER_assume(emg_20_ret != 0);
    #line 1645 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 1646 
      emg_repeat_cnt_main_20_0 --;
      #line 1648 
      goto emg_main_20;
    }
    else 
         #line 1650 
         __VERIFIER_assume(0);
  }
  else 
       #line 1656 
       ldv_free((void *)emg_20_resource_0);
  #line 1664 
  return (void *)0;
}

#line 1669  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_igb_pm_ops(void *arg0)
{
  #line 1672 
  struct device *emg_21_device;
  #line 1673 
  struct dev_pm_ops *emg_21_pm_ops;
  #line 1674 
  int emg_21_ret;
  #line 1675 
  int emg_repeat_cnt_resnoirq_21 = 1;
  #line 1676 
  int emg_repeat_cnt_no_irq_21 = 1;
  #line 1677 
  int emg_repeat_cnt_th_21 = 1;
  #line 1678 
  int emg_repeat_cnt_rest_21 = 1;
  #line 1679 
  int emg_repeat_cnt_tnoirq_21 = 1;
  #line 1680 
  int emg_repeat_cnt_plate_21 = 1;
  #line 1681 
  int emg_repeat_cnt_fr_21 = 1;
  #line 1682 
  int emg_repeat_cnt_reslate_21 = 1;
  #line 1683 
  int emg_repeat_cnt_sus_21 = 1;
  #line 1684 
  int emg_repeat_cnt_slate_21 = 1;
  #line 1685 
  int emg_repeat_cnt_run_resume_21 = 1;
  #line 1686 
  int emg_repeat_cnt_pno_irq_21 = 1;
  #line 1687 
  int emg_repeat_cnt_poff_21 = 1;
  #line 1688 
  int emg_repeat_cnt_fnoirq_21 = 1;
  #line 1689 
  int emg_repeat_cnt_reste_21 = 1;
  #line 1690 
  int emg_repeat_cnt_restnoirq_21 = 1;
  #line 1691 
  int emg_repeat_cnt_flate_21 = 1;
  #line 1692 
  int emg_repeat_cnt_res_21 = 1;
  #line 1693 
  int emg_repeat_cnt_thlate_21 = 1;
  #line 1696 
  emg_21_ret = ldv_undef_int();
  #line 1697 
  emg_21_pm_ops = emg_alias_igb_pm_ops;
  #line 1698 
  emg_21_ret = ldv_undef_int();
  #line 1704 
  goto emg_do_21;
  #line 1708 
  return (void *)0;
  #line 1711 
  emg_compl_21: 
                #line 1711 
  ;
  #line 1713 
  if (emg_21_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 1714 
                                                               (*(emg_21_pm_ops->complete))(emg_21_device);
  #line 1722 
  return (void *)0;
  #line 1725 
  emg_do_21: 
             #line 1725 
  ;
  #line 1726 
  switch (ldv_undef_int()) {
    #line 1727 
    case 0: 
            #line 1727 
    ;
    #line 1729 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 1733 
    goto emg_runt_21;
    #line 1738 
    case 1: 
            #line 1738 
    ;
    #line 1740 
    goto emg_normal_21;
    #line 1745 
    case 2: 
            #line 1745 
    ;
    #line 1749 
    break;
    #line 1751 
    default: 
             #line 1751 
    ;
    #line 1751 
    __VERIFIER_assume(0);
  }
  #line 1754 
  return (void *)0;
  #line 1757 
  emg_flate_21: 
                #line 1757 
  ;
  #line 1759 
  if (emg_21_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 1760 
                                                                 emg_21_ret = (*(emg_21_pm_ops->freeze_late))(emg_21_device); else 
                                                                    #line 1762 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1768 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1771 
  if (ldv_undef_int() != 0) {
    #line 1773 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1777 
    goto emg_thlate_21;
  }
  else 
       #line 1782 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1786 
  if (emg_repeat_cnt_flate_21 > 0) {
    #line 1787 
    emg_repeat_cnt_flate_21 --;
    #line 1789 
    goto emg_flate_21;
  }
  else 
       #line 1791 
       __VERIFIER_assume(0);
  #line 1796 
  return (void *)0;
  #line 1799 
  emg_fnoirq_21: 
                 #line 1799 
  ;
  #line 1801 
  if (emg_21_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 1802 
                                                                  emg_21_ret = (*(emg_21_pm_ops->freeze_noirq))(emg_21_device); else 
                                                                    #line 1804 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1810 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1813 
  if (ldv_undef_int() != 0) {
    #line 1815 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1819 
    goto emg_tnoirq_21;
  }
  else 
       #line 1824 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1828 
  if (emg_repeat_cnt_fnoirq_21 > 0) {
    #line 1829 
    emg_repeat_cnt_fnoirq_21 --;
    #line 1831 
    goto emg_fnoirq_21;
  }
  else 
       #line 1833 
       __VERIFIER_assume(0);
  #line 1838 
  return (void *)0;
  #line 1841 
  emg_fr_21: 
             #line 1841 
  ;
  #line 1843 
  emg_21_ret = emg_wrapper_igb_suspend(emg_21_device);
  #line 1848 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1851 
  if (ldv_undef_int() != 0) {
    #line 1853 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1856 
    if (ldv_undef_int() != 0) 
                              #line 1858 
                              goto emg_fnoirq_21; else 
                                                       #line 1863 
                                                       goto emg_flate_21;
  }
  else {
    #line 1869 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 1872 
    if (emg_repeat_cnt_fr_21 > 0) {
      #line 1873 
      emg_repeat_cnt_fr_21 --;
      #line 1875 
      goto emg_fr_21;
    }
    else 
         #line 1877 
         __VERIFIER_assume(0);
  }
  #line 1883 
  return (void *)0;
  #line 1886 
  emg_no_irq_21: 
                 #line 1886 
  ;
  #line 1888 
  if (emg_21_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 1889 
                                                                   emg_21_ret = (*(emg_21_pm_ops->suspend_noirq))(emg_21_device); else 
                                                                    #line 1891 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1897 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1900 
  if (ldv_undef_int() != 0) {
    #line 1902 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1906 
    goto emg_resnoirq_21;
  }
  else 
       #line 1911 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1915 
  if (emg_repeat_cnt_no_irq_21 > 0) {
    #line 1916 
    emg_repeat_cnt_no_irq_21 --;
    #line 1918 
    goto emg_no_irq_21;
  }
  else 
       #line 1920 
       __VERIFIER_assume(0);
  #line 1925 
  return (void *)0;
  #line 1928 
  emg_normal_21: 
                 #line 1928 
  ;
  #line 1930 
  if (emg_21_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 1931 
                                                             emg_21_ret = (*(emg_21_pm_ops->prepare))(emg_21_device); else 
                                                                    #line 1933 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1939 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1942 
  if (ldv_undef_int() != 0) {
    #line 1944 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1947 
    switch (ldv_undef_int()) {
      #line 1948 
      case 0: 
              #line 1948 
      ;
      #line 1950 
      goto emg_sus_21;
      #line 1955 
      case 1: 
              #line 1955 
      ;
      #line 1957 
      goto emg_fr_21;
      #line 1962 
      case 2: 
              #line 1962 
      ;
      #line 1964 
      goto emg_poff_21;
      #line 1969 
      default: 
               #line 1969 
      ;
      #line 1969 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1973 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1981 
  return (void *)0;
  #line 1984 
  emg_plate_21: 
                #line 1984 
  ;
  #line 1986 
  if (emg_21_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1987 
                                                                   emg_21_ret = (*(emg_21_pm_ops->poweroff_late))(emg_21_device); else 
                                                                    #line 1989 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1995 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1998 
  if (ldv_undef_int() != 0) {
    #line 2000 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2004 
    goto emg_reste_21;
  }
  else 
       #line 2009 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2013 
  if (emg_repeat_cnt_plate_21 > 0) {
    #line 2014 
    emg_repeat_cnt_plate_21 --;
    #line 2016 
    goto emg_plate_21;
  }
  else 
       #line 2018 
       __VERIFIER_assume(0);
  #line 2023 
  return (void *)0;
  #line 2026 
  emg_pno_irq_21: 
                  #line 2026 
  ;
  #line 2028 
  if (emg_21_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 2029 
                                                                    emg_21_ret = (*(emg_21_pm_ops->poweroff_noirq))(emg_21_device); else 
                                                                    #line 2031 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2037 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2040 
  if (ldv_undef_int() != 0) {
    #line 2042 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2046 
    goto emg_restnoirq_21;
  }
  else 
       #line 2051 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2055 
  if (emg_repeat_cnt_pno_irq_21 > 0) {
    #line 2056 
    emg_repeat_cnt_pno_irq_21 --;
    #line 2058 
    goto emg_pno_irq_21;
  }
  else 
       #line 2060 
       __VERIFIER_assume(0);
  #line 2065 
  return (void *)0;
  #line 2068 
  emg_poff_21: 
               #line 2068 
  ;
  #line 2070 
  emg_21_ret = emg_wrapper_igb_suspend(emg_21_device);
  #line 2075 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2078 
  if (ldv_undef_int() != 0) {
    #line 2080 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2083 
    if (ldv_undef_int() != 0) 
                              #line 2085 
                              goto emg_pno_irq_21; else 
                                                        #line 2090 
                                                        goto emg_plate_21;
  }
  else {
    #line 2096 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 2099 
    if (emg_repeat_cnt_poff_21 > 0) {
      #line 2100 
      emg_repeat_cnt_poff_21 --;
      #line 2102 
      goto emg_poff_21;
    }
    else 
         #line 2104 
         __VERIFIER_assume(0);
  }
  #line 2110 
  return (void *)0;
  #line 2113 
  emg_res_21: 
              #line 2113 
  ;
  #line 2115 
  emg_21_ret = emg_wrapper_igb_resume(emg_21_device);
  #line 2120 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2123 
  if (ldv_undef_int() != 0) {
    #line 2125 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2129 
    goto emg_compl_21;
  }
  else {
    #line 2134 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 2137 
    if (emg_repeat_cnt_res_21 > 0) {
      #line 2138 
      emg_repeat_cnt_res_21 --;
      #line 2140 
      goto emg_res_21;
    }
    else 
         #line 2142 
         __VERIFIER_assume(0);
  }
  #line 2148 
  return (void *)0;
  #line 2151 
  emg_reslate_21: 
                  #line 2151 
  ;
  #line 2153 
  if (emg_21_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 2154 
                                                                  emg_21_ret = (*(emg_21_pm_ops->resume_early))(emg_21_device); else 
                                                                    #line 2156 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2162 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2165 
  if (ldv_undef_int() != 0) {
    #line 2167 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2171 
    goto emg_res_21;
  }
  else 
       #line 2176 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2180 
  if (emg_repeat_cnt_reslate_21 > 0) {
    #line 2181 
    emg_repeat_cnt_reslate_21 --;
    #line 2183 
    goto emg_reslate_21;
  }
  else 
       #line 2185 
       __VERIFIER_assume(0);
  #line 2190 
  return (void *)0;
  #line 2193 
  emg_resnoirq_21: 
                   #line 2193 
  ;
  #line 2195 
  if (emg_21_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 2196 
                                                                  emg_21_ret = (*(emg_21_pm_ops->resume_noirq))(emg_21_device); else 
                                                                    #line 2198 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2204 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2207 
  if (ldv_undef_int() != 0) {
    #line 2209 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2213 
    goto emg_res_21;
  }
  else 
       #line 2218 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2222 
  if (emg_repeat_cnt_resnoirq_21 > 0) {
    #line 2223 
    emg_repeat_cnt_resnoirq_21 --;
    #line 2225 
    goto emg_resnoirq_21;
  }
  else 
       #line 2227 
       __VERIFIER_assume(0);
  #line 2232 
  return (void *)0;
  #line 2235 
  emg_rest_21: 
               #line 2235 
  ;
  #line 2237 
  emg_21_ret = emg_wrapper_igb_resume(emg_21_device);
  #line 2242 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2245 
  if (ldv_undef_int() != 0) {
    #line 2247 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2251 
    goto emg_compl_21;
  }
  else {
    #line 2256 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 2259 
    if (emg_repeat_cnt_rest_21 > 0) {
      #line 2260 
      emg_repeat_cnt_rest_21 --;
      #line 2262 
      goto emg_rest_21;
    }
    else 
         #line 2264 
         __VERIFIER_assume(0);
  }
  #line 2270 
  return (void *)0;
  #line 2273 
  emg_reste_21: 
                #line 2273 
  ;
  #line 2275 
  if (emg_21_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 2276 
                                                                   emg_21_ret = (*(emg_21_pm_ops->restore_early))(emg_21_device); else 
                                                                    #line 2278 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2284 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2287 
  if (ldv_undef_int() != 0) {
    #line 2289 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2293 
    goto emg_rest_21;
  }
  else 
       #line 2298 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2302 
  if (emg_repeat_cnt_reste_21 > 0) {
    #line 2303 
    emg_repeat_cnt_reste_21 --;
    #line 2305 
    goto emg_reste_21;
  }
  else 
       #line 2307 
       __VERIFIER_assume(0);
  #line 2312 
  return (void *)0;
  #line 2315 
  emg_restnoirq_21: 
                    #line 2315 
  ;
  #line 2317 
  if (emg_21_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 2318 
                                                                   emg_21_ret = (*(emg_21_pm_ops->restore_noirq))(emg_21_device); else 
                                                                    #line 2320 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2326 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2329 
  if (ldv_undef_int() != 0) {
    #line 2331 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2335 
    goto emg_rest_21;
  }
  else 
       #line 2340 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2344 
  if (emg_repeat_cnt_restnoirq_21 > 0) {
    #line 2345 
    emg_repeat_cnt_restnoirq_21 --;
    #line 2347 
    goto emg_restnoirq_21;
  }
  else 
       #line 2349 
       __VERIFIER_assume(0);
  #line 2354 
  return (void *)0;
  #line 2357 
  emg_run_resume_21: 
                     #line 2357 
  ;
  #line 2359 
  emg_21_ret = emg_wrapper_igb_runtime_resume(emg_21_device);
  #line 2364 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2365 
  if (emg_21_ret != 0) 
                       #line 2366 
                       emg_runtime_lowpower = 0;
  #line 2369 
  if (ldv_undef_int() != 0) 
                            #line 2371 
                            __VERIFIER_assume(emg_21_ret == 0);
  else {
    #line 2375 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 2378 
    if (emg_repeat_cnt_run_resume_21 > 0) {
      #line 2379 
      emg_repeat_cnt_run_resume_21 --;
      #line 2381 
      goto emg_run_resume_21;
    }
    else 
         #line 2383 
         __VERIFIER_assume(0);
  }
  #line 2393 
  return (void *)0;
  #line 2396 
  emg_runt_21: 
               #line 2396 
  ;
  #line 2397 
  if (ldv_undef_int() != 0) {
    #line 2399 
    emg_21_ret = emg_wrapper_igb_runtime_idle(emg_21_device);
    #line 2404 
    emg_21_ret = ldv_post_probe(emg_21_ret);
  }
  else {
    #line 2408 
    emg_21_ret = emg_wrapper_igb_runtime_suspend(emg_21_device);
    #line 2413 
    emg_21_ret = ldv_post_probe(emg_21_ret);
    #line 2414 
    if (emg_21_ret != 0) 
                         #line 2415 
                         emg_runtime_lowpower = 1;
    #line 2418 
    if (ldv_undef_int() != 0) {
      #line 2420 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 2424 
      goto emg_run_resume_21;
    }
    else 
         #line 2429 
         __VERIFIER_assume(emg_21_ret != 0);
  }
  #line 2438 
  return (void *)0;
  #line 2441 
  emg_slate_21: 
                #line 2441 
  ;
  #line 2443 
  if (emg_21_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 2444 
                                                                  emg_21_ret = (*(emg_21_pm_ops->suspend_late))(emg_21_device); else 
                                                                    #line 2446 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2452 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2455 
  if (ldv_undef_int() != 0) {
    #line 2457 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2461 
    goto emg_reslate_21;
  }
  else 
       #line 2466 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2470 
  if (emg_repeat_cnt_slate_21 > 0) {
    #line 2471 
    emg_repeat_cnt_slate_21 --;
    #line 2473 
    goto emg_slate_21;
  }
  else 
       #line 2475 
       __VERIFIER_assume(0);
  #line 2480 
  return (void *)0;
  #line 2483 
  emg_sus_21: 
              #line 2483 
  ;
  #line 2485 
  emg_21_ret = emg_wrapper_igb_suspend(emg_21_device);
  #line 2490 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2493 
  if (ldv_undef_int() != 0) {
    #line 2495 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2498 
    if (ldv_undef_int() != 0) 
                              #line 2500 
                              goto emg_no_irq_21; else 
                                                       #line 2505 
                                                       goto emg_slate_21;
  }
  else {
    #line 2511 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 2514 
    if (emg_repeat_cnt_sus_21 > 0) {
      #line 2515 
      emg_repeat_cnt_sus_21 --;
      #line 2517 
      goto emg_sus_21;
    }
    else 
         #line 2519 
         __VERIFIER_assume(0);
  }
  #line 2525 
  return (void *)0;
  #line 2528 
  emg_th_21: 
             #line 2528 
  ;
  #line 2530 
  emg_21_ret = emg_wrapper_igb_resume(emg_21_device);
  #line 2535 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2538 
  if (ldv_undef_int() != 0) {
    #line 2540 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2544 
    goto emg_compl_21;
  }
  else {
    #line 2549 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 2552 
    if (emg_repeat_cnt_th_21 > 0) {
      #line 2553 
      emg_repeat_cnt_th_21 --;
      #line 2555 
      goto emg_th_21;
    }
    else 
         #line 2557 
         __VERIFIER_assume(0);
  }
  #line 2563 
  return (void *)0;
  #line 2566 
  emg_thlate_21: 
                 #line 2566 
  ;
  #line 2568 
  if (emg_21_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 2569 
                                                                emg_21_ret = (*(emg_21_pm_ops->thaw_early))(emg_21_device); else 
                                                                    #line 2571 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2577 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2580 
  if (ldv_undef_int() != 0) {
    #line 2582 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2586 
    goto emg_th_21;
  }
  else 
       #line 2591 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2595 
  if (emg_repeat_cnt_thlate_21 > 0) {
    #line 2596 
    emg_repeat_cnt_thlate_21 --;
    #line 2598 
    goto emg_thlate_21;
  }
  else 
       #line 2600 
       __VERIFIER_assume(0);
  #line 2605 
  return (void *)0;
  #line 2608 
  emg_tnoirq_21: 
                 #line 2608 
  ;
  #line 2610 
  if (emg_21_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 2611 
                                                                emg_21_ret = (*(emg_21_pm_ops->thaw_noirq))(emg_21_device); else 
                                                                    #line 2613 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2619 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2622 
  if (ldv_undef_int() != 0) {
    #line 2624 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2628 
    goto emg_th_21;
  }
  else 
       #line 2633 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2637 
  if (emg_repeat_cnt_tnoirq_21 > 0) {
    #line 2638 
    emg_repeat_cnt_tnoirq_21 --;
    #line 2640 
    goto emg_tnoirq_21;
  }
  else 
       #line 2642 
       __VERIFIER_assume(0);
  #line 2647 
  return (void *)0;
}

#line 2652  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_8(void *arg0)
{
  #line 2655 
  struct timer_list *emg_22_container;
  #line 2656 
  unsigned long emg_22_emg_param_0_0;
  #line 2658 
  struct emg_struct_timer_scenario_8_22 *data = (struct emg_struct_timer_scenario_8_22 *)arg0;
  #line 2663 
  if (data != (struct emg_struct_timer_scenario_8_22 *)0) {
    #line 2664 
    emg_22_container = data->arg0;
    #line 2665 
    ldv_free((void *)data);
  }
  #line 2671 
  ldv_switch_to_interrupt_context();
  #line 2675 
  if (emg_22_container->function != (void (*)(struct timer_list *))0) 
    #line 2676 
    (*(emg_22_container->function))((struct timer_list *)emg_22_emg_param_0_0);
  #line 2682 
  ldv_switch_to_process_context();
  #line 2689 
  return (void *)0;
}

#line 2694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 2697 
  struct pci_driver *emg_2_pci_driver;
  #line 2699 
  emg_2_pci_driver = emg_alias_igb_driver;
  #line 2700 
  if (ldv_undef_int() != 0) {
    #line 2702 
    emg_2_pci_driver = arg0;
    #line 2706 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 2710 
    return 0;
  }
  else {
    #line 2714 
    return ldv_undef_int_negative();
  }
}

#line 2722  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2725 
  struct net_device *emg_3_netdev;
  #line 2727 
  if (ldv_undef_int() != 0) {
    #line 2729 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2733 
    return emg_3_netdev;
  }
  else 
       #line 2737 
       return (struct net_device *)0;
}

#line 2745  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 2748 
  struct timer_list *emg_4_timer_list;
  #line 2751 
  emg_4_timer_list = arg0;
  #line 2755 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 2756 
  ;
  #line 2756 
  return 0;
}

#line 2762  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 2765 
  int emg_5_line;
  #line 2768 
  emg_5_line = (int)arg0;
  #line 2772 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 2773 
  ;
  #line 2773 
  return (void *)0;
}

#line 2779  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2782 
  struct net_device *emg_6_netdev;
  #line 2785 
  emg_6_netdev = arg0;
  #line 2786 
  ldv_free((void *)emg_6_netdev);
  #line 2789 
  return;
}

#line 2794  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 2797 
  struct timer_list *emg_7_timer_list;
  #line 2799 
  if (ldv_undef_int() != 0) {
    #line 2801 
    emg_7_timer_list = arg0;
    #line 2805 
    emg_dispatch_instance_register_7(emg_7_timer_list);
    #line 2809 
    return 1;
  }
  else 
       #line 2813 
       return 0;
}

#line 2821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2824 
  struct pci_driver *emg_8_pci_driver;
  #line 2826 
  emg_8_pci_driver = emg_alias_igb_driver;
  #line 2828 
  emg_8_pci_driver = arg0;
  #line 2832 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 2835 
  return;
}

#line 2840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2843 
  struct net_device *emg_9_netdev;
  #line 2844 
  int emg_9_ret;
  #line 2847 
  emg_9_ret = ldv_undef_int();
  #line 2848 
  emg_9_ret = ldv_undef_int();
  #line 2849 
  if (ldv_undef_int() != 0) {
    #line 2851 
    emg_9_netdev = arg0;
    #line 2855 
    emg_9_ret = emg_wrapper_igb_open(emg_9_netdev);
    #line 2858 
    if (ldv_undef_int() != 0) {
      #line 2860 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 2864 
      emg_dispatch_register_9(emg_9_netdev);
      #line 2868 
      return 0;
    }
    else {
      #line 2872 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 2873 
      ldv_failed_register_netdev();
      #line 2874 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2879 
    ldv_failed_register_netdev();
    #line 2880 
    return ldv_undef_int_negative();
  }
}

#line 2888  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2891 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 2892 
  void *emg_10_data;
  #line 2893 
  int emg_10_line;
  #line 2894 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 2896 
  emg_10_callback = & emg_wrapper_igb_intr;
  #line 2897 
  if (ldv_undef_int() != 0) {
    #line 2899 
    emg_10_line = (int)arg0;
    #line 2900 
    emg_10_callback = arg1;
    #line 2901 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 2902 
    emg_10_data = arg4;
    #line 2906 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 2910 
    return 0;
  }
  else {
    #line 2914 
    return ldv_undef_int_negative();
  }
}

#line 2922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 2925 
  struct delayed_work *emg_11_delayed_work;
  #line 2926 
  struct work_struct *emg_11_emg_param_0_0;
  #line 2928 
  if (ldv_undef_int() != 0) {
    #line 2930 
    emg_11_delayed_work = arg0;
    #line 2934 
    emg_11_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 2934 
    emg_11_emg_param_0_0 = emg_11_emg_param_0_0;
    #line 2938 
    if (emg_11_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 2939 
      (*(emg_11_delayed_work->work.func))(emg_11_emg_param_0_0);
    #line 2944 
    ldv_free((void *)emg_11_emg_param_0_0);
    #line 2948 
    return (_Bool)1;
  }
  else 
       #line 2952 
       return (_Bool)0;
}

#line 2960  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 2963 
  struct work_struct *emg_12_work_struct;
  #line 2965 
  if (ldv_undef_int() != 0) {
    #line 2967 
    emg_12_work_struct = arg0;
    #line 2971 
    if (emg_12_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2972 
      (*(emg_12_work_struct->func))(emg_12_work_struct);
    #line 2977 
    return (_Bool)1;
  }
  else 
       #line 2981 
       return (_Bool)0;
}

#line 2989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2992 
  struct net_device *emg_13_netdev;
  #line 2995 
  emg_13_netdev = arg0;
  #line 2999 
  emg_wrapper_igb_close(emg_13_netdev);
  #line 3003 
  emg_dispatch_deregister_13(emg_13_netdev);
  #line 3006 
  return;
}

#line 3011  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 3014 
  int emg_1_ret;
  #line 3017 
  emg_1_ret = emg_igb_init_module();
  #line 3018 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 3021 
  if (ldv_undef_int() != 0) {
    #line 3023 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 3027 
    emg_igb_exit_module();
  }
  else 
       #line 3031 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 3035 
  return (void *)0;
}

#line 3040  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 3042 
  ldv_initialize();
  #line 3044 
  emg_entry_point_insmod((void *)0);
  #line 3046 
  return 0;
}

